
AudioMoth-Project.axf:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00035cd8 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .data	00000000 .data
20000b00 l    d  .bss	00000000 .bss
20002608 l    d  .heap	00000000 .heap
20002608 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 ./CMSIS/EFM32WG/startup_efm32wg.o
00000400 l       *ABS*	00000000 Stack_Size
00000c00 l       *ABS*	00000000 Heap_Size
00000000 l    df *ABS*	00000000 crtstuff.c
00035cd4 l     O .text	00000000 __EH_FRAME_BEGIN__
20000a84 l     O .data	00000000 __JCR_LIST__
000000e0 l     F .text	00000000 __do_global_dtors_aux
20000b00 l       .bss	00000000 completed.8122
20000a80 l     O .data	00000000 __do_global_dtors_aux_fini_array_entry
00000104 l     F .text	00000000 frame_dummy
20000b04 l       .bss	00000000 object.8127
20000a7c l     O .data	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 c:/siliconlabs/simplicitystudio/v4/developer/toolchains/gnu_arm/4.9_2015q3/bin/../lib/gcc/arm-none-eabi/4.9.3/../../../../arm-none-eabi/lib/armv7e-m/fpu/crt0.o
00000000 l    df *ABS*	00000000 em_usbd.c
20000b1c l     O .bss	000000d0 device
00000000 l    df *ABS*	00000000 em_usbdch9.c
20000bec l     O .bss	00000004 txBuf
00000000 l    df *ABS*	00000000 em_usbdep.c
20000bf0 l     O .bss	00000001 statusIn.6431
20000bf4 l     O .bss	00000004 callback.6433
20000bf8 l     O .bss	00000004 xferred.6432
00000000 l    df *ABS*	00000000 em_usbdint.c
000011e4 l     F .text	000000c0 RestoreEpCtrlRegisters
000012a4 l     F .text	000001a4 UsbPowerDown.part.4
00001448 l     F .text	00000100 UsbPowerUp.part.5
20000bfc l     O .bss	00000008 x_USB_EP_CTL
20000c04 l     O .bss	00000004 x_USB_GNPTXFSIZ
20000c08 l     O .bss	00000004 x_USB_GRXFSIZ
20000c0c l     O .bss	00000008 x_USB_EP_DMAADDR
20000c14 l     O .bss	00000004 cmuStatus
20000c18 l     O .bss	00000004 x_USB_DAINTMSK
20000c1c l     O .bss	00000004 x_USB_GAHBCFG
20000c20 l     O .bss	00000004 x_USB_GINTMSK
20000c24 l     O .bss	00000008 x_USB_DIEPTXFS
20000c2c l     O .bss	00000004 x_USB_GUSBCFG
20000c30 l     O .bss	00000004 x_USB_DCFG
20000c34 l     O .bss	00000004 x_USB_DOEPMSK
20000c38 l     O .bss	00000008 x_USB_EP_TSIZ
20000c40 l     O .bss	00000004 x_USB_GOTGCTL
20000c48 l     O .bss	00000004 x_USB_DIEPMSK
20000c4c l     O .bss	00000004 x_USB_DCTL
20000c50 l     O .bss	00000004 x_USB_PCGCCTL
00000000 l    df *ABS*	00000000 em_usbhal.c
00000000 l    df *ABS*	00000000 audioMoth.c
0000203c l     F .text	00000334 setupGPIO
00002370 l     F .text	00000044 transferComplete
20000c54 l     O .bss	0000000c cb
20000c60 l     O .bss	00000234 fatfs
20000e94 l     O .bss	00000002 numberOfSamplesPerTransfer
20000e98 l     O .bss	00000224 file
200010bc l     O .bss	00000001 delayTimmerRunning
200010be l     O .bss	00000002 bw
00000000 l    df *ABS*	00000000 diskio.c
200010c0 l     O .bss	00000002 CardType
20000004 l     O .data	00000001 stat
00000000 l    df *ABS*	00000000 em_acmp.c
00000000 l    df *ABS*	00000000 em_adc.c
00000000 l    df *ABS*	00000000 em_burtc.c
00000000 l    df *ABS*	00000000 em_cmu.c
00003784 l     F .text	00000144 lfClkGet
00000000 l    df *ABS*	00000000 em_core.c
00000000 l    df *ABS*	00000000 em_dma.c
00000000 l    df *ABS*	00000000 em_ebi.c
00000000 l    df *ABS*	00000000 em_emu.c
00000000 l    df *ABS*	00000000 em_gpio.c
00000000 l    df *ABS*	00000000 em_opamp.c
00000000 l    df *ABS*	00000000 em_prs.c
00000000 l    df *ABS*	00000000 em_rmu.c
00000000 l    df *ABS*	00000000 em_system.c
00000000 l    df *ABS*	00000000 em_timer.c
00000000 l    df *ABS*	00000000 em_usart.c
00000000 l    df *ABS*	00000000 em_wdog.c
00000000 l    df *ABS*	00000000 microsd.c
200010c4 l     O .bss	00000004 xfersPrMsec
200010c8 l     O .bss	00000004 timeOut
00000000 l    df *ABS*	00000000 system_efm32wg.c
20000008 l     O .data	00000004 SystemLFXOClock
2000000c l     O .data	00000004 SystemHFXOClock
00000000 l    df *ABS*	00000000 audioMoth_ff.c
00005d18 l     F .text	0000007a move_window
00005d94 l     F .text	0000010c sync
00005ea0 l     F .text	000002c8 put_fat.part.4
00006168 l     F .text	000002f0 remove_chain.part.6
00006458 l     F .text	0000028e get_fat.part.3
000066e8 l     F .text	000000a8 dir_sdi
00006790 l     F .text	00000376 create_chain
00006b08 l     F .text	00000088 dir_next.constprop.11
00006b90 l     F .text	0000033c dir_find.part.5
00006ecc l     F .text	000003f4 follow_path
00007514 l     F .text	000005fa dir_register
200010cc l     O .bss	00000001 CurrVol
200010ce l     O .bss	00000002 Fsid
200010d0 l     O .bss	00000200 LfnBuf
0000d0d8 l     O .text	0000000d LfnOfs
200012d0 l     O .bss	00000004 FatFs
00000000 l    df *ABS*	00000000 predictor.c
20000014 l     O .data	00000860 filterbanks
00000000 l    df *ABS*	00000000 arm_q15_to_float.c
00000000 l    df *ABS*	00000000 arm_float_to_q7.c
00000000 l    df *ABS*	00000000 arm_min_f32.c
00000000 l    df *ABS*	00000000 arm_max_f32.c
00000000 l    df *ABS*	00000000 arm_rfft_fast_init_f32.c
00000000 l    df *ABS*	00000000 arm_rfft_fast_f32.c
00000000 l    df *ABS*	00000000 arm_cfft_f32.c
00000000 l    df *ABS*	00000000 arm_cmplx_mag_f32.c
00000000 l    df *ABS*	00000000 arm_cos_f32.c
00000000 l    df *ABS*	00000000 arm_scale_f32.c
00000000 l    df *ABS*	00000000 arm_mult_f32.c
00000000 l    df *ABS*	00000000 arm_bitreversal2.o
00009b5c l       .text	00000000 arm_bitreversal_32_0
00009bc6 l       .text	00000000 arm_bitreversal_16_0
00000000 l    df *ABS*	00000000 arm_cfft_radix8_f32.c
00000000 l    df *ABS*	00000000 w_log.c
00000000 l    df *ABS*	00000000 wf_sqrt.c
00000000 l    df *ABS*	00000000 e_log.c
00000000 l    df *ABS*	00000000 ef_sqrt.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 sf_fpclassify.c
00000000 l    df *ABS*	00000000 main2.c
0000ab00 l     F .text	000005b0 makeRecording.constprop.1
00020e88 l     O .text	00000001 dense4_bias
00020e8c l     O .text	00001000 dense2_wt
200012d4 l     O .bss	00000020 read_buffers
00021e8c l     O .text	00000040 dense4_wt
200012f4 l     O .bss	00000004 previousSample
200012f8 l     O .bss	00000014 fileName
2000130c l     O .bss	00000001 bitsToShift
20001310 l     O .bss	00000014 resultsFileName
20001324 l     O .bss	00000800 primaryBuffer
00022038 l     O .text	00000040 dense1_bias
00022078 l     O .text	00000040 dense3_bias
20001b24 l     O .bss	00000004 writeBuffer
000220b8 l     O .text	00012b40 dense1_wt
20001b28 l     O .bss	00000004 previousFilterOutput
20001b2c l     O .bss	00000004 readBuffer
00034bf8 l     O .text	00001000 dense3_wt
20001b30 l     O .bss	00000001 switchPositionChanged
20001b34 l     O .bss	00000800 secondaryBuffer
20002334 l     O .bss	00000004 writeBufferIndex
20002338 l     O .bss	00000020 write_buffers
200008b0 l     O .data	00000168 wavHeader
00035bf8 l     O .text	00000040 dense2_bias
00000000 l    df *ABS*	00000000 arm_fully_connected_q7.c
00000000 l    df *ABS*	00000000 arm_relu_q7.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 gmtime.c
00000000 l    df *ABS*	00000000 gmtime_r.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000c310 l     F .text	00000048 std.isra.0
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
0000c7c8 l     F .text	0000002c __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 close.c
00000000 l    df *ABS*	00000000 fstat.c
00000000 l    df *ABS*	00000000 isatty.c
00000000 l    df *ABS*	00000000 lseek.c
00000000 l    df *ABS*	00000000 read.c
00000000 l    df *ABS*	00000000 sbrk.c
20002360 l     O .bss	00000004 heap_end.4079
00000000 l    df *ABS*	00000000 _exit.c
00000000 l    df *ABS*	00000000 c:/siliconlabs/simplicitystudio/v4/developer/toolchains/gnu_arm/4.9_2015q3/bin/../lib/gcc/arm-none-eabi/4.9.3/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/siliconlabs/simplicitystudio/v4/developer/toolchains/gnu_arm/4.9_2015q3/bin/../lib/gcc/arm-none-eabi/4.9.3/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 arm_common_tables.c
00000000 l    df *ABS*	00000000 impure.c
20000a18 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 crtstuff.c
00035cd4 l     O .text	00000000 __FRAME_END__
20000a84 l     O .data	00000000 __JCR_END__
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 dmactrl.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00035ce0 l       .ARM.exidx	00000000 __exidx_end
00035cd8 l       .text	00000000 __exidx_start
20000a80 l       .data	00000000 __init_array_end
20000a7c l       .data	00000000 __preinit_array_end
20000a7c l       .data	00000000 __init_array_start
20000a7c l       .data	00000000 __preinit_array_start
0000cf4c g     F .text	00000014 _malloc_usable_size_r
00002f90 g     F .text	000000c8 AudioMoth_setupSWOForPrint
20002608 g       .heap	00000c00 __HeapBase
0000ce44 g     F .text	00000020 _isatty_r
0000bb78 g     F .text	00000012 .hidden __aeabi_dcmple
00005b24  w    F .text	00000002 TIMER2_IRQHandler
0000bab4 g     F .text	0000007a .hidden __cmpdf2
00000000 g       .text	000000e0 __Vectors
0000ce64 g     F .text	00000024 _lseek_r
00005b24  w    F .text	00000002 DebugMon_Handler
0000a1f0 g     F .text	0000010c log
20000c44 g     O .bss	00000001 USBD_poweredDown
0001e7ec g     O .text	00000800 twiddleCoef_rfft_512
000054e8 g     F .text	00000014 USART_SpiTransfer
00000e58 g     F .text	00000320 USBDEP_Ep0Handler
00003524 g     F .text	00000010 ACMP_ChannelSet
00009710 g     F .text	000000f2 arm_cfft_f32
00005b24  w    F .text	00000002 USART0_TX_IRQHandler
000036c8 g     F .text	0000003c ADC_TimebaseCalc
0000bab4 g     F .text	0000007a .hidden __eqdf2
000089d8 g     F .text	000000c8 forward_propagate_q7_dnn
00003ca8 g     F .text	000001b0 CMU_ClockFreqGet
20000000 g       .data	00000000 __data_start__
0000a908 g     F .text	000001f8 setHeaderComment
00008730 g     F .text	000002a8 wave_to_spectrogram
0000b624 g     F .text	0000005a .hidden __floatdidf
00005b24  w    F .text	00000002 I2C0_IRQHandler
0000bf90 g     F .text	00000030 printf
00005814 g     F .text	0000010c MICROSD_BlockTx
200008ac g     O .data	00000004 durationOfNextRecording
0000cdae g     F .text	00000024 __sseek
0000c384 g     F .text	00000060 __sinit
0000c028 g     F .text	000000a8 __swbuf_r
00005b24  w    F .text	00000002 HardFault_Handler
00005190 g     F .text	0000001e RMU_ResetControl
20000000 g     O .data	00000004 dev
0000c358 g     F .text	0000002c __sfmoreglue
00005b24  w    F .text	00000002 LEUART1_IRQHandler
000023b4 g     F .text	000001c8 AudioMoth_initialise
00005b24  w    F .text	00000002 SysTick_Handler
00005b24  w    F .text	00000002 USART1_RX_IRQHandler
0000cea6 g     F .text	00000036 memmove
00002cf0 g     F .text	000000a0 AudioMoth_getTime
00005b24  w    F .text	00000002 PendSV_Handler
00005b24  w    F .text	00000002 NMI_Handler
00005404 g     F .text	00000024 USART_BaudrateSyncSet
2000087c g     O .data	0000002a defaultConfigSettings
00005ae8 g     F .text	00000010 MICROSD_TimeOutElapsed
00004d7c g     F .text	00000078 GPIO_ExtIntConfig
00005b24  w    F .text	00000002 I2C1_IRQHandler
0000baa4 g     F .text	0000008a .hidden __gtdf2
0000bc54 g     F .text	0000000c __errno
00035ce0 g       .ARM.exidx	00000000 __etext
00004244 g     F .text	00000074 CMU_OscillatorEnable
00019c10 g     O .text	00000100 twiddleCoef_32
000053bc g     F .text	00000048 TIMER_Reset
0000b138 g     F .text	0000000c AudioMoth_handleSwitchInterrupt
0000ce20 g     F .text	00000024 _fstat_r
20002600 g     O .bss	00000004 errno
0000bb40 g     F .text	00000010 .hidden __aeabi_cdcmple
000044d4 g     F .text	000000d8 DMA_Init
00002f3c g     F .text	00000018 ff_wtoupper
0000a2fc g     F .text	000000b8 sqrtf
0000052c g     F .text	0000092c USBDCH9_SetupCmd
00005b24  w    F .text	00000002 TIMER3_IRQHandler
00003518 g     F .text	0000000a ACMP_Disable
00002f20 g     F .text	00000014 AudioMoth_closeFile
00005b24  w    F .text	00000002 USART1_TX_IRQHandler
0000be34 g     F .text	00000016 memcpy
00003be0 g     F .text	000000c8 CMU_ClockSelectGet
0000bb30 g     F .text	00000020 .hidden __aeabi_cdrcmple
0000c304 g     F .text	0000000c _cleanup_r
00009bb6 g     F .text	00000000 arm_bitreversal_16
0000c5e4 g     F .text	000001e4 _svfprintf_r
0000b5b4 g     F .text	00000022 .hidden __floatsidf
0001e5ec g     O .text	00000200 twiddleCoef_64
0000baac g     F .text	00000082 .hidden __ltdf2
00003058 g     F .text	00000134 disk_initialize
00005b24  w    F .text	00000002 MSC_IRQHandler
20000010 g     O .data	00000004 SystemCoreClock
0000a85c g     F .text	0000005c __fpclassifyd
00002c3c g     F .text	00000024 AudioMoth_disableBatteryMonitor
00002590 g     F .text	00000024 ADC0_IRQHandler
0000be24 g     F .text	00000010 malloc
00017b90 g     O .text	00000080 twiddleCoef_16
0000cf70 g     F .text	00000010 _fstat
00004444 g     F .text	00000054 DMA_CfgChannel
0001f36c g     O .text	00001000 twiddleCoef_rfft_1024
000042c0  w    F .text	00000006 CORE_ExitAtomic
00005b24  w    F .text	00000002 UsageFault_Handler
00005ad0 g     F .text	00000018 MICROSD_TimeOutSet
0000318c g     F .text	00000010 disk_status
20003208 g       .heap	00000000 __HeapLimit
0000a8d0 g     F .text	00000038 __fpclassifyf
20000b00 g       .bss	00000000 __bss_start__
00005b24  w    F .text	00000002 LEUART0_IRQHandler
0000b594 g     F .text	0000001e .hidden __aeabi_ui2d
00005c04 g     F .text	00000008 SystemMaxCoreClockGet
00005b24  w    F .text	00000002 FPUEH_IRQHandler
00009804 g     F .text	000001d0 arm_cmplx_mag_f32
0000b310 g     F .text	00000000 .hidden __aeabi_drsub
00008aa0 g     F .text	000000a0 arm_q15_to_float
0000bfc0 g     F .text	00000020 _sbrk_r
00005d0c g     F .text	0000000c SystemLFXOClockGet
0000cf28 g     F .text	00000024 _read_r
0000257c g     F .text	00000014 GPIO_EVEN_IRQHandler
000032fc g     F .text	0000021c disk_ioctl
0000bb64 g     F .text	00000012 .hidden __aeabi_dcmplt
00003e58 g     F .text	000000bc CMU_ClockEnable
00005b24  w    F .text	00000002 UART0_TX_IRQHandler
0000b5d8 g     F .text	0000003a .hidden __extendsfdf2
0000b8d4 g     F .text	000001d0 .hidden __aeabi_ddiv
00005b24  w    F .text	00000002 UART1_TX_IRQHandler
0000b31c g     F .text	00000276 .hidden __adddf3
000072c0 g     F .text	00000254 gen_numname
0000b680 g     F .text	00000254 .hidden __aeabi_dmul
0000cf80 g     F .text	00000010 _isatty
20000874 g     O .data	00000001 __fdlib_version
00035c3c g     O .text	00000004 _global_impure_ptr
00002ec4 g     F .text	00000018 AudioMoth_openFile
0000cedc g     F .text	0000004c _realloc_r
0000bdd8 g     F .text	0000004c __libc_init_array
0001abc8 g     O .text	00000060 armBitRevIndexTable32
0000013c g     F .text	00000000 _mainCRTStartup
0002076c g     O .text	00000370 armBitRevIndexTable256
0000b594 g     F .text	0000001e .hidden __floatunsidf
0000cfb0 g     F .text	0000001c _sbrk
00005428 g     F .text	000000c0 USART_InitSync
00011390 g     O .text	00002000 twiddleCoef_rfft_2048
0000bcac g     F .text	0000012c gmtime_r
00002bc8 g     F .text	00000014 AudioMoth_sleep
0000cfd0 g     F .text	00000000 _init
0000b144 g     F .text	00000002 AudioMoth_handleMicrophoneInterrupt
0000bbb4 g     F .text	0000009e .hidden __aeabi_d2f
00008d58 g     F .text	000000d0 arm_max_f32
00000000  w      *UND*	00000000 __libc_fini_array
00005b24  w    F .text	00000002 RTC_IRQHandler
00005b24  w    F .text	00000002 TIMER0_IRQHandler
0000563c g     F .text	00000024 MICROSD_Deselect
00005af8 g     F .text	0000002c Reset_Handler
000051b0 g     F .text	0000003c RMU_ResetCauseClear
000026e0 g     F .text	00000220 AudioMoth_enableMicrophone
00005b24  w    F .text	00000002 LCD_IRQHandler
0001efec g     O .text	00000380 armBitRevIndexTable512
00004d50 g     F .text	0000002c EMU_EM4Init
00005b24  w    F .text	00000002 PCNT2_IRQHandler
00001178 g     F .text	0000006c USBDEP_EpHandler
0001c82c g     O .text	00001dc0 armBitRevIndexTable2048
00005b24  w    F .text	00000002 UART0_RX_IRQHandler
00005b24  w    F .text	00000002 LETIMER0_IRQHandler
0000b31c g     F .text	00000276 .hidden __aeabi_dadd
0000baac g     F .text	00000082 .hidden __ledf2
00008f2c g     F .text	00000186 arm_rfft_fast_f32
00009c0c g     F .text	000005e2 arm_radix8_butterfly_f32
0000b614 g     F .text	0000006a .hidden __aeabi_ul2d
000025b4 g     F .text	00000018 TIMER1_IRQHandler
00035c80 g     O .text	00000020 __sf_fake_stderr
00000000  w      *UND*	00000000 __deregister_frame_info
20002608 g       .heap	00000000 end
000000e0 g       .text	00000000 __Vectors_Size
0000c530 g     F .text	000000b2 __ssputs_r
20000a88 g       .data	00000000 __data_end__
20002400 g     O .bss	00000200 dmaControlBlock
00003f14 g     F .text	00000330 CMU_ClockSelectSet
00005660 g     F .text	00000064 MICROSD_Select
0000bba0 g     F .text	00000012 .hidden __aeabi_dcmpgt
0000c7f4 g     F .text	00000024 __sfputs_r
00020cdc g     O .text	000001a0 armBitRevIndexTable128
0000ce88 g     F .text	0000001e memchr
00000000  w      *UND*	00000000 _printf_float
20002604 g       .bss	00000000 __bss_end__
0000be5c g     F .text	00000088 _free_r
0000bb8c g     F .text	00000012 .hidden __aeabi_dcmpge
20000878 g     O .data	00000004 timeOfNextRecording
00000000  w      *UND*	00000000 __call_exitprocs
00005b24  w    F .text	00000002 USART2_RX_IRQHandler
00008474 g     F .text	00000130 f_close
0000b318 g     F .text	0000027a .hidden __aeabi_dsub
00005c0c g     F .text	000000d0 SystemHFClockGet
00005b24  w    F .text	00000002 Default_Handler
0000013c g     F .text	00000000 _start
0001ac28 g     O .text	00000804 sinTable_f32
00002e80 g     F .text	00000044 AudioMoth_enableFileSystem
0000b614 g     F .text	0000006a .hidden __floatundidf
0000cf90 g     F .text	00000010 _lseek
00005b24  w    F .text	00000002 EMU_IRQHandler
0000360c g     F .text	000000bc ADC_InitSingle
00005540 g     F .text	00000048 WDOGn_Init
0000530c g     F .text	000000ae TIMER_Init
0000b148 g     F .text	00000140 AudioMoth_handleDirectMemoryAccessInterrupt
00002ef4 g     F .text	0000002c AudioMoth_writeToFile
00002e74 g     F .text	0000000c AudioMoth_setGreenLED
00005588 g     F .text	00000098 MICROSD_Init
00005b24  w    F .text	00000002 PCNT0_IRQHandler
00005920 g     F .text	0000016c MICROSD_SendCmd
0001b42c g     O .text	00000400 twiddleCoef_128
00009ac0 g     F .text	0000008c arm_mult_f32
00017390 g     O .text	00000800 twiddleCoef_256
00000000  w      *UND*	00000000 software_init_hook
0000d220 g     O .text	00004000 twiddleCoef_2048
00005cdc g     F .text	0000000c SystemHFXOClockGet
00008c88 g     F .text	000000d0 arm_min_f32
0000ce00 g     F .text	00000020 _close_r
0000b5b4 g     F .text	00000022 .hidden __aeabi_i2d
0000b288 g     F .text	0000006a arm_fully_connected_q7
00004624 g     F .text	0000072c EBI_Init
00001548 g     F .text	00000638 USB_IRQHandler
00009a54 g     F .text	0000006c arm_scale_f32
00005b24  w    F .text	00000002 BURTC_IRQHandler
0000c0d0 g     F .text	000000d8 __swsetup_r
00005aac g     F .text	00000024 MICROSD_SpiClkFast
0000b8d4 g     F .text	000001d0 .hidden __divdf3
0000c3e4 g     F .text	00000074 __sfp
0000b680 g     F .text	00000254 .hidden __muldf3
0000cd54 g     F .text	00000022 __sread
00002d90 g     F .text	000000b8 get_fattime
00005b24  w    F .text	00000002 PCNT1_IRQHandler
0000c2b0 g     F .text	00000054 _fflush_r
00002edc g     F .text	00000018 AudioMoth_seekInFile
00005b24  w    F .text	00000002 ACMP0_IRQHandler
00035c40 g     O .text	00000020 __sf_fake_stdin
000045ac g     F .text	00000078 DMA_RefreshPingPong
00005b24  w    F .text	00000002 USART0_RX_IRQHandler
0000be4a g     F .text	00000010 memset
0000a7b8 g     F .text	000000a2 __ieee754_sqrtf
00005b24  w    F .text	00000002 MemManage_Handler
0000b0b0 g     F .text	00000078 main
00005b24  w    F .text	00000002 SVC_Handler
0000cdd2 g     F .text	00000008 __sclose
0000a8b8 g     F .text	00000004 matherr
0000bbb4 g     F .text	0000009e .hidden __truncdfsf2
00020adc g     O .text	00000200 twiddleCoef_rfft_128
0000bee4 g     F .text	000000ac _malloc_r
0000b624 g     F .text	0000005a .hidden __aeabi_l2d
0001b82c g     O .text	00001000 twiddleCoef_512
00005a8c g     F .text	00000020 MICROSD_SpiClkSlow
00019d10 g     O .text	00000e10 armBitRevIndexTable1024
00007b10 g     F .text	00000030 f_mount
00000000  w      *UND*	00000000 hardware_init_hook
20002608 g       .heap	00000000 __end__
000052e0 g     F .text	0000002c SYSTEM_GetCalibrationValue
200008a8 g     O .data	00000004 configSettings
00004e90 g     F .text	000002e2 OPAMP_Enable
00004df4 g     F .text	0000009c GPIO_PinModeSet
00009b4c g     F .text	00000000 arm_bitreversal_32
00008b40 g     F .text	00000148 arm_float_to_q7
00002c60 g     F .text	00000090 AudioMoth_getBatteryState
00004498 g     F .text	0000003c DMA_CfgDescr
00005ce8 g     F .text	00000014 SystemInit
00011220 g     O .text	00000100 twiddleCoef_rfft_64
00000364 g     F .text	0000002c USBD_SetUsbState
00005174 g     F .text	0000001c PRS_SourceSignalSet
0000b2f4 g     F .text	0000001c arm_relu_q7
00001f6c g     F .text	000000d0 USBDHAL_AbortAllTransfers
0000bab4 g     F .text	0000007a .hidden __nedf2
00005d04 g     F .text	00000006 SystemULFRCOClockGet
0000cfdc g     F .text	00000000 _fini
0000bf90 g     F .text	00000030 iprintf
000085a4 g     F .text	0000018c f_lseek
000038c8 g     F .text	00000318 CMU_ClockDivSet
0000bfe0 g     F .text	00000048 sprintf
00002e54 g     F .text	00000020 AudioMoth_setBothLED
00005b24  w    F .text	00000002 DAC0_IRQHandler
00005b24  w    F .text	00000002 UART1_RX_IRQHandler
00000000  w      *UND*	00000000 atexit
0000cddc g     F .text	00000024 _write_r
20008000 g       *ABS*	00000000 __StackTop
0000ca28 g     F .text	000000ea _printf_common
20000a78 g     O .data	00000004 _impure_ptr
000099d4 g     F .text	00000080 arm_cos_f32
00002ae0 g     F .text	000000e8 AudioMoth_delay
0000c1a8 g     F .text	00000108 __sflush_r
00002900 g     F .text	000001e0 AudioMoth_enableExternalSRAM
00005b24  w    F .text	00000002 CMU_IRQHandler
0000a3b8 g     F .text	00000400 __ieee754_log
000042b8  w    F .text	00000008 CORE_EnterAtomic
00005b24  w    F .text	00000002 EBI_IRQHandler
0000c5e4 g     F .text	000001e4 _svfiprintf_r
0000b128 g     F .text	00000010 AudioMoth_timezoneRequested
00005cfc g     F .text	00000006 SystemLFRCOClockGet
0002036c g     O .text	00000400 twiddleCoef_rfft_256
00005b28 g     F .text	000000dc SystemCoreClockGet
0000a8c0 g     F .text	00000010 nan
00000390 g     F .text	0000019c USBD_Write
00003598 g     F .text	00000074 ADC_Init
000000e0 g       .text	00000000 __Vectors_End
20008000 g       *ABS*	00000000 __stack
00003704 g     F .text	00000080 BURTC_Init
0000bb50 g     F .text	00000012 .hidden __aeabi_dcmpeq
0000434c g     F .text	000000f8 DMA_ActivatePingPong
00002f54 g     F .text	0000003c _write
00002bf4 g     F .text	00000048 AudioMoth_setBatteryMonitorThreshold
20002608 g       .heap	00000000 _end
00009254 g     F .text	000004ba arm_cfft_radix8by4_f32
00005b24  w    F .text	00000002 LESENSE_IRQHandler
00005b24  w    F .text	00000002 GPIO_ODD_IRQHandler
00005b24  w    F .text	00000002 AES_IRQHandler
000001b0 g     F .text	00000010 USBD_GetUsbState
0000819c g     F .text	000002d8 f_write
000051ec g     F .text	000000f4 RMU_ResetCauseGet
00011320 g     O .text	00000070 armBitRevIndexTable64
20007c00 g       *ABS*	00000400 __StackLimit
0000cd76 g     F .text	00000038 __swrite
000025cc g     F .text	00000050 AudioMoth_startMicrophoneSamples
00007b40 g     F .text	0000065c f_open
00005b24  w    F .text	00000002 VCMP_IRQHandler
00003238 g     F .text	000000c4 disk_write
0000bc60 g     F .text	00000028 exit
0000c818 g     F .text	00000210 _vfiprintf_r
0000c458 g     F .text	0000003c _fwalk_reent
00008e28 g     F .text	00000104 arm_rfft_fast_init_f32
0000261c g     F .text	000000c4 AudioMoth_initialiseDirectMemoryAccess
00017c10 g     O .text	00002000 twiddleCoef_1024
000042c8 g     F .text	00000084 DMA_IRQHandler
000056c4 g     F .text	0000000c MICROSD_PowerOn
00035c60 g     O .text	00000020 __sf_fake_stdout
0000bfe0 g     F .text	00000048 siprintf
0001ab48 g     O .text	00000080 twiddleCoef_rfft_32
0000cfa0 g     F .text	00000010 _read
0000cfcc g     F .text	00000002 _exit
00002bdc g     F .text	00000018 AudioMoth_enableBatteryMonitor
000001c0 g     F .text	000001a4 USBD_Read
00005754 g     F .text	000000c0 MICROSD_BlockRx
0000bc88 g     F .text	00000024 gmtime
00005b24  w    F .text	00000002 BusFault_Handler
0000c494 g     F .text	0000009c __smakebuf_r
0000319c g     F .text	0000009c disk_read
0000cb14 g     F .text	00000240 _printf_i
0000bb40 g     F .text	00000010 .hidden __aeabi_cdcmpeq
0000baa4 g     F .text	0000008a .hidden __gedf2
20002358 g     O .bss	00000004 __malloc_sbrk_start
00013390 g     O .text	00004000 twiddleCoef_rfft_4096
00002f34 g     F .text	00000008 ff_convert
0000b5d8 g     F .text	0000003a .hidden __aeabi_f2d
00005b24  w    F .text	00000002 USART2_TX_IRQHandler
2000235c g     O .bss	00000004 __malloc_free_list
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00005620 g     F .text	0000001c MICROSD_XferSpi
0000b318 g     F .text	0000027a .hidden __subdf3
0000c818 g     F .text	00000210 _vfprintf_r
00005528 g     F .text	00000018 WDOGn_Feed
00000000  w      *UND*	00000000 __register_frame_info
000054fc g     F .text	0000002a WDOGn_Enable
000090b4 g     F .text	000001a0 arm_cfft_radix8by2_f32
0001ab20 g     O .text	00000028 armBitRevIndexTable16
00001b80 g     F .text	000003ec USBDHAL_AbortAllEps
00003534 g     F .text	00000062 ACMP_Init
00002e48 g     F .text	0000000c AudioMoth_setRedLED
0000cf60 g     F .text	00000010 _close
000056d0 g     F .text	00000084 MICROSD_PowerOff



Disassembly of section .text:

00000000 <__Vectors>:
       0:	20008000 	.word	0x20008000
       4:	00005af9 	.word	0x00005af9
       8:	00005b25 	.word	0x00005b25
       c:	00005b25 	.word	0x00005b25
      10:	00005b25 	.word	0x00005b25
      14:	00005b25 	.word	0x00005b25
      18:	00005b25 	.word	0x00005b25
      1c:	00005b25 	.word	0x00005b25
      20:	00005b25 	.word	0x00005b25
      24:	00005b25 	.word	0x00005b25
      28:	00005b25 	.word	0x00005b25
      2c:	00005b25 	.word	0x00005b25
      30:	00005b25 	.word	0x00005b25
      34:	00005b25 	.word	0x00005b25
      38:	00005b25 	.word	0x00005b25
      3c:	00005b25 	.word	0x00005b25
      40:	000042c9 	.word	0x000042c9
      44:	0000257d 	.word	0x0000257d
      48:	00005b25 	.word	0x00005b25
      4c:	00005b25 	.word	0x00005b25
      50:	00005b25 	.word	0x00005b25
      54:	00001549 	.word	0x00001549
      58:	00005b25 	.word	0x00005b25
      5c:	00002591 	.word	0x00002591
      60:	00005b25 	.word	0x00005b25
      64:	00005b25 	.word	0x00005b25
      68:	00005b25 	.word	0x00005b25
      6c:	00005b25 	.word	0x00005b25
      70:	000025b5 	.word	0x000025b5
      74:	00005b25 	.word	0x00005b25
      78:	00005b25 	.word	0x00005b25
      7c:	00005b25 	.word	0x00005b25
      80:	00005b25 	.word	0x00005b25
      84:	00005b25 	.word	0x00005b25
      88:	00005b25 	.word	0x00005b25
      8c:	00005b25 	.word	0x00005b25
      90:	00005b25 	.word	0x00005b25
      94:	00005b25 	.word	0x00005b25
      98:	00005b25 	.word	0x00005b25
      9c:	00005b25 	.word	0x00005b25
      a0:	00005b25 	.word	0x00005b25
      a4:	00005b25 	.word	0x00005b25
      a8:	00005b25 	.word	0x00005b25
      ac:	00005b25 	.word	0x00005b25
      b0:	00005b25 	.word	0x00005b25
      b4:	00005b25 	.word	0x00005b25
      b8:	00005b25 	.word	0x00005b25
      bc:	00005b25 	.word	0x00005b25
      c0:	00005b25 	.word	0x00005b25
      c4:	00005b25 	.word	0x00005b25
      c8:	00005b25 	.word	0x00005b25
      cc:	00005b25 	.word	0x00005b25
      d0:	00005b25 	.word	0x00005b25
      d4:	00005b25 	.word	0x00005b25
      d8:	00005b25 	.word	0x00005b25
      dc:	00005b25 	.word	0x00005b25

000000e0 <__do_global_dtors_aux>:
      e0:	b510      	push	{r4, lr}
      e2:	4c05      	ldr	r4, [pc, #20]	; (f8 <__do_global_dtors_aux+0x18>)
      e4:	7823      	ldrb	r3, [r4, #0]
      e6:	b933      	cbnz	r3, f6 <__do_global_dtors_aux+0x16>
      e8:	4b04      	ldr	r3, [pc, #16]	; (fc <__do_global_dtors_aux+0x1c>)
      ea:	b113      	cbz	r3, f2 <__do_global_dtors_aux+0x12>
      ec:	4804      	ldr	r0, [pc, #16]	; (100 <__do_global_dtors_aux+0x20>)
      ee:	f3af 8000 	nop.w
      f2:	2301      	movs	r3, #1
      f4:	7023      	strb	r3, [r4, #0]
      f6:	bd10      	pop	{r4, pc}
      f8:	20000b00 	.word	0x20000b00
      fc:	00000000 	.word	0x00000000
     100:	00035cd4 	.word	0x00035cd4

00000104 <frame_dummy>:
     104:	4b08      	ldr	r3, [pc, #32]	; (128 <frame_dummy+0x24>)
     106:	b510      	push	{r4, lr}
     108:	b11b      	cbz	r3, 112 <frame_dummy+0xe>
     10a:	4808      	ldr	r0, [pc, #32]	; (12c <frame_dummy+0x28>)
     10c:	4908      	ldr	r1, [pc, #32]	; (130 <frame_dummy+0x2c>)
     10e:	f3af 8000 	nop.w
     112:	4808      	ldr	r0, [pc, #32]	; (134 <frame_dummy+0x30>)
     114:	6803      	ldr	r3, [r0, #0]
     116:	b903      	cbnz	r3, 11a <frame_dummy+0x16>
     118:	bd10      	pop	{r4, pc}
     11a:	4b07      	ldr	r3, [pc, #28]	; (138 <frame_dummy+0x34>)
     11c:	2b00      	cmp	r3, #0
     11e:	d0fb      	beq.n	118 <frame_dummy+0x14>
     120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     124:	4718      	bx	r3
     126:	bf00      	nop
     128:	00000000 	.word	0x00000000
     12c:	00035cd4 	.word	0x00035cd4
     130:	20000b04 	.word	0x20000b04
     134:	20000a84 	.word	0x20000a84
     138:	00000000 	.word	0x00000000

0000013c <_mainCRTStartup>:
     13c:	4b15      	ldr	r3, [pc, #84]	; (194 <_mainCRTStartup+0x58>)
     13e:	2b00      	cmp	r3, #0
     140:	bf08      	it	eq
     142:	4b13      	ldreq	r3, [pc, #76]	; (190 <_mainCRTStartup+0x54>)
     144:	469d      	mov	sp, r3
     146:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
     14a:	2100      	movs	r1, #0
     14c:	468b      	mov	fp, r1
     14e:	460f      	mov	r7, r1
     150:	4813      	ldr	r0, [pc, #76]	; (1a0 <_mainCRTStartup+0x64>)
     152:	4a14      	ldr	r2, [pc, #80]	; (1a4 <_mainCRTStartup+0x68>)
     154:	1a12      	subs	r2, r2, r0
     156:	f00b fe78 	bl	be4a <memset>
     15a:	4b0f      	ldr	r3, [pc, #60]	; (198 <_mainCRTStartup+0x5c>)
     15c:	2b00      	cmp	r3, #0
     15e:	d000      	beq.n	162 <_mainCRTStartup+0x26>
     160:	4798      	blx	r3
     162:	4b0e      	ldr	r3, [pc, #56]	; (19c <_mainCRTStartup+0x60>)
     164:	2b00      	cmp	r3, #0
     166:	d000      	beq.n	16a <_mainCRTStartup+0x2e>
     168:	4798      	blx	r3
     16a:	2000      	movs	r0, #0
     16c:	2100      	movs	r1, #0
     16e:	0004      	movs	r4, r0
     170:	000d      	movs	r5, r1
     172:	480d      	ldr	r0, [pc, #52]	; (1a8 <_mainCRTStartup+0x6c>)
     174:	2800      	cmp	r0, #0
     176:	d002      	beq.n	17e <_mainCRTStartup+0x42>
     178:	480c      	ldr	r0, [pc, #48]	; (1ac <_mainCRTStartup+0x70>)
     17a:	f3af 8000 	nop.w
     17e:	f00b fe2b 	bl	bdd8 <__libc_init_array>
     182:	0020      	movs	r0, r4
     184:	0029      	movs	r1, r5
     186:	f00a ff93 	bl	b0b0 <main>
     18a:	f00b fd69 	bl	bc60 <exit>
     18e:	bf00      	nop
     190:	00080000 	.word	0x00080000
     194:	20008000 	.word	0x20008000
	...
     1a0:	20000b00 	.word	0x20000b00
     1a4:	20002604 	.word	0x20002604
	...

000001b0 <USBD_GetUsbState>:
    DEBUG_USB_API_PUTS("\nUSBD_Init(), Illegal IN EP count");
    EFM_ASSERT(false);
    return USB_STATUS_ILLEGAL;
  }

  if ( numOutEps > MAX_NUM_OUT_EPS ) {
     1b0:	4b02      	ldr	r3, [pc, #8]	; (1bc <USBD_GetUsbState+0xc>)
     1b2:	681b      	ldr	r3, [r3, #0]
     1b4:	f893 0020 	ldrb.w	r0, [r3, #32]
    DEBUG_USB_API_PUTS("\nUSBD_Init(), Illegal OUT EP count");
    EFM_ASSERT(false);
    return USB_STATUS_ILLEGAL;
  }

  CORE_ENTER_ATOMIC();
     1b8:	4770      	bx	lr

  /* Enable USB clock */
  CMU->HFCORECLKEN0 |= CMU_HFCORECLKEN0_USB | CMU_HFCORECLKEN0_USBC;
     1ba:	bf00      	nop
void USBHHAL_HCStart(int hcnum);
#endif /* defined( USB_HOST ) */

__STATIC_INLINE void USBHAL_DisableGlobalInt(void)
{
  USB->GAHBCFG &= ~USB_GAHBCFG_GLBLINTRMSK;
     1bc:	20000000 	.word	0x20000000

000001c0 <USBD_Read>:
     1c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     1c4:	f8df 9198 	ldr.w	r9, [pc, #408]	; 360 <USBD_Read+0x1a0>
                | USB_CTRL_LEMPHYCTRL
                | USB_CTRL_LEMNAKEN
                | USB_CTRL_LEMADDRMEN;
  }
#else
  CMU_ClockSelectSet(cmuClock_USBC, cmuSelect_HFCLK);
     1c8:	b2c5      	uxtb	r5, r0
    DEBUG_USB_API_PUTS("\nUSBD_Init(), Illegal OUT EP count");
    EFM_ASSERT(false);
    return USB_STATUS_ILLEGAL;
  }

  CORE_ENTER_ATOMIC();
     1ca:	f8d9 4000 	ldr.w	r4, [r9]
                | USB_CTRL_LEMPHYCTRL
                | USB_CTRL_LEMNAKEN
                | USB_CTRL_LEMADDRMEN;
  }
#else
  CMU_ClockSelectSet(cmuClock_USBC, cmuSelect_HFCLK);
     1ce:	f010 0f80 	tst.w	r0, #128	; 0x80
     1d2:	f005 000f 	and.w	r0, r5, #15
     1d6:	4698      	mov	r8, r3
     1d8:	eb04 0300 	add.w	r3, r4, r0
#endif

  USBHAL_DisableGlobalInt();

  if ( USBDHAL_CoreInit(totalRxFifoSize, totalTxFifoSize) == USB_STATUS_OK ) {
     1dc:	460f      	mov	r7, r1
     1de:	bf14      	ite	ne
     1e0:	f893 30ac 	ldrbne.w	r3, [r3, #172]	; 0xac
     1e4:	f893 30bc 	ldrbeq.w	r3, [r3, #188]	; 0xbc
__STATIC_INLINE void USBDHAL_EnableUsbResetAndSuspendInt(void)
{
  /* Disable all interrupts. */
  USB->GINTMSK = 0;

  USB->GINTMSK = USB_GINTMSK_USBRSTMSK | USB_GINTMSK_USBSUSPMSK;
     1e8:	4616      	mov	r6, r2
     1ea:	2b00      	cmp	r3, #0
}

__STATIC_INLINE void USBDHAL_EnableUsbResetAndSuspendInt(void)
{
  /* Disable all interrupts. */
  USB->GINTMSK = 0;
     1ec:	f040 808b 	bne.w	306 <USBD_Read+0x146>
  USB->IEN = _USB_IEN_RESETVALUE;
}

__STATIC_INLINE void USBHAL_EnableGlobalInt(void)
{
  USB->GAHBCFG |= USB_GAHBCFG_GLBLINTRMSK;
     1f0:	2800      	cmp	r0, #0
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     1f2:	f040 808e 	bne.w	312 <USBD_Read+0x152>
     1f6:	3434      	adds	r4, #52	; 0x34
     1f8:	f5b6 2f00 	cmp.w	r6, #524288	; 0x80000
     1fc:	f280 8089 	bge.w	312 <USBD_Read+0x152>
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     200:	89a2      	ldrh	r2, [r4, #12]
  return retVal;
}

__STATIC_INLINE bool USBHAL_VbusIsOn(void)
{
  return (USB->STATUS & USB_STATUS_VREGOS) != 0;
     202:	fb96 f2f2 	sdiv	r2, r6, r2
    EFM_ASSERT(false);
    return USB_STATUS_ILLEGAL;
  }

#if (USB_PWRSAVE_MODE & USB_PWRSAVE_MODE_ONVBUSOFF)
  if ( USBHAL_VbusIsOn() ) {
     206:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400

void USBD_SetUsbState(USBD_State_TypeDef newState)
{
  USBD_State_TypeDef currentState;

  currentState = dev->state;
     20a:	f280 8082 	bge.w	312 <USBD_Read+0x152>
  }

  dev->lastState = dev->state;
  dev->state = newState;

  if ((dev->callbacks->usbStateChange)
     20e:	07bb      	lsls	r3, r7, #30

void USBD_SetUsbState(USBD_State_TypeDef newState)
{
  USBD_State_TypeDef currentState;

  currentState = dev->state;
     210:	d17f      	bne.n	312 <USBD_Read+0x152>
     212:	f004 f851 	bl	42b8 <CORE_EnterAtomic>
  if ( newState == USBD_STATE_SUSPENDED ) {
    dev->savedState = currentState;
  }

  dev->lastState = dev->state;
     216:	78a3      	ldrb	r3, [r4, #2]
     218:	7825      	ldrb	r5, [r4, #0]
  dev->state = newState;
     21a:	0159      	lsls	r1, r3, #5
     21c:	2d00      	cmp	r5, #0

  if ((dev->callbacks->usbStateChange)
     21e:	d148      	bne.n	2b2 <USBD_Read+0xf2>
      && (currentState != newState)) {
     220:	4a4c      	ldr	r2, [pc, #304]	; (354 <USBD_Read+0x194>)
    dev->callbacks->usbStateChange(currentState, newState);
     222:	588a      	ldr	r2, [r1, r2]
#endif
  {
    USBD_SetUsbState(USBD_STATE_NONE);
  }

  CORE_EXIT_ATOMIC();
     224:	f412 2f00 	tst.w	r2, #524288	; 0x80000
     228:	d003      	beq.n	232 <USBD_Read+0x72>
  return USB_STATUS_OK;
     22a:	f3c2 5240 	ubfx	r2, r2, #21, #1
}
     22e:	2a00      	cmp	r2, #0
     230:	d17d      	bne.n	32e <USBD_Read+0x16e>
        }
      }
    } else if ( *(conf + 1) == USB_INTERFACE_DESCRIPTOR ) {
      id = (USB_InterfaceDescriptor_TypeDef*)conf;

      if ( id->bAlternateSetting == 0 ) {   // Only check default interfaces
     232:	f894 2020 	ldrb.w	r2, [r4, #32]
     236:	2a00      	cmp	r2, #0
     238:	d17f      	bne.n	33a <USBD_Read+0x17a>
        if ( dev->numberOfInterfaces != id->bInterfaceNumber ) {
     23a:	2b00      	cmp	r3, #0
     23c:	d03f      	beq.n	2be <USBD_Read+0xfe>
     23e:	f8d9 3000 	ldr.w	r3, [r9]
          DEBUG_USB_API_PUTS("\nUSBD_Init(), Illegal interface number");
          EFM_ASSERT(false);
          return USB_STATUS_ILLEGAL;
        }
        dev->numberOfInterfaces++;
     242:	f893 3020 	ldrb.w	r3, [r3, #32]
     246:	2b05      	cmp	r3, #5
          EFM_ASSERT(false);
          return USB_STATUS_ILLEGAL;
        }
      } else {
        numOutEps++;
        ep->fifoSize = ( ( (ep->packetSize + 3) / 4) + 1)
     248:	d16b      	bne.n	322 <USBD_Read+0x162>
     24a:	60a7      	str	r7, [r4, #8]
                       * p->bufferingMultiplier[numEps];
        dev->outEpAddr2EpIndex[ep->num] = numEps;
     24c:	6126      	str	r6, [r4, #16]
     24e:	6162      	str	r2, [r4, #20]
          EFM_ASSERT(false);
          return USB_STATUS_ILLEGAL;
        }
      } else {
        numOutEps++;
        ep->fifoSize = ( ( (ep->packetSize + 3) / 4) + 1)
     250:	2d00      	cmp	r5, #0
     252:	d178      	bne.n	346 <USBD_Read+0x186>
     254:	2302      	movs	r3, #2
                       * p->bufferingMultiplier[numEps];
     256:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
          EFM_ASSERT(false);
          return USB_STATUS_ILLEGAL;
        }
      } else {
        numOutEps++;
        ep->fifoSize = ( ( (ep->packetSize + 3) / 4) + 1)
     25a:	f884 3020 	strb.w	r3, [r4, #32]
                       * p->bufferingMultiplier[numEps];
        dev->outEpAddr2EpIndex[ep->num] = numEps;
     25e:	2e00      	cmp	r6, #0
     260:	d05b      	beq.n	31a <USBD_Read+0x15a>
        totalRxFifoSize += ep->fifoSize;
     262:	89a3      	ldrh	r3, [r4, #12]
        if ( ep->num > MAX_NUM_OUT_EPS ) {
     264:	1e5a      	subs	r2, r3, #1
     266:	4416      	add	r6, r2
      } else {
        numOutEps++;
        ep->fifoSize = ( ( (ep->packetSize + 3) / 4) + 1)
                       * p->bufferingMultiplier[numEps];
        dev->outEpAddr2EpIndex[ep->num] = numEps;
        totalRxFifoSize += ep->fifoSize;
     268:	fbb6 f6f3 	udiv	r6, r6, r3
          DEBUG_USB_API_PUTS("\nUSBD_Init(), Illegal IN EP address");
          EFM_ASSERT(false);
          return USB_STATUS_ILLEGAL;
        }
      } else {
        numOutEps++;
     26c:	fb03 f206 	mul.w	r2, r3, r6
        ep->fifoSize = ( ( (ep->packetSize + 3) / 4) + 1)
                       * p->bufferingMultiplier[numEps];
        dev->outEpAddr2EpIndex[ep->num] = numEps;
     270:	04f6      	lsls	r6, r6, #19
        totalRxFifoSize += ep->fifoSize;
        if ( ep->num > MAX_NUM_OUT_EPS ) {
     272:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 354 <USBD_Read+0x194>
    NVIC_EnableIRQ(USB_IRQn);
  } else {
    CORE_EXIT_ATOMIC();
    DEBUG_USB_API_PUTS("\nUSBD_Init(), FIFO setup error");
    EFM_ASSERT(false);
    return USB_STATUS_ILLEGAL;
     276:	4675      	mov	r5, lr
    USBD_SetUsbState(USBD_STATE_NONE);
  }

  CORE_EXIT_ATOMIC();
  return USB_STATUS_OK;
}
     278:	46f4      	mov	ip, lr
     27a:	448e      	add	lr, r1
     27c:	4316      	orrs	r6, r2
  ep->type           = USB_EPTYPE_CTRL;
  ep->txFifoNum      = 0;
  ep->packetSize     = p->deviceDescriptor->bMaxPacketSize0;

  if ( ep->packetSize == 32 ) {
    dev->ep0MpsCode = _USB_DOEP0CTL_MPS_32B;
     27e:	f8de 3010 	ldr.w	r3, [lr, #16]
     282:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000

void USBD_SetUsbState(USBD_State_TypeDef newState)
{
  USBD_State_TypeDef currentState;

  currentState = dev->state;
     286:	431e      	orrs	r6, r3
  }

  dev->lastState = dev->state;
  dev->state = newState;

  if ((dev->callbacks->usbStateChange)
     288:	f8ce 6010 	str.w	r6, [lr, #16]

void USBD_SetUsbState(USBD_State_TypeDef newState)
{
  USBD_State_TypeDef currentState;

  currentState = dev->state;
     28c:	78a3      	ldrb	r3, [r4, #2]
  }

  dev->lastState = dev->state;
  dev->state = newState;

  if ((dev->callbacks->usbStateChange)
     28e:	61a2      	str	r2, [r4, #24]
  currentState = dev->state;
  if ( newState == USBD_STATE_SUSPENDED ) {
    dev->savedState = currentState;
  }

  dev->lastState = dev->state;
     290:	015b      	lsls	r3, r3, #5
     292:	449c      	add	ip, r3
  dev->state = newState;
     294:	f8cc 7014 	str.w	r7, [ip, #20]

  if ((dev->callbacks->usbStateChange)
     298:	78a2      	ldrb	r2, [r4, #2]
     29a:	0152      	lsls	r2, r2, #5
      && (currentState != newState)) {
     29c:	5953      	ldr	r3, [r2, r5]
     29e:	f023 433c 	bic.w	r3, r3, #3154116608	; 0xbc000000
    dev->callbacks->usbStateChange(currentState, newState);
     2a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
    USBDHAL_EnableUsbResetAndSuspendInt();
    USBHAL_EnableGlobalInt();
    NVIC_ClearPendingIRQ(USB_IRQn);
    NVIC_EnableIRQ(USB_IRQn);
  } else {
    CORE_EXIT_ATOMIC();
     2a6:	5153      	str	r3, [r2, r5]
     2a8:	f004 f80a 	bl	42c0 <CORE_ExitAtomic>
     2ac:	2000      	movs	r0, #0
     2ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     2b2:	4a29      	ldr	r2, [pc, #164]	; (358 <USBD_Read+0x198>)
     2b4:	588a      	ldr	r2, [r1, r2]
     2b6:	f412 2f00 	tst.w	r2, #524288	; 0x80000
     2ba:	d1b6      	bne.n	22a <USBD_Read+0x6a>
     2bc:	e7b9      	b.n	232 <USBD_Read+0x72>
     2be:	89a1      	ldrh	r1, [r4, #12]
     2c0:	4a26      	ldr	r2, [pc, #152]	; (35c <USBD_Read+0x19c>)
     2c2:	f8d9 5000 	ldr.w	r5, [r9]
     2c6:	6163      	str	r3, [r4, #20]
    DEBUG_USB_API_PUTS("\nUSBD_Read(), Illegal EP direction");
    EFM_ASSERT(false);
    return USB_STATUS_ILLEGAL;
  }

  ep->state          = D_EP_RECEIVING;
     2c8:	f04f 0e02 	mov.w	lr, #2
    DEBUG_USB_API_PUTS("\nUSBD_Read(), Device not configured");
    return USB_STATUS_DEVICE_UNCONFIGURED;
  }

  ep->buf       = (uint8_t*)data;
  ep->remaining = byteCount;
     2cc:	6126      	str	r6, [r4, #16]
  ep->xferred   = 0;

  if ( ep->num == 0 ) {
    ep->in = false;
     2ce:	7023      	strb	r3, [r4, #0]
    CORE_EXIT_ATOMIC();
    DEBUG_USB_API_PUTS("\nUSBD_Read(), Device not configured");
    return USB_STATUS_DEVICE_UNCONFIGURED;
  }

  ep->buf       = (uint8_t*)data;
     2d0:	60a7      	str	r7, [r4, #8]
    EFM_ASSERT(false);
    return USB_STATUS_ILLEGAL;
  }

  ep->state          = D_EP_RECEIVING;
  ep->xferCompleteCb = callback;
     2d2:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    DEBUG_USB_API_PUTS("\nUSBD_Read(), Illegal EP direction");
    EFM_ASSERT(false);
    return USB_STATUS_ILLEGAL;
  }

  ep->state          = D_EP_RECEIVING;
     2d6:	f884 e020 	strb.w	lr, [r4, #32]
}

__STATIC_INLINE void USBDHAL_StartEp0Out(uint32_t len, uint32_t ep0mps)
{
  USB->DOEP0TSIZ = (len << _USB_DOEP0TSIZ_XFERSIZE_SHIFT)
                   | (1   << _USB_DOEP0TSIZ_PKTCNT_SHIFT);
     2da:	f441 2300 	orr.w	r3, r1, #524288	; 0x80000
  USB->DIEP0DMAADDR = (uint32_t)addr;
}

__STATIC_INLINE void USBDHAL_SetEp0OutDmaPtr(uint8_t* addr)
{
  USB->DOEP0DMAADDR = (uint32_t)addr;
     2de:	f8c2 7314 	str.w	r7, [r2, #788]	; 0x314
    USBDHAL_SetEp0InDmaPtr(ep->buf);
    USBDHAL_StartEp0In(SL_MIN(ep->remaining, ep->packetSize),
                       dev->ep0MpsCode);
  } else {
    USBDHAL_SetEp0OutDmaPtr(ep->buf);
    USBDHAL_StartEp0Out(ep->packetSize, dev->ep0MpsCode);
     2e2:	f8d5 10cc 	ldr.w	r1, [r5, #204]	; 0xcc
                  | ep0mps;
}

__STATIC_INLINE void USBDHAL_StartEp0Out(uint32_t len, uint32_t ep0mps)
{
  USB->DOEP0TSIZ = (len << _USB_DOEP0TSIZ_XFERSIZE_SHIFT)
     2e6:	f8c2 3310 	str.w	r3, [r2, #784]	; 0x310
                   | (1   << _USB_DOEP0TSIZ_PKTCNT_SHIFT);

  USB->DOEP0CTL = (USB->DOEP0CTL & ~DEPCTL_WO_BITMASK)
     2ea:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
     2ee:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
                  | USB_DOEP0CTL_CNAK | USB_DOEP0CTL_EPENA
     2f2:	f023 433c 	bic.w	r3, r3, #3154116608	; 0xbc000000
                  | ep0mps;
     2f6:	430b      	orrs	r3, r1
__STATIC_INLINE void USBDHAL_StartEp0Out(uint32_t len, uint32_t ep0mps)
{
  USB->DOEP0TSIZ = (len << _USB_DOEP0TSIZ_XFERSIZE_SHIFT)
                   | (1   << _USB_DOEP0TSIZ_PKTCNT_SHIFT);

  USB->DOEP0CTL = (USB->DOEP0CTL & ~DEPCTL_WO_BITMASK)
     2f8:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  ep->xferCompleteCb = callback;

  USBD_ArmEp(ep);
  CORE_EXIT_ATOMIC();
     2fc:	f003 ffe0 	bl	42c0 <CORE_ExitAtomic>
  return USB_STATUS_OK;
     300:	2000      	movs	r0, #0
     302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  } else {
    epIndex = dev->outEpAddr2EpIndex[epAddr & USB_EPNUM_MASK];
  }

  if ( epIndex ) {
    ep = &dev->ep[epIndex];
     306:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     30a:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
     30e:	3434      	adds	r4, #52	; 0x34
     310:	e772      	b.n	1f8 <USBD_Read+0x38>
  USBD_Ep_TypeDef *ep = USBD_GetEpFromAddr(epAddr);

  if ( ep == NULL ) {
    DEBUG_USB_API_PUTS("\nUSBD_Read(), Illegal endpoint");
    EFM_ASSERT(false);
    return USB_STATUS_ILLEGAL;
     312:	f06f 0003 	mvn.w	r0, #3
     316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
{
  uint32_t pktcnt, xfersize;

  if ( ep->remaining == 0 ) {   /* ZLP ? */
    pktcnt = 1;
    xfersize = ep->packetSize;
     31a:	89a2      	ldrh	r2, [r4, #12]
     31c:	f44f 2600 	mov.w	r6, #524288	; 0x80000
     320:	e7a7      	b.n	272 <USBD_Read+0xb2>
    DEBUG_USB_API_PUTS("\nUSBD_Read(), Endpoint is busy");
    return USB_STATUS_EP_BUSY;
  }

  if ( (ep->num > 0) && (USBD_GetUsbState() != USBD_STATE_CONFIGURED) ) {
    CORE_EXIT_ATOMIC();
     322:	f003 ffcd 	bl	42c0 <CORE_ExitAtomic>
    DEBUG_USB_API_PUTS("\nUSBD_Read(), Device not configured");
    return USB_STATUS_DEVICE_UNCONFIGURED;
     326:	f06f 0008 	mvn.w	r0, #8
     32a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return USB_STATUS_ILLEGAL;
  }

  CORE_ENTER_ATOMIC();
  if ( USBDHAL_EpIsStalled(ep) ) {
    CORE_EXIT_ATOMIC();
     32e:	f003 ffc7 	bl	42c0 <CORE_ExitAtomic>
    DEBUG_USB_API_PUTS("\nUSBD_Read(), Endpoint is halted");
    return USB_STATUS_EP_STALLED;
     332:	f06f 0004 	mvn.w	r0, #4
     336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  }

  if ( ep->state != D_EP_IDLE ) {
    CORE_EXIT_ATOMIC();
     33a:	f003 ffc1 	bl	42c0 <CORE_ExitAtomic>
    DEBUG_USB_API_PUTS("\nUSBD_Read(), Endpoint is busy");
    return USB_STATUS_EP_BUSY;
     33e:	f06f 0001 	mvn.w	r0, #1
     342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  ep->xferred   = 0;

  if ( ep->num == 0 ) {
    ep->in = false;
  } else if ( ep->in != false ) {
    CORE_EXIT_ATOMIC();
     346:	f003 ffbb 	bl	42c0 <CORE_ExitAtomic>
    DEBUG_USB_API_PUTS("\nUSBD_Read(), Illegal EP direction");
    EFM_ASSERT(false);
    return USB_STATUS_ILLEGAL;
     34a:	f06f 0003 	mvn.w	r0, #3
     34e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     352:	bf00      	nop
     354:	40100b00 	.word	0x40100b00
     358:	40100900 	.word	0x40100900
     35c:	40100800 	.word	0x40100800
     360:	20000000 	.word	0x20000000

00000364 <USBD_SetUsbState>:

void USBD_SetUsbState(USBD_State_TypeDef newState)
{
  USBD_State_TypeDef currentState;

  currentState = dev->state;
     364:	4b09      	ldr	r3, [pc, #36]	; (38c <USBD_SetUsbState+0x28>)
     366:	681b      	ldr	r3, [r3, #0]
  }

  dev->lastState = dev->state;
  dev->state = newState;

  if ((dev->callbacks->usbStateChange)
     368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
}

/** @cond DO_NOT_INCLUDE_WITH_DOXYGEN */

void USBD_SetUsbState(USBD_State_TypeDef newState)
{
     36a:	4601      	mov	r1, r0
  }

  dev->lastState = dev->state;
  dev->state = newState;

  if ((dev->callbacks->usbStateChange)
     36c:	6852      	ldr	r2, [r2, #4]

void USBD_SetUsbState(USBD_State_TypeDef newState)
{
  USBD_State_TypeDef currentState;

  currentState = dev->state;
     36e:	f893 0020 	ldrb.w	r0, [r3, #32]
  if ( newState == USBD_STATE_SUSPENDED ) {
    dev->savedState = currentState;
  }

  dev->lastState = dev->state;
     372:	f883 0022 	strb.w	r0, [r3, #34]	; 0x22
void USBD_SetUsbState(USBD_State_TypeDef newState)
{
  USBD_State_TypeDef currentState;

  currentState = dev->state;
  if ( newState == USBD_STATE_SUSPENDED ) {
     376:	2906      	cmp	r1, #6
    dev->savedState = currentState;
     378:	bf08      	it	eq
     37a:	f883 0021 	strbeq.w	r0, [r3, #33]	; 0x21
  }

  dev->lastState = dev->state;
  dev->state = newState;
     37e:	f883 1020 	strb.w	r1, [r3, #32]

  if ((dev->callbacks->usbStateChange)
     382:	b112      	cbz	r2, 38a <USBD_SetUsbState+0x26>
      && (currentState != newState)) {
     384:	4288      	cmp	r0, r1
     386:	d000      	beq.n	38a <USBD_SetUsbState+0x26>
    dev->callbacks->usbStateChange(currentState, newState);
     388:	4710      	bx	r2
     38a:	4770      	bx	lr
     38c:	20000000 	.word	0x20000000

00000390 <USBD_Write>:
 *   @ref USB_STATUS_OK on success, else an appropriate error code enumerated
 *   in @ref USB_Status_TypeDef.
 ******************************************************************************/
int USBD_Write(int epAddr, void *data, int byteCount,
               USB_XferCompleteCb_TypeDef callback)
{
     390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
{
  int epIndex;
  USBD_Ep_TypeDef *ep = NULL;

  if ( epAddr & USB_SETUP_DIR_MASK ) {
    epIndex = dev->inEpAddr2EpIndex[epAddr & USB_EPNUM_MASK];
     394:	f8df 8190 	ldr.w	r8, [pc, #400]	; 528 <Stack_Size+0x128>
     398:	4615      	mov	r5, r2
     39a:	f8d8 4000 	ldr.w	r4, [r8]
  CORE_DECLARE_IRQ_STATE;
  USBD_Ep_TypeDef *ep = USBD_GetEpFromAddr(epAddr);
     39e:	b2c2      	uxtb	r2, r0
     3a0:	f002 020f 	and.w	r2, r2, #15
 *   @ref USB_STATUS_OK on success, else an appropriate error code enumerated
 *   in @ref USB_Status_TypeDef.
 ******************************************************************************/
int USBD_Write(int epAddr, void *data, int byteCount,
               USB_XferCompleteCb_TypeDef callback)
{
     3a4:	461f      	mov	r7, r3
     3a6:	18a3      	adds	r3, r4, r2
     3a8:	460e      	mov	r6, r1
__STATIC_INLINE USBD_Ep_TypeDef *USBD_GetEpFromAddr(uint8_t epAddr)
{
  int epIndex;
  USBD_Ep_TypeDef *ep = NULL;

  if ( epAddr & USB_SETUP_DIR_MASK ) {
     3aa:	0601      	lsls	r1, r0, #24
    epIndex = dev->inEpAddr2EpIndex[epAddr & USB_EPNUM_MASK];
     3ac:	bf4c      	ite	mi
     3ae:	f893 30ac 	ldrbmi.w	r3, [r3, #172]	; 0xac
  } else {
    epIndex = dev->outEpAddr2EpIndex[epAddr & USB_EPNUM_MASK];
     3b2:	f893 30bc 	ldrbpl.w	r3, [r3, #188]	; 0xbc
  }

  if ( epIndex ) {
     3b6:	2b00      	cmp	r3, #0
     3b8:	f040 808a 	bne.w	4d0 <Stack_Size+0xd0>
    ep = &dev->ep[epIndex];
  } else if ( (epAddr & USB_EPNUM_MASK) == 0 ) {
     3bc:	2a00      	cmp	r2, #0
     3be:	f040 808d 	bne.w	4dc <Stack_Size+0xdc>
    ep = &dev->ep[0];
     3c2:	3434      	adds	r4, #52	; 0x34
    DEBUG_USB_API_PUTS("\nUSBD_Write(), Illegal endpoint");
    EFM_ASSERT(false);
    return USB_STATUS_ILLEGAL;
  }

  if ((byteCount > MAX_XFER_LEN)
     3c4:	f5b5 2f00 	cmp.w	r5, #524288	; 0x80000
     3c8:	f280 8088 	bge.w	4dc <Stack_Size+0xdc>
      || ( (byteCount / ep->packetSize) > MAX_PACKETS_PR_XFER)) {
     3cc:	89a2      	ldrh	r2, [r4, #12]
     3ce:	fb95 f2f2 	sdiv	r2, r5, r2
     3d2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
     3d6:	f280 8081 	bge.w	4dc <Stack_Size+0xdc>
    DEBUG_USB_API_PUTS("\nUSBD_Write(), Illegal transfer size");
    EFM_ASSERT(false);
    return USB_STATUS_ILLEGAL;
  }

  if ( (uint32_t)data & 3 ) {
     3da:	07b3      	lsls	r3, r6, #30
     3dc:	d17e      	bne.n	4dc <Stack_Size+0xdc>
    DEBUG_USB_API_PUTS("\nUSBD_Write(), Misaligned data buffer");
    EFM_ASSERT(false);
    return USB_STATUS_ILLEGAL;
  }

  CORE_ENTER_ATOMIC();
     3de:	f003 ff6b 	bl	42b8 <CORE_EnterAtomic>
     3e2:	78a3      	ldrb	r3, [r4, #2]
     3e4:	7821      	ldrb	r1, [r4, #0]
{
  uint32_t depctl, eptype;
  USB_Status_TypeDef retVal = USB_STATUS_REQ_ERR;

  if ( ep->in == true ) {
    depctl = USB_DINEPS[ep->num].CTL;
     3e6:	ea4f 1e43 	mov.w	lr, r3, lsl #5
  USBD_Ep_TypeDef *ep, uint16_t *halt)
{
  uint32_t depctl, eptype;
  USB_Status_TypeDef retVal = USB_STATUS_REQ_ERR;

  if ( ep->in == true ) {
     3ea:	2900      	cmp	r1, #0
     3ec:	d142      	bne.n	474 <Stack_Size+0x74>
    if ((eptype == DIEPCTL_EPTYPE_INTR) || (eptype == DIEPCTL_EPTYPE_BULK)) {
      *halt = depctl & USB_DIEP_CTL_STALL ? 1 : 0;
      retVal = USB_STATUS_OK;
    }
  } else {
    depctl = USB_DOUTEPS[ep->num].CTL;
     3ee:	4a4b      	ldr	r2, [pc, #300]	; (51c <Stack_Size+0x11c>)
     3f0:	f85e 2002 	ldr.w	r2, [lr, r2]
    eptype = depctl & _USB_DOEP_CTL_EPTYPE_MASK;

    if ((eptype == DOEPCTL_EPTYPE_INTR) || (eptype == DOEPCTL_EPTYPE_BULK)) {
     3f4:	f412 2f00 	tst.w	r2, #524288	; 0x80000
     3f8:	d003      	beq.n	402 <Stack_Size+0x2>
      *halt = depctl & USB_DOEP_CTL_STALL ? 1 : 0;
     3fa:	f3c2 5240 	ubfx	r2, r2, #21, #1
  if ( USBDHAL_EpIsStalled(ep) ) {
     3fe:	2a00      	cmp	r2, #0
     400:	d179      	bne.n	4f6 <Stack_Size+0xf6>
    CORE_EXIT_ATOMIC();
    DEBUG_USB_API_PUTS("\nUSBD_Write(), Endpoint is halted");
    return USB_STATUS_EP_STALLED;
  }

  if ( ep->state != D_EP_IDLE ) {
     402:	f894 2020 	ldrb.w	r2, [r4, #32]
     406:	2a00      	cmp	r2, #0
     408:	d17b      	bne.n	502 <Stack_Size+0x102>
    CORE_EXIT_ATOMIC();
    DEBUG_USB_API_PUTS("\nUSBD_Write(), Endpoint is busy");
    return USB_STATUS_EP_BUSY;
  }

  if ( (ep->num > 0) && (USBD_GetUsbState() != USBD_STATE_CONFIGURED) ) {
     40a:	2b00      	cmp	r3, #0
     40c:	d039      	beq.n	482 <Stack_Size+0x82>
 * @return
 *   Device USB state. See @ref USBD_State_TypeDef.
 ******************************************************************************/
USBD_State_TypeDef USBD_GetUsbState(void)
{
  return dev->state;
     40e:	f8d8 3000 	ldr.w	r3, [r8]
    CORE_EXIT_ATOMIC();
    DEBUG_USB_API_PUTS("\nUSBD_Write(), Endpoint is busy");
    return USB_STATUS_EP_BUSY;
  }

  if ( (ep->num > 0) && (USBD_GetUsbState() != USBD_STATE_CONFIGURED) ) {
     412:	f893 3020 	ldrb.w	r3, [r3, #32]
     416:	2b05      	cmp	r3, #5
     418:	d167      	bne.n	4ea <Stack_Size+0xea>
    CORE_EXIT_ATOMIC();
    DEBUG_USB_API_PUTS("\nUSBD_Write(), Device not configured");
    return USB_STATUS_DEVICE_UNCONFIGURED;
  }

  ep->buf       = (uint8_t*)data;
     41a:	60a6      	str	r6, [r4, #8]
  ep->remaining = byteCount;
     41c:	6125      	str	r5, [r4, #16]
  ep->xferred   = 0;
     41e:	6162      	str	r2, [r4, #20]

  if ( ep->num == 0 ) {
    ep->in = true;
  } else if ( ep->in != true ) {
     420:	2900      	cmp	r1, #0
     422:	d074      	beq.n	50e <Stack_Size+0x10e>
    DEBUG_USB_API_PUTS("\nUSBD_Write(), Illegal EP direction");
    EFM_ASSERT(false);
    return USB_STATUS_ILLEGAL;
  }

  ep->state          = D_EP_TRANSMITTING;
     424:	2301      	movs	r3, #1
  ep->xferCompleteCb = callback;
     426:	6267      	str	r7, [r4, #36]	; 0x24
    DEBUG_USB_API_PUTS("\nUSBD_Write(), Illegal EP direction");
    EFM_ASSERT(false);
    return USB_STATUS_ILLEGAL;
  }

  ep->state          = D_EP_TRANSMITTING;
     428:	f884 3020 	strb.w	r3, [r4, #32]

__STATIC_INLINE void USBDHAL_StartEpIn(USBD_Ep_TypeDef *ep)
{
  uint32_t pktcnt, xfersize;

  if ( ep->remaining == 0 ) {   /* ZLP ? */
     42c:	2d00      	cmp	r5, #0
     42e:	d059      	beq.n	4e4 <Stack_Size+0xe4>
    pktcnt = 1;
    xfersize = 0;
  } else {
    pktcnt = (ep->remaining - 1 + ep->packetSize) / ep->packetSize;
     430:	89a2      	ldrh	r2, [r4, #12]
     432:	1e53      	subs	r3, r2, #1
     434:	442b      	add	r3, r5
     436:	fbb3 f3f2 	udiv	r3, r3, r2
     43a:	04db      	lsls	r3, r3, #19
    xfersize = ep->remaining;
  }

  USB_DINEPS[ep->num].TSIZ =
    (USB_DINEPS[ep->num].TSIZ
     43c:	4f38      	ldr	r7, [pc, #224]	; (520 <Stack_Size+0x120>)
     43e:	4639      	mov	r1, r7
     & ~DIEP_XFERSIZE_PKTCNT_MASK)
    | (xfersize << _USB_DIEP_TSIZ_XFERSIZE_SHIFT)
    | (pktcnt   << _USB_DIEP_TSIZ_PKTCNT_SHIFT);

  USB_DINEPS[ep->num].DMAADDR = (uint32_t)ep->buf;
     440:	46bc      	mov	ip, r7
    pktcnt = (ep->remaining - 1 + ep->packetSize) / ep->packetSize;
    xfersize = ep->remaining;
  }

  USB_DINEPS[ep->num].TSIZ =
    (USB_DINEPS[ep->num].TSIZ
     442:	4477      	add	r7, lr
     444:	693a      	ldr	r2, [r7, #16]
     & ~DIEP_XFERSIZE_PKTCNT_MASK)
     446:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
    | (xfersize << _USB_DIEP_TSIZ_XFERSIZE_SHIFT)
     44a:	4315      	orrs	r5, r2
    | (pktcnt   << _USB_DIEP_TSIZ_PKTCNT_SHIFT);
     44c:	432b      	orrs	r3, r5
  } else {
    pktcnt = (ep->remaining - 1 + ep->packetSize) / ep->packetSize;
    xfersize = ep->remaining;
  }

  USB_DINEPS[ep->num].TSIZ =
     44e:	613b      	str	r3, [r7, #16]
    (USB_DINEPS[ep->num].TSIZ
     & ~DIEP_XFERSIZE_PKTCNT_MASK)
    | (xfersize << _USB_DIEP_TSIZ_XFERSIZE_SHIFT)
    | (pktcnt   << _USB_DIEP_TSIZ_PKTCNT_SHIFT);

  USB_DINEPS[ep->num].DMAADDR = (uint32_t)ep->buf;
     450:	78a3      	ldrb	r3, [r4, #2]
     452:	015b      	lsls	r3, r3, #5
     454:	449c      	add	ip, r3
     456:	f8cc 6014 	str.w	r6, [ip, #20]
  USB_DINEPS[ep->num].CTL =
    (USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK)
     45a:	78a2      	ldrb	r2, [r4, #2]
     45c:	0152      	lsls	r2, r2, #5
     45e:	5853      	ldr	r3, [r2, r1]
    | USB_DIEP_CTL_CNAK
    | USB_DIEP_CTL_EPENA;
     460:	f023 433c 	bic.w	r3, r3, #3154116608	; 0xbc000000
     464:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
     & ~DIEP_XFERSIZE_PKTCNT_MASK)
    | (xfersize << _USB_DIEP_TSIZ_XFERSIZE_SHIFT)
    | (pktcnt   << _USB_DIEP_TSIZ_PKTCNT_SHIFT);

  USB_DINEPS[ep->num].DMAADDR = (uint32_t)ep->buf;
  USB_DINEPS[ep->num].CTL =
     468:	5053      	str	r3, [r2, r1]
  ep->xferCompleteCb = callback;

  USBD_ArmEp(ep);
  CORE_EXIT_ATOMIC();
     46a:	f003 ff29 	bl	42c0 <CORE_ExitAtomic>
  return USB_STATUS_OK;
     46e:	2000      	movs	r0, #0
     470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
  uint32_t depctl, eptype;
  USB_Status_TypeDef retVal = USB_STATUS_REQ_ERR;

  if ( ep->in == true ) {
    depctl = USB_DINEPS[ep->num].CTL;
     474:	4a2a      	ldr	r2, [pc, #168]	; (520 <Stack_Size+0x120>)
     476:	f85e 2002 	ldr.w	r2, [lr, r2]
    eptype = depctl & _USB_DIEP_CTL_EPTYPE_MASK;

    if ((eptype == DIEPCTL_EPTYPE_INTR) || (eptype == DIEPCTL_EPTYPE_BULK)) {
     47a:	f412 2f00 	tst.w	r2, #524288	; 0x80000
     47e:	d1bc      	bne.n	3fa <USBD_Write+0x6a>
     480:	e7bf      	b.n	402 <Stack_Size+0x2>
  ep->buf       = (uint8_t*)data;
  ep->remaining = byteCount;
  ep->xferred   = 0;

  if ( ep->num == 0 ) {
    ep->in = true;
     482:	2201      	movs	r2, #1
    CORE_EXIT_ATOMIC();
    DEBUG_USB_API_PUTS("\nUSBD_Write(), Device not configured");
    return USB_STATUS_DEVICE_UNCONFIGURED;
  }

  ep->buf       = (uint8_t*)data;
     484:	60a6      	str	r6, [r4, #8]
  ep->remaining = byteCount;
     486:	6125      	str	r5, [r4, #16]
  ep->xferred   = 0;
     488:	6163      	str	r3, [r4, #20]
    EFM_ASSERT(false);
    return USB_STATUS_ILLEGAL;
  }

  ep->state          = D_EP_TRANSMITTING;
  ep->xferCompleteCb = callback;
     48a:	6267      	str	r7, [r4, #36]	; 0x24
  ep->buf       = (uint8_t*)data;
  ep->remaining = byteCount;
  ep->xferred   = 0;

  if ( ep->num == 0 ) {
    ep->in = true;
     48c:	7022      	strb	r2, [r4, #0]
    DEBUG_USB_API_PUTS("\nUSBD_Write(), Illegal EP direction");
    EFM_ASSERT(false);
    return USB_STATUS_ILLEGAL;
  }

  ep->state          = D_EP_TRANSMITTING;
     48e:	f884 2020 	strb.w	r2, [r4, #32]
}

__STATIC_INLINE void USBD_ArmEp0(USBD_Ep_TypeDef *ep)
{
  if ( ep->in ) {
    if ( ep->remaining == 0 ) {     /* Zero Length Packet? */
     492:	b905      	cbnz	r5, 496 <Stack_Size+0x96>
      ep->zlp = 1;
     494:	7062      	strb	r2, [r4, #1]
    }

    USBDHAL_SetEp0InDmaPtr(ep->buf);
    USBDHAL_StartEp0In(SL_MIN(ep->remaining, ep->packetSize),
     496:	89a2      	ldrh	r2, [r4, #12]
              | (addr << _USB_DCFG_DEVADDR_SHIFT);
}

__STATIC_INLINE void USBDHAL_SetEp0InDmaPtr(uint8_t* addr)
{
  USB->DIEP0DMAADDR = (uint32_t)addr;
     498:	4922      	ldr	r1, [pc, #136]	; (524 <Stack_Size+0x124>)
     49a:	f8d8 3000 	ldr.w	r3, [r8]
     49e:	f8c1 6114 	str.w	r6, [r1, #276]	; 0x114
     4a2:	4295      	cmp	r5, r2
     4a4:	bf28      	it	cs
     4a6:	4615      	movcs	r5, r2
}

__STATIC_INLINE void USBDHAL_StartEp0In(uint32_t len, uint32_t ep0mps)
{
  USB->DIEP0TSIZ = (len << _USB_DIEP0TSIZ_XFERSIZE_SHIFT)
                   | (1   << _USB_DIEP0TSIZ_PKTCNT_SHIFT);
     4a8:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
     4ac:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
  return retVal;
}

__STATIC_INLINE void USBDHAL_StartEp0In(uint32_t len, uint32_t ep0mps)
{
  USB->DIEP0TSIZ = (len << _USB_DIEP0TSIZ_XFERSIZE_SHIFT)
     4b0:	f8c1 5110 	str.w	r5, [r1, #272]	; 0x110
                   | (1   << _USB_DIEP0TSIZ_PKTCNT_SHIFT);

  USB->DIEP0CTL = (USB->DIEP0CTL & ~DEPCTL_WO_BITMASK)
     4b4:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
     4b8:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
                  | USB_DIEP0CTL_CNAK | USB_DIEP0CTL_EPENA
     4bc:	f023 433c 	bic.w	r3, r3, #3154116608	; 0xbc000000
                  | ep0mps;
     4c0:	4313      	orrs	r3, r2
__STATIC_INLINE void USBDHAL_StartEp0In(uint32_t len, uint32_t ep0mps)
{
  USB->DIEP0TSIZ = (len << _USB_DIEP0TSIZ_XFERSIZE_SHIFT)
                   | (1   << _USB_DIEP0TSIZ_PKTCNT_SHIFT);

  USB->DIEP0CTL = (USB->DIEP0CTL & ~DEPCTL_WO_BITMASK)
     4c2:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
  ep->xferCompleteCb = callback;

  USBD_ArmEp(ep);
  CORE_EXIT_ATOMIC();
     4c6:	f003 fefb 	bl	42c0 <CORE_ExitAtomic>
  return USB_STATUS_OK;
     4ca:	2000      	movs	r0, #0
     4cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else {
    epIndex = dev->outEpAddr2EpIndex[epAddr & USB_EPNUM_MASK];
  }

  if ( epIndex ) {
    ep = &dev->ep[epIndex];
     4d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     4d4:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
     4d8:	3434      	adds	r4, #52	; 0x34
     4da:	e773      	b.n	3c4 <USBD_Write+0x34>
  USBD_Ep_TypeDef *ep = USBD_GetEpFromAddr(epAddr);

  if ( ep == NULL ) {
    DEBUG_USB_API_PUTS("\nUSBD_Write(), Illegal endpoint");
    EFM_ASSERT(false);
    return USB_STATUS_ILLEGAL;
     4dc:	f06f 0003 	mvn.w	r0, #3
     4e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

__STATIC_INLINE void USBDHAL_StartEpIn(USBD_Ep_TypeDef *ep)
{
  uint32_t pktcnt, xfersize;

  if ( ep->remaining == 0 ) {   /* ZLP ? */
     4e4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
     4e8:	e7a8      	b.n	43c <Stack_Size+0x3c>
    DEBUG_USB_API_PUTS("\nUSBD_Write(), Endpoint is busy");
    return USB_STATUS_EP_BUSY;
  }

  if ( (ep->num > 0) && (USBD_GetUsbState() != USBD_STATE_CONFIGURED) ) {
    CORE_EXIT_ATOMIC();
     4ea:	f003 fee9 	bl	42c0 <CORE_ExitAtomic>
    DEBUG_USB_API_PUTS("\nUSBD_Write(), Device not configured");
    return USB_STATUS_DEVICE_UNCONFIGURED;
     4ee:	f06f 0008 	mvn.w	r0, #8
     4f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return USB_STATUS_ILLEGAL;
  }

  CORE_ENTER_ATOMIC();
  if ( USBDHAL_EpIsStalled(ep) ) {
    CORE_EXIT_ATOMIC();
     4f6:	f003 fee3 	bl	42c0 <CORE_ExitAtomic>
    DEBUG_USB_API_PUTS("\nUSBD_Write(), Endpoint is halted");
    return USB_STATUS_EP_STALLED;
     4fa:	f06f 0004 	mvn.w	r0, #4
     4fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }

  if ( ep->state != D_EP_IDLE ) {
    CORE_EXIT_ATOMIC();
     502:	f003 fedd 	bl	42c0 <CORE_ExitAtomic>
    DEBUG_USB_API_PUTS("\nUSBD_Write(), Endpoint is busy");
    return USB_STATUS_EP_BUSY;
     506:	f06f 0001 	mvn.w	r0, #1
     50a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  ep->xferred   = 0;

  if ( ep->num == 0 ) {
    ep->in = true;
  } else if ( ep->in != true ) {
    CORE_EXIT_ATOMIC();
     50e:	f003 fed7 	bl	42c0 <CORE_ExitAtomic>
    DEBUG_USB_API_PUTS("\nUSBD_Write(), Illegal EP direction");
    EFM_ASSERT(false);
    return USB_STATUS_ILLEGAL;
     512:	f06f 0003 	mvn.w	r0, #3
     516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     51a:	bf00      	nop
     51c:	40100b00 	.word	0x40100b00
     520:	40100900 	.word	0x40100900
     524:	40100800 	.word	0x40100800
     528:	20000000 	.word	0x20000000

0000052c <USBDCH9_SetupCmd>:
{
  int status;
  USB_Setup_TypeDef *p = device->setup;

  /* Vendor unique, Class or Standard setup commands override ? */
  if ( device->callbacks->setupCmd ) {
     52c:	6b03      	ldr	r3, [r0, #48]	; 0x30
     52e:	689b      	ldr	r3, [r3, #8]
static int SetInterface     (USBD_Device_TypeDef *pDev);

static uint32_t txBuf;

int USBDCH9_SetupCmd(USBD_Device_TypeDef *device)
{
     530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     534:	4605      	mov	r5, r0
  int status;
  USB_Setup_TypeDef *p = device->setup;
     536:	6804      	ldr	r4, [r0, #0]

  /* Vendor unique, Class or Standard setup commands override ? */
  if ( device->callbacks->setupCmd ) {
     538:	b12b      	cbz	r3, 546 <USBDCH9_SetupCmd+0x1a>
    status = device->callbacks->setupCmd(p);
     53a:	4620      	mov	r0, r4
     53c:	4798      	blx	r3

    if ( status != USB_STATUS_REQ_UNHANDLED ) {
     53e:	1cc6      	adds	r6, r0, #3
     540:	d001      	beq.n	546 <USBDCH9_SetupCmd+0x1a>
        break;
    }
  }

  return status;
}
     542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }

  status = USB_STATUS_REQ_ERR;

  if ( p->Type == USB_SETUP_TYPE_STANDARD ) {
     546:	7823      	ldrb	r3, [r4, #0]
     548:	f013 0f60 	tst.w	r3, #96	; 0x60
     54c:	d11a      	bne.n	584 <USBDCH9_SetupCmd+0x58>
    switch ( p->bRequest ) {
     54e:	7863      	ldrb	r3, [r4, #1]
     550:	2b0b      	cmp	r3, #11
     552:	d817      	bhi.n	584 <USBDCH9_SetupCmd+0x58>
     554:	e8df f013 	tbh	[pc, r3, lsl #1]
     558:	00af007a 	.word	0x00af007a
     55c:	00f50016 	.word	0x00f50016
     560:	01420016 	.word	0x01420016
     564:	00160169 	.word	0x00160169
     568:	01be018e 	.word	0x01be018e
     56c:	001a022c 	.word	0x001a022c
    return USB_STATUS_REQ_ERR;
  }

  switch ( p->Recipient ) {
    case USB_SETUP_RECIPIENT_DEVICE:
      if ( (p->wIndex == 0)
     570:	889a      	ldrh	r2, [r3, #4]
     572:	b93a      	cbnz	r2, 584 <USBDCH9_SetupCmd+0x58>
           && (p->wValue == USB_FEATURE_DEVICE_REMOTE_WAKEUP)
     574:	885b      	ldrh	r3, [r3, #2]
     576:	2b01      	cmp	r3, #1
     578:	d104      	bne.n	584 <USBDCH9_SetupCmd+0x58>
           && (pDev->state == USBD_STATE_CONFIGURED)) {
     57a:	f895 2020 	ldrb.w	r2, [r5, #32]
     57e:	2a05      	cmp	r2, #5
     580:	f000 8281 	beq.w	a86 <USBDCH9_SetupCmd+0x55a>
    if ( status != USB_STATUS_REQ_UNHANDLED ) {
      return status;
    }
  }

  status = USB_STATUS_REQ_ERR;
     584:	f04f 30ff 	mov.w	r0, #4294967295
     588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}

static int SetInterface(USBD_Device_TypeDef *pDev)
{
  int retVal = USB_STATUS_REQ_ERR;
  USB_Setup_TypeDef *p = pDev->setup;
     58c:	682b      	ldr	r3, [r5, #0]

  /* There is currently no support for alternate interface settings. */

  if ( (p->wIndex       <  pDev->numberOfInterfaces)
     58e:	7fea      	ldrb	r2, [r5, #31]
     590:	8899      	ldrh	r1, [r3, #4]
     592:	4291      	cmp	r1, r2
     594:	d2f6      	bcs.n	584 <USBDCH9_SetupCmd+0x58>
       && (p->wLength   == 0)
     596:	88da      	ldrh	r2, [r3, #6]
     598:	2a00      	cmp	r2, #0
     59a:	d1f3      	bne.n	584 <USBDCH9_SetupCmd+0x58>
       && (p->wValue    == 0)
     59c:	885a      	ldrh	r2, [r3, #2]
     59e:	2a00      	cmp	r2, #0
     5a0:	d1f0      	bne.n	584 <USBDCH9_SetupCmd+0x58>
       && (pDev->state  == USBD_STATE_CONFIGURED)
     5a2:	f895 2020 	ldrb.w	r2, [r5, #32]
     5a6:	2a05      	cmp	r2, #5
     5a8:	d1ec      	bne.n	584 <USBDCH9_SetupCmd+0x58>
       && (p->Recipient == USB_SETUP_RECIPIENT_INTERFACE)) {
     5aa:	781b      	ldrb	r3, [r3, #0]
     5ac:	f003 031f 	and.w	r3, r3, #31
     5b0:	2b01      	cmp	r3, #1
     5b2:	d1e7      	bne.n	584 <USBDCH9_SetupCmd+0x58>
     5b4:	4bc0      	ldr	r3, [pc, #768]	; (8b8 <USBDCH9_SetupCmd+0x38c>)
     5b6:	681b      	ldr	r3, [r3, #0]

  if ( forceIdle ) {
    ep->state = D_EP_IDLE;
  }

  if ( ep->in ) {
     5b8:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
     5bc:	2a00      	cmp	r2, #0
     5be:	f040 8237 	bne.w	a30 <USBDCH9_SetupCmd+0x504>
      depctl |= USB_DIEP_CTL_SETD0PIDEF;
    }
    USB_DINEPS[ep->num].CTL = depctl;
  } else {
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     5c2:	f893 005e 	ldrb.w	r0, [r3, #94]	; 0x5e
     5c6:	4ebd      	ldr	r6, [pc, #756]	; (8bc <USBDCH9_SetupCmd+0x390>)
    } else {
      depctl |= USB_DIEP_CTL_SETD0PIDEF;
    }
    USB_DINEPS[ep->num].CTL = depctl;
  } else {
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
     5c8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     5cc:	0140      	lsls	r0, r0, #5
    } else {
      depctl |= USB_DIEP_CTL_SETD0PIDEF;
    }
    USB_DINEPS[ep->num].CTL = depctl;
  } else {
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
     5ce:	0415      	lsls	r5, r2, #16
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     5d0:	5984      	ldr	r4, [r0, r6]

    if ( !(depctl & USB_DOEP_CTL_USBACTEP) ) {
     5d2:	0427      	lsls	r7, r4, #16
     5d4:	f100 831a 	bmi.w	c0c <Heap_Size+0xc>
      depctl = (depctl
                & ~(DOEP_MPS_EPTYPE_MASK
     5d8:	4ab9      	ldr	r2, [pc, #740]	; (8c0 <USBDCH9_SetupCmd+0x394>)
                    | USB_DOEP_CTL_STALL)  )
               | (ep->packetSize << _USB_DOEP_CTL_MPS_SHIFT)
     5da:	f8b3 1068 	ldrh.w	r1, [r3, #104]	; 0x68
               | (ep->type       << _USB_DOEP_CTL_EPTYPE_SHIFT)
     5de:	f893 7060 	ldrb.w	r7, [r3, #96]	; 0x60
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;

    if ( !(depctl & USB_DOEP_CTL_USBACTEP) ) {
      depctl = (depctl
                & ~(DOEP_MPS_EPTYPE_MASK
     5e2:	4022      	ands	r2, r4
                    | USB_DOEP_CTL_STALL)  )
               | (ep->packetSize << _USB_DOEP_CTL_MPS_SHIFT)
     5e4:	430a      	orrs	r2, r1
     5e6:	f042 52c0 	orr.w	r2, r2, #402653184	; 0x18000000
     5ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  } else {
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;

    if ( !(depctl & USB_DOEP_CTL_USBACTEP) ) {
      depctl = (depctl
     5ee:	ea42 4287 	orr.w	r2, r2, r7, lsl #18
               | USB_DOEP_CTL_USBACTEP
               | USB_DOEP_CTL_SNAK;
    } else {
      depctl |= USB_DOEP_CTL_SETD0PIDEF;
    }
    USB_DOUTEPS[ep->num].CTL = depctl;
     5f2:	5182      	str	r2, [r0, r6]
  }

  /* Enable interrupt for this EP */
  USB->DAINTMSK |= daintmask;
     5f4:	49b3      	ldr	r1, [pc, #716]	; (8c4 <USBDCH9_SetupCmd+0x398>)
     5f6:	69ca      	ldr	r2, [r1, #28]
     5f8:	432a      	orrs	r2, r5
     5fa:	61ca      	str	r2, [r1, #28]

  if ( forceIdle ) {
    ep->state = D_EP_IDLE;
  }

  if ( ep->in ) {
     5fc:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
    daintmask = ep->mask;
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     600:	f893 0086 	ldrb.w	r0, [r3, #134]	; 0x86

  if ( forceIdle ) {
    ep->state = D_EP_IDLE;
  }

  if ( ep->in ) {
     604:	2a00      	cmp	r2, #0
     606:	f000 81fc 	beq.w	a02 <USBDCH9_SetupCmd+0x4d6>
    daintmask = ep->mask;
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     60a:	4daf      	ldr	r5, [pc, #700]	; (8c8 <USBDCH9_SetupCmd+0x39c>)
  if ( forceIdle ) {
    ep->state = D_EP_IDLE;
  }

  if ( ep->in ) {
    daintmask = ep->mask;
     60c:	f8b3 1092 	ldrh.w	r1, [r3, #146]	; 0x92
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     610:	0140      	lsls	r0, r0, #5
     612:	5942      	ldr	r2, [r0, r5]

    if ( !(depctl & USB_DIEP_CTL_USBACTEP) ) {
     614:	0416      	lsls	r6, r2, #16
     616:	f100 81ef 	bmi.w	9f8 <USBDCH9_SetupCmd+0x4cc>
      depctl = (depctl
                & ~(DIEP_MPS_EPTYPE_TXFNUM_MASK
     61a:	4eac      	ldr	r6, [pc, #688]	; (8cc <USBDCH9_SetupCmd+0x3a0>)
                    | USB_DIEP_CTL_STALL)  )
               | (ep->packetSize << _USB_DIEP_CTL_MPS_SHIFT)
     61c:	f8b3 4090 	ldrh.w	r4, [r3, #144]	; 0x90
               | (ep->type       << _USB_DIEP_CTL_EPTYPE_SHIFT)
     620:	f893 7088 	ldrb.w	r7, [r3, #136]	; 0x88
               | (ep->txFifoNum  << _USB_DIEP_CTL_TXFNUM_SHIFT)
     624:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
    daintmask = ep->mask;
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;

    if ( !(depctl & USB_DIEP_CTL_USBACTEP) ) {
      depctl = (depctl
                & ~(DIEP_MPS_EPTYPE_TXFNUM_MASK
     628:	4016      	ands	r6, r2
                    | USB_DIEP_CTL_STALL)  )
               | (ep->packetSize << _USB_DIEP_CTL_MPS_SHIFT)
     62a:	4334      	orrs	r4, r6
     62c:	f044 52c0 	orr.w	r2, r4, #402653184	; 0x18000000
     630:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
     634:	ea42 4287 	orr.w	r2, r2, r7, lsl #18
  if ( ep->in ) {
    daintmask = ep->mask;
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;

    if ( !(depctl & USB_DIEP_CTL_USBACTEP) ) {
      depctl = (depctl
     638:	ea42 5383 	orr.w	r3, r2, r3, lsl #22
               | USB_DOEP_CTL_USBACTEP
               | USB_DOEP_CTL_SNAK;
    } else {
      depctl |= USB_DOEP_CTL_SETD0PIDEF;
    }
    USB_DOUTEPS[ep->num].CTL = depctl;
     63c:	5143      	str	r3, [r0, r5]
  }

  /* Enable interrupt for this EP */
  USB->DAINTMSK |= daintmask;
     63e:	4aa1      	ldr	r2, [pc, #644]	; (8c4 <USBDCH9_SetupCmd+0x398>)
     640:	69d3      	ldr	r3, [r2, #28]
     642:	430b      	orrs	r3, r1
     644:	61d3      	str	r3, [r2, #28]
    /* Reset data toggles on EP's */
    USBD_ActivateAllEps(false);
    return USB_STATUS_OK;
     646:	2000      	movs	r0, #0
     648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

static int GetStatus(USBD_Device_TypeDef *pDev)
{
  USBD_Ep_TypeDef *ep;
  int retVal = USB_STATUS_REQ_ERR;
  USB_Setup_TypeDef *p = pDev->setup;
     64c:	682a      	ldr	r2, [r5, #0]
  uint16_t *pStatus = (uint16_t*)&txBuf;

  if ( (p->wValue       != 0)
     64e:	8853      	ldrh	r3, [r2, #2]
     650:	2b00      	cmp	r3, #0
     652:	d197      	bne.n	584 <USBDCH9_SetupCmd+0x58>
       || (p->wLength   != 2)
     654:	88d1      	ldrh	r1, [r2, #6]
     656:	2902      	cmp	r1, #2
     658:	d194      	bne.n	584 <USBDCH9_SetupCmd+0x58>
       || (p->Direction != USB_SETUP_DIR_IN)) {
     65a:	7813      	ldrb	r3, [r2, #0]
     65c:	0618      	lsls	r0, r3, #24
     65e:	d591      	bpl.n	584 <USBDCH9_SetupCmd+0x58>
    return USB_STATUS_REQ_ERR;
  }

  switch ( p->Recipient ) {
     660:	f003 031f 	and.w	r3, r3, #31
     664:	2b01      	cmp	r3, #1
     666:	f000 82ba 	beq.w	bde <USBDCH9_SetupCmd+0x6b2>
     66a:	2b02      	cmp	r3, #2
     66c:	f000 828b 	beq.w	b86 <USBDCH9_SetupCmd+0x65a>
     670:	2b00      	cmp	r3, #0
     672:	d187      	bne.n	584 <USBDCH9_SetupCmd+0x58>
    case USB_SETUP_RECIPIENT_DEVICE:
      if ( (p->wIndex == 0)
     674:	8893      	ldrh	r3, [r2, #4]
     676:	2b00      	cmp	r3, #0
     678:	d184      	bne.n	584 <USBDCH9_SetupCmd+0x58>
           && ( (pDev->state == USBD_STATE_ADDRESSED)
                || (pDev->state == USBD_STATE_CONFIGURED))) {
     67a:	f895 2020 	ldrb.w	r2, [r5, #32]
  }

  switch ( p->Recipient ) {
    case USB_SETUP_RECIPIENT_DEVICE:
      if ( (p->wIndex == 0)
           && ( (pDev->state == USBD_STATE_ADDRESSED)
     67e:	3a04      	subs	r2, #4
     680:	2a01      	cmp	r2, #1
     682:	f63f af7f 	bhi.w	584 <USBDCH9_SetupCmd+0x58>
                || (pDev->state == USBD_STATE_CONFIGURED))) {
        *pStatus = 0;
     686:	4c92      	ldr	r4, [pc, #584]	; (8d0 <USBDCH9_SetupCmd+0x3a4>)

        /* Remote wakeup feature status */
        if ( pDev->remoteWakeupEnabled ) {
     688:	7f6a      	ldrb	r2, [r5, #29]
  switch ( p->Recipient ) {
    case USB_SETUP_RECIPIENT_DEVICE:
      if ( (p->wIndex == 0)
           && ( (pDev->state == USBD_STATE_ADDRESSED)
                || (pDev->state == USBD_STATE_CONFIGURED))) {
        *pStatus = 0;
     68a:	8023      	strh	r3, [r4, #0]

        /* Remote wakeup feature status */
        if ( pDev->remoteWakeupEnabled ) {
     68c:	b102      	cbz	r2, 690 <USBDCH9_SetupCmd+0x164>
          *pStatus |= REMOTE_WAKEUP_ENABLED;
     68e:	8021      	strh	r1, [r4, #0]
        }

        /* Current self/bus power status */
        if ( pDev->callbacks->isSelfPowered != NULL ) {
     690:	6b2b      	ldr	r3, [r5, #48]	; 0x30
     692:	68db      	ldr	r3, [r3, #12]
     694:	2b00      	cmp	r3, #0
     696:	f000 83a6 	beq.w	de6 <Heap_Size+0x1e6>
          if ( pDev->callbacks->isSelfPowered() ) {
     69a:	4798      	blx	r3
     69c:	b118      	cbz	r0, 6a6 <USBDCH9_SetupCmd+0x17a>
            *pStatus |= DEVICE_IS_SELFPOWERED;
          }
        } else {
          if ( pDev->configDescriptor->bmAttributes & CONFIG_DESC_BM_SELFPOWERED ) {
            *pStatus |= DEVICE_IS_SELFPOWERED;
     69e:	8823      	ldrh	r3, [r4, #0]
     6a0:	f043 0301 	orr.w	r3, r3, #1
     6a4:	8023      	strh	r3, [r4, #0]
               && (ep->num     == 0))
             || (pDev->state   == USBD_STATE_CONFIGURED)) {
          /* Send 2 bytes w/halt status for endpoint */
          retVal = USBDHAL_GetStallStatusEp(ep, pStatus);
          if ( retVal == USB_STATUS_OK ) {
            retVal = USBD_Write(0, pStatus, 2, NULL);
     6a6:	2000      	movs	r0, #0
     6a8:	4603      	mov	r3, r0
     6aa:	4989      	ldr	r1, [pc, #548]	; (8d0 <USBDCH9_SetupCmd+0x3a4>)
     6ac:	2202      	movs	r2, #2
        break;
    }
  }

  return status;
}
     6ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
               && (ep->num     == 0))
             || (pDev->state   == USBD_STATE_CONFIGURED)) {
          /* Send 2 bytes w/halt status for endpoint */
          retVal = USBDHAL_GetStallStatusEp(ep, pStatus);
          if ( retVal == USB_STATUS_OK ) {
            retVal = USBD_Write(0, pStatus, 2, NULL);
     6b2:	f7ff be6d 	b.w	390 <USBD_Write>

static int ClearFeature(USBD_Device_TypeDef *pDev)
{
  USBD_Ep_TypeDef *ep;
  int retVal = USB_STATUS_REQ_ERR;
  USB_Setup_TypeDef *p = pDev->setup;
     6b6:	682a      	ldr	r2, [r5, #0]

  if ( p->wLength != 0 ) {
     6b8:	88d3      	ldrh	r3, [r2, #6]
     6ba:	2b00      	cmp	r3, #0
     6bc:	f47f af62 	bne.w	584 <USBDCH9_SetupCmd+0x58>
    return USB_STATUS_REQ_ERR;
  }

  switch ( p->Recipient ) {
     6c0:	7813      	ldrb	r3, [r2, #0]
     6c2:	f3c3 0304 	ubfx	r3, r3, #0, #5
     6c6:	b2d8      	uxtb	r0, r3
     6c8:	2800      	cmp	r0, #0
     6ca:	f000 81ce 	beq.w	a6a <USBDCH9_SetupCmd+0x53e>
     6ce:	2802      	cmp	r0, #2
     6d0:	f47f af58 	bne.w	584 <USBDCH9_SetupCmd+0x58>
        }
      }
      break;

    case USB_SETUP_RECIPIENT_ENDPOINT:
      ep = USBD_GetEpFromAddr(p->wIndex & 0xFF);
     6d4:	8893      	ldrh	r3, [r2, #4]
__STATIC_INLINE USBD_Ep_TypeDef *USBD_GetEpFromAddr(uint8_t epAddr)
{
  int epIndex;
  USBD_Ep_TypeDef *ep = NULL;

  if ( epAddr & USB_SETUP_DIR_MASK ) {
     6d6:	f013 0f80 	tst.w	r3, #128	; 0x80
     6da:	b2d9      	uxtb	r1, r3
    epIndex = dev->inEpAddr2EpIndex[epAddr & USB_EPNUM_MASK];
     6dc:	4b76      	ldr	r3, [pc, #472]	; (8b8 <USBDCH9_SetupCmd+0x38c>)
     6de:	681b      	ldr	r3, [r3, #0]
     6e0:	f001 010f 	and.w	r1, r1, #15
     6e4:	eb03 0001 	add.w	r0, r3, r1
     6e8:	bf14      	ite	ne
     6ea:	f890 00ac 	ldrbne.w	r0, [r0, #172]	; 0xac
  } else {
    epIndex = dev->outEpAddr2EpIndex[epAddr & USB_EPNUM_MASK];
     6ee:	f890 00bc 	ldrbeq.w	r0, [r0, #188]	; 0xbc
  }

  if ( epIndex ) {
     6f2:	2800      	cmp	r0, #0
     6f4:	f040 8294 	bne.w	c20 <Heap_Size+0x20>
    ep = &dev->ep[epIndex];
  } else if ( (epAddr & USB_EPNUM_MASK) == 0 ) {
     6f8:	2900      	cmp	r1, #0
     6fa:	f47f af43 	bne.w	584 <USBDCH9_SetupCmd+0x58>
    ep = &dev->ep[0];
     6fe:	3334      	adds	r3, #52	; 0x34
      if ( ep ) {
        if ( (ep->num > 0)
     700:	7899      	ldrb	r1, [r3, #2]
     702:	2900      	cmp	r1, #0
     704:	f43f af3e 	beq.w	584 <USBDCH9_SetupCmd+0x58>
             && (p->wValue == USB_FEATURE_ENDPOINT_HALT)
     708:	8850      	ldrh	r0, [r2, #2]
     70a:	2800      	cmp	r0, #0
     70c:	f47f af3a 	bne.w	584 <USBDCH9_SetupCmd+0x58>
             && (pDev->state == USBD_STATE_CONFIGURED)) {
     710:	f895 2020 	ldrb.w	r2, [r5, #32]
     714:	2a05      	cmp	r2, #5
     716:	f47f af35 	bne.w	584 <USBDCH9_SetupCmd+0x58>
__STATIC_INLINE USB_Status_TypeDef USBDHAL_UnStallEp(USBD_Ep_TypeDef *ep)
{
  uint32_t depctl, eptype;
  USB_Status_TypeDef retVal = USB_STATUS_REQ_ERR;

  if ( ep->in == true ) {
     71a:	781a      	ldrb	r2, [r3, #0]
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     71c:	0149      	lsls	r1, r1, #5
__STATIC_INLINE USB_Status_TypeDef USBDHAL_UnStallEp(USBD_Ep_TypeDef *ep)
{
  uint32_t depctl, eptype;
  USB_Status_TypeDef retVal = USB_STATUS_REQ_ERR;

  if ( ep->in == true ) {
     71e:	2a00      	cmp	r2, #0
     720:	f000 8370 	beq.w	e04 <Heap_Size+0x204>
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     724:	4a68      	ldr	r2, [pc, #416]	; (8c8 <USBDCH9_SetupCmd+0x39c>)
     726:	588b      	ldr	r3, [r1, r2]
    eptype = depctl & _USB_DIEP_CTL_EPTYPE_MASK;

    if ((eptype == DIEPCTL_EPTYPE_INTR) || (eptype == DIEPCTL_EPTYPE_BULK)) {
     728:	031e      	lsls	r6, r3, #12
     72a:	f140 8385 	bpl.w	e38 <Heap_Size+0x238>
      depctl |=  USB_DIEP_CTL_SETD0PIDEF;
      depctl &= ~USB_DIEP_CTL_STALL;
     72e:	f023 5370 	bic.w	r3, r3, #1006632960	; 0x3c000000
     732:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
     736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
      USB_DINEPS[ep->num].CTL = depctl;
     73a:	508b      	str	r3, [r1, r2]
          retVal = USBDHAL_UnStallEp(ep);
     73c:	b240      	sxtb	r0, r0
     73e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static int SetFeature(USBD_Device_TypeDef *pDev)
{
  USBD_Ep_TypeDef *ep;
  int retVal = USB_STATUS_REQ_ERR;
  USB_XferCompleteCb_TypeDef callback;
  USB_Setup_TypeDef *p = pDev->setup;
     742:	682b      	ldr	r3, [r5, #0]

  if ( p->wLength != 0 ) {
     744:	88da      	ldrh	r2, [r3, #6]
     746:	2a00      	cmp	r2, #0
     748:	f47f af1c 	bne.w	584 <USBDCH9_SetupCmd+0x58>
    return USB_STATUS_REQ_ERR;
  }

  switch ( p->Recipient ) {
     74c:	7818      	ldrb	r0, [r3, #0]
     74e:	f010 001f 	ands.w	r0, r0, #31
     752:	f43f af0d 	beq.w	570 <USBDCH9_SetupCmd+0x44>
     756:	2802      	cmp	r0, #2
     758:	f47f af14 	bne.w	584 <USBDCH9_SetupCmd+0x58>
        }
      }
      break;

    case USB_SETUP_RECIPIENT_ENDPOINT:
      ep = USBD_GetEpFromAddr(p->wIndex & 0xFF);
     75c:	8899      	ldrh	r1, [r3, #4]
__STATIC_INLINE USBD_Ep_TypeDef *USBD_GetEpFromAddr(uint8_t epAddr)
{
  int epIndex;
  USBD_Ep_TypeDef *ep = NULL;

  if ( epAddr & USB_SETUP_DIR_MASK ) {
     75e:	f011 0f80 	tst.w	r1, #128	; 0x80
     762:	b2ca      	uxtb	r2, r1
    epIndex = dev->inEpAddr2EpIndex[epAddr & USB_EPNUM_MASK];
     764:	4954      	ldr	r1, [pc, #336]	; (8b8 <USBDCH9_SetupCmd+0x38c>)
     766:	6809      	ldr	r1, [r1, #0]
     768:	f002 020f 	and.w	r2, r2, #15
     76c:	eb01 0002 	add.w	r0, r1, r2
     770:	bf14      	ite	ne
     772:	f890 00ac 	ldrbne.w	r0, [r0, #172]	; 0xac
  } else {
    epIndex = dev->outEpAddr2EpIndex[epAddr & USB_EPNUM_MASK];
     776:	f890 00bc 	ldrbeq.w	r0, [r0, #188]	; 0xbc
  }

  if ( epIndex ) {
     77a:	2800      	cmp	r0, #0
     77c:	f040 8256 	bne.w	c2c <Heap_Size+0x2c>
    ep = &dev->ep[epIndex];
  } else if ( (epAddr & USB_EPNUM_MASK) == 0 ) {
     780:	2a00      	cmp	r2, #0
     782:	f47f aeff 	bne.w	584 <USBDCH9_SetupCmd+0x58>
    ep = &dev->ep[0];
     786:	3134      	adds	r1, #52	; 0x34
      if ( ep ) {
        if ( (ep->num > 0)
     788:	788a      	ldrb	r2, [r1, #2]
     78a:	2a00      	cmp	r2, #0
     78c:	f43f aefa 	beq.w	584 <USBDCH9_SetupCmd+0x58>
             && (p->wValue == USB_FEATURE_ENDPOINT_HALT)
     790:	885b      	ldrh	r3, [r3, #2]
     792:	2b00      	cmp	r3, #0
     794:	f47f aef6 	bne.w	584 <USBDCH9_SetupCmd+0x58>
             && (pDev->state == USBD_STATE_CONFIGURED)) {
     798:	f895 3020 	ldrb.w	r3, [r5, #32]
     79c:	2b05      	cmp	r3, #5
     79e:	f47f aef1 	bne.w	584 <USBDCH9_SetupCmd+0x58>
__STATIC_INLINE USB_Status_TypeDef USBDHAL_StallEp(USBD_Ep_TypeDef *ep)
{
  uint32_t depctl, eptype;
  USB_Status_TypeDef retVal = USB_STATUS_REQ_ERR;

  if ( ep->in == true ) {
     7a2:	7808      	ldrb	r0, [r1, #0]
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     7a4:	0152      	lsls	r2, r2, #5
__STATIC_INLINE USB_Status_TypeDef USBDHAL_StallEp(USBD_Ep_TypeDef *ep)
{
  uint32_t depctl, eptype;
  USB_Status_TypeDef retVal = USB_STATUS_REQ_ERR;

  if ( ep->in == true ) {
     7a6:	2800      	cmp	r0, #0
     7a8:	f000 8339 	beq.w	e1e <Heap_Size+0x21e>
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     7ac:	4846      	ldr	r0, [pc, #280]	; (8c8 <USBDCH9_SetupCmd+0x39c>)
     7ae:	5813      	ldr	r3, [r2, r0]
    eptype = depctl & _USB_DIEP_CTL_EPTYPE_MASK;
     7b0:	f403 2440 	and.w	r4, r3, #786432	; 0xc0000

    if ( eptype != DIEPCTL_EPTYPE_ISOC ) {
     7b4:	f5b4 2f80 	cmp.w	r4, #262144	; 0x40000
{
  uint32_t depctl, eptype;
  USB_Status_TypeDef retVal = USB_STATUS_REQ_ERR;

  if ( ep->in == true ) {
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     7b8:	f023 5370 	bic.w	r3, r3, #1006632960	; 0x3c000000
    eptype = depctl & _USB_DIEP_CTL_EPTYPE_MASK;

    if ( eptype != DIEPCTL_EPTYPE_ISOC ) {
     7bc:	f000 833e 	beq.w	e3c <Heap_Size+0x23c>
      if ( depctl & USB_DIEP_CTL_EPENA ) {
     7c0:	2b00      	cmp	r3, #0
        depctl |= USB_DIEP_CTL_EPDIS;
     7c2:	bfb8      	it	lt
     7c4:	f043 4380 	orrlt.w	r3, r3, #1073741824	; 0x40000000
      }
      USB_DINEPS[ep->num].CTL = depctl | USB_DIEP_CTL_STALL;
     7c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
     7cc:	5013      	str	r3, [r2, r0]
      retVal = USB_STATUS_OK;
     7ce:	2000      	movs	r0, #0
          retVal = USBDHAL_StallEp(ep);

          ep->state = D_EP_IDLE;
     7d0:	2300      	movs	r3, #0
      ep = USBD_GetEpFromAddr(p->wIndex & 0xFF);
      if ( ep ) {
        if ( (ep->num > 0)
             && (p->wValue == USB_FEATURE_ENDPOINT_HALT)
             && (pDev->state == USBD_STATE_CONFIGURED)) {
          retVal = USBDHAL_StallEp(ep);
     7d2:	b240      	sxtb	r0, r0

          ep->state = D_EP_IDLE;
     7d4:	f881 3020 	strb.w	r3, [r1, #32]
     7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     7dc:	682c      	ldr	r4, [r5, #0]
static int SetAddress(USBD_Device_TypeDef *pDev)
{
  int retVal = USB_STATUS_REQ_ERR;
  USB_Setup_TypeDef *p = pDev->setup;

  if ( (p->wIndex       != 0)
     7de:	88a3      	ldrh	r3, [r4, #4]
     7e0:	2b00      	cmp	r3, #0
     7e2:	f47f aecf 	bne.w	584 <USBDCH9_SetupCmd+0x58>
       || (p->wLength   != 0)
     7e6:	88e3      	ldrh	r3, [r4, #6]
     7e8:	2b00      	cmp	r3, #0
     7ea:	f47f aecb 	bne.w	584 <USBDCH9_SetupCmd+0x58>
       || (p->wValue    >  127)
     7ee:	8863      	ldrh	r3, [r4, #2]
     7f0:	2b7f      	cmp	r3, #127	; 0x7f
     7f2:	f63f aec7 	bhi.w	584 <USBDCH9_SetupCmd+0x58>
       || (p->Recipient != USB_SETUP_RECIPIENT_DEVICE)) {
     7f6:	7822      	ldrb	r2, [r4, #0]
     7f8:	06d0      	lsls	r0, r2, #27
     7fa:	f47f aec3 	bne.w	584 <USBDCH9_SetupCmd+0x58>
    return USB_STATUS_REQ_ERR;
  }

  if ( pDev->state == USBD_STATE_DEFAULT ) {
     7fe:	f895 2020 	ldrb.w	r2, [r5, #32]
     802:	2a03      	cmp	r2, #3
     804:	f000 8147 	beq.w	a96 <USBDCH9_SetupCmd+0x56a>
    if ( p->wValue != 0 ) {
      USBD_SetUsbState(USBD_STATE_ADDRESSED);
    }
    USBDHAL_SetAddr(p->wValue);
    retVal = USB_STATUS_OK;
  } else if ( pDev->state == USBD_STATE_ADDRESSED ) {
     808:	2a04      	cmp	r2, #4
     80a:	f47f aebb 	bne.w	584 <USBDCH9_SetupCmd+0x58>
    if ( p->wValue == 0 ) {
     80e:	2b00      	cmp	r3, #0
     810:	f000 822a 	beq.w	c68 <Heap_Size+0x68>
                  | dev->ep0MpsCode;
}

__STATIC_INLINE void USBDHAL_SetAddr(uint8_t addr)
{
  USB->DCFG = (USB->DCFG
     814:	492b      	ldr	r1, [pc, #172]	; (8c4 <USBDCH9_SetupCmd+0x398>)
     816:	680a      	ldr	r2, [r1, #0]
               & ~_USB_DCFG_DEVADDR_MASK)
              | (addr << _USB_DCFG_DEVADDR_SHIFT);
     818:	b2db      	uxtb	r3, r3
}

__STATIC_INLINE void USBDHAL_SetAddr(uint8_t addr)
{
  USB->DCFG = (USB->DCFG
               & ~_USB_DCFG_DEVADDR_MASK)
     81a:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
              | (addr << _USB_DCFG_DEVADDR_SHIFT);
     81e:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
                  | dev->ep0MpsCode;
}

__STATIC_INLINE void USBDHAL_SetAddr(uint8_t addr)
{
  USB->DCFG = (USB->DCFG
     822:	600b      	str	r3, [r1, #0]
      USBD_SetUsbState(USBD_STATE_DEFAULT);
    }
    USBDHAL_SetAddr(p->wValue);
    retVal = USB_STATUS_OK;
     824:	2000      	movs	r0, #0
     826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
  int index;
  uint16_t length = 0;
  const void *data = NULL;
  int retVal = USB_STATUS_REQ_ERR;
  USB_Setup_TypeDef *p = pDev->setup;
     82a:	6828      	ldr	r0, [r5, #0]

  if ( (p->Recipient != USB_SETUP_RECIPIENT_DEVICE)
       || (p->Direction != USB_SETUP_DIR_IN)) {
     82c:	7803      	ldrb	r3, [r0, #0]
  uint16_t length = 0;
  const void *data = NULL;
  int retVal = USB_STATUS_REQ_ERR;
  USB_Setup_TypeDef *p = pDev->setup;

  if ( (p->Recipient != USB_SETUP_RECIPIENT_DEVICE)
     82e:	f003 039f 	and.w	r3, r3, #159	; 0x9f
     832:	2b80      	cmp	r3, #128	; 0x80
     834:	f47f aea6 	bne.w	584 <USBDCH9_SetupCmd+0x58>
       || (p->Direction != USB_SETUP_DIR_IN)) {
    return USB_STATUS_REQ_ERR;
  }

  index = p->wValue & 0xFF;
     838:	8843      	ldrh	r3, [r0, #2]
  switch ( p->wValue >> 8 ) {
     83a:	0a1a      	lsrs	r2, r3, #8
     83c:	2a02      	cmp	r2, #2
  if ( (p->Recipient != USB_SETUP_RECIPIENT_DEVICE)
       || (p->Direction != USB_SETUP_DIR_IN)) {
    return USB_STATUS_REQ_ERR;
  }

  index = p->wValue & 0xFF;
     83e:	b2db      	uxtb	r3, r3
  switch ( p->wValue >> 8 ) {
     840:	f000 819b 	beq.w	b7a <USBDCH9_SetupCmd+0x64e>
     844:	2a03      	cmp	r2, #3
     846:	f000 818f 	beq.w	b68 <USBDCH9_SetupCmd+0x63c>
     84a:	2a01      	cmp	r2, #1
     84c:	f47f ae9a 	bne.w	584 <USBDCH9_SetupCmd+0x58>
    case USB_DEVICE_DESCRIPTOR:
      if ( index != 0 ) {
     850:	2b00      	cmp	r3, #0
     852:	f47f ae97 	bne.w	584 <USBDCH9_SetupCmd+0x58>
        break;
      }
      data   = pDev->deviceDescriptor;
     856:	6a69      	ldr	r1, [r5, #36]	; 0x24
      length = pDev->deviceDescriptor->bLength;
     858:	780b      	ldrb	r3, [r1, #0]
        length = s->len;
      }
      break;
  }

  if ( length ) {
     85a:	2b00      	cmp	r3, #0
     85c:	f43f ae92 	beq.w	584 <USBDCH9_SetupCmd+0x58>
    retVal = USBD_Write(0, (void*)data, SL_MIN(length, p->wLength), NULL);
     860:	88c2      	ldrh	r2, [r0, #6]
     862:	2000      	movs	r0, #0
     864:	429a      	cmp	r2, r3
     866:	bf28      	it	cs
     868:	461a      	movcs	r2, r3
        break;
    }
  }

  return status;
}
     86a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      }
      break;
  }

  if ( length ) {
    retVal = USBD_Write(0, (void*)data, SL_MIN(length, p->wLength), NULL);
     86e:	4603      	mov	r3, r0
     870:	f7ff bd8e 	b.w	390 <USBD_Write>
}

static int GetConfiguration(USBD_Device_TypeDef *pDev)
{
  int retVal = USB_STATUS_REQ_ERR;
  USB_Setup_TypeDef *p = pDev->setup;
     874:	682b      	ldr	r3, [r5, #0]
  uint8_t *pConfigValue = (uint8_t*)&txBuf;

  if ( (p->wIndex       != 0)
     876:	889a      	ldrh	r2, [r3, #4]
     878:	2a00      	cmp	r2, #0
     87a:	f47f ae83 	bne.w	584 <USBDCH9_SetupCmd+0x58>
       || (p->wLength   != 1)
     87e:	88da      	ldrh	r2, [r3, #6]
     880:	2a01      	cmp	r2, #1
     882:	f47f ae7f 	bne.w	584 <USBDCH9_SetupCmd+0x58>
       || (p->wValue    != 0)
     886:	8858      	ldrh	r0, [r3, #2]
     888:	2800      	cmp	r0, #0
     88a:	f47f ae7b 	bne.w	584 <USBDCH9_SetupCmd+0x58>
       || (p->Direction != USB_SETUP_DIR_IN)
       || (p->Recipient != USB_SETUP_RECIPIENT_DEVICE)) {
     88e:	781b      	ldrb	r3, [r3, #0]
     890:	f003 039f 	and.w	r3, r3, #159	; 0x9f
     894:	2b80      	cmp	r3, #128	; 0x80
     896:	f47f ae75 	bne.w	584 <USBDCH9_SetupCmd+0x58>
    return USB_STATUS_REQ_ERR;
  }

  if ( pDev->state == USBD_STATE_ADDRESSED ) {
     89a:	f895 3020 	ldrb.w	r3, [r5, #32]
     89e:	2b04      	cmp	r3, #4
     8a0:	f000 809f 	beq.w	9e2 <USBDCH9_SetupCmd+0x4b6>
    *pConfigValue = 0;
    retVal = USBD_Write(0, pConfigValue, 1, NULL);
  } else if ( pDev->state == USBD_STATE_CONFIGURED ) {
     8a4:	2b05      	cmp	r3, #5
     8a6:	f47f ae6d 	bne.w	584 <USBDCH9_SetupCmd+0x58>
    retVal = USBD_Write(0, &pDev->configurationValue, 1, NULL);
     8aa:	f105 011c 	add.w	r1, r5, #28
     8ae:	4603      	mov	r3, r0
        break;
    }
  }

  return status;
}
     8b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  if ( pDev->state == USBD_STATE_ADDRESSED ) {
    *pConfigValue = 0;
    retVal = USBD_Write(0, pConfigValue, 1, NULL);
  } else if ( pDev->state == USBD_STATE_CONFIGURED ) {
    retVal = USBD_Write(0, &pDev->configurationValue, 1, NULL);
     8b4:	f7ff bd6c 	b.w	390 <USBD_Write>
     8b8:	20000000 	.word	0x20000000
     8bc:	40100b00 	.word	0x40100b00
     8c0:	c3d3f800 	.word	0xc3d3f800
     8c4:	40100800 	.word	0x40100800
     8c8:	40100900 	.word	0x40100900
     8cc:	c013f800 	.word	0xc013f800
     8d0:	20000bec 	.word	0x20000bec
}

static int SetConfiguration(USBD_Device_TypeDef *pDev)
{
  int retVal = USB_STATUS_REQ_ERR;
  USB_Setup_TypeDef *p = pDev->setup;
     8d4:	682b      	ldr	r3, [r5, #0]

  if ( (p->wIndex            != 0)
     8d6:	889a      	ldrh	r2, [r3, #4]
     8d8:	2a00      	cmp	r2, #0
     8da:	f47f ae53 	bne.w	584 <USBDCH9_SetupCmd+0x58>
       || (p->wLength        != 0)
     8de:	88da      	ldrh	r2, [r3, #6]
     8e0:	2a00      	cmp	r2, #0
     8e2:	f47f ae4f 	bne.w	584 <USBDCH9_SetupCmd+0x58>
       || ( (p->wValue >> 8) != 0)
     8e6:	885a      	ldrh	r2, [r3, #2]
     8e8:	0a11      	lsrs	r1, r2, #8
     8ea:	f47f ae4b 	bne.w	584 <USBDCH9_SetupCmd+0x58>
       || (p->Recipient      != USB_SETUP_RECIPIENT_DEVICE)) {
     8ee:	7819      	ldrb	r1, [r3, #0]
     8f0:	06c9      	lsls	r1, r1, #27
     8f2:	f47f ae47 	bne.w	584 <USBDCH9_SetupCmd+0x58>
    return USB_STATUS_REQ_ERR;
  }

  if ( pDev->state == USBD_STATE_ADDRESSED ) {
     8f6:	f895 1020 	ldrb.w	r1, [r5, #32]
     8fa:	2904      	cmp	r1, #4
     8fc:	f000 80d3 	beq.w	aa6 <USBDCH9_SetupCmd+0x57a>
        USBD_ActivateAllEps(true);
        USBD_SetUsbState(USBD_STATE_CONFIGURED);
      }
      retVal = USB_STATUS_OK;
    }
  } else if ( pDev->state == USBD_STATE_CONFIGURED ) {
     900:	2905      	cmp	r1, #5
     902:	f47f ae3f 	bne.w	584 <USBDCH9_SetupCmd+0x58>
    if ( (p->wValue == 0)
     906:	b122      	cbz	r2, 912 <USBDCH9_SetupCmd+0x3e6>
         || (p->wValue == pDev->configDescriptor->bConfigurationValue)) {
     908:	6aa9      	ldr	r1, [r5, #40]	; 0x28
     90a:	7949      	ldrb	r1, [r1, #5]
     90c:	4291      	cmp	r1, r2
     90e:	f47f ae39 	bne.w	584 <USBDCH9_SetupCmd+0x58>
      pDev->configurationValue = p->wValue;
     912:	772a      	strb	r2, [r5, #28]
      if ( p->wValue == 0 ) {
     914:	885b      	ldrh	r3, [r3, #2]
     916:	2b00      	cmp	r3, #0
     918:	f000 81ea 	beq.w	cf0 <Heap_Size+0xf0>
     91c:	4bc9      	ldr	r3, [pc, #804]	; (c44 <Heap_Size+0x44>)
     91e:	681b      	ldr	r3, [r3, #0]

  if ( forceIdle ) {
    ep->state = D_EP_IDLE;
  }

  if ( ep->in ) {
     920:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
    daintmask = ep->mask;
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     924:	f893 505e 	ldrb.w	r5, [r3, #94]	; 0x5e

  if ( forceIdle ) {
    ep->state = D_EP_IDLE;
  }

  if ( ep->in ) {
     928:	2a00      	cmp	r2, #0
     92a:	f040 81c2 	bne.w	cb2 <Heap_Size+0xb2>
      depctl |= USB_DIEP_CTL_SETD0PIDEF;
    }
    USB_DINEPS[ep->num].CTL = depctl;
  } else {
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     92e:	4fc6      	ldr	r7, [pc, #792]	; (c48 <Heap_Size+0x48>)
    } else {
      depctl |= USB_DIEP_CTL_SETD0PIDEF;
    }
    USB_DINEPS[ep->num].CTL = depctl;
  } else {
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
     930:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     934:	016d      	lsls	r5, r5, #5
    } else {
      depctl |= USB_DIEP_CTL_SETD0PIDEF;
    }
    USB_DINEPS[ep->num].CTL = depctl;
  } else {
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
     936:	0410      	lsls	r0, r2, #16
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     938:	59ec      	ldr	r4, [r5, r7]

    if ( !(depctl & USB_DOEP_CTL_USBACTEP) ) {
     93a:	0422      	lsls	r2, r4, #16
     93c:	f100 819d 	bmi.w	c7a <Heap_Size+0x7a>
      depctl = (depctl
                & ~(DOEP_MPS_EPTYPE_MASK
     940:	4ec2      	ldr	r6, [pc, #776]	; (c4c <Heap_Size+0x4c>)
                    | USB_DOEP_CTL_STALL)  )
               | (ep->packetSize << _USB_DOEP_CTL_MPS_SHIFT)
     942:	f8b3 1068 	ldrh.w	r1, [r3, #104]	; 0x68
               | (ep->type       << _USB_DOEP_CTL_EPTYPE_SHIFT)
     946:	f893 e060 	ldrb.w	lr, [r3, #96]	; 0x60
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;

    if ( !(depctl & USB_DOEP_CTL_USBACTEP) ) {
      depctl = (depctl
                & ~(DOEP_MPS_EPTYPE_MASK
     94a:	4026      	ands	r6, r4
                    | USB_DOEP_CTL_STALL)  )
               | (ep->packetSize << _USB_DOEP_CTL_MPS_SHIFT)
     94c:	4331      	orrs	r1, r6
     94e:	f041 52c0 	orr.w	r2, r1, #402653184	; 0x18000000
     952:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  } else {
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;

    if ( !(depctl & USB_DOEP_CTL_USBACTEP) ) {
      depctl = (depctl
     956:	ea42 428e 	orr.w	r2, r2, lr, lsl #18
               | USB_DIEP_CTL_USBACTEP
               | USB_DIEP_CTL_SNAK;
    } else {
      depctl |= USB_DIEP_CTL_SETD0PIDEF;
    }
    USB_DINEPS[ep->num].CTL = depctl;
     95a:	51ea      	str	r2, [r5, r7]
    }
    USB_DOUTEPS[ep->num].CTL = depctl;
  }

  /* Enable interrupt for this EP */
  USB->DAINTMSK |= daintmask;
     95c:	49bc      	ldr	r1, [pc, #752]	; (c50 <Heap_Size+0x50>)
     95e:	69ca      	ldr	r2, [r1, #28]
     960:	4302      	orrs	r2, r0
     962:	61ca      	str	r2, [r1, #28]

  if ( forceIdle ) {
    ep->state = D_EP_IDLE;
  }

  if ( ep->in ) {
     964:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
    daintmask = ep->mask;
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     968:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86

  if ( forceIdle ) {
    ep->state = D_EP_IDLE;
  }

  if ( ep->in ) {
     96c:	2a00      	cmp	r2, #0
     96e:	f000 8189 	beq.w	c84 <Heap_Size+0x84>
    daintmask = ep->mask;
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     972:	4eb8      	ldr	r6, [pc, #736]	; (c54 <Heap_Size+0x54>)
  if ( forceIdle ) {
    ep->state = D_EP_IDLE;
  }

  if ( ep->in ) {
    daintmask = ep->mask;
     974:	f8b3 0092 	ldrh.w	r0, [r3, #146]	; 0x92
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     978:	0164      	lsls	r4, r4, #5
     97a:	59a1      	ldr	r1, [r4, r6]

    if ( !(depctl & USB_DIEP_CTL_USBACTEP) ) {
     97c:	040d      	lsls	r5, r1, #16
     97e:	f100 8223 	bmi.w	dc8 <Heap_Size+0x1c8>
      depctl = (depctl
                & ~(DIEP_MPS_EPTYPE_TXFNUM_MASK
     982:	4db5      	ldr	r5, [pc, #724]	; (c58 <Heap_Size+0x58>)
                    | USB_DIEP_CTL_STALL)  )
               | (ep->packetSize << _USB_DIEP_CTL_MPS_SHIFT)
     984:	f8b3 2090 	ldrh.w	r2, [r3, #144]	; 0x90
               | (ep->type       << _USB_DIEP_CTL_EPTYPE_SHIFT)
     988:	f893 e088 	ldrb.w	lr, [r3, #136]	; 0x88
               | (ep->txFifoNum  << _USB_DIEP_CTL_TXFNUM_SHIFT)
     98c:	f893 7089 	ldrb.w	r7, [r3, #137]	; 0x89
    daintmask = ep->mask;
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;

    if ( !(depctl & USB_DIEP_CTL_USBACTEP) ) {
      depctl = (depctl
                & ~(DIEP_MPS_EPTYPE_TXFNUM_MASK
     990:	400d      	ands	r5, r1
                    | USB_DIEP_CTL_STALL)  )
               | (ep->packetSize << _USB_DIEP_CTL_MPS_SHIFT)
     992:	432a      	orrs	r2, r5
     994:	f042 53c0 	orr.w	r3, r2, #402653184	; 0x18000000
     998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     99c:	ea43 438e 	orr.w	r3, r3, lr, lsl #18
  if ( ep->in ) {
    daintmask = ep->mask;
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;

    if ( !(depctl & USB_DIEP_CTL_USBACTEP) ) {
      depctl = (depctl
     9a0:	ea43 5387 	orr.w	r3, r3, r7, lsl #22
               | USB_DOEP_CTL_USBACTEP
               | USB_DOEP_CTL_SNAK;
    } else {
      depctl |= USB_DOEP_CTL_SETD0PIDEF;
    }
    USB_DOUTEPS[ep->num].CTL = depctl;
     9a4:	51a3      	str	r3, [r4, r6]
  }

  /* Enable interrupt for this EP */
  USB->DAINTMSK |= daintmask;
     9a6:	4aaa      	ldr	r2, [pc, #680]	; (c50 <Heap_Size+0x50>)
     9a8:	69d3      	ldr	r3, [r2, #28]
     9aa:	4303      	orrs	r3, r0
     9ac:	61d3      	str	r3, [r2, #28]
     9ae:	e64a      	b.n	646 <USBDCH9_SetupCmd+0x11a>
}

static int GetInterface(USBD_Device_TypeDef *pDev)
{
  int retVal = USB_STATUS_REQ_ERR;
  USB_Setup_TypeDef *p = pDev->setup;
     9b0:	682b      	ldr	r3, [r5, #0]
  uint8_t *pAlternateSetting = (uint8_t*)&txBuf;

  /* There is currently no support for alternate interface settings. */

  if ( (p->wIndex         >= pDev->numberOfInterfaces)
     9b2:	7fea      	ldrb	r2, [r5, #31]
     9b4:	8899      	ldrh	r1, [r3, #4]
     9b6:	4291      	cmp	r1, r2
     9b8:	f4bf ade4 	bcs.w	584 <USBDCH9_SetupCmd+0x58>
       || (p->wLength     != 1)
     9bc:	88da      	ldrh	r2, [r3, #6]
     9be:	2a01      	cmp	r2, #1
     9c0:	f47f ade0 	bne.w	584 <USBDCH9_SetupCmd+0x58>
       || (p->wValue      != 0)
     9c4:	885a      	ldrh	r2, [r3, #2]
     9c6:	2a00      	cmp	r2, #0
     9c8:	f47f addc 	bne.w	584 <USBDCH9_SetupCmd+0x58>
       || (p->Direction   != USB_SETUP_DIR_IN)
       || (p->Recipient   != USB_SETUP_RECIPIENT_INTERFACE)) {
     9cc:	781b      	ldrb	r3, [r3, #0]
     9ce:	f003 039f 	and.w	r3, r3, #159	; 0x9f
     9d2:	2b81      	cmp	r3, #129	; 0x81
     9d4:	f47f add6 	bne.w	584 <USBDCH9_SetupCmd+0x58>
    return USB_STATUS_REQ_ERR;
  }

  if ( pDev->state == USBD_STATE_CONFIGURED ) {
     9d8:	f895 3020 	ldrb.w	r3, [r5, #32]
     9dc:	2b05      	cmp	r3, #5
     9de:	f47f add1 	bne.w	584 <USBDCH9_SetupCmd+0x58>
       || (p->Recipient != USB_SETUP_RECIPIENT_DEVICE)) {
    return USB_STATUS_REQ_ERR;
  }

  if ( pDev->state == USBD_STATE_ADDRESSED ) {
    *pConfigValue = 0;
     9e2:	4c9e      	ldr	r4, [pc, #632]	; (c5c <Heap_Size+0x5c>)
     9e4:	2500      	movs	r5, #0
     9e6:	7025      	strb	r5, [r4, #0]
    retVal = USBD_Write(0, pConfigValue, 1, NULL);
     9e8:	4621      	mov	r1, r4
     9ea:	4628      	mov	r0, r5
     9ec:	462b      	mov	r3, r5
     9ee:	2201      	movs	r2, #1
        break;
    }
  }

  return status;
}
     9f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return USB_STATUS_REQ_ERR;
  }

  if ( pDev->state == USBD_STATE_ADDRESSED ) {
    *pConfigValue = 0;
    retVal = USBD_Write(0, pConfigValue, 1, NULL);
     9f4:	f7ff bccc 	b.w	390 <USBD_Write>
      depctl |= USB_DIEP_CTL_SETD0PIDEF;
    }
    USB_DINEPS[ep->num].CTL = depctl;
  } else {
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     9f8:	f022 5370 	bic.w	r3, r2, #1006632960	; 0x3c000000
               | (ep->type       << _USB_DOEP_CTL_EPTYPE_SHIFT)
               | USB_DOEP_CTL_SETD0PIDEF
               | USB_DOEP_CTL_USBACTEP
               | USB_DOEP_CTL_SNAK;
    } else {
      depctl |= USB_DOEP_CTL_SETD0PIDEF;
     9fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     a00:	e61c      	b.n	63c <USBDCH9_SetupCmd+0x110>
      depctl |= USB_DIEP_CTL_SETD0PIDEF;
    }
    USB_DINEPS[ep->num].CTL = depctl;
  } else {
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     a02:	4d91      	ldr	r5, [pc, #580]	; (c48 <Heap_Size+0x48>)
    } else {
      depctl |= USB_DIEP_CTL_SETD0PIDEF;
    }
    USB_DINEPS[ep->num].CTL = depctl;
  } else {
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
     a04:	f8b3 1092 	ldrh.w	r1, [r3, #146]	; 0x92
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     a08:	0140      	lsls	r0, r0, #5
    } else {
      depctl |= USB_DIEP_CTL_SETD0PIDEF;
    }
    USB_DINEPS[ep->num].CTL = depctl;
  } else {
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
     a0a:	0409      	lsls	r1, r1, #16
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     a0c:	5942      	ldr	r2, [r0, r5]

    if ( !(depctl & USB_DOEP_CTL_USBACTEP) ) {
     a0e:	0414      	lsls	r4, r2, #16
     a10:	d4f2      	bmi.n	9f8 <USBDCH9_SetupCmd+0x4cc>
      depctl = (depctl
                & ~(DOEP_MPS_EPTYPE_MASK
     a12:	4e8e      	ldr	r6, [pc, #568]	; (c4c <Heap_Size+0x4c>)
                    | USB_DOEP_CTL_STALL)  )
               | (ep->packetSize << _USB_DOEP_CTL_MPS_SHIFT)
     a14:	f8b3 4090 	ldrh.w	r4, [r3, #144]	; 0x90
               | (ep->type       << _USB_DOEP_CTL_EPTYPE_SHIFT)
     a18:	f893 7088 	ldrb.w	r7, [r3, #136]	; 0x88
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;

    if ( !(depctl & USB_DOEP_CTL_USBACTEP) ) {
      depctl = (depctl
                & ~(DOEP_MPS_EPTYPE_MASK
     a1c:	4016      	ands	r6, r2
                    | USB_DOEP_CTL_STALL)  )
               | (ep->packetSize << _USB_DOEP_CTL_MPS_SHIFT)
     a1e:	ea46 0304 	orr.w	r3, r6, r4
     a22:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
     a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  } else {
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;

    if ( !(depctl & USB_DOEP_CTL_USBACTEP) ) {
      depctl = (depctl
     a2a:	ea43 4387 	orr.w	r3, r3, r7, lsl #18
     a2e:	e605      	b.n	63c <USBDCH9_SetupCmd+0x110>
    ep->state = D_EP_IDLE;
  }

  if ( ep->in ) {
    daintmask = ep->mask;
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     a30:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
     a34:	4f87      	ldr	r7, [pc, #540]	; (c54 <Heap_Size+0x54>)
  if ( forceIdle ) {
    ep->state = D_EP_IDLE;
  }

  if ( ep->in ) {
    daintmask = ep->mask;
     a36:	f8b3 506a 	ldrh.w	r5, [r3, #106]	; 0x6a
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     a3a:	0152      	lsls	r2, r2, #5
     a3c:	59d6      	ldr	r6, [r2, r7]

    if ( !(depctl & USB_DIEP_CTL_USBACTEP) ) {
     a3e:	0431      	lsls	r1, r6, #16
     a40:	f100 80e9 	bmi.w	c16 <Heap_Size+0x16>
      depctl = (depctl
                & ~(DIEP_MPS_EPTYPE_TXFNUM_MASK
     a44:	4884      	ldr	r0, [pc, #528]	; (c58 <Heap_Size+0x58>)
                    | USB_DIEP_CTL_STALL)  )
               | (ep->packetSize << _USB_DIEP_CTL_MPS_SHIFT)
     a46:	f8b3 4068 	ldrh.w	r4, [r3, #104]	; 0x68
               | (ep->type       << _USB_DIEP_CTL_EPTYPE_SHIFT)
     a4a:	f893 e060 	ldrb.w	lr, [r3, #96]	; 0x60
               | (ep->txFifoNum  << _USB_DIEP_CTL_TXFNUM_SHIFT)
     a4e:	f893 1061 	ldrb.w	r1, [r3, #97]	; 0x61
    daintmask = ep->mask;
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;

    if ( !(depctl & USB_DIEP_CTL_USBACTEP) ) {
      depctl = (depctl
                & ~(DIEP_MPS_EPTYPE_TXFNUM_MASK
     a52:	4030      	ands	r0, r6
                    | USB_DIEP_CTL_STALL)  )
               | (ep->packetSize << _USB_DIEP_CTL_MPS_SHIFT)
     a54:	4304      	orrs	r4, r0
     a56:	f044 50c0 	orr.w	r0, r4, #402653184	; 0x18000000
     a5a:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
     a5e:	ea40 408e 	orr.w	r0, r0, lr, lsl #18
  if ( ep->in ) {
    daintmask = ep->mask;
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;

    if ( !(depctl & USB_DIEP_CTL_USBACTEP) ) {
      depctl = (depctl
     a62:	ea40 5181 	orr.w	r1, r0, r1, lsl #22
               | USB_DIEP_CTL_USBACTEP
               | USB_DIEP_CTL_SNAK;
    } else {
      depctl |= USB_DIEP_CTL_SETD0PIDEF;
    }
    USB_DINEPS[ep->num].CTL = depctl;
     a66:	51d1      	str	r1, [r2, r7]
     a68:	e5c4      	b.n	5f4 <USBDCH9_SetupCmd+0xc8>
    return USB_STATUS_REQ_ERR;
  }

  switch ( p->Recipient ) {
    case USB_SETUP_RECIPIENT_DEVICE:
      if ( (p->wIndex == 0)
     a6a:	8891      	ldrh	r1, [r2, #4]
     a6c:	2900      	cmp	r1, #0
     a6e:	f47f ad89 	bne.w	584 <USBDCH9_SetupCmd+0x58>
           && (p->wValue == USB_FEATURE_DEVICE_REMOTE_WAKEUP)
     a72:	8852      	ldrh	r2, [r2, #2]
     a74:	2a01      	cmp	r2, #1
     a76:	f47f ad85 	bne.w	584 <USBDCH9_SetupCmd+0x58>
           && ( (pDev->state == USBD_STATE_ADDRESSED)
                || (pDev->state == USBD_STATE_CONFIGURED))) {
     a7a:	f895 2020 	ldrb.w	r2, [r5, #32]

  switch ( p->Recipient ) {
    case USB_SETUP_RECIPIENT_DEVICE:
      if ( (p->wIndex == 0)
           && (p->wValue == USB_FEATURE_DEVICE_REMOTE_WAKEUP)
           && ( (pDev->state == USBD_STATE_ADDRESSED)
     a7e:	3a04      	subs	r2, #4
     a80:	2a01      	cmp	r2, #1
     a82:	f63f ad7f 	bhi.w	584 <USBDCH9_SetupCmd+0x58>
    case USB_SETUP_RECIPIENT_DEVICE:
      if ( (p->wIndex == 0)
           && (p->wValue == USB_FEATURE_DEVICE_REMOTE_WAKEUP)
           && (pDev->state == USBD_STATE_CONFIGURED)) {
        /* Remote wakeup feature set */
        if ( pDev->configDescriptor->bmAttributes & CONFIG_DESC_BM_REMOTEWAKEUP ) {
     a86:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     a88:	79d2      	ldrb	r2, [r2, #7]
     a8a:	0694      	lsls	r4, r2, #26
     a8c:	f57f ad7a 	bpl.w	584 <USBDCH9_SetupCmd+0x58>
          /* The device is capable of signalling remote wakeup */
          pDev->remoteWakeupEnabled = true;
     a90:	776b      	strb	r3, [r5, #29]
     a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       || (p->Recipient != USB_SETUP_RECIPIENT_DEVICE)) {
    return USB_STATUS_REQ_ERR;
  }

  if ( pDev->state == USBD_STATE_DEFAULT ) {
    if ( p->wValue != 0 ) {
     a96:	2b00      	cmp	r3, #0
     a98:	f43f aebc 	beq.w	814 <USBDCH9_SetupCmd+0x2e8>
      USBD_SetUsbState(USBD_STATE_ADDRESSED);
     a9c:	2004      	movs	r0, #4
     a9e:	f7ff fc61 	bl	364 <USBD_SetUsbState>
     aa2:	8863      	ldrh	r3, [r4, #2]
     aa4:	e6b6      	b.n	814 <USBDCH9_SetupCmd+0x2e8>
     aa6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
       || (p->Recipient      != USB_SETUP_RECIPIENT_DEVICE)) {
    return USB_STATUS_REQ_ERR;
  }

  if ( pDev->state == USBD_STATE_ADDRESSED ) {
    if ( (p->wValue == 0)
     aa8:	b11a      	cbz	r2, ab2 <USBDCH9_SetupCmd+0x586>
         || (p->wValue == pDev->configDescriptor->bConfigurationValue)) {
     aaa:	7948      	ldrb	r0, [r1, #5]
     aac:	4290      	cmp	r0, r2
     aae:	f47f ad69 	bne.w	584 <USBDCH9_SetupCmd+0x58>
      pDev->configurationValue = p->wValue;
     ab2:	772a      	strb	r2, [r5, #28]
      if ( p->wValue == pDev->configDescriptor->bConfigurationValue) {
     ab4:	885a      	ldrh	r2, [r3, #2]
     ab6:	794b      	ldrb	r3, [r1, #5]
     ab8:	429a      	cmp	r2, r3
     aba:	f47f adc4 	bne.w	646 <USBDCH9_SetupCmd+0x11a>
     abe:	4b61      	ldr	r3, [pc, #388]	; (c44 <Heap_Size+0x44>)
     ac0:	681b      	ldr	r3, [r3, #0]

  if ( forceIdle ) {
    ep->state = D_EP_IDLE;
  }

  if ( ep->in ) {
     ac2:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
    daintmask = ep->mask;
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     ac6:	f893 505e 	ldrb.w	r5, [r3, #94]	; 0x5e
#define DOEP_MPS_EPTYPE_MASK        (_USB_DOEP_CTL_MPS_MASK \
                                     | _USB_DOEP_CTL_EPTYPE_MASK)
  uint32_t daintmask, depctl;

  if ( forceIdle ) {
    ep->state = D_EP_IDLE;
     aca:	2100      	movs	r1, #0
     acc:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
  }

  if ( ep->in ) {
     ad0:	2a00      	cmp	r2, #0
     ad2:	f040 8160 	bne.w	d96 <Heap_Size+0x196>
      depctl |= USB_DIEP_CTL_SETD0PIDEF;
    }
    USB_DINEPS[ep->num].CTL = depctl;
  } else {
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     ad6:	4f5c      	ldr	r7, [pc, #368]	; (c48 <Heap_Size+0x48>)
    } else {
      depctl |= USB_DIEP_CTL_SETD0PIDEF;
    }
    USB_DINEPS[ep->num].CTL = depctl;
  } else {
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
     ad8:	f8b3 406a 	ldrh.w	r4, [r3, #106]	; 0x6a
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     adc:	016d      	lsls	r5, r5, #5
    } else {
      depctl |= USB_DIEP_CTL_SETD0PIDEF;
    }
    USB_DINEPS[ep->num].CTL = depctl;
  } else {
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
     ade:	0424      	lsls	r4, r4, #16
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     ae0:	59e8      	ldr	r0, [r5, r7]

    if ( !(depctl & USB_DOEP_CTL_USBACTEP) ) {
     ae2:	0402      	lsls	r2, r0, #16
     ae4:	f100 8152 	bmi.w	d8c <Heap_Size+0x18c>
      depctl = (depctl
                & ~(DOEP_MPS_EPTYPE_MASK
     ae8:	4e58      	ldr	r6, [pc, #352]	; (c4c <Heap_Size+0x4c>)
                    | USB_DOEP_CTL_STALL)  )
               | (ep->packetSize << _USB_DOEP_CTL_MPS_SHIFT)
     aea:	f8b3 1068 	ldrh.w	r1, [r3, #104]	; 0x68
               | (ep->type       << _USB_DOEP_CTL_EPTYPE_SHIFT)
     aee:	f893 e060 	ldrb.w	lr, [r3, #96]	; 0x60
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;

    if ( !(depctl & USB_DOEP_CTL_USBACTEP) ) {
      depctl = (depctl
                & ~(DOEP_MPS_EPTYPE_MASK
     af2:	4006      	ands	r6, r0
                    | USB_DOEP_CTL_STALL)  )
               | (ep->packetSize << _USB_DOEP_CTL_MPS_SHIFT)
     af4:	4331      	orrs	r1, r6
     af6:	f041 52c0 	orr.w	r2, r1, #402653184	; 0x18000000
     afa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  } else {
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;

    if ( !(depctl & USB_DOEP_CTL_USBACTEP) ) {
      depctl = (depctl
     afe:	ea42 428e 	orr.w	r2, r2, lr, lsl #18
               | USB_DIEP_CTL_USBACTEP
               | USB_DIEP_CTL_SNAK;
    } else {
      depctl |= USB_DIEP_CTL_SETD0PIDEF;
    }
    USB_DINEPS[ep->num].CTL = depctl;
     b02:	51ea      	str	r2, [r5, r7]
    }
    USB_DOUTEPS[ep->num].CTL = depctl;
  }

  /* Enable interrupt for this EP */
  USB->DAINTMSK |= daintmask;
     b04:	4952      	ldr	r1, [pc, #328]	; (c50 <Heap_Size+0x50>)
     b06:	69ca      	ldr	r2, [r1, #28]
     b08:	4314      	orrs	r4, r2
     b0a:	61cc      	str	r4, [r1, #28]

  if ( forceIdle ) {
    ep->state = D_EP_IDLE;
  }

  if ( ep->in ) {
     b0c:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
    daintmask = ep->mask;
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     b10:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
#define DOEP_MPS_EPTYPE_MASK        (_USB_DOEP_CTL_MPS_MASK \
                                     | _USB_DOEP_CTL_EPTYPE_MASK)
  uint32_t daintmask, depctl;

  if ( forceIdle ) {
    ep->state = D_EP_IDLE;
     b14:	2100      	movs	r1, #0
     b16:	f883 10a4 	strb.w	r1, [r3, #164]	; 0xa4
  }

  if ( ep->in ) {
     b1a:	2a00      	cmp	r2, #0
     b1c:	f000 811f 	beq.w	d5e <Heap_Size+0x15e>
    daintmask = ep->mask;
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     b20:	4e4c      	ldr	r6, [pc, #304]	; (c54 <Heap_Size+0x54>)
  if ( forceIdle ) {
    ep->state = D_EP_IDLE;
  }

  if ( ep->in ) {
    daintmask = ep->mask;
     b22:	f8b3 0092 	ldrh.w	r0, [r3, #146]	; 0x92
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     b26:	0164      	lsls	r4, r4, #5
     b28:	59a1      	ldr	r1, [r4, r6]

    if ( !(depctl & USB_DIEP_CTL_USBACTEP) ) {
     b2a:	040d      	lsls	r5, r1, #16
     b2c:	f100 8151 	bmi.w	dd2 <Heap_Size+0x1d2>
      depctl = (depctl
                & ~(DIEP_MPS_EPTYPE_TXFNUM_MASK
     b30:	4d49      	ldr	r5, [pc, #292]	; (c58 <Heap_Size+0x58>)
                    | USB_DIEP_CTL_STALL)  )
               | (ep->packetSize << _USB_DIEP_CTL_MPS_SHIFT)
     b32:	f8b3 2090 	ldrh.w	r2, [r3, #144]	; 0x90
               | (ep->type       << _USB_DIEP_CTL_EPTYPE_SHIFT)
     b36:	f893 e088 	ldrb.w	lr, [r3, #136]	; 0x88
               | (ep->txFifoNum  << _USB_DIEP_CTL_TXFNUM_SHIFT)
     b3a:	f893 7089 	ldrb.w	r7, [r3, #137]	; 0x89
    daintmask = ep->mask;
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;

    if ( !(depctl & USB_DIEP_CTL_USBACTEP) ) {
      depctl = (depctl
                & ~(DIEP_MPS_EPTYPE_TXFNUM_MASK
     b3e:	400d      	ands	r5, r1
                    | USB_DIEP_CTL_STALL)  )
               | (ep->packetSize << _USB_DIEP_CTL_MPS_SHIFT)
     b40:	432a      	orrs	r2, r5
     b42:	f042 53c0 	orr.w	r3, r2, #402653184	; 0x18000000
     b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     b4a:	ea43 438e 	orr.w	r3, r3, lr, lsl #18
  if ( ep->in ) {
    daintmask = ep->mask;
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;

    if ( !(depctl & USB_DIEP_CTL_USBACTEP) ) {
      depctl = (depctl
     b4e:	ea43 5387 	orr.w	r3, r3, r7, lsl #22
               | USB_DOEP_CTL_USBACTEP
               | USB_DOEP_CTL_SNAK;
    } else {
      depctl |= USB_DOEP_CTL_SETD0PIDEF;
    }
    USB_DOUTEPS[ep->num].CTL = depctl;
     b52:	51a3      	str	r3, [r4, r6]
  }

  /* Enable interrupt for this EP */
  USB->DAINTMSK |= daintmask;
     b54:	4a3e      	ldr	r2, [pc, #248]	; (c50 <Heap_Size+0x50>)
     b56:	69d3      	ldr	r3, [r2, #28]
     b58:	4318      	orrs	r0, r3
     b5a:	61d0      	str	r0, [r2, #28]
        USBD_ActivateAllEps(true);
        USBD_SetUsbState(USBD_STATE_CONFIGURED);
     b5c:	2005      	movs	r0, #5
     b5e:	f7ff fc01 	bl	364 <USBD_SetUsbState>
      }
      retVal = USB_STATUS_OK;
     b62:	2000      	movs	r0, #0
     b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      data   = pDev->configDescriptor;
      length = pDev->configDescriptor->wTotalLength;
      break;

    case USB_STRING_DESCRIPTOR:
      if ( index < pDev->numberOfStrings ) {
     b68:	7faa      	ldrb	r2, [r5, #30]
     b6a:	4293      	cmp	r3, r2
     b6c:	f6bf ad0a 	bge.w	584 <USBDCH9_SetupCmd+0x58>
        USB_StringDescriptor_TypeDef *s;
        s = ((USB_StringDescriptor_TypeDef**)pDev->stringDescriptors)[index];
     b70:	6aea      	ldr	r2, [r5, #44]	; 0x2c
     b72:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]

        data   = s;
        length = s->len;
     b76:	780b      	ldrb	r3, [r1, #0]
     b78:	e66f      	b.n	85a <USBDCH9_SetupCmd+0x32e>
      data   = pDev->deviceDescriptor;
      length = pDev->deviceDescriptor->bLength;
      break;

    case USB_CONFIG_DESCRIPTOR:
      if ( index != 0 ) {
     b7a:	2b00      	cmp	r3, #0
     b7c:	f47f ad02 	bne.w	584 <USBDCH9_SetupCmd+0x58>
        break;
      }
      data   = pDev->configDescriptor;
     b80:	6aa9      	ldr	r1, [r5, #40]	; 0x28
      length = pDev->configDescriptor->wTotalLength;
     b82:	884b      	ldrh	r3, [r1, #2]
     b84:	e669      	b.n	85a <USBDCH9_SetupCmd+0x32e>
        retVal = USBD_Write(0, pStatus, 2, NULL);
      }
      break;

    case USB_SETUP_RECIPIENT_ENDPOINT:
      ep = USBD_GetEpFromAddr(p->wIndex & 0xFF);
     b86:	8893      	ldrh	r3, [r2, #4]
__STATIC_INLINE USBD_Ep_TypeDef *USBD_GetEpFromAddr(uint8_t epAddr)
{
  int epIndex;
  USBD_Ep_TypeDef *ep = NULL;

  if ( epAddr & USB_SETUP_DIR_MASK ) {
     b88:	f013 0f80 	tst.w	r3, #128	; 0x80
     b8c:	b2da      	uxtb	r2, r3
    epIndex = dev->inEpAddr2EpIndex[epAddr & USB_EPNUM_MASK];
     b8e:	4b2d      	ldr	r3, [pc, #180]	; (c44 <Heap_Size+0x44>)
     b90:	681b      	ldr	r3, [r3, #0]
     b92:	f002 020f 	and.w	r2, r2, #15
     b96:	eb03 0102 	add.w	r1, r3, r2
     b9a:	bf14      	ite	ne
     b9c:	f891 10ac 	ldrbne.w	r1, [r1, #172]	; 0xac
  } else {
    epIndex = dev->outEpAddr2EpIndex[epAddr & USB_EPNUM_MASK];
     ba0:	f891 10bc 	ldrbeq.w	r1, [r1, #188]	; 0xbc
  }

  if ( epIndex ) {
     ba4:	2900      	cmp	r1, #0
     ba6:	d147      	bne.n	c38 <Heap_Size+0x38>
    ep = &dev->ep[epIndex];
  } else if ( (epAddr & USB_EPNUM_MASK) == 0 ) {
     ba8:	2a00      	cmp	r2, #0
     baa:	f47f aceb 	bne.w	584 <USBDCH9_SetupCmd+0x58>
    ep = &dev->ep[0];
     bae:	3334      	adds	r3, #52	; 0x34
      if ( ep ) {
        if ( ( (pDev->state    == USBD_STATE_ADDRESSED)
     bb0:	f895 2020 	ldrb.w	r2, [r5, #32]
     bb4:	2a04      	cmp	r2, #4
     bb6:	d05c      	beq.n	c72 <Heap_Size+0x72>
               && (ep->num     == 0))
             || (pDev->state   == USBD_STATE_CONFIGURED)) {
     bb8:	2a05      	cmp	r2, #5
     bba:	f47f ace3 	bne.w	584 <USBDCH9_SetupCmd+0x58>
  USBD_Ep_TypeDef *ep, uint16_t *halt)
{
  uint32_t depctl, eptype;
  USB_Status_TypeDef retVal = USB_STATUS_REQ_ERR;

  if ( ep->in == true ) {
     bbe:	781a      	ldrb	r2, [r3, #0]
     bc0:	789b      	ldrb	r3, [r3, #2]
    depctl = USB_DINEPS[ep->num].CTL;
     bc2:	015b      	lsls	r3, r3, #5
  USBD_Ep_TypeDef *ep, uint16_t *halt)
{
  uint32_t depctl, eptype;
  USB_Status_TypeDef retVal = USB_STATUS_REQ_ERR;

  if ( ep->in == true ) {
     bc4:	2a00      	cmp	r2, #0
     bc6:	f000 808d 	beq.w	ce4 <Heap_Size+0xe4>
    depctl = USB_DINEPS[ep->num].CTL;
     bca:	4a22      	ldr	r2, [pc, #136]	; (c54 <Heap_Size+0x54>)
     bcc:	589b      	ldr	r3, [r3, r2]
    eptype = depctl & _USB_DIEP_CTL_EPTYPE_MASK;

    if ((eptype == DIEPCTL_EPTYPE_INTR) || (eptype == DIEPCTL_EPTYPE_BULK)) {
     bce:	031a      	lsls	r2, r3, #12
     bd0:	f57f acd8 	bpl.w	584 <USBDCH9_SetupCmd+0x58>
  } else {
    depctl = USB_DOUTEPS[ep->num].CTL;
    eptype = depctl & _USB_DOEP_CTL_EPTYPE_MASK;

    if ((eptype == DOEPCTL_EPTYPE_INTR) || (eptype == DOEPCTL_EPTYPE_BULK)) {
      *halt = depctl & USB_DOEP_CTL_STALL ? 1 : 0;
     bd4:	4a21      	ldr	r2, [pc, #132]	; (c5c <Heap_Size+0x5c>)
     bd6:	f3c3 5340 	ubfx	r3, r3, #21, #1
     bda:	8013      	strh	r3, [r2, #0]
     bdc:	e563      	b.n	6a6 <USBDCH9_SetupCmd+0x17a>
        retVal = USBD_Write(0, pStatus, 2, NULL);
      }
      break;

    case USB_SETUP_RECIPIENT_INTERFACE:
      if ( ( (pDev->state == USBD_STATE_ADDRESSED)
     bde:	f895 3020 	ldrb.w	r3, [r5, #32]
     be2:	2b04      	cmp	r3, #4
     be4:	d03c      	beq.n	c60 <Heap_Size+0x60>
             && (p->wIndex == 0))
           || ( (pDev->state == USBD_STATE_CONFIGURED)
     be6:	2b05      	cmp	r3, #5
     be8:	f47f accc 	bne.w	584 <USBDCH9_SetupCmd+0x58>
                && (p->wIndex < pDev->numberOfInterfaces))) {
     bec:	8892      	ldrh	r2, [r2, #4]
     bee:	7feb      	ldrb	r3, [r5, #31]
     bf0:	429a      	cmp	r2, r3
     bf2:	f4bf acc7 	bcs.w	584 <USBDCH9_SetupCmd+0x58>
        *pStatus = 0;
     bf6:	4c19      	ldr	r4, [pc, #100]	; (c5c <Heap_Size+0x5c>)
     bf8:	2500      	movs	r5, #0
        retVal = USBD_Write(0, pStatus, 2, NULL);
     bfa:	4621      	mov	r1, r4
     bfc:	4628      	mov	r0, r5
     bfe:	462b      	mov	r3, r5
    case USB_SETUP_RECIPIENT_INTERFACE:
      if ( ( (pDev->state == USBD_STATE_ADDRESSED)
             && (p->wIndex == 0))
           || ( (pDev->state == USBD_STATE_CONFIGURED)
                && (p->wIndex < pDev->numberOfInterfaces))) {
        *pStatus = 0;
     c00:	8025      	strh	r5, [r4, #0]
        retVal = USBD_Write(0, pStatus, 2, NULL);
     c02:	2202      	movs	r2, #2
        break;
    }
  }

  return status;
}
     c04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      if ( ( (pDev->state == USBD_STATE_ADDRESSED)
             && (p->wIndex == 0))
           || ( (pDev->state == USBD_STATE_CONFIGURED)
                && (p->wIndex < pDev->numberOfInterfaces))) {
        *pStatus = 0;
        retVal = USBD_Write(0, pStatus, 2, NULL);
     c08:	f7ff bbc2 	b.w	390 <USBD_Write>
      depctl |= USB_DIEP_CTL_SETD0PIDEF;
    }
    USB_DINEPS[ep->num].CTL = depctl;
  } else {
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     c0c:	f024 5270 	bic.w	r2, r4, #1006632960	; 0x3c000000
               | (ep->type       << _USB_DOEP_CTL_EPTYPE_SHIFT)
               | USB_DOEP_CTL_SETD0PIDEF
               | USB_DOEP_CTL_USBACTEP
               | USB_DOEP_CTL_SNAK;
    } else {
      depctl |= USB_DOEP_CTL_SETD0PIDEF;
     c10:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
     c14:	e4ed      	b.n	5f2 <USBDCH9_SetupCmd+0xc6>
    ep->state = D_EP_IDLE;
  }

  if ( ep->in ) {
    daintmask = ep->mask;
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     c16:	f026 5170 	bic.w	r1, r6, #1006632960	; 0x3c000000
               | (ep->txFifoNum  << _USB_DIEP_CTL_TXFNUM_SHIFT)
               | USB_DIEP_CTL_SETD0PIDEF
               | USB_DIEP_CTL_USBACTEP
               | USB_DIEP_CTL_SNAK;
    } else {
      depctl |= USB_DIEP_CTL_SETD0PIDEF;
     c1a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
     c1e:	e722      	b.n	a66 <USBDCH9_SetupCmd+0x53a>
  } else {
    epIndex = dev->outEpAddr2EpIndex[epAddr & USB_EPNUM_MASK];
  }

  if ( epIndex ) {
    ep = &dev->ep[epIndex];
     c20:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     c24:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
     c28:	3334      	adds	r3, #52	; 0x34
     c2a:	e569      	b.n	700 <USBDCH9_SetupCmd+0x1d4>
     c2c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     c30:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
     c34:	3134      	adds	r1, #52	; 0x34
     c36:	e5a7      	b.n	788 <USBDCH9_SetupCmd+0x25c>
     c38:	eb01 0181 	add.w	r1, r1, r1, lsl #2
     c3c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
     c40:	3334      	adds	r3, #52	; 0x34
     c42:	e7b5      	b.n	bb0 <USBDCH9_SetupCmd+0x684>
     c44:	20000000 	.word	0x20000000
     c48:	40100b00 	.word	0x40100b00
     c4c:	c3d3f800 	.word	0xc3d3f800
     c50:	40100800 	.word	0x40100800
     c54:	40100900 	.word	0x40100900
     c58:	c013f800 	.word	0xc013f800
     c5c:	20000bec 	.word	0x20000bec
      }
      break;

    case USB_SETUP_RECIPIENT_INTERFACE:
      if ( ( (pDev->state == USBD_STATE_ADDRESSED)
             && (p->wIndex == 0))
     c60:	8893      	ldrh	r3, [r2, #4]
     c62:	2b00      	cmp	r3, #0
     c64:	d0c7      	beq.n	bf6 <USBDCH9_SetupCmd+0x6ca>
     c66:	e48d      	b.n	584 <USBDCH9_SetupCmd+0x58>
    }
    USBDHAL_SetAddr(p->wValue);
    retVal = USB_STATUS_OK;
  } else if ( pDev->state == USBD_STATE_ADDRESSED ) {
    if ( p->wValue == 0 ) {
      USBD_SetUsbState(USBD_STATE_DEFAULT);
     c68:	2003      	movs	r0, #3
     c6a:	f7ff fb7b 	bl	364 <USBD_SetUsbState>
     c6e:	8863      	ldrh	r3, [r4, #2]
     c70:	e5d0      	b.n	814 <USBDCH9_SetupCmd+0x2e8>

    case USB_SETUP_RECIPIENT_ENDPOINT:
      ep = USBD_GetEpFromAddr(p->wIndex & 0xFF);
      if ( ep ) {
        if ( ( (pDev->state    == USBD_STATE_ADDRESSED)
               && (ep->num     == 0))
     c72:	789a      	ldrb	r2, [r3, #2]
     c74:	2a00      	cmp	r2, #0
     c76:	d0a2      	beq.n	bbe <USBDCH9_SetupCmd+0x692>
     c78:	e484      	b.n	584 <USBDCH9_SetupCmd+0x58>
    ep->state = D_EP_IDLE;
  }

  if ( ep->in ) {
    daintmask = ep->mask;
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     c7a:	f024 5270 	bic.w	r2, r4, #1006632960	; 0x3c000000
               | (ep->txFifoNum  << _USB_DIEP_CTL_TXFNUM_SHIFT)
               | USB_DIEP_CTL_SETD0PIDEF
               | USB_DIEP_CTL_USBACTEP
               | USB_DIEP_CTL_SNAK;
    } else {
      depctl |= USB_DIEP_CTL_SETD0PIDEF;
     c7e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
     c82:	e66a      	b.n	95a <USBDCH9_SetupCmd+0x42e>
    }
    USB_DINEPS[ep->num].CTL = depctl;
  } else {
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     c84:	4e6e      	ldr	r6, [pc, #440]	; (e40 <Heap_Size+0x240>)
    } else {
      depctl |= USB_DIEP_CTL_SETD0PIDEF;
    }
    USB_DINEPS[ep->num].CTL = depctl;
  } else {
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
     c86:	f8b3 0092 	ldrh.w	r0, [r3, #146]	; 0x92
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     c8a:	0164      	lsls	r4, r4, #5
    } else {
      depctl |= USB_DIEP_CTL_SETD0PIDEF;
    }
    USB_DINEPS[ep->num].CTL = depctl;
  } else {
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
     c8c:	0400      	lsls	r0, r0, #16
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     c8e:	59a2      	ldr	r2, [r4, r6]

    if ( !(depctl & USB_DOEP_CTL_USBACTEP) ) {
     c90:	0411      	lsls	r1, r2, #16
     c92:	d45f      	bmi.n	d54 <Heap_Size+0x154>
      depctl = (depctl
                & ~(DOEP_MPS_EPTYPE_MASK
     c94:	4d6b      	ldr	r5, [pc, #428]	; (e44 <Heap_Size+0x244>)
                    | USB_DOEP_CTL_STALL)  )
               | (ep->packetSize << _USB_DOEP_CTL_MPS_SHIFT)
     c96:	f8b3 1090 	ldrh.w	r1, [r3, #144]	; 0x90
               | (ep->type       << _USB_DOEP_CTL_EPTYPE_SHIFT)
     c9a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;

    if ( !(depctl & USB_DOEP_CTL_USBACTEP) ) {
      depctl = (depctl
                & ~(DOEP_MPS_EPTYPE_MASK
     c9e:	4015      	ands	r5, r2
                    | USB_DOEP_CTL_STALL)  )
               | (ep->packetSize << _USB_DOEP_CTL_MPS_SHIFT)
     ca0:	ea45 0201 	orr.w	r2, r5, r1
     ca4:	f042 52c0 	orr.w	r2, r2, #402653184	; 0x18000000
     ca8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  } else {
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;

    if ( !(depctl & USB_DOEP_CTL_USBACTEP) ) {
      depctl = (depctl
     cac:	ea42 4383 	orr.w	r3, r2, r3, lsl #18
     cb0:	e678      	b.n	9a4 <USBDCH9_SetupCmd+0x478>
    ep->state = D_EP_IDLE;
  }

  if ( ep->in ) {
    daintmask = ep->mask;
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     cb2:	4f65      	ldr	r7, [pc, #404]	; (e48 <Heap_Size+0x248>)
  if ( forceIdle ) {
    ep->state = D_EP_IDLE;
  }

  if ( ep->in ) {
    daintmask = ep->mask;
     cb4:	f8b3 006a 	ldrh.w	r0, [r3, #106]	; 0x6a
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     cb8:	016d      	lsls	r5, r5, #5
     cba:	59ec      	ldr	r4, [r5, r7]

    if ( !(depctl & USB_DIEP_CTL_USBACTEP) ) {
     cbc:	0426      	lsls	r6, r4, #16
     cbe:	d4dc      	bmi.n	c7a <Heap_Size+0x7a>
      depctl = (depctl
                & ~(DIEP_MPS_EPTYPE_TXFNUM_MASK
     cc0:	4e62      	ldr	r6, [pc, #392]	; (e4c <Heap_Size+0x24c>)
                    | USB_DIEP_CTL_STALL)  )
               | (ep->packetSize << _USB_DIEP_CTL_MPS_SHIFT)
     cc2:	f8b3 1068 	ldrh.w	r1, [r3, #104]	; 0x68
               | (ep->type       << _USB_DIEP_CTL_EPTYPE_SHIFT)
     cc6:	f893 c060 	ldrb.w	ip, [r3, #96]	; 0x60
               | (ep->txFifoNum  << _USB_DIEP_CTL_TXFNUM_SHIFT)
     cca:	f893 e061 	ldrb.w	lr, [r3, #97]	; 0x61
    daintmask = ep->mask;
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;

    if ( !(depctl & USB_DIEP_CTL_USBACTEP) ) {
      depctl = (depctl
                & ~(DIEP_MPS_EPTYPE_TXFNUM_MASK
     cce:	4026      	ands	r6, r4
                    | USB_DIEP_CTL_STALL)  )
               | (ep->packetSize << _USB_DIEP_CTL_MPS_SHIFT)
     cd0:	4331      	orrs	r1, r6
     cd2:	f041 52c0 	orr.w	r2, r1, #402653184	; 0x18000000
     cd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
     cda:	ea42 428c 	orr.w	r2, r2, ip, lsl #18
  if ( ep->in ) {
    daintmask = ep->mask;
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;

    if ( !(depctl & USB_DIEP_CTL_USBACTEP) ) {
      depctl = (depctl
     cde:	ea42 528e 	orr.w	r2, r2, lr, lsl #22
     ce2:	e63a      	b.n	95a <USBDCH9_SetupCmd+0x42e>
    if ((eptype == DIEPCTL_EPTYPE_INTR) || (eptype == DIEPCTL_EPTYPE_BULK)) {
      *halt = depctl & USB_DIEP_CTL_STALL ? 1 : 0;
      retVal = USB_STATUS_OK;
    }
  } else {
    depctl = USB_DOUTEPS[ep->num].CTL;
     ce4:	4a56      	ldr	r2, [pc, #344]	; (e40 <Heap_Size+0x240>)
     ce6:	589b      	ldr	r3, [r3, r2]
    eptype = depctl & _USB_DOEP_CTL_EPTYPE_MASK;

    if ((eptype == DOEPCTL_EPTYPE_INTR) || (eptype == DOEPCTL_EPTYPE_BULK)) {
     ce8:	031f      	lsls	r7, r3, #12
     cea:	f57f ac4b 	bpl.w	584 <USBDCH9_SetupCmd+0x58>
     cee:	e771      	b.n	bd4 <USBDCH9_SetupCmd+0x6a8>
  } else if ( pDev->state == USBD_STATE_CONFIGURED ) {
    if ( (p->wValue == 0)
         || (p->wValue == pDev->configDescriptor->bConfigurationValue)) {
      pDev->configurationValue = p->wValue;
      if ( p->wValue == 0 ) {
        USBD_SetUsbState(USBD_STATE_ADDRESSED);
     cf0:	2004      	movs	r0, #4
     cf2:	f7ff fb37 	bl	364 <USBD_SetUsbState>
{
  int i;
  USBD_Ep_TypeDef *ep;

  for ( i = 1; i <= NUM_EP_USED; i++ ) {
    ep = &dev->ep[i];
     cf6:	4b56      	ldr	r3, [pc, #344]	; (e50 <Heap_Size+0x250>)
     cf8:	681b      	ldr	r3, [r3, #0]

    if ( ep->state == D_EP_IDLE ) {
     cfa:	f893 007c 	ldrb.w	r0, [r3, #124]	; 0x7c
     cfe:	b978      	cbnz	r0, d20 <Heap_Size+0x120>

__STATIC_INLINE void USBDHAL_DeactivateEp(USBD_Ep_TypeDef *ep)
{
  uint32_t daintmask;

  if ( ep->in ) {
     d00:	f893 405c 	ldrb.w	r4, [r3, #92]	; 0x5c
     d04:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
     d08:	f8b3 106a 	ldrh.w	r1, [r3, #106]	; 0x6a
     d0c:	2c00      	cmp	r4, #0
     d0e:	d074      	beq.n	dfa <Heap_Size+0x1fa>
    USB_DINEPS[ep->num].CTL = 0;
     d10:	0152      	lsls	r2, r2, #5
     d12:	4c4d      	ldr	r4, [pc, #308]	; (e48 <Heap_Size+0x248>)
     d14:	5110      	str	r0, [r2, r4]
    USB_DOUTEPS[ep->num].CTL = 0;
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
  }

  /* Disable interrupt for this EP */
  USB->DAINTMSK &= ~daintmask;
     d16:	484f      	ldr	r0, [pc, #316]	; (e54 <Heap_Size+0x254>)
     d18:	69c2      	ldr	r2, [r0, #28]
     d1a:	ea22 0101 	bic.w	r1, r2, r1
     d1e:	61c1      	str	r1, [r0, #28]
     d20:	f893 00a4 	ldrb.w	r0, [r3, #164]	; 0xa4
     d24:	b978      	cbnz	r0, d46 <Heap_Size+0x146>
     d26:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86

__STATIC_INLINE void USBDHAL_DeactivateEp(USBD_Ep_TypeDef *ep)
{
  uint32_t daintmask;

  if ( ep->in ) {
     d2a:	f893 1084 	ldrb.w	r1, [r3, #132]	; 0x84
     d2e:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
    USB_DINEPS[ep->num].CTL = 0;
     d32:	0152      	lsls	r2, r2, #5

__STATIC_INLINE void USBDHAL_DeactivateEp(USBD_Ep_TypeDef *ep)
{
  uint32_t daintmask;

  if ( ep->in ) {
     d34:	2900      	cmp	r1, #0
     d36:	d05c      	beq.n	df2 <Heap_Size+0x1f2>
    USB_DINEPS[ep->num].CTL = 0;
     d38:	4943      	ldr	r1, [pc, #268]	; (e48 <Heap_Size+0x248>)
     d3a:	5050      	str	r0, [r2, r1]
    USB_DOUTEPS[ep->num].CTL = 0;
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
  }

  /* Disable interrupt for this EP */
  USB->DAINTMSK &= ~daintmask;
     d3c:	4945      	ldr	r1, [pc, #276]	; (e54 <Heap_Size+0x254>)
     d3e:	69ca      	ldr	r2, [r1, #28]
     d40:	ea22 0303 	bic.w	r3, r2, r3
     d44:	61cb      	str	r3, [r1, #28]
      USBDHAL_DeactivateEp(ep);
    }
  }

  USBDHAL_AbortAllTransfers(reason);
     d46:	f06f 0008 	mvn.w	r0, #8
     d4a:	f001 f90f 	bl	1f6c <USBDHAL_AbortAllTransfers>
        USBD_DeactivateAllEps(USB_STATUS_DEVICE_UNCONFIGURED);
      } else {
        /* Reenable device endpoints, will reset data toggles */
        USBD_ActivateAllEps(false);
      }
      retVal = USB_STATUS_OK;
     d4e:	2000      	movs	r0, #0
     d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      depctl |= USB_DIEP_CTL_SETD0PIDEF;
    }
    USB_DINEPS[ep->num].CTL = depctl;
  } else {
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     d54:	f022 5370 	bic.w	r3, r2, #1006632960	; 0x3c000000
               | (ep->type       << _USB_DOEP_CTL_EPTYPE_SHIFT)
               | USB_DOEP_CTL_SETD0PIDEF
               | USB_DOEP_CTL_USBACTEP
               | USB_DOEP_CTL_SNAK;
    } else {
      depctl |= USB_DOEP_CTL_SETD0PIDEF;
     d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     d5c:	e622      	b.n	9a4 <USBDCH9_SetupCmd+0x478>
      depctl |= USB_DIEP_CTL_SETD0PIDEF;
    }
    USB_DINEPS[ep->num].CTL = depctl;
  } else {
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     d5e:	4e38      	ldr	r6, [pc, #224]	; (e40 <Heap_Size+0x240>)
    } else {
      depctl |= USB_DIEP_CTL_SETD0PIDEF;
    }
    USB_DINEPS[ep->num].CTL = depctl;
  } else {
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
     d60:	f8b3 0092 	ldrh.w	r0, [r3, #146]	; 0x92
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     d64:	0164      	lsls	r4, r4, #5
    } else {
      depctl |= USB_DIEP_CTL_SETD0PIDEF;
    }
    USB_DINEPS[ep->num].CTL = depctl;
  } else {
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
     d66:	0400      	lsls	r0, r0, #16
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     d68:	59a2      	ldr	r2, [r4, r6]

    if ( !(depctl & USB_DOEP_CTL_USBACTEP) ) {
     d6a:	0411      	lsls	r1, r2, #16
     d6c:	d436      	bmi.n	ddc <Heap_Size+0x1dc>
      depctl = (depctl
                & ~(DOEP_MPS_EPTYPE_MASK
     d6e:	4d35      	ldr	r5, [pc, #212]	; (e44 <Heap_Size+0x244>)
                    | USB_DOEP_CTL_STALL)  )
               | (ep->packetSize << _USB_DOEP_CTL_MPS_SHIFT)
     d70:	f8b3 1090 	ldrh.w	r1, [r3, #144]	; 0x90
               | (ep->type       << _USB_DOEP_CTL_EPTYPE_SHIFT)
     d74:	f893 7088 	ldrb.w	r7, [r3, #136]	; 0x88
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;

    if ( !(depctl & USB_DOEP_CTL_USBACTEP) ) {
      depctl = (depctl
                & ~(DOEP_MPS_EPTYPE_MASK
     d78:	4015      	ands	r5, r2
                    | USB_DOEP_CTL_STALL)  )
               | (ep->packetSize << _USB_DOEP_CTL_MPS_SHIFT)
     d7a:	ea45 0301 	orr.w	r3, r5, r1
     d7e:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
     d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  } else {
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;

    if ( !(depctl & USB_DOEP_CTL_USBACTEP) ) {
      depctl = (depctl
     d86:	ea43 4387 	orr.w	r3, r3, r7, lsl #18
     d8a:	e6e2      	b.n	b52 <USBDCH9_SetupCmd+0x626>
    ep->state = D_EP_IDLE;
  }

  if ( ep->in ) {
    daintmask = ep->mask;
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     d8c:	f020 5270 	bic.w	r2, r0, #1006632960	; 0x3c000000
               | (ep->txFifoNum  << _USB_DIEP_CTL_TXFNUM_SHIFT)
               | USB_DIEP_CTL_SETD0PIDEF
               | USB_DIEP_CTL_USBACTEP
               | USB_DIEP_CTL_SNAK;
    } else {
      depctl |= USB_DIEP_CTL_SETD0PIDEF;
     d90:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
     d94:	e6b5      	b.n	b02 <USBDCH9_SetupCmd+0x5d6>
    ep->state = D_EP_IDLE;
  }

  if ( ep->in ) {
    daintmask = ep->mask;
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     d96:	4f2c      	ldr	r7, [pc, #176]	; (e48 <Heap_Size+0x248>)
  if ( forceIdle ) {
    ep->state = D_EP_IDLE;
  }

  if ( ep->in ) {
    daintmask = ep->mask;
     d98:	f8b3 406a 	ldrh.w	r4, [r3, #106]	; 0x6a
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     d9c:	016d      	lsls	r5, r5, #5
     d9e:	59e8      	ldr	r0, [r5, r7]

    if ( !(depctl & USB_DIEP_CTL_USBACTEP) ) {
     da0:	0406      	lsls	r6, r0, #16
     da2:	d4f3      	bmi.n	d8c <Heap_Size+0x18c>
      depctl = (depctl
                & ~(DIEP_MPS_EPTYPE_TXFNUM_MASK
     da4:	4e29      	ldr	r6, [pc, #164]	; (e4c <Heap_Size+0x24c>)
                    | USB_DIEP_CTL_STALL)  )
               | (ep->packetSize << _USB_DIEP_CTL_MPS_SHIFT)
     da6:	f8b3 1068 	ldrh.w	r1, [r3, #104]	; 0x68
               | (ep->type       << _USB_DIEP_CTL_EPTYPE_SHIFT)
     daa:	f893 c060 	ldrb.w	ip, [r3, #96]	; 0x60
               | (ep->txFifoNum  << _USB_DIEP_CTL_TXFNUM_SHIFT)
     dae:	f893 e061 	ldrb.w	lr, [r3, #97]	; 0x61
    daintmask = ep->mask;
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;

    if ( !(depctl & USB_DIEP_CTL_USBACTEP) ) {
      depctl = (depctl
                & ~(DIEP_MPS_EPTYPE_TXFNUM_MASK
     db2:	4006      	ands	r6, r0
                    | USB_DIEP_CTL_STALL)  )
               | (ep->packetSize << _USB_DIEP_CTL_MPS_SHIFT)
     db4:	4331      	orrs	r1, r6
     db6:	f041 52c0 	orr.w	r2, r1, #402653184	; 0x18000000
     dba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
     dbe:	ea42 428c 	orr.w	r2, r2, ip, lsl #18
  if ( ep->in ) {
    daintmask = ep->mask;
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;

    if ( !(depctl & USB_DIEP_CTL_USBACTEP) ) {
      depctl = (depctl
     dc2:	ea42 528e 	orr.w	r2, r2, lr, lsl #22
     dc6:	e69c      	b.n	b02 <USBDCH9_SetupCmd+0x5d6>
    ep->state = D_EP_IDLE;
  }

  if ( ep->in ) {
    daintmask = ep->mask;
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     dc8:	f021 5370 	bic.w	r3, r1, #1006632960	; 0x3c000000
               | (ep->txFifoNum  << _USB_DIEP_CTL_TXFNUM_SHIFT)
               | USB_DIEP_CTL_SETD0PIDEF
               | USB_DIEP_CTL_USBACTEP
               | USB_DIEP_CTL_SNAK;
    } else {
      depctl |= USB_DIEP_CTL_SETD0PIDEF;
     dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     dd0:	e5e8      	b.n	9a4 <USBDCH9_SetupCmd+0x478>
    ep->state = D_EP_IDLE;
  }

  if ( ep->in ) {
    daintmask = ep->mask;
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     dd2:	f021 5370 	bic.w	r3, r1, #1006632960	; 0x3c000000
               | (ep->txFifoNum  << _USB_DIEP_CTL_TXFNUM_SHIFT)
               | USB_DIEP_CTL_SETD0PIDEF
               | USB_DIEP_CTL_USBACTEP
               | USB_DIEP_CTL_SNAK;
    } else {
      depctl |= USB_DIEP_CTL_SETD0PIDEF;
     dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     dda:	e6ba      	b.n	b52 <USBDCH9_SetupCmd+0x626>
    }
    USB_DINEPS[ep->num].CTL = depctl;
  } else {
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     ddc:	f022 5370 	bic.w	r3, r2, #1006632960	; 0x3c000000
               | (ep->type       << _USB_DOEP_CTL_EPTYPE_SHIFT)
               | USB_DOEP_CTL_SETD0PIDEF
               | USB_DOEP_CTL_USBACTEP
               | USB_DOEP_CTL_SNAK;
    } else {
      depctl |= USB_DOEP_CTL_SETD0PIDEF;
     de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     de4:	e6b5      	b.n	b52 <USBDCH9_SetupCmd+0x626>
        if ( pDev->callbacks->isSelfPowered != NULL ) {
          if ( pDev->callbacks->isSelfPowered() ) {
            *pStatus |= DEVICE_IS_SELFPOWERED;
          }
        } else {
          if ( pDev->configDescriptor->bmAttributes & CONFIG_DESC_BM_SELFPOWERED ) {
     de6:	6aab      	ldr	r3, [r5, #40]	; 0x28
     de8:	79db      	ldrb	r3, [r3, #7]
     dea:	0659      	lsls	r1, r3, #25
     dec:	f57f ac5b 	bpl.w	6a6 <USBDCH9_SetupCmd+0x17a>
     df0:	e455      	b.n	69e <USBDCH9_SetupCmd+0x172>

  if ( ep->in ) {
    USB_DINEPS[ep->num].CTL = 0;
    daintmask = ep->mask;
  } else {
    USB_DOUTEPS[ep->num].CTL = 0;
     df2:	4813      	ldr	r0, [pc, #76]	; (e40 <Heap_Size+0x240>)
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
     df4:	041b      	lsls	r3, r3, #16

  if ( ep->in ) {
    USB_DINEPS[ep->num].CTL = 0;
    daintmask = ep->mask;
  } else {
    USB_DOUTEPS[ep->num].CTL = 0;
     df6:	5011      	str	r1, [r2, r0]
     df8:	e7a0      	b.n	d3c <Heap_Size+0x13c>
     dfa:	0152      	lsls	r2, r2, #5
     dfc:	4810      	ldr	r0, [pc, #64]	; (e40 <Heap_Size+0x240>)
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
     dfe:	0409      	lsls	r1, r1, #16

  if ( ep->in ) {
    USB_DINEPS[ep->num].CTL = 0;
    daintmask = ep->mask;
  } else {
    USB_DOUTEPS[ep->num].CTL = 0;
     e00:	5014      	str	r4, [r2, r0]
     e02:	e788      	b.n	d16 <Heap_Size+0x116>
      depctl &= ~USB_DIEP_CTL_STALL;
      USB_DINEPS[ep->num].CTL = depctl;
      retVal = USB_STATUS_OK;
    }
  } else {
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     e04:	480e      	ldr	r0, [pc, #56]	; (e40 <Heap_Size+0x240>)
     e06:	580b      	ldr	r3, [r1, r0]
    eptype = depctl & _USB_DOEP_CTL_EPTYPE_MASK;

    if ((eptype == DIEPCTL_EPTYPE_INTR) || (eptype == DIEPCTL_EPTYPE_BULK)) {
     e08:	031d      	lsls	r5, r3, #12
     e0a:	d515      	bpl.n	e38 <Heap_Size+0x238>
      depctl |=  USB_DOEP_CTL_SETD0PIDEF;
      depctl &= ~USB_DOEP_CTL_STALL;
     e0c:	f023 5370 	bic.w	r3, r3, #1006632960	; 0x3c000000
     e10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
     e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
      USB_DOUTEPS[ep->num].CTL = depctl;
     e18:	500b      	str	r3, [r1, r0]
      retVal = USB_STATUS_OK;
     e1a:	4610      	mov	r0, r2
     e1c:	e48e      	b.n	73c <USBDCH9_SetupCmd+0x210>
      }
      USB_DINEPS[ep->num].CTL = depctl | USB_DIEP_CTL_STALL;
      retVal = USB_STATUS_OK;
    }
  } else {
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     e1e:	4c08      	ldr	r4, [pc, #32]	; (e40 <Heap_Size+0x240>)
     e20:	5913      	ldr	r3, [r2, r4]
    eptype = depctl & _USB_DOEP_CTL_EPTYPE_MASK;
     e22:	f403 2540 	and.w	r5, r3, #786432	; 0xc0000

    if ( eptype != DIEPCTL_EPTYPE_ISOC ) {
     e26:	f5b5 2f80 	cmp.w	r5, #262144	; 0x40000
      }
      USB_DINEPS[ep->num].CTL = depctl | USB_DIEP_CTL_STALL;
      retVal = USB_STATUS_OK;
    }
  } else {
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     e2a:	f023 5370 	bic.w	r3, r3, #1006632960	; 0x3c000000
    eptype = depctl & _USB_DOEP_CTL_EPTYPE_MASK;

    if ( eptype != DIEPCTL_EPTYPE_ISOC ) {
     e2e:	d005      	beq.n	e3c <Heap_Size+0x23c>
      USB_DOUTEPS[ep->num].CTL = depctl | USB_DOEP_CTL_STALL;
     e30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
     e34:	5113      	str	r3, [r2, r4]
     e36:	e4cb      	b.n	7d0 <USBDCH9_SetupCmd+0x2a4>
}

__STATIC_INLINE USB_Status_TypeDef USBDHAL_UnStallEp(USBD_Ep_TypeDef *ep)
{
  uint32_t depctl, eptype;
  USB_Status_TypeDef retVal = USB_STATUS_REQ_ERR;
     e38:	20ff      	movs	r0, #255	; 0xff
     e3a:	e47f      	b.n	73c <USBDCH9_SetupCmd+0x210>
}

__STATIC_INLINE USB_Status_TypeDef USBDHAL_StallEp(USBD_Ep_TypeDef *ep)
{
  uint32_t depctl, eptype;
  USB_Status_TypeDef retVal = USB_STATUS_REQ_ERR;
     e3c:	20ff      	movs	r0, #255	; 0xff
     e3e:	e4c7      	b.n	7d0 <USBDCH9_SetupCmd+0x2a4>
     e40:	40100b00 	.word	0x40100b00
     e44:	c3d3f800 	.word	0xc3d3f800
     e48:	40100900 	.word	0x40100900
     e4c:	c013f800 	.word	0xc013f800
     e50:	20000000 	.word	0x20000000
     e54:	40100800 	.word	0x40100800

00000e58 <USBDEP_Ep0Handler>:
  static bool statusIn;
  static uint32_t xferred;
  static USB_XferCompleteCb_TypeDef callback;

  ep = &device->ep[0];
  switch ( ep->state ) {
     e58:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 * A state machine navigate us through the phases of a control transfer
 * according to "chapter 9" in the USB spec.
 */
#if !defined(USB_DOEP0INT_STUPPKTRCVD)
void USBDEP_Ep0Handler(USBD_Device_TypeDef *device)
{
     e5c:	b570      	push	{r4, r5, r6, lr}
     e5e:	4604      	mov	r4, r0
  static bool statusIn;
  static uint32_t xferred;
  static USB_XferCompleteCb_TypeDef callback;

  ep = &device->ep[0];
  switch ( ep->state ) {
     e60:	2b04      	cmp	r3, #4
     e62:	d809      	bhi.n	e78 <USBDEP_Ep0Handler+0x20>
     e64:	e8df f003 	tbb	[pc, r3]
     e68:	09297793 	.word	0x09297793
     e6c:	09          	.byte	0x09
     e6d:	00          	.byte	0x00
        ep->in = false;                     /* OUT for next SETUP           */
        USBDHAL_StallEp(ep);                /* Stall Ep0 OUT                */
        USBDHAL_ReenableEp0Setup(device);   /* Prepare for next SETUP packet*/
      } else { /* ( Status == USB_STATUS_OK ) */
        if ( (ep->state == D_EP_RECEIVING) || (ep->state == D_EP_TRANSMITTING) ) {
          callback = ep->xferCompleteCb;
     e6e:	6da2      	ldr	r2, [r4, #88]	; 0x58
     e70:	602a      	str	r2, [r5, #0]
        }

        if ( ep->state != D_EP_RECEIVING ) {
     e72:	2b02      	cmp	r3, #2
     e74:	f040 809d 	bne.w	fb2 <USBDEP_Ep0Handler+0x15a>
     e78:	bd70      	pop	{r4, r5, r6, pc}
      }
      break;

    case D_EP0_IN_STATUS:
    case D_EP0_OUT_STATUS:
      if ( statusIn ) {
     e7a:	4bb8      	ldr	r3, [pc, #736]	; (115c <USBDEP_Ep0Handler+0x304>)
     e7c:	781b      	ldrb	r3, [r3, #0]
     e7e:	b173      	cbz	r3, e9e <USBDEP_Ep0Handler+0x46>
}

__STATIC_INLINE void USBDHAL_ReenableEp0Setup(USBD_Device_TypeDef *dev)

{
  USB->DOEP0DMAADDR = (uint32_t)dev->setupPkt;
     e80:	49b7      	ldr	r1, [pc, #732]	; (1160 <USBDEP_Ep0Handler+0x308>)
     e82:	1d03      	adds	r3, r0, #4
     e84:	f8c1 3314 	str.w	r3, [r1, #788]	; 0x314
  USB->DOEP0CTL = (USB->DOEP0CTL & ~DEPCTL_WO_BITMASK)
     e88:	f8d1 3300 	ldr.w	r3, [r1, #768]	; 0x300
     e8c:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
                  | USB_DOEP0CTL_EPENA
     e90:	f023 423c 	bic.w	r2, r3, #3154116608	; 0xbc000000
     e94:	f040 4300 	orr.w	r3, r0, #2147483648	; 0x80000000
                  | dev->ep0MpsCode;
     e98:	4313      	orrs	r3, r2

__STATIC_INLINE void USBDHAL_ReenableEp0Setup(USBD_Device_TypeDef *dev)

{
  USB->DOEP0DMAADDR = (uint32_t)dev->setupPkt;
  USB->DOEP0CTL = (USB->DOEP0CTL & ~DEPCTL_WO_BITMASK)
     e9a:	f8c1 3300 	str.w	r3, [r1, #768]	; 0x300
        USBDHAL_ReenableEp0Setup(device);
      }

      if ( callback != NULL ) {
     e9e:	4bb1      	ldr	r3, [pc, #708]	; (1164 <USBDEP_Ep0Handler+0x30c>)
     ea0:	681b      	ldr	r3, [r3, #0]
     ea2:	b123      	cbz	r3, eae <USBDEP_Ep0Handler+0x56>
        callback(USB_STATUS_OK, xferred, 0);
     ea4:	4ab0      	ldr	r2, [pc, #704]	; (1168 <USBDEP_Ep0Handler+0x310>)
     ea6:	2000      	movs	r0, #0
     ea8:	6811      	ldr	r1, [r2, #0]
     eaa:	4602      	mov	r2, r0
     eac:	4798      	blx	r3
            xferred = 0;
            if ( ep->zlp == 0 ) {
              USBD_Write(0, NULL, 0, NULL);               /* ACK to host */
              ep->state = D_EP0_IN_STATUS;
            } else {
              ep->state = D_EP_IDLE;
     eae:	2300      	movs	r3, #0
     eb0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
              ep->in = false;                      /* OUT for next SETUP */
     eb4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
     eb8:	bd70      	pop	{r4, r5, r6, pc}
        }
      }
      break;

    case D_EP_RECEIVING:
      if ( ep->remaining ) {
     eba:	6c45      	ldr	r5, [r0, #68]	; 0x44
     ebc:	2d00      	cmp	r5, #0
     ebe:	f040 80be 	bne.w	103e <USBDEP_Ep0Handler+0x1e6>
        /* There is more data to receive */
        USBD_ReArmEp0(ep);
      } else {
        status = USB_STATUS_OK;
        if ( callback != NULL ) {
     ec2:	4ea8      	ldr	r6, [pc, #672]	; (1164 <USBDEP_Ep0Handler+0x30c>)
     ec4:	6833      	ldr	r3, [r6, #0]
     ec6:	2b00      	cmp	r3, #0
     ec8:	f000 8087 	beq.w	fda <USBDEP_Ep0Handler+0x182>
          status = callback(USB_STATUS_OK, ep->xferred, 0);
     ecc:	4628      	mov	r0, r5
     ece:	6ca1      	ldr	r1, [r4, #72]	; 0x48
     ed0:	462a      	mov	r2, r5
     ed2:	4798      	blx	r3
          callback = NULL;
     ed4:	6035      	str	r5, [r6, #0]
        }

        if ( status != USB_STATUS_OK ) {
     ed6:	2800      	cmp	r0, #0
     ed8:	d07f      	beq.n	fda <USBDEP_Ep0Handler+0x182>
{
  uint32_t depctl, eptype;
  USB_Status_TypeDef retVal = USB_STATUS_REQ_ERR;

  if ( ep->in == true ) {
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     eda:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
     ede:	4aa3      	ldr	r2, [pc, #652]	; (116c <USBDEP_Ep0Handler+0x314>)
     ee0:	015b      	lsls	r3, r3, #5
     ee2:	4611      	mov	r1, r2
     ee4:	589a      	ldr	r2, [r3, r2]
          ep->in = true;
     ee6:	2001      	movs	r0, #1
     ee8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    eptype = depctl & _USB_DIEP_CTL_EPTYPE_MASK;
     eec:	f402 2040 	and.w	r0, r2, #786432	; 0xc0000

    if ( eptype != DIEPCTL_EPTYPE_ISOC ) {
     ef0:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
{
  uint32_t depctl, eptype;
  USB_Status_TypeDef retVal = USB_STATUS_REQ_ERR;

  if ( ep->in == true ) {
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     ef4:	4419      	add	r1, r3
    eptype = depctl & _USB_DIEP_CTL_EPTYPE_MASK;

    if ( eptype != DIEPCTL_EPTYPE_ISOC ) {
     ef6:	d00a      	beq.n	f0e <USBDEP_Ep0Handler+0xb6>
      if ( depctl & USB_DIEP_CTL_EPENA ) {
     ef8:	f032 5270 	bics.w	r2, r2, #1006632960	; 0x3c000000
        depctl |= USB_DIEP_CTL_EPDIS;
     efc:	bf48      	it	mi
     efe:	f042 4280 	orrmi.w	r2, r2, #1073741824	; 0x40000000
      }
      USB_DINEPS[ep->num].CTL = depctl | USB_DIEP_CTL_STALL;
     f02:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
     f06:	600a      	str	r2, [r1, #0]
     f08:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
     f0c:	015b      	lsls	r3, r3, #5
      retVal = USB_STATUS_OK;
    }
  } else {
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     f0e:	4998      	ldr	r1, [pc, #608]	; (1170 <USBDEP_Ep0Handler+0x318>)
     f10:	585a      	ldr	r2, [r3, r1]
    eptype = depctl & _USB_DOEP_CTL_EPTYPE_MASK;
     f12:	f402 2040 	and.w	r0, r2, #786432	; 0xc0000

    if ( eptype != DIEPCTL_EPTYPE_ISOC ) {
     f16:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
      }
      USB_DINEPS[ep->num].CTL = depctl | USB_DIEP_CTL_STALL;
      retVal = USB_STATUS_OK;
    }
  } else {
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
     f1a:	f022 5270 	bic.w	r2, r2, #1006632960	; 0x3c000000
    eptype = depctl & _USB_DOEP_CTL_EPTYPE_MASK;

    if ( eptype != DIEPCTL_EPTYPE_ISOC ) {
      USB_DOUTEPS[ep->num].CTL = depctl | USB_DOEP_CTL_STALL;
     f1e:	bf18      	it	ne
     f20:	f442 1200 	orrne.w	r2, r2, #2097152	; 0x200000
          USBDHAL_StallEp(ep);                /* Stall Ep0 IN                */
          ep->in = false;                     /* OUT for next SETUP          */
     f24:	f04f 0500 	mov.w	r5, #0
     f28:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
     f2c:	bf18      	it	ne
     f2e:	505a      	strne	r2, [r3, r1]
}

__STATIC_INLINE void USBDHAL_ReenableEp0Setup(USBD_Device_TypeDef *dev)

{
  USB->DOEP0DMAADDR = (uint32_t)dev->setupPkt;
     f30:	498b      	ldr	r1, [pc, #556]	; (1160 <USBDEP_Ep0Handler+0x308>)
     f32:	1d23      	adds	r3, r4, #4
     f34:	f8c1 3314 	str.w	r3, [r1, #788]	; 0x314
  USB->DOEP0CTL = (USB->DOEP0CTL & ~DEPCTL_WO_BITMASK)
     f38:	f8d1 3300 	ldr.w	r3, [r1, #768]	; 0x300
     f3c:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
                  | USB_DOEP0CTL_EPENA
     f40:	f023 423c 	bic.w	r2, r3, #3154116608	; 0xbc000000
     f44:	f040 4300 	orr.w	r3, r0, #2147483648	; 0x80000000
                  | dev->ep0MpsCode;
     f48:	4313      	orrs	r3, r2
          USBDHAL_StallEp(ep);                /* Stall Ep0 OUT               */
          USBDHAL_ReenableEp0Setup(device);   /* Prepare for next SETUP pkt. */
          ep->state = D_EP_IDLE;
     f4a:	2200      	movs	r2, #0

__STATIC_INLINE void USBDHAL_ReenableEp0Setup(USBD_Device_TypeDef *dev)

{
  USB->DOEP0DMAADDR = (uint32_t)dev->setupPkt;
  USB->DOEP0CTL = (USB->DOEP0CTL & ~DEPCTL_WO_BITMASK)
     f4c:	f8c1 3300 	str.w	r3, [r1, #768]	; 0x300
     f50:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
     f54:	bd70      	pop	{r4, r5, r6, pc}
        }
      }
      break;

    case D_EP_TRANSMITTING:
      if ( ep->remaining ) {
     f56:	6c40      	ldr	r0, [r0, #68]	; 0x44
     f58:	2800      	cmp	r0, #0
     f5a:	f040 8089 	bne.w	1070 <USBDEP_Ep0Handler+0x218>
        /* There is more data to transmit */
        USBD_ReArmEp0(ep);
      } else {
        /* All data transferred, is a ZLP packet needed ? */
        if ( ep->zlp == 1 ) {
     f5e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
     f62:	2b01      	cmp	r3, #1
     f64:	f000 80ec 	beq.w	1140 <USBDEP_Ep0Handler+0x2e8>
          ep->state = D_EP_IDLE;          /* USBD_Write() sets state back */
                                          /* to EP_TRANSMITTING           */
          USBD_Write(0, NULL, 0, NULL);   /* Send ZLP                     */
          ep->zlp = 2;
        } else {
          if ( ep->zlp == 0 ) {
     f68:	b913      	cbnz	r3, f70 <USBDEP_Ep0Handler+0x118>
            xferred = ep->xferred;
     f6a:	4b7f      	ldr	r3, [pc, #508]	; (1168 <USBDEP_Ep0Handler+0x310>)
     f6c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
     f6e:	601a      	str	r2, [r3, #0]
          }

          ep->state = D_EP_IDLE;
     f70:	2000      	movs	r0, #0
          USBD_Read(0, NULL, 0, NULL);    /* Get ZLP packet (ACK) from host */
     f72:	4601      	mov	r1, r0
     f74:	4602      	mov	r2, r0
     f76:	4603      	mov	r3, r0
        } else {
          if ( ep->zlp == 0 ) {
            xferred = ep->xferred;
          }

          ep->state = D_EP_IDLE;
     f78:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
          USBD_Read(0, NULL, 0, NULL);    /* Get ZLP packet (ACK) from host */
     f7c:	f7ff f920 	bl	1c0 <USBD_Read>
          statusIn = true;
     f80:	4a76      	ldr	r2, [pc, #472]	; (115c <USBDEP_Ep0Handler+0x304>)
     f82:	2101      	movs	r1, #1
          ep->state = D_EP0_OUT_STATUS;
     f84:	2304      	movs	r3, #4
            xferred = ep->xferred;
          }

          ep->state = D_EP_IDLE;
          USBD_Read(0, NULL, 0, NULL);    /* Get ZLP packet (ACK) from host */
          statusIn = true;
     f86:	7011      	strb	r1, [r2, #0]
          ep->state = D_EP0_OUT_STATUS;
     f88:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
     f8c:	bd70      	pop	{r4, r5, r6, pc}
  static USB_XferCompleteCb_TypeDef callback;

  ep = &device->ep[0];
  switch ( ep->state ) {
    case D_EP_IDLE:
      ep->remaining = 0;
     f8e:	2300      	movs	r3, #0
      ep->zlp = 0;
      callback = NULL;
      statusIn = false;
     f90:	4a72      	ldr	r2, [pc, #456]	; (115c <USBDEP_Ep0Handler+0x304>)
  ep = &device->ep[0];
  switch ( ep->state ) {
    case D_EP_IDLE:
      ep->remaining = 0;
      ep->zlp = 0;
      callback = NULL;
     f92:	4d74      	ldr	r5, [pc, #464]	; (1164 <USBDEP_Ep0Handler+0x30c>)
  static USB_XferCompleteCb_TypeDef callback;

  ep = &device->ep[0];
  switch ( ep->state ) {
    case D_EP_IDLE:
      ep->remaining = 0;
     f94:	6443      	str	r3, [r0, #68]	; 0x44
      ep->zlp = 0;
     f96:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
      callback = NULL;
      statusIn = false;
     f9a:	7013      	strb	r3, [r2, #0]
  ep = &device->ep[0];
  switch ( ep->state ) {
    case D_EP_IDLE:
      ep->remaining = 0;
      ep->zlp = 0;
      callback = NULL;
     f9c:	602b      	str	r3, [r5, #0]
      statusIn = false;

      status = USBDCH9_SetupCmd(device);
     f9e:	f7ff fac5 	bl	52c <USBDCH9_SetupCmd>

      if ( status == USB_STATUS_REQ_ERR ) {
     fa2:	3001      	adds	r0, #1
     fa4:	d074      	beq.n	1090 <USBDEP_Ep0Handler+0x238>
        USBDHAL_StallEp(ep);                /* Stall Ep0 IN                 */
        ep->in = false;                     /* OUT for next SETUP           */
        USBDHAL_StallEp(ep);                /* Stall Ep0 OUT                */
        USBDHAL_ReenableEp0Setup(device);   /* Prepare for next SETUP packet*/
      } else { /* ( Status == USB_STATUS_OK ) */
        if ( (ep->state == D_EP_RECEIVING) || (ep->state == D_EP_TRANSMITTING) ) {
     fa6:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
     faa:	1e5a      	subs	r2, r3, #1
     fac:	2a01      	cmp	r2, #1
     fae:	f67f af5e 	bls.w	e6e <USBDEP_Ep0Handler+0x16>
          callback = ep->xferCompleteCb;
        }

        if ( ep->state != D_EP_RECEIVING ) {
          if ( ep->remaining ) {
     fb2:	6c63      	ldr	r3, [r4, #68]	; 0x44
     fb4:	b363      	cbz	r3, 1010 <USBDEP_Ep0Handler+0x1b8>
            /* Data will be sent to host, check if a ZLP must be appended */
            if ( (ep->remaining < device->setup->wLength)
     fb6:	6822      	ldr	r2, [r4, #0]
     fb8:	88d2      	ldrh	r2, [r2, #6]
     fba:	4293      	cmp	r3, r2
     fbc:	f4bf af5c 	bcs.w	e78 <USBDEP_Ep0Handler+0x20>
                 && (ep->remaining % ep->packetSize == 0)) {
     fc0:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
     fc4:	fbb3 f2f1 	udiv	r2, r3, r1
     fc8:	fb01 3312 	mls	r3, r1, r2, r3
     fcc:	2b00      	cmp	r3, #0
     fce:	f47f af53 	bne.w	e78 <USBDEP_Ep0Handler+0x20>
              ep->zlp = 1;
     fd2:	2301      	movs	r3, #1
     fd4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
     fd8:	bd70      	pop	{r4, r5, r6, pc}
}

__STATIC_INLINE void USBDHAL_ReenableEp0Setup(USBD_Device_TypeDef *dev)

{
  USB->DOEP0DMAADDR = (uint32_t)dev->setupPkt;
     fda:	4961      	ldr	r1, [pc, #388]	; (1160 <USBDEP_Ep0Handler+0x308>)
     fdc:	1d23      	adds	r3, r4, #4
     fde:	f8c1 3314 	str.w	r3, [r1, #788]	; 0x314
  USB->DOEP0CTL = (USB->DOEP0CTL & ~DEPCTL_WO_BITMASK)
     fe2:	f8d1 3300 	ldr.w	r3, [r1, #768]	; 0x300
     fe6:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
                  | USB_DOEP0CTL_EPENA
     fea:	f023 423c 	bic.w	r2, r3, #3154116608	; 0xbc000000
     fee:	f040 4300 	orr.w	r3, r0, #2147483648	; 0x80000000
                  | dev->ep0MpsCode;
     ff2:	4313      	orrs	r3, r2
          USBDHAL_ReenableEp0Setup(device);   /* Prepare for next SETUP pkt. */
          ep->state = D_EP_IDLE;
        } else { /* Everything OK, send a ZLP (ACK) to host */
          USBDHAL_ReenableEp0Setup(device);  /* Prepare for next SETUP packet*/

          ep->state = D_EP_IDLE;              /* USBD_Write() sets state back*/
     ff4:	2000      	movs	r0, #0

__STATIC_INLINE void USBDHAL_ReenableEp0Setup(USBD_Device_TypeDef *dev)

{
  USB->DOEP0DMAADDR = (uint32_t)dev->setupPkt;
  USB->DOEP0CTL = (USB->DOEP0CTL & ~DEPCTL_WO_BITMASK)
     ff6:	f8c1 3300 	str.w	r3, [r1, #768]	; 0x300
     ffa:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
                                              /* to EP_TRANSMITTING          */
          USBD_Write(0, NULL, 0, NULL);
     ffe:	4603      	mov	r3, r0
    1000:	4601      	mov	r1, r0
    1002:	4602      	mov	r2, r0
    1004:	f7ff f9c4 	bl	390 <USBD_Write>
          ep->state = D_EP0_IN_STATUS;
    1008:	2303      	movs	r3, #3
    100a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    100e:	bd70      	pop	{r4, r5, r6, pc}
}

__STATIC_INLINE void USBDHAL_ReenableEp0Setup(USBD_Device_TypeDef *dev)

{
  USB->DOEP0DMAADDR = (uint32_t)dev->setupPkt;
    1010:	4853      	ldr	r0, [pc, #332]	; (1160 <USBDEP_Ep0Handler+0x308>)
            /* Prepare for next SETUP packet*/
            USBDHAL_ReenableEp0Setup(device);

            /* No data stage, a ZLP may have been sent. If not, send one */

            xferred = 0;
    1012:	4e55      	ldr	r6, [pc, #340]	; (1168 <USBDEP_Ep0Handler+0x310>)
    1014:	1d22      	adds	r2, r4, #4
    1016:	f8c0 2314 	str.w	r2, [r0, #788]	; 0x314
  USB->DOEP0CTL = (USB->DOEP0CTL & ~DEPCTL_WO_BITMASK)
    101a:	f8d0 2300 	ldr.w	r2, [r0, #768]	; 0x300
    101e:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
                  | USB_DOEP0CTL_EPENA
    1022:	f022 413c 	bic.w	r1, r2, #3154116608	; 0xbc000000
    1026:	f045 4200 	orr.w	r2, r5, #2147483648	; 0x80000000
                  | dev->ep0MpsCode;
    102a:	430a      	orrs	r2, r1

__STATIC_INLINE void USBDHAL_ReenableEp0Setup(USBD_Device_TypeDef *dev)

{
  USB->DOEP0DMAADDR = (uint32_t)dev->setupPkt;
  USB->DOEP0CTL = (USB->DOEP0CTL & ~DEPCTL_WO_BITMASK)
    102c:	f8c0 2300 	str.w	r2, [r0, #768]	; 0x300
            if ( ep->zlp == 0 ) {
    1030:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
            /* Prepare for next SETUP packet*/
            USBDHAL_ReenableEp0Setup(device);

            /* No data stage, a ZLP may have been sent. If not, send one */

            xferred = 0;
    1034:	6033      	str	r3, [r6, #0]
            if ( ep->zlp == 0 ) {
    1036:	2800      	cmp	r0, #0
    1038:	f47f af39 	bne.w	eae <USBDEP_Ep0Handler+0x56>
    103c:	e7df      	b.n	ffe <USBDEP_Ep0Handler+0x1a6>
  return ep;
}

__STATIC_INLINE void USBD_ReArmEp0(USBD_Ep_TypeDef *ep)
{
  if ( ep->in ) {
    103e:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
    1042:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    USBDHAL_StartEp0In(SL_MIN(ep->remaining, ep->packetSize),
    1046:	494b      	ldr	r1, [pc, #300]	; (1174 <USBDEP_Ep0Handler+0x31c>)
  return ep;
}

__STATIC_INLINE void USBD_ReArmEp0(USBD_Ep_TypeDef *ep)
{
  if ( ep->in ) {
    1048:	2a00      	cmp	r2, #0
    104a:	d158      	bne.n	10fe <USBDEP_Ep0Handler+0x2a6>
    USBDHAL_StartEp0In(SL_MIN(ep->remaining, ep->packetSize),
                       dev->ep0MpsCode);
  } else {
    USBDHAL_StartEp0Out(ep->packetSize, dev->ep0MpsCode);
    104c:	6809      	ldr	r1, [r1, #0]
                  | ep0mps;
}

__STATIC_INLINE void USBDHAL_StartEp0Out(uint32_t len, uint32_t ep0mps)
{
  USB->DOEP0TSIZ = (len << _USB_DOEP0TSIZ_XFERSIZE_SHIFT)
    104e:	4a44      	ldr	r2, [pc, #272]	; (1160 <USBDEP_Ep0Handler+0x308>)
    1050:	f8d1 10cc 	ldr.w	r1, [r1, #204]	; 0xcc
                   | (1   << _USB_DOEP0TSIZ_PKTCNT_SHIFT);
    1054:	f443 2500 	orr.w	r5, r3, #524288	; 0x80000
                  | ep0mps;
}

__STATIC_INLINE void USBDHAL_StartEp0Out(uint32_t len, uint32_t ep0mps)
{
  USB->DOEP0TSIZ = (len << _USB_DOEP0TSIZ_XFERSIZE_SHIFT)
    1058:	f8c2 5310 	str.w	r5, [r2, #784]	; 0x310
                   | (1   << _USB_DOEP0TSIZ_PKTCNT_SHIFT);

  USB->DOEP0CTL = (USB->DOEP0CTL & ~DEPCTL_WO_BITMASK)
    105c:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
    1060:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
                  | USB_DOEP0CTL_CNAK | USB_DOEP0CTL_EPENA
    1064:	f023 433c 	bic.w	r3, r3, #3154116608	; 0xbc000000
                  | ep0mps;
    1068:	430b      	orrs	r3, r1
__STATIC_INLINE void USBDHAL_StartEp0Out(uint32_t len, uint32_t ep0mps)
{
  USB->DOEP0TSIZ = (len << _USB_DOEP0TSIZ_XFERSIZE_SHIFT)
                   | (1   << _USB_DOEP0TSIZ_PKTCNT_SHIFT);

  USB->DOEP0CTL = (USB->DOEP0CTL & ~DEPCTL_WO_BITMASK)
    106a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    106e:	bd70      	pop	{r4, r5, r6, pc}
  return ep;
}

__STATIC_INLINE void USBD_ReArmEp0(USBD_Ep_TypeDef *ep)
{
  if ( ep->in ) {
    1070:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    1074:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    USBDHAL_StartEp0In(SL_MIN(ep->remaining, ep->packetSize),
    1078:	493e      	ldr	r1, [pc, #248]	; (1174 <USBDEP_Ep0Handler+0x31c>)
  return ep;
}

__STATIC_INLINE void USBD_ReArmEp0(USBD_Ep_TypeDef *ep)
{
  if ( ep->in ) {
    107a:	2a00      	cmp	r2, #0
    107c:	d154      	bne.n	1128 <USBDEP_Ep0Handler+0x2d0>
    USBDHAL_StartEp0In(SL_MIN(ep->remaining, ep->packetSize),
                       dev->ep0MpsCode);
  } else {
    USBDHAL_StartEp0Out(ep->packetSize, dev->ep0MpsCode);
    107e:	6809      	ldr	r1, [r1, #0]
                  | ep0mps;
}

__STATIC_INLINE void USBDHAL_StartEp0Out(uint32_t len, uint32_t ep0mps)
{
  USB->DOEP0TSIZ = (len << _USB_DOEP0TSIZ_XFERSIZE_SHIFT)
    1080:	4a37      	ldr	r2, [pc, #220]	; (1160 <USBDEP_Ep0Handler+0x308>)
    1082:	f8d1 10cc 	ldr.w	r1, [r1, #204]	; 0xcc
                   | (1   << _USB_DOEP0TSIZ_PKTCNT_SHIFT);
    1086:	f443 2000 	orr.w	r0, r3, #524288	; 0x80000
                  | ep0mps;
}

__STATIC_INLINE void USBDHAL_StartEp0Out(uint32_t len, uint32_t ep0mps)
{
  USB->DOEP0TSIZ = (len << _USB_DOEP0TSIZ_XFERSIZE_SHIFT)
    108a:	f8c2 0310 	str.w	r0, [r2, #784]	; 0x310
    108e:	e7e5      	b.n	105c <USBDEP_Ep0Handler+0x204>
    1090:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
{
  uint32_t depctl, eptype;
  USB_Status_TypeDef retVal = USB_STATUS_REQ_ERR;

  if ( ep->in == true ) {
    depctl = USB_DINEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
    1094:	4935      	ldr	r1, [pc, #212]	; (116c <USBDEP_Ep0Handler+0x314>)
    1096:	0150      	lsls	r0, r2, #5
      statusIn = false;

      status = USBDCH9_SetupCmd(device);

      if ( status == USB_STATUS_REQ_ERR ) {
        ep->in = true;
    1098:	2501      	movs	r5, #1
    109a:	5843      	ldr	r3, [r0, r1]
    109c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    eptype = depctl & _USB_DIEP_CTL_EPTYPE_MASK;
    10a0:	f403 2540 	and.w	r5, r3, #786432	; 0xc0000

    if ( eptype != DIEPCTL_EPTYPE_ISOC ) {
    10a4:	f5b5 2f80 	cmp.w	r5, #262144	; 0x40000
    10a8:	d009      	beq.n	10be <USBDEP_Ep0Handler+0x266>
      if ( depctl & USB_DIEP_CTL_EPENA ) {
    10aa:	f033 5370 	bics.w	r3, r3, #1006632960	; 0x3c000000
        depctl |= USB_DIEP_CTL_EPDIS;
    10ae:	bf48      	it	mi
    10b0:	f043 4380 	orrmi.w	r3, r3, #1073741824	; 0x40000000
      }
      USB_DINEPS[ep->num].CTL = depctl | USB_DIEP_CTL_STALL;
    10b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    10b8:	5043      	str	r3, [r0, r1]
    10ba:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
      retVal = USB_STATUS_OK;
    }
  } else {
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
    10be:	492c      	ldr	r1, [pc, #176]	; (1170 <USBDEP_Ep0Handler+0x318>)
    10c0:	0152      	lsls	r2, r2, #5
        USBDHAL_StallEp(ep);                /* Stall Ep0 IN                 */
        ep->in = false;                     /* OUT for next SETUP           */
    10c2:	2000      	movs	r0, #0
    10c4:	5853      	ldr	r3, [r2, r1]
    10c6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    eptype = depctl & _USB_DOEP_CTL_EPTYPE_MASK;
    10ca:	f403 2040 	and.w	r0, r3, #786432	; 0xc0000

    if ( eptype != DIEPCTL_EPTYPE_ISOC ) {
    10ce:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
      }
      USB_DINEPS[ep->num].CTL = depctl | USB_DIEP_CTL_STALL;
      retVal = USB_STATUS_OK;
    }
  } else {
    depctl = USB_DOUTEPS[ep->num].CTL & ~DEPCTL_WO_BITMASK;
    10d2:	f023 5370 	bic.w	r3, r3, #1006632960	; 0x3c000000
    eptype = depctl & _USB_DOEP_CTL_EPTYPE_MASK;

    if ( eptype != DIEPCTL_EPTYPE_ISOC ) {
      USB_DOUTEPS[ep->num].CTL = depctl | USB_DOEP_CTL_STALL;
    10d6:	bf1c      	itt	ne
    10d8:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
    10dc:	5053      	strne	r3, [r2, r1]
}

__STATIC_INLINE void USBDHAL_ReenableEp0Setup(USBD_Device_TypeDef *dev)

{
  USB->DOEP0DMAADDR = (uint32_t)dev->setupPkt;
    10de:	4a20      	ldr	r2, [pc, #128]	; (1160 <USBDEP_Ep0Handler+0x308>)
    10e0:	1d23      	adds	r3, r4, #4
    10e2:	f8c2 3314 	str.w	r3, [r2, #788]	; 0x314
    10e6:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
  USB->DOEP0CTL = (USB->DOEP0CTL & ~DEPCTL_WO_BITMASK)
    10ea:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
    10ee:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
                  | USB_DOEP0CTL_EPENA
    10f2:	f023 433c 	bic.w	r3, r3, #3154116608	; 0xbc000000
                  | dev->ep0MpsCode;
    10f6:	430b      	orrs	r3, r1

__STATIC_INLINE void USBDHAL_ReenableEp0Setup(USBD_Device_TypeDef *dev)

{
  USB->DOEP0DMAADDR = (uint32_t)dev->setupPkt;
  USB->DOEP0CTL = (USB->DOEP0CTL & ~DEPCTL_WO_BITMASK)
    10f8:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
    10fc:	bd70      	pop	{r4, r5, r6, pc}
}

__STATIC_INLINE void USBD_ReArmEp0(USBD_Ep_TypeDef *ep)
{
  if ( ep->in ) {
    USBDHAL_StartEp0In(SL_MIN(ep->remaining, ep->packetSize),
    10fe:	429d      	cmp	r5, r3
    1100:	6809      	ldr	r1, [r1, #0]
  return retVal;
}

__STATIC_INLINE void USBDHAL_StartEp0In(uint32_t len, uint32_t ep0mps)
{
  USB->DIEP0TSIZ = (len << _USB_DIEP0TSIZ_XFERSIZE_SHIFT)
    1102:	4a17      	ldr	r2, [pc, #92]	; (1160 <USBDEP_Ep0Handler+0x308>)
    1104:	f8d1 10cc 	ldr.w	r1, [r1, #204]	; 0xcc
    1108:	bf28      	it	cs
    110a:	461d      	movcs	r5, r3
                   | (1   << _USB_DIEP0TSIZ_PKTCNT_SHIFT);
    110c:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
  return retVal;
}

__STATIC_INLINE void USBDHAL_StartEp0In(uint32_t len, uint32_t ep0mps)
{
  USB->DIEP0TSIZ = (len << _USB_DIEP0TSIZ_XFERSIZE_SHIFT)
    1110:	f8c2 5110 	str.w	r5, [r2, #272]	; 0x110
                   | (1   << _USB_DIEP0TSIZ_PKTCNT_SHIFT);

  USB->DIEP0CTL = (USB->DIEP0CTL & ~DEPCTL_WO_BITMASK)
    1114:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
    1118:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
                  | USB_DIEP0CTL_CNAK | USB_DIEP0CTL_EPENA
    111c:	f023 433c 	bic.w	r3, r3, #3154116608	; 0xbc000000
                  | ep0mps;
    1120:	430b      	orrs	r3, r1
__STATIC_INLINE void USBDHAL_StartEp0In(uint32_t len, uint32_t ep0mps)
{
  USB->DIEP0TSIZ = (len << _USB_DIEP0TSIZ_XFERSIZE_SHIFT)
                   | (1   << _USB_DIEP0TSIZ_PKTCNT_SHIFT);

  USB->DIEP0CTL = (USB->DIEP0CTL & ~DEPCTL_WO_BITMASK)
    1122:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    1126:	bd70      	pop	{r4, r5, r6, pc}
    1128:	4298      	cmp	r0, r3
    112a:	6809      	ldr	r1, [r1, #0]
  return retVal;
}

__STATIC_INLINE void USBDHAL_StartEp0In(uint32_t len, uint32_t ep0mps)
{
  USB->DIEP0TSIZ = (len << _USB_DIEP0TSIZ_XFERSIZE_SHIFT)
    112c:	4a0c      	ldr	r2, [pc, #48]	; (1160 <USBDEP_Ep0Handler+0x308>)
    112e:	f8d1 10cc 	ldr.w	r1, [r1, #204]	; 0xcc
    1132:	bf28      	it	cs
    1134:	4618      	movcs	r0, r3
                   | (1   << _USB_DIEP0TSIZ_PKTCNT_SHIFT);
    1136:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
  return retVal;
}

__STATIC_INLINE void USBDHAL_StartEp0In(uint32_t len, uint32_t ep0mps)
{
  USB->DIEP0TSIZ = (len << _USB_DIEP0TSIZ_XFERSIZE_SHIFT)
    113a:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    113e:	e7e9      	b.n	1114 <USBDEP_Ep0Handler+0x2bc>
        /* There is more data to transmit */
        USBD_ReArmEp0(ep);
      } else {
        /* All data transferred, is a ZLP packet needed ? */
        if ( ep->zlp == 1 ) {
          xferred   = ep->xferred;
    1140:	4b09      	ldr	r3, [pc, #36]	; (1168 <USBDEP_Ep0Handler+0x310>)
    1142:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    1144:	601a      	str	r2, [r3, #0]
          ep->state = D_EP_IDLE;          /* USBD_Write() sets state back */
    1146:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
                                          /* to EP_TRANSMITTING           */
          USBD_Write(0, NULL, 0, NULL);   /* Send ZLP                     */
    114a:	4603      	mov	r3, r0
    114c:	4601      	mov	r1, r0
    114e:	4602      	mov	r2, r0
    1150:	f7ff f91e 	bl	390 <USBD_Write>
          ep->zlp = 2;
    1154:	2302      	movs	r3, #2
    1156:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    115a:	bd70      	pop	{r4, r5, r6, pc}
    115c:	20000bf0 	.word	0x20000bf0
    1160:	40100800 	.word	0x40100800
    1164:	20000bf4 	.word	0x20000bf4
    1168:	20000bf8 	.word	0x20000bf8
    116c:	40100900 	.word	0x40100900
    1170:	40100b00 	.word	0x40100b00
    1174:	20000000 	.word	0x20000000

00001178 <USBDEP_EpHandler>:
{
  int epIndex;
  USBD_Ep_TypeDef *ep = NULL;

  if ( epAddr & USB_SETUP_DIR_MASK ) {
    epIndex = dev->inEpAddr2EpIndex[epAddr & USB_EPNUM_MASK];
    1178:	4b19      	ldr	r3, [pc, #100]	; (11e0 <USBDEP_EpHandler+0x68>)
    117a:	681b      	ldr	r3, [r3, #0]
__STATIC_INLINE USBD_Ep_TypeDef *USBD_GetEpFromAddr(uint8_t epAddr)
{
  int epIndex;
  USBD_Ep_TypeDef *ep = NULL;

  if ( epAddr & USB_SETUP_DIR_MASK ) {
    117c:	f010 0f80 	tst.w	r0, #128	; 0x80
    epIndex = dev->inEpAddr2EpIndex[epAddr & USB_EPNUM_MASK];
    1180:	f000 000f 	and.w	r0, r0, #15
    1184:	eb03 0200 	add.w	r2, r3, r0
    1188:	bf14      	ite	ne
    118a:	f892 20ac 	ldrbne.w	r2, [r2, #172]	; 0xac
  } else {
    epIndex = dev->outEpAddr2EpIndex[epAddr & USB_EPNUM_MASK];
    118e:	f892 20bc 	ldrbeq.w	r2, [r2, #188]	; 0xbc
  }

  if ( epIndex ) {
    1192:	b952      	cbnz	r2, 11aa <USBDEP_EpHandler+0x32>
    ep = &dev->ep[epIndex];
  } else if ( (epAddr & USB_EPNUM_MASK) == 0 ) {
    1194:	b930      	cbnz	r0, 11a4 <USBDEP_EpHandler+0x2c>
    ep = &dev->ep[0];
    1196:	3334      	adds	r3, #52	; 0x34
void USBDEP_EpHandler(uint8_t epAddr)
{
  USB_XferCompleteCb_TypeDef callback;
  USBD_Ep_TypeDef *ep = USBD_GetEpFromAddr(epAddr);

  if ( (ep->state == D_EP_TRANSMITTING) || (ep->state == D_EP_RECEIVING) ) {
    1198:	f893 2020 	ldrb.w	r2, [r3, #32]
    119c:	3a01      	subs	r2, #1
    119e:	2a01      	cmp	r2, #1
    11a0:	d90d      	bls.n	11be <USBDEP_EpHandler+0x46>
      callback(USB_STATUS_OK, ep->xferred, ep->remaining);
    }
  } else {
    EFM_ASSERT(false);
  }
}
    11a2:	4770      	bx	lr
void USBDEP_EpHandler(uint8_t epAddr)
{
  USB_XferCompleteCb_TypeDef callback;
  USBD_Ep_TypeDef *ep = USBD_GetEpFromAddr(epAddr);

  if ( (ep->state == D_EP_TRANSMITTING) || (ep->state == D_EP_RECEIVING) ) {
    11a4:	f892 3020 	ldrb.w	r3, [r2, #32]
    11a8:	deff      	udf	#255	; 0xff
  } else {
    epIndex = dev->outEpAddr2EpIndex[epAddr & USB_EPNUM_MASK];
  }

  if ( epIndex ) {
    ep = &dev->ep[epIndex];
    11aa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    11ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    11b2:	3334      	adds	r3, #52	; 0x34
    11b4:	f893 2020 	ldrb.w	r2, [r3, #32]
    11b8:	3a01      	subs	r2, #1
    11ba:	2a01      	cmp	r2, #1
    11bc:	d8f1      	bhi.n	11a2 <USBDEP_EpHandler+0x2a>
/*
 * USBDEP_EpHandler() is called each time a packet has been transmitted
 * or recieved on an endpoint other than the default endpoint.
 */
void USBDEP_EpHandler(uint8_t epAddr)
{
    11be:	b410      	push	{r4}
  USB_XferCompleteCb_TypeDef callback;
  USBD_Ep_TypeDef *ep = USBD_GetEpFromAddr(epAddr);

  if ( (ep->state == D_EP_TRANSMITTING) || (ep->state == D_EP_RECEIVING) ) {
    ep->state = D_EP_IDLE;
    if ( ep->xferCompleteCb ) {
    11c0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
{
  USB_XferCompleteCb_TypeDef callback;
  USBD_Ep_TypeDef *ep = USBD_GetEpFromAddr(epAddr);

  if ( (ep->state == D_EP_TRANSMITTING) || (ep->state == D_EP_RECEIVING) ) {
    ep->state = D_EP_IDLE;
    11c2:	2000      	movs	r0, #0
    11c4:	f883 0020 	strb.w	r0, [r3, #32]
    if ( ep->xferCompleteCb ) {
    11c8:	b134      	cbz	r4, 11d8 <USBDEP_EpHandler+0x60>
      callback = ep->xferCompleteCb;
      ep->xferCompleteCb = NULL;
    11ca:	6258      	str	r0, [r3, #36]	; 0x24
      callback(USB_STATUS_OK, ep->xferred, ep->remaining);
    11cc:	6959      	ldr	r1, [r3, #20]
    11ce:	691a      	ldr	r2, [r3, #16]
    11d0:	4623      	mov	r3, r4
    }
  } else {
    EFM_ASSERT(false);
  }
}
    11d2:	f85d 4b04 	ldr.w	r4, [sp], #4
  if ( (ep->state == D_EP_TRANSMITTING) || (ep->state == D_EP_RECEIVING) ) {
    ep->state = D_EP_IDLE;
    if ( ep->xferCompleteCb ) {
      callback = ep->xferCompleteCb;
      ep->xferCompleteCb = NULL;
      callback(USB_STATUS_OK, ep->xferred, ep->remaining);
    11d6:	4718      	bx	r3
    }
  } else {
    EFM_ASSERT(false);
  }
}
    11d8:	f85d 4b04 	ldr.w	r4, [sp], #4
    11dc:	e7e1      	b.n	11a2 <USBDEP_EpHandler+0x2a>
    11de:	bf00      	nop
    11e0:	20000000 	.word	0x20000000

000011e4 <RestoreEpCtrlRegisters>:
  USBD_Ep_TypeDef *ep;
#endif

#if (FIFO_CNT > 0)
  for (i = 0; i < FIFO_CNT; i++) {
    USB_DIEPTXFS[i] = x_USB_DIEPTXFS[i];
    11e4:	4b26      	ldr	r3, [pc, #152]	; (1280 <RestoreEpCtrlRegisters+0x9c>)
    11e6:	4827      	ldr	r0, [pc, #156]	; (1284 <RestoreEpCtrlRegisters+0xa0>)
    11e8:	4a27      	ldr	r2, [pc, #156]	; (1288 <RestoreEpCtrlRegisters+0xa4>)
    11ea:	6859      	ldr	r1, [r3, #4]
#endif
}

#if (USB_PWRSAVE_MODE)
static void RestoreEpCtrlRegisters(void)
{
    11ec:	b4f0      	push	{r4, r5, r6, r7}
  USBD_Ep_TypeDef *ep;
#endif

#if (FIFO_CNT > 0)
  for (i = 0; i < FIFO_CNT; i++) {
    USB_DIEPTXFS[i] = x_USB_DIEPTXFS[i];
    11ee:	681d      	ldr	r5, [r3, #0]
#if (NUM_EP_USED > 0)
  for (i = 0; i < NUM_EP_USED; i++) {
    ep = &dev->ep[i + 1];
    epNum = ep->num;

    tmp = x_USB_EP_CTL[i]
    11f0:	4c26      	ldr	r4, [pc, #152]	; (128c <RestoreEpCtrlRegisters+0xa8>)
    11f2:	4b27      	ldr	r3, [pc, #156]	; (1290 <RestoreEpCtrlRegisters+0xac>)
  USBD_Ep_TypeDef *ep;
#endif

#if (FIFO_CNT > 0)
  for (i = 0; i < FIFO_CNT; i++) {
    USB_DIEPTXFS[i] = x_USB_DIEPTXFS[i];
    11f4:	6005      	str	r5, [r0, #0]
    11f6:	6011      	str	r1, [r2, #0]
    11f8:	6818      	ldr	r0, [r3, #0]
#if (NUM_EP_USED > 0)
  for (i = 0; i < NUM_EP_USED; i++) {
    ep = &dev->ep[i + 1];
    epNum = ep->num;

    tmp = x_USB_EP_CTL[i]
    11fa:	6823      	ldr	r3, [r4, #0]
#endif

#if (NUM_EP_USED > 0)
  for (i = 0; i < NUM_EP_USED; i++) {
    ep = &dev->ep[i + 1];
    epNum = ep->num;
    11fc:	f890 105e 	ldrb.w	r1, [r0, #94]	; 0x5e

    tmp = x_USB_EP_CTL[i]
    1200:	f023 5270 	bic.w	r2, r3, #1006632960	; 0x3c000000
          & ~(USB_DIEP_CTL_CNAK
              | USB_DIEP_CTL_SNAK
              | USB_DIEP_CTL_SETD0PIDEF
              | USB_DIEP_CTL_SETD1PIDOF);

    if (x_USB_EP_CTL[i] & USB_DIEP_CTL_DPIDEOF) {
    1204:	03de      	lsls	r6, r3, #15
      tmp |= USB_DIEP_CTL_SETD1PIDOF;
    } else {
      tmp |= USB_DIEP_CTL_SETD0PIDEF;
    1206:	bf54      	ite	pl
    1208:	f042 5280 	orrpl.w	r2, r2, #268435456	; 0x10000000
              | USB_DIEP_CTL_SNAK
              | USB_DIEP_CTL_SETD0PIDEF
              | USB_DIEP_CTL_SETD1PIDOF);

    if (x_USB_EP_CTL[i] & USB_DIEP_CTL_DPIDEOF) {
      tmp |= USB_DIEP_CTL_SETD1PIDOF;
    120c:	f042 5200 	orrmi.w	r2, r2, #536870912	; 0x20000000
    } else {
      tmp |= USB_DIEP_CTL_SETD0PIDEF;
    }

    if (x_USB_EP_CTL[i] & USB_DIEP_CTL_NAKSTS) {
    1210:	039d      	lsls	r5, r3, #14
      tmp |= USB_DIEP_CTL_SNAK;
    } else {
      tmp |= USB_DIEP_CTL_CNAK;
    }

    if (ep->in) {
    1212:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
    }

    if (x_USB_EP_CTL[i] & USB_DIEP_CTL_NAKSTS) {
      tmp |= USB_DIEP_CTL_SNAK;
    } else {
      tmp |= USB_DIEP_CTL_CNAK;
    1216:	bf54      	ite	pl
    1218:	f042 6280 	orrpl.w	r2, r2, #67108864	; 0x4000000
    } else {
      tmp |= USB_DIEP_CTL_SETD0PIDEF;
    }

    if (x_USB_EP_CTL[i] & USB_DIEP_CTL_NAKSTS) {
      tmp |= USB_DIEP_CTL_SNAK;
    121c:	f042 6200 	orrmi.w	r2, r2, #134217728	; 0x8000000
    } else {
      tmp |= USB_DIEP_CTL_CNAK;
    }

    if (ep->in) {
    1220:	bb4b      	cbnz	r3, 1276 <RestoreEpCtrlRegisters+0x92>
      USB_DINEPS[epNum].CTL     = tmp;
      USB_DINEPS[epNum].TSIZ    = x_USB_EP_TSIZ[i];
      USB_DINEPS[epNum].DMAADDR = x_USB_EP_DMAADDR[i];
    } else {
      USB_DOUTEPS[epNum].CTL     = tmp;
    1222:	4b1c      	ldr	r3, [pc, #112]	; (1294 <RestoreEpCtrlRegisters+0xb0>)
      tmp |= USB_DIEP_CTL_CNAK;
    }

    if (ep->in) {
      USB_DINEPS[epNum].CTL     = tmp;
      USB_DINEPS[epNum].TSIZ    = x_USB_EP_TSIZ[i];
    1224:	4f1c      	ldr	r7, [pc, #112]	; (1298 <RestoreEpCtrlRegisters+0xb4>)
      USB_DINEPS[epNum].DMAADDR = x_USB_EP_DMAADDR[i];
    1226:	4d1d      	ldr	r5, [pc, #116]	; (129c <RestoreEpCtrlRegisters+0xb8>)
    } else {
      tmp |= USB_DIEP_CTL_CNAK;
    }

    if (ep->in) {
      USB_DINEPS[epNum].CTL     = tmp;
    1228:	0149      	lsls	r1, r1, #5
    122a:	461e      	mov	r6, r3
    122c:	440b      	add	r3, r1
    122e:	518a      	str	r2, [r1, r6]
      USB_DINEPS[epNum].TSIZ    = x_USB_EP_TSIZ[i];
    1230:	683a      	ldr	r2, [r7, #0]
    1232:	611a      	str	r2, [r3, #16]
      USB_DINEPS[epNum].DMAADDR = x_USB_EP_DMAADDR[i];
    1234:	682a      	ldr	r2, [r5, #0]
    1236:	615a      	str	r2, [r3, #20]
#if (NUM_EP_USED > 0)
  for (i = 0; i < NUM_EP_USED; i++) {
    ep = &dev->ep[i + 1];
    epNum = ep->num;

    tmp = x_USB_EP_CTL[i]
    1238:	6863      	ldr	r3, [r4, #4]
#endif

#if (NUM_EP_USED > 0)
  for (i = 0; i < NUM_EP_USED; i++) {
    ep = &dev->ep[i + 1];
    epNum = ep->num;
    123a:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86

    tmp = x_USB_EP_CTL[i]
    123e:	f023 5270 	bic.w	r2, r3, #1006632960	; 0x3c000000
          & ~(USB_DIEP_CTL_CNAK
              | USB_DIEP_CTL_SNAK
              | USB_DIEP_CTL_SETD0PIDEF
              | USB_DIEP_CTL_SETD1PIDOF);

    if (x_USB_EP_CTL[i] & USB_DIEP_CTL_DPIDEOF) {
    1242:	03dc      	lsls	r4, r3, #15
      tmp |= USB_DIEP_CTL_SETD1PIDOF;
    1244:	bf4c      	ite	mi
    1246:	f042 5200 	orrmi.w	r2, r2, #536870912	; 0x20000000
    } else {
      tmp |= USB_DIEP_CTL_SETD0PIDEF;
    124a:	f042 5280 	orrpl.w	r2, r2, #268435456	; 0x10000000
    }

    if (x_USB_EP_CTL[i] & USB_DIEP_CTL_NAKSTS) {
    124e:	039b      	lsls	r3, r3, #14
      tmp |= USB_DIEP_CTL_SNAK;
    } else {
      tmp |= USB_DIEP_CTL_CNAK;
    }

    if (ep->in) {
    1250:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
    } else {
      tmp |= USB_DIEP_CTL_SETD0PIDEF;
    }

    if (x_USB_EP_CTL[i] & USB_DIEP_CTL_NAKSTS) {
      tmp |= USB_DIEP_CTL_SNAK;
    1254:	bf4c      	ite	mi
    1256:	f042 6200 	orrmi.w	r2, r2, #134217728	; 0x8000000
    } else {
      tmp |= USB_DIEP_CTL_CNAK;
    125a:	f042 6280 	orrpl.w	r2, r2, #67108864	; 0x4000000
    }

    if (ep->in) {
    125e:	b163      	cbz	r3, 127a <RestoreEpCtrlRegisters+0x96>
      USB_DINEPS[epNum].CTL     = tmp;
    1260:	4b0f      	ldr	r3, [pc, #60]	; (12a0 <RestoreEpCtrlRegisters+0xbc>)
      USB_DINEPS[epNum].TSIZ    = x_USB_EP_TSIZ[i];
      USB_DINEPS[epNum].DMAADDR = x_USB_EP_DMAADDR[i];
    } else {
      USB_DOUTEPS[epNum].CTL     = tmp;
      USB_DOUTEPS[epNum].TSIZ    = x_USB_EP_TSIZ[i];
    1262:	687c      	ldr	r4, [r7, #4]
      USB_DOUTEPS[epNum].DMAADDR = x_USB_EP_DMAADDR[i];
    1264:	6868      	ldr	r0, [r5, #4]
    if (ep->in) {
      USB_DINEPS[epNum].CTL     = tmp;
      USB_DINEPS[epNum].TSIZ    = x_USB_EP_TSIZ[i];
      USB_DINEPS[epNum].DMAADDR = x_USB_EP_DMAADDR[i];
    } else {
      USB_DOUTEPS[epNum].CTL     = tmp;
    1266:	0149      	lsls	r1, r1, #5
    1268:	461e      	mov	r6, r3
    126a:	440b      	add	r3, r1
    126c:	518a      	str	r2, [r1, r6]
      USB_DOUTEPS[epNum].TSIZ    = x_USB_EP_TSIZ[i];
    126e:	611c      	str	r4, [r3, #16]
      USB_DOUTEPS[epNum].DMAADDR = x_USB_EP_DMAADDR[i];
    1270:	6158      	str	r0, [r3, #20]
    }
  }
#endif
}
    1272:	bcf0      	pop	{r4, r5, r6, r7}
    1274:	4770      	bx	lr
    } else {
      tmp |= USB_DIEP_CTL_CNAK;
    }

    if (ep->in) {
      USB_DINEPS[epNum].CTL     = tmp;
    1276:	4b0a      	ldr	r3, [pc, #40]	; (12a0 <RestoreEpCtrlRegisters+0xbc>)
    1278:	e7d4      	b.n	1224 <RestoreEpCtrlRegisters+0x40>
      USB_DINEPS[epNum].TSIZ    = x_USB_EP_TSIZ[i];
      USB_DINEPS[epNum].DMAADDR = x_USB_EP_DMAADDR[i];
    } else {
      USB_DOUTEPS[epNum].CTL     = tmp;
    127a:	4b06      	ldr	r3, [pc, #24]	; (1294 <RestoreEpCtrlRegisters+0xb0>)
    127c:	e7f1      	b.n	1262 <RestoreEpCtrlRegisters+0x7e>
    127e:	bf00      	nop
    1280:	20000c24 	.word	0x20000c24
    1284:	40100104 	.word	0x40100104
    1288:	40100108 	.word	0x40100108
    128c:	20000bfc 	.word	0x20000bfc
    1290:	20000000 	.word	0x20000000
    1294:	40100b00 	.word	0x40100b00
    1298:	20000c38 	.word	0x20000c38
    129c:	20000c0c 	.word	0x20000c0c
    12a0:	40100900 	.word	0x40100900

000012a4 <UsbPowerDown.part.4>:
#if (USB_PWRSAVE_MODE)
/*
 * Backup essential USB core registers, and set the core in partial powerdown
 * mode. Optionally prepare entry into EM2.
 */
static bool UsbPowerDown(void)
    12a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int epNum;
  USBD_Ep_TypeDef *ep;
#endif

  if ( !USBD_poweredDown ) {
    USBD_poweredDown = true;
    12a8:	f8df a188 	ldr.w	sl, [pc, #392]	; 1434 <UsbPowerDown.part.4+0x190>
    DEBUG_USB_INT_LO_PUTCHAR('\\');

    /* Backup USB core registers. */
    x_USB_GINTMSK   = USB->GINTMSK;
    12ac:	4b4b      	ldr	r3, [pc, #300]	; (13dc <UsbPowerDown.part.4+0x138>)
    12ae:	f8df 9188 	ldr.w	r9, [pc, #392]	; 1438 <UsbPowerDown.part.4+0x194>
#if defined(_USB_GOTGCTL_MASK)
    x_USB_GOTGCTL   = USB->GOTGCTL;
    12b2:	f8df 8188 	ldr.w	r8, [pc, #392]	; 143c <UsbPowerDown.part.4+0x198>
#endif
    x_USB_GAHBCFG   = USB->GAHBCFG;
    12b6:	f8df c188 	ldr.w	ip, [pc, #392]	; 1440 <UsbPowerDown.part.4+0x19c>
    x_USB_GUSBCFG   = USB->GUSBCFG;
    12ba:	f8df e188 	ldr.w	lr, [pc, #392]	; 1444 <UsbPowerDown.part.4+0x1a0>
    x_USB_GRXFSIZ   = USB->GRXFSIZ;
    12be:	4f48      	ldr	r7, [pc, #288]	; (13e0 <UsbPowerDown.part.4+0x13c>)
    x_USB_GNPTXFSIZ = USB->GNPTXFSIZ;
    12c0:	4e48      	ldr	r6, [pc, #288]	; (13e4 <UsbPowerDown.part.4+0x140>)
    x_USB_DCFG      = USB->DCFG;
    12c2:	4a49      	ldr	r2, [pc, #292]	; (13e8 <UsbPowerDown.part.4+0x144>)
    12c4:	4d49      	ldr	r5, [pc, #292]	; (13ec <UsbPowerDown.part.4+0x148>)
    x_USB_DCTL      = USB->DCTL;
    12c6:	4c4a      	ldr	r4, [pc, #296]	; (13f0 <UsbPowerDown.part.4+0x14c>)
    x_USB_DAINTMSK  = USB->DAINTMSK;
    12c8:	484a      	ldr	r0, [pc, #296]	; (13f4 <UsbPowerDown.part.4+0x150>)
    x_USB_DIEPMSK   = USB->DIEPMSK;
    12ca:	494b      	ldr	r1, [pc, #300]	; (13f8 <UsbPowerDown.part.4+0x154>)
  int epNum;
  USBD_Ep_TypeDef *ep;
#endif

  if ( !USBD_poweredDown ) {
    USBD_poweredDown = true;
    12cc:	f04f 0b01 	mov.w	fp, #1
    12d0:	f88a b000 	strb.w	fp, [sl]
    DEBUG_USB_INT_LO_PUTCHAR('\\');

    /* Backup USB core registers. */
    x_USB_GINTMSK   = USB->GINTMSK;
    12d4:	f8d3 a018 	ldr.w	sl, [r3, #24]
    12d8:	f8c9 a000 	str.w	sl, [r9]
#if defined(_USB_GOTGCTL_MASK)
    x_USB_GOTGCTL   = USB->GOTGCTL;
    12dc:	f8d3 9000 	ldr.w	r9, [r3]
    12e0:	f8c8 9000 	str.w	r9, [r8]
#endif
    x_USB_GAHBCFG   = USB->GAHBCFG;
    12e4:	f8d3 8008 	ldr.w	r8, [r3, #8]
    12e8:	f8cc 8000 	str.w	r8, [ip]
    x_USB_GUSBCFG   = USB->GUSBCFG;
    12ec:	f8d3 c00c 	ldr.w	ip, [r3, #12]
    12f0:	f8ce c000 	str.w	ip, [lr]
    x_USB_GRXFSIZ   = USB->GRXFSIZ;
    12f4:	f8d3 e024 	ldr.w	lr, [r3, #36]	; 0x24
    12f8:	f8c7 e000 	str.w	lr, [r7]
    x_USB_GNPTXFSIZ = USB->GNPTXFSIZ;
    12fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    12fe:	6033      	str	r3, [r6, #0]
    x_USB_DCFG      = USB->DCFG;
    1300:	6813      	ldr	r3, [r2, #0]
    1302:	602b      	str	r3, [r5, #0]
    x_USB_DCTL      = USB->DCTL;
    1304:	6853      	ldr	r3, [r2, #4]
    1306:	6023      	str	r3, [r4, #0]
    x_USB_DAINTMSK  = USB->DAINTMSK;
    1308:	69d3      	ldr	r3, [r2, #28]
    130a:	6003      	str	r3, [r0, #0]
    130c:	4b3b      	ldr	r3, [pc, #236]	; (13fc <UsbPowerDown.part.4+0x158>)
    x_USB_DIEPMSK   = USB->DIEPMSK;
    130e:	6910      	ldr	r0, [r2, #16]
    1310:	6008      	str	r0, [r1, #0]
    1312:	681b      	ldr	r3, [r3, #0]
    x_USB_DOEPMSK   = USB->DOEPMSK;
    1314:	493a      	ldr	r1, [pc, #232]	; (1400 <UsbPowerDown.part.4+0x15c>)
    1316:	6952      	ldr	r2, [r2, #20]
    x_USB_PCGCCTL   = USB->PCGCCTL;
    1318:	483a      	ldr	r0, [pc, #232]	; (1404 <UsbPowerDown.part.4+0x160>)
    x_USB_GNPTXFSIZ = USB->GNPTXFSIZ;
    x_USB_DCFG      = USB->DCFG;
    x_USB_DCTL      = USB->DCTL;
    x_USB_DAINTMSK  = USB->DAINTMSK;
    x_USB_DIEPMSK   = USB->DIEPMSK;
    x_USB_DOEPMSK   = USB->DOEPMSK;
    131a:	600a      	str	r2, [r1, #0]
    x_USB_PCGCCTL   = USB->PCGCCTL;
    131c:	4a3a      	ldr	r2, [pc, #232]	; (1408 <UsbPowerDown.part.4+0x164>)

#if (NUM_EP_USED > 0)
    for ( i = 0; i < NUM_EP_USED; i++ ) {
      ep = &dev->ep[i + 1];
      epNum = ep->num;
      if ( ep->in ) {
    131e:	f893 105c 	ldrb.w	r1, [r3, #92]	; 0x5c
    x_USB_DCFG      = USB->DCFG;
    x_USB_DCTL      = USB->DCTL;
    x_USB_DAINTMSK  = USB->DAINTMSK;
    x_USB_DIEPMSK   = USB->DIEPMSK;
    x_USB_DOEPMSK   = USB->DOEPMSK;
    x_USB_PCGCCTL   = USB->PCGCCTL;
    1322:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
    1326:	6010      	str	r0, [r2, #0]

#if (NUM_EP_USED > 0)
    for ( i = 0; i < NUM_EP_USED; i++ ) {
      ep = &dev->ep[i + 1];
      epNum = ep->num;
    1328:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
      if ( ep->in ) {
    132c:	2900      	cmp	r1, #0
    132e:	d152      	bne.n	13d6 <UsbPowerDown.part.4+0x132>
        x_USB_EP_CTL[i] = USB_DINEPS[epNum].CTL;
        x_USB_EP_TSIZ[i] = USB_DINEPS[epNum].TSIZ;
        x_USB_EP_DMAADDR[i] = USB_DINEPS[epNum].DMAADDR;
      } else {
        x_USB_EP_CTL[i] = USB_DOUTEPS[epNum].CTL;
    1330:	4d36      	ldr	r5, [pc, #216]	; (140c <UsbPowerDown.part.4+0x168>)
      ep = &dev->ep[i + 1];
      epNum = ep->num;
      if ( ep->in ) {
        x_USB_EP_CTL[i] = USB_DINEPS[epNum].CTL;
        x_USB_EP_TSIZ[i] = USB_DINEPS[epNum].TSIZ;
        x_USB_EP_DMAADDR[i] = USB_DINEPS[epNum].DMAADDR;
    1332:	4937      	ldr	r1, [pc, #220]	; (1410 <UsbPowerDown.part.4+0x16c>)
#if (NUM_EP_USED > 0)
    for ( i = 0; i < NUM_EP_USED; i++ ) {
      ep = &dev->ep[i + 1];
      epNum = ep->num;
      if ( ep->in ) {
        x_USB_EP_CTL[i] = USB_DINEPS[epNum].CTL;
    1334:	4c37      	ldr	r4, [pc, #220]	; (1414 <UsbPowerDown.part.4+0x170>)
        x_USB_EP_TSIZ[i] = USB_DINEPS[epNum].TSIZ;
    1336:	4838      	ldr	r0, [pc, #224]	; (1418 <UsbPowerDown.part.4+0x174>)
#if (NUM_EP_USED > 0)
    for ( i = 0; i < NUM_EP_USED; i++ ) {
      ep = &dev->ep[i + 1];
      epNum = ep->num;
      if ( ep->in ) {
        x_USB_EP_CTL[i] = USB_DINEPS[epNum].CTL;
    1338:	0152      	lsls	r2, r2, #5
    133a:	462e      	mov	r6, r5
    133c:	4415      	add	r5, r2
    133e:	5997      	ldr	r7, [r2, r6]
        x_USB_EP_TSIZ[i] = USB_DINEPS[epNum].TSIZ;
    1340:	692e      	ldr	r6, [r5, #16]
        x_USB_EP_DMAADDR[i] = USB_DINEPS[epNum].DMAADDR;
    1342:	696a      	ldr	r2, [r5, #20]
    1344:	600a      	str	r2, [r1, #0]

#if (NUM_EP_USED > 0)
    for ( i = 0; i < NUM_EP_USED; i++ ) {
      ep = &dev->ep[i + 1];
      epNum = ep->num;
      if ( ep->in ) {
    1346:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
        x_USB_EP_CTL[i] = USB_DINEPS[epNum].CTL;
    134a:	6027      	str	r7, [r4, #0]
        x_USB_EP_TSIZ[i] = USB_DINEPS[epNum].TSIZ;
    134c:	6006      	str	r6, [r0, #0]
    x_USB_PCGCCTL   = USB->PCGCCTL;

#if (NUM_EP_USED > 0)
    for ( i = 0; i < NUM_EP_USED; i++ ) {
      ep = &dev->ep[i + 1];
      epNum = ep->num;
    134e:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
      if ( ep->in ) {
    1352:	2a00      	cmp	r2, #0
    1354:	d03d      	beq.n	13d2 <UsbPowerDown.part.4+0x12e>
        x_USB_EP_CTL[i] = USB_DINEPS[epNum].CTL;
    1356:	4a31      	ldr	r2, [pc, #196]	; (141c <UsbPowerDown.part.4+0x178>)

    /* Prepare for wakeup on resume and reset. */
    USB->DCFG    = (USB->DCFG & ~_USB_DCFG_RESVALID_MASK)
                   | (4 << _USB_DCFG_RESVALID_SHIFT);
    USB->DCFG   |= USB_DCFG_ENA32KHZSUSP;
    USB->GINTMSK = USB_GINTMSK_RESETDETMSK | USB_GINTMSK_WKUPINTMSK;
    1358:	4f31      	ldr	r7, [pc, #196]	; (1420 <UsbPowerDown.part.4+0x17c>)
      if ( ep->in ) {
        x_USB_EP_CTL[i] = USB_DINEPS[epNum].CTL;
        x_USB_EP_TSIZ[i] = USB_DINEPS[epNum].TSIZ;
        x_USB_EP_DMAADDR[i] = USB_DINEPS[epNum].DMAADDR;
      } else {
        x_USB_EP_CTL[i] = USB_DOUTEPS[epNum].CTL;
    135a:	015b      	lsls	r3, r3, #5
    135c:	4615      	mov	r5, r2
    135e:	441a      	add	r2, r3
    1360:	595e      	ldr	r6, [r3, r5]
        x_USB_EP_TSIZ[i] = USB_DOUTEPS[epNum].TSIZ;
    1362:	6915      	ldr	r5, [r2, #16]
        x_USB_EP_DMAADDR[i] = USB_DOUTEPS[epNum].DMAADDR;
    1364:	6953      	ldr	r3, [r2, #20]
    1366:	604b      	str	r3, [r1, #4]
    }
#endif

#if (FIFO_CNT > 0)
    for ( i = 0; i < FIFO_CNT; i++ ) {
      x_USB_DIEPTXFS[i] = USB_DIEPTXFS[i];
    1368:	4b2e      	ldr	r3, [pc, #184]	; (1424 <UsbPowerDown.part.4+0x180>)
      if ( ep->in ) {
        x_USB_EP_CTL[i] = USB_DINEPS[epNum].CTL;
        x_USB_EP_TSIZ[i] = USB_DINEPS[epNum].TSIZ;
        x_USB_EP_DMAADDR[i] = USB_DINEPS[epNum].DMAADDR;
      } else {
        x_USB_EP_CTL[i] = USB_DOUTEPS[epNum].CTL;
    136a:	6066      	str	r6, [r4, #4]
        x_USB_EP_TSIZ[i] = USB_DOUTEPS[epNum].TSIZ;
    136c:	6045      	str	r5, [r0, #4]
    }
#endif

#if (FIFO_CNT > 0)
    for ( i = 0; i < FIFO_CNT; i++ ) {
      x_USB_DIEPTXFS[i] = USB_DIEPTXFS[i];
    136e:	4d2e      	ldr	r5, [pc, #184]	; (1428 <UsbPowerDown.part.4+0x184>)
    1370:	681a      	ldr	r2, [r3, #0]
    }
#endif

    /* Prepare for wakeup on resume and reset. */
    USB->DCFG    = (USB->DCFG & ~_USB_DCFG_RESVALID_MASK)
    1372:	481d      	ldr	r0, [pc, #116]	; (13e8 <UsbPowerDown.part.4+0x144>)
    }
#endif

#if (FIFO_CNT > 0)
    for ( i = 0; i < FIFO_CNT; i++ ) {
      x_USB_DIEPTXFS[i] = USB_DIEPTXFS[i];
    1374:	602a      	str	r2, [r5, #0]
    1376:	f8d3 e004 	ldr.w	lr, [r3, #4]
    }
#endif

    /* Prepare for wakeup on resume and reset. */
    USB->DCFG    = (USB->DCFG & ~_USB_DCFG_RESVALID_MASK)
    137a:	6801      	ldr	r1, [r0, #0]
    }
#endif

#if (FIFO_CNT > 0)
    for ( i = 0; i < FIFO_CNT; i++ ) {
      x_USB_DIEPTXFS[i] = USB_DIEPTXFS[i];
    137c:	f8c5 e004 	str.w	lr, [r5, #4]
    }
#endif

    /* Prepare for wakeup on resume and reset. */
    USB->DCFG    = (USB->DCFG & ~_USB_DCFG_RESVALID_MASK)
    1380:	f021 417c 	bic.w	r1, r1, #4227858432	; 0xfc000000
                   | (4 << _USB_DCFG_RESVALID_SHIFT);
    1384:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
      x_USB_DIEPTXFS[i] = USB_DIEPTXFS[i];
    }
#endif

    /* Prepare for wakeup on resume and reset. */
    USB->DCFG    = (USB->DCFG & ~_USB_DCFG_RESVALID_MASK)
    1388:	6001      	str	r1, [r0, #0]
                   | (4 << _USB_DCFG_RESVALID_SHIFT);
    USB->DCFG   |= USB_DCFG_ENA32KHZSUSP;
    138a:	6801      	ldr	r1, [r0, #0]
    USB->GINTMSK = USB_GINTMSK_RESETDETMSK | USB_GINTMSK_WKUPINTMSK;
    138c:	4e13      	ldr	r6, [pc, #76]	; (13dc <UsbPowerDown.part.4+0x138>)
    USB->PCGCCTL |= USB_PCGCCTL_PWRCLMP;
    USB->PCGCCTL |= USB_PCGCCTL_RSTPDWNMODULE;
    USB->PCGCCTL |= USB_PCGCCTL_STOPPCLK;

    /* Record current clock settings. */
    cmuStatus = CMU->STATUS;
    138e:	4a27      	ldr	r2, [pc, #156]	; (142c <UsbPowerDown.part.4+0x188>)
    1390:	4c27      	ldr	r4, [pc, #156]	; (1430 <UsbPowerDown.part.4+0x18c>)
#endif

    /* Prepare for wakeup on resume and reset. */
    USB->DCFG    = (USB->DCFG & ~_USB_DCFG_RESVALID_MASK)
                   | (4 << _USB_DCFG_RESVALID_SHIFT);
    USB->DCFG   |= USB_DCFG_ENA32KHZSUSP;
    1392:	f041 0108 	orr.w	r1, r1, #8
    1396:	6001      	str	r1, [r0, #0]
    USB->GINTMSK = USB_GINTMSK_RESETDETMSK | USB_GINTMSK_WKUPINTMSK;
    1398:	61b7      	str	r7, [r6, #24]

    /* Enter partial powerdown mode. */
    USB->PCGCCTL |= USB_PCGCCTL_PWRCLMP;
    139a:	f8d3 1cfc 	ldr.w	r1, [r3, #3324]	; 0xcfc
    139e:	f041 0104 	orr.w	r1, r1, #4
    13a2:	f8c3 1cfc 	str.w	r1, [r3, #3324]	; 0xcfc
    USB->PCGCCTL |= USB_PCGCCTL_RSTPDWNMODULE;
    13a6:	f8d3 1cfc 	ldr.w	r1, [r3, #3324]	; 0xcfc
    13aa:	f041 0108 	orr.w	r1, r1, #8
    13ae:	f8c3 1cfc 	str.w	r1, [r3, #3324]	; 0xcfc
    USB->PCGCCTL |= USB_PCGCCTL_STOPPCLK;
    13b2:	f8d3 1cfc 	ldr.w	r1, [r3, #3324]	; 0xcfc
    13b6:	f041 0101 	orr.w	r1, r1, #1
    13ba:	f8c3 1cfc 	str.w	r1, [r3, #3324]	; 0xcfc

    /* Record current clock settings. */
    cmuStatus = CMU->STATUS;
    13be:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    13c0:	6023      	str	r3, [r4, #0]
    SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk;
#endif

    /* Switch USBC clock to 32 kHz. */
#if (USB_USBC_32kHz_CLK == USB_USBC_32kHz_CLK_LFXO)
    CMU->CMD = CMU_CMD_USBCCLKSEL_LFXO;
    13c2:	2340      	movs	r3, #64	; 0x40
    13c4:	6253      	str	r3, [r2, #36]	; 0x24
    while ( (CMU->STATUS & CMU_STATUS_USBCLFXOSEL) == 0 ) {
    13c6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    13c8:	03db      	lsls	r3, r3, #15
    13ca:	d5fc      	bpl.n	13c6 <UsbPowerDown.part.4+0x122>
#endif

    return true;
  }
  return false;
}
    13cc:	2001      	movs	r0, #1
    13ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ( ep->in ) {
        x_USB_EP_CTL[i] = USB_DINEPS[epNum].CTL;
        x_USB_EP_TSIZ[i] = USB_DINEPS[epNum].TSIZ;
        x_USB_EP_DMAADDR[i] = USB_DINEPS[epNum].DMAADDR;
      } else {
        x_USB_EP_CTL[i] = USB_DOUTEPS[epNum].CTL;
    13d2:	4a0e      	ldr	r2, [pc, #56]	; (140c <UsbPowerDown.part.4+0x168>)
    13d4:	e7c0      	b.n	1358 <UsbPowerDown.part.4+0xb4>
#if (NUM_EP_USED > 0)
    for ( i = 0; i < NUM_EP_USED; i++ ) {
      ep = &dev->ep[i + 1];
      epNum = ep->num;
      if ( ep->in ) {
        x_USB_EP_CTL[i] = USB_DINEPS[epNum].CTL;
    13d6:	4d11      	ldr	r5, [pc, #68]	; (141c <UsbPowerDown.part.4+0x178>)
    13d8:	e7ab      	b.n	1332 <UsbPowerDown.part.4+0x8e>
    13da:	bf00      	nop
    13dc:	40100000 	.word	0x40100000
    13e0:	20000c08 	.word	0x20000c08
    13e4:	20000c04 	.word	0x20000c04
    13e8:	40100800 	.word	0x40100800
    13ec:	20000c30 	.word	0x20000c30
    13f0:	20000c4c 	.word	0x20000c4c
    13f4:	20000c18 	.word	0x20000c18
    13f8:	20000c48 	.word	0x20000c48
    13fc:	20000000 	.word	0x20000000
    1400:	20000c34 	.word	0x20000c34
    1404:	40100c00 	.word	0x40100c00
    1408:	20000c50 	.word	0x20000c50
    140c:	40100b00 	.word	0x40100b00
    1410:	20000c0c 	.word	0x20000c0c
    1414:	20000bfc 	.word	0x20000bfc
    1418:	20000c38 	.word	0x20000c38
    141c:	40100900 	.word	0x40100900
    1420:	80800000 	.word	0x80800000
    1424:	40100104 	.word	0x40100104
    1428:	20000c24 	.word	0x20000c24
    142c:	400c8000 	.word	0x400c8000
    1430:	20000c14 	.word	0x20000c14
    1434:	20000c44 	.word	0x20000c44
    1438:	20000c20 	.word	0x20000c20
    143c:	20000c40 	.word	0x20000c40
    1440:	20000c1c 	.word	0x20000c1c
    1444:	20000c2c 	.word	0x20000c2c

00001448 <UsbPowerUp.part.5>:
 * Returns true if a powerup sequence was performed.
 */
static bool UsbPowerUp(void)
{
  if ( USBD_poweredDown ) {
    USBD_poweredDown = false;
    1448:	4b2c      	ldr	r3, [pc, #176]	; (14fc <UsbPowerUp.part.5+0xb4>)
/*
 * Exit USB core partial powerdown mode, restore essential USB core registers.
 * Will prevent re-entry back to EM2.
 * Returns true if a powerup sequence was performed.
 */
static bool UsbPowerUp(void)
    144a:	b570      	push	{r4, r5, r6, lr}
{
  if ( USBD_poweredDown ) {
    USBD_poweredDown = false;
    144c:	2200      	movs	r2, #0
    DEBUG_USB_INT_LO_PUTCHAR('/');

#if !defined(USB_CORECLK_HFRCO) || !defined(CMU_OSCENCMD_USHFRCOEN)
    /* Switch HFCLK from HFRCO to HFXO. */
    CMU_ClockSelectSet(cmuClock_HF, cmuSelect_HFXO);
    144e:	2011      	movs	r0, #17
    1450:	2104      	movs	r1, #4
 * Returns true if a powerup sequence was performed.
 */
static bool UsbPowerUp(void)
{
  if ( USBD_poweredDown ) {
    USBD_poweredDown = false;
    1452:	701a      	strb	r2, [r3, #0]
    DEBUG_USB_INT_LO_PUTCHAR('/');

#if !defined(USB_CORECLK_HFRCO) || !defined(CMU_OSCENCMD_USHFRCOEN)
    /* Switch HFCLK from HFRCO to HFXO. */
    CMU_ClockSelectSet(cmuClock_HF, cmuSelect_HFXO);
    1454:	f002 fd5e 	bl	3f14 <CMU_ClockSelectSet>
#endif

    /* Turn off HFRCO when not needed. */
    if ( (cmuStatus & CMU_STATUS_HFRCOENS) == 0 ) {
    1458:	4b29      	ldr	r3, [pc, #164]	; (1500 <UsbPowerUp.part.5+0xb8>)
    145a:	681b      	ldr	r3, [r3, #0]
    145c:	07db      	lsls	r3, r3, #31
    145e:	d402      	bmi.n	1466 <UsbPowerUp.part.5+0x1e>
      CMU->OSCENCMD = CMU_OSCENCMD_HFRCODIS;
    1460:	4b28      	ldr	r3, [pc, #160]	; (1504 <UsbPowerUp.part.5+0xbc>)
    1462:	2202      	movs	r2, #2
    1464:	621a      	str	r2, [r3, #32]
    }

    /* Exit partial powerdown mode. */
    USB->PCGCCTL &= ~USB_PCGCCTL_STOPPCLK;
    1466:	4b28      	ldr	r3, [pc, #160]	; (1508 <UsbPowerUp.part.5+0xc0>)
    USB->PCGCCTL &= ~(USB_PCGCCTL_PWRCLMP | USB_PCGCCTL_RSTPDWNMODULE);

    if ((USB->GINTSTS & (USB_GINTSTS_WKUPINT | USB_GINTSTS_RESETDET) ) == 0) {
    1468:	4828      	ldr	r0, [pc, #160]	; (150c <UsbPowerUp.part.5+0xc4>)
    if ( (cmuStatus & CMU_STATUS_HFRCOENS) == 0 ) {
      CMU->OSCENCMD = CMU_OSCENCMD_HFRCODIS;
    }

    /* Exit partial powerdown mode. */
    USB->PCGCCTL &= ~USB_PCGCCTL_STOPPCLK;
    146a:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
    USB->PCGCCTL &= ~(USB_PCGCCTL_PWRCLMP | USB_PCGCCTL_RSTPDWNMODULE);

    if ((USB->GINTSTS & (USB_GINTSTS_WKUPINT | USB_GINTSTS_RESETDET) ) == 0) {
    146e:	4a28      	ldr	r2, [pc, #160]	; (1510 <UsbPowerUp.part.5+0xc8>)
    if ( (cmuStatus & CMU_STATUS_HFRCOENS) == 0 ) {
      CMU->OSCENCMD = CMU_OSCENCMD_HFRCODIS;
    }

    /* Exit partial powerdown mode. */
    USB->PCGCCTL &= ~USB_PCGCCTL_STOPPCLK;
    1470:	f021 0101 	bic.w	r1, r1, #1
    1474:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    USB->PCGCCTL &= ~(USB_PCGCCTL_PWRCLMP | USB_PCGCCTL_RSTPDWNMODULE);
    1478:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
    147c:	f021 010c 	bic.w	r1, r1, #12
    1480:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200

    if ((USB->GINTSTS & (USB_GINTSTS_WKUPINT | USB_GINTSTS_RESETDET) ) == 0) {
    1484:	6943      	ldr	r3, [r0, #20]
    1486:	401a      	ands	r2, r3
    1488:	2a00      	cmp	r2, #0
    148a:	d02f      	beq.n	14ec <UsbPowerUp.part.5+0xa4>
    148c:	4b21      	ldr	r3, [pc, #132]	; (1514 <UsbPowerUp.part.5+0xcc>)
    148e:	681e      	ldr	r6, [r3, #0]
      USB->DCTL = x_USB_DCTL | USB_DCTL_RMTWKUPSIG;
      USB->DCTL = x_USB_DCTL;
    }

    /* Restore USB core registers. */
    USB->GUSBCFG = x_USB_GUSBCFG;
    1490:	4b21      	ldr	r3, [pc, #132]	; (1518 <UsbPowerUp.part.5+0xd0>)
    1492:	4d1e      	ldr	r5, [pc, #120]	; (150c <UsbPowerUp.part.5+0xc4>)
    1494:	681a      	ldr	r2, [r3, #0]
    USB->DCFG    = x_USB_DCFG;
    1496:	4b21      	ldr	r3, [pc, #132]	; (151c <UsbPowerUp.part.5+0xd4>)
    1498:	4c21      	ldr	r4, [pc, #132]	; (1520 <UsbPowerUp.part.5+0xd8>)
      USB->DCTL = x_USB_DCTL | USB_DCTL_RMTWKUPSIG;
      USB->DCTL = x_USB_DCTL;
    }

    /* Restore USB core registers. */
    USB->GUSBCFG = x_USB_GUSBCFG;
    149a:	60ea      	str	r2, [r5, #12]
    USB->DCFG    = x_USB_DCFG;
    149c:	681b      	ldr	r3, [r3, #0]
    149e:	6023      	str	r3, [r4, #0]

    RestoreEpCtrlRegisters();
    14a0:	f7ff fea0 	bl	11e4 <RestoreEpCtrlRegisters>

    USB->PCGCCTL   = x_USB_PCGCCTL;
    14a4:	4b1f      	ldr	r3, [pc, #124]	; (1524 <UsbPowerUp.part.5+0xdc>)
    14a6:	4a18      	ldr	r2, [pc, #96]	; (1508 <UsbPowerUp.part.5+0xc0>)
    14a8:	6819      	ldr	r1, [r3, #0]
    USB->DOEPMSK   = x_USB_DOEPMSK;
    14aa:	4b1f      	ldr	r3, [pc, #124]	; (1528 <UsbPowerUp.part.5+0xe0>)
    USB->GUSBCFG = x_USB_GUSBCFG;
    USB->DCFG    = x_USB_DCFG;

    RestoreEpCtrlRegisters();

    USB->PCGCCTL   = x_USB_PCGCCTL;
    14ac:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    USB->DOEPMSK   = x_USB_DOEPMSK;
    14b0:	681a      	ldr	r2, [r3, #0]
    USB->DIEPMSK   = x_USB_DIEPMSK;
    14b2:	4b1e      	ldr	r3, [pc, #120]	; (152c <UsbPowerUp.part.5+0xe4>)
    USB->DCFG    = x_USB_DCFG;

    RestoreEpCtrlRegisters();

    USB->PCGCCTL   = x_USB_PCGCCTL;
    USB->DOEPMSK   = x_USB_DOEPMSK;
    14b4:	6162      	str	r2, [r4, #20]
    USB->DIEPMSK   = x_USB_DIEPMSK;
    14b6:	681a      	ldr	r2, [r3, #0]
    USB->DAINTMSK  = x_USB_DAINTMSK;
    14b8:	4b1d      	ldr	r3, [pc, #116]	; (1530 <UsbPowerUp.part.5+0xe8>)

    RestoreEpCtrlRegisters();

    USB->PCGCCTL   = x_USB_PCGCCTL;
    USB->DOEPMSK   = x_USB_DOEPMSK;
    USB->DIEPMSK   = x_USB_DIEPMSK;
    14ba:	6122      	str	r2, [r4, #16]
    USB->DAINTMSK  = x_USB_DAINTMSK;
    14bc:	681a      	ldr	r2, [r3, #0]
    USB->DCTL      = x_USB_DCTL;
    USB->GNPTXFSIZ = x_USB_GNPTXFSIZ;
    14be:	4b1d      	ldr	r3, [pc, #116]	; (1534 <UsbPowerUp.part.5+0xec>)
    RestoreEpCtrlRegisters();

    USB->PCGCCTL   = x_USB_PCGCCTL;
    USB->DOEPMSK   = x_USB_DOEPMSK;
    USB->DIEPMSK   = x_USB_DIEPMSK;
    USB->DAINTMSK  = x_USB_DAINTMSK;
    14c0:	61e2      	str	r2, [r4, #28]
    USB->DCTL      = x_USB_DCTL;
    14c2:	6066      	str	r6, [r4, #4]
    USB->GNPTXFSIZ = x_USB_GNPTXFSIZ;
    14c4:	681a      	ldr	r2, [r3, #0]
    USB->GRXFSIZ   = x_USB_GRXFSIZ;
    14c6:	4b1c      	ldr	r3, [pc, #112]	; (1538 <UsbPowerUp.part.5+0xf0>)
    USB->PCGCCTL   = x_USB_PCGCCTL;
    USB->DOEPMSK   = x_USB_DOEPMSK;
    USB->DIEPMSK   = x_USB_DIEPMSK;
    USB->DAINTMSK  = x_USB_DAINTMSK;
    USB->DCTL      = x_USB_DCTL;
    USB->GNPTXFSIZ = x_USB_GNPTXFSIZ;
    14c8:	62aa      	str	r2, [r5, #40]	; 0x28
    USB->GRXFSIZ   = x_USB_GRXFSIZ;
    14ca:	681a      	ldr	r2, [r3, #0]
    USB->GAHBCFG   = x_USB_GAHBCFG;
    14cc:	4b1b      	ldr	r3, [pc, #108]	; (153c <UsbPowerUp.part.5+0xf4>)
    USB->DOEPMSK   = x_USB_DOEPMSK;
    USB->DIEPMSK   = x_USB_DIEPMSK;
    USB->DAINTMSK  = x_USB_DAINTMSK;
    USB->DCTL      = x_USB_DCTL;
    USB->GNPTXFSIZ = x_USB_GNPTXFSIZ;
    USB->GRXFSIZ   = x_USB_GRXFSIZ;
    14ce:	626a      	str	r2, [r5, #36]	; 0x24
    USB->GAHBCFG   = x_USB_GAHBCFG;
    14d0:	681a      	ldr	r2, [r3, #0]
#if defined(_USB_GOTGCTL_MASK)
    USB->GOTGCTL   = x_USB_GOTGCTL;
    14d2:	4b1b      	ldr	r3, [pc, #108]	; (1540 <UsbPowerUp.part.5+0xf8>)
    USB->DIEPMSK   = x_USB_DIEPMSK;
    USB->DAINTMSK  = x_USB_DAINTMSK;
    USB->DCTL      = x_USB_DCTL;
    USB->GNPTXFSIZ = x_USB_GNPTXFSIZ;
    USB->GRXFSIZ   = x_USB_GRXFSIZ;
    USB->GAHBCFG   = x_USB_GAHBCFG;
    14d4:	60aa      	str	r2, [r5, #8]
#if defined(_USB_GOTGCTL_MASK)
    USB->GOTGCTL   = x_USB_GOTGCTL;
    14d6:	681a      	ldr	r2, [r3, #0]
#endif
    USB->GINTMSK   = x_USB_GINTMSK;
    14d8:	4b1a      	ldr	r3, [pc, #104]	; (1544 <UsbPowerUp.part.5+0xfc>)
    USB->DCTL      = x_USB_DCTL;
    USB->GNPTXFSIZ = x_USB_GNPTXFSIZ;
    USB->GRXFSIZ   = x_USB_GRXFSIZ;
    USB->GAHBCFG   = x_USB_GAHBCFG;
#if defined(_USB_GOTGCTL_MASK)
    USB->GOTGCTL   = x_USB_GOTGCTL;
    14da:	602a      	str	r2, [r5, #0]
#endif
    USB->GINTMSK   = x_USB_GINTMSK;
    14dc:	681b      	ldr	r3, [r3, #0]
    14de:	61ab      	str	r3, [r5, #24]

    USB->DCTL |= USB_DCTL_PWRONPRGDONE;
    14e0:	6863      	ldr	r3, [r4, #4]
    14e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    14e6:	6063      	str	r3, [r4, #4]
#endif

    return true;
  }
  return false;
}
    14e8:	2001      	movs	r0, #1
    14ea:	bd70      	pop	{r4, r5, r6, pc}
    /* Exit partial powerdown mode. */
    USB->PCGCCTL &= ~USB_PCGCCTL_STOPPCLK;
    USB->PCGCCTL &= ~(USB_PCGCCTL_PWRCLMP | USB_PCGCCTL_RSTPDWNMODULE);

    if ((USB->GINTSTS & (USB_GINTSTS_WKUPINT | USB_GINTSTS_RESETDET) ) == 0) {
      USB->DCTL = x_USB_DCTL | USB_DCTL_RMTWKUPSIG;
    14ec:	4a09      	ldr	r2, [pc, #36]	; (1514 <UsbPowerUp.part.5+0xcc>)
    14ee:	4b0c      	ldr	r3, [pc, #48]	; (1520 <UsbPowerUp.part.5+0xd8>)
    14f0:	6816      	ldr	r6, [r2, #0]
    14f2:	f046 0201 	orr.w	r2, r6, #1
    14f6:	605a      	str	r2, [r3, #4]
      USB->DCTL = x_USB_DCTL;
    14f8:	605e      	str	r6, [r3, #4]
    14fa:	e7c9      	b.n	1490 <UsbPowerUp.part.5+0x48>
    14fc:	20000c44 	.word	0x20000c44
    1500:	20000c14 	.word	0x20000c14
    1504:	400c8000 	.word	0x400c8000
    1508:	40100c00 	.word	0x40100c00
    150c:	40100000 	.word	0x40100000
    1510:	80800000 	.word	0x80800000
    1514:	20000c4c 	.word	0x20000c4c
    1518:	20000c2c 	.word	0x20000c2c
    151c:	20000c30 	.word	0x20000c30
    1520:	40100800 	.word	0x40100800
    1524:	20000c50 	.word	0x20000c50
    1528:	20000c34 	.word	0x20000c34
    152c:	20000c48 	.word	0x20000c48
    1530:	20000c18 	.word	0x20000c18
    1534:	20000c04 	.word	0x20000c04
    1538:	20000c08 	.word	0x20000c08
    153c:	20000c1c 	.word	0x20000c1c
    1540:	20000c40 	.word	0x20000c40
    1544:	20000c20 	.word	0x20000c20

00001548 <USB_IRQHandler>:

/*
 * USB_IRQHandler() is the first level handler for the USB peripheral interrupt.
 */
void USB_IRQHandler(void)
{
    1548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CORE_DECLARE_IRQ_STATE;

  CORE_ENTER_ATOMIC();

#if (USB_PWRSAVE_MODE)
  if ( USBD_poweredDown ) {
    154c:	4d99      	ldr	r5, [pc, #612]	; (17b4 <USB_IRQHandler+0x26c>)

/*
 * USB_IRQHandler() is the first level handler for the USB peripheral interrupt.
 */
void USB_IRQHandler(void)
{
    154e:	b083      	sub	sp, #12
  uint32_t status;
  bool servedVbusInterrupt = false;
  CORE_DECLARE_IRQ_STATE;

  CORE_ENTER_ATOMIC();
    1550:	f002 feb2 	bl	42b8 <CORE_EnterAtomic>

#if (USB_PWRSAVE_MODE)
  if ( USBD_poweredDown ) {
    1554:	782b      	ldrb	r3, [r5, #0]
{
  uint32_t status;
  bool servedVbusInterrupt = false;
  CORE_DECLARE_IRQ_STATE;

  CORE_ENTER_ATOMIC();
    1556:	9001      	str	r0, [sp, #4]

#if (USB_PWRSAVE_MODE)
  if ( USBD_poweredDown ) {
    1558:	b14b      	cbz	r3, 156e <USB_IRQHandler+0x26>
      CMU->OSCENCMD = (cmuStatus
                       & (CMU_STATUS_AUXHFRCOENS | CMU_STATUS_HFXOENS) )
                      | CMU_OSCENCMD_USHFRCOEN;
    }
#else
    if ( (CMU->STATUS & CMU_STATUS_HFXOENS) == 0 ) { /* Wakeup from EM2 ? */
    155a:	4b97      	ldr	r3, [pc, #604]	; (17b8 <USB_IRQHandler+0x270>)
    155c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    155e:	0750      	lsls	r0, r2, #29
    1560:	d556      	bpl.n	1610 <USB_IRQHandler+0xc8>
#if defined(CMU_OSCENCMD_USHFRCOEN)
    CMU->CMD = CMU_CMD_USBCCLKSEL_USHFRCO;
    while ( (CMU->STATUS & CMU_STATUS_USBCUSHFRCOSEL) == 0 ) {
    }
#else
    CMU->CMD = CMU_CMD_USBCCLKSEL_HFCLKNODIV;
    1562:	4a95      	ldr	r2, [pc, #596]	; (17b8 <USB_IRQHandler+0x270>)
    1564:	2320      	movs	r3, #32
    1566:	6253      	str	r3, [r2, #36]	; 0x24
    while ( (CMU->STATUS & CMU_STATUS_USBCHFCLKSEL) == 0 ) {
    1568:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    156a:	0419      	lsls	r1, r3, #16
    156c:	d5fc      	bpl.n	1568 <USB_IRQHandler+0x20>
    }
#endif
  }
#endif /* if ( USB_PWRSAVE_MODE ) */

  if ( USB->IF && (USB->CTRL & USB_CTRL_VREGOSEN) ) {
    156e:	4b93      	ldr	r3, [pc, #588]	; (17bc <USB_IRQHandler+0x274>)
    1570:	689a      	ldr	r2, [r3, #8]
    1572:	b112      	cbz	r2, 157a <USB_IRQHandler+0x32>
    1574:	681a      	ldr	r2, [r3, #0]
    1576:	0392      	lsls	r2, r2, #14
    1578:	d421      	bmi.n	15be <USB_IRQHandler+0x76>

__STATIC_INLINE uint32_t USBHAL_GetCoreInts(void)
{
  uint32_t retVal;

  retVal  = USB->GINTSTS;
    157a:	4b91      	ldr	r3, [pc, #580]	; (17c0 <USB_IRQHandler+0x278>)
    157c:	695a      	ldr	r2, [r3, #20]
  retVal &= USB->GINTMSK;
    157e:	699c      	ldr	r4, [r3, #24]
      }
    }
  }

  status = USBHAL_GetCoreInts();
  if ( status == 0 ) {
    1580:	4014      	ands	r4, r2
    1582:	d016      	beq.n	15b2 <USB_IRQHandler+0x6a>
      DEBUG_USB_INT_LO_PUTS("\nSinT");
    }
    return;
  }

  HANDLE_INT(USB_GINTSTS_RESETDET)
    1584:	0221      	lsls	r1, r4, #8
    1586:	f100 8208 	bmi.w	199a <USB_IRQHandler+0x452>
  HANDLE_INT(USB_GINTSTS_WKUPINT)
    158a:	2c00      	cmp	r4, #0
    158c:	f2c0 8221 	blt.w	19d2 <USB_IRQHandler+0x48a>
  HANDLE_INT(USB_GINTSTS_USBSUSP)
    1590:	0523      	lsls	r3, r4, #20
    1592:	f100 81e6 	bmi.w	1962 <USB_IRQHandler+0x41a>
  HANDLE_INT(USB_GINTSTS_SOF)
    1596:	0727      	lsls	r7, r4, #28
    1598:	f100 81d3 	bmi.w	1942 <USB_IRQHandler+0x3fa>
  HANDLE_INT(USB_GINTSTS_ENUMDONE)
    159c:	04a6      	lsls	r6, r4, #18
    159e:	f100 81a2 	bmi.w	18e6 <USB_IRQHandler+0x39e>
  HANDLE_INT(USB_GINTSTS_USBRST)
    15a2:	04e0      	lsls	r0, r4, #19
    15a4:	f100 8122 	bmi.w	17ec <USB_IRQHandler+0x2a4>
  HANDLE_INT(USB_GINTSTS_IEPINT)
    15a8:	0361      	lsls	r1, r4, #13
    15aa:	f100 80ae 	bmi.w	170a <USB_IRQHandler+0x1c2>
  HANDLE_INT(USB_GINTSTS_OEPINT)
    15ae:	0321      	lsls	r1, r4, #12
    15b0:	d434      	bmi.n	161c <USB_IRQHandler+0xd4>

  CORE_EXIT_ATOMIC();
    15b2:	9801      	ldr	r0, [sp, #4]

  if ( status != 0 ) {
    DEBUG_USB_INT_LO_PUTS("\nUinT");
  }
}
    15b4:	b003      	add	sp, #12
    15b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HANDLE_INT(USB_GINTSTS_ENUMDONE)
  HANDLE_INT(USB_GINTSTS_USBRST)
  HANDLE_INT(USB_GINTSTS_IEPINT)
  HANDLE_INT(USB_GINTSTS_OEPINT)

  CORE_EXIT_ATOMIC();
    15ba:	f002 be81 	b.w	42c0 <CORE_ExitAtomic>
#endif
  }
#endif /* if ( USB_PWRSAVE_MODE ) */

  if ( USB->IF && (USB->CTRL & USB_CTRL_VREGOSEN) ) {
    if ( USB->IF & USB_IF_VREGOSH ) {
    15be:	689a      	ldr	r2, [r3, #8]
    15c0:	07d7      	lsls	r7, r2, #31
    15c2:	d50b      	bpl.n	15dc <USB_IRQHandler+0x94>
      USB->IFC = USB_IFC_VREGOSH;
    15c4:	2201      	movs	r2, #1
    15c6:	611a      	str	r2, [r3, #16]

      if ( USB->STATUS & USB_STATUS_VREGOS ) {
    15c8:	685b      	ldr	r3, [r3, #4]
    15ca:	07de      	lsls	r6, r3, #31
    15cc:	d506      	bpl.n	15dc <USB_IRQHandler+0x94>
 * Will prevent re-entry back to EM2.
 * Returns true if a powerup sequence was performed.
 */
static bool UsbPowerUp(void)
{
  if ( USBD_poweredDown ) {
    15ce:	782b      	ldrb	r3, [r5, #0]
    15d0:	2b00      	cmp	r3, #0
    15d2:	f040 8254 	bne.w	1a7e <USB_IRQHandler+0x536>

#if (USB_PWRSAVE_MODE)
        if ( UsbPowerUp() ) {
          USBDHAL_EnableUsbResetAndSuspendInt();
        }
        USBD_SetUsbState(USBD_STATE_POWERED);
    15d6:	2002      	movs	r0, #2
    15d8:	f7fe fec4 	bl	364 <USBD_SetUsbState>
#endif
      }
    }

    if ( USB->IF & USB_IF_VREGOSL ) {
    15dc:	4b77      	ldr	r3, [pc, #476]	; (17bc <USB_IRQHandler+0x274>)
    15de:	689a      	ldr	r2, [r3, #8]
    15e0:	0794      	lsls	r4, r2, #30
    15e2:	d5ca      	bpl.n	157a <USB_IRQHandler+0x32>
      USB->IFC = USB_IFC_VREGOSL;
    15e4:	2202      	movs	r2, #2
    15e6:	611a      	str	r2, [r3, #16]

      if ( (USB->STATUS & USB_STATUS_VREGOS) == 0 ) {
    15e8:	685b      	ldr	r3, [r3, #4]
    15ea:	07d8      	lsls	r0, r3, #31
    15ec:	d4c5      	bmi.n	157a <USB_IRQHandler+0x32>
        servedVbusInterrupt = true;
        DEBUG_USB_INT_LO_PUTS("\nVboF");

#if (USB_PWRSAVE_MODE)
#if (USB_PWRSAVE_MODE & USB_PWRSAVE_MODE_ONVBUSOFF)
        if ( !USBD_poweredDown ) {
    15ee:	782b      	ldrb	r3, [r5, #0]
    15f0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    15f4:	b923      	cbnz	r3, 1600 <USB_IRQHandler+0xb8>
          USB->GINTMSK = 0;
    15f6:	4b72      	ldr	r3, [pc, #456]	; (17c0 <USB_IRQHandler+0x278>)
          USB->GINTSTS = 0xFFFFFFFF;
    15f8:	f04f 31ff 	mov.w	r1, #4294967295
        DEBUG_USB_INT_LO_PUTS("\nVboF");

#if (USB_PWRSAVE_MODE)
#if (USB_PWRSAVE_MODE & USB_PWRSAVE_MODE_ONVBUSOFF)
        if ( !USBD_poweredDown ) {
          USB->GINTMSK = 0;
    15fc:	619a      	str	r2, [r3, #24]
          USB->GINTSTS = 0xFFFFFFFF;
    15fe:	6159      	str	r1, [r3, #20]
#if (NUM_EP_USED > 0)
  int epNum;
  USBD_Ep_TypeDef *ep;
#endif

  if ( !USBD_poweredDown ) {
    1600:	782b      	ldrb	r3, [r5, #0]
    1602:	2b00      	cmp	r3, #0
    1604:	f000 8247 	beq.w	1a96 <USB_IRQHandler+0x54e>
          USB->GINTSTS = 0xFFFFFFFF;
        }

        UsbPowerDown();
#endif
        USBD_SetUsbState(USBD_STATE_NONE);
    1608:	2000      	movs	r0, #0
    160a:	f7fe feab 	bl	364 <USBD_SetUsbState>
    160e:	e7b4      	b.n	157a <USB_IRQHandler+0x32>
                      | CMU_OSCENCMD_USHFRCOEN;
    }
#else
    if ( (CMU->STATUS & CMU_STATUS_HFXOENS) == 0 ) { /* Wakeup from EM2 ? */
      CMU->OSCENCMD = cmuStatus
                      & (CMU_STATUS_AUXHFRCOENS | CMU_STATUS_HFXOENS);
    1610:	4a6c      	ldr	r2, [pc, #432]	; (17c4 <USB_IRQHandler+0x27c>)
    1612:	6812      	ldr	r2, [r2, #0]
    1614:	f002 0214 	and.w	r2, r2, #20
                       & (CMU_STATUS_AUXHFRCOENS | CMU_STATUS_HFXOENS) )
                      | CMU_OSCENCMD_USHFRCOEN;
    }
#else
    if ( (CMU->STATUS & CMU_STATUS_HFXOENS) == 0 ) { /* Wakeup from EM2 ? */
      CMU->OSCENCMD = cmuStatus
    1618:	621a      	str	r2, [r3, #32]
    161a:	e7a2      	b.n	1562 <USB_IRQHandler+0x1a>
  USBD_Ep_TypeDef *ep;

  DEBUG_USB_INT_HI_PUTCHAR('o');

  // If we came here from suspended state, set correct state
  if (USBD_GetUsbState() == USBD_STATE_SUSPENDED) {
    161c:	f7fe fdc8 	bl	1b0 <USBD_GetUsbState>
    1620:	2806      	cmp	r0, #6
    1622:	f000 8225 	beq.w	1a70 <USB_IRQHandler+0x528>

__STATIC_INLINE uint32_t USBDHAL_GetAllOutEpInts(void)
{
  uint32_t retVal;

  retVal  = USB->DAINT;
    1626:	4a68      	ldr	r2, [pc, #416]	; (17c8 <USB_IRQHandler+0x280>)
    USBD_SetUsbState(dev->savedState);
  }

  epint = USBDHAL_GetAllOutEpInts();
    1628:	4f68      	ldr	r7, [pc, #416]	; (17cc <USB_IRQHandler+0x284>)
    162a:	6993      	ldr	r3, [r2, #24]
  retVal &= USB->DAINTMSK;
    162c:	69d2      	ldr	r2, [r2, #28]
  USBD_Ep_TypeDef *ep = NULL;

  if ( epAddr & USB_SETUP_DIR_MASK ) {
    epIndex = dev->inEpAddr2EpIndex[epAddr & USB_EPNUM_MASK];
  } else {
    epIndex = dev->outEpAddr2EpIndex[epAddr & USB_EPNUM_MASK];
    162e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 17dc <USB_IRQHandler+0x294>

  retVal  = USB_DOUTEPS[ep->num].INT;
#if defined(USB_DOEP0INT_STUPPKTRCVD)
  retVal &= USB->DOEPMSK | USB_DOEP0INT_STUPPKTRCVD;
#else
  retVal &= USB->DOEPMSK;
    1632:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 17e0 <USB_IRQHandler+0x298>
      supCnt = 2;
    }

    dev->setup = &dev->setupPkt[2 - supCnt];
  }
  USB->DOEP0TSIZ |= 3 << _USB_DOEP0TSIZ_SUPCNT_SHIFT;
    1636:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 17e4 <USB_IRQHandler+0x29c>
__STATIC_INLINE uint32_t USBDHAL_GetAllOutEpInts(void)
{
  uint32_t retVal;

  retVal  = USB->DAINT;
  retVal &= USB->DAINTMSK;
    163a:	ea02 0803 	and.w	r8, r2, r3
  // If we came here from suspended state, set correct state
  if (USBD_GetUsbState() == USBD_STATE_SUSPENDED) {
    USBD_SetUsbState(dev->savedState);
  }

  epint = USBDHAL_GetAllOutEpInts();
    163e:	ea4f 4818 	mov.w	r8, r8, lsr #16
  for ( epnum = 0, epmask = 1;
    1642:	2500      	movs	r5, #0
    1644:	2401      	movs	r4, #1
    1646:	e015      	b.n	1674 <USB_IRQHandler+0x12c>
  }

  if ( epIndex ) {
    ep = &dev->ep[epIndex];
  } else if ( (epAddr & USB_EPNUM_MASK) == 0 ) {
    1648:	bb25      	cbnz	r5, 1694 <USB_IRQHandler+0x14c>
    ep = &dev->ep[0];
    164a:	f100 0334 	add.w	r3, r0, #52	; 0x34

__STATIC_INLINE uint32_t USBDHAL_GetOutEpInts(USBD_Ep_TypeDef *ep)
{
  uint32_t retVal;

  retVal  = USB_DOUTEPS[ep->num].INT;
    164e:	7899      	ldrb	r1, [r3, #2]
    1650:	4a5e      	ldr	r2, [pc, #376]	; (17cc <USB_IRQHandler+0x284>)
    1652:	0149      	lsls	r1, r1, #5
    1654:	440a      	add	r2, r1
    1656:	6892      	ldr	r2, [r2, #8]
#if defined(USB_DOEP0INT_STUPPKTRCVD)
  retVal &= USB->DOEPMSK | USB_DOEP0INT_STUPPKTRCVD;
#else
  retVal &= USB->DOEPMSK;
    1658:	f8da 6000 	ldr.w	r6, [sl]
    165c:	4016      	ands	r6, r2
      status = USBDHAL_GetOutEpInts(ep);

#if defined(USB_DOEP0INT_STUPPKTRCVD)
      HandleOutEpIntr(status, ep);
#else
      if ( status & USB_DOEP_INT_XFERCOMPL ) {
    165e:	07f2      	lsls	r2, r6, #31
    1660:	d43d      	bmi.n	16de <USB_IRQHandler+0x196>
        DEBUG_USB_INT_HI_PUTCHAR('c');
        ProcessOepData(ep);
      }

      /* Setup Phase Done */
      if ( status & USB_DOEP0INT_SETUP ) {
    1662:	0733      	lsls	r3, r6, #28
    1664:	d418      	bmi.n	1698 <USB_IRQHandler+0x150>
  }

  epint = USBDHAL_GetAllOutEpInts();
  for ( epnum = 0, epmask = 1;
        epnum <= MAX_NUM_OUT_EPS;
        epnum++, epmask <<= 1 ) {
    1666:	3501      	adds	r5, #1
    1668:	0064      	lsls	r4, r4, #1
  if (USBD_GetUsbState() == USBD_STATE_SUSPENDED) {
    USBD_SetUsbState(dev->savedState);
  }

  epint = USBDHAL_GetAllOutEpInts();
  for ( epnum = 0, epmask = 1;
    166a:	2d07      	cmp	r5, #7
        epnum <= MAX_NUM_OUT_EPS;
        epnum++, epmask <<= 1 ) {
    166c:	b2a4      	uxth	r4, r4
    166e:	f107 0720 	add.w	r7, r7, #32
  if (USBD_GetUsbState() == USBD_STATE_SUSPENDED) {
    USBD_SetUsbState(dev->savedState);
  }

  epint = USBDHAL_GetAllOutEpInts();
  for ( epnum = 0, epmask = 1;
    1672:	d09e      	beq.n	15b2 <USB_IRQHandler+0x6a>
        epnum <= MAX_NUM_OUT_EPS;
        epnum++, epmask <<= 1 ) {
    if ( epint & epmask ) {
    1674:	ea14 0f08 	tst.w	r4, r8
    1678:	d0f5      	beq.n	1666 <USB_IRQHandler+0x11e>
  USBD_Ep_TypeDef *ep = NULL;

  if ( epAddr & USB_SETUP_DIR_MASK ) {
    epIndex = dev->inEpAddr2EpIndex[epAddr & USB_EPNUM_MASK];
  } else {
    epIndex = dev->outEpAddr2EpIndex[epAddr & USB_EPNUM_MASK];
    167a:	f8d9 0000 	ldr.w	r0, [r9]
    167e:	1943      	adds	r3, r0, r5
    1680:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
  }

  if ( epIndex ) {
    1684:	2b00      	cmp	r3, #0
    1686:	d0df      	beq.n	1648 <USB_IRQHandler+0x100>
    ep = &dev->ep[epIndex];
    1688:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    168c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    1690:	3334      	adds	r3, #52	; 0x34
    1692:	e7dc      	b.n	164e <USB_IRQHandler+0x106>
    1694:	789b      	ldrb	r3, [r3, #2]
    1696:	deff      	udf	#255	; 0xff
#if !defined(USB_DOEP0INT_STUPPKTRCVD)
static void ProcessSetup(void)
{
  DEBUG_USB_INT_LO_PUTS("\nS");

  if ( USB->DOEP0INT & USB_DOEP0INT_BACK2BACKSETUP ) { /* Back to back setup packets received */
    1698:	4b4d      	ldr	r3, [pc, #308]	; (17d0 <USB_IRQHandler+0x288>)
    169a:	681b      	ldr	r3, [r3, #0]
    169c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    16a0:	f040 81aa 	bne.w	19f8 <USB_IRQHandler+0x4b0>
    DEBUG_USB_INT_LO_PUTS("B2B");

    dev->setup = (USB_Setup_TypeDef*)(USB->DOEP0DMAADDR - USB_SETUP_PKT_SIZE);
  } else {
    /* Read SETUP packet counter from hw. */
    int supCnt = (USB->DOEP0TSIZ & _USB_DOEP0TSIZ_SUPCNT_MASK)
    16a4:	f8db 2000 	ldr.w	r2, [fp]

    if ( supCnt == 3 ) {
      supCnt = 2;
    }

    dev->setup = &dev->setupPkt[2 - supCnt];
    16a8:	f8d9 0000 	ldr.w	r0, [r9]

    dev->setup = (USB_Setup_TypeDef*)(USB->DOEP0DMAADDR - USB_SETUP_PKT_SIZE);
  } else {
    /* Read SETUP packet counter from hw. */
    int supCnt = (USB->DOEP0TSIZ & _USB_DOEP0TSIZ_SUPCNT_MASK)
                 >> _USB_DOEP0TSIZ_SUPCNT_SHIFT;
    16ac:	f3c2 7241 	ubfx	r2, r2, #29, #2

    if ( supCnt == 3 ) {
    16b0:	2a03      	cmp	r2, #3
    16b2:	bf18      	it	ne
    16b4:	f1c2 0302 	rsbne	r3, r2, #2
      supCnt = 2;
    }

    dev->setup = &dev->setupPkt[2 - supCnt];
    16b8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    16bc:	3304      	adds	r3, #4
    16be:	6003      	str	r3, [r0, #0]
  }
  USB->DOEP0TSIZ |= 3 << _USB_DOEP0TSIZ_SUPCNT_SHIFT;
    16c0:	f8db 3000 	ldr.w	r3, [fp]
    16c4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
    16c8:	f8cb 3000 	str.w	r3, [fp]
  USB->DOEP0DMAADDR = (uint32_t)dev->setupPkt;
    16cc:	4b41      	ldr	r3, [pc, #260]	; (17d4 <USB_IRQHandler+0x28c>)
    16ce:	1d02      	adds	r2, r0, #4
    16d0:	601a      	str	r2, [r3, #0]
  USB->DOEP0INT = USB_DOEP0INT_SETUP;
    16d2:	2208      	movs	r2, #8
    16d4:	f843 2c0c 	str.w	r2, [r3, #-12]

  USBDEP_Ep0Handler(dev);     /* Call the SETUP handler for EP0 */
    16d8:	f7ff fbbe 	bl	e58 <USBDEP_Ep0Handler>
    16dc:	e7c3      	b.n	1666 <USB_IRQHandler+0x11e>

#if defined(USB_DOEP0INT_STUPPKTRCVD)
      HandleOutEpIntr(status, ep);
#else
      if ( status & USB_DOEP_INT_XFERCOMPL ) {
        USB_DOUTEPS[epnum].INT = USB_DOEP_INT_XFERCOMPL;
    16de:	2201      	movs	r2, #1
    16e0:	60ba      	str	r2, [r7, #8]
}

#if !defined(USB_DOEP0INT_STUPPKTRCVD)
static void ProcessOepData(USBD_Ep_TypeDef *ep)
{
  if ( ep->num == 0 ) {
    16e2:	7899      	ldrb	r1, [r3, #2]
    16e4:	2900      	cmp	r1, #0
    16e6:	f040 8191 	bne.w	1a0c <USB_IRQHandler+0x4c4>
    if ( ep->remaining > ep->packetSize ) {
    16ea:	691a      	ldr	r2, [r3, #16]
    16ec:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
    16f0:	4562      	cmp	r2, ip
    16f2:	f240 81af 	bls.w	1a54 <USB_IRQHandler+0x50c>
      ep->remaining -= ep->packetSize;
    16f6:	ebcc 0e02 	rsb	lr, ip, r2
      ep->xferred += ep->packetSize;
    16fa:	695a      	ldr	r2, [r3, #20]
    16fc:	4462      	add	r2, ip
    16fe:	615a      	str	r2, [r3, #20]
    1700:	f8c3 e010 	str.w	lr, [r3, #16]
    } else {
      ep->xferred += ep->remaining;
      ep->remaining = 0;
    }
    USBDEP_Ep0Handler(dev);
    1704:	f7ff fba8 	bl	e58 <USBDEP_Ep0Handler>
    1708:	e7ab      	b.n	1662 <USB_IRQHandler+0x11a>
  USBD_Ep_TypeDef *ep;

  DEBUG_USB_INT_HI_PUTCHAR('i');

  // If we came here from suspended state, set correct state
  if (USBD_GetUsbState() == USBD_STATE_SUSPENDED) {
    170a:	f7fe fd51 	bl	1b0 <USBD_GetUsbState>
    170e:	2806      	cmp	r0, #6
    1710:	f000 81a7 	beq.w	1a62 <USB_IRQHandler+0x51a>

__STATIC_INLINE uint32_t USBDHAL_GetAllInEpInts(void)
{
  uint32_t retVal;

  retVal  = USB->DAINT;
    1714:	4a2c      	ldr	r2, [pc, #176]	; (17c8 <USB_IRQHandler+0x280>)
    USBD_SetUsbState(dev->savedState);
  }

  epint = USBDHAL_GetAllInEpInts();
    1716:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 17d8 <USB_IRQHandler+0x290>
    171a:	6993      	ldr	r3, [r2, #24]
  retVal &= USB->DAINTMSK;
    171c:	69d2      	ldr	r2, [r2, #28]
{
  int epIndex;
  USBD_Ep_TypeDef *ep = NULL;

  if ( epAddr & USB_SETUP_DIR_MASK ) {
    epIndex = dev->inEpAddr2EpIndex[epAddr & USB_EPNUM_MASK];
    171e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 17dc <USB_IRQHandler+0x294>

__STATIC_INLINE uint32_t USBDHAL_GetInEpInts(USBD_Ep_TypeDef *ep)
{
  uint32_t retVal, msk;

  msk    = USB->DIEPMSK;
    1722:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 17e8 <USB_IRQHandler+0x2a0>
__STATIC_INLINE uint32_t USBDHAL_GetAllInEpInts(void)
{
  uint32_t retVal;

  retVal  = USB->DAINT;
  retVal &= USB->DAINTMSK;
    1726:	ea02 0a03 	and.w	sl, r2, r3
    172a:	2601      	movs	r6, #1
    172c:	fa1f fa8a 	uxth.w	sl, sl
  for ( epnum = 0, epmask = 1;
    1730:	4635      	mov	r5, r6
  // If we came here from suspended state, set correct state
  if (USBD_GetUsbState() == USBD_STATE_SUSPENDED) {
    USBD_SetUsbState(dev->savedState);
  }

  epint = USBDHAL_GetAllInEpInts();
    1732:	2700      	movs	r7, #0
    1734:	e029      	b.n	178a <USB_IRQHandler+0x242>
    epIndex = dev->outEpAddr2EpIndex[epAddr & USB_EPNUM_MASK];
  }

  if ( epIndex ) {
    ep = &dev->ep[epIndex];
  } else if ( (epAddr & USB_EPNUM_MASK) == 0 ) {
    1736:	2a00      	cmp	r2, #0
    1738:	d1ac      	bne.n	1694 <USB_IRQHandler+0x14c>
    ep = &dev->ep[0];
    173a:	f100 0334 	add.w	r3, r0, #52	; 0x34
__STATIC_INLINE uint32_t USBDHAL_GetInEpInts(USBD_Ep_TypeDef *ep)
{
  uint32_t retVal, msk;

  msk    = USB->DIEPMSK;
  retVal = USB_DINEPS[ep->num].INT;
    173e:	f893 e002 	ldrb.w	lr, [r3, #2]
    1742:	4925      	ldr	r1, [pc, #148]	; (17d8 <USB_IRQHandler+0x290>)

__STATIC_INLINE uint32_t USBDHAL_GetInEpInts(USBD_Ep_TypeDef *ep)
{
  uint32_t retVal, msk;

  msk    = USB->DIEPMSK;
    1744:	f8db c000 	ldr.w	ip, [fp]
  retVal = USB_DINEPS[ep->num].INT;
    1748:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
    174c:	4471      	add	r1, lr
    174e:	688a      	ldr	r2, [r1, #8]

  return retVal & msk;
    1750:	ea0c 0202 	and.w	r2, ip, r2
        epnum++, epmask <<= 1 ) {
    if ( epint & epmask ) {
      ep = USBD_GetEpFromAddr(USB_SETUP_DIR_MASK | epnum);
      status = USBDHAL_GetInEpInts(ep);

      if ( status & USB_DIEP_INT_XFERCOMPL ) {
    1754:	07d2      	lsls	r2, r2, #31
    1756:	d510      	bpl.n	177a <USB_IRQHandler+0x232>
        USB_DINEPS[epnum].INT = USB_DIEP_INT_XFERCOMPL;
    1758:	2201      	movs	r2, #1
    175a:	f8c9 2008 	str.w	r2, [r9, #8]

        DEBUG_USB_INT_HI_PUTCHAR('c');

        if ( epnum == 0 ) {
    175e:	2f00      	cmp	r7, #0
    1760:	f000 81f6 	beq.w	1b50 <USB_IRQHandler+0x608>
            ep->remaining = 0;
          }
          USBDEP_Ep0Handler(dev);
        } else {
          ep->xferred = ep->remaining
                        - ( (USB_DINEPS[epnum].TSIZ
    1764:	f8d9 1010 	ldr.w	r1, [r9, #16]
    1768:	691a      	ldr	r2, [r3, #16]
                             & _USB_DIEP_TSIZ_XFERSIZE_MASK)
                            >> _USB_DIEP_TSIZ_XFERSIZE_SHIFT);
          ep->remaining -= ep->xferred;

          USBDEP_EpHandler(ep->addr);
    176a:	78d8      	ldrb	r0, [r3, #3]
          USBDEP_Ep0Handler(dev);
        } else {
          ep->xferred = ep->remaining
                        - ( (USB_DINEPS[epnum].TSIZ
                             & _USB_DIEP_TSIZ_XFERSIZE_MASK)
                            >> _USB_DIEP_TSIZ_XFERSIZE_SHIFT);
    176c:	f3c1 0112 	ubfx	r1, r1, #0, #19
            ep->remaining = 0;
          }
          USBDEP_Ep0Handler(dev);
        } else {
          ep->xferred = ep->remaining
                        - ( (USB_DINEPS[epnum].TSIZ
    1770:	1a52      	subs	r2, r2, r1
            ep->xferred += ep->remaining;
            ep->remaining = 0;
          }
          USBDEP_Ep0Handler(dev);
        } else {
          ep->xferred = ep->remaining
    1772:	615a      	str	r2, [r3, #20]
                        - ( (USB_DINEPS[epnum].TSIZ
                             & _USB_DIEP_TSIZ_XFERSIZE_MASK)
                            >> _USB_DIEP_TSIZ_XFERSIZE_SHIFT);
          ep->remaining -= ep->xferred;
    1774:	6119      	str	r1, [r3, #16]

          USBDEP_EpHandler(ep->addr);
    1776:	f7ff fcff 	bl	1178 <USBDEP_EpHandler>
  }

  epint = USBDHAL_GetAllInEpInts();
  for ( epnum = 0, epmask = 1;
        epnum <= MAX_NUM_IN_EPS;
        epnum++, epmask <<= 1 ) {
    177a:	006d      	lsls	r5, r5, #1
  if (USBD_GetUsbState() == USBD_STATE_SUSPENDED) {
    USBD_SetUsbState(dev->savedState);
  }

  epint = USBDHAL_GetAllInEpInts();
  for ( epnum = 0, epmask = 1;
    177c:	2e07      	cmp	r6, #7
        epnum <= MAX_NUM_IN_EPS;
        epnum++, epmask <<= 1 ) {
    177e:	b2ad      	uxth	r5, r5
  if (USBD_GetUsbState() == USBD_STATE_SUSPENDED) {
    USBD_SetUsbState(dev->savedState);
  }

  epint = USBDHAL_GetAllInEpInts();
  for ( epnum = 0, epmask = 1;
    1780:	d015      	beq.n	17ae <USB_IRQHandler+0x266>
    1782:	3701      	adds	r7, #1
    1784:	3601      	adds	r6, #1
    1786:	f109 0920 	add.w	r9, r9, #32
        epnum <= MAX_NUM_IN_EPS;
        epnum++, epmask <<= 1 ) {
    if ( epint & epmask ) {
    178a:	ea15 0f0a 	tst.w	r5, sl
    178e:	d0f4      	beq.n	177a <USB_IRQHandler+0x232>
{
  int epIndex;
  USBD_Ep_TypeDef *ep = NULL;

  if ( epAddr & USB_SETUP_DIR_MASK ) {
    epIndex = dev->inEpAddr2EpIndex[epAddr & USB_EPNUM_MASK];
    1790:	f8d8 0000 	ldr.w	r0, [r8]
    1794:	f007 020f 	and.w	r2, r7, #15
    1798:	1883      	adds	r3, r0, r2
    179a:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
  } else {
    epIndex = dev->outEpAddr2EpIndex[epAddr & USB_EPNUM_MASK];
  }

  if ( epIndex ) {
    179e:	2b00      	cmp	r3, #0
    17a0:	d0c9      	beq.n	1736 <USB_IRQHandler+0x1ee>
    ep = &dev->ep[epIndex];
    17a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    17a6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    17aa:	3334      	adds	r3, #52	; 0x34
    17ac:	e7c7      	b.n	173e <USB_IRQHandler+0x1f6>
  HANDLE_INT(USB_GINTSTS_WKUPINT)
  HANDLE_INT(USB_GINTSTS_USBSUSP)
  HANDLE_INT(USB_GINTSTS_SOF)
  HANDLE_INT(USB_GINTSTS_ENUMDONE)
  HANDLE_INT(USB_GINTSTS_USBRST)
  HANDLE_INT(USB_GINTSTS_IEPINT)
    17ae:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    17b2:	e6fc      	b.n	15ae <USB_IRQHandler+0x66>
    17b4:	20000c44 	.word	0x20000c44
    17b8:	400c8000 	.word	0x400c8000
    17bc:	400c4000 	.word	0x400c4000
    17c0:	40100000 	.word	0x40100000
    17c4:	20000c14 	.word	0x20000c14
    17c8:	40100800 	.word	0x40100800
    17cc:	40100b00 	.word	0x40100b00
    17d0:	40100b08 	.word	0x40100b08
    17d4:	40100b14 	.word	0x40100b14
    17d8:	40100900 	.word	0x40100900
    17dc:	20000000 	.word	0x20000000
    17e0:	40100814 	.word	0x40100814
    17e4:	40100b10 	.word	0x40100b10
    17e8:	40100810 	.word	0x40100810
  int i;

  DEBUG_USB_INT_LO_PUTS("ReseT");

  /* Clear Remote Wakeup Signalling */
  USB->DCTL &= ~(DCTL_WO_BITMASK | USB_DCTL_RMTWKUPSIG);
    17ec:	49ad      	ldr	r1, [pc, #692]	; (1aa4 <USB_IRQHandler+0x55c>)
  }
}

__STATIC_INLINE void USBHAL_FlushTxFifo(uint8_t fifoNum)
{
  USB->GRSTCTL = USB_GRSTCTL_TXFFLSH | (fifoNum << _USB_GRSTCTL_TXFNUM_SHIFT);
    17ee:	48ae      	ldr	r0, [pc, #696]	; (1aa8 <USB_IRQHandler+0x560>)
    17f0:	684b      	ldr	r3, [r1, #4]
  while ( USB->GRSTCTL & USB_GRSTCTL_TXFFLSH ) {
    17f2:	4aae      	ldr	r2, [pc, #696]	; (1aac <USB_IRQHandler+0x564>)
    17f4:	f423 63f0 	bic.w	r3, r3, #1920	; 0x780
    17f8:	f023 0301 	bic.w	r3, r3, #1
  }
}

__STATIC_INLINE void USBHAL_FlushTxFifo(uint8_t fifoNum)
{
  USB->GRSTCTL = USB_GRSTCTL_TXFFLSH | (fifoNum << _USB_GRSTCTL_TXFNUM_SHIFT);
    17fc:	2520      	movs	r5, #32
    17fe:	604b      	str	r3, [r1, #4]
    1800:	6105      	str	r5, [r0, #16]
  while ( USB->GRSTCTL & USB_GRSTCTL_TXFFLSH ) {
    1802:	6813      	ldr	r3, [r2, #0]
    1804:	49a8      	ldr	r1, [pc, #672]	; (1aa8 <USB_IRQHandler+0x560>)
    1806:	f013 0320 	ands.w	r3, r3, #32
    180a:	d1fa      	bne.n	1802 <USB_IRQHandler+0x2ba>
  USBHAL_FlushTxFifo(0);

  /* Clear pending interrupts */
  for ( i = 0; i <= MAX_NUM_IN_EPS; i++ ) {
    USB_DINEPS[i].INT = 0xFFFFFFFF;
    180c:	f8df e2c8 	ldr.w	lr, [pc, #712]	; 1ad8 <USB_IRQHandler+0x590>
    1810:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 1adc <USB_IRQHandler+0x594>
    1814:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 1ae0 <USB_IRQHandler+0x598>
    1818:	f8df c2c8 	ldr.w	ip, [pc, #712]	; 1ae4 <USB_IRQHandler+0x59c>
    181c:	f8df b2c8 	ldr.w	fp, [pc, #712]	; 1ae8 <USB_IRQHandler+0x5a0>
    1820:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 1aec <USB_IRQHandler+0x5a4>
    1824:	4fa2      	ldr	r7, [pc, #648]	; (1ab0 <USB_IRQHandler+0x568>)
  }

  for ( i = 0; i <= MAX_NUM_OUT_EPS; i++ ) {
    USB_DOUTEPS[i].INT = 0xFFFFFFFF;
    1826:	4ea3      	ldr	r6, [pc, #652]	; (1ab4 <USB_IRQHandler+0x56c>)
    1828:	4da3      	ldr	r5, [pc, #652]	; (1ab8 <USB_IRQHandler+0x570>)
    182a:	48a4      	ldr	r0, [pc, #656]	; (1abc <USB_IRQHandler+0x574>)
  USB->DCTL &= ~(DCTL_WO_BITMASK | USB_DCTL_RMTWKUPSIG);
  USBHAL_FlushTxFifo(0);

  /* Clear pending interrupts */
  for ( i = 0; i <= MAX_NUM_IN_EPS; i++ ) {
    USB_DINEPS[i].INT = 0xFFFFFFFF;
    182c:	f04f 32ff 	mov.w	r2, #4294967295
    1830:	f8cb 2008 	str.w	r2, [fp, #8]

  for ( i = 0; i <= MAX_NUM_OUT_EPS; i++ ) {
    USB_DOUTEPS[i].INT = 0xFFFFFFFF;
  }

  USB->DAINTMSK = USB_DAINTMSK_INEPMSK0 | USB_DAINTMSK_OUTEPMSK0;
    1834:	f5ae 7ed0 	sub.w	lr, lr, #416	; 0x1a0
  USB->DCTL &= ~(DCTL_WO_BITMASK | USB_DCTL_RMTWKUPSIG);
  USBHAL_FlushTxFifo(0);

  /* Clear pending interrupts */
  for ( i = 0; i <= MAX_NUM_IN_EPS; i++ ) {
    USB_DINEPS[i].INT = 0xFFFFFFFF;
    1838:	f8ca 2008 	str.w	r2, [sl, #8]
    183c:	f8c9 2008 	str.w	r2, [r9, #8]
    1840:	f8c8 2008 	str.w	r2, [r8, #8]
    1844:	f8cc 2008 	str.w	r2, [ip, #8]
    1848:	f8ce 21a8 	str.w	r2, [lr, #424]	; 0x1a8
    184c:	60ba      	str	r2, [r7, #8]
  }

  for ( i = 0; i <= MAX_NUM_OUT_EPS; i++ ) {
    USB_DOUTEPS[i].INT = 0xFFFFFFFF;
    184e:	60b2      	str	r2, [r6, #8]
  }

  USB->DAINTMSK = USB_DAINTMSK_INEPMSK0 | USB_DAINTMSK_OUTEPMSK0;
    1850:	f04f 1701 	mov.w	r7, #65537	; 0x10001
  for ( i = 0; i <= MAX_NUM_IN_EPS; i++ ) {
    USB_DINEPS[i].INT = 0xFFFFFFFF;
  }

  for ( i = 0; i <= MAX_NUM_OUT_EPS; i++ ) {
    USB_DOUTEPS[i].INT = 0xFFFFFFFF;
    1854:	60aa      	str	r2, [r5, #8]
  USB->DAINTMSK = USB_DAINTMSK_INEPMSK0 | USB_DAINTMSK_OUTEPMSK0;
#if defined(USB_DOEPMSK_STSPHSERCVDMSK)
  USB->DOEPMSK  = USB_DOEPMSK_SETUPMSK  | USB_DOEPMSK_XFERCOMPLMSK
                  | USB_DOEPMSK_STSPHSERCVDMSK;
#else
  USB->DOEPMSK  = USB_DOEPMSK_SETUPMSK  | USB_DOEPMSK_XFERCOMPLMSK;
    1856:	2609      	movs	r6, #9
#endif
  USB->DIEPMSK  = USB_DIEPMSK_XFERCOMPLMSK;
    1858:	2501      	movs	r5, #1
  for ( i = 0; i <= MAX_NUM_IN_EPS; i++ ) {
    USB_DINEPS[i].INT = 0xFFFFFFFF;
  }

  for ( i = 0; i <= MAX_NUM_OUT_EPS; i++ ) {
    USB_DOUTEPS[i].INT = 0xFFFFFFFF;
    185a:	6082      	str	r2, [r0, #8]
    185c:	6282      	str	r2, [r0, #40]	; 0x28
    185e:	f8c9 2248 	str.w	r2, [r9, #584]	; 0x248
    1862:	f8c8 2248 	str.w	r2, [r8, #584]	; 0x248
    1866:	f8cc 2248 	str.w	r2, [ip, #584]	; 0x248
  }

  USB->DAINTMSK = USB_DAINTMSK_INEPMSK0 | USB_DAINTMSK_OUTEPMSK0;
    186a:	f8ce 701c 	str.w	r7, [lr, #28]
#if defined(USB_DOEPMSK_STSPHSERCVDMSK)
  USB->DOEPMSK  = USB_DOEPMSK_SETUPMSK  | USB_DOEPMSK_XFERCOMPLMSK
                  | USB_DOEPMSK_STSPHSERCVDMSK;
#else
  USB->DOEPMSK  = USB_DOEPMSK_SETUPMSK  | USB_DOEPMSK_XFERCOMPLMSK;
    186e:	f8ce 6014 	str.w	r6, [lr, #20]
#endif
  USB->DIEPMSK  = USB_DIEPMSK_XFERCOMPLMSK;
    1872:	f8ce 5010 	str.w	r5, [lr, #16]

  /* Reset Device Address */
  USB->DCFG &= ~_USB_DCFG_DEVADDR_MASK;

  /* Setup EP0 to receive SETUP packets */
  USBDHAL_StartEp0Setup(dev);
    1876:	4d92      	ldr	r5, [pc, #584]	; (1ac0 <USB_IRQHandler+0x578>)
  USB->DOEPMSK  = USB_DOEPMSK_SETUPMSK  | USB_DOEPMSK_XFERCOMPLMSK;
#endif
  USB->DIEPMSK  = USB_DIEPMSK_XFERCOMPLMSK;

  /* Reset Device Address */
  USB->DCFG &= ~_USB_DCFG_DEVADDR_MASK;
    1878:	f8de 0000 	ldr.w	r0, [lr]

  /* Setup EP0 to receive SETUP packets */
  USBDHAL_StartEp0Setup(dev);
    187c:	682d      	ldr	r5, [r5, #0]
         | USB_GINTMSK_IEPINTMSK
         | USB_GINTMSK_OEPINTMSK
         | USB_GINTMSK_WKUPINTMSK;

  if ( dev->callbacks->sofInt ) {
    mask |= USB_GINTMSK_SOFMSK;
    187e:	4e91      	ldr	r6, [pc, #580]	; (1ac4 <USB_IRQHandler+0x57c>)
    1880:	6b2f      	ldr	r7, [r5, #48]	; 0x30
    1882:	f8df c244 	ldr.w	ip, [pc, #580]	; 1ac8 <USB_IRQHandler+0x580>
  USB->DOEPMSK  = USB_DOEPMSK_SETUPMSK  | USB_DOEPMSK_XFERCOMPLMSK;
#endif
  USB->DIEPMSK  = USB_DIEPMSK_XFERCOMPLMSK;

  /* Reset Device Address */
  USB->DCFG &= ~_USB_DCFG_DEVADDR_MASK;
    1886:	f420 60fe 	bic.w	r0, r0, #2032	; 0x7f0
    188a:	f8ce 0000 	str.w	r0, [lr]
#if defined(USB_DOEP0INT_STUPPKTRCVD)
  USB->DOEP0TSIZ = ((8 * 3) << _USB_DOEP0TSIZ_XFERSIZE_SHIFT)
                   | (1     << _USB_DOEP0TSIZ_PKTCNT_SHIFT)
                   | (3     << _USB_DOEP0TSIZ_SUPCNT_SHIFT);
#else
  USB->DOEP0TSIZ = 3 << _USB_DOEP0TSIZ_SUPCNT_SHIFT;
    188e:	f04f 48c0 	mov.w	r8, #1610612736	; 0x60000000
#endif

  dev->setup = dev->setupPkt;
    1892:	1d28      	adds	r0, r5, #4
                  | ep0mps;
}

__STATIC_INLINE void USBDHAL_StartEp0Setup(USBD_Device_TypeDef *dev)
{
  dev->ep[0].in = false;
    1894:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
#if defined(USB_DOEP0INT_STUPPKTRCVD)
  USB->DOEP0TSIZ = ((8 * 3) << _USB_DOEP0TSIZ_XFERSIZE_SHIFT)
                   | (1     << _USB_DOEP0TSIZ_PKTCNT_SHIFT)
                   | (3     << _USB_DOEP0TSIZ_SUPCNT_SHIFT);
#else
  USB->DOEP0TSIZ = 3 << _USB_DOEP0TSIZ_SUPCNT_SHIFT;
    1898:	f8ce 8310 	str.w	r8, [lr, #784]	; 0x310
#endif

  dev->setup = dev->setupPkt;
    189c:	6028      	str	r0, [r5, #0]
  USB->DOEP0DMAADDR = (uint32_t)dev->setup;
    189e:	f8ce 0314 	str.w	r0, [lr, #788]	; 0x314
#if defined(USB_DOEP0INT_STUPPKTRCVD)
  USB->DOEP0CTL = (USB->DOEP0CTL & ~DEPCTL_WO_BITMASK)
                  | USB_DOEP0CTL_EPENA
                  | dev->ep0MpsCode;
#else
  USB->DOEP0CTL = (USB->DOEP0CTL & ~DEPCTL_WO_BITMASK)
    18a2:	f8de 0300 	ldr.w	r0, [lr, #768]	; 0x300
    18a6:	f8d5 90cc 	ldr.w	r9, [r5, #204]	; 0xcc
         | USB_GINTMSK_ENUMDONEMSK
         | USB_GINTMSK_IEPINTMSK
         | USB_GINTMSK_OEPINTMSK
         | USB_GINTMSK_WKUPINTMSK;

  if ( dev->callbacks->sofInt ) {
    18aa:	f8d7 8010 	ldr.w	r8, [r7, #16]

  /* Setup EP0 to receive SETUP packets */
  USBDHAL_StartEp0Setup(dev);
  USBDHAL_EnableInts(dev);

  if ( dev->callbacks->usbReset ) {
    18ae:	683f      	ldr	r7, [r7, #0]
  USB->DOEP0CTL = (USB->DOEP0CTL & ~DEPCTL_WO_BITMASK)
                  | USB_DOEP0CTL_EPENA
                  | dev->ep0MpsCode;
#else
  USB->DOEP0CTL = (USB->DOEP0CTL & ~DEPCTL_WO_BITMASK)
                  | USB_DOEP0CTL_CNAK | USB_DOEP0CTL_EPENA
    18b0:	f020 453c 	bic.w	r5, r0, #3154116608	; 0xbc000000
    18b4:	f049 4004 	orr.w	r0, r9, #2214592512	; 0x84000000
                  | dev->ep0MpsCode;
    18b8:	4328      	orrs	r0, r5
         | USB_GINTMSK_IEPINTMSK
         | USB_GINTMSK_OEPINTMSK
         | USB_GINTMSK_WKUPINTMSK;

  if ( dev->callbacks->sofInt ) {
    mask |= USB_GINTMSK_SOFMSK;
    18ba:	f1b8 0f00 	cmp.w	r8, #0
    18be:	bf0c      	ite	eq
    18c0:	4635      	moveq	r5, r6
    18c2:	4665      	movne	r5, ip
#if defined(USB_DOEP0INT_STUPPKTRCVD)
  USB->DOEP0CTL = (USB->DOEP0CTL & ~DEPCTL_WO_BITMASK)
                  | USB_DOEP0CTL_EPENA
                  | dev->ep0MpsCode;
#else
  USB->DOEP0CTL = (USB->DOEP0CTL & ~DEPCTL_WO_BITMASK)
    18c4:	f8ce 0300 	str.w	r0, [lr, #768]	; 0x300
__STATIC_INLINE void USBDHAL_EnableInts(USBD_Device_TypeDef *dev)
{
  uint32_t mask;

  /* Disable all interrupts. */
  USB->GINTMSK = 0;
    18c8:	618b      	str	r3, [r1, #24]

  /* Clear pending interrupts */
  USB->GINTSTS = 0xFFFFFFFF;
    18ca:	614a      	str	r2, [r1, #20]

  if ( dev->callbacks->sofInt ) {
    mask |= USB_GINTMSK_SOFMSK;
  }

  USB->GINTMSK = mask;
    18cc:	618d      	str	r5, [r1, #24]
    18ce:	b107      	cbz	r7, 18d2 <USB_IRQHandler+0x38a>
    dev->callbacks->usbReset();
    18d0:	47b8      	blx	r7
  }

  USBD_SetUsbState(USBD_STATE_DEFAULT);
    18d2:	2003      	movs	r0, #3
    18d4:	f7fe fd46 	bl	364 <USBD_SetUsbState>
  USBDHAL_AbortAllTransfers(USB_STATUS_DEVICE_RESET);
    18d8:	f06f 000a 	mvn.w	r0, #10
    18dc:	f000 fb46 	bl	1f6c <USBDHAL_AbortAllTransfers>
  HANDLE_INT(USB_GINTSTS_RESETDET)
  HANDLE_INT(USB_GINTSTS_WKUPINT)
  HANDLE_INT(USB_GINTSTS_USBSUSP)
  HANDLE_INT(USB_GINTSTS_SOF)
  HANDLE_INT(USB_GINTSTS_ENUMDONE)
  HANDLE_INT(USB_GINTSTS_USBRST)
    18e0:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
    18e4:	e660      	b.n	15a8 <USB_IRQHandler+0x60>
 * Will prevent re-entry back to EM2.
 * Returns true if a powerup sequence was performed.
 */
static bool UsbPowerUp(void)
{
  if ( USBD_poweredDown ) {
    18e6:	782b      	ldrb	r3, [r5, #0]
    18e8:	2b00      	cmp	r3, #0
    18ea:	f040 809f 	bne.w	1a2c <USB_IRQHandler+0x4e4>
  USB->GINTMSK = USB_GINTMSK_USBRSTMSK | USB_GINTMSK_USBSUSPMSK;
}

__STATIC_INLINE void USBDHAL_Ep0Activate(uint32_t ep0mps)
{
  USB->DCTL = (USB->DCTL & ~DCTL_WO_BITMASK) | USB_DCTL_CGNPINNAK;
    18ee:	496d      	ldr	r1, [pc, #436]	; (1aa4 <USB_IRQHandler+0x55c>)
{
#if ( USB_PWRSAVE_MODE )
  UsbPowerUp();
#endif

  USBDHAL_Ep0Activate(dev->ep0MpsCode);
    18f0:	4b73      	ldr	r3, [pc, #460]	; (1ac0 <USB_IRQHandler+0x578>)
    18f2:	684a      	ldr	r2, [r1, #4]
    18f4:	681e      	ldr	r6, [r3, #0]
         | USB_GINTMSK_IEPINTMSK
         | USB_GINTMSK_OEPINTMSK
         | USB_GINTMSK_WKUPINTMSK;

  if ( dev->callbacks->sofInt ) {
    mask |= USB_GINTMSK_SOFMSK;
    18f6:	4d73      	ldr	r5, [pc, #460]	; (1ac4 <USB_IRQHandler+0x57c>)
    18f8:	6b30      	ldr	r0, [r6, #48]	; 0x30
    18fa:	f8d6 c0cc 	ldr.w	ip, [r6, #204]	; 0xcc
         | USB_GINTMSK_ENUMDONEMSK
         | USB_GINTMSK_IEPINTMSK
         | USB_GINTMSK_OEPINTMSK
         | USB_GINTMSK_WKUPINTMSK;

  if ( dev->callbacks->sofInt ) {
    18fe:	f8d0 e010 	ldr.w	lr, [r0, #16]
    mask |= USB_GINTMSK_SOFMSK;
    1902:	4f71      	ldr	r7, [pc, #452]	; (1ac8 <USB_IRQHandler+0x580>)
__STATIC_INLINE void USBDHAL_EnableInts(USBD_Device_TypeDef *dev)
{
  uint32_t mask;

  /* Disable all interrupts. */
  USB->GINTMSK = 0;
    1904:	4868      	ldr	r0, [pc, #416]	; (1aa8 <USB_IRQHandler+0x560>)
  USB->GINTMSK = USB_GINTMSK_USBRSTMSK | USB_GINTMSK_USBSUSPMSK;
}

__STATIC_INLINE void USBDHAL_Ep0Activate(uint32_t ep0mps)
{
  USB->DCTL = (USB->DCTL & ~DCTL_WO_BITMASK) | USB_DCTL_CGNPINNAK;
    1906:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
    190a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    190e:	604a      	str	r2, [r1, #4]

  USB->DOEP0CTL = (USB->DOEP0CTL & ~DEPCTL_WO_BITMASK)
    1910:	f8d1 3300 	ldr.w	r3, [r1, #768]	; 0x300
    1914:	f04c 4204 	orr.w	r2, ip, #2214592512	; 0x84000000
                  | USB_DOEP0CTL_CNAK | USB_DOEP0CTL_EPENA
    1918:	f023 433c 	bic.w	r3, r3, #3154116608	; 0xbc000000
                  | ep0mps;
    191c:	4313      	orrs	r3, r2
         | USB_GINTMSK_IEPINTMSK
         | USB_GINTMSK_OEPINTMSK
         | USB_GINTMSK_WKUPINTMSK;

  if ( dev->callbacks->sofInt ) {
    mask |= USB_GINTMSK_SOFMSK;
    191e:	f1be 0f00 	cmp.w	lr, #0
    1922:	bf0c      	ite	eq
    1924:	462a      	moveq	r2, r5
    1926:	463a      	movne	r2, r7
  dev->ep[0].state = D_EP_IDLE;
    1928:	2500      	movs	r5, #0

  /* Disable all interrupts. */
  USB->GINTMSK = 0;

  /* Clear pending interrupts */
  USB->GINTSTS = 0xFFFFFFFF;
    192a:	f04f 37ff 	mov.w	r7, #4294967295

__STATIC_INLINE void USBDHAL_Ep0Activate(uint32_t ep0mps)
{
  USB->DCTL = (USB->DCTL & ~DCTL_WO_BITMASK) | USB_DCTL_CGNPINNAK;

  USB->DOEP0CTL = (USB->DOEP0CTL & ~DEPCTL_WO_BITMASK)
    192e:	f8c1 3300 	str.w	r3, [r1, #768]	; 0x300

  HANDLE_INT(USB_GINTSTS_RESETDET)
  HANDLE_INT(USB_GINTSTS_WKUPINT)
  HANDLE_INT(USB_GINTSTS_USBSUSP)
  HANDLE_INT(USB_GINTSTS_SOF)
  HANDLE_INT(USB_GINTSTS_ENUMDONE)
    1932:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
#if ( USB_PWRSAVE_MODE )
  UsbPowerUp();
#endif

  USBDHAL_Ep0Activate(dev->ep0MpsCode);
  dev->ep[0].state = D_EP_IDLE;
    1936:	f886 5054 	strb.w	r5, [r6, #84]	; 0x54
__STATIC_INLINE void USBDHAL_EnableInts(USBD_Device_TypeDef *dev)
{
  uint32_t mask;

  /* Disable all interrupts. */
  USB->GINTMSK = 0;
    193a:	6185      	str	r5, [r0, #24]

  /* Clear pending interrupts */
  USB->GINTSTS = 0xFFFFFFFF;
    193c:	6147      	str	r7, [r0, #20]

  if ( dev->callbacks->sofInt ) {
    mask |= USB_GINTMSK_SOFMSK;
  }

  USB->GINTMSK = mask;
    193e:	6182      	str	r2, [r0, #24]
    1940:	e62f      	b.n	15a2 <USB_IRQHandler+0x5a>
 */
static void Handle_USB_GINTSTS_SOF(void)
{
  USB->GINTSTS = USB_GINTSTS_SOF;

  if ( dev->callbacks->sofInt ) {
    1942:	4b5f      	ldr	r3, [pc, #380]	; (1ac0 <USB_IRQHandler+0x578>)
/*
 * Handle Start Of Frame (SOF) interrupt.
 */
static void Handle_USB_GINTSTS_SOF(void)
{
  USB->GINTSTS = USB_GINTSTS_SOF;
    1944:	4a58      	ldr	r2, [pc, #352]	; (1aa8 <USB_IRQHandler+0x560>)

  if ( dev->callbacks->sofInt ) {
    1946:	681b      	ldr	r3, [r3, #0]
    1948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    194a:	691b      	ldr	r3, [r3, #16]
/*
 * Handle Start Of Frame (SOF) interrupt.
 */
static void Handle_USB_GINTSTS_SOF(void)
{
  USB->GINTSTS = USB_GINTSTS_SOF;
    194c:	2108      	movs	r1, #8
    194e:	6151      	str	r1, [r2, #20]

  if ( dev->callbacks->sofInt ) {
    1950:	b123      	cbz	r3, 195c <USB_IRQHandler+0x414>
    dev->callbacks->sofInt(
      (USB->DSTS & _USB_DSTS_SOFFN_MASK) >> _USB_DSTS_SOFFN_SHIFT);
    1952:	f8d2 0808 	ldr.w	r0, [r2, #2056]	; 0x808
static void Handle_USB_GINTSTS_SOF(void)
{
  USB->GINTSTS = USB_GINTSTS_SOF;

  if ( dev->callbacks->sofInt ) {
    dev->callbacks->sofInt(
    1956:	f3c0 200d 	ubfx	r0, r0, #8, #14
    195a:	4798      	blx	r3
  }

  HANDLE_INT(USB_GINTSTS_RESETDET)
  HANDLE_INT(USB_GINTSTS_WKUPINT)
  HANDLE_INT(USB_GINTSTS_USBSUSP)
  HANDLE_INT(USB_GINTSTS_SOF)
    195c:	f024 0408 	bic.w	r4, r4, #8
    1960:	e61c      	b.n	159c <USB_IRQHandler+0x54>
 */
static void Handle_USB_GINTSTS_USBSUSP(void)
{
  USBD_State_TypeDef state;

  USB->GINTSTS = USB_GINTSTS_USBSUSP;
    1962:	4b51      	ldr	r3, [pc, #324]	; (1aa8 <USB_IRQHandler+0x560>)
    1964:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1968:	615a      	str	r2, [r3, #20]
  USBDHAL_AbortAllTransfers(USB_STATUS_DEVICE_SUSPENDED);
    196a:	f06f 0009 	mvn.w	r0, #9
    196e:	f000 fafd 	bl	1f6c <USBDHAL_AbortAllTransfers>
  DEBUG_USB_INT_LO_PUTS("\nSusP");

  if ( USBD_GetUsbState() == USBD_STATE_NONE ) {
    1972:	f7fe fc1d 	bl	1b0 <USBD_GetUsbState>
    1976:	2800      	cmp	r0, #0
    1978:	d068      	beq.n	1a4c <USB_IRQHandler+0x504>
    USBD_SetUsbState(USBD_STATE_POWERED);
  }

  state = USBD_GetUsbState();
    197a:	f7fe fc19 	bl	1b0 <USBD_GetUsbState>
  if ( (state    == USBD_STATE_POWERED)
       || (state == USBD_STATE_DEFAULT)
       || (state == USBD_STATE_ADDRESSED)
       || (state == USBD_STATE_CONFIGURED)) {
    197e:	3802      	subs	r0, #2
  if ( USBD_GetUsbState() == USBD_STATE_NONE ) {
    USBD_SetUsbState(USBD_STATE_POWERED);
  }

  state = USBD_GetUsbState();
  if ( (state    == USBD_STATE_POWERED)
    1980:	b2c0      	uxtb	r0, r0
    1982:	2803      	cmp	r0, #3
    1984:	d806      	bhi.n	1994 <USB_IRQHandler+0x44c>
#if (NUM_EP_USED > 0)
  int epNum;
  USBD_Ep_TypeDef *ep;
#endif

  if ( !USBD_poweredDown ) {
    1986:	782b      	ldrb	r3, [r5, #0]
    1988:	2b00      	cmp	r3, #0
    198a:	f000 8087 	beq.w	1a9c <USB_IRQHandler+0x554>
       || (state == USBD_STATE_ADDRESSED)
       || (state == USBD_STATE_CONFIGURED)) {
#if ( USB_PWRSAVE_MODE )
    UsbPowerDown();
#endif
    USBD_SetUsbState(USBD_STATE_SUSPENDED);
    198e:	2006      	movs	r0, #6
    1990:	f7fe fce8 	bl	364 <USBD_SetUsbState>
    return;
  }

  HANDLE_INT(USB_GINTSTS_RESETDET)
  HANDLE_INT(USB_GINTSTS_WKUPINT)
  HANDLE_INT(USB_GINTSTS_USBSUSP)
    1994:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
    1998:	e5fd      	b.n	1596 <USB_IRQHandler+0x4e>
 * Handle USB reset detected interrupt in suspend mode.
 */
static void Handle_USB_GINTSTS_RESETDET(void)
{
#if (USB_PWRSAVE_MODE)
  if ( !USBD_poweredDown ) {
    199a:	782a      	ldrb	r2, [r5, #0]
    199c:	b912      	cbnz	r2, 19a4 <USB_IRQHandler+0x45c>
    USB->GINTSTS = USB_GINTSTS_RESETDET;
    199e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    19a2:	615a      	str	r2, [r3, #20]
 * Will prevent re-entry back to EM2.
 * Returns true if a powerup sequence was performed.
 */
static bool UsbPowerUp(void)
{
  if ( USBD_poweredDown ) {
    19a4:	782b      	ldrb	r3, [r5, #0]
    19a6:	2b00      	cmp	r3, #0
    19a8:	d143      	bne.n	1a32 <USB_IRQHandler+0x4ea>
    USB->GINTSTS = USB_GINTSTS_RESETDET;
  }

#if (USB_PWRSAVE_MODE & USB_PWRSAVE_MODE_ONVBUSOFF)
  /* Power down immediately if VBUS is off. */
  if ( !(USB->STATUS & USB_STATUS_VREGOS) ) {
    19aa:	4b48      	ldr	r3, [pc, #288]	; (1acc <USB_IRQHandler+0x584>)
    19ac:	685b      	ldr	r3, [r3, #4]
    19ae:	07da      	lsls	r2, r3, #31
    19b0:	d402      	bmi.n	19b8 <USB_IRQHandler+0x470>
#if (NUM_EP_USED > 0)
  int epNum;
  USBD_Ep_TypeDef *ep;
#endif

  if ( !USBD_poweredDown ) {
    19b2:	782b      	ldrb	r3, [r5, #0]
    19b4:	2b00      	cmp	r3, #0
    19b6:	d051      	beq.n	1a5c <USB_IRQHandler+0x514>

#else
  USB->GINTSTS = USB_GINTSTS_RESETDET;
#endif /* if ( USB_PWRSAVE_MODE ) */

  if ( USB->STATUS & USB_STATUS_VREGOS ) {
    19b8:	4b44      	ldr	r3, [pc, #272]	; (1acc <USB_IRQHandler+0x584>)
    19ba:	6858      	ldr	r0, [r3, #4]
    19bc:	f010 0001 	ands.w	r0, r0, #1
    USBD_SetUsbState(USBD_STATE_DEFAULT);
    19c0:	bf18      	it	ne
    19c2:	2003      	movne	r0, #3
      DEBUG_USB_INT_LO_PUTS("\nSinT");
    }
    return;
  }

  HANDLE_INT(USB_GINTSTS_RESETDET)
    19c4:	f424 0400 	bic.w	r4, r4, #8388608	; 0x800000
#endif /* if ( USB_PWRSAVE_MODE ) */

  if ( USB->STATUS & USB_STATUS_VREGOS ) {
    USBD_SetUsbState(USBD_STATE_DEFAULT);
  } else {
    USBD_SetUsbState(USBD_STATE_NONE);
    19c8:	f7fe fccc 	bl	364 <USBD_SetUsbState>
    }
    return;
  }

  HANDLE_INT(USB_GINTSTS_RESETDET)
  HANDLE_INT(USB_GINTSTS_WKUPINT)
    19cc:	2c00      	cmp	r4, #0
    19ce:	f6bf addf 	bge.w	1590 <USB_IRQHandler+0x48>
 * Handle USB port wakeup interrupt.
 */
static void Handle_USB_GINTSTS_WKUPINT(void)
{
#if (USB_PWRSAVE_MODE)
  if ( !USBD_poweredDown ) {
    19d2:	782b      	ldrb	r3, [r5, #0]
    19d4:	b91b      	cbnz	r3, 19de <USB_IRQHandler+0x496>
    USB->GINTSTS = USB_GINTSTS_WKUPINT;
    19d6:	4b34      	ldr	r3, [pc, #208]	; (1aa8 <USB_IRQHandler+0x560>)
    19d8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    19dc:	615a      	str	r2, [r3, #20]
 * Will prevent re-entry back to EM2.
 * Returns true if a powerup sequence was performed.
 */
static bool UsbPowerUp(void)
{
  if ( USBD_poweredDown ) {
    19de:	782b      	ldrb	r3, [r5, #0]
    19e0:	2b00      	cmp	r3, #0
    19e2:	f040 8085 	bne.w	1af0 <USB_IRQHandler+0x5a8>
    19e6:	4b36      	ldr	r3, [pc, #216]	; (1ac0 <USB_IRQHandler+0x578>)
    19e8:	681a      	ldr	r2, [r3, #0]
  }
#else
  USB->GINTSTS = USB_GINTSTS_WKUPINT;
#endif

  USBD_SetUsbState(dev->savedState);
    19ea:	f892 0021 	ldrb.w	r0, [r2, #33]	; 0x21
    19ee:	f7fe fcb9 	bl	364 <USBD_SetUsbState>
    }
    return;
  }

  HANDLE_INT(USB_GINTSTS_RESETDET)
  HANDLE_INT(USB_GINTSTS_WKUPINT)
    19f2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
    19f6:	e5cb      	b.n	1590 <USB_IRQHandler+0x48>
static void ProcessSetup(void)
{
  DEBUG_USB_INT_LO_PUTS("\nS");

  if ( USB->DOEP0INT & USB_DOEP0INT_BACK2BACKSETUP ) { /* Back to back setup packets received */
    USB->DOEP0INT = USB_DOEP0INT_BACK2BACKSETUP;
    19f8:	4a35      	ldr	r2, [pc, #212]	; (1ad0 <USB_IRQHandler+0x588>)
    DEBUG_USB_INT_LO_PUTS("B2B");

    dev->setup = (USB_Setup_TypeDef*)(USB->DOEP0DMAADDR - USB_SETUP_PKT_SIZE);
    19fa:	f8d9 0000 	ldr.w	r0, [r9]
static void ProcessSetup(void)
{
  DEBUG_USB_INT_LO_PUTS("\nS");

  if ( USB->DOEP0INT & USB_DOEP0INT_BACK2BACKSETUP ) { /* Back to back setup packets received */
    USB->DOEP0INT = USB_DOEP0INT_BACK2BACKSETUP;
    19fe:	2340      	movs	r3, #64	; 0x40
    1a00:	6013      	str	r3, [r2, #0]
    DEBUG_USB_INT_LO_PUTS("B2B");

    dev->setup = (USB_Setup_TypeDef*)(USB->DOEP0DMAADDR - USB_SETUP_PKT_SIZE);
    1a02:	4b34      	ldr	r3, [pc, #208]	; (1ad4 <USB_IRQHandler+0x58c>)
    1a04:	681b      	ldr	r3, [r3, #0]
    1a06:	3b08      	subs	r3, #8
    1a08:	6003      	str	r3, [r0, #0]
    1a0a:	e659      	b.n	16c0 <USB_IRQHandler+0x178>
      ep->remaining = 0;
    }
    USBDEP_Ep0Handler(dev);
  } else {
    ep->xferred = ep->hwXferSize
                  - ( (USB_DOUTEPS[ep->num].TSIZ & _USB_DOEP_TSIZ_XFERSIZE_MASK)
    1a0c:	4829      	ldr	r0, [pc, #164]	; (1ab4 <USB_IRQHandler+0x56c>)
    1a0e:	699a      	ldr	r2, [r3, #24]
    1a10:	0149      	lsls	r1, r1, #5
    1a12:	4408      	add	r0, r1
                      >> _USB_DOEP_TSIZ_XFERSIZE_SHIFT);
    ep->remaining -= ep->xferred;
    1a14:	6919      	ldr	r1, [r3, #16]
      ep->remaining = 0;
    }
    USBDEP_Ep0Handler(dev);
  } else {
    ep->xferred = ep->hwXferSize
                  - ( (USB_DOUTEPS[ep->num].TSIZ & _USB_DOEP_TSIZ_XFERSIZE_MASK)
    1a16:	6900      	ldr	r0, [r0, #16]
                      >> _USB_DOEP_TSIZ_XFERSIZE_SHIFT);
    1a18:	f3c0 0012 	ubfx	r0, r0, #0, #19
      ep->remaining = 0;
    }
    USBDEP_Ep0Handler(dev);
  } else {
    ep->xferred = ep->hwXferSize
                  - ( (USB_DOUTEPS[ep->num].TSIZ & _USB_DOEP_TSIZ_XFERSIZE_MASK)
    1a1c:	1a12      	subs	r2, r2, r0
                      >> _USB_DOEP_TSIZ_XFERSIZE_SHIFT);
    ep->remaining -= ep->xferred;
    1a1e:	1a89      	subs	r1, r1, r2
      ep->xferred += ep->remaining;
      ep->remaining = 0;
    }
    USBDEP_Ep0Handler(dev);
  } else {
    ep->xferred = ep->hwXferSize
    1a20:	615a      	str	r2, [r3, #20]
                  - ( (USB_DOUTEPS[ep->num].TSIZ & _USB_DOEP_TSIZ_XFERSIZE_MASK)
                      >> _USB_DOEP_TSIZ_XFERSIZE_SHIFT);
    ep->remaining -= ep->xferred;
    1a22:	6119      	str	r1, [r3, #16]
    USBDEP_EpHandler(ep->addr);
    1a24:	78d8      	ldrb	r0, [r3, #3]
    1a26:	f7ff fba7 	bl	1178 <USBDEP_EpHandler>
    1a2a:	e61a      	b.n	1662 <USB_IRQHandler+0x11a>
    1a2c:	f7ff fd0c 	bl	1448 <UsbPowerUp.part.5>
    1a30:	e75d      	b.n	18ee <USB_IRQHandler+0x3a6>
    1a32:	f7ff fd09 	bl	1448 <UsbPowerUp.part.5>
#if (USB_PWRSAVE_MODE)
  if ( !USBD_poweredDown ) {
    USB->GINTSTS = USB_GINTSTS_RESETDET;
  }

  if ( UsbPowerUp() ) {
    1a36:	2800      	cmp	r0, #0
    1a38:	d0b7      	beq.n	19aa <USB_IRQHandler+0x462>
    USB->GINTSTS = USB_GINTSTS_RESETDET;
    1a3a:	4b1b      	ldr	r3, [pc, #108]	; (1aa8 <USB_IRQHandler+0x560>)
    1a3c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    1a40:	615a      	str	r2, [r3, #20]
  }

#if (USB_PWRSAVE_MODE & USB_PWRSAVE_MODE_ONVBUSOFF)
  /* Power down immediately if VBUS is off. */
  if ( !(USB->STATUS & USB_STATUS_VREGOS) ) {
    1a42:	4b22      	ldr	r3, [pc, #136]	; (1acc <USB_IRQHandler+0x584>)
    1a44:	685b      	ldr	r3, [r3, #4]
    1a46:	07da      	lsls	r2, r3, #31
    1a48:	d4b6      	bmi.n	19b8 <USB_IRQHandler+0x470>
    1a4a:	e7b2      	b.n	19b2 <USB_IRQHandler+0x46a>
  USB->GINTSTS = USB_GINTSTS_USBSUSP;
  USBDHAL_AbortAllTransfers(USB_STATUS_DEVICE_SUSPENDED);
  DEBUG_USB_INT_LO_PUTS("\nSusP");

  if ( USBD_GetUsbState() == USBD_STATE_NONE ) {
    USBD_SetUsbState(USBD_STATE_POWERED);
    1a4c:	2002      	movs	r0, #2
    1a4e:	f7fe fc89 	bl	364 <USBD_SetUsbState>
    1a52:	e792      	b.n	197a <USB_IRQHandler+0x432>
    if ( ep->remaining > ep->packetSize ) {
      ep->remaining -= ep->packetSize;
      ep->xferred += ep->packetSize;
    } else {
      ep->xferred += ep->remaining;
      ep->remaining = 0;
    1a54:	468e      	mov	lr, r1
  if ( ep->num == 0 ) {
    if ( ep->remaining > ep->packetSize ) {
      ep->remaining -= ep->packetSize;
      ep->xferred += ep->packetSize;
    } else {
      ep->xferred += ep->remaining;
    1a56:	6959      	ldr	r1, [r3, #20]
    1a58:	440a      	add	r2, r1
    1a5a:	e650      	b.n	16fe <USB_IRQHandler+0x1b6>
    1a5c:	f7ff fc22 	bl	12a4 <UsbPowerDown.part.4>
    1a60:	e7aa      	b.n	19b8 <USB_IRQHandler+0x470>

  DEBUG_USB_INT_HI_PUTCHAR('i');

  // If we came here from suspended state, set correct state
  if (USBD_GetUsbState() == USBD_STATE_SUSPENDED) {
    USBD_SetUsbState(dev->savedState);
    1a62:	4b17      	ldr	r3, [pc, #92]	; (1ac0 <USB_IRQHandler+0x578>)
    1a64:	681b      	ldr	r3, [r3, #0]
    1a66:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
    1a6a:	f7fe fc7b 	bl	364 <USBD_SetUsbState>
    1a6e:	e651      	b.n	1714 <USB_IRQHandler+0x1cc>

  DEBUG_USB_INT_HI_PUTCHAR('o');

  // If we came here from suspended state, set correct state
  if (USBD_GetUsbState() == USBD_STATE_SUSPENDED) {
    USBD_SetUsbState(dev->savedState);
    1a70:	4b13      	ldr	r3, [pc, #76]	; (1ac0 <USB_IRQHandler+0x578>)
    1a72:	681b      	ldr	r3, [r3, #0]
    1a74:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
    1a78:	f7fe fc74 	bl	364 <USBD_SetUsbState>
    1a7c:	e5d3      	b.n	1626 <USB_IRQHandler+0xde>
    1a7e:	f7ff fce3 	bl	1448 <UsbPowerUp.part.5>
      if ( USB->STATUS & USB_STATUS_VREGOS ) {
        servedVbusInterrupt = true;
        DEBUG_USB_INT_LO_PUTS("\nVboN");

#if (USB_PWRSAVE_MODE)
        if ( UsbPowerUp() ) {
    1a82:	2800      	cmp	r0, #0
    1a84:	f43f ada7 	beq.w	15d6 <USB_IRQHandler+0x8e>
}

__STATIC_INLINE void USBDHAL_EnableUsbResetAndSuspendInt(void)
{
  /* Disable all interrupts. */
  USB->GINTMSK = 0;
    1a88:	4b07      	ldr	r3, [pc, #28]	; (1aa8 <USB_IRQHandler+0x560>)
    1a8a:	2100      	movs	r1, #0

  USB->GINTMSK = USB_GINTMSK_USBRSTMSK | USB_GINTMSK_USBSUSPMSK;
    1a8c:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
}

__STATIC_INLINE void USBDHAL_EnableUsbResetAndSuspendInt(void)
{
  /* Disable all interrupts. */
  USB->GINTMSK = 0;
    1a90:	6199      	str	r1, [r3, #24]

  USB->GINTMSK = USB_GINTMSK_USBRSTMSK | USB_GINTMSK_USBSUSPMSK;
    1a92:	619a      	str	r2, [r3, #24]
    1a94:	e59f      	b.n	15d6 <USB_IRQHandler+0x8e>
    1a96:	f7ff fc05 	bl	12a4 <UsbPowerDown.part.4>
    1a9a:	e5b5      	b.n	1608 <USB_IRQHandler+0xc0>
    1a9c:	f7ff fc02 	bl	12a4 <UsbPowerDown.part.4>
    1aa0:	e775      	b.n	198e <USB_IRQHandler+0x446>
    1aa2:	bf00      	nop
    1aa4:	40100800 	.word	0x40100800
    1aa8:	40100000 	.word	0x40100000
    1aac:	40100010 	.word	0x40100010
    1ab0:	401009c0 	.word	0x401009c0
    1ab4:	40100b00 	.word	0x40100b00
    1ab8:	40100b20 	.word	0x40100b20
    1abc:	40100b40 	.word	0x40100b40
    1ac0:	20000000 	.word	0x20000000
    1ac4:	800c3800 	.word	0x800c3800
    1ac8:	800c3808 	.word	0x800c3808
    1acc:	400c4000 	.word	0x400c4000
    1ad0:	40100b08 	.word	0x40100b08
    1ad4:	40100b14 	.word	0x40100b14
    1ad8:	401009a0 	.word	0x401009a0
    1adc:	40100940 	.word	0x40100940
    1ae0:	40100960 	.word	0x40100960
    1ae4:	40100980 	.word	0x40100980
    1ae8:	40100900 	.word	0x40100900
    1aec:	40100920 	.word	0x40100920
    1af0:	f7ff fcaa 	bl	1448 <UsbPowerUp.part.5>
#if (USB_PWRSAVE_MODE)
  if ( !USBD_poweredDown ) {
    USB->GINTSTS = USB_GINTSTS_WKUPINT;
  }

  if ( UsbPowerUp() ) {
    1af4:	2800      	cmp	r0, #0
    1af6:	f43f af76 	beq.w	19e6 <USB_IRQHandler+0x49e>
    USB->GINTSTS = USB_GINTSTS_WKUPINT;
    USBDHAL_StartEp0Setup(dev);
    1afa:	4a1e      	ldr	r2, [pc, #120]	; (1b74 <USB_IRQHandler+0x62c>)
  if ( !USBD_poweredDown ) {
    USB->GINTSTS = USB_GINTSTS_WKUPINT;
  }

  if ( UsbPowerUp() ) {
    USB->GINTSTS = USB_GINTSTS_WKUPINT;
    1afc:	491e      	ldr	r1, [pc, #120]	; (1b78 <USB_IRQHandler+0x630>)
    USBDHAL_StartEp0Setup(dev);
    1afe:	6812      	ldr	r2, [r2, #0]
#if defined(USB_DOEP0INT_STUPPKTRCVD)
  USB->DOEP0TSIZ = ((8 * 3) << _USB_DOEP0TSIZ_XFERSIZE_SHIFT)
                   | (1     << _USB_DOEP0TSIZ_PKTCNT_SHIFT)
                   | (3     << _USB_DOEP0TSIZ_SUPCNT_SHIFT);
#else
  USB->DOEP0TSIZ = 3 << _USB_DOEP0TSIZ_SUPCNT_SHIFT;
    1b00:	4b1e      	ldr	r3, [pc, #120]	; (1b7c <USB_IRQHandler+0x634>)
  if ( !USBD_poweredDown ) {
    USB->GINTSTS = USB_GINTSTS_WKUPINT;
  }

  if ( UsbPowerUp() ) {
    USB->GINTSTS = USB_GINTSTS_WKUPINT;
    1b02:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    1b06:	6148      	str	r0, [r1, #20]
                  | ep0mps;
}

__STATIC_INLINE void USBDHAL_StartEp0Setup(USBD_Device_TypeDef *dev)
{
  dev->ep[0].in = false;
    1b08:	2600      	movs	r6, #0
                   | (3     << _USB_DOEP0TSIZ_SUPCNT_SHIFT);
#else
  USB->DOEP0TSIZ = 3 << _USB_DOEP0TSIZ_SUPCNT_SHIFT;
#endif

  dev->setup = dev->setupPkt;
    1b0a:	1d11      	adds	r1, r2, #4
#if defined(USB_DOEP0INT_STUPPKTRCVD)
  USB->DOEP0TSIZ = ((8 * 3) << _USB_DOEP0TSIZ_XFERSIZE_SHIFT)
                   | (1     << _USB_DOEP0TSIZ_PKTCNT_SHIFT)
                   | (3     << _USB_DOEP0TSIZ_SUPCNT_SHIFT);
#else
  USB->DOEP0TSIZ = 3 << _USB_DOEP0TSIZ_SUPCNT_SHIFT;
    1b0c:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
                  | ep0mps;
}

__STATIC_INLINE void USBDHAL_StartEp0Setup(USBD_Device_TypeDef *dev)
{
  dev->ep[0].in = false;
    1b10:	f882 6034 	strb.w	r6, [r2, #52]	; 0x34
#if defined(USB_DOEP0INT_STUPPKTRCVD)
  USB->DOEP0TSIZ = ((8 * 3) << _USB_DOEP0TSIZ_XFERSIZE_SHIFT)
                   | (1     << _USB_DOEP0TSIZ_PKTCNT_SHIFT)
                   | (3     << _USB_DOEP0TSIZ_SUPCNT_SHIFT);
#else
  USB->DOEP0TSIZ = 3 << _USB_DOEP0TSIZ_SUPCNT_SHIFT;
    1b14:	f8c3 0310 	str.w	r0, [r3, #784]	; 0x310
#endif

  dev->setup = dev->setupPkt;
    1b18:	6011      	str	r1, [r2, #0]
  USB->DOEP0DMAADDR = (uint32_t)dev->setup;
    1b1a:	f8c3 1314 	str.w	r1, [r3, #788]	; 0x314
#if defined(USB_DOEP0INT_STUPPKTRCVD)
  USB->DOEP0CTL = (USB->DOEP0CTL & ~DEPCTL_WO_BITMASK)
                  | USB_DOEP0CTL_EPENA
                  | dev->ep0MpsCode;
#else
  USB->DOEP0CTL = (USB->DOEP0CTL & ~DEPCTL_WO_BITMASK)
    1b1e:	f8d3 0300 	ldr.w	r0, [r3, #768]	; 0x300
    1b22:	f8d2 10cc 	ldr.w	r1, [r2, #204]	; 0xcc
                  | USB_DOEP0CTL_CNAK | USB_DOEP0CTL_EPENA
    1b26:	f020 403c 	bic.w	r0, r0, #3154116608	; 0xbc000000
    1b2a:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
                  | dev->ep0MpsCode;
    1b2e:	4308      	orrs	r0, r1
#if defined(USB_DOEP0INT_STUPPKTRCVD)
  USB->DOEP0CTL = (USB->DOEP0CTL & ~DEPCTL_WO_BITMASK)
                  | USB_DOEP0CTL_EPENA
                  | dev->ep0MpsCode;
#else
  USB->DOEP0CTL = (USB->DOEP0CTL & ~DEPCTL_WO_BITMASK)
    1b30:	f8c3 0300 	str.w	r0, [r3, #768]	; 0x300
  USB->GINTMSK = USB_GINTMSK_USBRSTMSK | USB_GINTMSK_USBSUSPMSK;
}

__STATIC_INLINE void USBDHAL_Ep0Activate(uint32_t ep0mps)
{
  USB->DCTL = (USB->DCTL & ~DCTL_WO_BITMASK) | USB_DCTL_CGNPINNAK;
    1b34:	6858      	ldr	r0, [r3, #4]
    1b36:	f420 60f0 	bic.w	r0, r0, #1920	; 0x780
    1b3a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    1b3e:	6058      	str	r0, [r3, #4]

  USB->DOEP0CTL = (USB->DOEP0CTL & ~DEPCTL_WO_BITMASK)
    1b40:	f8d3 0300 	ldr.w	r0, [r3, #768]	; 0x300
                  | USB_DOEP0CTL_CNAK | USB_DOEP0CTL_EPENA
    1b44:	f020 403c 	bic.w	r0, r0, #3154116608	; 0xbc000000
                  | ep0mps;
    1b48:	4301      	orrs	r1, r0

__STATIC_INLINE void USBDHAL_Ep0Activate(uint32_t ep0mps)
{
  USB->DCTL = (USB->DCTL & ~DCTL_WO_BITMASK) | USB_DCTL_CGNPINNAK;

  USB->DOEP0CTL = (USB->DOEP0CTL & ~DEPCTL_WO_BITMASK)
    1b4a:	f8c3 1300 	str.w	r1, [r3, #768]	; 0x300
    1b4e:	e74c      	b.n	19ea <USB_IRQHandler+0x4a2>
        USB_DINEPS[epnum].INT = USB_DIEP_INT_XFERCOMPL;

        DEBUG_USB_INT_HI_PUTCHAR('c');

        if ( epnum == 0 ) {
          if ( ep->remaining > ep->packetSize ) {
    1b50:	6919      	ldr	r1, [r3, #16]
    1b52:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
            ep->remaining -= ep->packetSize;
            ep->xferred += ep->packetSize;
    1b56:	695a      	ldr	r2, [r3, #20]
        USB_DINEPS[epnum].INT = USB_DIEP_INT_XFERCOMPL;

        DEBUG_USB_INT_HI_PUTCHAR('c');

        if ( epnum == 0 ) {
          if ( ep->remaining > ep->packetSize ) {
    1b58:	4571      	cmp	r1, lr
            ep->remaining -= ep->packetSize;
            ep->xferred += ep->packetSize;
          } else {
            ep->xferred += ep->remaining;
    1b5a:	bf93      	iteet	ls
    1b5c:	1852      	addls	r2, r2, r1

        DEBUG_USB_INT_HI_PUTCHAR('c');

        if ( epnum == 0 ) {
          if ( ep->remaining > ep->packetSize ) {
            ep->remaining -= ep->packetSize;
    1b5e:	ebce 0101 	rsbhi	r1, lr, r1
            ep->xferred += ep->packetSize;
    1b62:	4472      	addhi	r2, lr
          } else {
            ep->xferred += ep->remaining;
            ep->remaining = 0;
    1b64:	4639      	movls	r1, r7
    1b66:	615a      	str	r2, [r3, #20]
    1b68:	6119      	str	r1, [r3, #16]
  }

  epint = USBDHAL_GetAllInEpInts();
  for ( epnum = 0, epmask = 1;
        epnum <= MAX_NUM_IN_EPS;
        epnum++, epmask <<= 1 ) {
    1b6a:	006d      	lsls	r5, r5, #1
            ep->xferred += ep->packetSize;
          } else {
            ep->xferred += ep->remaining;
            ep->remaining = 0;
          }
          USBDEP_Ep0Handler(dev);
    1b6c:	f7ff f974 	bl	e58 <USBDEP_Ep0Handler>
  }

  epint = USBDHAL_GetAllInEpInts();
  for ( epnum = 0, epmask = 1;
        epnum <= MAX_NUM_IN_EPS;
        epnum++, epmask <<= 1 ) {
    1b70:	b2ad      	uxth	r5, r5
    1b72:	e606      	b.n	1782 <USB_IRQHandler+0x23a>
    1b74:	20000000 	.word	0x20000000
    1b78:	40100000 	.word	0x40100000
    1b7c:	40100800 	.word	0x40100800

00001b80 <USBDHAL_AbortAllEps>:

  DEBUG_USB_INT_LO_PUTCHAR(',');
}

void USBDHAL_AbortAllEps(void)
{
    1b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1b84:	4bb9      	ldr	r3, [pc, #740]	; (1e6c <USBDHAL_AbortAllEps+0x2ec>)
    1b86:	681b      	ldr	r3, [r3, #0]
  uint16_t im, om, inmask = 0, outmask = 0;

  /* Clear epdis & inepnakeff INT's */
  for ( i = 1; i <= NUM_EP_USED; i++ ) {
    ep = &dev->ep[i];
    if ( ep->state != D_EP_IDLE ) {
    1b88:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
    1b8c:	2a00      	cmp	r2, #0
    1b8e:	f000 8128 	beq.w	1de2 <USBDHAL_AbortAllEps+0x262>
      if ( ep->in ) {
    1b92:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        inmask |= ep->mask;
        USB_DINEPS[ep->num].INT |= USB_DIEP_INT_EPDISBLD
    1b96:	f893 105e 	ldrb.w	r1, [r3, #94]	; 0x5e

  /* Clear epdis & inepnakeff INT's */
  for ( i = 1; i <= NUM_EP_USED; i++ ) {
    ep = &dev->ep[i];
    if ( ep->state != D_EP_IDLE ) {
      if ( ep->in ) {
    1b9a:	2a00      	cmp	r2, #0
    1b9c:	f000 813c 	beq.w	1e18 <USBDHAL_AbortAllEps+0x298>
        inmask |= ep->mask;
        USB_DINEPS[ep->num].INT |= USB_DIEP_INT_EPDISBLD
    1ba0:	4ab3      	ldr	r2, [pc, #716]	; (1e70 <USBDHAL_AbortAllEps+0x2f0>)
  /* Clear epdis & inepnakeff INT's */
  for ( i = 1; i <= NUM_EP_USED; i++ ) {
    ep = &dev->ep[i];
    if ( ep->state != D_EP_IDLE ) {
      if ( ep->in ) {
        inmask |= ep->mask;
    1ba2:	f8b3 e06a 	ldrh.w	lr, [r3, #106]	; 0x6a
        USB_DINEPS[ep->num].INT |= USB_DIEP_INT_EPDISBLD
    1ba6:	0149      	lsls	r1, r1, #5
    1ba8:	440a      	add	r2, r1
    1baa:	6891      	ldr	r1, [r2, #8]
    1bac:	f041 0142 	orr.w	r1, r1, #66	; 0x42
    1bb0:	6091      	str	r1, [r2, #8]
  uint16_t im, om, inmask = 0, outmask = 0;

  /* Clear epdis & inepnakeff INT's */
  for ( i = 1; i <= NUM_EP_USED; i++ ) {
    ep = &dev->ep[i];
    if ( ep->state != D_EP_IDLE ) {
    1bb2:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
    1bb6:	2a00      	cmp	r2, #0
    1bb8:	f000 81bb 	beq.w	1f32 <USBDHAL_AbortAllEps+0x3b2>
      if ( ep->in ) {
    1bbc:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
        inmask |= ep->mask;
        USB_DINEPS[ep->num].INT |= USB_DIEP_INT_EPDISBLD
    1bc0:	f893 1086 	ldrb.w	r1, [r3, #134]	; 0x86

void USBDHAL_AbortAllEps(void)
{
  int i, cnt;
  USBD_Ep_TypeDef *ep;
  uint16_t im, om, inmask = 0, outmask = 0;
    1bc4:	f04f 0c00 	mov.w	ip, #0

  /* Clear epdis & inepnakeff INT's */
  for ( i = 1; i <= NUM_EP_USED; i++ ) {
    ep = &dev->ep[i];
    if ( ep->state != D_EP_IDLE ) {
      if ( ep->in ) {
    1bc8:	2a00      	cmp	r2, #0
    1bca:	f040 8117 	bne.w	1dfc <USBDHAL_AbortAllEps+0x27c>
        inmask |= ep->mask;
        USB_DINEPS[ep->num].INT |= USB_DIEP_INT_EPDISBLD
                                   | USB_DIEP_INT_INEPNAKEFF;
      } else {
        outmask |= ep->mask;
        USB_DOUTEPS[ep->num].INT |= USB_DOEP_INT_EPDISBLD;
    1bce:	4aa9      	ldr	r2, [pc, #676]	; (1e74 <USBDHAL_AbortAllEps+0x2f4>)
      if ( ep->in ) {
        inmask |= ep->mask;
        USB_DINEPS[ep->num].INT |= USB_DIEP_INT_EPDISBLD
                                   | USB_DIEP_INT_INEPNAKEFF;
      } else {
        outmask |= ep->mask;
    1bd0:	f8b3 0092 	ldrh.w	r0, [r3, #146]	; 0x92
        USB_DOUTEPS[ep->num].INT |= USB_DOEP_INT_EPDISBLD;
    1bd4:	0149      	lsls	r1, r1, #5
    1bd6:	440a      	add	r2, r1
      if ( ep->in ) {
        inmask |= ep->mask;
        USB_DINEPS[ep->num].INT |= USB_DIEP_INT_EPDISBLD
                                   | USB_DIEP_INT_INEPNAKEFF;
      } else {
        outmask |= ep->mask;
    1bd8:	ea4c 0c00 	orr.w	ip, ip, r0
        USB_DOUTEPS[ep->num].INT |= USB_DOEP_INT_EPDISBLD;
    1bdc:	6891      	ldr	r1, [r2, #8]
    1bde:	f041 0102 	orr.w	r1, r1, #2
    1be2:	6091      	str	r1, [r2, #8]
      }
    }
  }

  if ( inmask ) {
    1be4:	f1be 0f00 	cmp.w	lr, #0
    1be8:	d022      	beq.n	1c30 <USBDHAL_AbortAllEps+0xb0>
    /* Enable epdis & inepnakeff INT's */
    USB->DIEPMSK |= USB_DIEPMSK_EPDISBLDMSK | USB_DIEPMSK_INEPNAKEFFMSK;
    1bea:	49a3      	ldr	r1, [pc, #652]	; (1e78 <USBDHAL_AbortAllEps+0x2f8>)
    1bec:	690a      	ldr	r2, [r1, #16]
    1bee:	f042 0242 	orr.w	r2, r2, #66	; 0x42
    1bf2:	610a      	str	r2, [r1, #16]

    /* Set NAK on all IN ep's */
    im = inmask;
    for ( i = 1; i <= NUM_EP_USED; i++ ) {
      ep = &dev->ep[i];
      if ( im & ep->mask ) {
    1bf4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
    1bf8:	ea1e 0f02 	tst.w	lr, r2
    1bfc:	d009      	beq.n	1c12 <USBDHAL_AbortAllEps+0x92>
        USB_DINEPS[ep->num].CTL = (USB_DINEPS[ep->num].CTL
    1bfe:	f893 105e 	ldrb.w	r1, [r3, #94]	; 0x5e
    1c02:	489b      	ldr	r0, [pc, #620]	; (1e70 <USBDHAL_AbortAllEps+0x2f0>)
    1c04:	0149      	lsls	r1, r1, #5
    1c06:	580a      	ldr	r2, [r1, r0]
                                   & ~DEPCTL_WO_BITMASK)
    1c08:	f022 5270 	bic.w	r2, r2, #1006632960	; 0x3c000000
                                  | USB_DIEP_CTL_SNAK;
    1c0c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
    /* Set NAK on all IN ep's */
    im = inmask;
    for ( i = 1; i <= NUM_EP_USED; i++ ) {
      ep = &dev->ep[i];
      if ( im & ep->mask ) {
        USB_DINEPS[ep->num].CTL = (USB_DINEPS[ep->num].CTL
    1c10:	500a      	str	r2, [r1, r0]

    /* Set NAK on all IN ep's */
    im = inmask;
    for ( i = 1; i <= NUM_EP_USED; i++ ) {
      ep = &dev->ep[i];
      if ( im & ep->mask ) {
    1c12:	f8b3 2092 	ldrh.w	r2, [r3, #146]	; 0x92
    1c16:	ea1e 0f02 	tst.w	lr, r2
    1c1a:	d009      	beq.n	1c30 <USBDHAL_AbortAllEps+0xb0>
        USB_DINEPS[ep->num].CTL = (USB_DINEPS[ep->num].CTL
    1c1c:	f893 1086 	ldrb.w	r1, [r3, #134]	; 0x86
    1c20:	4893      	ldr	r0, [pc, #588]	; (1e70 <USBDHAL_AbortAllEps+0x2f0>)
    1c22:	0149      	lsls	r1, r1, #5
    1c24:	580a      	ldr	r2, [r1, r0]
                                   & ~DEPCTL_WO_BITMASK)
    1c26:	f022 5270 	bic.w	r2, r2, #1006632960	; 0x3c000000
                                  | USB_DIEP_CTL_SNAK;
    1c2a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
    /* Set NAK on all IN ep's */
    im = inmask;
    for ( i = 1; i <= NUM_EP_USED; i++ ) {
      ep = &dev->ep[i];
      if ( im & ep->mask ) {
        USB_DINEPS[ep->num].CTL = (USB_DINEPS[ep->num].CTL
    1c2e:	500a      	str	r2, [r1, r0]
                                  | USB_DIEP_CTL_SNAK;
      }
    }
  }

  if ( outmask ) {
    1c30:	f1bc 0f00 	cmp.w	ip, #0
    1c34:	d027      	beq.n	1c86 <USBDHAL_AbortAllEps+0x106>
    /* Clear Global OUT NAK if already set */
    USB->DCTL = (USB->DCTL & ~DCTL_WO_BITMASK) | USB_DCTL_CGOUTNAK;
    1c36:	4990      	ldr	r1, [pc, #576]	; (1e78 <USBDHAL_AbortAllEps+0x2f8>)

    USB->GINTMSK |= USB_GINTMSK_GOUTNAKEFFMSK;    /* Enable GOUTNAKEFF int */
    1c38:	4890      	ldr	r0, [pc, #576]	; (1e7c <USBDHAL_AbortAllEps+0x2fc>)
    }
  }

  if ( outmask ) {
    /* Clear Global OUT NAK if already set */
    USB->DCTL = (USB->DCTL & ~DCTL_WO_BITMASK) | USB_DCTL_CGOUTNAK;
    1c3a:	684a      	ldr	r2, [r1, #4]
    1c3c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
    1c40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    1c44:	604a      	str	r2, [r1, #4]

    USB->GINTMSK |= USB_GINTMSK_GOUTNAKEFFMSK;    /* Enable GOUTNAKEFF int */
    1c46:	6982      	ldr	r2, [r0, #24]
    1c48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    1c4c:	6182      	str	r2, [r0, #24]

    /* Set Global OUT NAK */
    USB->DCTL = (USB->DCTL & ~DCTL_WO_BITMASK) | USB_DCTL_SGOUTNAK;
    1c4e:	684a      	ldr	r2, [r1, #4]
    1c50:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
    1c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    1c58:	604a      	str	r2, [r1, #4]

    /* Wait for goutnakeff */
    cnt = EPABORT_BREAK_LOOP_COUNT;
    while ( !(USB->GINTSTS & USB_GINTSTS_GOUTNAKEFF) && cnt ) {
    1c5a:	6942      	ldr	r2, [r0, #20]
    1c5c:	0617      	lsls	r7, r2, #24
    1c5e:	d408      	bmi.n	1c72 <USBDHAL_AbortAllEps+0xf2>
    1c60:	3014      	adds	r0, #20
    1c62:	f643 2298 	movw	r2, #15000	; 0x3a98
    1c66:	e001      	b.n	1c6c <USBDHAL_AbortAllEps+0xec>
    1c68:	3a01      	subs	r2, #1
    1c6a:	d002      	beq.n	1c72 <USBDHAL_AbortAllEps+0xf2>
    1c6c:	6801      	ldr	r1, [r0, #0]
    1c6e:	060e      	lsls	r6, r1, #24
    1c70:	d5fa      	bpl.n	1c68 <USBDHAL_AbortAllEps+0xe8>
      cnt--;
    }
    USB->GINTMSK &= ~USB_GINTMSK_GOUTNAKEFFMSK; /* Disable GOUTNAKEFF int  */
    1c72:	4882      	ldr	r0, [pc, #520]	; (1e7c <USBDHAL_AbortAllEps+0x2fc>)
    USB->DOEPMSK |= USB_DOEPMSK_EPDISBLDMSK;    /* Enable EPDIS interrupt  */
    1c74:	4980      	ldr	r1, [pc, #512]	; (1e78 <USBDHAL_AbortAllEps+0x2f8>)
    /* Wait for goutnakeff */
    cnt = EPABORT_BREAK_LOOP_COUNT;
    while ( !(USB->GINTSTS & USB_GINTSTS_GOUTNAKEFF) && cnt ) {
      cnt--;
    }
    USB->GINTMSK &= ~USB_GINTMSK_GOUTNAKEFFMSK; /* Disable GOUTNAKEFF int  */
    1c76:	6982      	ldr	r2, [r0, #24]
    1c78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1c7c:	6182      	str	r2, [r0, #24]
    USB->DOEPMSK |= USB_DOEPMSK_EPDISBLDMSK;    /* Enable EPDIS interrupt  */
    1c7e:	694a      	ldr	r2, [r1, #20]
    1c80:	f042 0202 	orr.w	r2, r2, #2
    1c84:	614a      	str	r2, [r1, #20]
  }

  if ( inmask ) {
    1c86:	f1be 0f00 	cmp.w	lr, #0
    1c8a:	d039      	beq.n	1d00 <USBDHAL_AbortAllEps+0x180>

__STATIC_INLINE uint32_t USBDHAL_GetInEpInts(USBD_Ep_TypeDef *ep)
{
  uint32_t retVal, msk;

  msk    = USB->DIEPMSK;
    1c8c:	4e7c      	ldr	r6, [pc, #496]	; (1e80 <USBDHAL_AbortAllEps+0x300>)
    1c8e:	4672      	mov	r2, lr
    1c90:	f643 2198 	movw	r1, #15000	; 0x3a98
    do {
      for ( i = 1; i <= NUM_EP_USED; i++ ) {
        ep = &dev->ep[i];
        if ( im & ep->mask ) {
          if ( USBDHAL_GetInEpInts(ep) & USB_DIEP_INT_INEPNAKEFF ) {
            USB_DINEPS[ep->num].INT = USB_DIEP_INT_INEPNAKEFF;
    1c94:	2740      	movs	r7, #64	; 0x40
    im  = inmask;
    cnt = EPABORT_BREAK_LOOP_COUNT;
    do {
      for ( i = 1; i <= NUM_EP_USED; i++ ) {
        ep = &dev->ep[i];
        if ( im & ep->mask ) {
    1c96:	f8b3 506a 	ldrh.w	r5, [r3, #106]	; 0x6a
  retVal = USB_DINEPS[ep->num].INT;
    1c9a:	4c75      	ldr	r4, [pc, #468]	; (1e70 <USBDHAL_AbortAllEps+0x2f0>)
    1c9c:	422a      	tst	r2, r5
    1c9e:	4620      	mov	r0, r4
    1ca0:	d011      	beq.n	1cc6 <USBDHAL_AbortAllEps+0x146>
    1ca2:	f893 805e 	ldrb.w	r8, [r3, #94]	; 0x5e

__STATIC_INLINE uint32_t USBDHAL_GetInEpInts(USBD_Ep_TypeDef *ep)
{
  uint32_t retVal, msk;

  msk    = USB->DIEPMSK;
    1ca6:	f8d6 9000 	ldr.w	r9, [r6]
  retVal = USB_DINEPS[ep->num].INT;
    1caa:	ea4f 1848 	mov.w	r8, r8, lsl #5
    1cae:	4444      	add	r4, r8
    1cb0:	68a5      	ldr	r5, [r4, #8]

  return retVal & msk;
    1cb2:	ea09 0505 	and.w	r5, r9, r5
          if ( USBDHAL_GetInEpInts(ep) & USB_DIEP_INT_INEPNAKEFF ) {
    1cb6:	066d      	lsls	r5, r5, #25
    1cb8:	d505      	bpl.n	1cc6 <USBDHAL_AbortAllEps+0x146>
            USB_DINEPS[ep->num].INT = USB_DIEP_INT_INEPNAKEFF;
    1cba:	60a7      	str	r7, [r4, #8]
            im &= ~ep->mask;
    1cbc:	f8b3 406a 	ldrh.w	r4, [r3, #106]	; 0x6a
    1cc0:	ea22 0204 	bic.w	r2, r2, r4
    1cc4:	b292      	uxth	r2, r2
    im  = inmask;
    cnt = EPABORT_BREAK_LOOP_COUNT;
    do {
      for ( i = 1; i <= NUM_EP_USED; i++ ) {
        ep = &dev->ep[i];
        if ( im & ep->mask ) {
    1cc6:	f8b3 4092 	ldrh.w	r4, [r3, #146]	; 0x92
    1cca:	4222      	tst	r2, r4
    1ccc:	d010      	beq.n	1cf0 <USBDHAL_AbortAllEps+0x170>
__STATIC_INLINE uint32_t USBDHAL_GetInEpInts(USBD_Ep_TypeDef *ep)
{
  uint32_t retVal, msk;

  msk    = USB->DIEPMSK;
  retVal = USB_DINEPS[ep->num].INT;
    1cce:	f893 5086 	ldrb.w	r5, [r3, #134]	; 0x86

__STATIC_INLINE uint32_t USBDHAL_GetInEpInts(USBD_Ep_TypeDef *ep)
{
  uint32_t retVal, msk;

  msk    = USB->DIEPMSK;
    1cd2:	f8d6 8000 	ldr.w	r8, [r6]
  retVal = USB_DINEPS[ep->num].INT;
    1cd6:	016d      	lsls	r5, r5, #5
    1cd8:	4428      	add	r0, r5
    1cda:	6884      	ldr	r4, [r0, #8]

  return retVal & msk;
    1cdc:	ea08 0404 	and.w	r4, r8, r4
          if ( USBDHAL_GetInEpInts(ep) & USB_DIEP_INT_INEPNAKEFF ) {
    1ce0:	0664      	lsls	r4, r4, #25
    1ce2:	d506      	bpl.n	1cf2 <USBDHAL_AbortAllEps+0x172>
            USB_DINEPS[ep->num].INT = USB_DIEP_INT_INEPNAKEFF;
    1ce4:	6087      	str	r7, [r0, #8]
            im &= ~ep->mask;
    1ce6:	f8b3 0092 	ldrh.w	r0, [r3, #146]	; 0x92
    1cea:	ea22 0200 	bic.w	r2, r2, r0
    1cee:	b292      	uxth	r2, r2
          }
        }
      }
      cnt--;
    } while ( im && cnt );
    1cf0:	b10a      	cbz	r2, 1cf6 <USBDHAL_AbortAllEps+0x176>
    1cf2:	3901      	subs	r1, #1
    1cf4:	d1cf      	bne.n	1c96 <USBDHAL_AbortAllEps+0x116>
    USB->DIEPMSK &= ~USB_DIEPMSK_INEPNAKEFFMSK;
    1cf6:	4960      	ldr	r1, [pc, #384]	; (1e78 <USBDHAL_AbortAllEps+0x2f8>)
    1cf8:	690a      	ldr	r2, [r1, #16]
    1cfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    1cfe:	610a      	str	r2, [r1, #16]
  DEBUG_USB_INT_LO_PUTCHAR('\'');

  /* Disable ep's */
  for ( i = 1; i <= NUM_EP_USED; i++ ) {
    ep = &dev->ep[i];
    if ( ep->state != D_EP_IDLE ) {
    1d00:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
    1d04:	2a00      	cmp	r2, #0
    1d06:	f040 80fd 	bne.w	1f04 <USBDHAL_AbortAllEps+0x384>
    1d0a:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
    1d0e:	2a00      	cmp	r2, #0
    1d10:	f040 80e0 	bne.w	1ed4 <USBDHAL_AbortAllEps+0x354>

  retVal  = USB_DOUTEPS[ep->num].INT;
#if defined(USB_DOEP0INT_STUPPKTRCVD)
  retVal &= USB->DOEPMSK | USB_DOEP0INT_STUPPKTRCVD;
#else
  retVal &= USB->DOEPMSK;
    1d14:	4e5b      	ldr	r6, [pc, #364]	; (1e84 <USBDHAL_AbortAllEps+0x304>)

__STATIC_INLINE uint32_t USBDHAL_GetInEpInts(USBD_Ep_TypeDef *ep)
{
  uint32_t retVal, msk;

  msk    = USB->DIEPMSK;
    1d16:	4d5a      	ldr	r5, [pc, #360]	; (1e80 <USBDHAL_AbortAllEps+0x300>)
    }
    USB->GINTMSK &= ~USB_GINTMSK_GOUTNAKEFFMSK; /* Disable GOUTNAKEFF int  */
    USB->DOEPMSK |= USB_DOEPMSK_EPDISBLDMSK;    /* Enable EPDIS interrupt  */
  }

  if ( inmask ) {
    1d18:	4660      	mov	r0, ip
    1d1a:	4672      	mov	r2, lr
    1d1c:	f643 2198 	movw	r1, #15000	; 0x3a98
        }
      }

      if ( !ep->in && (om & ep->mask) ) {
        if ( USBDHAL_GetOutEpInts(ep) & USB_DOEP_INT_EPDISBLD ) {
          USB_DOUTEPS[ep->num].INT = USB_DOEP_INT_EPDISBLD;
    1d20:	2702      	movs	r7, #2
  om  = outmask;
  cnt = EPABORT_BREAK_LOOP_COUNT;
  do {
    for ( i = 1; i <= NUM_EP_USED; i++ ) {
      ep = &dev->ep[i];
      if ( ep->in && (im & ep->mask) ) {
    1d22:	f893 405c 	ldrb.w	r4, [r3, #92]	; 0x5c
    1d26:	2c00      	cmp	r4, #0
    1d28:	f040 80b0 	bne.w	1e8c <USBDHAL_AbortAllEps+0x30c>
    1d2c:	f8b3 406a 	ldrh.w	r4, [r3, #106]	; 0x6a
          USB_DINEPS[ep->num].INT = USB_DIEP_INT_EPDISBLD;
          im &= ~ep->mask;
        }
      }

      if ( !ep->in && (om & ep->mask) ) {
    1d30:	4204      	tst	r4, r0
    1d32:	d014      	beq.n	1d5e <USBDHAL_AbortAllEps+0x1de>

__STATIC_INLINE uint32_t USBDHAL_GetOutEpInts(USBD_Ep_TypeDef *ep)
{
  uint32_t retVal;

  retVal  = USB_DOUTEPS[ep->num].INT;
    1d34:	f893 805e 	ldrb.w	r8, [r3, #94]	; 0x5e
    1d38:	4c4e      	ldr	r4, [pc, #312]	; (1e74 <USBDHAL_AbortAllEps+0x2f4>)
    1d3a:	ea4f 1848 	mov.w	r8, r8, lsl #5
    1d3e:	4444      	add	r4, r8
    1d40:	f8d4 9008 	ldr.w	r9, [r4, #8]
#if defined(USB_DOEP0INT_STUPPKTRCVD)
  retVal &= USB->DOEPMSK | USB_DOEP0INT_STUPPKTRCVD;
#else
  retVal &= USB->DOEPMSK;
    1d44:	f8d6 8000 	ldr.w	r8, [r6]
    1d48:	ea09 0808 	and.w	r8, r9, r8
        if ( USBDHAL_GetOutEpInts(ep) & USB_DOEP_INT_EPDISBLD ) {
    1d4c:	f018 0f02 	tst.w	r8, #2
    1d50:	d005      	beq.n	1d5e <USBDHAL_AbortAllEps+0x1de>
          USB_DOUTEPS[ep->num].INT = USB_DOEP_INT_EPDISBLD;
    1d52:	60a7      	str	r7, [r4, #8]
          om &= ~ep->mask;
    1d54:	f8b3 406a 	ldrh.w	r4, [r3, #106]	; 0x6a
    1d58:	ea20 0004 	bic.w	r0, r0, r4
    1d5c:	b280      	uxth	r0, r0
  om  = outmask;
  cnt = EPABORT_BREAK_LOOP_COUNT;
  do {
    for ( i = 1; i <= NUM_EP_USED; i++ ) {
      ep = &dev->ep[i];
      if ( ep->in && (im & ep->mask) ) {
    1d5e:	f893 4084 	ldrb.w	r4, [r3, #132]	; 0x84
    1d62:	2c00      	cmp	r4, #0
    1d64:	d162      	bne.n	1e2c <USBDHAL_AbortAllEps+0x2ac>
    1d66:	f8b3 4092 	ldrh.w	r4, [r3, #146]	; 0x92
          USB_DINEPS[ep->num].INT = USB_DIEP_INT_EPDISBLD;
          im &= ~ep->mask;
        }
      }

      if ( !ep->in && (om & ep->mask) ) {
    1d6a:	4204      	tst	r4, r0
    1d6c:	d014      	beq.n	1d98 <USBDHAL_AbortAllEps+0x218>

__STATIC_INLINE uint32_t USBDHAL_GetOutEpInts(USBD_Ep_TypeDef *ep)
{
  uint32_t retVal;

  retVal  = USB_DOUTEPS[ep->num].INT;
    1d6e:	f893 8086 	ldrb.w	r8, [r3, #134]	; 0x86
    1d72:	4c40      	ldr	r4, [pc, #256]	; (1e74 <USBDHAL_AbortAllEps+0x2f4>)
    1d74:	ea4f 1848 	mov.w	r8, r8, lsl #5
    1d78:	4444      	add	r4, r8
    1d7a:	f8d4 9008 	ldr.w	r9, [r4, #8]
#if defined(USB_DOEP0INT_STUPPKTRCVD)
  retVal &= USB->DOEPMSK | USB_DOEP0INT_STUPPKTRCVD;
#else
  retVal &= USB->DOEPMSK;
    1d7e:	f8d6 8000 	ldr.w	r8, [r6]
    1d82:	ea09 0808 	and.w	r8, r9, r8
        if ( USBDHAL_GetOutEpInts(ep) & USB_DOEP_INT_EPDISBLD ) {
    1d86:	f018 0f02 	tst.w	r8, #2
    1d8a:	d007      	beq.n	1d9c <USBDHAL_AbortAllEps+0x21c>
          USB_DOUTEPS[ep->num].INT = USB_DOEP_INT_EPDISBLD;
    1d8c:	60a7      	str	r7, [r4, #8]
          om &= ~ep->mask;
    1d8e:	f8b3 4092 	ldrh.w	r4, [r3, #146]	; 0x92
    1d92:	ea20 0004 	bic.w	r0, r0, r4
    1d96:	b280      	uxth	r0, r0
        }
      }
    }
    cnt--;
  } while ( (im || om) && cnt );
    1d98:	b902      	cbnz	r2, 1d9c <USBDHAL_AbortAllEps+0x21c>
    1d9a:	b108      	cbz	r0, 1da0 <USBDHAL_AbortAllEps+0x220>
    1d9c:	3901      	subs	r1, #1
    1d9e:	d1c0      	bne.n	1d22 <USBDHAL_AbortAllEps+0x1a2>

  if ( inmask ) {
    1da0:	f1be 0f00 	cmp.w	lr, #0
    1da4:	d00c      	beq.n	1dc0 <USBDHAL_AbortAllEps+0x240>
    USB->DIEPMSK &= ~USB_DIEPMSK_EPDISBLDMSK;     /* Disable EPDIS interrupt */
    1da6:	4934      	ldr	r1, [pc, #208]	; (1e78 <USBDHAL_AbortAllEps+0x2f8>)
  }
}

__STATIC_INLINE void USBHAL_FlushTxFifo(uint8_t fifoNum)
{
  USB->GRSTCTL = USB_GRSTCTL_TXFFLSH | (fifoNum << _USB_GRSTCTL_TXFNUM_SHIFT);
    1da8:	4834      	ldr	r0, [pc, #208]	; (1e7c <USBDHAL_AbortAllEps+0x2fc>)
    1daa:	690b      	ldr	r3, [r1, #16]
  while ( USB->GRSTCTL & USB_GRSTCTL_TXFFLSH ) {
    1dac:	4a36      	ldr	r2, [pc, #216]	; (1e88 <USBDHAL_AbortAllEps+0x308>)
    1dae:	f023 0302 	bic.w	r3, r3, #2
  }
}

__STATIC_INLINE void USBHAL_FlushTxFifo(uint8_t fifoNum)
{
  USB->GRSTCTL = USB_GRSTCTL_TXFFLSH | (fifoNum << _USB_GRSTCTL_TXFNUM_SHIFT);
    1db2:	f44f 6484 	mov.w	r4, #1056	; 0x420
    1db6:	610b      	str	r3, [r1, #16]
    1db8:	6104      	str	r4, [r0, #16]
  while ( USB->GRSTCTL & USB_GRSTCTL_TXFFLSH ) {
    1dba:	6813      	ldr	r3, [r2, #0]
    1dbc:	069b      	lsls	r3, r3, #26
    1dbe:	d4fc      	bmi.n	1dba <USBDHAL_AbortAllEps+0x23a>
    USBHAL_FlushTxFifo(0x10);                     /* Flush all Tx FIFO's     */
  }

  if ( outmask ) {
    1dc0:	f1bc 0f00 	cmp.w	ip, #0
    1dc4:	f000 8084 	beq.w	1ed0 <USBDHAL_AbortAllEps+0x350>
    USB->DOEPMSK &= ~USB_DOEPMSK_EPDISBLDMSK;     /* Disable EPDIS interrupt */
    1dc8:	4a2b      	ldr	r2, [pc, #172]	; (1e78 <USBDHAL_AbortAllEps+0x2f8>)
    1dca:	6953      	ldr	r3, [r2, #20]
    1dcc:	f023 0302 	bic.w	r3, r3, #2
    1dd0:	6153      	str	r3, [r2, #20]
    /* Clear Global OUT NAK */
    USB->DCTL = (USB->DCTL & ~DCTL_WO_BITMASK) | USB_DCTL_CGOUTNAK;
    1dd2:	6853      	ldr	r3, [r2, #4]
    1dd4:	f423 63f0 	bic.w	r3, r3, #1920	; 0x780
    1dd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    1ddc:	6053      	str	r3, [r2, #4]
    1dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

void USBDHAL_AbortAllEps(void)
{
  int i, cnt;
  USBD_Ep_TypeDef *ep;
  uint16_t im, om, inmask = 0, outmask = 0;
    1de2:	4694      	mov	ip, r2

  /* Clear epdis & inepnakeff INT's */
  for ( i = 1; i <= NUM_EP_USED; i++ ) {
    ep = &dev->ep[i];
    if ( ep->state != D_EP_IDLE ) {
    1de4:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
    1de8:	b1a2      	cbz	r2, 1e14 <USBDHAL_AbortAllEps+0x294>
      if ( ep->in ) {
    1dea:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
        inmask |= ep->mask;
        USB_DINEPS[ep->num].INT |= USB_DIEP_INT_EPDISBLD
    1dee:	f893 1086 	ldrb.w	r1, [r3, #134]	; 0x86
  uint16_t im, om, inmask = 0, outmask = 0;

  /* Clear epdis & inepnakeff INT's */
  for ( i = 1; i <= NUM_EP_USED; i++ ) {
    ep = &dev->ep[i];
    if ( ep->state != D_EP_IDLE ) {
    1df2:	f04f 0e00 	mov.w	lr, #0
      if ( ep->in ) {
    1df6:	2a00      	cmp	r2, #0
    1df8:	f43f aee9 	beq.w	1bce <USBDHAL_AbortAllEps+0x4e>
        inmask |= ep->mask;
        USB_DINEPS[ep->num].INT |= USB_DIEP_INT_EPDISBLD
    1dfc:	4a1c      	ldr	r2, [pc, #112]	; (1e70 <USBDHAL_AbortAllEps+0x2f0>)
  /* Clear epdis & inepnakeff INT's */
  for ( i = 1; i <= NUM_EP_USED; i++ ) {
    ep = &dev->ep[i];
    if ( ep->state != D_EP_IDLE ) {
      if ( ep->in ) {
        inmask |= ep->mask;
    1dfe:	f8b3 0092 	ldrh.w	r0, [r3, #146]	; 0x92
        USB_DINEPS[ep->num].INT |= USB_DIEP_INT_EPDISBLD
    1e02:	0149      	lsls	r1, r1, #5
    1e04:	440a      	add	r2, r1
  /* Clear epdis & inepnakeff INT's */
  for ( i = 1; i <= NUM_EP_USED; i++ ) {
    ep = &dev->ep[i];
    if ( ep->state != D_EP_IDLE ) {
      if ( ep->in ) {
        inmask |= ep->mask;
    1e06:	ea4e 0e00 	orr.w	lr, lr, r0
        USB_DINEPS[ep->num].INT |= USB_DIEP_INT_EPDISBLD
    1e0a:	6891      	ldr	r1, [r2, #8]
    1e0c:	f041 0142 	orr.w	r1, r1, #66	; 0x42
    1e10:	6091      	str	r1, [r2, #8]
    1e12:	e6e7      	b.n	1be4 <USBDHAL_AbortAllEps+0x64>
  uint16_t im, om, inmask = 0, outmask = 0;

  /* Clear epdis & inepnakeff INT's */
  for ( i = 1; i <= NUM_EP_USED; i++ ) {
    ep = &dev->ep[i];
    if ( ep->state != D_EP_IDLE ) {
    1e14:	4696      	mov	lr, r2
    1e16:	e70b      	b.n	1c30 <USBDHAL_AbortAllEps+0xb0>
        inmask |= ep->mask;
        USB_DINEPS[ep->num].INT |= USB_DIEP_INT_EPDISBLD
                                   | USB_DIEP_INT_INEPNAKEFF;
      } else {
        outmask |= ep->mask;
        USB_DOUTEPS[ep->num].INT |= USB_DOEP_INT_EPDISBLD;
    1e18:	4a16      	ldr	r2, [pc, #88]	; (1e74 <USBDHAL_AbortAllEps+0x2f4>)
      if ( ep->in ) {
        inmask |= ep->mask;
        USB_DINEPS[ep->num].INT |= USB_DIEP_INT_EPDISBLD
                                   | USB_DIEP_INT_INEPNAKEFF;
      } else {
        outmask |= ep->mask;
    1e1a:	f8b3 c06a 	ldrh.w	ip, [r3, #106]	; 0x6a
        USB_DOUTEPS[ep->num].INT |= USB_DOEP_INT_EPDISBLD;
    1e1e:	0149      	lsls	r1, r1, #5
    1e20:	440a      	add	r2, r1
    1e22:	6891      	ldr	r1, [r2, #8]
    1e24:	f041 0102 	orr.w	r1, r1, #2
    1e28:	6091      	str	r1, [r2, #8]
    1e2a:	e7db      	b.n	1de4 <USBDHAL_AbortAllEps+0x264>
  om  = outmask;
  cnt = EPABORT_BREAK_LOOP_COUNT;
  do {
    for ( i = 1; i <= NUM_EP_USED; i++ ) {
      ep = &dev->ep[i];
      if ( ep->in && (im & ep->mask) ) {
    1e2c:	f8b3 4092 	ldrh.w	r4, [r3, #146]	; 0x92
    1e30:	4222      	tst	r2, r4
    1e32:	d0b1      	beq.n	1d98 <USBDHAL_AbortAllEps+0x218>
__STATIC_INLINE uint32_t USBDHAL_GetInEpInts(USBD_Ep_TypeDef *ep)
{
  uint32_t retVal, msk;

  msk    = USB->DIEPMSK;
  retVal = USB_DINEPS[ep->num].INT;
    1e34:	f893 9086 	ldrb.w	r9, [r3, #134]	; 0x86
    1e38:	4c0d      	ldr	r4, [pc, #52]	; (1e70 <USBDHAL_AbortAllEps+0x2f0>)

__STATIC_INLINE uint32_t USBDHAL_GetInEpInts(USBD_Ep_TypeDef *ep)
{
  uint32_t retVal, msk;

  msk    = USB->DIEPMSK;
    1e3a:	f8d5 a000 	ldr.w	sl, [r5]
  retVal = USB_DINEPS[ep->num].INT;
    1e3e:	ea4f 1949 	mov.w	r9, r9, lsl #5
    1e42:	444c      	add	r4, r9
    1e44:	f8d4 8008 	ldr.w	r8, [r4, #8]

  return retVal & msk;
    1e48:	ea0a 0808 	and.w	r8, sl, r8
        if ( USBDHAL_GetInEpInts(ep) & USB_DIEP_INT_EPDISBLD ) {
    1e4c:	f018 0f02 	tst.w	r8, #2
    1e50:	d0a4      	beq.n	1d9c <USBDHAL_AbortAllEps+0x21c>
          USB_DINEPS[ep->num].INT = USB_DIEP_INT_EPDISBLD;
    1e52:	60a7      	str	r7, [r4, #8]
          im &= ~ep->mask;
    1e54:	f8b3 4092 	ldrh.w	r4, [r3, #146]	; 0x92
        }
      }

      if ( !ep->in && (om & ep->mask) ) {
    1e58:	f893 8084 	ldrb.w	r8, [r3, #132]	; 0x84
    for ( i = 1; i <= NUM_EP_USED; i++ ) {
      ep = &dev->ep[i];
      if ( ep->in && (im & ep->mask) ) {
        if ( USBDHAL_GetInEpInts(ep) & USB_DIEP_INT_EPDISBLD ) {
          USB_DINEPS[ep->num].INT = USB_DIEP_INT_EPDISBLD;
          im &= ~ep->mask;
    1e5c:	ea22 0204 	bic.w	r2, r2, r4
    1e60:	b292      	uxth	r2, r2
        }
      }

      if ( !ep->in && (om & ep->mask) ) {
    1e62:	f1b8 0f00 	cmp.w	r8, #0
    1e66:	d197      	bne.n	1d98 <USBDHAL_AbortAllEps+0x218>
    1e68:	e77f      	b.n	1d6a <USBDHAL_AbortAllEps+0x1ea>
    1e6a:	bf00      	nop
    1e6c:	20000000 	.word	0x20000000
    1e70:	40100900 	.word	0x40100900
    1e74:	40100b00 	.word	0x40100b00
    1e78:	40100800 	.word	0x40100800
    1e7c:	40100000 	.word	0x40100000
    1e80:	40100810 	.word	0x40100810
    1e84:	40100814 	.word	0x40100814
    1e88:	40100010 	.word	0x40100010
  om  = outmask;
  cnt = EPABORT_BREAK_LOOP_COUNT;
  do {
    for ( i = 1; i <= NUM_EP_USED; i++ ) {
      ep = &dev->ep[i];
      if ( ep->in && (im & ep->mask) ) {
    1e8c:	f8b3 406a 	ldrh.w	r4, [r3, #106]	; 0x6a
    1e90:	4222      	tst	r2, r4
    1e92:	f43f af64 	beq.w	1d5e <USBDHAL_AbortAllEps+0x1de>
__STATIC_INLINE uint32_t USBDHAL_GetInEpInts(USBD_Ep_TypeDef *ep)
{
  uint32_t retVal, msk;

  msk    = USB->DIEPMSK;
  retVal = USB_DINEPS[ep->num].INT;
    1e96:	f893 905e 	ldrb.w	r9, [r3, #94]	; 0x5e
    1e9a:	4c32      	ldr	r4, [pc, #200]	; (1f64 <USBDHAL_AbortAllEps+0x3e4>)

__STATIC_INLINE uint32_t USBDHAL_GetInEpInts(USBD_Ep_TypeDef *ep)
{
  uint32_t retVal, msk;

  msk    = USB->DIEPMSK;
    1e9c:	f8d5 a000 	ldr.w	sl, [r5]
  retVal = USB_DINEPS[ep->num].INT;
    1ea0:	ea4f 1949 	mov.w	r9, r9, lsl #5
    1ea4:	444c      	add	r4, r9
    1ea6:	f8d4 8008 	ldr.w	r8, [r4, #8]

  return retVal & msk;
    1eaa:	ea0a 0808 	and.w	r8, sl, r8
        if ( USBDHAL_GetInEpInts(ep) & USB_DIEP_INT_EPDISBLD ) {
    1eae:	f018 0f02 	tst.w	r8, #2
    1eb2:	f43f af54 	beq.w	1d5e <USBDHAL_AbortAllEps+0x1de>
          USB_DINEPS[ep->num].INT = USB_DIEP_INT_EPDISBLD;
    1eb6:	60a7      	str	r7, [r4, #8]
          im &= ~ep->mask;
    1eb8:	f8b3 406a 	ldrh.w	r4, [r3, #106]	; 0x6a
        }
      }

      if ( !ep->in && (om & ep->mask) ) {
    1ebc:	f893 805c 	ldrb.w	r8, [r3, #92]	; 0x5c
    for ( i = 1; i <= NUM_EP_USED; i++ ) {
      ep = &dev->ep[i];
      if ( ep->in && (im & ep->mask) ) {
        if ( USBDHAL_GetInEpInts(ep) & USB_DIEP_INT_EPDISBLD ) {
          USB_DINEPS[ep->num].INT = USB_DIEP_INT_EPDISBLD;
          im &= ~ep->mask;
    1ec0:	ea22 0204 	bic.w	r2, r2, r4
    1ec4:	b292      	uxth	r2, r2
        }
      }

      if ( !ep->in && (om & ep->mask) ) {
    1ec6:	f1b8 0f00 	cmp.w	r8, #0
    1eca:	f47f af48 	bne.w	1d5e <USBDHAL_AbortAllEps+0x1de>
    1ece:	e72f      	b.n	1d30 <USBDHAL_AbortAllEps+0x1b0>
    1ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  USB->DOEP0DMAADDR = (uint32_t)addr;
}

__STATIC_INLINE void USBDHAL_SetEPDISNAK(USBD_Ep_TypeDef *ep)
{
  if ( ep->in ) {
    1ed4:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
    1ed8:	2a00      	cmp	r2, #0
    1eda:	d137      	bne.n	1f4c <USBDHAL_AbortAllEps+0x3cc>
    USB_DINEPS[ep->num].CTL = (USB_DINEPS[ep->num].CTL
                               & ~DEPCTL_WO_BITMASK)
                              | USB_DIEP_CTL_SNAK
                              | USB_DIEP_CTL_EPDIS;
  } else {
    USB_DOUTEPS[ep->num].CTL = (USB_DOUTEPS[ep->num].CTL
    1edc:	f893 0086 	ldrb.w	r0, [r3, #134]	; 0x86
    1ee0:	4921      	ldr	r1, [pc, #132]	; (1f68 <USBDHAL_AbortAllEps+0x3e8>)
    1ee2:	0140      	lsls	r0, r0, #5
    1ee4:	5842      	ldr	r2, [r0, r1]
                                & ~DEPCTL_WO_BITMASK)
                               | USB_DOEP_CTL_EPENA;
    1ee6:	f022 423c 	bic.w	r2, r2, #3154116608	; 0xbc000000
    1eea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    USB_DINEPS[ep->num].CTL = (USB_DINEPS[ep->num].CTL
                               & ~DEPCTL_WO_BITMASK)
                              | USB_DIEP_CTL_SNAK
                              | USB_DIEP_CTL_EPDIS;
  } else {
    USB_DOUTEPS[ep->num].CTL = (USB_DOUTEPS[ep->num].CTL
    1eee:	5042      	str	r2, [r0, r1]
                                & ~DEPCTL_WO_BITMASK)
                               | USB_DOEP_CTL_EPENA;

    USB_DOUTEPS[ep->num].CTL = (USB_DOUTEPS[ep->num].CTL
    1ef0:	f893 0086 	ldrb.w	r0, [r3, #134]	; 0x86
    1ef4:	0140      	lsls	r0, r0, #5
    1ef6:	5842      	ldr	r2, [r0, r1]
                                & ~DEPCTL_WO_BITMASK)
                               | USB_DOEP_CTL_SNAK
                               | USB_DOEP_CTL_EPDIS;
    1ef8:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
    1efc:	f042 4290 	orr.w	r2, r2, #1207959552	; 0x48000000
  } else {
    USB_DOUTEPS[ep->num].CTL = (USB_DOUTEPS[ep->num].CTL
                                & ~DEPCTL_WO_BITMASK)
                               | USB_DOEP_CTL_EPENA;

    USB_DOUTEPS[ep->num].CTL = (USB_DOUTEPS[ep->num].CTL
    1f00:	5042      	str	r2, [r0, r1]
    1f02:	e707      	b.n	1d14 <USBDHAL_AbortAllEps+0x194>
  USB->DOEP0DMAADDR = (uint32_t)addr;
}

__STATIC_INLINE void USBDHAL_SetEPDISNAK(USBD_Ep_TypeDef *ep)
{
  if ( ep->in ) {
    1f04:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
    1f08:	b9aa      	cbnz	r2, 1f36 <USBDHAL_AbortAllEps+0x3b6>
    USB_DINEPS[ep->num].CTL = (USB_DINEPS[ep->num].CTL
                               & ~DEPCTL_WO_BITMASK)
                              | USB_DIEP_CTL_SNAK
                              | USB_DIEP_CTL_EPDIS;
  } else {
    USB_DOUTEPS[ep->num].CTL = (USB_DOUTEPS[ep->num].CTL
    1f0a:	f893 005e 	ldrb.w	r0, [r3, #94]	; 0x5e
    1f0e:	4916      	ldr	r1, [pc, #88]	; (1f68 <USBDHAL_AbortAllEps+0x3e8>)
    1f10:	0140      	lsls	r0, r0, #5
    1f12:	5842      	ldr	r2, [r0, r1]
                                & ~DEPCTL_WO_BITMASK)
                               | USB_DOEP_CTL_EPENA;
    1f14:	f022 423c 	bic.w	r2, r2, #3154116608	; 0xbc000000
    1f18:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    USB_DINEPS[ep->num].CTL = (USB_DINEPS[ep->num].CTL
                               & ~DEPCTL_WO_BITMASK)
                              | USB_DIEP_CTL_SNAK
                              | USB_DIEP_CTL_EPDIS;
  } else {
    USB_DOUTEPS[ep->num].CTL = (USB_DOUTEPS[ep->num].CTL
    1f1c:	5042      	str	r2, [r0, r1]
                                & ~DEPCTL_WO_BITMASK)
                               | USB_DOEP_CTL_EPENA;

    USB_DOUTEPS[ep->num].CTL = (USB_DOUTEPS[ep->num].CTL
    1f1e:	f893 005e 	ldrb.w	r0, [r3, #94]	; 0x5e
    1f22:	0140      	lsls	r0, r0, #5
    1f24:	5842      	ldr	r2, [r0, r1]
                                & ~DEPCTL_WO_BITMASK)
                               | USB_DOEP_CTL_SNAK
                               | USB_DOEP_CTL_EPDIS;
    1f26:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
    1f2a:	f042 4290 	orr.w	r2, r2, #1207959552	; 0x48000000
  } else {
    USB_DOUTEPS[ep->num].CTL = (USB_DOUTEPS[ep->num].CTL
                                & ~DEPCTL_WO_BITMASK)
                               | USB_DOEP_CTL_EPENA;

    USB_DOUTEPS[ep->num].CTL = (USB_DOUTEPS[ep->num].CTL
    1f2e:	5042      	str	r2, [r0, r1]
    1f30:	e6eb      	b.n	1d0a <USBDHAL_AbortAllEps+0x18a>

void USBDHAL_AbortAllEps(void)
{
  int i, cnt;
  USBD_Ep_TypeDef *ep;
  uint16_t im, om, inmask = 0, outmask = 0;
    1f32:	4694      	mov	ip, r2
    1f34:	e656      	b.n	1be4 <USBDHAL_AbortAllEps+0x64>
}

__STATIC_INLINE void USBDHAL_SetEPDISNAK(USBD_Ep_TypeDef *ep)
{
  if ( ep->in ) {
    USB_DINEPS[ep->num].CTL = (USB_DINEPS[ep->num].CTL
    1f36:	f893 105e 	ldrb.w	r1, [r3, #94]	; 0x5e
    1f3a:	480a      	ldr	r0, [pc, #40]	; (1f64 <USBDHAL_AbortAllEps+0x3e4>)
    1f3c:	0149      	lsls	r1, r1, #5
    1f3e:	580a      	ldr	r2, [r1, r0]
                               & ~DEPCTL_WO_BITMASK)
                              | USB_DIEP_CTL_SNAK
                              | USB_DIEP_CTL_EPDIS;
    1f40:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
    1f44:	f042 4290 	orr.w	r2, r2, #1207959552	; 0x48000000
}

__STATIC_INLINE void USBDHAL_SetEPDISNAK(USBD_Ep_TypeDef *ep)
{
  if ( ep->in ) {
    USB_DINEPS[ep->num].CTL = (USB_DINEPS[ep->num].CTL
    1f48:	500a      	str	r2, [r1, r0]
    1f4a:	e6de      	b.n	1d0a <USBDHAL_AbortAllEps+0x18a>
    1f4c:	f893 1086 	ldrb.w	r1, [r3, #134]	; 0x86
    1f50:	4804      	ldr	r0, [pc, #16]	; (1f64 <USBDHAL_AbortAllEps+0x3e4>)
    1f52:	0149      	lsls	r1, r1, #5
    1f54:	580a      	ldr	r2, [r1, r0]
                               & ~DEPCTL_WO_BITMASK)
                              | USB_DIEP_CTL_SNAK
                              | USB_DIEP_CTL_EPDIS;
    1f56:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
    1f5a:	f042 4290 	orr.w	r2, r2, #1207959552	; 0x48000000
}

__STATIC_INLINE void USBDHAL_SetEPDISNAK(USBD_Ep_TypeDef *ep)
{
  if ( ep->in ) {
    USB_DINEPS[ep->num].CTL = (USB_DINEPS[ep->num].CTL
    1f5e:	500a      	str	r2, [r1, r0]
    1f60:	e6d8      	b.n	1d14 <USBDHAL_AbortAllEps+0x194>
    1f62:	bf00      	nop
    1f64:	40100900 	.word	0x40100900
    1f68:	40100b00 	.word	0x40100b00

00001f6c <USBDHAL_AbortAllTransfers>:

  DEBUG_USB_INT_LO_PUTCHAR('\'');
}

void USBDHAL_AbortAllTransfers(USB_Status_TypeDef reason)
{
    1f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int i;
  USBD_Ep_TypeDef *ep;
  USB_XferCompleteCb_TypeDef callback;

  if ( reason != USB_STATUS_DEVICE_RESET ) {
    1f70:	f110 0f0b 	cmn.w	r0, #11

  DEBUG_USB_INT_LO_PUTCHAR('\'');
}

void USBDHAL_AbortAllTransfers(USB_Status_TypeDef reason)
{
    1f74:	b083      	sub	sp, #12
    1f76:	4607      	mov	r7, r0
  int i;
  USBD_Ep_TypeDef *ep;
  USB_XferCompleteCb_TypeDef callback;

  if ( reason != USB_STATUS_DEVICE_RESET ) {
    1f78:	d001      	beq.n	1f7e <USBDHAL_AbortAllTransfers+0x12>
    USBDHAL_AbortAllEps();
    1f7a:	f7ff fe01 	bl	1b80 <USBDHAL_AbortAllEps>
    1f7e:	4d29      	ldr	r5, [pc, #164]	; (2024 <USBDHAL_AbortAllTransfers+0xb8>)
      ep->state = D_EP_IDLE;
      if ( ep->xferCompleteCb ) {
        callback = ep->xferCompleteCb;
        ep->xferCompleteCb = NULL;

        if ( (dev->lastState    == USBD_STATE_CONFIGURED)
    1f80:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 2030 <USBDHAL_AbortAllTransfers+0xc4>
    USB_DOUTEPS[ep->num].CTL = 0;
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
  }

  /* Disable interrupt for this EP */
  USB->DAINTMSK &= ~daintmask;
    1f84:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 2034 <USBDHAL_AbortAllTransfers+0xc8>
    1f88:	2401      	movs	r4, #1
  }

  for ( i = 1; i <= NUM_EP_USED; i++ ) {
    ep = &(dev->ep[i]);
    if ( ep->state != D_EP_IDLE ) {
      ep->state = D_EP_IDLE;
    1f8a:	2600      	movs	r6, #0
    1f8c:	46ba      	mov	sl, r7
    USBDHAL_AbortAllEps();
  }

  for ( i = 1; i <= NUM_EP_USED; i++ ) {
    ep = &(dev->ep[i]);
    if ( ep->state != D_EP_IDLE ) {
    1f8e:	00a2      	lsls	r2, r4, #2
    1f90:	1910      	adds	r0, r2, r4
  if ( reason != USB_STATUS_DEVICE_RESET ) {
    USBDHAL_AbortAllEps();
  }

  for ( i = 1; i <= NUM_EP_USED; i++ ) {
    ep = &(dev->ep[i]);
    1f92:	682b      	ldr	r3, [r5, #0]
    if ( ep->state != D_EP_IDLE ) {
    1f94:	00c0      	lsls	r0, r0, #3
    1f96:	1819      	adds	r1, r3, r0
    1f98:	3150      	adds	r1, #80	; 0x50
    1f9a:	790f      	ldrb	r7, [r1, #4]
    1f9c:	b17f      	cbz	r7, 1fbe <USBDHAL_AbortAllTransfers+0x52>
      ep->state = D_EP_IDLE;
      if ( ep->xferCompleteCb ) {
    1f9e:	688f      	ldr	r7, [r1, #8]
  }

  for ( i = 1; i <= NUM_EP_USED; i++ ) {
    ep = &(dev->ep[i]);
    if ( ep->state != D_EP_IDLE ) {
      ep->state = D_EP_IDLE;
    1fa0:	710e      	strb	r6, [r1, #4]
      if ( ep->xferCompleteCb ) {
    1fa2:	b167      	cbz	r7, 1fbe <USBDHAL_AbortAllTransfers+0x52>
        callback = ep->xferCompleteCb;
        ep->xferCompleteCb = NULL;
    1fa4:	608e      	str	r6, [r1, #8]

        if ( (dev->lastState    == USBD_STATE_CONFIGURED)
             && (dev->state     == USBD_STATE_ADDRESSED)) {
    1fa6:	6a19      	ldr	r1, [r3, #32]
    1fa8:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
      ep->state = D_EP_IDLE;
      if ( ep->xferCompleteCb ) {
        callback = ep->xferCompleteCb;
        ep->xferCompleteCb = NULL;

        if ( (dev->lastState    == USBD_STATE_CONFIGURED)
    1fac:	4549      	cmp	r1, r9
    1fae:	d011      	beq.n	1fd4 <USBDHAL_AbortAllTransfers+0x68>
             && (dev->state     == USBD_STATE_ADDRESSED)) {
          USBDHAL_DeactivateEp(ep);
        }

        DEBUG_TRACE_ABORT(reason);
        callback(reason, ep->xferred, ep->remaining);
    1fb0:	4422      	add	r2, r4
    1fb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    1fb6:	4650      	mov	r0, sl
    1fb8:	6c99      	ldr	r1, [r3, #72]	; 0x48
    1fba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1fbc:	47b8      	blx	r7

  if ( reason != USB_STATUS_DEVICE_RESET ) {
    USBDHAL_AbortAllEps();
  }

  for ( i = 1; i <= NUM_EP_USED; i++ ) {
    1fbe:	2c02      	cmp	r4, #2
    1fc0:	d106      	bne.n	1fd0 <USBDHAL_AbortAllTransfers+0x64>
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1fc2:	4b19      	ldr	r3, [pc, #100]	; (2028 <USBDHAL_AbortAllTransfers+0xbc>)
    1fc4:	2220      	movs	r2, #32
    1fc6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    }
  }

  /* Clear any interrupts generated by the abort sequence. */
  NVIC_ClearPendingIRQ(USB_IRQn);
}
    1fca:	b003      	add	sp, #12
    1fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1fd0:	2402      	movs	r4, #2
    1fd2:	e7dc      	b.n	1f8e <USBDHAL_AbortAllTransfers+0x22>
  if ( reason != USB_STATUS_DEVICE_RESET ) {
    USBDHAL_AbortAllEps();
  }

  for ( i = 1; i <= NUM_EP_USED; i++ ) {
    ep = &(dev->ep[i]);
    1fd4:	f100 0b30 	add.w	fp, r0, #48	; 0x30
    1fd8:	449b      	add	fp, r3
__STATIC_INLINE void USBDHAL_DeactivateEp(USBD_Ep_TypeDef *ep)
{
  uint32_t daintmask;

  if ( ep->in ) {
    USB_DINEPS[ep->num].CTL = 0;
    1fda:	4914      	ldr	r1, [pc, #80]	; (202c <USBDHAL_AbortAllTransfers+0xc0>)
    1fdc:	f89b 0006 	ldrb.w	r0, [fp, #6]
    1fe0:	9000      	str	r0, [sp, #0]
    1fe2:	f8bb 0012 	ldrh.w	r0, [fp, #18]
    1fe6:	9001      	str	r0, [sp, #4]
    1fe8:	9800      	ldr	r0, [sp, #0]

__STATIC_INLINE void USBDHAL_DeactivateEp(USBD_Ep_TypeDef *ep)
{
  uint32_t daintmask;

  if ( ep->in ) {
    1fea:	f89b e004 	ldrb.w	lr, [fp, #4]
    USB_DINEPS[ep->num].CTL = 0;
    daintmask = ep->mask;
  } else {
    USB_DOUTEPS[ep->num].CTL = 0;
    1fee:	f8df c048 	ldr.w	ip, [pc, #72]	; 2038 <USBDHAL_AbortAllTransfers+0xcc>
__STATIC_INLINE void USBDHAL_DeactivateEp(USBD_Ep_TypeDef *ep)
{
  uint32_t daintmask;

  if ( ep->in ) {
    USB_DINEPS[ep->num].CTL = 0;
    1ff2:	ea4f 1b40 	mov.w	fp, r0, lsl #5
    1ff6:	4459      	add	r1, fp
    1ff8:	468b      	mov	fp, r1
    daintmask = ep->mask;
  } else {
    USB_DOUTEPS[ep->num].CTL = 0;
    1ffa:	0141      	lsls	r1, r0, #5

__STATIC_INLINE void USBDHAL_DeactivateEp(USBD_Ep_TypeDef *ep)
{
  uint32_t daintmask;

  if ( ep->in ) {
    1ffc:	f1be 0f00 	cmp.w	lr, #0
    2000:	d10b      	bne.n	201a <USBDHAL_AbortAllTransfers+0xae>
    USB_DINEPS[ep->num].CTL = 0;
    daintmask = ep->mask;
  } else {
    USB_DOUTEPS[ep->num].CTL = 0;
    2002:	448c      	add	ip, r1
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
    2004:	9901      	ldr	r1, [sp, #4]

  if ( ep->in ) {
    USB_DINEPS[ep->num].CTL = 0;
    daintmask = ep->mask;
  } else {
    USB_DOUTEPS[ep->num].CTL = 0;
    2006:	f8cc e000 	str.w	lr, [ip]
    daintmask = ep->mask << _USB_DAINTMSK_OUTEPMSK0_SHIFT;
    200a:	0408      	lsls	r0, r1, #16
  }

  /* Disable interrupt for this EP */
  USB->DAINTMSK &= ~daintmask;
    200c:	f8d8 1000 	ldr.w	r1, [r8]
    2010:	ea21 0100 	bic.w	r1, r1, r0
    2014:	f8c8 1000 	str.w	r1, [r8]
    2018:	e7ca      	b.n	1fb0 <USBDHAL_AbortAllTransfers+0x44>
__STATIC_INLINE void USBDHAL_DeactivateEp(USBD_Ep_TypeDef *ep)
{
  uint32_t daintmask;

  if ( ep->in ) {
    USB_DINEPS[ep->num].CTL = 0;
    201a:	f8cb 6000 	str.w	r6, [fp]
    daintmask = ep->mask;
    201e:	9801      	ldr	r0, [sp, #4]
    2020:	e7f4      	b.n	200c <USBDHAL_AbortAllTransfers+0xa0>
    2022:	bf00      	nop
    2024:	20000000 	.word	0x20000000
    2028:	e000e100 	.word	0xe000e100
    202c:	40100900 	.word	0x40100900
    2030:	00050004 	.word	0x00050004
    2034:	4010081c 	.word	0x4010081c
    2038:	40100b00 	.word	0x40100b00

0000203c <setupGPIO>:

static void setupGPIO(void) {

	/* GPIO A */

	GPIO_PinModeSet(EBI_GPIOPORT_A, EBI_AD09, gpioModeDisabled, 0);
    203c:	2000      	movs	r0, #0

}

/* Function configure GPIO pins */

static void setupGPIO(void) {
    203e:	b508      	push	{r3, lr}

	/* GPIO A */

	GPIO_PinModeSet(EBI_GPIOPORT_A, EBI_AD09, gpioModeDisabled, 0);
    2040:	4601      	mov	r1, r0
    2042:	4602      	mov	r2, r0
    2044:	4603      	mov	r3, r0
    2046:	f002 fed5 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(EBI_GPIOPORT_A, EBI_AD10, gpioModeDisabled, 0);
    204a:	2000      	movs	r0, #0
    204c:	4602      	mov	r2, r0
    204e:	4603      	mov	r3, r0
    2050:	2101      	movs	r1, #1
    2052:	f002 fecf 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(EBI_GPIOPORT_A, EBI_AD11, gpioModeDisabled, 0);
    2056:	2000      	movs	r0, #0
    2058:	4602      	mov	r2, r0
    205a:	4603      	mov	r3, r0
    205c:	2102      	movs	r1, #2
    205e:	f002 fec9 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(EBI_GPIOPORT_A, EBI_AD12, gpioModeDisabled, 0);
    2062:	2000      	movs	r0, #0
    2064:	4602      	mov	r2, r0
    2066:	4603      	mov	r3, r0
    2068:	2103      	movs	r1, #3
    206a:	f002 fec3 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(EBI_GPIOPORT_A, EBI_AD13, gpioModeDisabled, 0);
    206e:	2000      	movs	r0, #0
    2070:	4602      	mov	r2, r0
    2072:	4603      	mov	r3, r0
    2074:	2104      	movs	r1, #4
    2076:	f002 febd 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(EBI_GPIOPORT_A, EBI_AD14, gpioModeDisabled, 0);
    207a:	2000      	movs	r0, #0
    207c:	4602      	mov	r2, r0
    207e:	4603      	mov	r3, r0
    2080:	2105      	movs	r1, #5
    2082:	f002 feb7 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(EBI_GPIOPORT_A, EBI_AD15, gpioModeDisabled, 0);
    2086:	2000      	movs	r0, #0
    2088:	4602      	mov	r2, r0
    208a:	4603      	mov	r3, r0
    208c:	2106      	movs	r1, #6
    208e:	f002 feb1 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(gpioPortA, 7, gpioModeDisabled, 0);
    2092:	2000      	movs	r0, #0
    2094:	4602      	mov	r2, r0
    2096:	4603      	mov	r3, r0
    2098:	2107      	movs	r1, #7
    209a:	f002 feab 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(gpioPortA, 8, gpioModeDisabled, 0);
    209e:	2000      	movs	r0, #0
    20a0:	4602      	mov	r2, r0
    20a2:	4603      	mov	r3, r0
    20a4:	2108      	movs	r1, #8
    20a6:	f002 fea5 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(gpioPortA, 9, gpioModeDisabled, 0);
    20aa:	2000      	movs	r0, #0
    20ac:	4602      	mov	r2, r0
    20ae:	4603      	mov	r3, r0
    20b0:	2109      	movs	r1, #9
    20b2:	f002 fe9f 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(gpioPortA, 10, gpioModeDisabled, 0);
    20b6:	2000      	movs	r0, #0
    20b8:	4602      	mov	r2, r0
    20ba:	4603      	mov	r3, r0
    20bc:	210a      	movs	r1, #10
    20be:	f002 fe99 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(VREF_GPIOPORT, VREF_EN, gpioModePushPull, 0);
    20c2:	2000      	movs	r0, #0
    20c4:	4603      	mov	r3, r0
    20c6:	210b      	movs	r1, #11
    20c8:	2204      	movs	r2, #4
    20ca:	f002 fe93 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(gpioPortA, 12, gpioModeDisabled, 0);
    20ce:	2000      	movs	r0, #0
    20d0:	4602      	mov	r2, r0
    20d2:	4603      	mov	r3, r0
    20d4:	210c      	movs	r1, #12
    20d6:	f002 fe8d 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(gpioPortA, 13, gpioModeDisabled, 0);
    20da:	2000      	movs	r0, #0
    20dc:	4602      	mov	r2, r0
    20de:	4603      	mov	r3, r0
    20e0:	210d      	movs	r1, #13
    20e2:	f002 fe87 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(gpioPortA, 14, gpioModeDisabled, 0);
    20e6:	2000      	movs	r0, #0
    20e8:	4602      	mov	r2, r0
    20ea:	4603      	mov	r3, r0
    20ec:	210e      	movs	r1, #14
    20ee:	f002 fe81 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(EBI_GPIOPORT_A, EBI_AD08, gpioModeDisabled, 0);
    20f2:	2000      	movs	r0, #0
    20f4:	4602      	mov	r2, r0
    20f6:	4603      	mov	r3, r0
    20f8:	210f      	movs	r1, #15
    20fa:	f002 fe7b 	bl	4df4 <GPIO_PinModeSet>

	/* GPIO B */

	GPIO_PinModeSet(EBI_GPIOPORT_B, EBI_A16, gpioModeDisabled, 0);
    20fe:	2100      	movs	r1, #0
    2100:	460a      	mov	r2, r1
    2102:	460b      	mov	r3, r1
    2104:	2001      	movs	r0, #1
    2106:	f002 fe75 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(EBI_GPIOPORT_B, EBI_A17, gpioModeDisabled, 0);
    210a:	2001      	movs	r0, #1
    210c:	2200      	movs	r2, #0
    210e:	4601      	mov	r1, r0
    2110:	4613      	mov	r3, r2
    2112:	f002 fe6f 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(gpioPortB, 2, gpioModeDisabled, 0);
    2116:	2200      	movs	r2, #0
    2118:	4613      	mov	r3, r2
    211a:	2001      	movs	r0, #1
    211c:	2102      	movs	r1, #2
    211e:	f002 fe69 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(gpioPortB, 3, gpioModeDisabled, 0);
    2122:	2200      	movs	r2, #0
    2124:	4613      	mov	r3, r2
    2126:	2001      	movs	r0, #1
    2128:	2103      	movs	r1, #3
    212a:	f002 fe63 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(gpioPortB, 4, gpioModeDisabled, 0);
    212e:	2200      	movs	r2, #0
    2130:	4613      	mov	r3, r2
    2132:	2001      	movs	r0, #1
    2134:	2104      	movs	r1, #4
    2136:	f002 fe5d 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(gpioPortB, 5, gpioModeDisabled, 0);
    213a:	2200      	movs	r2, #0
    213c:	4613      	mov	r3, r2
    213e:	2001      	movs	r0, #1
    2140:	2105      	movs	r1, #5
    2142:	f002 fe57 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(gpioPortB, 6, gpioModeDisabled, 0);
    2146:	2200      	movs	r2, #0
    2148:	4613      	mov	r3, r2
    214a:	2001      	movs	r0, #1
    214c:	2106      	movs	r1, #6
    214e:	f002 fe51 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(gpioPortB, 9, gpioModeDisabled, 0);
    2152:	2200      	movs	r2, #0
    2154:	4613      	mov	r3, r2
    2156:	2001      	movs	r0, #1
    2158:	2109      	movs	r1, #9
    215a:	f002 fe4b 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(gpioPortB, 10, gpioModeDisabled, 0);
    215e:	2200      	movs	r2, #0
    2160:	4613      	mov	r3, r2
    2162:	2001      	movs	r0, #1
    2164:	210a      	movs	r1, #10
    2166:	f002 fe45 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(gpioPortB, 11, gpioModeDisabled, 0);
    216a:	2200      	movs	r2, #0
    216c:	4613      	mov	r3, r2
    216e:	2001      	movs	r0, #1
    2170:	210b      	movs	r1, #11
    2172:	f002 fe3f 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(gpioPortB, 12, gpioModeDisabled, 0);
    2176:	2200      	movs	r2, #0
    2178:	4613      	mov	r3, r2
    217a:	2001      	movs	r0, #1
    217c:	210c      	movs	r1, #12
    217e:	f002 fe39 	bl	4df4 <GPIO_PinModeSet>

	/* GPIO C */

	GPIO_PinModeSet(gpioPortC, 0, gpioModeDisabled, 0);
    2182:	2100      	movs	r1, #0
    2184:	460a      	mov	r2, r1
    2186:	460b      	mov	r3, r1
    2188:	2002      	movs	r0, #2
    218a:	f002 fe33 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(gpioPortC, 1, gpioModeDisabled, 0);
    218e:	2200      	movs	r2, #0
    2190:	4613      	mov	r3, r2
    2192:	2002      	movs	r0, #2
    2194:	2101      	movs	r1, #1
    2196:	f002 fe2d 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(BAT_MON_GPIOPORT, BAT_MON_EN, gpioModePushPull, 0);
    219a:	2002      	movs	r0, #2
    219c:	2103      	movs	r1, #3
    219e:	2204      	movs	r2, #4
    21a0:	2300      	movs	r3, #0
    21a2:	f002 fe27 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(EBI_GPIOPORT_C, EBI_A15, gpioModeDisabled, 0);
    21a6:	2200      	movs	r2, #0
    21a8:	4613      	mov	r3, r2
    21aa:	2002      	movs	r0, #2
    21ac:	2108      	movs	r1, #8
    21ae:	f002 fe21 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(EBI_GPIOPORT_C, EBI_A09, gpioModeDisabled, 0);
    21b2:	2200      	movs	r2, #0
    21b4:	4613      	mov	r3, r2
    21b6:	2002      	movs	r0, #2
    21b8:	2109      	movs	r1, #9
    21ba:	f002 fe1b 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(EBI_GPIOPORT_C, EBI_A10, gpioModeDisabled, 0);
    21be:	2200      	movs	r2, #0
    21c0:	4613      	mov	r3, r2
    21c2:	2002      	movs	r0, #2
    21c4:	210a      	movs	r1, #10
    21c6:	f002 fe15 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(gpioPortC, 11, gpioModeDisabled, 0);
    21ca:	2200      	movs	r2, #0
    21cc:	4613      	mov	r3, r2
    21ce:	2002      	movs	r0, #2
    21d0:	210b      	movs	r1, #11
    21d2:	f002 fe0f 	bl	4df4 <GPIO_PinModeSet>

	/* GPIO D */

	GPIO_PinModeSet(gpioPortD, 1, gpioModeDisabled, 0);
    21d6:	2200      	movs	r2, #0
    21d8:	4613      	mov	r3, r2
    21da:	2003      	movs	r0, #3
    21dc:	2101      	movs	r1, #1
    21de:	f002 fe09 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(gpioPortD, 2, gpioModeDisabled, 0);
    21e2:	2200      	movs	r2, #0
    21e4:	4613      	mov	r3, r2
    21e6:	2003      	movs	r0, #3
    21e8:	2102      	movs	r1, #2
    21ea:	f002 fe03 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(gpioPortD, 3, gpioModeDisabled, 0);
    21ee:	2003      	movs	r0, #3
    21f0:	2200      	movs	r2, #0
    21f2:	4601      	mov	r1, r0
    21f4:	4613      	mov	r3, r2
    21f6:	f002 fdfd 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(gpioPortD, 4, gpioModeDisabled, 0);
    21fa:	2200      	movs	r2, #0
    21fc:	4613      	mov	r3, r2
    21fe:	2003      	movs	r0, #3
    2200:	2104      	movs	r1, #4
    2202:	f002 fdf7 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(gpioPortD, 5, gpioModeDisabled, 0);
    2206:	2200      	movs	r2, #0
    2208:	4613      	mov	r3, r2
    220a:	2003      	movs	r0, #3
    220c:	2105      	movs	r1, #5
    220e:	f002 fdf1 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(EBI_GPIOPORT_D, EBI_CSEL1, gpioModeDisabled, 0);
    2212:	2200      	movs	r2, #0
    2214:	4613      	mov	r3, r2
    2216:	2003      	movs	r0, #3
    2218:	2109      	movs	r1, #9
    221a:	f002 fdeb 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(EBI_GPIOPORT_D, EBI_CSEL2, gpioModeDisabled, 0);
    221e:	2200      	movs	r2, #0
    2220:	4613      	mov	r3, r2
    2222:	2003      	movs	r0, #3
    2224:	210a      	movs	r1, #10
    2226:	f002 fde5 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(SRAMEN_GPIOPORT, SRAM_ENABLE_N, gpioModePushPull, 1);
    222a:	2003      	movs	r0, #3
    222c:	210b      	movs	r1, #11
    222e:	2204      	movs	r2, #4
    2230:	2301      	movs	r3, #1
    2232:	f002 fddf 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(SDEN_GPIOPORT, SD_ENABLE_N, gpioModePushPull, 1);
    2236:	2003      	movs	r0, #3
    2238:	210c      	movs	r1, #12
    223a:	2204      	movs	r2, #4
    223c:	2301      	movs	r3, #1
    223e:	f002 fdd9 	bl	4df4 <GPIO_PinModeSet>

	/* GPIO E */

	GPIO_PinModeSet(VMIC_GPIOPORT, VMIC_EN_N, gpioModePushPull, 1);
    2242:	2004      	movs	r0, #4
    2244:	4602      	mov	r2, r0
    2246:	2100      	movs	r1, #0
    2248:	2301      	movs	r3, #1
    224a:	f002 fdd3 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(EBI_GPIOPORT_E, EBI_A08, gpioModeDisabled, 0);
    224e:	2200      	movs	r2, #0
    2250:	4613      	mov	r3, r2
    2252:	2004      	movs	r0, #4
    2254:	2101      	movs	r1, #1
    2256:	f002 fdcd 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(gpioPortE, 2, gpioModeDisabled, 0);
    225a:	2200      	movs	r2, #0
    225c:	4613      	mov	r3, r2
    225e:	2004      	movs	r0, #4
    2260:	2102      	movs	r1, #2
    2262:	f002 fdc7 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(gpioPortE, 3, gpioModeDisabled, 0);
    2266:	2200      	movs	r2, #0
    2268:	4613      	mov	r3, r2
    226a:	2004      	movs	r0, #4
    226c:	2103      	movs	r1, #3
    226e:	f002 fdc1 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(EBI_GPIOPORT_E, EBI_A11, gpioModeDisabled, 0);
    2272:	2004      	movs	r0, #4
    2274:	2200      	movs	r2, #0
    2276:	4601      	mov	r1, r0
    2278:	4613      	mov	r3, r2
    227a:	f002 fdbb 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(EBI_GPIOPORT_E, EBI_A12, gpioModeDisabled, 0);
    227e:	2200      	movs	r2, #0
    2280:	4613      	mov	r3, r2
    2282:	2004      	movs	r0, #4
    2284:	2105      	movs	r1, #5
    2286:	f002 fdb5 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(EBI_GPIOPORT_E, EBI_A13, gpioModeDisabled, 0);
    228a:	2200      	movs	r2, #0
    228c:	4613      	mov	r3, r2
    228e:	2004      	movs	r0, #4
    2290:	2106      	movs	r1, #6
    2292:	f002 fdaf 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(EBI_GPIOPORT_E, EBI_A14, gpioModeDisabled, 0);
    2296:	2200      	movs	r2, #0
    2298:	4613      	mov	r3, r2
    229a:	2004      	movs	r0, #4
    229c:	2107      	movs	r1, #7
    229e:	f002 fda9 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(EBI_GPIOPORT_E, EBI_AD00, gpioModeDisabled, 0);
    22a2:	2200      	movs	r2, #0
    22a4:	4613      	mov	r3, r2
    22a6:	2004      	movs	r0, #4
    22a8:	2108      	movs	r1, #8
    22aa:	f002 fda3 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(EBI_GPIOPORT_E, EBI_AD01, gpioModeDisabled, 0);
    22ae:	2200      	movs	r2, #0
    22b0:	4613      	mov	r3, r2
    22b2:	2004      	movs	r0, #4
    22b4:	2109      	movs	r1, #9
    22b6:	f002 fd9d 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(EBI_GPIOPORT_E, EBI_AD02, gpioModeDisabled, 0);
    22ba:	2200      	movs	r2, #0
    22bc:	4613      	mov	r3, r2
    22be:	2004      	movs	r0, #4
    22c0:	210a      	movs	r1, #10
    22c2:	f002 fd97 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(EBI_GPIOPORT_E, EBI_AD03, gpioModeDisabled, 0);
    22c6:	2200      	movs	r2, #0
    22c8:	4613      	mov	r3, r2
    22ca:	2004      	movs	r0, #4
    22cc:	210b      	movs	r1, #11
    22ce:	f002 fd91 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(EBI_GPIOPORT_E, EBI_AD04, gpioModeDisabled, 0);
    22d2:	2200      	movs	r2, #0
    22d4:	4613      	mov	r3, r2
    22d6:	2004      	movs	r0, #4
    22d8:	210c      	movs	r1, #12
    22da:	f002 fd8b 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(EBI_GPIOPORT_E, EBI_AD05, gpioModeDisabled, 0);
    22de:	2200      	movs	r2, #0
    22e0:	4613      	mov	r3, r2
    22e2:	2004      	movs	r0, #4
    22e4:	210d      	movs	r1, #13
    22e6:	f002 fd85 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(EBI_GPIOPORT_E, EBI_AD06, gpioModeDisabled, 0);
    22ea:	2200      	movs	r2, #0
    22ec:	4613      	mov	r3, r2
    22ee:	2004      	movs	r0, #4
    22f0:	210e      	movs	r1, #14
    22f2:	f002 fd7f 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(EBI_GPIOPORT_E, EBI_AD07, gpioModeDisabled, 0);
    22f6:	2200      	movs	r2, #0
    22f8:	4613      	mov	r3, r2
    22fa:	2004      	movs	r0, #4
    22fc:	210f      	movs	r1, #15
    22fe:	f002 fd79 	bl	4df4 <GPIO_PinModeSet>

	/* GPIO F */

	GPIO_PinModeSet(gpioPortF, 3, gpioModeDisabled, 0);
    2302:	2200      	movs	r2, #0
    2304:	4613      	mov	r3, r2
    2306:	2005      	movs	r0, #5
    2308:	2103      	movs	r1, #3
    230a:	f002 fd73 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(gpioPortF, 4, gpioModeDisabled, 0);
    230e:	2200      	movs	r2, #0
    2310:	4613      	mov	r3, r2
    2312:	2005      	movs	r0, #5
    2314:	2104      	movs	r1, #4
    2316:	f002 fd6d 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(gpioPortF, 5, gpioModeDisabled, 0);
    231a:	2005      	movs	r0, #5
    231c:	2200      	movs	r2, #0
    231e:	4601      	mov	r1, r0
    2320:	4613      	mov	r3, r2
    2322:	f002 fd67 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(gpioPortF, 6, gpioModeDisabled, 0);
    2326:	2200      	movs	r2, #0
    2328:	4613      	mov	r3, r2
    232a:	2005      	movs	r0, #5
    232c:	2106      	movs	r1, #6
    232e:	f002 fd61 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(gpioPortF, 7, gpioModeDisabled, 0);
    2332:	2200      	movs	r2, #0
    2334:	4613      	mov	r3, r2
    2336:	2005      	movs	r0, #5
    2338:	2107      	movs	r1, #7
    233a:	f002 fd5b 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(EBI_GPIOPORT_F, EBI_WE, gpioModeDisabled, 0);
    233e:	2200      	movs	r2, #0
    2340:	4613      	mov	r3, r2
    2342:	2005      	movs	r0, #5
    2344:	2108      	movs	r1, #8
    2346:	f002 fd55 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(EBI_GPIOPORT_F, EBI_OE, gpioModeDisabled, 0);
    234a:	2200      	movs	r2, #0
    234c:	4613      	mov	r3, r2
    234e:	2005      	movs	r0, #5
    2350:	2109      	movs	r1, #9
    2352:	f002 fd4f 	bl	4df4 <GPIO_PinModeSet>
	GPIO_PinModeSet(gpioPortF, 12, gpioModeDisabled, 0);
    2356:	2200      	movs	r2, #0
    2358:	4613      	mov	r3, r2
    235a:	2005      	movs	r0, #5
    235c:	210c      	movs	r1, #12
    235e:	f002 fd49 	bl	4df4 <GPIO_PinModeSet>

    /* Enable GPIO state retention in EM4 */

	GPIO->CTRL = GPIO_CTRL_EM4RET;
    2362:	4b02      	ldr	r3, [pc, #8]	; (236c <setupGPIO+0x330>)
    2364:	2201      	movs	r2, #1
    2366:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    236a:	bd08      	pop	{r3, pc}
    236c:	40006000 	.word	0x40006000

00002370 <transferComplete>:
  delayTimmerRunning = false;


}

static void transferComplete(unsigned int channel, bool isPrimaryBuffer, void *user) {
    2370:	b5f0      	push	{r4, r5, r6, r7, lr}
    2372:	b087      	sub	sp, #28

    int16_t *nextBuffer = NULL;
    2374:	ab06      	add	r3, sp, #24
    2376:	2400      	movs	r4, #0
    2378:	f843 4d04 	str.w	r4, [r3, #-4]!
  delayTimmerRunning = false;


}

static void transferComplete(unsigned int channel, bool isPrimaryBuffer, void *user) {
    237c:	460e      	mov	r6, r1
    237e:	4607      	mov	r7, r0

    int16_t *nextBuffer = NULL;

    AudioMoth_handleDirectMemoryAccessInterrupt(isPrimaryBuffer, &nextBuffer);
    2380:	4619      	mov	r1, r3
    2382:	4630      	mov	r0, r6
    2384:	f008 fee0 	bl	b148 <AudioMoth_handleDirectMemoryAccessInterrupt>
    DMA_RefreshPingPong(channel,
        isPrimaryBuffer,
        false,
        (void*)nextBuffer,
        NULL,
        numberOfSamplesPerTransfer - 1,
    2388:	4a08      	ldr	r2, [pc, #32]	; (23ac <transferComplete+0x3c>)

    AudioMoth_handleDirectMemoryAccessInterrupt(isPrimaryBuffer, &nextBuffer);

    /* Re-activate the DMA */

    DMA_RefreshPingPong(channel,
    238a:	9b05      	ldr	r3, [sp, #20]
        isPrimaryBuffer,
        false,
        (void*)nextBuffer,
        NULL,
        numberOfSamplesPerTransfer - 1,
    238c:	8815      	ldrh	r5, [r2, #0]

    AudioMoth_handleDirectMemoryAccessInterrupt(isPrimaryBuffer, &nextBuffer);

    /* Re-activate the DMA */

    DMA_RefreshPingPong(channel,
    238e:	9400      	str	r4, [sp, #0]
        isPrimaryBuffer,
        false,
        (void*)nextBuffer,
        NULL,
        numberOfSamplesPerTransfer - 1,
    2390:	3d01      	subs	r5, #1

    AudioMoth_handleDirectMemoryAccessInterrupt(isPrimaryBuffer, &nextBuffer);

    /* Re-activate the DMA */

    DMA_RefreshPingPong(channel,
    2392:	4638      	mov	r0, r7
    2394:	4631      	mov	r1, r6
    2396:	4622      	mov	r2, r4
    2398:	9402      	str	r4, [sp, #8]
    239a:	9501      	str	r5, [sp, #4]
    239c:	f002 f906 	bl	45ac <DMA_RefreshPingPong>
 *   Deprecated function. New code should use @ref WDOGn_Feed().
 *   This function uses @ref DEFAULT_WDOG.
 ******************************************************************************/
__STATIC_INLINE void WDOG_Feed(void)
{
  WDOGn_Feed(DEFAULT_WDOG);
    23a0:	4803      	ldr	r0, [pc, #12]	; (23b0 <transferComplete+0x40>)
    23a2:	f003 f8c1 	bl	5528 <WDOGn_Feed>

    /* Feed the watch dog timer */

    WDOG_Feed();

}
    23a6:	b007      	add	sp, #28
    23a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23aa:	bf00      	nop
    23ac:	20000e94 	.word	0x20000e94
    23b0:	40088000 	.word	0x40088000

000023b4 <AudioMoth_initialise>:
static void enablePrsTimer(uint32_t samplerate);
static void setupADC(uint32_t clockDivider, uint32_t acquisitionCycles, uint32_t oversampleRate);

/* Function to initialise the main components */

void AudioMoth_initialise() {
    23b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    23b8:	b089      	sub	sp, #36	; 0x24

    CHIP_Init();

    /* Turn on the FPU */

    SystemInit();
    23ba:	f003 fc95 	bl	5ce8 <SystemInit>

    /* Enable high frequency HFXO clock */

    CMU_OscillatorEnable(cmuOsc_HFXO, true, true);
    23be:	2101      	movs	r1, #1
    23c0:	460a      	mov	r2, r1
    23c2:	2002      	movs	r0, #2
    23c4:	f001 ff3e 	bl	4244 <CMU_OscillatorEnable>

    CMU_ClockDivSet(cmuClock_HF, cmuClkDiv_1);
    23c8:	2011      	movs	r0, #17
    23ca:	2101      	movs	r1, #1
    23cc:	f001 fa7c 	bl	38c8 <CMU_ClockDivSet>

    CMU_ClockSelectSet(cmuClock_HF, cmuSelect_HFXO);
    23d0:	2011      	movs	r0, #17
    23d2:	2104      	movs	r1, #4
    23d4:	f001 fd9e 	bl	3f14 <CMU_ClockSelectSet>

    CMU_OscillatorEnable(cmuOsc_HFRCO, false, false);
    23d8:	2100      	movs	r1, #0
    23da:	460a      	mov	r2, r1
    23dc:	2003      	movs	r0, #3
    23de:	f001 ff31 	bl	4244 <CMU_OscillatorEnable>

    /* Enable clock to low energy modules */

    CMU_ClockEnable(cmuClock_GPIO, true);
    23e2:	485c      	ldr	r0, [pc, #368]	; (2554 <AudioMoth_initialise+0x1a0>)
    23e4:	2101      	movs	r1, #1
    23e6:	f001 fd37 	bl	3e58 <CMU_ClockEnable>

    CMU_ClockEnable(cmuClock_CORELE, true);
    23ea:	2101      	movs	r1, #1
    23ec:	485a      	ldr	r0, [pc, #360]	; (2558 <AudioMoth_initialise+0x1a4>)
    23ee:	f001 fd33 	bl	3e58 <CMU_ClockEnable>

    /* Store the cause of the last reset, and clear the reset cause register */

    unsigned long resetCause = RMU_ResetCauseGet();
    23f2:	f002 fefb 	bl	51ec <RMU_ResetCauseGet>
    23f6:	4605      	mov	r5, r0

    RMU_ResetCauseClear();
    23f8:	f002 feda 	bl	51b0 <RMU_ResetCauseClear>

    /* If this is a start from power-off initialise low frequency oscillator and set up BURTC */

    if ((resetCause & RMU_RSTCAUSE_EM4WURST) == 0) {
    23fc:	f415 7480 	ands.w	r4, r5, #256	; 0x100
    2400:	d057      	beq.n	24b2 <AudioMoth_initialise+0xfe>
 *   Pending BURTC interrupt sources. Returns a set of interrupt flags OR-ed
 *   together for multiple interrupt sources in the BURTC module (BURTC_IFS_nnn).
 ******************************************************************************/
__STATIC_INLINE uint32_t BURTC_IntGet(void)
{
  return(BURTC->IF);
    2402:	4b56      	ldr	r3, [pc, #344]	; (255c <AudioMoth_initialise+0x1a8>)
    2404:	6a9a      	ldr	r2, [r3, #40]	; 0x28

    } else {

        /* Increment the high 32-bit BURTC offset value if the overflow flag has been set*/

        if (BURTC_IntGet() & BURTC_IF_OF) {
    2406:	07d2      	lsls	r2, r2, #31
    2408:	d447      	bmi.n	249a <AudioMoth_initialise+0xe6>
 ******************************************************************************/
__STATIC_INLINE void BURTC_RetRegSet(uint32_t num, uint32_t data)
{
  EFM_ASSERT(num <= 127);

  BURTC->RET[num].REG = data;
    240a:	4b54      	ldr	r3, [pc, #336]	; (255c <AudioMoth_initialise+0x1a8>)
    240c:	2200      	movs	r2, #0
    240e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    2412:	ae03      	add	r6, sp, #12

    }

    /* Record that a watch dog timer reset has occurred */

    if (resetCause & RMU_RSTCAUSE_WDOGRST) {
    2414:	06eb      	lsls	r3, r5, #27
    2416:	d503      	bpl.n	2420 <AudioMoth_initialise+0x6c>
    2418:	4b50      	ldr	r3, [pc, #320]	; (255c <AudioMoth_initialise+0x1a8>)
    241a:	4a51      	ldr	r2, [pc, #324]	; (2560 <AudioMoth_initialise+0x1ac>)
    241c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    }

    /* Put GPIO pins in correct state */

    setupGPIO();
    2420:	f7ff fe0c 	bl	203c <setupGPIO>

    /* Enable interrupt on USB switch position to wake from EM2 */

    GPIO_PinModeSet(USB_GPIOPORT, USB_PIN, gpioModeInput, 0);
    2424:	2003      	movs	r0, #3
    2426:	2108      	movs	r1, #8
    2428:	2201      	movs	r2, #1
    242a:	2300      	movs	r3, #0
    242c:	f002 fce2 	bl	4df4 <GPIO_PinModeSet>

    GPIO_PinModeSet(SWITCH_GPIOPORT, SWITCH_PIN, gpioModeInput, 0);
    2430:	2002      	movs	r0, #2
    2432:	2106      	movs	r1, #6
    2434:	2201      	movs	r2, #1
    2436:	2300      	movs	r3, #0
                                    unsigned int pin,
                                    bool risingEdge,
                                    bool fallingEdge,
                                    bool enable)
{
  GPIO_ExtIntConfig(port, pin, pin, risingEdge, fallingEdge, enable);
    2438:	2401      	movs	r4, #1
    243a:	f002 fcdb 	bl	4df4 <GPIO_PinModeSet>
    243e:	2108      	movs	r1, #8
    2440:	4623      	mov	r3, r4
    2442:	460a      	mov	r2, r1
    2444:	9400      	str	r4, [sp, #0]
    2446:	9401      	str	r4, [sp, #4]
    2448:	2003      	movs	r0, #3
    244a:	f002 fc97 	bl	4d7c <GPIO_ExtIntConfig>
    244e:	2106      	movs	r1, #6
    2450:	4623      	mov	r3, r4
    2452:	460a      	mov	r2, r1
    2454:	9400      	str	r4, [sp, #0]
    2456:	9401      	str	r4, [sp, #4]
    2458:	2002      	movs	r0, #2
    245a:	f002 fc8f 	bl	4d7c <GPIO_ExtIntConfig>

/* Functions to initialise, feed and query the watch dog timer */

static void setupWatchdogTimer(void) {

    WDOG_Init_TypeDef init = WDOG_INIT_DEFAULT;
    245e:	4b41      	ldr	r3, [pc, #260]	; (2564 <AudioMoth_initialise+0x1b0>)
    2460:	4a41      	ldr	r2, [pc, #260]	; (2568 <AudioMoth_initialise+0x1b4>)
    2462:	6818      	ldr	r0, [r3, #0]
    2464:	6859      	ldr	r1, [r3, #4]
    2466:	7a1f      	ldrb	r7, [r3, #8]
    2468:	2502      	movs	r5, #2
    246a:	4633      	mov	r3, r6
    246c:	f8c2 5180 	str.w	r5, [r2, #384]	; 0x180
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2470:	6015      	str	r5, [r2, #0]
    2472:	c303      	stmia	r3!, {r0, r1}

    init.em2Run = true;
    init.em3Run = true;
    init.perSel = wdogPeriod_64k;
    2474:	220d      	movs	r2, #13
 *   Structure holding watchdog configuration. A default setting
 *   #WDOG_INIT_DEFAULT is available for init.
 ******************************************************************************/
__STATIC_INLINE void WDOG_Init(const WDOG_Init_TypeDef *init)
{
  WDOGn_Init(DEFAULT_WDOG, init);
    2476:	4631      	mov	r1, r6
    2478:	483c      	ldr	r0, [pc, #240]	; (256c <AudioMoth_initialise+0x1b8>)

/* Functions to initialise, feed and query the watch dog timer */

static void setupWatchdogTimer(void) {

    WDOG_Init_TypeDef init = WDOG_INIT_DEFAULT;
    247a:	701f      	strb	r7, [r3, #0]

    init.em2Run = true;
    247c:	f88d 400e 	strb.w	r4, [sp, #14]
    init.em3Run = true;
    init.perSel = wdogPeriod_64k;
    2480:	f88d 2014 	strb.w	r2, [sp, #20]
static void setupWatchdogTimer(void) {

    WDOG_Init_TypeDef init = WDOG_INIT_DEFAULT;

    init.em2Run = true;
    init.em3Run = true;
    2484:	f88d 400f 	strb.w	r4, [sp, #15]
    2488:	f003 f85a 	bl	5540 <WDOGn_Init>
 *   true to enable watchdog, false to disable. Watchdog cannot be disabled if
 *   watchdog has been locked.
 ******************************************************************************/
__STATIC_INLINE void WDOG_Enable(bool enable)
{
  WDOGn_Enable(DEFAULT_WDOG, enable);
    248c:	4621      	mov	r1, r4
    248e:	4837      	ldr	r0, [pc, #220]	; (256c <AudioMoth_initialise+0x1b8>)
    2490:	f003 f834 	bl	54fc <WDOGn_Enable>

    setupWatchdogTimer();

    WDOG_Enable(true);

}
    2494:	b009      	add	sp, #36	; 0x24
    2496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 *   together to clear multiple interrupt sources for the BURTC module
 *   (BURTC_IFS_nnn).
 ******************************************************************************/
__STATIC_INLINE void BURTC_IntClear(uint32_t flags)
{
  BURTC->IFC = flags;
    249a:	2201      	movs	r2, #1
    249c:	631a      	str	r2, [r3, #48]	; 0x30
 ******************************************************************************/
__STATIC_INLINE uint32_t BURTC_RetRegGet(uint32_t num)
{
  EFM_ASSERT(num <= 127);

  return BURTC->RET[num].REG;
    249e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104

    BURTC_IntClear(BURTC_IF_OF);

    uint32_t offsetHigh = BURTC_RetRegGet(AM_BURTC_TIME_OFFSET_HIGH);

    BURTC_RetRegSet(AM_BURTC_TIME_OFFSET_HIGH, offsetHigh + 1);
    24a2:	3201      	adds	r2, #1
 ******************************************************************************/
__STATIC_INLINE void BURTC_RetRegSet(uint32_t num, uint32_t data)
{
  EFM_ASSERT(num <= 127);

  BURTC->RET[num].REG = data;
    24a4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 *   together to set multiple interrupt sources for the BURTC module
 *   (BURTC_IFS_nnn).
 ******************************************************************************/
__STATIC_INLINE void BURTC_IntEnable(uint32_t flags)
{
  BURTC->IEN |= flags;
    24a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    24aa:	f042 0201 	orr.w	r2, r2, #1
    24ae:	635a      	str	r2, [r3, #52]	; 0x34
    24b0:	e7ab      	b.n	240a <AudioMoth_initialise+0x56>

    if ((resetCause & RMU_RSTCAUSE_EM4WURST) == 0) {

        /* Start LFXO and wait until it is stable */

        CMU_OscillatorEnable(cmuOsc_LFXO, true, true);
    24b2:	2101      	movs	r1, #1

static void setupBackupDomain(void) {

    /* Initialise GPIO, BURTC and EM4 registers */

    EMU_EM4Init_TypeDef em4Init = EMU_EM4INIT_DEFAULT;
    24b4:	4f2e      	ldr	r7, [pc, #184]	; (2570 <AudioMoth_initialise+0x1bc>)
{
#if defined(BITBAND_PER_BASE)
  uint32_t aliasAddr =
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);

  *(volatile uint32_t *)aliasAddr = (uint32_t)val;
    24b6:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 2578 <AudioMoth_initialise+0x1c4>

    if ((resetCause & RMU_RSTCAUSE_EM4WURST) == 0) {

        /* Start LFXO and wait until it is stable */

        CMU_OscillatorEnable(cmuOsc_LFXO, true, true);
    24ba:	460a      	mov	r2, r1
    24bc:	4620      	mov	r0, r4
    24be:	f001 fec1 	bl	4244 <CMU_OscillatorEnable>

    /* Initialise GPIO, BURTC and EM4 registers */

    EMU_EM4Init_TypeDef em4Init = EMU_EM4INIT_DEFAULT;

    em4Init.vreg = true;
    24c2:	f04f 0801 	mov.w	r8, #1

static void setupBackupDomain(void) {

    /* Initialise GPIO, BURTC and EM4 registers */

    EMU_EM4Init_TypeDef em4Init = EMU_EM4INIT_DEFAULT;
    24c6:	f857 0b08 	ldr.w	r0, [r7], #8
    24ca:	9003      	str	r0, [sp, #12]

    em4Init.vreg = true;
    em4Init.lockConfig = true;
    em4Init.buRtcWakeup = true;
    em4Init.osc = emuEM4Osc_LFXO;
    24cc:	2308      	movs	r3, #8

static void setupBackupDomain(void) {

    /* Initialise GPIO, BURTC and EM4 registers */

    EMU_EM4Init_TypeDef em4Init = EMU_EM4INIT_DEFAULT;
    24ce:	ae03      	add	r6, sp, #12

    em4Init.vreg = true;
    em4Init.lockConfig = true;
    em4Init.buRtcWakeup = true;
    em4Init.osc = emuEM4Osc_LFXO;
    24d0:	f88d 300e 	strb.w	r3, [sp, #14]

    /* Initialise GPIO, BURTC and EM4 registers */

    EMU_EM4Init_TypeDef em4Init = EMU_EM4INIT_DEFAULT;

    em4Init.vreg = true;
    24d4:	f88d 8010 	strb.w	r8, [sp, #16]
    em4Init.lockConfig = true;
    24d8:	f88d 800c 	strb.w	r8, [sp, #12]
    em4Init.buRtcWakeup = true;
    24dc:	f88d 800f 	strb.w	r8, [sp, #15]

    /* Unlock configuration */

    EMU_EM4Lock(false);

    EMU_EM4Init(&em4Init);
    24e0:	4630      	mov	r0, r6
    24e2:	f8c9 4000 	str.w	r4, [r9]
    24e6:	f002 fc33 	bl	4d50 <EMU_EM4Init>

    /* Enable access to BURTC registers */

    RMU_ResetControl(rmuResetBU, false);
    24ea:	2002      	movs	r0, #2
    24ec:	4621      	mov	r1, r4
    24ee:	f002 fe4f 	bl	5190 <RMU_ResetControl>

static void setupBackupRTC(void) {

    /* Set up BURTC to count and wake from EM4 */

    BURTC_Init_TypeDef burtcInit = BURTC_INIT_DEFAULT;
    24f2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    24f4:	46b6      	mov	lr, r6
    24f6:	f8c9 8000 	str.w	r8, [r9]
    24fa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    24fe:	683b      	ldr	r3, [r7, #0]
    2500:	f8ce 3000 	str.w	r3, [lr]

    burtcInit.mode = burtcModeEM4;
    2504:	2103      	movs	r1, #3
    burtcInit.clkSel = burtcClkSelLFXO;
    2506:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    burtcInit.clkDiv = burtcClkDiv_32;
    250a:	2320      	movs	r3, #32
    burtcInit.timeStamp = false;
    burtcInit.compare0Top = false;
    burtcInit.enable = false;
    burtcInit.lowPowerMode = burtcLPDisable;

    BURTC_Init(&burtcInit);
    250c:	4630      	mov	r0, r6

    /* Set up BURTC to count and wake from EM4 */

    BURTC_Init_TypeDef burtcInit = BURTC_INIT_DEFAULT;

    burtcInit.mode = burtcModeEM4;
    250e:	f88d 100d 	strb.w	r1, [sp, #13]
    burtcInit.clkSel = burtcClkSelLFXO;
    2512:	f8ad 2010 	strh.w	r2, [sp, #16]
    burtcInit.clkDiv = burtcClkDiv_32;
    2516:	9305      	str	r3, [sp, #20]
    burtcInit.timeStamp = false;
    2518:	f88d 401c 	strb.w	r4, [sp, #28]
    burtcInit.compare0Top = false;
    251c:	f88d 401d 	strb.w	r4, [sp, #29]
    burtcInit.enable = false;
    2520:	f88d 400c 	strb.w	r4, [sp, #12]
    burtcInit.lowPowerMode = burtcLPDisable;
    2524:	f88d 401e 	strb.w	r4, [sp, #30]

    BURTC_Init(&burtcInit);
    2528:	f001 f8ec 	bl	3704 <BURTC_Init>
 *   together to clear multiple interrupt sources for the BURTC module
 *   (BURTC_IFS_nnn).
 ******************************************************************************/
__STATIC_INLINE void BURTC_IntClear(uint32_t flags)
{
  BURTC->IFC = flags;
    252c:	4b0b      	ldr	r3, [pc, #44]	; (255c <AudioMoth_initialise+0x1a8>)
    252e:	4811      	ldr	r0, [pc, #68]	; (2574 <AudioMoth_initialise+0x1c0>)
    2530:	f8c3 8030 	str.w	r8, [r3, #48]	; 0x30
 *   together to set multiple interrupt sources for the BURTC module
 *   (BURTC_IFS_nnn).
 ******************************************************************************/
__STATIC_INLINE void BURTC_IntEnable(uint32_t flags)
{
  BURTC->IEN |= flags;
    2534:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 ******************************************************************************/
__STATIC_INLINE void BURTC_RetRegSet(uint32_t num, uint32_t data)
{
  EFM_ASSERT(num <= 127);

  BURTC->RET[num].REG = data;
    2536:	490a      	ldr	r1, [pc, #40]	; (2560 <AudioMoth_initialise+0x1ac>)
 *   together to set multiple interrupt sources for the BURTC module
 *   (BURTC_IFS_nnn).
 ******************************************************************************/
__STATIC_INLINE void BURTC_IntEnable(uint32_t flags)
{
  BURTC->IEN |= flags;
    2538:	ea42 0208 	orr.w	r2, r2, r8
    253c:	635a      	str	r2, [r3, #52]	; 0x34
 *   If true; asserts reset to BURTC, halts counter, if false; deassert reset
 ******************************************************************************/
__STATIC_INLINE void BURTC_Enable(bool enable)
{
  /* Note! If mode is disabled, BURTC counter will not start */
  EFM_ASSERT(((enable == true)
    253e:	681a      	ldr	r2, [r3, #0]
    2540:	6004      	str	r4, [r0, #0]
 ******************************************************************************/
__STATIC_INLINE void BURTC_RetRegSet(uint32_t num, uint32_t data)
{
  EFM_ASSERT(num <= 127);

  BURTC->RET[num].REG = data;
    2542:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
    2546:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    254a:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    254e:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
    2552:	e75f      	b.n	2414 <AudioMoth_initialise+0x60>
    2554:	0004d200 	.word	0x0004d200
    2558:	00024300 	.word	0x00024300
    255c:	40081000 	.word	0x40081000
    2560:	11223344 	.word	0x11223344
    2564:	0000d01c 	.word	0x0000d01c
    2568:	e000e100 	.word	0xe000e100
    256c:	40088000 	.word	0x40088000
    2570:	0000d000 	.word	0x0000d000
    2574:	4302000c 	.word	0x4302000c
    2578:	438c05c0 	.word	0x438c05c0

0000257c <GPIO_EVEN_IRQHandler>:
 * @return
 *   GPIO interrupt sources pending.
 ******************************************************************************/
__STATIC_INLINE uint32_t GPIO_IntGet(void)
{
  return GPIO->IF;
    257c:	4b03      	ldr	r3, [pc, #12]	; (258c <GPIO_EVEN_IRQHandler+0x10>)
    257e:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 * @param[in] flags
 *   Bitwise logic OR of GPIO interrupt sources to clear.
 ******************************************************************************/
__STATIC_INLINE void GPIO_IntClear(uint32_t flags)
{
  GPIO->IFC = flags;
    2582:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

    GPIO_IntClear(GPIO_IntGet());

    /* Call the interrupt handler */

    AudioMoth_handleSwitchInterrupt();
    2586:	f008 bdd7 	b.w	b138 <AudioMoth_handleSwitchInterrupt>
    258a:	bf00      	nop
    258c:	40006000 	.word	0x40006000

00002590 <ADC0_IRQHandler>:

}

void ADC0_IRQHandler(void) {
    2590:	b508      	push	{r3, lr}
 *   Pending ADC interrupt source to clear. Use a bitwise logic OR combination
 *   of valid interrupt flags for the ADC module (ADC_IF_nnn).
 ******************************************************************************/
__STATIC_INLINE void ADC_IntClear(ADC_TypeDef *adc, uint32_t flags)
{
  adc->IFC = flags;
    2592:	4b06      	ldr	r3, [pc, #24]	; (25ac <ADC0_IRQHandler+0x1c>)
    2594:	2201      	movs	r2, #1
    2596:	621a      	str	r2, [r3, #32]
 * @return
 *   Single conversion data.
 ******************************************************************************/
__STATIC_INLINE uint32_t ADC_DataSingleGet(ADC_TypeDef *adc)
{
  return adc->SINGLEDATA;
    2598:	6a58      	ldr	r0, [r3, #36]	; 0x24

    /* Send the sample to the interrupt handler */

    int16_t sample = ADC_DataSingleGet(ADC0);

    AudioMoth_handleMicrophoneInterrupt(sample);
    259a:	b200      	sxth	r0, r0
    259c:	f008 fdd2 	bl	b144 <AudioMoth_handleMicrophoneInterrupt>
 *   Deprecated function. New code should use @ref WDOGn_Feed().
 *   This function uses @ref DEFAULT_WDOG.
 ******************************************************************************/
__STATIC_INLINE void WDOG_Feed(void)
{
  WDOGn_Feed(DEFAULT_WDOG);
    25a0:	4803      	ldr	r0, [pc, #12]	; (25b0 <ADC0_IRQHandler+0x20>)

    /* Feed the watch dog timer */

    WDOG_Feed();

}
    25a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    25a6:	f002 bfbf 	b.w	5528 <WDOGn_Feed>
    25aa:	bf00      	nop
    25ac:	40002000 	.word	0x40002000
    25b0:	40088000 	.word	0x40088000

000025b4 <TIMER1_IRQHandler>:
 *   Pending TIMER interrupt source(s) to clear. Use one or more valid
 *   interrupt flags for the TIMER module (TIMER_IF_nnn) OR'ed together.
 ******************************************************************************/
__STATIC_INLINE void TIMER_IntClear(TIMER_TypeDef *timer, uint32_t flags)
{
  timer->IFC = flags;
    25b4:	4903      	ldr	r1, [pc, #12]	; (25c4 <TIMER1_IRQHandler+0x10>)

  TIMER_IntClear(TIMER1, TIMER_IF_OF);

  /* Reset the flag */

  delayTimmerRunning = false;
    25b6:	4b04      	ldr	r3, [pc, #16]	; (25c8 <TIMER1_IRQHandler+0x14>)
    25b8:	2001      	movs	r0, #1
    25ba:	2200      	movs	r2, #0
    25bc:	6188      	str	r0, [r1, #24]
    25be:	701a      	strb	r2, [r3, #0]
    25c0:	4770      	bx	lr
    25c2:	bf00      	nop
    25c4:	40010400 	.word	0x40010400
    25c8:	200010bc 	.word	0x200010bc

000025cc <AudioMoth_startMicrophoneSamples>:

}

/* Functions to initialise the microphone */

void AudioMoth_startMicrophoneSamples(uint32_t sampleRate) {
    25cc:	b538      	push	{r3, r4, r5, lr}

static void enablePrsTimer(uint32_t sampleRate) {

    CMU_ClockEnable(cmuClock_PRS, true);

    CMU_ClockEnable(cmuClock_TIMER2, true);
    25ce:	4d0f      	ldr	r5, [pc, #60]	; (260c <AudioMoth_startMicrophoneSamples+0x40>)

}

/* Functions to initialise the microphone */

void AudioMoth_startMicrophoneSamples(uint32_t sampleRate) {
    25d0:	4604      	mov	r4, r0

}

static void enablePrsTimer(uint32_t sampleRate) {

    CMU_ClockEnable(cmuClock_PRS, true);
    25d2:	2101      	movs	r1, #1
    25d4:	480e      	ldr	r0, [pc, #56]	; (2610 <AudioMoth_startMicrophoneSamples+0x44>)
    25d6:	f001 fc3f 	bl	3e58 <CMU_ClockEnable>

    CMU_ClockEnable(cmuClock_TIMER2, true);
    25da:	4628      	mov	r0, r5
    25dc:	2101      	movs	r1, #1
    25de:	f001 fc3b 	bl	3e58 <CMU_ClockEnable>

    /* Connect PRS channel 0 to TIMER overflow */

    PRS_SourceSignalSet(0, PRS_CH_CTRL_SOURCESEL_TIMER2, PRS_CH_CTRL_SIGSEL_TIMER2OF, prsEdgeOff);
    25e2:	2000      	movs	r0, #0
    25e4:	4603      	mov	r3, r0
    25e6:	f44f 11f0 	mov.w	r1, #1966080	; 0x1e0000
    25ea:	2201      	movs	r2, #1
    25ec:	f002 fdc2 	bl	5174 <PRS_SourceSignalSet>

    /* Configure TIMER to trigger on sampling rate */

    TIMER_TopSet(TIMER2,  CMU_ClockFreqGet(cmuClock_TIMER2) / sampleRate - 1);
    25f0:	4628      	mov	r0, r5
    25f2:	f001 fb59 	bl	3ca8 <CMU_ClockFreqGet>
 *   Value to set in top value register.
 ******************************************************************************/
__STATIC_INLINE void TIMER_TopSet(TIMER_TypeDef *timer, uint32_t val)
{
  EFM_ASSERT(val <= TIMER_MaxCount(timer));
  timer->TOP = val;
    25f6:	4a07      	ldr	r2, [pc, #28]	; (2614 <AudioMoth_startMicrophoneSamples+0x48>)
 * @param[in] cmd
 *   Command indicating which type of sampling to start.
 ******************************************************************************/
__STATIC_INLINE void ADC_Start(ADC_TypeDef *adc, ADC_Start_TypeDef cmd)
{
  adc->CMD = (uint32_t)cmd;
    25f8:	4907      	ldr	r1, [pc, #28]	; (2618 <AudioMoth_startMicrophoneSamples+0x4c>)
    25fa:	fbb0 f0f4 	udiv	r0, r0, r4
__STATIC_INLINE void TIMER_Enable(TIMER_TypeDef *timer, bool enable)
{
  EFM_ASSERT(TIMER_REF_VALID(timer));

  if (enable) {
    timer->CMD = TIMER_CMD_START;
    25fe:	2301      	movs	r3, #1
    2600:	3801      	subs	r0, #1
 *   Value to set in top value register.
 ******************************************************************************/
__STATIC_INLINE void TIMER_TopSet(TIMER_TypeDef *timer, uint32_t val)
{
  EFM_ASSERT(val <= TIMER_MaxCount(timer));
  timer->TOP = val;
    2602:	61d0      	str	r0, [r2, #28]
__STATIC_INLINE void TIMER_Enable(TIMER_TypeDef *timer, bool enable)
{
  EFM_ASSERT(TIMER_REF_VALID(timer));

  if (enable) {
    timer->CMD = TIMER_CMD_START;
    2604:	6053      	str	r3, [r2, #4]
    2606:	604b      	str	r3, [r1, #4]
    2608:	bd38      	pop	{r3, r4, r5, pc}
    260a:	bf00      	nop
    260c:	00047200 	.word	0x00047200
    2610:	0004f200 	.word	0x0004f200
    2614:	40010800 	.word	0x40010800
    2618:	40002000 	.word	0x40002000

0000261c <AudioMoth_initialiseDirectMemoryAccess>:

    NVIC_EnableIRQ(ADC0_IRQn);

}

void AudioMoth_initialiseDirectMemoryAccess(int16_t *primaryBuffer, int16_t *secondaryBuffer, uint16_t numberOfSamples) {
    261c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    numberOfSamplesPerTransfer = numberOfSamples;

    if (numberOfSamplesPerTransfer > 1024) numberOfSamplesPerTransfer = 1024;
    2620:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    2624:	4e28      	ldr	r6, [pc, #160]	; (26c8 <AudioMoth_initialiseDirectMemoryAccess+0xac>)

    NVIC_EnableIRQ(ADC0_IRQn);

}

void AudioMoth_initialiseDirectMemoryAccess(int16_t *primaryBuffer, int16_t *secondaryBuffer, uint16_t numberOfSamples) {
    2626:	b08c      	sub	sp, #48	; 0x30

    numberOfSamplesPerTransfer = numberOfSamples;

    if (numberOfSamplesPerTransfer > 1024) numberOfSamplesPerTransfer = 1024;
    2628:	bf88      	it	hi
    262a:	f44f 6380 	movhi.w	r3, #1024	; 0x400

    NVIC_EnableIRQ(ADC0_IRQn);

}

void AudioMoth_initialiseDirectMemoryAccess(int16_t *primaryBuffer, int16_t *secondaryBuffer, uint16_t numberOfSamples) {
    262e:	4607      	mov	r7, r0
    2630:	4688      	mov	r8, r1

    if (numberOfSamplesPerTransfer > 1024) numberOfSamplesPerTransfer = 1024;

    /* Start the clock */

    CMU_ClockEnable(cmuClock_DMA, true);
    2632:	4826      	ldr	r0, [pc, #152]	; (26cc <AudioMoth_initialiseDirectMemoryAccess+0xb0>)

}

void AudioMoth_initialiseDirectMemoryAccess(int16_t *primaryBuffer, int16_t *secondaryBuffer, uint16_t numberOfSamples) {

    numberOfSamplesPerTransfer = numberOfSamples;
    2634:	bf98      	it	ls
    2636:	8032      	strhls	r2, [r6, #0]

    if (numberOfSamplesPerTransfer > 1024) numberOfSamplesPerTransfer = 1024;

    /* Start the clock */

    CMU_ClockEnable(cmuClock_DMA, true);
    2638:	f04f 0101 	mov.w	r1, #1

    /* Initialise the DMA structure */

    DMA_Init_TypeDef dmaInit;

    dmaInit.hprot        = 0;
    263c:	f04f 0400 	mov.w	r4, #0

void AudioMoth_initialiseDirectMemoryAccess(int16_t *primaryBuffer, int16_t *secondaryBuffer, uint16_t numberOfSamples) {

    numberOfSamplesPerTransfer = numberOfSamples;

    if (numberOfSamplesPerTransfer > 1024) numberOfSamplesPerTransfer = 1024;
    2640:	bf88      	it	hi
    2642:	8033      	strhhi	r3, [r6, #0]

    /* Start the clock */

    CMU_ClockEnable(cmuClock_DMA, true);
    2644:	f001 fc08 	bl	3e58 <CMU_ClockEnable>
    /* Initialise the DMA structure */

    DMA_Init_TypeDef dmaInit;

    dmaInit.hprot        = 0;
    dmaInit.controlBlock = dmaControlBlock;
    2648:	4b21      	ldr	r3, [pc, #132]	; (26d0 <AudioMoth_initialiseDirectMemoryAccess+0xb4>)
    264a:	9308      	str	r3, [sp, #32]

    DMA_Init(&dmaInit);
    264c:	a807      	add	r0, sp, #28

    /* Initialise the DMA structure */

    DMA_Init_TypeDef dmaInit;

    dmaInit.hprot        = 0;
    264e:	f88d 401c 	strb.w	r4, [sp, #28]
    dmaInit.controlBlock = dmaControlBlock;

    DMA_Init(&dmaInit);
    2652:	f001 ff3f 	bl	44d4 <DMA_Init>

    /* Setting up call-back function */

    cb.cbFunc  = transferComplete;
    2656:	4b1f      	ldr	r3, [pc, #124]	; (26d4 <AudioMoth_initialiseDirectMemoryAccess+0xb8>)
    2658:	f8df e080 	ldr.w	lr, [pc, #128]	; 26dc <AudioMoth_initialiseDirectMemoryAccess+0xc0>
    265c:	f8c3 e000 	str.w	lr, [r3]
    /* Setting up channel */

    DMA_CfgChannel_TypeDef chnlCfg;

    chnlCfg.highPri   = false;
    chnlCfg.enableInt = true;
    2660:	2501      	movs	r5, #1
    chnlCfg.select    = DMAREQ_ADC0_SINGLE;
    chnlCfg.cb        = &cb;

    DMA_CfgChannel(0, &chnlCfg);
    2662:	4620      	mov	r0, r4

    DMA_CfgChannel_TypeDef chnlCfg;

    chnlCfg.highPri   = false;
    chnlCfg.enableInt = true;
    chnlCfg.select    = DMAREQ_ADC0_SINGLE;
    2664:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    chnlCfg.cb        = &cb;

    DMA_CfgChannel(0, &chnlCfg);
    2668:	a909      	add	r1, sp, #36	; 0x24
    DMA_Init(&dmaInit);

    /* Setting up call-back function */

    cb.cbFunc  = transferComplete;
    cb.userPtr = NULL;
    266a:	605c      	str	r4, [r3, #4]
    DMA_CfgChannel_TypeDef chnlCfg;

    chnlCfg.highPri   = false;
    chnlCfg.enableInt = true;
    chnlCfg.select    = DMAREQ_ADC0_SINGLE;
    chnlCfg.cb        = &cb;
    266c:	930b      	str	r3, [sp, #44]	; 0x2c

    DMA_CfgChannel_TypeDef chnlCfg;

    chnlCfg.highPri   = false;
    chnlCfg.enableInt = true;
    chnlCfg.select    = DMAREQ_ADC0_SINGLE;
    266e:	920a      	str	r2, [sp, #40]	; 0x28

    /* Setting up channel */

    DMA_CfgChannel_TypeDef chnlCfg;

    chnlCfg.highPri   = false;
    2670:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
    chnlCfg.enableInt = true;
    2674:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
    chnlCfg.select    = DMAREQ_ADC0_SINGLE;
    chnlCfg.cb        = &cb;

    DMA_CfgChannel(0, &chnlCfg);
    2678:	f001 fee4 	bl	4444 <DMA_CfgChannel>
    /* Setting up channel descriptor */

    DMA_CfgDescr_TypeDef descrCfg;

    descrCfg.dstInc  = dmaDataInc2;
    descrCfg.srcInc  = dmaDataIncNone;
    267c:	2303      	movs	r3, #3
    descrCfg.arbRate = dmaArbitrate1;
    descrCfg.hprot   = 0;

    /* Set up both the primary and the secondary transfers */

    DMA_CfgDescr(0, true, &descrCfg);
    267e:	4629      	mov	r1, r5
    2680:	4620      	mov	r0, r4
    2682:	aa05      	add	r2, sp, #20
    /* Setting up channel descriptor */

    DMA_CfgDescr_TypeDef descrCfg;

    descrCfg.dstInc  = dmaDataInc2;
    descrCfg.srcInc  = dmaDataIncNone;
    2684:	f88d 3015 	strb.w	r3, [sp, #21]

    /* Setting up channel descriptor */

    DMA_CfgDescr_TypeDef descrCfg;

    descrCfg.dstInc  = dmaDataInc2;
    2688:	f88d 5014 	strb.w	r5, [sp, #20]
    descrCfg.srcInc  = dmaDataIncNone;
    descrCfg.size    = dmaDataSize2;
    268c:	f88d 5016 	strb.w	r5, [sp, #22]
    descrCfg.arbRate = dmaArbitrate1;
    2690:	f88d 4017 	strb.w	r4, [sp, #23]
    descrCfg.hprot   = 0;
    2694:	f88d 4018 	strb.w	r4, [sp, #24]

    /* Set up both the primary and the secondary transfers */

    DMA_CfgDescr(0, true, &descrCfg);
    2698:	f001 fefe 	bl	4498 <DMA_CfgDescr>
    DMA_CfgDescr(0, false, &descrCfg);
    269c:	4620      	mov	r0, r4
    269e:	4621      	mov	r1, r4
    26a0:	aa05      	add	r2, sp, #20
    26a2:	f001 fef9 	bl	4498 <DMA_CfgDescr>
        (void*)primaryBuffer,
        (void*)&(ADC0->SINGLEDATA),
        numberOfSamplesPerTransfer - 1,
        (void*)secondaryBuffer,
        (void*)&(ADC0->SINGLEDATA),
        numberOfSamplesPerTransfer - 1);
    26a6:	8832      	ldrh	r2, [r6, #0]

    DMA_CfgDescr(0, true, &descrCfg);
    DMA_CfgDescr(0, false, &descrCfg);

    /* Set up the first transfer */
    DMA_ActivatePingPong(0,
    26a8:	4b0b      	ldr	r3, [pc, #44]	; (26d8 <AudioMoth_initialiseDirectMemoryAccess+0xbc>)
    26aa:	f8cd 8004 	str.w	r8, [sp, #4]
        (void*)primaryBuffer,
        (void*)&(ADC0->SINGLEDATA),
        numberOfSamplesPerTransfer - 1,
        (void*)secondaryBuffer,
        (void*)&(ADC0->SINGLEDATA),
        numberOfSamplesPerTransfer - 1);
    26ae:	3a01      	subs	r2, #1

    DMA_CfgDescr(0, true, &descrCfg);
    DMA_CfgDescr(0, false, &descrCfg);

    /* Set up the first transfer */
    DMA_ActivatePingPong(0,
    26b0:	9200      	str	r2, [sp, #0]
    26b2:	9203      	str	r2, [sp, #12]
    26b4:	4620      	mov	r0, r4
    26b6:	463a      	mov	r2, r7
    26b8:	4621      	mov	r1, r4
    26ba:	9302      	str	r3, [sp, #8]
    26bc:	f001 fe46 	bl	434c <DMA_ActivatePingPong>
        numberOfSamplesPerTransfer - 1,
        (void*)secondaryBuffer,
        (void*)&(ADC0->SINGLEDATA),
        numberOfSamplesPerTransfer - 1);

}
    26c0:	b00c      	add	sp, #48	; 0x30
    26c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    26c6:	bf00      	nop
    26c8:	20000e94 	.word	0x20000e94
    26cc:	00020300 	.word	0x00020300
    26d0:	20002400 	.word	0x20002400
    26d4:	20000c54 	.word	0x20000c54
    26d8:	40002024 	.word	0x40002024
    26dc:	00002371 	.word	0x00002371

000026e0 <AudioMoth_enableMicrophone>:

void AudioMoth_enableMicrophone(uint32_t gain, uint32_t clockDivider, uint32_t acquisitionCycles, uint32_t oversampleRate) {
    26e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 ******************************************************************************/
__STATIC_INLINE void GPIO_PinOutClear(GPIO_Port_TypeDef port, unsigned int pin)
{
  EFM_ASSERT(GPIO_PORT_PIN_VALID(port, pin));
#if defined(_GPIO_P_DOUTCLR_MASK)
  GPIO->P[port].DOUTCLR = 1 << pin;
    26e4:	4c81      	ldr	r4, [pc, #516]	; (28ec <AudioMoth_enableMicrophone+0x20c>)
    26e6:	2501      	movs	r5, #1
 ******************************************************************************/
__STATIC_INLINE void GPIO_PinOutSet(GPIO_Port_TypeDef port, unsigned int pin)
{
  EFM_ASSERT(GPIO_PORT_PIN_VALID(port, pin));
#if defined(_GPIO_P_DOUTSET_MASK)
  GPIO->P[port].DOUTSET = 1 << pin;
    26e8:	f44f 6700 	mov.w	r7, #2048	; 0x800
 ******************************************************************************/
__STATIC_INLINE void GPIO_PinOutClear(GPIO_Port_TypeDef port, unsigned int pin)
{
  EFM_ASSERT(GPIO_PORT_PIN_VALID(port, pin));
#if defined(_GPIO_P_DOUTCLR_MASK)
  GPIO->P[port].DOUTCLR = 1 << pin;
    26ec:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
 ******************************************************************************/
__STATIC_INLINE void GPIO_PinOutSet(GPIO_Port_TypeDef port, unsigned int pin)
{
  EFM_ASSERT(GPIO_PORT_PIN_VALID(port, pin));
#if defined(_GPIO_P_DOUTSET_MASK)
  GPIO->P[port].DOUTSET = 1 << pin;
    26f0:	6127      	str	r7, [r4, #16]

    CMU_ClockEnable(cmuClock_DAC0, true);

    /* Define the configuration for OPA1 and OPA2 */

    OPAMP_Init_TypeDef configuration1 = OPA_INIT_INVERTING;
    26f2:	4c7f      	ldr	r4, [pc, #508]	; (28f0 <AudioMoth_enableMicrophone+0x210>)
        (void*)&(ADC0->SINGLEDATA),
        numberOfSamplesPerTransfer - 1);

}

void AudioMoth_enableMicrophone(uint32_t gain, uint32_t clockDivider, uint32_t acquisitionCycles, uint32_t oversampleRate) {
    26f4:	b095      	sub	sp, #84	; 0x54
    26f6:	4681      	mov	r9, r0
    26f8:	460e      	mov	r6, r1

static void setupOpAmp(uint32_t gain) {

    /* Start the clock */

    CMU_ClockEnable(cmuClock_DAC0, true);
    26fa:	487e      	ldr	r0, [pc, #504]	; (28f4 <AudioMoth_enableMicrophone+0x214>)
    26fc:	4629      	mov	r1, r5
        (void*)&(ADC0->SINGLEDATA),
        numberOfSamplesPerTransfer - 1);

}

void AudioMoth_enableMicrophone(uint32_t gain, uint32_t clockDivider, uint32_t acquisitionCycles, uint32_t oversampleRate) {
    26fe:	4690      	mov	r8, r2
    2700:	461f      	mov	r7, r3

static void setupOpAmp(uint32_t gain) {

    /* Start the clock */

    CMU_ClockEnable(cmuClock_DAC0, true);
    2702:	f001 fba9 	bl	3e58 <CMU_ClockEnable>

    /* Define the configuration for OPA1 and OPA2 */

    OPAMP_Init_TypeDef configuration1 = OPA_INIT_INVERTING;
    2706:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    2708:	466d      	mov	r5, sp
    270a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    270c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    270e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2710:	e894 0003 	ldmia.w	r4, {r0, r1}

    OPAMP_Init_TypeDef configuration2 = OPA_INIT_INVERTING_OPA2;
    2714:	3408      	adds	r4, #8

    CMU_ClockEnable(cmuClock_DAC0, true);

    /* Define the configuration for OPA1 and OPA2 */

    OPAMP_Init_TypeDef configuration1 = OPA_INIT_INVERTING;
    2716:	e885 0003 	stmia.w	r5, {r0, r1}

    OPAMP_Init_TypeDef configuration2 = OPA_INIT_INVERTING_OPA2;
    271a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    271c:	ad0a      	add	r5, sp, #40	; 0x28
    271e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2720:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    2722:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2724:	e894 0003 	ldmia.w	r4, {r0, r1}

    configuration2.outPen = DAC_OPA2MUX_OUTPEN_OUT1;
    2728:	f44f 4300 	mov.w	r3, #32768	; 0x8000

    if (gain == 4) {
    272c:	f1b9 0f04 	cmp.w	r9, #4

    /* Define the configuration for OPA1 and OPA2 */

    OPAMP_Init_TypeDef configuration1 = OPA_INIT_INVERTING;

    OPAMP_Init_TypeDef configuration2 = OPA_INIT_INVERTING_OPA2;
    2730:	e885 0003 	stmia.w	r5, {r0, r1}

    configuration2.outPen = DAC_OPA2MUX_OUTPEN_OUT1;
    2734:	930e      	str	r3, [sp, #56]	; 0x38

    if (gain == 4) {
    2736:	f000 80b4 	beq.w	28a2 <AudioMoth_enableMicrophone+0x1c2>

        configuration1.resSel = opaResSelR2eq15R1;
        configuration2.resSel = opaResSelR2eq2R1;

    } else if (gain == 3) {
    273a:	f1b9 0f03 	cmp.w	r9, #3
    273e:	f000 80bb 	beq.w	28b8 <AudioMoth_enableMicrophone+0x1d8>

        configuration1.resSel = opaResSelR2eq15R1;
        configuration2.resSel = opaResSelR1eq1_67R1;

    } else if (gain == 2) {
    2742:	f1b9 0f02 	cmp.w	r9, #2
    2746:	f000 80c6 	beq.w	28d6 <AudioMoth_enableMicrophone+0x1f6>

        configuration1.resSel = opaResSelR2eq15R1;
        configuration2.resSel = opaResSelR2eqR1;

    } else if (gain == 1) {
    274a:	f1b9 0f01 	cmp.w	r9, #1

        configuration1.resSel = opaResSelR2eq7R1;
    274e:	bf0c      	ite	eq
    2750:	f04f 42c0 	moveq.w	r2, #1610612736	; 0x60000000
        configuration2.resSel = opaResSelR2eqR1;

    } else {

        configuration1.resSel = opaResSelR2eq4_33R1;
    2754:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
        configuration2.resSel = opaResSelR2eqR1;
    2758:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
        configuration1.resSel = opaResSelR2eq7R1;
        configuration2.resSel = opaResSelR2eqR1;

    } else {

        configuration1.resSel = opaResSelR2eq4_33R1;
    275c:	9202      	str	r2, [sp, #8]
        configuration2.resSel = opaResSelR2eqR1;
    275e:	930c      	str	r3, [sp, #48]	; 0x30
    }


    /* Enable OPA1 and OPA2 */

    OPAMP_Enable(DAC0, OPA1, &configuration1);
    2760:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    2764:	2101      	movs	r1, #1
    2766:	466a      	mov	r2, sp
    2768:	f002 fb92 	bl	4e90 <OPAMP_Enable>

    OPAMP_Enable(DAC0, OPA2, &configuration2);
    276c:	aa0a      	add	r2, sp, #40	; 0x28
    276e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    2772:	2102      	movs	r1, #2
    2774:	f002 fb8c 	bl	4e90 <OPAMP_Enable>

    /* Disable the clock */

    CMU_ClockEnable(cmuClock_DAC0, false);
    2778:	485e      	ldr	r0, [pc, #376]	; (28f4 <AudioMoth_enableMicrophone+0x214>)
    277a:	2100      	movs	r1, #0
    277c:	f001 fb6c 	bl	3e58 <CMU_ClockEnable>

static void setupADC(uint32_t clockDivider, uint32_t acquisitionCycles, uint32_t oversampleRate) {

    /* Start the clock */

    CMU_ClockEnable(cmuClock_ADC0, true);
    2780:	485d      	ldr	r0, [pc, #372]	; (28f8 <AudioMoth_enableMicrophone+0x218>)
    2782:	2101      	movs	r1, #1
    2784:	f001 fb68 	bl	3e58 <CMU_ClockEnable>

    /* Configure ADC initialisation structure */

    ADC_Init_TypeDef adcInit = ADC_INIT_DEFAULT;
    2788:	2300      	movs	r3, #0
    278a:	221f      	movs	r2, #31
    278c:	f88d 3000 	strb.w	r3, [sp]
    2790:	f88d 3001 	strb.w	r3, [sp, #1]
    2794:	f88d 3005 	strb.w	r3, [sp, #5]
    2798:	f88d 2003 	strb.w	r2, [sp, #3]

    if (clockDivider < 1) clockDivider = 1;
    279c:	b12e      	cbz	r6, 27aa <AudioMoth_enableMicrophone+0xca>

    if (clockDivider > 128) clockDivider = 128;
    279e:	2e80      	cmp	r6, #128	; 0x80
    27a0:	bf9a      	itte	ls
    27a2:	f106 36ff 	addls.w	r6, r6, #4294967295
    27a6:	b2f6      	uxtbls	r6, r6
    27a8:	267f      	movhi	r6, #127	; 0x7f

    adcInit.prescale = (clockDivider - 1);

    adcInit.warmUpMode = adcWarmupKeepADCWarm;
    27aa:	2403      	movs	r4, #3

    adcInit.timebase = ADC_TimebaseCalc(0);
    27ac:	2000      	movs	r0, #0

    if (clockDivider < 1) clockDivider = 1;

    if (clockDivider > 128) clockDivider = 128;

    adcInit.prescale = (clockDivider - 1);
    27ae:	f88d 6004 	strb.w	r6, [sp, #4]

    adcInit.warmUpMode = adcWarmupKeepADCWarm;
    27b2:	f88d 4002 	strb.w	r4, [sp, #2]

    adcInit.timebase = ADC_TimebaseCalc(0);
    27b6:	f000 ff87 	bl	36c8 <ADC_TimebaseCalc>

    adcInit.lpfMode = adcLPFilterRC;
    27ba:	2302      	movs	r3, #2

    if (oversampleRate == 128) {
    27bc:	2f80      	cmp	r7, #128	; 0x80

    adcInit.prescale = (clockDivider - 1);

    adcInit.warmUpMode = adcWarmupKeepADCWarm;

    adcInit.timebase = ADC_TimebaseCalc(0);
    27be:	f88d 0003 	strb.w	r0, [sp, #3]

    adcInit.lpfMode = adcLPFilterRC;
    27c2:	f88d 3001 	strb.w	r3, [sp, #1]

    if (oversampleRate == 128) {
    27c6:	d027      	beq.n	2818 <AudioMoth_enableMicrophone+0x138>
        adcInit.ovsRateSel = adcOvsRateSel128;
    } else if (oversampleRate == 64) {
    27c8:	2f40      	cmp	r7, #64	; 0x40
    27ca:	d05b      	beq.n	2884 <AudioMoth_enableMicrophone+0x1a4>
        adcInit.ovsRateSel = adcOvsRateSel64;
    } else if (oversampleRate == 32) {
    27cc:	2f20      	cmp	r7, #32
    27ce:	d060      	beq.n	2892 <AudioMoth_enableMicrophone+0x1b2>
        adcInit.ovsRateSel = adcOvsRateSel32;
    } else if (oversampleRate == 16) {
    27d0:	2f10      	cmp	r7, #16
    27d2:	f000 8087 	beq.w	28e4 <AudioMoth_enableMicrophone+0x204>
        adcInit.ovsRateSel = adcOvsRateSel16;
    } else if (oversampleRate == 8) {
    27d6:	2f08      	cmp	r7, #8
    27d8:	d060      	beq.n	289c <AudioMoth_enableMicrophone+0x1bc>
        adcInit.ovsRateSel = adcOvsRateSel8;
    } else if (oversampleRate == 4) {
    27da:	2f04      	cmp	r7, #4
    27dc:	d05d      	beq.n	289a <AudioMoth_enableMicrophone+0x1ba>
        adcInit.ovsRateSel = adcOvsRateSel4;
    } else {
        adcInit.ovsRateSel = adcOvsRateSel2;
    }

    ADC_Init(ADC0, &adcInit);
    27de:	4d47      	ldr	r5, [pc, #284]	; (28fc <AudioMoth_enableMicrophone+0x21c>)
    } else if (oversampleRate == 8) {
        adcInit.ovsRateSel = adcOvsRateSel8;
    } else if (oversampleRate == 4) {
        adcInit.ovsRateSel = adcOvsRateSel4;
    } else {
        adcInit.ovsRateSel = adcOvsRateSel2;
    27e0:	2400      	movs	r4, #0
    }

    ADC_Init(ADC0, &adcInit);
    27e2:	4669      	mov	r1, sp
    27e4:	4628      	mov	r0, r5
    } else if (oversampleRate == 8) {
        adcInit.ovsRateSel = adcOvsRateSel8;
    } else if (oversampleRate == 4) {
        adcInit.ovsRateSel = adcOvsRateSel4;
    } else {
        adcInit.ovsRateSel = adcOvsRateSel2;
    27e6:	f88d 4000 	strb.w	r4, [sp]
    }

    ADC_Init(ADC0, &adcInit);
    27ea:	f000 fed5 	bl	3598 <ADC_Init>
    /* Configure ADC single conversion structure */

    ADC_InitSingle_TypeDef adcInitSingle = ADC_INITSINGLE_DEFAULT;

    adcInitSingle.prsSel = adcPRSSELCh0;
    adcInitSingle.reference = adcRef2V5;
    27ee:	2301      	movs	r3, #1

    ADC_Init(ADC0, &adcInit);

    /* SCAN mode voltage reference must match the reference selected for SINGLE mode conversions */

    ADC0->SCANCTRL = ADC_SCANCTRL_REF_2V5;
    27f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    ADC_InitSingle_TypeDef adcInitSingle = ADC_INITSINGLE_DEFAULT;

    adcInitSingle.prsSel = adcPRSSELCh0;
    adcInitSingle.reference = adcRef2V5;

    if (oversampleRate == 1) {
    27f4:	429f      	cmp	r7, r3

    ADC_Init(ADC0, &adcInit);

    /* SCAN mode voltage reference must match the reference selected for SINGLE mode conversions */

    ADC0->SCANCTRL = ADC_SCANCTRL_REF_2V5;
    27f6:	612a      	str	r2, [r5, #16]

    /* Configure ADC single conversion structure */

    ADC_InitSingle_TypeDef adcInitSingle = ADC_INITSINGLE_DEFAULT;
    27f8:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
    27fc:	f88d 4029 	strb.w	r4, [sp, #41]	; 0x29
    2800:	f88d 402b 	strb.w	r4, [sp, #43]	; 0x2b
    2804:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
    2808:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
    280c:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30

    adcInitSingle.prsSel = adcPRSSELCh0;
    adcInitSingle.reference = adcRef2V5;
    2810:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a

    if (oversampleRate == 1) {
    2814:	d01c      	beq.n	2850 <AudioMoth_enableMicrophone+0x170>
    2816:	e018      	b.n	284a <AudioMoth_enableMicrophone+0x16a>
        adcInit.ovsRateSel = adcOvsRateSel4;
    } else {
        adcInit.ovsRateSel = adcOvsRateSel2;
    }

    ADC_Init(ADC0, &adcInit);
    2818:	4c38      	ldr	r4, [pc, #224]	; (28fc <AudioMoth_enableMicrophone+0x21c>)
    adcInit.timebase = ADC_TimebaseCalc(0);

    adcInit.lpfMode = adcLPFilterRC;

    if (oversampleRate == 128) {
        adcInit.ovsRateSel = adcOvsRateSel128;
    281a:	2306      	movs	r3, #6
        adcInit.ovsRateSel = adcOvsRateSel4;
    } else {
        adcInit.ovsRateSel = adcOvsRateSel2;
    }

    ADC_Init(ADC0, &adcInit);
    281c:	4669      	mov	r1, sp
    281e:	4620      	mov	r0, r4
    adcInit.timebase = ADC_TimebaseCalc(0);

    adcInit.lpfMode = adcLPFilterRC;

    if (oversampleRate == 128) {
        adcInit.ovsRateSel = adcOvsRateSel128;
    2820:	f88d 3000 	strb.w	r3, [sp]
        adcInit.ovsRateSel = adcOvsRateSel4;
    } else {
        adcInit.ovsRateSel = adcOvsRateSel2;
    }

    ADC_Init(ADC0, &adcInit);
    2824:	f000 feb8 	bl	3598 <ADC_Init>

    ADC0->SCANCTRL = ADC_SCANCTRL_REF_2V5;

    /* Configure ADC single conversion structure */

    ADC_InitSingle_TypeDef adcInitSingle = ADC_INITSINGLE_DEFAULT;
    2828:	2300      	movs	r3, #0

    ADC_Init(ADC0, &adcInit);

    /* SCAN mode voltage reference must match the reference selected for SINGLE mode conversions */

    ADC0->SCANCTRL = ADC_SCANCTRL_REF_2V5;
    282a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    /* Configure ADC single conversion structure */

    ADC_InitSingle_TypeDef adcInitSingle = ADC_INITSINGLE_DEFAULT;

    adcInitSingle.prsSel = adcPRSSELCh0;
    adcInitSingle.reference = adcRef2V5;
    282e:	2201      	movs	r2, #1

    ADC_Init(ADC0, &adcInit);

    /* SCAN mode voltage reference must match the reference selected for SINGLE mode conversions */

    ADC0->SCANCTRL = ADC_SCANCTRL_REF_2V5;
    2830:	6121      	str	r1, [r4, #16]

    /* Configure ADC single conversion structure */

    ADC_InitSingle_TypeDef adcInitSingle = ADC_INITSINGLE_DEFAULT;
    2832:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    2836:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    283a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    283e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    2842:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30

    adcInitSingle.prsSel = adcPRSSELCh0;
    adcInitSingle.reference = adcRef2V5;
    2846:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a

    	adcInitSingle.resolution = adcRes12Bit;

    } else {

        adcInitSingle.resolution = adcResOVS;
    284a:	2303      	movs	r3, #3
    284c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b

    }

    adcInitSingle.input = adcSingleInpCh0Ch1;
    adcInitSingle.prsEnable = true;
    2850:	2301      	movs	r3, #1
    adcInitSingle.diff = true;
    adcInitSingle.rep = false;

    if (acquisitionCycles == 16) {
    2852:	f1b8 0f10 	cmp.w	r8, #16
        adcInitSingle.resolution = adcResOVS;

    }

    adcInitSingle.input = adcSingleInpCh0Ch1;
    adcInitSingle.prsEnable = true;
    2856:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    adcInitSingle.diff = true;
    285a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    adcInitSingle.rep = false;

    if (acquisitionCycles == 16) {
    285e:	d027      	beq.n	28b0 <AudioMoth_enableMicrophone+0x1d0>
        adcInitSingle.acqTime = adcAcqTime16;
    } else if (acquisitionCycles == 8) {
    2860:	f1b8 0f08 	cmp.w	r8, #8
    2864:	d02f      	beq.n	28c6 <AudioMoth_enableMicrophone+0x1e6>
        adcInitSingle.acqTime = adcAcqTime8;
    } else if (acquisitionCycles == 4) {
    2866:	f1b8 0f04 	cmp.w	r8, #4
    286a:	d030      	beq.n	28ce <AudioMoth_enableMicrophone+0x1ee>
        adcInitSingle.acqTime = adcAcqTime4;
    } else if (acquisitionCycles == 2) {
    286c:	f1b8 0f02 	cmp.w	r8, #2
        adcInitSingle.acqTime = adcAcqTime2;
    2870:	bf08      	it	eq
    2872:	f88d 3029 	strbeq.w	r3, [sp, #41]	; 0x29
    } else {
        adcInitSingle.acqTime = adcAcqTime1;
    }

    ADC_InitSingle(ADC0, &adcInitSingle);
    2876:	a90a      	add	r1, sp, #40	; 0x28
    2878:	4820      	ldr	r0, [pc, #128]	; (28fc <AudioMoth_enableMicrophone+0x21c>)
    287a:	f000 fec7 	bl	360c <ADC_InitSingle>

    setupOpAmp(gain);

    setupADC(clockDivider, acquisitionCycles, oversampleRate);

}
    287e:	b015      	add	sp, #84	; 0x54
    2880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    adcInit.lpfMode = adcLPFilterRC;

    if (oversampleRate == 128) {
        adcInit.ovsRateSel = adcOvsRateSel128;
    } else if (oversampleRate == 64) {
        adcInit.ovsRateSel = adcOvsRateSel64;
    2884:	2305      	movs	r3, #5
    2886:	f88d 3000 	strb.w	r3, [sp]
        adcInit.ovsRateSel = adcOvsRateSel4;
    } else {
        adcInit.ovsRateSel = adcOvsRateSel2;
    }

    ADC_Init(ADC0, &adcInit);
    288a:	4c1c      	ldr	r4, [pc, #112]	; (28fc <AudioMoth_enableMicrophone+0x21c>)
    288c:	4669      	mov	r1, sp
    288e:	4620      	mov	r0, r4
    2890:	e7c8      	b.n	2824 <AudioMoth_enableMicrophone+0x144>
    if (oversampleRate == 128) {
        adcInit.ovsRateSel = adcOvsRateSel128;
    } else if (oversampleRate == 64) {
        adcInit.ovsRateSel = adcOvsRateSel64;
    } else if (oversampleRate == 32) {
        adcInit.ovsRateSel = adcOvsRateSel32;
    2892:	2304      	movs	r3, #4
    2894:	f88d 3000 	strb.w	r3, [sp]
    2898:	e7f7      	b.n	288a <AudioMoth_enableMicrophone+0x1aa>
    } else if (oversampleRate == 16) {
        adcInit.ovsRateSel = adcOvsRateSel16;
    } else if (oversampleRate == 8) {
        adcInit.ovsRateSel = adcOvsRateSel8;
    } else if (oversampleRate == 4) {
        adcInit.ovsRateSel = adcOvsRateSel4;
    289a:	2301      	movs	r3, #1
    289c:	f88d 3000 	strb.w	r3, [sp]
    28a0:	e7f3      	b.n	288a <AudioMoth_enableMicrophone+0x1aa>

    configuration2.outPen = DAC_OPA2MUX_OUTPEN_OUT1;

    if (gain == 4) {

        configuration1.resSel = opaResSelR2eq15R1;
    28a2:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
        configuration2.resSel = opaResSelR2eq2R1;
    28a6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000

    configuration2.outPen = DAC_OPA2MUX_OUTPEN_OUT1;

    if (gain == 4) {

        configuration1.resSel = opaResSelR2eq15R1;
    28aa:	9202      	str	r2, [sp, #8]
        configuration2.resSel = opaResSelR2eq2R1;
    28ac:	930c      	str	r3, [sp, #48]	; 0x30
    28ae:	e757      	b.n	2760 <AudioMoth_enableMicrophone+0x80>
    adcInitSingle.prsEnable = true;
    adcInitSingle.diff = true;
    adcInitSingle.rep = false;

    if (acquisitionCycles == 16) {
        adcInitSingle.acqTime = adcAcqTime16;
    28b0:	2304      	movs	r3, #4
    28b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    28b6:	e7de      	b.n	2876 <AudioMoth_enableMicrophone+0x196>
        configuration1.resSel = opaResSelR2eq15R1;
        configuration2.resSel = opaResSelR2eq2R1;

    } else if (gain == 3) {

        configuration1.resSel = opaResSelR2eq15R1;
    28b8:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
        configuration2.resSel = opaResSelR1eq1_67R1;
    28bc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
        configuration1.resSel = opaResSelR2eq15R1;
        configuration2.resSel = opaResSelR2eq2R1;

    } else if (gain == 3) {

        configuration1.resSel = opaResSelR2eq15R1;
    28c0:	9202      	str	r2, [sp, #8]
        configuration2.resSel = opaResSelR1eq1_67R1;
    28c2:	930c      	str	r3, [sp, #48]	; 0x30
    28c4:	e74c      	b.n	2760 <AudioMoth_enableMicrophone+0x80>
    adcInitSingle.rep = false;

    if (acquisitionCycles == 16) {
        adcInitSingle.acqTime = adcAcqTime16;
    } else if (acquisitionCycles == 8) {
        adcInitSingle.acqTime = adcAcqTime8;
    28c6:	2303      	movs	r3, #3
    28c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    28cc:	e7d3      	b.n	2876 <AudioMoth_enableMicrophone+0x196>
    } else if (acquisitionCycles == 4) {
        adcInitSingle.acqTime = adcAcqTime4;
    28ce:	2302      	movs	r3, #2
    28d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    28d4:	e7cf      	b.n	2876 <AudioMoth_enableMicrophone+0x196>
        configuration1.resSel = opaResSelR2eq15R1;
        configuration2.resSel = opaResSelR1eq1_67R1;

    } else if (gain == 2) {

        configuration1.resSel = opaResSelR2eq15R1;
    28d6:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
        configuration2.resSel = opaResSelR2eqR1;
    28da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
        configuration1.resSel = opaResSelR2eq15R1;
        configuration2.resSel = opaResSelR1eq1_67R1;

    } else if (gain == 2) {

        configuration1.resSel = opaResSelR2eq15R1;
    28de:	9202      	str	r2, [sp, #8]
        configuration2.resSel = opaResSelR2eqR1;
    28e0:	930c      	str	r3, [sp, #48]	; 0x30
    28e2:	e73d      	b.n	2760 <AudioMoth_enableMicrophone+0x80>
    } else if (oversampleRate == 64) {
        adcInit.ovsRateSel = adcOvsRateSel64;
    } else if (oversampleRate == 32) {
        adcInit.ovsRateSel = adcOvsRateSel32;
    } else if (oversampleRate == 16) {
        adcInit.ovsRateSel = adcOvsRateSel16;
    28e4:	f88d 4000 	strb.w	r4, [sp]
    28e8:	e7cf      	b.n	288a <AudioMoth_enableMicrophone+0x1aa>
    28ea:	bf00      	nop
    28ec:	40006000 	.word	0x40006000
    28f0:	0000d028 	.word	0x0000d028
    28f4:	00051200 	.word	0x00051200
    28f8:	00050200 	.word	0x00050200
    28fc:	40002000 	.word	0x40002000

00002900 <AudioMoth_enableExternalSRAM>:
    CMU_ClockEnable(cmuClock_ADC0, false);
    CMU_ClockEnable(cmuClock_DMA, false);

}

void AudioMoth_enableExternalSRAM(void) {
    2900:	b5f0      	push	{r4, r5, r6, r7, lr}
 ******************************************************************************/
__STATIC_INLINE void GPIO_PinOutClear(GPIO_Port_TypeDef port, unsigned int pin)
{
  EFM_ASSERT(GPIO_PORT_PIN_VALID(port, pin));
#if defined(_GPIO_P_DOUTCLR_MASK)
  GPIO->P[port].DOUTCLR = 1 << pin;
    2902:	4b75      	ldr	r3, [pc, #468]	; (2ad8 <AudioMoth_enableExternalSRAM+0x1d8>)

static void enableEBI(void) {

  /* Enable clocks */

  CMU_ClockEnable(cmuClock_EBI, true);
    2904:	4875      	ldr	r0, [pc, #468]	; (2adc <AudioMoth_enableExternalSRAM+0x1dc>)
    2906:	f44f 6200 	mov.w	r2, #2048	; 0x800
    CMU_ClockEnable(cmuClock_ADC0, false);
    CMU_ClockEnable(cmuClock_DMA, false);

}

void AudioMoth_enableExternalSRAM(void) {
    290a:	b095      	sub	sp, #84	; 0x54
    290c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

static void enableEBI(void) {

  /* Enable clocks */

  CMU_ClockEnable(cmuClock_EBI, true);
    2910:	2101      	movs	r1, #1
    2912:	f001 faa1 	bl	3e58 <CMU_ClockEnable>

  EBI_Init_TypeDef ebiConfig = EBI_INIT_DEFAULT;
    2916:	4668      	mov	r0, sp
    2918:	2100      	movs	r1, #0
    291a:	2250      	movs	r2, #80	; 0x50
    291c:	f009 fa95 	bl	be4a <memset>

  /* Configure GPIO pins as push pull */

  /* EBI AD0..07 data pins*/

  GPIO_PinModeSet(EBI_GPIOPORT_E, EBI_AD00, gpioModePushPull, 0);
    2920:	2004      	movs	r0, #4

  /* Enable clocks */

  CMU_ClockEnable(cmuClock_EBI, true);

  EBI_Init_TypeDef ebiConfig = EBI_INIT_DEFAULT;
    2922:	2401      	movs	r4, #1
    2924:	2502      	movs	r5, #2

  /* Configure GPIO pins as push pull */

  /* EBI AD0..07 data pins*/

  GPIO_PinModeSet(EBI_GPIOPORT_E, EBI_AD00, gpioModePushPull, 0);
    2926:	4602      	mov	r2, r0
    2928:	2108      	movs	r1, #8
    292a:	2300      	movs	r3, #0

  /* Enable clocks */

  CMU_ClockEnable(cmuClock_EBI, true);

  EBI_Init_TypeDef ebiConfig = EBI_INIT_DEFAULT;
    292c:	9503      	str	r5, [sp, #12]
    292e:	9504      	str	r5, [sp, #16]
    2930:	9406      	str	r4, [sp, #24]
    2932:	940e      	str	r4, [sp, #56]	; 0x38
    2934:	f88d 404c 	strb.w	r4, [sp, #76]	; 0x4c

  /* Configure GPIO pins as push pull */

  /* EBI AD0..07 data pins*/

  GPIO_PinModeSet(EBI_GPIOPORT_E, EBI_AD00, gpioModePushPull, 0);
    2938:	f002 fa5c 	bl	4df4 <GPIO_PinModeSet>
  GPIO_PinModeSet(EBI_GPIOPORT_E, EBI_AD01, gpioModePushPull, 0);
    293c:	2004      	movs	r0, #4
    293e:	4602      	mov	r2, r0
    2940:	2109      	movs	r1, #9
    2942:	2300      	movs	r3, #0
    2944:	f002 fa56 	bl	4df4 <GPIO_PinModeSet>
  GPIO_PinModeSet(EBI_GPIOPORT_E, EBI_AD02, gpioModePushPull, 0);
    2948:	2004      	movs	r0, #4
    294a:	4602      	mov	r2, r0
    294c:	210a      	movs	r1, #10
    294e:	2300      	movs	r3, #0
    2950:	f002 fa50 	bl	4df4 <GPIO_PinModeSet>
  GPIO_PinModeSet(EBI_GPIOPORT_E, EBI_AD03, gpioModePushPull, 0);
    2954:	2004      	movs	r0, #4
    2956:	4602      	mov	r2, r0
    2958:	210b      	movs	r1, #11
    295a:	2300      	movs	r3, #0
    295c:	f002 fa4a 	bl	4df4 <GPIO_PinModeSet>
  GPIO_PinModeSet(EBI_GPIOPORT_E, EBI_AD04, gpioModePushPull, 0);
    2960:	2004      	movs	r0, #4
    2962:	4602      	mov	r2, r0
    2964:	210c      	movs	r1, #12
    2966:	2300      	movs	r3, #0
    2968:	f002 fa44 	bl	4df4 <GPIO_PinModeSet>
  GPIO_PinModeSet(EBI_GPIOPORT_E, EBI_AD05, gpioModePushPull, 0);
    296c:	2004      	movs	r0, #4
    296e:	4602      	mov	r2, r0
    2970:	210d      	movs	r1, #13
    2972:	2300      	movs	r3, #0
    2974:	f002 fa3e 	bl	4df4 <GPIO_PinModeSet>
  GPIO_PinModeSet(EBI_GPIOPORT_E, EBI_AD06, gpioModePushPull, 0);
    2978:	2004      	movs	r0, #4
    297a:	4602      	mov	r2, r0
    297c:	210e      	movs	r1, #14
    297e:	2300      	movs	r3, #0
    2980:	f002 fa38 	bl	4df4 <GPIO_PinModeSet>
  GPIO_PinModeSet(EBI_GPIOPORT_E, EBI_AD07, gpioModePushPull, 0);
    2984:	2004      	movs	r0, #4
    2986:	4602      	mov	r2, r0
    2988:	210f      	movs	r1, #15
    298a:	2300      	movs	r3, #0
    298c:	f002 fa32 	bl	4df4 <GPIO_PinModeSet>

  /* EBI AD08..15 address pins*/

  GPIO_PinModeSet(EBI_GPIOPORT_A, EBI_AD08, gpioModePushPull, 0);
    2990:	2000      	movs	r0, #0
    2992:	4603      	mov	r3, r0
    2994:	210f      	movs	r1, #15
    2996:	2204      	movs	r2, #4
    2998:	f002 fa2c 	bl	4df4 <GPIO_PinModeSet>
  GPIO_PinModeSet(EBI_GPIOPORT_A, EBI_AD09, gpioModePushPull, 0);
    299c:	2000      	movs	r0, #0
    299e:	4601      	mov	r1, r0
    29a0:	4603      	mov	r3, r0
    29a2:	2204      	movs	r2, #4
    29a4:	f002 fa26 	bl	4df4 <GPIO_PinModeSet>
  GPIO_PinModeSet(EBI_GPIOPORT_A, EBI_AD10, gpioModePushPull, 0);
    29a8:	2000      	movs	r0, #0
    29aa:	4621      	mov	r1, r4
    29ac:	4603      	mov	r3, r0
    29ae:	2204      	movs	r2, #4
    29b0:	f002 fa20 	bl	4df4 <GPIO_PinModeSet>
  GPIO_PinModeSet(EBI_GPIOPORT_A, EBI_AD11, gpioModePushPull, 0);
    29b4:	2000      	movs	r0, #0
    29b6:	4629      	mov	r1, r5
    29b8:	4603      	mov	r3, r0
    29ba:	2204      	movs	r2, #4
    29bc:	f002 fa1a 	bl	4df4 <GPIO_PinModeSet>
  GPIO_PinModeSet(EBI_GPIOPORT_A, EBI_AD12, gpioModePushPull, 0);
    29c0:	2000      	movs	r0, #0
    29c2:	4603      	mov	r3, r0
    29c4:	2103      	movs	r1, #3
    29c6:	2204      	movs	r2, #4
    29c8:	f002 fa14 	bl	4df4 <GPIO_PinModeSet>
  GPIO_PinModeSet(EBI_GPIOPORT_A, EBI_AD13, gpioModePushPull, 0);
    29cc:	2000      	movs	r0, #0
    29ce:	2104      	movs	r1, #4
    29d0:	4603      	mov	r3, r0
    29d2:	460a      	mov	r2, r1
    29d4:	f002 fa0e 	bl	4df4 <GPIO_PinModeSet>
  GPIO_PinModeSet(EBI_GPIOPORT_A, EBI_AD14, gpioModePushPull, 0);
    29d8:	2000      	movs	r0, #0
    29da:	4603      	mov	r3, r0
    29dc:	2105      	movs	r1, #5
    29de:	2204      	movs	r2, #4
    29e0:	f002 fa08 	bl	4df4 <GPIO_PinModeSet>
  GPIO_PinModeSet(EBI_GPIOPORT_A, EBI_AD15, gpioModePushPull, 0);
    29e4:	2000      	movs	r0, #0
    29e6:	4603      	mov	r3, r0
    29e8:	2106      	movs	r1, #6
    29ea:	2204      	movs	r2, #4
    29ec:	f002 fa02 	bl	4df4 <GPIO_PinModeSet>

  /* EBI A16..24 extension address pins*/

  GPIO_PinModeSet(EBI_GPIOPORT_E, EBI_A08, gpioModePushPull, 0);
    29f0:	2004      	movs	r0, #4
    29f2:	4621      	mov	r1, r4
    29f4:	4602      	mov	r2, r0
    29f6:	2300      	movs	r3, #0
    29f8:	f002 f9fc 	bl	4df4 <GPIO_PinModeSet>
  GPIO_PinModeSet(EBI_GPIOPORT_C, EBI_A09, gpioModePushPull, 0);
    29fc:	4628      	mov	r0, r5
    29fe:	2109      	movs	r1, #9
    2a00:	2204      	movs	r2, #4
    2a02:	2300      	movs	r3, #0
    2a04:	f002 f9f6 	bl	4df4 <GPIO_PinModeSet>
  GPIO_PinModeSet(EBI_GPIOPORT_C, EBI_A10, gpioModePushPull, 0);
    2a08:	4628      	mov	r0, r5
    2a0a:	210a      	movs	r1, #10
    2a0c:	2204      	movs	r2, #4
    2a0e:	2300      	movs	r3, #0
    2a10:	f002 f9f0 	bl	4df4 <GPIO_PinModeSet>
  GPIO_PinModeSet(EBI_GPIOPORT_E, EBI_A11, gpioModePushPull, 0);
    2a14:	2004      	movs	r0, #4
    2a16:	4601      	mov	r1, r0
    2a18:	4602      	mov	r2, r0
    2a1a:	2300      	movs	r3, #0
    2a1c:	f002 f9ea 	bl	4df4 <GPIO_PinModeSet>
  GPIO_PinModeSet(EBI_GPIOPORT_E, EBI_A12, gpioModePushPull, 0);
    2a20:	2004      	movs	r0, #4
    2a22:	4602      	mov	r2, r0
    2a24:	2105      	movs	r1, #5
    2a26:	2300      	movs	r3, #0
    2a28:	f002 f9e4 	bl	4df4 <GPIO_PinModeSet>
  GPIO_PinModeSet(EBI_GPIOPORT_E, EBI_A13, gpioModePushPull, 0);
    2a2c:	2004      	movs	r0, #4
    2a2e:	4602      	mov	r2, r0
    2a30:	2106      	movs	r1, #6
    2a32:	2300      	movs	r3, #0
    2a34:	f002 f9de 	bl	4df4 <GPIO_PinModeSet>
  GPIO_PinModeSet(EBI_GPIOPORT_E, EBI_A14, gpioModePushPull, 0);
    2a38:	2004      	movs	r0, #4
    2a3a:	4602      	mov	r2, r0
    2a3c:	2107      	movs	r1, #7
    2a3e:	2300      	movs	r3, #0
    2a40:	f002 f9d8 	bl	4df4 <GPIO_PinModeSet>
  GPIO_PinModeSet(EBI_GPIOPORT_C, EBI_A15, gpioModePushPull, 0);
    2a44:	4628      	mov	r0, r5
    2a46:	2108      	movs	r1, #8
    2a48:	2204      	movs	r2, #4
    2a4a:	2300      	movs	r3, #0
    2a4c:	f002 f9d2 	bl	4df4 <GPIO_PinModeSet>
  GPIO_PinModeSet(EBI_GPIOPORT_B, EBI_A16, gpioModePushPull, 0);
    2a50:	2100      	movs	r1, #0
    2a52:	4620      	mov	r0, r4
    2a54:	460b      	mov	r3, r1
    2a56:	2204      	movs	r2, #4
    2a58:	f002 f9cc 	bl	4df4 <GPIO_PinModeSet>
  GPIO_PinModeSet(EBI_GPIOPORT_B, EBI_A17, gpioModePushPull, 0);
    2a5c:	4620      	mov	r0, r4
    2a5e:	4621      	mov	r1, r4
    2a60:	2204      	movs	r2, #4
    2a62:	2300      	movs	r3, #0
    2a64:	f002 f9c6 	bl	4df4 <GPIO_PinModeSet>

  /* EBI CS0-CS1 */

  GPIO_PinModeSet(EBI_GPIOPORT_D, EBI_CSEL1, gpioModePushPull, 0);
    2a68:	2003      	movs	r0, #3
    2a6a:	2109      	movs	r1, #9
    2a6c:	2204      	movs	r2, #4
    2a6e:	2300      	movs	r3, #0
    2a70:	f002 f9c0 	bl	4df4 <GPIO_PinModeSet>
  GPIO_PinModeSet(EBI_GPIOPORT_D, EBI_CSEL2, gpioModePushPull, 0);
    2a74:	2003      	movs	r0, #3
    2a76:	210a      	movs	r1, #10
    2a78:	2204      	movs	r2, #4
    2a7a:	2300      	movs	r3, #0
    2a7c:	f002 f9ba 	bl	4df4 <GPIO_PinModeSet>

  /* EBI WEN/OEN */

  GPIO_PinModeSet(EBI_GPIOPORT_F, EBI_OE, gpioModePushPull, 0);
    2a80:	2005      	movs	r0, #5
    2a82:	2109      	movs	r1, #9
    2a84:	2204      	movs	r2, #4
    2a86:	2300      	movs	r3, #0
    2a88:	f002 f9b4 	bl	4df4 <GPIO_PinModeSet>
  GPIO_PinModeSet(EBI_GPIOPORT_F, EBI_WE, gpioModePushPull, 0);
    2a8c:	2005      	movs	r0, #5
    2a8e:	2108      	movs	r1, #8
    2a90:	2204      	movs	r2, #4
    2a92:	2300      	movs	r3, #0
    2a94:	f002 f9ae 	bl	4df4 <GPIO_PinModeSet>
  ebiConfig.banks = EBI_BANK0;
  ebiConfig.csLines = EBI_CS0 | EBI_CS1;
  ebiConfig.readHalfRE = true;

  ebiConfig.aLow = ebiALowA8;
  ebiConfig.aHigh = ebiAHighA18;
    2a98:	f44f 0790 	mov.w	r7, #4718592	; 0x480000
  GPIO_PinModeSet(EBI_GPIOPORT_F, EBI_OE, gpioModePushPull, 0);
  GPIO_PinModeSet(EBI_GPIOPORT_F, EBI_WE, gpioModePushPull, 0);

  /* Configure EBI controller, changing default values */

  ebiConfig.mode = ebiModeD8A8;
    2a9c:	2300      	movs	r3, #0
  ebiConfig.banks = EBI_BANK0;
  ebiConfig.csLines = EBI_CS0 | EBI_CS1;
    2a9e:	2206      	movs	r2, #6
  ebiConfig.readHalfRE = true;

  ebiConfig.aLow = ebiALowA8;
    2aa0:	f44f 3e80 	mov.w	lr, #65536	; 0x10000

  ebiConfig.writeStrobeCycles = 6;
  ebiConfig.writeHoldCycles   = 0;
  ebiConfig.writeSetupCycles  = 0;

  ebiConfig.location = ebiLocation1;
    2aa4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000

  /* Configure EBI */

  EBI_Init(&ebiConfig);
    2aa8:	4668      	mov	r0, sp
  ebiConfig.addrHoldCycles  = 0;
  ebiConfig.addrSetupCycles = 0;

  /* Read cycle times */

  ebiConfig.readStrobeCycles = 3;
    2aaa:	2603      	movs	r6, #3
  GPIO_PinModeSet(EBI_GPIOPORT_F, EBI_WE, gpioModePushPull, 0);

  /* Configure EBI controller, changing default values */

  ebiConfig.mode = ebiModeD8A8;
  ebiConfig.banks = EBI_BANK0;
    2aac:	9503      	str	r5, [sp, #12]
  ebiConfig.csLines = EBI_CS0 | EBI_CS1;
  ebiConfig.readHalfRE = true;
    2aae:	f88d 402e 	strb.w	r4, [sp, #46]	; 0x2e
  ebiConfig.addrSetupCycles = 0;

  /* Read cycle times */

  ebiConfig.readStrobeCycles = 3;
  ebiConfig.readHoldCycles   = 1;
    2ab2:	940a      	str	r4, [sp, #40]	; 0x28
  ebiConfig.readSetupCycles  = 2;
    2ab4:	9508      	str	r5, [sp, #32]
  GPIO_PinModeSet(EBI_GPIOPORT_F, EBI_OE, gpioModePushPull, 0);
  GPIO_PinModeSet(EBI_GPIOPORT_F, EBI_WE, gpioModePushPull, 0);

  /* Configure EBI controller, changing default values */

  ebiConfig.mode = ebiModeD8A8;
    2ab6:	f88d 3000 	strb.w	r3, [sp]
  ebiConfig.aLow = ebiALowA8;
  ebiConfig.aHigh = ebiAHighA18;

  /* Address Setup and hold time */

  ebiConfig.addrHoldCycles  = 0;
    2aba:	9306      	str	r3, [sp, #24]
  ebiConfig.addrSetupCycles = 0;
    2abc:	9305      	str	r3, [sp, #20]
  ebiConfig.readSetupCycles  = 2;

  /* Write cycle times */

  ebiConfig.writeStrobeCycles = 6;
  ebiConfig.writeHoldCycles   = 0;
    2abe:	930e      	str	r3, [sp, #56]	; 0x38
  ebiConfig.writeSetupCycles  = 0;
    2ac0:	930c      	str	r3, [sp, #48]	; 0x30

  /* Configure EBI controller, changing default values */

  ebiConfig.mode = ebiModeD8A8;
  ebiConfig.banks = EBI_BANK0;
  ebiConfig.csLines = EBI_CS0 | EBI_CS1;
    2ac2:	9204      	str	r2, [sp, #16]
  ebiConfig.readHoldCycles   = 1;
  ebiConfig.readSetupCycles  = 2;

  /* Write cycle times */

  ebiConfig.writeStrobeCycles = 6;
    2ac4:	920d      	str	r2, [sp, #52]	; 0x34
  ebiConfig.mode = ebiModeD8A8;
  ebiConfig.banks = EBI_BANK0;
  ebiConfig.csLines = EBI_CS0 | EBI_CS1;
  ebiConfig.readHalfRE = true;

  ebiConfig.aLow = ebiALowA8;
    2ac6:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  ebiConfig.aHigh = ebiAHighA18;
    2aca:	9711      	str	r7, [sp, #68]	; 0x44
  ebiConfig.addrHoldCycles  = 0;
  ebiConfig.addrSetupCycles = 0;

  /* Read cycle times */

  ebiConfig.readStrobeCycles = 3;
    2acc:	9609      	str	r6, [sp, #36]	; 0x24

  ebiConfig.writeStrobeCycles = 6;
  ebiConfig.writeHoldCycles   = 0;
  ebiConfig.writeSetupCycles  = 0;

  ebiConfig.location = ebiLocation1;
    2ace:	9112      	str	r1, [sp, #72]	; 0x48

  /* Configure EBI */

  EBI_Init(&ebiConfig);
    2ad0:	f001 fda8 	bl	4624 <EBI_Init>

    /* Enable the external bus interface */

    enableEBI();

}
    2ad4:	b015      	add	sp, #84	; 0x54
    2ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ad8:	40006000 	.word	0x40006000
    2adc:	00025300 	.word	0x00025300

00002ae0 <AudioMoth_delay>:

void AudioMoth_delay(uint16_t milliseconds) {

    /* Ensure the delay period wont cause the counter to overflow and calculate clock ticks to wait */

    if (milliseconds == 0)  return;
    2ae0:	2800      	cmp	r0, #0
    2ae2:	d064      	beq.n	2bae <AudioMoth_delay+0xce>

}

/* Function to implement a sleeping delay */

void AudioMoth_delay(uint16_t milliseconds) {
    2ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    if (milliseconds > 1000) milliseconds = 1000;

    /* Enable clock for TIMER1 */

    CMU_ClockEnable(cmuClock_TIMER1, true);
    2ae8:	2101      	movs	r1, #1

}

/* Function to implement a sleeping delay */

void AudioMoth_delay(uint16_t milliseconds) {
    2aea:	b084      	sub	sp, #16
    2aec:	4604      	mov	r4, r0

    if (milliseconds > 1000) milliseconds = 1000;

    /* Enable clock for TIMER1 */

    CMU_ClockEnable(cmuClock_TIMER1, true);
    2aee:	4830      	ldr	r0, [pc, #192]	; (2bb0 <AudioMoth_delay+0xd0>)

    delayInit.prescale = timerPrescale1024;

    delayInit.enable = false;

    TIMER_Init(TIMER1, &delayInit);
    2af0:	4f30      	ldr	r7, [pc, #192]	; (2bb4 <AudioMoth_delay+0xd4>)

    NVIC_EnableIRQ(TIMER1_IRQn);

    /* Start timer and wait until interrupt occurs */

    delayTimmerRunning = true;
    2af2:	4e31      	ldr	r6, [pc, #196]	; (2bb8 <AudioMoth_delay+0xd8>)

    if (milliseconds > 1000) milliseconds = 1000;

    /* Enable clock for TIMER1 */

    CMU_ClockEnable(cmuClock_TIMER1, true);
    2af4:	f001 f9b0 	bl	3e58 <CMU_ClockEnable>

    TIMER_Init_TypeDef delayInit = TIMER_INIT_DEFAULT;

    delayInit.prescale = timerPrescale1024;

    delayInit.enable = false;
    2af8:	a904      	add	r1, sp, #16

    CMU_ClockEnable(cmuClock_TIMER1, true);

    /* Initialise TIMER1 */

    TIMER_Init_TypeDef delayInit = TIMER_INIT_DEFAULT;
    2afa:	2500      	movs	r5, #0

    delayInit.prescale = timerPrescale1024;
    2afc:	230a      	movs	r3, #10

    delayInit.enable = false;
    2afe:	f801 5d10 	strb.w	r5, [r1, #-16]!

    TIMER_Init(TIMER1, &delayInit);
    2b02:	4638      	mov	r0, r7

    /* Initialise TIMER1 */

    TIMER_Init_TypeDef delayInit = TIMER_INIT_DEFAULT;

    delayInit.prescale = timerPrescale1024;
    2b04:	f88d 3002 	strb.w	r3, [sp, #2]

    CMU_ClockEnable(cmuClock_TIMER1, true);

    /* Initialise TIMER1 */

    TIMER_Init_TypeDef delayInit = TIMER_INIT_DEFAULT;
    2b08:	f88d 5001 	strb.w	r5, [sp, #1]
    2b0c:	f88d 5003 	strb.w	r5, [sp, #3]
    2b10:	f88d 5004 	strb.w	r5, [sp, #4]
    2b14:	f88d 5005 	strb.w	r5, [sp, #5]
    2b18:	f88d 5006 	strb.w	r5, [sp, #6]
    2b1c:	f88d 5007 	strb.w	r5, [sp, #7]
    2b20:	f88d 5008 	strb.w	r5, [sp, #8]
    2b24:	f88d 5009 	strb.w	r5, [sp, #9]
    2b28:	f88d 500a 	strb.w	r5, [sp, #10]
    2b2c:	f88d 500b 	strb.w	r5, [sp, #11]
    2b30:	f88d 500c 	strb.w	r5, [sp, #12]

    delayInit.prescale = timerPrescale1024;

    delayInit.enable = false;

    TIMER_Init(TIMER1, &delayInit);
    2b34:	f002 fbea 	bl	530c <TIMER_Init>
 *   TIMER interrupt source(s) to enable. Use one or more valid
 *   interrupt flags for the TIMER module (TIMER_IF_nnn) OR'ed together.
 ******************************************************************************/
__STATIC_INLINE void TIMER_IntEnable(TIMER_TypeDef *timer, uint32_t flags)
{
  timer->IEN |= flags;
    2b38:	68fb      	ldr	r3, [r7, #12]
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2b3a:	4a20      	ldr	r2, [pc, #128]	; (2bbc <AudioMoth_delay+0xdc>)
    2b3c:	f043 0301 	orr.w	r3, r3, #1
    2b40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    2b44:	60fb      	str	r3, [r7, #12]

    NVIC_EnableIRQ(TIMER1_IRQn);

    /* Start timer and wait until interrupt occurs */

    delayTimmerRunning = true;
    2b46:	f04f 0801 	mov.w	r8, #1
    2b4a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180

    uint32_t clockTicksToWait = (CMU_ClockFreqGet(cmuClock_HF) >> timerPrescale1024) * milliseconds / 1000;
    2b4e:	2011      	movs	r0, #17
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2b50:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(TIMER1_IRQn);

    /* Start timer and wait until interrupt occurs */

    delayTimmerRunning = true;
    2b52:	f886 8000 	strb.w	r8, [r6]

    uint32_t clockTicksToWait = (CMU_ClockFreqGet(cmuClock_HF) >> timerPrescale1024) * milliseconds / 1000;
    2b56:	f001 f8a7 	bl	3ca8 <CMU_ClockFreqGet>
    2b5a:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
    2b5e:	4b18      	ldr	r3, [pc, #96]	; (2bc0 <AudioMoth_delay+0xe0>)
    2b60:	bf28      	it	cs
    2b62:	f44f 747a 	movcs.w	r4, #1000	; 0x3e8
    2b66:	0a80      	lsrs	r0, r0, #10
    2b68:	fb04 f400 	mul.w	r4, r4, r0
    2b6c:	fba3 3404 	umull	r3, r4, r3, r4
    2b70:	09a4      	lsrs	r4, r4, #6
 *   Value to set in top value register.
 ******************************************************************************/
__STATIC_INLINE void TIMER_TopSet(TIMER_TypeDef *timer, uint32_t val)
{
  EFM_ASSERT(val <= TIMER_MaxCount(timer));
  timer->TOP = val;
    2b72:	61fc      	str	r4, [r7, #28]
 *   Value to set counter to.
 ******************************************************************************/
__STATIC_INLINE void TIMER_CounterSet(TIMER_TypeDef *timer, uint32_t val)
{
  EFM_ASSERT(val <= TIMER_MaxCount(timer));
  timer->CNT = val;
    2b74:	627d      	str	r5, [r7, #36]	; 0x24
__STATIC_INLINE void TIMER_Enable(TIMER_TypeDef *timer, bool enable)
{
  EFM_ASSERT(TIMER_REF_VALID(timer));

  if (enable) {
    timer->CMD = TIMER_CMD_START;
    2b76:	f8c7 8004 	str.w	r8, [r7, #4]

    TIMER_CounterSet(TIMER1, 0);

    TIMER_Enable(TIMER1, true);

    while (delayTimmerRunning) {
    2b7a:	7833      	ldrb	r3, [r6, #0]
    2b7c:	b143      	cbz	r3, 2b90 <AudioMoth_delay+0xb0>
 *   Enter energy mode 1 (EM1).
 ******************************************************************************/
__STATIC_INLINE void EMU_EnterEM1(void)
{
  /* Enter sleep mode */
  SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    2b7e:	4a11      	ldr	r2, [pc, #68]	; (2bc4 <AudioMoth_delay+0xe4>)
    2b80:	6913      	ldr	r3, [r2, #16]
    2b82:	f023 0304 	bic.w	r3, r3, #4
    2b86:	6113      	str	r3, [r2, #16]
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
    2b88:	bf30      	wfi
    2b8a:	7833      	ldrb	r3, [r6, #0]
    2b8c:	2b00      	cmp	r3, #0
    2b8e:	d1f7      	bne.n	2b80 <AudioMoth_delay+0xa0>
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2b90:	4b0a      	ldr	r3, [pc, #40]	; (2bbc <AudioMoth_delay+0xdc>)

    /* Disable interrupt and reset TIMER1 */

    NVIC_DisableIRQ(TIMER1_IRQn);

    TIMER_Reset(TIMER1);
    2b92:	4808      	ldr	r0, [pc, #32]	; (2bb4 <AudioMoth_delay+0xd4>)
    2b94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    2b98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    2b9c:	f002 fc0e 	bl	53bc <TIMER_Reset>

    /* Disable the clock for TIMER1 */

    CMU_ClockEnable(cmuClock_TIMER1, false);
    2ba0:	4803      	ldr	r0, [pc, #12]	; (2bb0 <AudioMoth_delay+0xd0>)
    2ba2:	2100      	movs	r1, #0
    2ba4:	f001 f958 	bl	3e58 <CMU_ClockEnable>

}
    2ba8:	b004      	add	sp, #16
    2baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2bae:	4770      	bx	lr
    2bb0:	00046200 	.word	0x00046200
    2bb4:	40010400 	.word	0x40010400
    2bb8:	200010bc 	.word	0x200010bc
    2bbc:	e000e100 	.word	0xe000e100
    2bc0:	10624dd3 	.word	0x10624dd3
    2bc4:	e000ed00 	.word	0xe000ed00

00002bc8 <AudioMoth_sleep>:
    2bc8:	4a03      	ldr	r2, [pc, #12]	; (2bd8 <AudioMoth_sleep+0x10>)
    2bca:	6913      	ldr	r3, [r2, #16]
    2bcc:	f023 0304 	bic.w	r3, r3, #4
    2bd0:	6113      	str	r3, [r2, #16]
    2bd2:	bf30      	wfi
    2bd4:	4770      	bx	lr
    2bd6:	bf00      	nop
    2bd8:	e000ed00 	.word	0xe000ed00

00002bdc <AudioMoth_enableBatteryMonitor>:
 ******************************************************************************/
__STATIC_INLINE void GPIO_PinOutSet(GPIO_Port_TypeDef port, unsigned int pin)
{
  EFM_ASSERT(GPIO_PORT_PIN_VALID(port, pin));
#if defined(_GPIO_P_DOUTSET_MASK)
  GPIO->P[port].DOUTSET = 1 << pin;
    2bdc:	4b03      	ldr	r3, [pc, #12]	; (2bec <AudioMoth_enableBatteryMonitor+0x10>)

    GPIO_PinOutSet(BAT_MON_GPIOPORT, BAT_MON_EN);

    /* Enable comparator clock */

    CMU_ClockEnable(cmuClock_ACMP0, true);
    2bde:	4804      	ldr	r0, [pc, #16]	; (2bf0 <AudioMoth_enableBatteryMonitor+0x14>)
    2be0:	2208      	movs	r2, #8
    2be2:	659a      	str	r2, [r3, #88]	; 0x58
    2be4:	2101      	movs	r1, #1
    2be6:	f001 b937 	b.w	3e58 <CMU_ClockEnable>
    2bea:	bf00      	nop
    2bec:	40006000 	.word	0x40006000
    2bf0:	00049200 	.word	0x00049200

00002bf4 <AudioMoth_setBatteryMonitorThreshold>:

}

void AudioMoth_setBatteryMonitorThreshold(AM_batteryState_t batteryState) {
    2bf4:	b570      	push	{r4, r5, r6, lr}

    /* Initialise the ACMP */

    ACMP_Init_TypeDef acmp_init = ACMP_INIT_DEFAULT;
    2bf6:	4d0f      	ldr	r5, [pc, #60]	; (2c34 <AudioMoth_setBatteryMonitorThreshold+0x40>)

    CMU_ClockEnable(cmuClock_ACMP0, true);

}

void AudioMoth_setBatteryMonitorThreshold(AM_batteryState_t batteryState) {
    2bf8:	4606      	mov	r6, r0

    /* Initialise the ACMP */

    ACMP_Init_TypeDef acmp_init = ACMP_INIT_DEFAULT;
    2bfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}

    CMU_ClockEnable(cmuClock_ACMP0, true);

}

void AudioMoth_setBatteryMonitorThreshold(AM_batteryState_t batteryState) {
    2bfc:	b086      	sub	sp, #24

    /* Initialise the ACMP */

    ACMP_Init_TypeDef acmp_init = ACMP_INIT_DEFAULT;
    2bfe:	466c      	mov	r4, sp
    2c00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2c02:	e895 0003 	ldmia.w	r5, {r0, r1}

    acmp_init.vddLevel = BASE_BATTERY_MONITOR_THRESHOLD + batteryState;

    acmp_init.hysteresisLevel = acmpHysteresisLevel2;
    2c06:	2302      	movs	r3, #2

void AudioMoth_setBatteryMonitorThreshold(AM_batteryState_t batteryState) {

    /* Initialise the ACMP */

    ACMP_Init_TypeDef acmp_init = ACMP_INIT_DEFAULT;
    2c08:	e884 0003 	stmia.w	r4, {r0, r1}

    acmp_init.vddLevel = BASE_BATTERY_MONITOR_THRESHOLD + batteryState;
    2c0c:	3622      	adds	r6, #34	; 0x22

    acmp_init.hysteresisLevel = acmpHysteresisLevel2;

    ACMP_Init(ACMP0, &acmp_init);
    2c0e:	480a      	ldr	r0, [pc, #40]	; (2c38 <AudioMoth_setBatteryMonitorThreshold+0x44>)

    ACMP_Init_TypeDef acmp_init = ACMP_INIT_DEFAULT;

    acmp_init.vddLevel = BASE_BATTERY_MONITOR_THRESHOLD + batteryState;

    acmp_init.hysteresisLevel = acmpHysteresisLevel2;
    2c10:	f88d 300b 	strb.w	r3, [sp, #11]

    ACMP_Init(ACMP0, &acmp_init);
    2c14:	4669      	mov	r1, sp

    /* Initialise the ACMP */

    ACMP_Init_TypeDef acmp_init = ACMP_INIT_DEFAULT;

    acmp_init.vddLevel = BASE_BATTERY_MONITOR_THRESHOLD + batteryState;
    2c16:	9604      	str	r6, [sp, #16]

    acmp_init.hysteresisLevel = acmpHysteresisLevel2;

    ACMP_Init(ACMP0, &acmp_init);
    2c18:	f000 fc8c 	bl	3534 <ACMP_Init>

    /* Set the ACMP channel */

    ACMP_ChannelSet(ACMP0, acmpChannelVDD, acmpChannel0);
    2c1c:	2200      	movs	r2, #0
    2c1e:	4806      	ldr	r0, [pc, #24]	; (2c38 <AudioMoth_setBatteryMonitorThreshold+0x44>)
    2c20:	210a      	movs	r1, #10
    2c22:	f000 fc7f 	bl	3524 <ACMP_ChannelSet>

    /* Wait for warm up */

    while (!(ACMP0->STATUS & ACMP_STATUS_ACMPACT)) {};
    2c26:	4a04      	ldr	r2, [pc, #16]	; (2c38 <AudioMoth_setBatteryMonitorThreshold+0x44>)
    2c28:	6893      	ldr	r3, [r2, #8]
    2c2a:	07db      	lsls	r3, r3, #31
    2c2c:	d5fc      	bpl.n	2c28 <AudioMoth_setBatteryMonitorThreshold+0x34>

}
    2c2e:	b006      	add	sp, #24
    2c30:	bd70      	pop	{r4, r5, r6, pc}
    2c32:	bf00      	nop
    2c34:	0000cfe8 	.word	0x0000cfe8
    2c38:	40001000 	.word	0x40001000

00002c3c <AudioMoth_disableBatteryMonitor>:

    return (ACMP0->STATUS & ACMP_STATUS_ACMPOUT);

}

void AudioMoth_disableBatteryMonitor() {
    2c3c:	b508      	push	{r3, lr}

    /* Disable ACMP */

    ACMP_Disable(ACMP0);
    2c3e:	4805      	ldr	r0, [pc, #20]	; (2c54 <AudioMoth_disableBatteryMonitor+0x18>)
    2c40:	f000 fc6a 	bl	3518 <ACMP_Disable>

    /* Disable comparator clock*/

    CMU_ClockEnable(cmuClock_ACMP0, false);
    2c44:	4804      	ldr	r0, [pc, #16]	; (2c58 <AudioMoth_disableBatteryMonitor+0x1c>)
    2c46:	2100      	movs	r1, #0
    2c48:	f001 f906 	bl	3e58 <CMU_ClockEnable>
 ******************************************************************************/
__STATIC_INLINE void GPIO_PinOutClear(GPIO_Port_TypeDef port, unsigned int pin)
{
  EFM_ASSERT(GPIO_PORT_PIN_VALID(port, pin));
#if defined(_GPIO_P_DOUTCLR_MASK)
  GPIO->P[port].DOUTCLR = 1 << pin;
    2c4c:	4b03      	ldr	r3, [pc, #12]	; (2c5c <AudioMoth_disableBatteryMonitor+0x20>)
    2c4e:	2208      	movs	r2, #8
    2c50:	65da      	str	r2, [r3, #92]	; 0x5c
    2c52:	bd08      	pop	{r3, pc}
    2c54:	40001000 	.word	0x40001000
    2c58:	00049200 	.word	0x00049200
    2c5c:	40006000 	.word	0x40006000

00002c60 <AudioMoth_getBatteryState>:

    GPIO_PinOutClear(BAT_MON_GPIOPORT, BAT_MON_EN);

}

AM_batteryState_t AudioMoth_getBatteryState() {
    2c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 ******************************************************************************/
__STATIC_INLINE void GPIO_PinOutSet(GPIO_Port_TypeDef port, unsigned int pin)
{
  EFM_ASSERT(GPIO_PORT_PIN_VALID(port, pin));
#if defined(_GPIO_P_DOUTSET_MASK)
  GPIO->P[port].DOUTSET = 1 << pin;
    2c64:	4b1e      	ldr	r3, [pc, #120]	; (2ce0 <AudioMoth_getBatteryState+0x80>)

    GPIO_PinOutSet(BAT_MON_GPIOPORT, BAT_MON_EN);

    /* Enable comparator clock */

    CMU_ClockEnable(cmuClock_ACMP0, true);
    2c66:	481f      	ldr	r0, [pc, #124]	; (2ce4 <AudioMoth_getBatteryState+0x84>)

    acmp_init.vddLevel = BASE_BATTERY_MONITOR_THRESHOLD + batteryState;

    acmp_init.hysteresisLevel = acmpHysteresisLevel2;

    ACMP_Init(ACMP0, &acmp_init);
    2c68:	4c1f      	ldr	r4, [pc, #124]	; (2ce8 <AudioMoth_getBatteryState+0x88>)
    2c6a:	2208      	movs	r2, #8

    GPIO_PinOutClear(BAT_MON_GPIOPORT, BAT_MON_EN);

}

AM_batteryState_t AudioMoth_getBatteryState() {
    2c6c:	b087      	sub	sp, #28
    2c6e:	659a      	str	r2, [r3, #88]	; 0x58

    GPIO_PinOutSet(BAT_MON_GPIOPORT, BAT_MON_EN);

    /* Enable comparator clock */

    CMU_ClockEnable(cmuClock_ACMP0, true);
    2c70:	2101      	movs	r1, #1
    2c72:	f001 f8f1 	bl	3e58 <CMU_ClockEnable>

    ACMP_ChannelSet(ACMP0, acmpChannelVDD, acmpChannel0);

    /* Wait for warm up */

    while (!(ACMP0->STATUS & ACMP_STATUS_ACMPACT)) {};
    2c76:	46a1      	mov	r9, r4

    GPIO_PinOutSet(BAT_MON_GPIOPORT, BAT_MON_EN);

    /* Enable comparator clock */

    CMU_ClockEnable(cmuClock_ACMP0, true);
    2c78:	f04f 0822 	mov.w	r8, #34	; 0x22

AM_batteryState_t AudioMoth_getBatteryState() {

    AudioMoth_enableBatteryMonitor();

    AM_batteryState_t batteryState = AM_BATTERY_LOW;
    2c7c:	2700      	movs	r7, #0

void AudioMoth_setBatteryMonitorThreshold(AM_batteryState_t batteryState) {

    /* Initialise the ACMP */

    ACMP_Init_TypeDef acmp_init = ACMP_INIT_DEFAULT;
    2c7e:	4e1b      	ldr	r6, [pc, #108]	; (2cec <AudioMoth_getBatteryState+0x8c>)
    2c80:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    2c82:	466d      	mov	r5, sp
    2c84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2c86:	e896 0003 	ldmia.w	r6, {r0, r1}

    acmp_init.vddLevel = BASE_BATTERY_MONITOR_THRESHOLD + batteryState;

    acmp_init.hysteresisLevel = acmpHysteresisLevel2;
    2c8a:	2302      	movs	r3, #2

void AudioMoth_setBatteryMonitorThreshold(AM_batteryState_t batteryState) {

    /* Initialise the ACMP */

    ACMP_Init_TypeDef acmp_init = ACMP_INIT_DEFAULT;
    2c8c:	e885 0003 	stmia.w	r5, {r0, r1}

    acmp_init.vddLevel = BASE_BATTERY_MONITOR_THRESHOLD + batteryState;

    acmp_init.hysteresisLevel = acmpHysteresisLevel2;

    ACMP_Init(ACMP0, &acmp_init);
    2c90:	4815      	ldr	r0, [pc, #84]	; (2ce8 <AudioMoth_getBatteryState+0x88>)

    /* Initialise the ACMP */

    ACMP_Init_TypeDef acmp_init = ACMP_INIT_DEFAULT;

    acmp_init.vddLevel = BASE_BATTERY_MONITOR_THRESHOLD + batteryState;
    2c92:	f8cd 8010 	str.w	r8, [sp, #16]

    acmp_init.hysteresisLevel = acmpHysteresisLevel2;

    ACMP_Init(ACMP0, &acmp_init);
    2c96:	4669      	mov	r1, sp

    ACMP_Init_TypeDef acmp_init = ACMP_INIT_DEFAULT;

    acmp_init.vddLevel = BASE_BATTERY_MONITOR_THRESHOLD + batteryState;

    acmp_init.hysteresisLevel = acmpHysteresisLevel2;
    2c98:	f88d 300b 	strb.w	r3, [sp, #11]

    ACMP_Init(ACMP0, &acmp_init);
    2c9c:	f000 fc4a 	bl	3534 <ACMP_Init>

    /* Set the ACMP channel */

    ACMP_ChannelSet(ACMP0, acmpChannelVDD, acmpChannel0);
    2ca0:	4811      	ldr	r0, [pc, #68]	; (2ce8 <AudioMoth_getBatteryState+0x88>)
    2ca2:	210a      	movs	r1, #10
    2ca4:	2200      	movs	r2, #0
    2ca6:	f000 fc3d 	bl	3524 <ACMP_ChannelSet>

    /* Wait for warm up */

    while (!(ACMP0->STATUS & ACMP_STATUS_ACMPACT)) {};
    2caa:	68a3      	ldr	r3, [r4, #8]
    2cac:	07da      	lsls	r2, r3, #31
    2cae:	d5fc      	bpl.n	2caa <AudioMoth_getBatteryState+0x4a>

}

bool AudioMoth_isBatteryMonitorAboveThreshold() {

    return (ACMP0->STATUS & ACMP_STATUS_ACMPOUT);
    2cb0:	f8d9 3008 	ldr.w	r3, [r9, #8]

    while (batteryState < AM_BATTERY_FULL) {

        AudioMoth_setBatteryMonitorThreshold(batteryState);

		if (!AudioMoth_isBatteryMonitorAboveThreshold()) {
    2cb4:	079b      	lsls	r3, r3, #30
    2cb6:	d505      	bpl.n	2cc4 <AudioMoth_getBatteryState+0x64>

		    break;

		}

		batteryState += 1;
    2cb8:	3701      	adds	r7, #1
    2cba:	b2ff      	uxtb	r7, r7

    AudioMoth_enableBatteryMonitor();

    AM_batteryState_t batteryState = AM_BATTERY_LOW;

    while (batteryState < AM_BATTERY_FULL) {
    2cbc:	2f0f      	cmp	r7, #15
    2cbe:	f108 0801 	add.w	r8, r8, #1
    2cc2:	d1dc      	bne.n	2c7e <AudioMoth_getBatteryState+0x1e>

void AudioMoth_disableBatteryMonitor() {

    /* Disable ACMP */

    ACMP_Disable(ACMP0);
    2cc4:	4808      	ldr	r0, [pc, #32]	; (2ce8 <AudioMoth_getBatteryState+0x88>)
    2cc6:	f000 fc27 	bl	3518 <ACMP_Disable>

    /* Disable comparator clock*/

    CMU_ClockEnable(cmuClock_ACMP0, false);
    2cca:	4806      	ldr	r0, [pc, #24]	; (2ce4 <AudioMoth_getBatteryState+0x84>)
    2ccc:	2100      	movs	r1, #0
    2cce:	f001 f8c3 	bl	3e58 <CMU_ClockEnable>
 ******************************************************************************/
__STATIC_INLINE void GPIO_PinOutClear(GPIO_Port_TypeDef port, unsigned int pin)
{
  EFM_ASSERT(GPIO_PORT_PIN_VALID(port, pin));
#if defined(_GPIO_P_DOUTCLR_MASK)
  GPIO->P[port].DOUTCLR = 1 << pin;
    2cd2:	4b03      	ldr	r3, [pc, #12]	; (2ce0 <AudioMoth_getBatteryState+0x80>)
    2cd4:	2208      	movs	r2, #8

    AudioMoth_disableBatteryMonitor();

	return batteryState;

}
    2cd6:	4638      	mov	r0, r7
    2cd8:	65da      	str	r2, [r3, #92]	; 0x5c
    2cda:	b007      	add	sp, #28
    2cdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2ce0:	40006000 	.word	0x40006000
    2ce4:	00049200 	.word	0x00049200
    2ce8:	40001000 	.word	0x40001000
    2cec:	0000cfe8 	.word	0x0000cfe8

00002cf0 <AudioMoth_getTime>:
 ******************************************************************************/
__STATIC_INLINE uint32_t BURTC_RetRegGet(uint32_t num)
{
  EFM_ASSERT(num <= 127);

  return BURTC->RET[num].REG;
    2cf0:	4b26      	ldr	r3, [pc, #152]	; (2d8c <AudioMoth_getTime+0x9c>)

    }

}

void AudioMoth_getTime(uint32_t *time, uint16_t *milliseconds) {
    2cf2:	b470      	push	{r4, r5, r6}
    2cf4:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
    2cf8:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
 * @return
 *   BURTC counter value
 ******************************************************************************/
__STATIC_INLINE uint32_t BURTC_CounterGet(void)
{
  return BURTC->CNT;
    2cfc:	689e      	ldr	r6, [r3, #8]

}

static void getTime(uint32_t *time, uint16_t *milliseconds) {

    uint64_t offset =  (uint64_t)BURTC_RetRegGet(AM_BURTC_TIME_OFFSET_HIGH) << 32;
    2cfe:	2200      	movs	r2, #0
    2d00:	462b      	mov	r3, r5
    2d02:	19a4      	adds	r4, r4, r6

    offset += (uint64_t)BURTC_RetRegGet(AM_BURTC_TIME_OFFSET_LOW);
    2d04:	f04f 0500 	mov.w	r5, #0
    2d08:	f145 0500 	adc.w	r5, r5, #0

    uint64_t currentCounter = offset + BURTC_CounterGet();
    2d0c:	1912      	adds	r2, r2, r4
    2d0e:	416b      	adcs	r3, r5

    if (time != NULL) {
    2d10:	b118      	cbz	r0, 2d1a <AudioMoth_getTime+0x2a>

        *time = currentCounter / AM_LFXO_TICKS_PER_SECOND;
    2d12:	0a94      	lsrs	r4, r2, #10
    2d14:	ea44 5483 	orr.w	r4, r4, r3, lsl #22
    2d18:	6004      	str	r4, [r0, #0]

    }

    if (milliseconds != NULL) {
    2d1a:	b139      	cbz	r1, 2d2c <AudioMoth_getTime+0x3c>

        uint32_t ticks = currentCounter % AM_LFXO_TICKS_PER_SECOND;
    2d1c:	f3c2 0209 	ubfx	r2, r2, #0, #10

        *milliseconds = (uint16_t)(MILLISECONDS_IN_SECOND * ticks / AM_LFXO_TICKS_PER_SECOND);
    2d20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    2d24:	fb03 f202 	mul.w	r2, r3, r2
    2d28:	0a92      	lsrs	r2, r2, #10
    2d2a:	800a      	strh	r2, [r1, #0]
 *   Pending BURTC interrupt sources. Returns a set of interrupt flags OR-ed
 *   together for multiple interrupt sources in the BURTC module (BURTC_IFS_nnn).
 ******************************************************************************/
__STATIC_INLINE uint32_t BURTC_IntGet(void)
{
  return(BURTC->IF);
    2d2c:	4b17      	ldr	r3, [pc, #92]	; (2d8c <AudioMoth_getTime+0x9c>)
    2d2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28

void AudioMoth_getTime(uint32_t *time, uint16_t *milliseconds) {

    getTime(time, milliseconds);

    if (BURTC_IntGet() & BURTC_IF_OF) {
    2d30:	07d2      	lsls	r2, r2, #31
    2d32:	d401      	bmi.n	2d38 <AudioMoth_getTime+0x48>

        getTime(time, milliseconds);

    }

}
    2d34:	bc70      	pop	{r4, r5, r6}
    2d36:	4770      	bx	lr
 *   together to clear multiple interrupt sources for the BURTC module
 *   (BURTC_IFS_nnn).
 ******************************************************************************/
__STATIC_INLINE void BURTC_IntClear(uint32_t flags)
{
  BURTC->IFC = flags;
    2d38:	2201      	movs	r2, #1
    2d3a:	631a      	str	r2, [r3, #48]	; 0x30
 ******************************************************************************/
__STATIC_INLINE uint32_t BURTC_RetRegGet(uint32_t num)
{
  EFM_ASSERT(num <= 127);

  return BURTC->RET[num].REG;
    2d3c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104

    BURTC_IntClear(BURTC_IF_OF);

    uint32_t offsetHigh = BURTC_RetRegGet(AM_BURTC_TIME_OFFSET_HIGH);

    BURTC_RetRegSet(AM_BURTC_TIME_OFFSET_HIGH, offsetHigh + 1);
    2d40:	3201      	adds	r2, #1
 ******************************************************************************/
__STATIC_INLINE void BURTC_RetRegSet(uint32_t num, uint32_t data)
{
  EFM_ASSERT(num <= 127);

  BURTC->RET[num].REG = data;
    2d42:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 *   together to set multiple interrupt sources for the BURTC module
 *   (BURTC_IFS_nnn).
 ******************************************************************************/
__STATIC_INLINE void BURTC_IntEnable(uint32_t flags)
{
  BURTC->IEN |= flags;
    2d46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2d48:	f042 0201 	orr.w	r2, r2, #1
    2d4c:	635a      	str	r2, [r3, #52]	; 0x34
 ******************************************************************************/
__STATIC_INLINE uint32_t BURTC_RetRegGet(uint32_t num)
{
  EFM_ASSERT(num <= 127);

  return BURTC->RET[num].REG;
    2d4e:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
    2d52:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
 * @return
 *   BURTC counter value
 ******************************************************************************/
__STATIC_INLINE uint32_t BURTC_CounterGet(void)
{
  return BURTC->CNT;
    2d56:	689e      	ldr	r6, [r3, #8]

}

static void getTime(uint32_t *time, uint16_t *milliseconds) {

    uint64_t offset =  (uint64_t)BURTC_RetRegGet(AM_BURTC_TIME_OFFSET_HIGH) << 32;
    2d58:	2200      	movs	r2, #0
    2d5a:	462b      	mov	r3, r5
    2d5c:	19a4      	adds	r4, r4, r6

    offset += (uint64_t)BURTC_RetRegGet(AM_BURTC_TIME_OFFSET_LOW);
    2d5e:	f04f 0500 	mov.w	r5, #0
    2d62:	f145 0500 	adc.w	r5, r5, #0

    uint64_t currentCounter = offset + BURTC_CounterGet();
    2d66:	1912      	adds	r2, r2, r4
    2d68:	416b      	adcs	r3, r5

    if (time != NULL) {
    2d6a:	b118      	cbz	r0, 2d74 <AudioMoth_getTime+0x84>

        *time = currentCounter / AM_LFXO_TICKS_PER_SECOND;
    2d6c:	0a94      	lsrs	r4, r2, #10
    2d6e:	ea44 5483 	orr.w	r4, r4, r3, lsl #22
    2d72:	6004      	str	r4, [r0, #0]

    }

    if (milliseconds != NULL) {
    2d74:	2900      	cmp	r1, #0
    2d76:	d0dd      	beq.n	2d34 <AudioMoth_getTime+0x44>

        uint32_t ticks = currentCounter % AM_LFXO_TICKS_PER_SECOND;
    2d78:	f3c2 0209 	ubfx	r2, r2, #0, #10

        *milliseconds = (uint16_t)(MILLISECONDS_IN_SECOND * ticks / AM_LFXO_TICKS_PER_SECOND);
    2d7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    2d80:	fb03 f202 	mul.w	r2, r3, r2
    2d84:	0a92      	lsrs	r2, r2, #10
    2d86:	800a      	strh	r2, [r1, #0]

        getTime(time, milliseconds);

    }

}
    2d88:	bc70      	pop	{r4, r5, r6}
    2d8a:	4770      	bx	lr
    2d8c:	40081000 	.word	0x40081000

00002d90 <get_fattime>:

}

/* Time function for FAT file system */

DWORD get_fattime(void) {
    2d90:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d92:	b08d      	sub	sp, #52	; 0x34

    int8_t timezone = 0;
    2d94:	a80c      	add	r0, sp, #48	; 0x30
    2d96:	2500      	movs	r5, #0
    2d98:	f800 5d29 	strb.w	r5, [r0, #-41]!

    AudioMoth_timezoneRequested(&timezone);
    2d9c:	f008 f9c4 	bl	b128 <AudioMoth_timezoneRequested>
 ******************************************************************************/
__STATIC_INLINE uint32_t BURTC_RetRegGet(uint32_t num)
{
  EFM_ASSERT(num <= 127);

  return BURTC->RET[num].REG;
    2da0:	4b28      	ldr	r3, [pc, #160]	; (2e44 <get_fattime+0xb4>)
    2da2:	f8d3 7104 	ldr.w	r7, [r3, #260]	; 0x104
    2da6:	f8d3 6100 	ldr.w	r6, [r3, #256]	; 0x100
 * @return
 *   BURTC counter value
 ******************************************************************************/
__STATIC_INLINE uint32_t BURTC_CounterGet(void)
{
  return BURTC->CNT;
    2daa:	689c      	ldr	r4, [r3, #8]
 *   Pending BURTC interrupt sources. Returns a set of interrupt flags OR-ed
 *   together for multiple interrupt sources in the BURTC module (BURTC_IFS_nnn).
 ******************************************************************************/
__STATIC_INLINE uint32_t BURTC_IntGet(void)
{
  return(BURTC->IF);
    2dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28

void AudioMoth_getTime(uint32_t *time, uint16_t *milliseconds) {

    getTime(time, milliseconds);

    if (BURTC_IntGet() & BURTC_IF_OF) {
    2dae:	f012 0201 	ands.w	r2, r2, #1
    2db2:	d12b      	bne.n	2e0c <get_fattime+0x7c>

}

static void getTime(uint32_t *time, uint16_t *milliseconds) {

    uint64_t offset =  (uint64_t)BURTC_RetRegGet(AM_BURTC_TIME_OFFSET_HIGH) << 32;
    2db4:	4610      	mov	r0, r2

    offset += (uint64_t)BURTC_RetRegGet(AM_BURTC_TIME_OFFSET_LOW);

    uint64_t currentCounter = offset + BURTC_CounterGet();
    2db6:	2500      	movs	r5, #0
    2db8:	19a2      	adds	r2, r4, r6
    2dba:	f145 0300 	adc.w	r3, r5, #0
    2dbe:	1880      	adds	r0, r0, r2
    2dc0:	eb47 0103 	adc.w	r1, r7, r3

    if (time != NULL) {

        *time = currentCounter / AM_LFXO_TICKS_PER_SECOND;
    2dc4:	0a83      	lsrs	r3, r0, #10
    2dc6:	ea43 5381 	orr.w	r3, r3, r1, lsl #22

    uint32_t currentTime;

    AudioMoth_getTime(&currentTime, NULL);

    time_t fatTime = currentTime + timezone * 60 * 60;
    2dca:	f99d 2007 	ldrsb.w	r2, [sp, #7]
    2dce:	a80c      	add	r0, sp, #48	; 0x30
    2dd0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    2dd4:	fb01 3302 	mla	r3, r1, r2, r3
    2dd8:	f840 3d28 	str.w	r3, [r0, #-40]!

    struct tm timePtr;
    gmtime_r(&fatTime, &timePtr);
    2ddc:	a903      	add	r1, sp, #12
    2dde:	f008 ff65 	bl	bcac <gmtime_r>
    return (((unsigned int)timePtr.tm_year - 208) << 25) |
            (((unsigned int)timePtr.tm_mon + 1 ) << 21) |
            ((unsigned int)timePtr.tm_mday << 16) |
            ((unsigned int)timePtr.tm_hour << 11) |
            ((unsigned int)timePtr.tm_min << 5) |
            ((unsigned int)timePtr.tm_sec >> 1);
    2de2:	a803      	add	r0, sp, #12
    2de4:	c845      	ldmia	r0, {r0, r2, r6}
    struct tm timePtr;
    gmtime_r(&fatTime, &timePtr);

    return (((unsigned int)timePtr.tm_year - 208) << 25) |
            (((unsigned int)timePtr.tm_mon + 1 ) << 21) |
            ((unsigned int)timePtr.tm_mday << 16) |
    2de6:	9b06      	ldr	r3, [sp, #24]
    time_t fatTime = currentTime + timezone * 60 * 60;

    struct tm timePtr;
    gmtime_r(&fatTime, &timePtr);

    return (((unsigned int)timePtr.tm_year - 208) << 25) |
    2de8:	9d08      	ldr	r5, [sp, #32]
            (((unsigned int)timePtr.tm_mon + 1 ) << 21) |
    2dea:	9c07      	ldr	r4, [sp, #28]
            ((unsigned int)timePtr.tm_mday << 16) |
    2dec:	0419      	lsls	r1, r3, #16
    2dee:	ea41 21c6 	orr.w	r1, r1, r6, lsl #11
    2df2:	ea41 1242 	orr.w	r2, r1, r2, lsl #5
    2df6:	ea42 0250 	orr.w	r2, r2, r0, lsr #1
    time_t fatTime = currentTime + timezone * 60 * 60;

    struct tm timePtr;
    gmtime_r(&fatTime, &timePtr);

    return (((unsigned int)timePtr.tm_year - 208) << 25) |
    2dfa:	f1a5 03d0 	sub.w	r3, r5, #208	; 0xd0
    2dfe:	ea42 6343 	orr.w	r3, r2, r3, lsl #25
            (((unsigned int)timePtr.tm_mon + 1 ) << 21) |
    2e02:	1c60      	adds	r0, r4, #1
            ((unsigned int)timePtr.tm_mday << 16) |
            ((unsigned int)timePtr.tm_hour << 11) |
            ((unsigned int)timePtr.tm_min << 5) |
            ((unsigned int)timePtr.tm_sec >> 1);

}
    2e04:	ea43 5040 	orr.w	r0, r3, r0, lsl #21
    2e08:	b00d      	add	sp, #52	; 0x34
    2e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 *   together to clear multiple interrupt sources for the BURTC module
 *   (BURTC_IFS_nnn).
 ******************************************************************************/
__STATIC_INLINE void BURTC_IntClear(uint32_t flags)
{
  BURTC->IFC = flags;
    2e0c:	2201      	movs	r2, #1
    2e0e:	631a      	str	r2, [r3, #48]	; 0x30
 ******************************************************************************/
__STATIC_INLINE uint32_t BURTC_RetRegGet(uint32_t num)
{
  EFM_ASSERT(num <= 127);

  return BURTC->RET[num].REG;
    2e10:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104

    BURTC_IntClear(BURTC_IF_OF);

    uint32_t offsetHigh = BURTC_RetRegGet(AM_BURTC_TIME_OFFSET_HIGH);

    BURTC_RetRegSet(AM_BURTC_TIME_OFFSET_HIGH, offsetHigh + 1);
    2e14:	3201      	adds	r2, #1
 ******************************************************************************/
__STATIC_INLINE void BURTC_RetRegSet(uint32_t num, uint32_t data)
{
  EFM_ASSERT(num <= 127);

  BURTC->RET[num].REG = data;
    2e16:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 *   together to set multiple interrupt sources for the BURTC module
 *   (BURTC_IFS_nnn).
 ******************************************************************************/
__STATIC_INLINE void BURTC_IntEnable(uint32_t flags)
{
  BURTC->IEN |= flags;
    2e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2e1c:	f042 0201 	orr.w	r2, r2, #1
    2e20:	635a      	str	r2, [r3, #52]	; 0x34
 ******************************************************************************/
__STATIC_INLINE uint32_t BURTC_RetRegGet(uint32_t num)
{
  EFM_ASSERT(num <= 127);

  return BURTC->RET[num].REG;
    2e22:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    2e26:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 * @return
 *   BURTC counter value
 ******************************************************************************/
__STATIC_INLINE uint32_t BURTC_CounterGet(void)
{
  return BURTC->CNT;
    2e2a:	689c      	ldr	r4, [r3, #8]

}

static void getTime(uint32_t *time, uint16_t *milliseconds) {

    uint64_t offset =  (uint64_t)BURTC_RetRegGet(AM_BURTC_TIME_OFFSET_HIGH) << 32;
    2e2c:	460b      	mov	r3, r1
    2e2e:	1900      	adds	r0, r0, r4

    offset += (uint64_t)BURTC_RetRegGet(AM_BURTC_TIME_OFFSET_LOW);
    2e30:	f04f 0100 	mov.w	r1, #0
    2e34:	f141 0100 	adc.w	r1, r1, #0

    uint64_t currentCounter = offset + BURTC_CounterGet();
    2e38:	1940      	adds	r0, r0, r5
    2e3a:	4159      	adcs	r1, r3

    if (time != NULL) {

        *time = currentCounter / AM_LFXO_TICKS_PER_SECOND;
    2e3c:	0a83      	lsrs	r3, r0, #10
    2e3e:	ea43 5381 	orr.w	r3, r3, r1, lsl #22
    2e42:	e7c2      	b.n	2dca <get_fattime+0x3a>
    2e44:	40081000 	.word	0x40081000

00002e48 <AudioMoth_setRedLED>:

/* Functions to handle changing state of the red and green LED */

void AudioMoth_setRedLED(bool state) {

    GPIO_PinModeSet(LED_GPIOPORT, RED_PIN, gpioModePushPull, state);
    2e48:	2104      	movs	r1, #4

}

/* Functions to handle changing state of the red and green LED */

void AudioMoth_setRedLED(bool state) {
    2e4a:	4603      	mov	r3, r0

    GPIO_PinModeSet(LED_GPIOPORT, RED_PIN, gpioModePushPull, state);
    2e4c:	460a      	mov	r2, r1
    2e4e:	2002      	movs	r0, #2
    2e50:	f001 bfd0 	b.w	4df4 <GPIO_PinModeSet>

00002e54 <AudioMoth_setBothLED>:

}

void AudioMoth_setBothLED(bool state) {
    2e54:	b510      	push	{r4, lr}

    GPIO_PinModeSet(LED_GPIOPORT, RED_PIN, gpioModePushPull, state);
    2e56:	2104      	movs	r1, #4

    GPIO_PinModeSet(LED_GPIOPORT, RED_PIN, gpioModePushPull, state);

}

void AudioMoth_setBothLED(bool state) {
    2e58:	4604      	mov	r4, r0

    GPIO_PinModeSet(LED_GPIOPORT, RED_PIN, gpioModePushPull, state);
    2e5a:	4603      	mov	r3, r0
    2e5c:	460a      	mov	r2, r1
    2e5e:	2002      	movs	r0, #2
    2e60:	f001 ffc8 	bl	4df4 <GPIO_PinModeSet>
    GPIO_PinModeSet(LED_GPIOPORT, GREEN_PIN, gpioModePushPull, state);
    2e64:	4623      	mov	r3, r4
    2e66:	2002      	movs	r0, #2
    2e68:	2105      	movs	r1, #5
    2e6a:	2204      	movs	r2, #4

}
    2e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void AudioMoth_setBothLED(bool state) {

    GPIO_PinModeSet(LED_GPIOPORT, RED_PIN, gpioModePushPull, state);
    GPIO_PinModeSet(LED_GPIOPORT, GREEN_PIN, gpioModePushPull, state);
    2e70:	f001 bfc0 	b.w	4df4 <GPIO_PinModeSet>

00002e74 <AudioMoth_setGreenLED>:

}

void AudioMoth_setGreenLED(bool state) {
    2e74:	4603      	mov	r3, r0

    GPIO_PinModeSet(LED_GPIOPORT, GREEN_PIN, gpioModePushPull, state);
    2e76:	2105      	movs	r1, #5
    2e78:	2002      	movs	r0, #2
    2e7a:	2204      	movs	r2, #4
    2e7c:	f001 bfba 	b.w	4df4 <GPIO_PinModeSet>

00002e80 <AudioMoth_enableFileSystem>:

}

/* Functions to handle file system */

bool AudioMoth_enableFileSystem(void) {
    2e80:	b508      	push	{r3, lr}
    2e82:	4b0e      	ldr	r3, [pc, #56]	; (2ebc <AudioMoth_enableFileSystem+0x3c>)
    2e84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    2e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    GPIO_PinOutClear(SDEN_GPIOPORT, SD_ENABLE_N);

    /* Initialise MicroSD driver */

    MICROSD_Init();
    2e8c:	f002 fb7c 	bl	5588 <MICROSD_Init>

    /* Check SD card status */

    DSTATUS resCard = disk_initialize(0);
    2e90:	2000      	movs	r0, #0
    2e92:	f000 f8e1 	bl	3058 <disk_initialize>

    if (resCard == STA_NOINIT || resCard == STA_NODISK || resCard == STA_PROTECT) {
    2e96:	1e43      	subs	r3, r0, #1
    2e98:	b2db      	uxtb	r3, r3
    2e9a:	2b01      	cmp	r3, #1
    2e9c:	d90b      	bls.n	2eb6 <AudioMoth_enableFileSystem+0x36>
    2e9e:	2804      	cmp	r0, #4
        return false;
    2ea0:	f04f 0000 	mov.w	r0, #0

    /* Check SD card status */

    DSTATUS resCard = disk_initialize(0);

    if (resCard == STA_NOINIT || resCard == STA_NODISK || resCard == STA_PROTECT) {
    2ea4:	d006      	beq.n	2eb4 <AudioMoth_enableFileSystem+0x34>
        return false;
    }

    /* Initialise file system */

    if (f_mount(0, &fatfs) != FR_OK) {
    2ea6:	4906      	ldr	r1, [pc, #24]	; (2ec0 <AudioMoth_enableFileSystem+0x40>)
    2ea8:	f004 fe32 	bl	7b10 <f_mount>
    2eac:	fab0 f080 	clz	r0, r0
    2eb0:	0940      	lsrs	r0, r0, #5
    2eb2:	bd08      	pop	{r3, pc}
        return false;
    }

    return true;

}
    2eb4:	bd08      	pop	{r3, pc}
    /* Check SD card status */

    DSTATUS resCard = disk_initialize(0);

    if (resCard == STA_NOINIT || resCard == STA_NODISK || resCard == STA_PROTECT) {
        return false;
    2eb6:	2000      	movs	r0, #0
    2eb8:	bd08      	pop	{r3, pc}
    2eba:	bf00      	nop
    2ebc:	40006000 	.word	0x40006000
    2ec0:	20000c60 	.word	0x20000c60

00002ec4 <AudioMoth_openFile>:

    GPIO_PinOutSet(SDEN_GPIOPORT, SD_ENABLE_N);

}

bool AudioMoth_openFile(char *filename) {
    2ec4:	b508      	push	{r3, lr}
    2ec6:	4601      	mov	r1, r0

    /* Open a file for writing. Overwrite existing file with the same name */

    FRESULT res = f_open(&file, filename,  FA_CREATE_ALWAYS | FA_WRITE);
    2ec8:	220a      	movs	r2, #10
    2eca:	4803      	ldr	r0, [pc, #12]	; (2ed8 <AudioMoth_openFile+0x14>)
    2ecc:	f004 fe38 	bl	7b40 <f_open>
        return false;
    }

    return true;

}
    2ed0:	fab0 f080 	clz	r0, r0
    2ed4:	0940      	lsrs	r0, r0, #5
    2ed6:	bd08      	pop	{r3, pc}
    2ed8:	20000e98 	.word	0x20000e98

00002edc <AudioMoth_seekInFile>:

    return true;

}

bool AudioMoth_seekInFile(uint32_t position) {
    2edc:	b508      	push	{r3, lr}
    2ede:	4601      	mov	r1, r0

    FRESULT res = f_lseek(&file, position);
    2ee0:	4803      	ldr	r0, [pc, #12]	; (2ef0 <AudioMoth_seekInFile+0x14>)
    2ee2:	f005 fb5f 	bl	85a4 <f_lseek>
        return false;
    }

    return true;

}
    2ee6:	fab0 f080 	clz	r0, r0
    2eea:	0940      	lsrs	r0, r0, #5
    2eec:	bd08      	pop	{r3, pc}
    2eee:	bf00      	nop
    2ef0:	20000e98 	.word	0x20000e98

00002ef4 <AudioMoth_writeToFile>:

bool AudioMoth_writeToFile(void *bytes, uint16_t bytesToWrite) {
    2ef4:	b538      	push	{r3, r4, r5, lr}

    FRESULT res = f_write(&file, bytes, bytesToWrite, &bw);
    2ef6:	4d08      	ldr	r5, [pc, #32]	; (2f18 <AudioMoth_writeToFile+0x24>)

    return true;

}

bool AudioMoth_writeToFile(void *bytes, uint16_t bytesToWrite) {
    2ef8:	460c      	mov	r4, r1

    FRESULT res = f_write(&file, bytes, bytesToWrite, &bw);
    2efa:	460a      	mov	r2, r1
    2efc:	462b      	mov	r3, r5
    2efe:	4601      	mov	r1, r0
    2f00:	4806      	ldr	r0, [pc, #24]	; (2f1c <AudioMoth_writeToFile+0x28>)
    2f02:	f005 f94b 	bl	819c <f_write>

    if ((res != FR_OK) || (bytesToWrite != bw)) {
    2f06:	b928      	cbnz	r0, 2f14 <AudioMoth_writeToFile+0x20>
    2f08:	8828      	ldrh	r0, [r5, #0]
    2f0a:	1b00      	subs	r0, r0, r4
    2f0c:	fab0 f080 	clz	r0, r0
    2f10:	0940      	lsrs	r0, r0, #5
    2f12:	bd38      	pop	{r3, r4, r5, pc}
        return false;
    2f14:	2000      	movs	r0, #0
    }

    return true;

}
    2f16:	bd38      	pop	{r3, r4, r5, pc}
    2f18:	200010be 	.word	0x200010be
    2f1c:	20000e98 	.word	0x20000e98

00002f20 <AudioMoth_closeFile>:

bool AudioMoth_closeFile(void) {
    2f20:	b508      	push	{r3, lr}

    FRESULT res = f_close(&file);
    2f22:	4803      	ldr	r0, [pc, #12]	; (2f30 <AudioMoth_closeFile+0x10>)
    2f24:	f005 faa6 	bl	8474 <f_close>
        return false;
    }

    return true;

}
    2f28:	fab0 f080 	clz	r0, r0
    2f2c:	0940      	lsrs	r0, r0, #5
    2f2e:	bd08      	pop	{r3, pc}
    2f30:	20000e98 	.word	0x20000e98

00002f34 <ff_convert>:

/* Additional functions to handle long file names */

WCHAR ff_convert (WCHAR wch, UINT dir){
    return wch < 0x80 ? wch : 0;
}
    2f34:	287f      	cmp	r0, #127	; 0x7f
    2f36:	bf88      	it	hi
    2f38:	2000      	movhi	r0, #0
    2f3a:	4770      	bx	lr

00002f3c <ff_wtoupper>:

WCHAR ff_wtoupper (WCHAR wch) {
    if (wch < 0x80) {
    2f3c:	287f      	cmp	r0, #127	; 0x7f
    2f3e:	d807      	bhi.n	2f50 <ff_wtoupper+0x14>
        if (wch >= 'a' && wch <= 'z') {
    2f40:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    2f44:	2b19      	cmp	r3, #25
    2f46:	d804      	bhi.n	2f52 <ff_wtoupper+0x16>
            wch &= ~0x20;
    2f48:	f020 0020 	bic.w	r0, r0, #32
    2f4c:	b280      	uxth	r0, r0
    2f4e:	4770      	bx	lr
        }
        return wch;
    }
    return 0;
    2f50:	2000      	movs	r0, #0
}
    2f52:	4770      	bx	lr

00002f54 <_write>:

int _write(int file, const char *ptr, int len) {

    int x;

    for (x = 0; x < len; x++) ITM_SendChar (*ptr++);
    2f54:	1e10      	subs	r0, r2, #0
    2f56:	dd1a      	ble.n	2f8e <_write+0x3a>

}

/* Enable SWO output for debugging */

int _write(int file, const char *ptr, int len) {
    2f58:	b470      	push	{r4, r5, r6}
    2f5a:	180e      	adds	r6, r1, r0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
    2f5c:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    2f60:	e001      	b.n	2f66 <_write+0x12>

    int x;

    for (x = 0; x < len; x++) ITM_SendChar (*ptr++);
    2f62:	42b1      	cmp	r1, r6
    2f64:	d012      	beq.n	2f8c <_write+0x38>
    2f66:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	; 0xe80
    2f6a:	f811 5b01 	ldrb.w	r5, [r1], #1
    2f6e:	07da      	lsls	r2, r3, #31
    2f70:	d5f7      	bpl.n	2f62 <_write+0xe>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
    2f72:	f8d4 3e00 	ldr.w	r3, [r4, #3584]	; 0xe00
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
    2f76:	07db      	lsls	r3, r3, #31
    2f78:	d5f3      	bpl.n	2f62 <_write+0xe>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
    2f7a:	6823      	ldr	r3, [r4, #0]
    2f7c:	b91b      	cbnz	r3, 2f86 <_write+0x32>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
    2f7e:	bf00      	nop
    2f80:	6823      	ldr	r3, [r4, #0]
    2f82:	2b00      	cmp	r3, #0
    2f84:	d0fb      	beq.n	2f7e <_write+0x2a>
    2f86:	42b1      	cmp	r1, r6
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
    2f88:	7025      	strb	r5, [r4, #0]
    2f8a:	d1ec      	bne.n	2f66 <_write+0x12>

    return (len);

}
    2f8c:	bc70      	pop	{r4, r5, r6}
    2f8e:	4770      	bx	lr

00002f90 <AudioMoth_setupSWOForPrint>:

void AudioMoth_setupSWOForPrint(void) {

  /* Enable GPIO clock. */

  CMU->HFPERCLKEN0 |= CMU_HFPERCLKEN0_GPIO;
    2f90:	4929      	ldr	r1, [pc, #164]	; (3038 <AudioMoth_setupSWOForPrint+0xa8>)

  /* Enable Serial wire output pin */

  GPIO->ROUTE |= GPIO_ROUTE_SWOPEN;
    2f92:	4b2a      	ldr	r3, [pc, #168]	; (303c <AudioMoth_setupSWOForPrint+0xac>)

void AudioMoth_setupSWOForPrint(void) {

  /* Enable GPIO clock. */

  CMU->HFPERCLKEN0 |= CMU_HFPERCLKEN0_GPIO;
    2f94:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    2f96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    2f9a:	644a      	str	r2, [r1, #68]	; 0x44

  /* Enable Serial wire output pin */

  GPIO->ROUTE |= GPIO_ROUTE_SWOPEN;
    2f9c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    2fa0:	f042 0204 	orr.w	r2, r2, #4
    2fa4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

  /* Set location 0 */

  GPIO->ROUTE = (GPIO->ROUTE & ~(_GPIO_ROUTE_SWLOCATION_MASK)) | GPIO_ROUTE_SWLOCATION_LOC0;
    2fa8:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    2fac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    2fb0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

  /* Enable output on pin - GPIO Port F, Pin 2 */

  GPIO->P[5].MODEL &= ~(_GPIO_P_MODEL_MODE2_MASK);
    2fb4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
    2fb8:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
    2fbc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  GPIO->P[5].MODEL |= GPIO_P_MODEL_MODE2_PUSHPULL;
    2fc0:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8

  /* Enable debug clock AUXHFRCO */

  CMU->OSCENCMD = CMU_OSCENCMD_AUXHFRCOEN;
    2fc4:	2010      	movs	r0, #16

  /* Enable output on pin - GPIO Port F, Pin 2 */

  GPIO->P[5].MODEL &= ~(_GPIO_P_MODEL_MODE2_MASK);

  GPIO->P[5].MODEL |= GPIO_P_MODEL_MODE2_PUSHPULL;
    2fc6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    2fca:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  CMU->OSCENCMD = CMU_OSCENCMD_AUXHFRCOEN;

  /* Wait until clock is ready */

  while (!(CMU->STATUS & CMU_STATUS_AUXHFRCORDY));
    2fce:	460a      	mov	r2, r1

  GPIO->P[5].MODEL |= GPIO_P_MODEL_MODE2_PUSHPULL;

  /* Enable debug clock AUXHFRCO */

  CMU->OSCENCMD = CMU_OSCENCMD_AUXHFRCOEN;
    2fd0:	6208      	str	r0, [r1, #32]

  /* Wait until clock is ready */

  while (!(CMU->STATUS & CMU_STATUS_AUXHFRCORDY));
    2fd2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    2fd4:	069b      	lsls	r3, r3, #26
    2fd6:	d5fc      	bpl.n	2fd2 <AudioMoth_setupSWOForPrint+0x42>

    return (len);

}

void AudioMoth_setupSWOForPrint(void) {
    2fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  while (!(CMU->STATUS & CMU_STATUS_AUXHFRCORDY));

  /* Enable trace in core debug */

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    2fdc:	4c18      	ldr	r4, [pc, #96]	; (3040 <AudioMoth_setupSWOForPrint+0xb0>)

  ITM->TER  = 0x0;

  ITM->TCR  = 0x0;

  TPI->SPPR = 2;
    2fde:	4a19      	ldr	r2, [pc, #100]	; (3044 <AudioMoth_setupSWOForPrint+0xb4>)

  while (!(CMU->STATUS & CMU_STATUS_AUXHFRCORDY));

  /* Enable trace in core debug */

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    2fe0:	68e0      	ldr	r0, [r4, #12]

  TPI->ACPR = 0xf;

  ITM->TPR  = 0x0;

  DWT->CTRL = 0x400003FE;
    2fe2:	f8df e068 	ldr.w	lr, [pc, #104]	; 304c <AudioMoth_setupSWOForPrint+0xbc>

  /* Enable trace in core debug */

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;

  ITM->LAR  = 0xC5ACCE55;
    2fe6:	f8df a068 	ldr.w	sl, [pc, #104]	; 3050 <AudioMoth_setupSWOForPrint+0xc0>

  TPI->ACPR = 0xf;

  ITM->TPR  = 0x0;

  DWT->CTRL = 0x400003FE;
    2fea:	f8df c068 	ldr.w	ip, [pc, #104]	; 3054 <AudioMoth_setupSWOForPrint+0xc4>

  ITM->TCR  = 0x0001000D;
    2fee:	4f16      	ldr	r7, [pc, #88]	; (3048 <AudioMoth_setupSWOForPrint+0xb8>)

  /* Enable trace in core debug */

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;

  ITM->LAR  = 0xC5ACCE55;
    2ff0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000

  ITM->TER  = 0x0;
    2ff4:	2100      	movs	r1, #0

  while (!(CMU->STATUS & CMU_STATUS_AUXHFRCORDY));

  /* Enable trace in core debug */

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    2ff6:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000

  ITM->TER  = 0x0;

  ITM->TCR  = 0x0;

  TPI->SPPR = 2;
    2ffa:	f04f 0902 	mov.w	r9, #2

  TPI->ACPR = 0xf;
    2ffe:	f04f 080f 	mov.w	r8, #15

  DWT->CTRL = 0x400003FE;

  ITM->TCR  = 0x0001000D;

  TPI->FFCR = 0x00000100;
    3002:	f44f 7680 	mov.w	r6, #256	; 0x100

  ITM->TER  = 0x1;
    3006:	2501      	movs	r5, #1

  while (!(CMU->STATUS & CMU_STATUS_AUXHFRCORDY));

  /* Enable trace in core debug */

  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    3008:	60e0      	str	r0, [r4, #12]

  ITM->LAR  = 0xC5ACCE55;
    300a:	f8c3 afb0 	str.w	sl, [r3, #4016]	; 0xfb0

  ITM->TER  = 0x0;
    300e:	f8c3 1e00 	str.w	r1, [r3, #3584]	; 0xe00

  ITM->TCR  = 0x0;
    3012:	f8c3 1e80 	str.w	r1, [r3, #3712]	; 0xe80

  TPI->SPPR = 2;
    3016:	f8c2 90f0 	str.w	r9, [r2, #240]	; 0xf0

  TPI->ACPR = 0xf;
    301a:	f8c2 8010 	str.w	r8, [r2, #16]

  ITM->TPR  = 0x0;
    301e:	f8c3 1e40 	str.w	r1, [r3, #3648]	; 0xe40

  DWT->CTRL = 0x400003FE;
    3022:	f8ce c000 	str.w	ip, [lr]

  ITM->TCR  = 0x0001000D;
    3026:	f8c3 7e80 	str.w	r7, [r3, #3712]	; 0xe80

  TPI->FFCR = 0x00000100;
    302a:	f8c2 6304 	str.w	r6, [r2, #772]	; 0x304

  ITM->TER  = 0x1;
    302e:	f8c3 5e00 	str.w	r5, [r3, #3584]	; 0xe00
    3032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3036:	bf00      	nop
    3038:	400c8000 	.word	0x400c8000
    303c:	40006000 	.word	0x40006000
    3040:	e000edf0 	.word	0xe000edf0
    3044:	e0040000 	.word	0xe0040000
    3048:	0001000d 	.word	0x0001000d
    304c:	e0001000 	.word	0xe0001000
    3050:	c5acce55 	.word	0xc5acce55
    3054:	400003fe 	.word	0x400003fe

00003058 <disk_initialize>:
  BYTE drv  /* Physical drive nmuber (0) */
)
{
  BYTE n, cmd, ty, ocr[4];

  if (drv) return STA_NOINIT;                   /* Supports only single drive */
    3058:	bb38      	cbnz	r0, 30aa <disk_initialize+0x52>
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
  BYTE drv  /* Physical drive nmuber (0) */
)
{
    305a:	b5f0      	push	{r4, r5, r6, r7, lr}
  BYTE n, cmd, ty, ocr[4];

  if (drv) return STA_NOINIT;                   /* Supports only single drive */
  if (stat & STA_NODISK) return stat;           /* No card in the socket */
    305c:	4d49      	ldr	r5, [pc, #292]	; (3184 <disk_initialize+0x12c>)
    305e:	7828      	ldrb	r0, [r5, #0]
    3060:	0783      	lsls	r3, r0, #30
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
  BYTE drv  /* Physical drive nmuber (0) */
)
{
    3062:	b083      	sub	sp, #12
  BYTE n, cmd, ty, ocr[4];

  if (drv) return STA_NOINIT;                   /* Supports only single drive */
  if (stat & STA_NODISK) return stat;           /* No card in the socket */
    3064:	d501      	bpl.n	306a <disk_initialize+0x12>
    MICROSD_PowerOff();
    stat |= STA_NOINIT;                         /* Set STA_NOINIT */
  }

  return stat;
}
    3066:	b003      	add	sp, #12
    3068:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BYTE n, cmd, ty, ocr[4];

  if (drv) return STA_NOINIT;                   /* Supports only single drive */
  if (stat & STA_NODISK) return stat;           /* No card in the socket */

  MICROSD_PowerOn();                            /* Force socket power on */
    306a:	f002 fb2b 	bl	56c4 <MICROSD_PowerOn>
  MICROSD_SpiClkSlow();                         /* Start with low SPI clock. */
    306e:	f002 fd0d 	bl	5a8c <MICROSD_SpiClkSlow>
    3072:	240a      	movs	r4, #10
  for (n = 10; n; n--) MICROSD_XferSpi(0xff);   /* 80 dummy clocks */
    3074:	20ff      	movs	r0, #255	; 0xff
    3076:	f002 fad3 	bl	5620 <MICROSD_XferSpi>
    307a:	1e61      	subs	r1, r4, #1
    307c:	f011 04ff 	ands.w	r4, r1, #255	; 0xff
    3080:	d1f8      	bne.n	3074 <disk_initialize+0x1c>

  ty = 0;
  if (MICROSD_SendCmd(CMD0, 0) == 1) {          /* Enter Idle state */
    3082:	4620      	mov	r0, r4
    3084:	4621      	mov	r1, r4
    3086:	f002 fc4b 	bl	5920 <MICROSD_SendCmd>
    308a:	2801      	cmp	r0, #1
    308c:	4606      	mov	r6, r0
    308e:	d00e      	beq.n	30ae <disk_initialize+0x56>
      while (!MICROSD_TimeOutElapsed() && MICROSD_SendCmd(cmd, 0));     /* Wait for leaving idle state */
      if (MICROSD_TimeOutElapsed() || MICROSD_SendCmd(CMD16, 512) != 0) /* Set read/write block length to 512 */
        ty = 0;
    }
  }
  CardType = ty;
    3090:	4b3d      	ldr	r3, [pc, #244]	; (3188 <disk_initialize+0x130>)
    3092:	2200      	movs	r2, #0
    3094:	801a      	strh	r2, [r3, #0]
  MICROSD_Deselect();
    3096:	f002 fad1 	bl	563c <MICROSD_Deselect>

  if (ty) {                                     /* Initialization succeded */
    stat &= ~STA_NOINIT;                        /* Clear STA_NOINIT */
    MICROSD_SpiClkFast();                       /* Speed up SPI clock. */
  } else {                                      /* Initialization failed */
    MICROSD_PowerOff();
    309a:	f002 fb19 	bl	56d0 <MICROSD_PowerOff>
    stat |= STA_NOINIT;                         /* Set STA_NOINIT */
    309e:	7828      	ldrb	r0, [r5, #0]
    30a0:	f040 0001 	orr.w	r0, r0, #1
    30a4:	7028      	strb	r0, [r5, #0]
  }

  return stat;
}
    30a6:	b003      	add	sp, #12
    30a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BYTE drv  /* Physical drive nmuber (0) */
)
{
  BYTE n, cmd, ty, ocr[4];

  if (drv) return STA_NOINIT;                   /* Supports only single drive */
    30aa:	2001      	movs	r0, #1
    MICROSD_PowerOff();
    stat |= STA_NOINIT;                         /* Set STA_NOINIT */
  }

  return stat;
}
    30ac:	4770      	bx	lr
  MICROSD_SpiClkSlow();                         /* Start with low SPI clock. */
  for (n = 10; n; n--) MICROSD_XferSpi(0xff);   /* 80 dummy clocks */

  ty = 0;
  if (MICROSD_SendCmd(CMD0, 0) == 1) {          /* Enter Idle state */
    MICROSD_TimeOutSet(1000);                   /* Initialization timeout of 1000 msec */
    30ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    30b2:	f002 fd0d 	bl	5ad0 <MICROSD_TimeOutSet>
    if (MICROSD_SendCmd(CMD8, 0x1AA) == 1) {    /* SDv2? */
    30b6:	2008      	movs	r0, #8
    30b8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    30bc:	f002 fc30 	bl	5920 <MICROSD_SendCmd>
    30c0:	2801      	cmp	r0, #1
    30c2:	d140      	bne.n	3146 <disk_initialize+0xee>
    30c4:	af01      	add	r7, sp, #4
    30c6:	463c      	mov	r4, r7
    30c8:	ae02      	add	r6, sp, #8
      for (n = 0; n < 4; n++) ocr[n] = MICROSD_XferSpi(0xff); /* Get trailing return value of R7 resp */
    30ca:	20ff      	movs	r0, #255	; 0xff
    30cc:	f002 faa8 	bl	5620 <MICROSD_XferSpi>
    30d0:	f804 0b01 	strb.w	r0, [r4], #1
    30d4:	42b4      	cmp	r4, r6
    30d6:	d1f8      	bne.n	30ca <disk_initialize+0x72>
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) {   /* The card can work at vdd range of 2.7-3.6V */
    30d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    30dc:	2b01      	cmp	r3, #1
    30de:	d1d7      	bne.n	3090 <disk_initialize+0x38>
    30e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    30e4:	2baa      	cmp	r3, #170	; 0xaa
    30e6:	d1d3      	bne.n	3090 <disk_initialize+0x38>
    30e8:	e003      	b.n	30f2 <disk_initialize+0x9a>
        while (!MICROSD_TimeOutElapsed() && MICROSD_SendCmd(ACMD41, 0x40000000)); /* Wait for leaving idle state (ACMD41 with HCS bit) */
    30ea:	20a9      	movs	r0, #169	; 0xa9
    30ec:	f002 fc18 	bl	5920 <MICROSD_SendCmd>
    30f0:	b128      	cbz	r0, 30fe <disk_initialize+0xa6>
    30f2:	f002 fcf9 	bl	5ae8 <MICROSD_TimeOutElapsed>
    30f6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    30fa:	2800      	cmp	r0, #0
    30fc:	d0f5      	beq.n	30ea <disk_initialize+0x92>
        if (!MICROSD_TimeOutElapsed() && MICROSD_SendCmd(CMD58, 0) == 0) {        /* Check CCS bit in the OCR */
    30fe:	f002 fcf3 	bl	5ae8 <MICROSD_TimeOutElapsed>
    3102:	4601      	mov	r1, r0
    3104:	2800      	cmp	r0, #0
    3106:	d1c3      	bne.n	3090 <disk_initialize+0x38>
    3108:	203a      	movs	r0, #58	; 0x3a
    310a:	f002 fc09 	bl	5920 <MICROSD_SendCmd>
    310e:	2800      	cmp	r0, #0
    3110:	d1be      	bne.n	3090 <disk_initialize+0x38>
          for (n = 0; n < 4; n++) ocr[n] = MICROSD_XferSpi(0xff);
    3112:	20ff      	movs	r0, #255	; 0xff
    3114:	f002 fa84 	bl	5620 <MICROSD_XferSpi>
    3118:	f807 0b01 	strb.w	r0, [r7], #1
    311c:	42b7      	cmp	r7, r6
    311e:	d1f8      	bne.n	3112 <disk_initialize+0xba>
          ty = (ocr[0] & 0x40) ? CT_SD2|CT_BLOCK : CT_SD2; /* SDv2 */
    3120:	f89d 3004 	ldrb.w	r3, [sp, #4]
    3124:	f013 0f40 	tst.w	r3, #64	; 0x40
    3128:	bf14      	ite	ne
    312a:	260c      	movne	r6, #12
    312c:	2604      	moveq	r6, #4
      while (!MICROSD_TimeOutElapsed() && MICROSD_SendCmd(cmd, 0));     /* Wait for leaving idle state */
      if (MICROSD_TimeOutElapsed() || MICROSD_SendCmd(CMD16, 512) != 0) /* Set read/write block length to 512 */
        ty = 0;
    }
  }
  CardType = ty;
    312e:	4b16      	ldr	r3, [pc, #88]	; (3188 <disk_initialize+0x130>)
    3130:	801e      	strh	r6, [r3, #0]
  MICROSD_Deselect();
    3132:	f002 fa83 	bl	563c <MICROSD_Deselect>

  if (ty) {                                     /* Initialization succeded */
    stat &= ~STA_NOINIT;                        /* Clear STA_NOINIT */
    3136:	782b      	ldrb	r3, [r5, #0]
    3138:	f023 0301 	bic.w	r3, r3, #1
    313c:	702b      	strb	r3, [r5, #0]
    MICROSD_SpiClkFast();                       /* Speed up SPI clock. */
    313e:	f002 fcb5 	bl	5aac <MICROSD_SpiClkFast>
    3142:	7828      	ldrb	r0, [r5, #0]
    3144:	e78f      	b.n	3066 <disk_initialize+0xe>
          for (n = 0; n < 4; n++) ocr[n] = MICROSD_XferSpi(0xff);
          ty = (ocr[0] & 0x40) ? CT_SD2|CT_BLOCK : CT_SD2; /* SDv2 */
        }
      }
    } else {                                    /* SDv1 or MMCv3 */
      if (MICROSD_SendCmd(ACMD41, 0) <= 1) {
    3146:	4621      	mov	r1, r4
    3148:	20a9      	movs	r0, #169	; 0xa9
    314a:	f002 fbe9 	bl	5920 <MICROSD_SendCmd>
    314e:	2801      	cmp	r0, #1
        ty = CT_SD1; cmd = ACMD41;              /* SDv1 */
      } else {
        ty = CT_MMC; cmd = CMD1;                /* MMCv3 */
    3150:	bf8e      	itee	hi
    3152:	4634      	movhi	r4, r6
    3154:	2602      	movls	r6, #2
          ty = (ocr[0] & 0x40) ? CT_SD2|CT_BLOCK : CT_SD2; /* SDv2 */
        }
      }
    } else {                                    /* SDv1 or MMCv3 */
      if (MICROSD_SendCmd(ACMD41, 0) <= 1) {
        ty = CT_SD1; cmd = ACMD41;              /* SDv1 */
    3156:	24a9      	movls	r4, #169	; 0xa9
    3158:	e003      	b.n	3162 <disk_initialize+0x10a>
      } else {
        ty = CT_MMC; cmd = CMD1;                /* MMCv3 */
      }
      while (!MICROSD_TimeOutElapsed() && MICROSD_SendCmd(cmd, 0));     /* Wait for leaving idle state */
    315a:	4620      	mov	r0, r4
    315c:	f002 fbe0 	bl	5920 <MICROSD_SendCmd>
    3160:	b120      	cbz	r0, 316c <disk_initialize+0x114>
    3162:	f002 fcc1 	bl	5ae8 <MICROSD_TimeOutElapsed>
    3166:	4601      	mov	r1, r0
    3168:	2800      	cmp	r0, #0
    316a:	d0f6      	beq.n	315a <disk_initialize+0x102>
      if (MICROSD_TimeOutElapsed() || MICROSD_SendCmd(CMD16, 512) != 0) /* Set read/write block length to 512 */
    316c:	f002 fcbc 	bl	5ae8 <MICROSD_TimeOutElapsed>
    3170:	2800      	cmp	r0, #0
    3172:	d18d      	bne.n	3090 <disk_initialize+0x38>
    3174:	2010      	movs	r0, #16
    3176:	f44f 7100 	mov.w	r1, #512	; 0x200
    317a:	f002 fbd1 	bl	5920 <MICROSD_SendCmd>
    317e:	2800      	cmp	r0, #0
    3180:	d186      	bne.n	3090 <disk_initialize+0x38>
    3182:	e7d4      	b.n	312e <disk_initialize+0xd6>
    3184:	20000004 	.word	0x20000004
    3188:	200010c0 	.word	0x200010c0

0000318c <disk_status>:

DSTATUS disk_status (
  BYTE drv                        /* Physical drive nmuber (0) */
)
{
  if (drv) return STA_NOINIT;     /* Supports only single drive */
    318c:	b910      	cbnz	r0, 3194 <disk_status+0x8>
  return stat;
    318e:	4b02      	ldr	r3, [pc, #8]	; (3198 <disk_status+0xc>)
    3190:	7818      	ldrb	r0, [r3, #0]
    3192:	4770      	bx	lr

DSTATUS disk_status (
  BYTE drv                        /* Physical drive nmuber (0) */
)
{
  if (drv) return STA_NOINIT;     /* Supports only single drive */
    3194:	2001      	movs	r0, #1
  return stat;
}
    3196:	4770      	bx	lr
    3198:	20000004 	.word	0x20000004

0000319c <disk_read>:
  BYTE drv,       /* Physical drive nmuber (0) */
  BYTE *buff,     /* Pointer to the data buffer to store read data */
  DWORD sector,   /* Start sector number (LBA) */
  BYTE count      /* Sector count (1..255) */
)
{
    319c:	b530      	push	{r4, r5, lr}
    319e:	b083      	sub	sp, #12
  if (drv || !count) return RES_PARERR;
    31a0:	b118      	cbz	r0, 31aa <disk_read+0xe>
    31a2:	2404      	movs	r4, #4
    }
  }
  MICROSD_Deselect();

  return count ? RES_ERROR : RES_OK;
}
    31a4:	4620      	mov	r0, r4
    31a6:	b003      	add	sp, #12
    31a8:	bd30      	pop	{r4, r5, pc}
  BYTE *buff,     /* Pointer to the data buffer to store read data */
  DWORD sector,   /* Start sector number (LBA) */
  BYTE count      /* Sector count (1..255) */
)
{
  if (drv || !count) return RES_PARERR;
    31aa:	2b00      	cmp	r3, #0
    31ac:	d0f9      	beq.n	31a2 <disk_read+0x6>
    31ae:	460d      	mov	r5, r1
  if (stat & STA_NOINIT) return RES_NOTRDY;
    31b0:	491f      	ldr	r1, [pc, #124]	; (3230 <disk_read+0x94>)
    31b2:	7809      	ldrb	r1, [r1, #0]
    31b4:	07c8      	lsls	r0, r1, #31
    31b6:	d501      	bpl.n	31bc <disk_read+0x20>
    31b8:	2403      	movs	r4, #3
    31ba:	e7f3      	b.n	31a4 <disk_read+0x8>

  if (!(CardType & CT_BLOCK)) sector *= 512;  /* Convert to byte address if needed */
    31bc:	491d      	ldr	r1, [pc, #116]	; (3234 <disk_read+0x98>)
    31be:	9301      	str	r3, [sp, #4]
    31c0:	8809      	ldrh	r1, [r1, #0]
    31c2:	0709      	lsls	r1, r1, #28
    31c4:	bf58      	it	pl
    31c6:	0252      	lslpl	r2, r2, #9

  if (count == 1) {                           /* Single block read */
    31c8:	2b01      	cmp	r3, #1
    if ((MICROSD_SendCmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
    31ca:	4611      	mov	r1, r2
  if (drv || !count) return RES_PARERR;
  if (stat & STA_NOINIT) return RES_NOTRDY;

  if (!(CardType & CT_BLOCK)) sector *= 512;  /* Convert to byte address if needed */

  if (count == 1) {                           /* Single block read */
    31cc:	d01d      	beq.n	320a <disk_read+0x6e>
    if ((MICROSD_SendCmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
      && MICROSD_BlockRx(buff, 512))
      count = 0;
  }
  else {                                        /* Multiple block read */
    if (MICROSD_SendCmd(CMD18, sector) == 0) {  /* READ_MULTIPLE_BLOCK */
    31ce:	2012      	movs	r0, #18
    31d0:	f002 fba6 	bl	5920 <MICROSD_SendCmd>
    31d4:	9b01      	ldr	r3, [sp, #4]
    31d6:	b130      	cbz	r0, 31e6 <disk_read+0x4a>
    31d8:	2401      	movs	r4, #1
        buff += 512;
      } while (--count);
      MICROSD_SendCmd(CMD12, 0);                /* STOP_TRANSMISSION */
    }
  }
  MICROSD_Deselect();
    31da:	f002 fa2f 	bl	563c <MICROSD_Deselect>

  return count ? RES_ERROR : RES_OK;
    31de:	e7e1      	b.n	31a4 <disk_read+0x8>
  else {                                        /* Multiple block read */
    if (MICROSD_SendCmd(CMD18, sector) == 0) {  /* READ_MULTIPLE_BLOCK */
      do {
        if (!MICROSD_BlockRx(buff, 512)) break;
        buff += 512;
      } while (--count);
    31e0:	f014 03ff 	ands.w	r3, r4, #255	; 0xff
    31e4:	d018      	beq.n	3218 <disk_read+0x7c>
      count = 0;
  }
  else {                                        /* Multiple block read */
    if (MICROSD_SendCmd(CMD18, sector) == 0) {  /* READ_MULTIPLE_BLOCK */
      do {
        if (!MICROSD_BlockRx(buff, 512)) break;
    31e6:	4628      	mov	r0, r5
    31e8:	f44f 7100 	mov.w	r1, #512	; 0x200
    31ec:	9301      	str	r3, [sp, #4]
    31ee:	f002 fab1 	bl	5754 <MICROSD_BlockRx>
        buff += 512;
      } while (--count);
    31f2:	9b01      	ldr	r3, [sp, #4]
  }
  else {                                        /* Multiple block read */
    if (MICROSD_SendCmd(CMD18, sector) == 0) {  /* READ_MULTIPLE_BLOCK */
      do {
        if (!MICROSD_BlockRx(buff, 512)) break;
        buff += 512;
    31f4:	f505 7500 	add.w	r5, r5, #512	; 0x200
      } while (--count);
    31f8:	1e5c      	subs	r4, r3, #1
      count = 0;
  }
  else {                                        /* Multiple block read */
    if (MICROSD_SendCmd(CMD18, sector) == 0) {  /* READ_MULTIPLE_BLOCK */
      do {
        if (!MICROSD_BlockRx(buff, 512)) break;
    31fa:	2800      	cmp	r0, #0
    31fc:	d1f0      	bne.n	31e0 <disk_read+0x44>
    31fe:	2401      	movs	r4, #1
        buff += 512;
      } while (--count);
      MICROSD_SendCmd(CMD12, 0);                /* STOP_TRANSMISSION */
    3200:	2100      	movs	r1, #0
    3202:	200c      	movs	r0, #12
    3204:	f002 fb8c 	bl	5920 <MICROSD_SendCmd>
    3208:	e7e7      	b.n	31da <disk_read+0x3e>
  if (stat & STA_NOINIT) return RES_NOTRDY;

  if (!(CardType & CT_BLOCK)) sector *= 512;  /* Convert to byte address if needed */

  if (count == 1) {                           /* Single block read */
    if ((MICROSD_SendCmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
    320a:	2011      	movs	r0, #17
    320c:	f002 fb88 	bl	5920 <MICROSD_SendCmd>
    3210:	9b01      	ldr	r3, [sp, #4]
    3212:	b118      	cbz	r0, 321c <disk_read+0x80>
    3214:	461c      	mov	r4, r3
    3216:	e7e0      	b.n	31da <disk_read+0x3e>
    3218:	461c      	mov	r4, r3
    321a:	e7f1      	b.n	3200 <disk_read+0x64>
      && MICROSD_BlockRx(buff, 512))
    321c:	4628      	mov	r0, r5
    321e:	f44f 7100 	mov.w	r1, #512	; 0x200
    3222:	f002 fa97 	bl	5754 <MICROSD_BlockRx>
    3226:	fab0 f480 	clz	r4, r0
    322a:	0964      	lsrs	r4, r4, #5
    322c:	e7d5      	b.n	31da <disk_read+0x3e>
    322e:	bf00      	nop
    3230:	20000004 	.word	0x20000004
    3234:	200010c0 	.word	0x200010c0

00003238 <disk_write>:
  const BYTE *buff,   /* Pointer to the data to be written */
  DWORD sector,       /* Start sector number (LBA) */
  BYTE count          /* Sector count (1..255) */
)
{
  if (drv || !count) return RES_PARERR;
    3238:	b108      	cbz	r0, 323e <disk_write+0x6>
    323a:	2004      	movs	r0, #4
    323c:	4770      	bx	lr
    323e:	2b00      	cmp	r3, #0
    3240:	d0fb      	beq.n	323a <disk_write+0x2>
  BYTE drv,           /* Physical drive nmuber (0) */
  const BYTE *buff,   /* Pointer to the data to be written */
  DWORD sector,       /* Start sector number (LBA) */
  BYTE count          /* Sector count (1..255) */
)
{
    3242:	b510      	push	{r4, lr}
    3244:	460c      	mov	r4, r1
  if (drv || !count) return RES_PARERR;
  if (stat & STA_NOINIT) return RES_NOTRDY;
    3246:	492b      	ldr	r1, [pc, #172]	; (32f4 <disk_write+0xbc>)
    3248:	7809      	ldrb	r1, [r1, #0]
    324a:	07c8      	lsls	r0, r1, #31
  BYTE drv,           /* Physical drive nmuber (0) */
  const BYTE *buff,   /* Pointer to the data to be written */
  DWORD sector,       /* Start sector number (LBA) */
  BYTE count          /* Sector count (1..255) */
)
{
    324c:	b082      	sub	sp, #8
  if (drv || !count) return RES_PARERR;
  if (stat & STA_NOINIT) return RES_NOTRDY;
    324e:	d502      	bpl.n	3256 <disk_write+0x1e>
    3250:	2003      	movs	r0, #3
    }
  }
  MICROSD_Deselect();

  return count ? RES_ERROR : RES_OK;
}
    3252:	b002      	add	sp, #8
    3254:	bd10      	pop	{r4, pc}
  BYTE count          /* Sector count (1..255) */
)
{
  if (drv || !count) return RES_PARERR;
  if (stat & STA_NOINIT) return RES_NOTRDY;
  if (stat & STA_PROTECT) return RES_WRPRT;
    3256:	0749      	lsls	r1, r1, #29
    3258:	d501      	bpl.n	325e <disk_write+0x26>
    325a:	2002      	movs	r0, #2
    325c:	e7f9      	b.n	3252 <disk_write+0x1a>

  if (!(CardType & CT_BLOCK)) sector *= 512;  /* Convert to byte address if needed */
    325e:	4926      	ldr	r1, [pc, #152]	; (32f8 <disk_write+0xc0>)
    3260:	8809      	ldrh	r1, [r1, #0]
    3262:	0708      	lsls	r0, r1, #28
    3264:	bf58      	it	pl
    3266:	0252      	lslpl	r2, r2, #9

  if (count == 1) {                           /* Single block write */
    3268:	2b01      	cmp	r3, #1
    326a:	d032      	beq.n	32d2 <disk_write+0x9a>
    if ((MICROSD_SendCmd(CMD24, sector) == 0) /* WRITE_BLOCK */
      && MICROSD_BlockTx(buff, 0xFE))
      count = 0;
  }
  else {                                      /* Multiple block write */
    if (CardType & CT_SDC) MICROSD_SendCmd(ACMD23, count);
    326c:	f011 0f06 	tst.w	r1, #6
    3270:	d126      	bne.n	32c0 <disk_write+0x88>
    if (MICROSD_SendCmd(CMD25, sector) == 0) {/* WRITE_MULTIPLE_BLOCK */
    3272:	4611      	mov	r1, r2
    3274:	2019      	movs	r0, #25
    3276:	9300      	str	r3, [sp, #0]
    3278:	f002 fb52 	bl	5920 <MICROSD_SendCmd>
    327c:	9b00      	ldr	r3, [sp, #0]
    327e:	b140      	cbz	r0, 3292 <disk_write+0x5a>
    3280:	2001      	movs	r0, #1
    3282:	9000      	str	r0, [sp, #0]
      } while (--count);
      if (!MICROSD_BlockTx(0, 0xFD))          /* STOP_TRAN token */
        count = 1;
    }
  }
  MICROSD_Deselect();
    3284:	f002 f9da 	bl	563c <MICROSD_Deselect>

  return count ? RES_ERROR : RES_OK;
    3288:	9800      	ldr	r0, [sp, #0]
    328a:	e7e2      	b.n	3252 <disk_write+0x1a>
    if (CardType & CT_SDC) MICROSD_SendCmd(ACMD23, count);
    if (MICROSD_SendCmd(CMD25, sector) == 0) {/* WRITE_MULTIPLE_BLOCK */
      do {
        if (!MICROSD_BlockTx(buff, 0xFC)) break;
        buff += 512;
      } while (--count);
    328c:	f012 03ff 	ands.w	r3, r2, #255	; 0xff
    3290:	d00a      	beq.n	32a8 <disk_write+0x70>
  }
  else {                                      /* Multiple block write */
    if (CardType & CT_SDC) MICROSD_SendCmd(ACMD23, count);
    if (MICROSD_SendCmd(CMD25, sector) == 0) {/* WRITE_MULTIPLE_BLOCK */
      do {
        if (!MICROSD_BlockTx(buff, 0xFC)) break;
    3292:	4620      	mov	r0, r4
    3294:	21fc      	movs	r1, #252	; 0xfc
    3296:	9300      	str	r3, [sp, #0]
    3298:	f002 fabc 	bl	5814 <MICROSD_BlockTx>
        buff += 512;
      } while (--count);
    329c:	9b00      	ldr	r3, [sp, #0]
  else {                                      /* Multiple block write */
    if (CardType & CT_SDC) MICROSD_SendCmd(ACMD23, count);
    if (MICROSD_SendCmd(CMD25, sector) == 0) {/* WRITE_MULTIPLE_BLOCK */
      do {
        if (!MICROSD_BlockTx(buff, 0xFC)) break;
        buff += 512;
    329e:	f504 7400 	add.w	r4, r4, #512	; 0x200
      } while (--count);
    32a2:	1e5a      	subs	r2, r3, #1
  }
  else {                                      /* Multiple block write */
    if (CardType & CT_SDC) MICROSD_SendCmd(ACMD23, count);
    if (MICROSD_SendCmd(CMD25, sector) == 0) {/* WRITE_MULTIPLE_BLOCK */
      do {
        if (!MICROSD_BlockTx(buff, 0xFC)) break;
    32a4:	2800      	cmp	r0, #0
    32a6:	d1f1      	bne.n	328c <disk_write+0x54>
        buff += 512;
      } while (--count);
      if (!MICROSD_BlockTx(0, 0xFD))          /* STOP_TRAN token */
    32a8:	2000      	movs	r0, #0
    32aa:	21fd      	movs	r1, #253	; 0xfd
    32ac:	9300      	str	r3, [sp, #0]
    32ae:	f002 fab1 	bl	5814 <MICROSD_BlockTx>
    32b2:	9b00      	ldr	r3, [sp, #0]
    32b4:	2800      	cmp	r0, #0
    32b6:	d0e3      	beq.n	3280 <disk_write+0x48>
    32b8:	1c18      	adds	r0, r3, #0
    32ba:	bf18      	it	ne
    32bc:	2001      	movne	r0, #1
    32be:	e7e0      	b.n	3282 <disk_write+0x4a>
    if ((MICROSD_SendCmd(CMD24, sector) == 0) /* WRITE_BLOCK */
      && MICROSD_BlockTx(buff, 0xFE))
      count = 0;
  }
  else {                                      /* Multiple block write */
    if (CardType & CT_SDC) MICROSD_SendCmd(ACMD23, count);
    32c0:	4619      	mov	r1, r3
    32c2:	2097      	movs	r0, #151	; 0x97
    32c4:	9201      	str	r2, [sp, #4]
    32c6:	9300      	str	r3, [sp, #0]
    32c8:	f002 fb2a 	bl	5920 <MICROSD_SendCmd>
    32cc:	9a01      	ldr	r2, [sp, #4]
    32ce:	9b00      	ldr	r3, [sp, #0]
    32d0:	e7cf      	b.n	3272 <disk_write+0x3a>
  if (stat & STA_PROTECT) return RES_WRPRT;

  if (!(CardType & CT_BLOCK)) sector *= 512;  /* Convert to byte address if needed */

  if (count == 1) {                           /* Single block write */
    if ((MICROSD_SendCmd(CMD24, sector) == 0) /* WRITE_BLOCK */
    32d2:	4611      	mov	r1, r2
    32d4:	2018      	movs	r0, #24
    32d6:	9300      	str	r3, [sp, #0]
    32d8:	f002 fb22 	bl	5920 <MICROSD_SendCmd>
    32dc:	9b00      	ldr	r3, [sp, #0]
    32de:	b108      	cbz	r0, 32e4 <disk_write+0xac>
    32e0:	4618      	mov	r0, r3
    32e2:	e7ce      	b.n	3282 <disk_write+0x4a>
      && MICROSD_BlockTx(buff, 0xFE))
    32e4:	4620      	mov	r0, r4
    32e6:	21fe      	movs	r1, #254	; 0xfe
    32e8:	f002 fa94 	bl	5814 <MICROSD_BlockTx>
    32ec:	fab0 f080 	clz	r0, r0
    32f0:	0940      	lsrs	r0, r0, #5
    32f2:	e7c6      	b.n	3282 <disk_write+0x4a>
    32f4:	20000004 	.word	0x20000004
    32f8:	200010c0 	.word	0x200010c0

000032fc <disk_ioctl>:
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
  DWORD csize;


  if (drv) return RES_PARERR;
    32fc:	b108      	cbz	r0, 3302 <disk_ioctl+0x6>
    32fe:	2004      	movs	r0, #4
    3300:	4770      	bx	lr
  if (stat & STA_NOINIT) return RES_NOTRDY;
    3302:	4b83      	ldr	r3, [pc, #524]	; (3510 <disk_ioctl+0x214>)
    3304:	7818      	ldrb	r0, [r3, #0]
    3306:	07c0      	lsls	r0, r0, #31
    3308:	d501      	bpl.n	330e <disk_ioctl+0x12>
    330a:	2003      	movs	r0, #3
    330c:	4770      	bx	lr
DRESULT disk_ioctl (
  BYTE drv,     /* Physical drive nmuber (0) */
  BYTE ctrl,    /* Control code */
  void *buff    /* Buffer to send/receive data block */
)
{
    330e:	b5f0      	push	{r4, r5, r6, r7, lr}
    3310:	4615      	mov	r5, r2
    3312:	b085      	sub	sp, #20

  if (drv) return RES_PARERR;
  if (stat & STA_NOINIT) return RES_NOTRDY;

  res = RES_ERROR;
  switch (ctrl) {
    3314:	290e      	cmp	r1, #14
    3316:	f200 80ae 	bhi.w	3476 <disk_ioctl+0x17a>
    331a:	e8df f001 	tbb	[pc, r1]
    331e:	6ea3      	.short	0x6ea3
    3320:	acac4469 	.word	0xacac4469
    3324:	ac40acac 	.word	0xac40acac
    3328:	1526343b 	.word	0x1526343b
    332c:	08          	.byte	0x08
    332d:	00          	.byte	0x00
        res = RES_OK;
      }
      break;

    case MMC_GET_SDSTAT :           /* Receive SD statsu as a data block (64 bytes) */
      if (MICROSD_SendCmd(ACMD13, 0) == 0) {    /* SD_STATUS */
    332e:	208d      	movs	r0, #141	; 0x8d
    3330:	2100      	movs	r1, #0
    3332:	f002 faf5 	bl	5920 <MICROSD_SendCmd>
    3336:	2800      	cmp	r0, #0
    3338:	f000 80c3 	beq.w	34c2 <disk_ioctl+0x1c6>


  if (drv) return RES_PARERR;
  if (stat & STA_NOINIT) return RES_NOTRDY;

  res = RES_ERROR;
    333c:	2401      	movs	r4, #1

    default:
      res = RES_PARERR;
  }

  MICROSD_Deselect();
    333e:	f002 f97d 	bl	563c <MICROSD_Deselect>

  return res;
    3342:	4620      	mov	r0, r4
}
    3344:	b005      	add	sp, #20
    3346:	bdf0      	pop	{r4, r5, r6, r7, pc}
        && MICROSD_BlockRx(buff, 16))
        res = RES_OK;
      break;

    case MMC_GET_OCR :              /* Receive OCR as an R3 resp (4 bytes) */
      if (MICROSD_SendCmd(CMD58, 0) == 0) {     /* READ_OCR */
    3348:	203a      	movs	r0, #58	; 0x3a
    334a:	2100      	movs	r1, #0
    334c:	f002 fae8 	bl	5920 <MICROSD_SendCmd>
    3350:	2800      	cmp	r0, #0
    3352:	d1f3      	bne.n	333c <disk_ioctl+0x40>
    3354:	1e6c      	subs	r4, r5, #1
    3356:	3503      	adds	r5, #3
        for (n = 0; n < 4; n++)
          *((BYTE*)buff+n) = MICROSD_XferSpi(0xff);
    3358:	20ff      	movs	r0, #255	; 0xff
    335a:	f002 f961 	bl	5620 <MICROSD_XferSpi>
    335e:	f804 0f01 	strb.w	r0, [r4, #1]!
        res = RES_OK;
      break;

    case MMC_GET_OCR :              /* Receive OCR as an R3 resp (4 bytes) */
      if (MICROSD_SendCmd(CMD58, 0) == 0) {     /* READ_OCR */
        for (n = 0; n < 4; n++)
    3362:	42ac      	cmp	r4, r5
    3364:	d1f8      	bne.n	3358 <disk_ioctl+0x5c>
          *((BYTE*)buff+n) = MICROSD_XferSpi(0xff);
        res = RES_OK;
    3366:	2400      	movs	r4, #0
    3368:	e7e9      	b.n	333e <disk_ioctl+0x42>
        && MICROSD_BlockRx(buff, 16))
        res = RES_OK;
      break;

    case MMC_GET_CID :              /* Receive CID as a data block (16 bytes) */
      if ((MICROSD_SendCmd(CMD10, 0) == 0)      /* READ_CID */
    336a:	200a      	movs	r0, #10
    336c:	2100      	movs	r1, #0
    336e:	f002 fad7 	bl	5920 <MICROSD_SendCmd>
    3372:	2800      	cmp	r0, #0
    3374:	d1e2      	bne.n	333c <disk_ioctl+0x40>
        && MICROSD_BlockRx(buff, 16))
    3376:	4628      	mov	r0, r5
    3378:	2110      	movs	r1, #16
    337a:	f002 f9eb 	bl	5754 <MICROSD_BlockRx>
  res = RES_ERROR;
  switch (ctrl) {
    case CTRL_SYNC :                /* Flush dirty buffer if present */
      if (MICROSD_Select()) {
        MICROSD_Deselect();
        res = RES_OK;
    337e:	fab0 f480 	clz	r4, r0
    3382:	0964      	lsrs	r4, r4, #5
    3384:	e7db      	b.n	333e <disk_ioctl+0x42>
      *ptr = CardType;
      res = RES_OK;
      break;

    case MMC_GET_CSD :              /* Receive CSD as a data block (16 bytes) */
      if ((MICROSD_SendCmd(CMD9, 0) == 0)       /* READ_CSD */
    3386:	2009      	movs	r0, #9
    3388:	2100      	movs	r1, #0
    338a:	f002 fac9 	bl	5920 <MICROSD_SendCmd>
    338e:	2800      	cmp	r0, #0
    3390:	d1d4      	bne.n	333c <disk_ioctl+0x40>
    3392:	e7f0      	b.n	3376 <disk_ioctl+0x7a>
        }
      }
      break;

    case MMC_GET_TYPE :             /* Get card type flags (1 byte) */
      *ptr = CardType;
    3394:	4b5f      	ldr	r3, [pc, #380]	; (3514 <disk_ioctl+0x218>)
    3396:	881b      	ldrh	r3, [r3, #0]
    3398:	702b      	strb	r3, [r5, #0]
      res = RES_OK;
    339a:	2400      	movs	r4, #0
      break;
    339c:	e7cf      	b.n	333e <disk_ioctl+0x42>
        res = RES_OK;
      }
      break;

    case CTRL_INVALIDATE :          /* Used when unmounting */
      stat = STA_NOINIT;            /* Set disk status */
    339e:	2201      	movs	r2, #1
    33a0:	701a      	strb	r2, [r3, #0]
      res = RES_OK;
    33a2:	2400      	movs	r4, #0
      break;
    33a4:	e7cb      	b.n	333e <disk_ioctl+0x42>
      *(WORD*)buff = 512;
      res = RES_OK;
      break;

    case GET_BLOCK_SIZE :           /* Get erase block size in unit of sectors (DWORD) */
      if (CardType & CT_SD2) {      /* SDv2? */
    33a6:	4e5b      	ldr	r6, [pc, #364]	; (3514 <disk_ioctl+0x218>)
    33a8:	8831      	ldrh	r1, [r6, #0]
    33aa:	f001 0104 	and.w	r1, r1, #4
    33ae:	b289      	uxth	r1, r1
    33b0:	2900      	cmp	r1, #0
    33b2:	d062      	beq.n	347a <disk_ioctl+0x17e>
        if (MICROSD_SendCmd(ACMD13, 0) == 0) {    /* Read SD status */
    33b4:	208d      	movs	r0, #141	; 0x8d
    33b6:	2100      	movs	r1, #0
    33b8:	f002 fab2 	bl	5920 <MICROSD_SendCmd>
    33bc:	2800      	cmp	r0, #0
    33be:	d1bd      	bne.n	333c <disk_ioctl+0x40>
          MICROSD_XferSpi(0xff);
    33c0:	20ff      	movs	r0, #255	; 0xff
    33c2:	f002 f92d 	bl	5620 <MICROSD_XferSpi>
          if (MICROSD_BlockRx(csd, 16)) {         /* Read partial block */
    33c6:	4668      	mov	r0, sp
    33c8:	2110      	movs	r1, #16
    33ca:	f002 f9c3 	bl	5754 <MICROSD_BlockRx>
    33ce:	2800      	cmp	r0, #0
    33d0:	d0b4      	beq.n	333c <disk_ioctl+0x40>
    33d2:	2430      	movs	r4, #48	; 0x30
            for (n = 64 - 16; n; n--) MICROSD_XferSpi(0xff); /* Purge trailing data */
    33d4:	20ff      	movs	r0, #255	; 0xff
    33d6:	f002 f923 	bl	5620 <MICROSD_XferSpi>
    33da:	1e60      	subs	r0, r4, #1
    33dc:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
    33e0:	d1f8      	bne.n	33d4 <disk_ioctl+0xd8>
            *(DWORD*)buff = 16UL << (csd[10] >> 4);
    33e2:	f89d 200a 	ldrb.w	r2, [sp, #10]
    33e6:	2310      	movs	r3, #16
    33e8:	0912      	lsrs	r2, r2, #4
    33ea:	4093      	lsls	r3, r2
    33ec:	602b      	str	r3, [r5, #0]
    33ee:	e7a6      	b.n	333e <disk_ioctl+0x42>
        res = RES_OK;
      }
      break;

    case GET_SECTOR_SIZE :          /* Get sectors on the disk (WORD) */
      *(WORD*)buff = 512;
    33f0:	f44f 7300 	mov.w	r3, #512	; 0x200
    33f4:	802b      	strh	r3, [r5, #0]
      res = RES_OK;
    33f6:	2400      	movs	r4, #0
      break;
    33f8:	e7a1      	b.n	333e <disk_ioctl+0x42>
      stat = STA_NOINIT;            /* Set disk status */
      res = RES_OK;
      break;

    case GET_SECTOR_COUNT :         /* Get number of sectors on the disk (WORD) */
      if ((MICROSD_SendCmd(CMD9, 0) == 0) && MICROSD_BlockRx(csd, 16)) {
    33fa:	2009      	movs	r0, #9
    33fc:	2100      	movs	r1, #0
    33fe:	f002 fa8f 	bl	5920 <MICROSD_SendCmd>
    3402:	4604      	mov	r4, r0
    3404:	2800      	cmp	r0, #0
    3406:	d199      	bne.n	333c <disk_ioctl+0x40>
    3408:	4668      	mov	r0, sp
    340a:	2110      	movs	r1, #16
    340c:	f002 f9a2 	bl	5754 <MICROSD_BlockRx>
    3410:	2800      	cmp	r0, #0
    3412:	d093      	beq.n	333c <disk_ioctl+0x40>
        if ((csd[0] >> 6) == 1) {                     /* SDv2? */
    3414:	f89d 3000 	ldrb.w	r3, [sp]
    3418:	099b      	lsrs	r3, r3, #6
    341a:	2b01      	cmp	r3, #1
    341c:	d05c      	beq.n	34d8 <disk_ioctl+0x1dc>
          csize = csd[9] + ((WORD)csd[8] << 8) + 1;
          *(DWORD*)buff = (DWORD)csize << 10;
        } else {                                      /* SDv1 or MMCv2 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    341e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    3422:	f89d 700a 	ldrb.w	r7, [sp, #10]
    3426:	f89d 0009 	ldrb.w	r0, [sp, #9]
          csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    342a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    342e:	f89d 6008 	ldrb.w	r6, [sp, #8]
    3432:	f89d 1006 	ldrb.w	r1, [sp, #6]
      if ((MICROSD_SendCmd(CMD9, 0) == 0) && MICROSD_BlockRx(csd, 16)) {
        if ((csd[0] >> 6) == 1) {                     /* SDv2? */
          csize = csd[9] + ((WORD)csd[8] << 8) + 1;
          *(DWORD*)buff = (DWORD)csize << 10;
        } else {                                      /* SDv1 or MMCv2 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    3436:	f003 030f 	and.w	r3, r3, #15
    343a:	eb03 13d7 	add.w	r3, r3, r7, lsr #7
    343e:	3302      	adds	r3, #2
    3440:	f000 0003 	and.w	r0, r0, #3
          csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    3444:	0092      	lsls	r2, r2, #2
      if ((MICROSD_SendCmd(CMD9, 0) == 0) && MICROSD_BlockRx(csd, 16)) {
        if ((csd[0] >> 6) == 1) {                     /* SDv2? */
          csize = csd[9] + ((WORD)csd[8] << 8) + 1;
          *(DWORD*)buff = (DWORD)csize << 10;
        } else {                                      /* SDv1 or MMCv2 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    3446:	eb03 0340 	add.w	r3, r3, r0, lsl #1
          csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    344a:	eb02 1296 	add.w	r2, r2, r6, lsr #6
    344e:	f001 0103 	and.w	r1, r1, #3
          *(DWORD*)buff = (DWORD)csize << (n - 9);
    3452:	b2db      	uxtb	r3, r3
        if ((csd[0] >> 6) == 1) {                     /* SDv2? */
          csize = csd[9] + ((WORD)csd[8] << 8) + 1;
          *(DWORD*)buff = (DWORD)csize << 10;
        } else {                                      /* SDv1 or MMCv2 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
          csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    3454:	eb02 2281 	add.w	r2, r2, r1, lsl #10
          *(DWORD*)buff = (DWORD)csize << (n - 9);
    3458:	3b09      	subs	r3, #9
        if ((csd[0] >> 6) == 1) {                     /* SDv2? */
          csize = csd[9] + ((WORD)csd[8] << 8) + 1;
          *(DWORD*)buff = (DWORD)csize << 10;
        } else {                                      /* SDv1 or MMCv2 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
          csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    345a:	3201      	adds	r2, #1
          *(DWORD*)buff = (DWORD)csize << (n - 9);
    345c:	fa02 f303 	lsl.w	r3, r2, r3
    3460:	602b      	str	r3, [r5, #0]
    3462:	e76c      	b.n	333e <disk_ioctl+0x42>
  if (stat & STA_NOINIT) return RES_NOTRDY;

  res = RES_ERROR;
  switch (ctrl) {
    case CTRL_SYNC :                /* Flush dirty buffer if present */
      if (MICROSD_Select()) {
    3464:	f002 f8fc 	bl	5660 <MICROSD_Select>
    3468:	2800      	cmp	r0, #0
    346a:	f43f af67 	beq.w	333c <disk_ioctl+0x40>
        MICROSD_Deselect();
    346e:	f002 f8e5 	bl	563c <MICROSD_Deselect>
        res = RES_OK;
    3472:	2400      	movs	r4, #0
    3474:	e763      	b.n	333e <disk_ioctl+0x42>
          res = RES_OK;
      }
      break;

    default:
      res = RES_PARERR;
    3476:	2404      	movs	r4, #4
    3478:	e761      	b.n	333e <disk_ioctl+0x42>
            *(DWORD*)buff = 16UL << (csd[10] >> 4);
            res = RES_OK;
          }
        }
      } else {                      /* SDv1 or MMCv3 */
        if ((MICROSD_SendCmd(CMD9, 0) == 0) && MICROSD_BlockRx(csd, 16)) {  /* Read CSD */
    347a:	2009      	movs	r0, #9
    347c:	f002 fa50 	bl	5920 <MICROSD_SendCmd>
    3480:	4604      	mov	r4, r0
    3482:	2800      	cmp	r0, #0
    3484:	f47f af5a 	bne.w	333c <disk_ioctl+0x40>
    3488:	4668      	mov	r0, sp
    348a:	2110      	movs	r1, #16
    348c:	f002 f962 	bl	5754 <MICROSD_BlockRx>
    3490:	2800      	cmp	r0, #0
    3492:	f43f af53 	beq.w	333c <disk_ioctl+0x40>
          if (CardType & CT_SD1) {	/* SDv1 */
    3496:	8830      	ldrh	r0, [r6, #0]
    3498:	f000 0002 	and.w	r0, r0, #2
    349c:	b280      	uxth	r0, r0
    349e:	b328      	cbz	r0, 34ec <disk_ioctl+0x1f0>
            *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    34a0:	f89d 100a 	ldrb.w	r1, [sp, #10]
    34a4:	f89d 300b 	ldrb.w	r3, [sp, #11]
    34a8:	f89d 200d 	ldrb.w	r2, [sp, #13]
    34ac:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    34b0:	09db      	lsrs	r3, r3, #7
    34b2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    34b6:	0992      	lsrs	r2, r2, #6
    34b8:	3301      	adds	r3, #1
    34ba:	3a01      	subs	r2, #1
    34bc:	4093      	lsls	r3, r2
    34be:	602b      	str	r3, [r5, #0]
    34c0:	e73d      	b.n	333e <disk_ioctl+0x42>
      }
      break;

    case MMC_GET_SDSTAT :           /* Receive SD statsu as a data block (64 bytes) */
      if (MICROSD_SendCmd(ACMD13, 0) == 0) {    /* SD_STATUS */
        MICROSD_XferSpi(0xff);
    34c2:	20ff      	movs	r0, #255	; 0xff
    34c4:	f002 f8ac 	bl	5620 <MICROSD_XferSpi>
        if (MICROSD_BlockTx(buff, 64))
    34c8:	4628      	mov	r0, r5
    34ca:	2140      	movs	r1, #64	; 0x40
    34cc:	f002 f9a2 	bl	5814 <MICROSD_BlockTx>
  res = RES_ERROR;
  switch (ctrl) {
    case CTRL_SYNC :                /* Flush dirty buffer if present */
      if (MICROSD_Select()) {
        MICROSD_Deselect();
        res = RES_OK;
    34d0:	fab0 f480 	clz	r4, r0
    34d4:	0964      	lsrs	r4, r4, #5
    34d6:	e732      	b.n	333e <disk_ioctl+0x42>
      break;

    case GET_SECTOR_COUNT :         /* Get number of sectors on the disk (WORD) */
      if ((MICROSD_SendCmd(CMD9, 0) == 0) && MICROSD_BlockRx(csd, 16)) {
        if ((csd[0] >> 6) == 1) {                     /* SDv2? */
          csize = csd[9] + ((WORD)csd[8] << 8) + 1;
    34d8:	f89d 3009 	ldrb.w	r3, [sp, #9]
    34dc:	f89d 2008 	ldrb.w	r2, [sp, #8]
    34e0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    34e4:	3301      	adds	r3, #1
          *(DWORD*)buff = (DWORD)csize << 10;
    34e6:	029b      	lsls	r3, r3, #10
    34e8:	602b      	str	r3, [r5, #0]
    34ea:	e728      	b.n	333e <disk_ioctl+0x42>
      } else {                      /* SDv1 or MMCv3 */
        if ((MICROSD_SendCmd(CMD9, 0) == 0) && MICROSD_BlockRx(csd, 16)) {  /* Read CSD */
          if (CardType & CT_SD1) {	/* SDv1 */
            *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
          } else {                  /* MMCv3 */
            *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    34ec:	f89d 300b 	ldrb.w	r3, [sp, #11]
    34f0:	f89d 200a 	ldrb.w	r2, [sp, #10]
    34f4:	f003 0103 	and.w	r1, r3, #3
    34f8:	095b      	lsrs	r3, r3, #5
    34fa:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    34fe:	3301      	adds	r3, #1
    3500:	f3c2 0284 	ubfx	r2, r2, #2, #5
    3504:	fb02 3303 	mla	r3, r2, r3, r3
          }
          res = RES_OK;
    3508:	4604      	mov	r4, r0
      } else {                      /* SDv1 or MMCv3 */
        if ((MICROSD_SendCmd(CMD9, 0) == 0) && MICROSD_BlockRx(csd, 16)) {  /* Read CSD */
          if (CardType & CT_SD1) {	/* SDv1 */
            *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
          } else {                  /* MMCv3 */
            *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    350a:	602b      	str	r3, [r5, #0]
    350c:	e717      	b.n	333e <disk_ioctl+0x42>
    350e:	bf00      	nop
    3510:	20000004 	.word	0x20000004
    3514:	200010c0 	.word	0x200010c0

00003518 <ACMP_Disable>:
void ACMP_Disable(ACMP_TypeDef *acmp)
{
  /* Make sure the module exists on the selected chip */
  EFM_ASSERT(ACMP_REF_VALID(acmp));

  acmp->CTRL &= ~ACMP_CTRL_EN;
    3518:	6803      	ldr	r3, [r0, #0]
    351a:	f023 0301 	bic.w	r3, r3, #1
    351e:	6003      	str	r3, [r0, #0]
    3520:	4770      	bx	lr
    3522:	bf00      	nop

00003524 <ACMP_ChannelSet>:

#if defined(_ACMP_INPUTSEL_POSSEL_CH7)
  EFM_ASSERT(posSel <= _ACMP_INPUTSEL_POSSEL_CH7);
#endif

  acmp->INPUTSEL = (acmp->INPUTSEL & ~(_ACMP_INPUTSEL_POSSEL_MASK
    3524:	6843      	ldr	r3, [r0, #4]
    3526:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7
    352a:	431a      	orrs	r2, r3
                                       | _ACMP_INPUTSEL_NEGSEL_MASK))
                   | (negSel << _ACMP_INPUTSEL_NEGSEL_SHIFT)
                   | (posSel << _ACMP_INPUTSEL_POSSEL_SHIFT);
    352c:	ea42 1101 	orr.w	r1, r2, r1, lsl #4

#if defined(_ACMP_INPUTSEL_POSSEL_CH7)
  EFM_ASSERT(posSel <= _ACMP_INPUTSEL_POSSEL_CH7);
#endif

  acmp->INPUTSEL = (acmp->INPUTSEL & ~(_ACMP_INPUTSEL_POSSEL_MASK
    3530:	6041      	str	r1, [r0, #4]
    3532:	4770      	bx	lr

00003534 <ACMP_Init>:
 * @param[in] init
 *   Pointer to initialization structure used to configure ACMP for capacative
 *   sensing operation.
 ******************************************************************************/
void ACMP_Init(ACMP_TypeDef *acmp, const ACMP_Init_TypeDef *init)
{
    3534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                                     unsigned int bit,
                                     unsigned int val)
{
#if defined(BITBAND_PER_BASE)
  uint32_t aliasAddr =
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);
    3538:	f100 7704 	add.w	r7, r0, #34603008	; 0x2100000
__STATIC_INLINE void BUS_RegBitWrite(volatile uint32_t *addr,
                                     unsigned int bit,
                                     unsigned int val)
{
#if defined(BITBAND_PER_BASE)
  uint32_t aliasAddr =
    353c:	017f      	lsls	r7, r7, #5
#if defined(_ACMP_CTRL_HALFBIAS_MASK)
               | (init->halfBias << _ACMP_CTRL_HALFBIAS_SHIFT)
#endif
               | (init->biasProg << _ACMP_CTRL_BIASPROG_SHIFT)
               | (init->interruptOnFallingEdge << _ACMP_CTRL_IFALL_SHIFT)
               | (init->interruptOnRisingEdge << _ACMP_CTRL_IRISE_SHIFT)
    353e:	7a4c      	ldrb	r4, [r1, #9]
  acmp->CTRL = (init->fullBias << _ACMP_CTRL_FULLBIAS_SHIFT)
#if defined(_ACMP_CTRL_HALFBIAS_MASK)
               | (init->halfBias << _ACMP_CTRL_HALFBIAS_SHIFT)
#endif
               | (init->biasProg << _ACMP_CTRL_BIASPROG_SHIFT)
               | (init->interruptOnFallingEdge << _ACMP_CTRL_IFALL_SHIFT)
    3540:	f891 b008 	ldrb.w	fp, [r1, #8]
#endif
#if defined(_ACMP_CTRL_PWRSEL_MASK)
               | (init->powerSource << _ACMP_CTRL_PWRSEL_SHIFT)
#endif
#if defined(_ACMP_CTRL_WARMTIME_MASK)
               | (init->warmTime << _ACMP_CTRL_WARMTIME_SHIFT)
    3544:	f891 a00a 	ldrb.w	sl, [r1, #10]
  /* Make sure the ACMP is disable since we might be changing the
   * ACMP power source */
  BUS_RegBitWrite(&acmp->CTRL, _ACMP_CTRL_EN_SHIFT, 0);

  /* Set control register. No need to set interrupt modes */
  acmp->CTRL = (init->fullBias << _ACMP_CTRL_FULLBIAS_SHIFT)
    3548:	780d      	ldrb	r5, [r1, #0]
               | (init->warmTime << _ACMP_CTRL_WARMTIME_SHIFT)
#endif
#if defined(_ACMP_CTRL_HYSTSEL_MASK)
               | (init->hysteresisLevel << _ACMP_CTRL_HYSTSEL_SHIFT)
#endif
               | (init->inactiveValue << _ACMP_CTRL_INACTVAL_SHIFT);
    354a:	f891 900c 	ldrb.w	r9, [r1, #12]
  BUS_RegBitWrite(&acmp->CTRL, _ACMP_CTRL_EN_SHIFT, 0);

  /* Set control register. No need to set interrupt modes */
  acmp->CTRL = (init->fullBias << _ACMP_CTRL_FULLBIAS_SHIFT)
#if defined(_ACMP_CTRL_HALFBIAS_MASK)
               | (init->halfBias << _ACMP_CTRL_HALFBIAS_SHIFT)
    354e:	f891 8001 	ldrb.w	r8, [r1, #1]
  acmp->INPUTSEL = (0)
#if defined(_ACMP_INPUTSEL_VLPSEL_MASK)
                   | (init->vlpInput << _ACMP_INPUTSEL_VLPSEL_SHIFT)
#endif
#if defined(_ACMP_INPUTSEL_LPREF_MASK)
                   | (init->lowPowerReferenceEnabled << _ACMP_INPUTSEL_LPREF_SHIFT)
    3552:	f891 c00d 	ldrb.w	ip, [r1, #13]
                   | (init->vddLevel << _ACMP_INPUTSEL_VDDLEVEL_SHIFT)
#endif
  ;

  /* Enable ACMP if requested. */
  BUS_RegBitWrite(&(acmp->CTRL), _ACMP_CTRL_EN_SHIFT, init->enable);
    3556:	f891 e014 	ldrb.w	lr, [r1, #20]
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);

  *(volatile uint32_t *)aliasAddr = (uint32_t)val;
    355a:	2300      	movs	r3, #0
    355c:	603b      	str	r3, [r7, #0]
  /* Set control register. No need to set interrupt modes */
  acmp->CTRL = (init->fullBias << _ACMP_CTRL_FULLBIAS_SHIFT)
#if defined(_ACMP_CTRL_HALFBIAS_MASK)
               | (init->halfBias << _ACMP_CTRL_HALFBIAS_SHIFT)
#endif
               | (init->biasProg << _ACMP_CTRL_BIASPROG_SHIFT)
    355e:	684a      	ldr	r2, [r1, #4]
#endif
#if defined(_ACMP_CTRL_WARMTIME_MASK)
               | (init->warmTime << _ACMP_CTRL_WARMTIME_SHIFT)
#endif
#if defined(_ACMP_CTRL_HYSTSEL_MASK)
               | (init->hysteresisLevel << _ACMP_CTRL_HYSTSEL_SHIFT)
    3560:	7acb      	ldrb	r3, [r1, #11]
#endif
#if defined(_ACMP_INPUTSEL_LPREF_MASK)
                   | (init->lowPowerReferenceEnabled << _ACMP_INPUTSEL_LPREF_SHIFT)
#endif
#if defined(_ACMP_INPUTSEL_VDDLEVEL_MASK)
                   | (init->vddLevel << _ACMP_INPUTSEL_VDDLEVEL_SHIFT)
    3562:	690e      	ldr	r6, [r1, #16]
#if defined(_ACMP_CTRL_HALFBIAS_MASK)
               | (init->halfBias << _ACMP_CTRL_HALFBIAS_SHIFT)
#endif
               | (init->biasProg << _ACMP_CTRL_BIASPROG_SHIFT)
               | (init->interruptOnFallingEdge << _ACMP_CTRL_IFALL_SHIFT)
               | (init->interruptOnRisingEdge << _ACMP_CTRL_IRISE_SHIFT)
    3564:	0424      	lsls	r4, r4, #16
    3566:	ea44 414b 	orr.w	r1, r4, fp, lsl #17
    356a:	ea41 6102 	orr.w	r1, r1, r2, lsl #24
    356e:	ea41 220a 	orr.w	r2, r1, sl, lsl #8
    3572:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
  /* Make sure the ACMP is disable since we might be changing the
   * ACMP power source */
  BUS_RegBitWrite(&acmp->CTRL, _ACMP_CTRL_EN_SHIFT, 0);

  /* Set control register. No need to set interrupt modes */
  acmp->CTRL = (init->fullBias << _ACMP_CTRL_FULLBIAS_SHIFT)
    3576:	07ed      	lsls	r5, r5, #31
    3578:	ea42 0389 	orr.w	r3, r2, r9, lsl #2
#if defined(_ACMP_CTRL_HALFBIAS_MASK)
               | (init->halfBias << _ACMP_CTRL_HALFBIAS_SHIFT)
    357c:	ea45 7888 	orr.w	r8, r5, r8, lsl #30
#endif
#if defined(_ACMP_INPUTSEL_LPREF_MASK)
                   | (init->lowPowerReferenceEnabled << _ACMP_INPUTSEL_LPREF_SHIFT)
#endif
#if defined(_ACMP_INPUTSEL_VDDLEVEL_MASK)
                   | (init->vddLevel << _ACMP_INPUTSEL_VDDLEVEL_SHIFT)
    3580:	0236      	lsls	r6, r6, #8
               | (init->warmTime << _ACMP_CTRL_WARMTIME_SHIFT)
#endif
#if defined(_ACMP_CTRL_HYSTSEL_MASK)
               | (init->hysteresisLevel << _ACMP_CTRL_HYSTSEL_SHIFT)
#endif
               | (init->inactiveValue << _ACMP_CTRL_INACTVAL_SHIFT);
    3582:	ea43 0308 	orr.w	r3, r3, r8
#endif
#if defined(_ACMP_INPUTSEL_LPREF_MASK)
                   | (init->lowPowerReferenceEnabled << _ACMP_INPUTSEL_LPREF_SHIFT)
#endif
#if defined(_ACMP_INPUTSEL_VDDLEVEL_MASK)
                   | (init->vddLevel << _ACMP_INPUTSEL_VDDLEVEL_SHIFT)
    3586:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
  /* Make sure the ACMP is disable since we might be changing the
   * ACMP power source */
  BUS_RegBitWrite(&acmp->CTRL, _ACMP_CTRL_EN_SHIFT, 0);

  /* Set control register. No need to set interrupt modes */
  acmp->CTRL = (init->fullBias << _ACMP_CTRL_FULLBIAS_SHIFT)
    358a:	6003      	str	r3, [r0, #0]
#if defined(_ACMP_CTRL_HYSTSEL_MASK)
               | (init->hysteresisLevel << _ACMP_CTRL_HYSTSEL_SHIFT)
#endif
               | (init->inactiveValue << _ACMP_CTRL_INACTVAL_SHIFT);

  acmp->INPUTSEL = (0)
    358c:	6046      	str	r6, [r0, #4]
    358e:	f8c7 e000 	str.w	lr, [r7]
    3592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3596:	bf00      	nop

00003598 <ADC_Init>:
 *
 * @param[in] init
 *   Pointer to ADC initialization structure.
 ******************************************************************************/
void ADC_Init(ADC_TypeDef *adc, const ADC_Init_TypeDef *init)
{
    3598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp;
  uint8_t presc = init->prescale;
    359a:	790d      	ldrb	r5, [r1, #4]
 *
 * @param[in] init
 *   Pointer to ADC initialization structure.
 ******************************************************************************/
void ADC_Init(ADC_TypeDef *adc, const ADC_Init_TypeDef *init)
{
    359c:	4604      	mov	r4, r0
    359e:	460f      	mov	r7, r1
    adcFreq = ADC_MIN_CLOCK;
  }

  /* Use current HFPER frequency? */
  if (!hfperFreq) {
    hfperFreq = CMU_ClockFreqGet(cmuClock_HFPER);
    35a0:	4817      	ldr	r0, [pc, #92]	; (3600 <ADC_Init+0x68>)
  uint32_t tmp;
  uint8_t presc = init->prescale;

  EFM_ASSERT(ADC_REF_VALID(adc));

  if (presc == 0) {
    35a2:	bb25      	cbnz	r5, 35ee <ADC_Init+0x56>
    adcFreq = ADC_MIN_CLOCK;
  }

  /* Use current HFPER frequency? */
  if (!hfperFreq) {
    hfperFreq = CMU_ClockFreqGet(cmuClock_HFPER);
    35a4:	f000 fb80 	bl	3ca8 <CMU_ClockFreqGet>
  }

  ret = (hfperFreq + adcFreq - 1) / adcFreq;
    35a8:	4b16      	ldr	r3, [pc, #88]	; (3604 <ADC_Init+0x6c>)
    35aa:	4a17      	ldr	r2, [pc, #92]	; (3608 <ADC_Init+0x70>)
    35ac:	4403      	add	r3, r0
    35ae:	fba2 2303 	umull	r2, r3, r2, r3
  if (ret) {
    35b2:	0ddb      	lsrs	r3, r3, #23
    ret--;
    35b4:	bf1d      	ittte	ne
    35b6:	f103 33ff 	addne.w	r3, r3, #4294967295
    35ba:	021b      	lslne	r3, r3, #8
    35bc:	f403 46fe 	andne.w	r6, r3, #32512	; 0x7f00
  if (!hfperFreq) {
    hfperFreq = CMU_ClockFreqGet(cmuClock_HFPER);
  }

  ret = (hfperFreq + adcFreq - 1) / adcFreq;
  if (ret) {
    35c0:	461e      	moveq	r6, r3
      EFM_ASSERT(presc <= ADC_PrescaleCalc(ADC_MIN_CLOCK, 0));
    }
  }

  /* Make sure conversion is not in progress */
  adc->CMD = ADC_CMD_SINGLESTOP | ADC_CMD_SCANSTOP;
    35c2:	230a      	movs	r3, #10
    35c4:	6063      	str	r3, [r4, #4]
        | (((uint32_t)(init->timebase) << _ADC_CTRL_TIMEBASE_SHIFT)
           & _ADC_CTRL_TIMEBASE_MASK)
        | (((uint32_t)(presc) << _ADC_CTRL_PRESC_SHIFT)
           & _ADC_CTRL_PRESC_MASK)
#if defined (_ADC_CTRL_LPFMODE_MASK)
        | ((uint32_t)(init->lpfMode) << _ADC_CTRL_LPFMODE_SHIFT)
    35c6:	7878      	ldrb	r0, [r7, #1]

  /* Make sure conversion is not in progress */
  adc->CMD = ADC_CMD_SINGLESTOP | ADC_CMD_SCANSTOP;

  tmp = ((uint32_t)(init->ovsRateSel) << _ADC_CTRL_OVSRSEL_SHIFT)
        | (((uint32_t)(init->timebase) << _ADC_CTRL_TIMEBASE_SHIFT)
    35c8:	78fa      	ldrb	r2, [r7, #3]
  }

  /* Make sure conversion is not in progress */
  adc->CMD = ADC_CMD_SINGLESTOP | ADC_CMD_SCANSTOP;

  tmp = ((uint32_t)(init->ovsRateSel) << _ADC_CTRL_OVSRSEL_SHIFT)
    35ca:	7839      	ldrb	r1, [r7, #0]
        | (((uint32_t)(presc) << _ADC_CTRL_PRESC_SHIFT)
           & _ADC_CTRL_PRESC_MASK)
#if defined (_ADC_CTRL_LPFMODE_MASK)
        | ((uint32_t)(init->lpfMode) << _ADC_CTRL_LPFMODE_SHIFT)
#endif
        | ((uint32_t)(init->warmUpMode) << _ADC_CTRL_WARMUPMODE_SHIFT);
    35cc:	78bd      	ldrb	r5, [r7, #2]

  if (init->tailgate) {
    35ce:	797f      	ldrb	r7, [r7, #5]
        | (((uint32_t)(init->timebase) << _ADC_CTRL_TIMEBASE_SHIFT)
           & _ADC_CTRL_TIMEBASE_MASK)
        | (((uint32_t)(presc) << _ADC_CTRL_PRESC_SHIFT)
           & _ADC_CTRL_PRESC_MASK)
#if defined (_ADC_CTRL_LPFMODE_MASK)
        | ((uint32_t)(init->lpfMode) << _ADC_CTRL_LPFMODE_SHIFT)
    35d0:	0100      	lsls	r0, r0, #4

  /* Make sure conversion is not in progress */
  adc->CMD = ADC_CMD_SINGLESTOP | ADC_CMD_SCANSTOP;

  tmp = ((uint32_t)(init->ovsRateSel) << _ADC_CTRL_OVSRSEL_SHIFT)
        | (((uint32_t)(init->timebase) << _ADC_CTRL_TIMEBASE_SHIFT)
    35d2:	0412      	lsls	r2, r2, #16
    35d4:	ea40 6101 	orr.w	r1, r0, r1, lsl #24
           & _ADC_CTRL_TIMEBASE_MASK)
    35d8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
    35dc:	4329      	orrs	r1, r5
    35de:	ea41 0302 	orr.w	r3, r1, r2
  }

  /* Make sure conversion is not in progress */
  adc->CMD = ADC_CMD_SINGLESTOP | ADC_CMD_SCANSTOP;

  tmp = ((uint32_t)(init->ovsRateSel) << _ADC_CTRL_OVSRSEL_SHIFT)
    35e2:	4333      	orrs	r3, r6
#if defined (_ADC_CTRL_LPFMODE_MASK)
        | ((uint32_t)(init->lpfMode) << _ADC_CTRL_LPFMODE_SHIFT)
#endif
        | ((uint32_t)(init->warmUpMode) << _ADC_CTRL_WARMUPMODE_SHIFT);

  if (init->tailgate) {
    35e4:	b10f      	cbz	r7, 35ea <ADC_Init+0x52>
    tmp |= ADC_CTRL_TAILGATE;
    35e6:	f043 0308 	orr.w	r3, r3, #8
  }
  adc->CTRL = tmp;
    35ea:	6023      	str	r3, [r4, #0]
    35ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    adcFreq = ADC_MIN_CLOCK;
  }

  /* Use current HFPER frequency? */
  if (!hfperFreq) {
    hfperFreq = CMU_ClockFreqGet(cmuClock_HFPER);
    35ee:	f000 fb5b 	bl	3ca8 <CMU_ClockFreqGet>
    35f2:	4803      	ldr	r0, [pc, #12]	; (3600 <ADC_Init+0x68>)
    35f4:	f000 fb58 	bl	3ca8 <CMU_ClockFreqGet>
    35f8:	022b      	lsls	r3, r5, #8
    35fa:	f403 46fe 	and.w	r6, r3, #32512	; 0x7f00
    35fe:	e7e0      	b.n	35c2 <ADC_Init+0x2a>
    3600:	00048140 	.word	0x00048140
    3604:	00c65d3f 	.word	0x00c65d3f
    3608:	a530e8a5 	.word	0xa530e8a5

0000360c <ADC_InitSingle>:
  }

  calReg = adc->CAL & mask;
  newCal = 0;

  if (adc == ADC0) {
    360c:	4b2a      	ldr	r3, [pc, #168]	; (36b8 <ADC_InitSingle+0xac>)
  uint32_t tmp;

  EFM_ASSERT(ADC_REF_VALID(adc));

  /* Make sure single conversion is not in progress */
  adc->CMD = ADC_CMD_SINGLESTOP;
    360e:	2202      	movs	r2, #2
    3610:	6042      	str	r2, [r0, #4]
  }

  calReg = adc->CAL & mask;
  newCal = 0;

  if (adc == ADC0) {
    3612:	4298      	cmp	r0, r3
 *
 * @param[in] init
 *   Pointer to ADC initialization structure.
 ******************************************************************************/
void ADC_InitSingle(ADC_TypeDef *adc, const ADC_InitSingle_TypeDef *init)
{
    3614:	b4f0      	push	{r4, r5, r6, r7}
              | _ADC_CAL_SINGLEOFFSETINV_MASK
#endif
              | _ADC_CAL_SINGLEGAIN_MASK);
  }

  calReg = adc->CAL & mask;
    3616:	6b42      	ldr	r2, [r0, #52]	; 0x34

  /* Make sure single conversion is not in progress */
  adc->CMD = ADC_CMD_SINGLESTOP;

  /* Load calibration data for selected reference */
  ADC_LoadDevinfoCal(adc, init->reference, false);
    3618:	788d      	ldrb	r5, [r1, #2]
  }

  calReg = adc->CAL & mask;
  newCal = 0;

  if (adc == ADC0) {
    361a:	d01f      	beq.n	365c <ADC_InitSingle+0x50>
  /* Load calibration data for selected reference */
  ADC_LoadDevinfoCal(adc, init->reference, false);

  tmp = 0
#if defined(_ADC_SINGLECTRL_PRSSEL_MASK)
        | (init->prsSel << _ADC_SINGLECTRL_PRSSEL_SHIFT)
    361c:	780c      	ldrb	r4, [r1, #0]
#endif
        | (init->acqTime << _ADC_SINGLECTRL_AT_SHIFT)
    361e:	784a      	ldrb	r2, [r1, #1]
#if defined(_ADC_SINGLECTRL_INPUTSEL_MASK)
        | (init->input << _ADC_SINGLECTRL_INPUTSEL_SHIFT)
    3620:	790b      	ldrb	r3, [r1, #4]
        | (init->posSel << _ADC_SINGLECTRL_POSSEL_SHIFT)
#endif
#if defined(_ADC_SINGLECTRL_NEGSEL_MASK)
        | (init->negSel << _ADC_SINGLECTRL_NEGSEL_SHIFT)
#endif
        | ((uint32_t)(init->resolution) << _ADC_SINGLECTRL_RES_SHIFT);
    3622:	78cf      	ldrb	r7, [r1, #3]

  if (init->prsEnable) {
    3624:	798e      	ldrb	r6, [r1, #6]
  /* Load calibration data for selected reference */
  ADC_LoadDevinfoCal(adc, init->reference, false);

  tmp = 0
#if defined(_ADC_SINGLECTRL_PRSSEL_MASK)
        | (init->prsSel << _ADC_SINGLECTRL_PRSSEL_SHIFT)
    3626:	0724      	lsls	r4, r4, #28
#endif
        | (init->acqTime << _ADC_SINGLECTRL_AT_SHIFT)
    3628:	ea44 5202 	orr.w	r2, r4, r2, lsl #20
#if defined(_ADC_SINGLECTRL_INPUTSEL_MASK)
        | (init->input << _ADC_SINGLECTRL_INPUTSEL_SHIFT)
    362c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  adc->CMD = ADC_CMD_SINGLESTOP;

  /* Load calibration data for selected reference */
  ADC_LoadDevinfoCal(adc, init->reference, false);

  tmp = 0
    3630:	ea42 1307 	orr.w	r3, r2, r7, lsl #4
#if defined(_ADC_SINGLECTRL_NEGSEL_MASK)
        | (init->negSel << _ADC_SINGLECTRL_NEGSEL_SHIFT)
#endif
        | ((uint32_t)(init->resolution) << _ADC_SINGLECTRL_RES_SHIFT);

  if (init->prsEnable) {
    3634:	b10e      	cbz	r6, 363a <ADC_InitSingle+0x2e>
    tmp |= ADC_SINGLECTRL_PRSEN;
    3636:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  }

  if (init->leftAdjust) {
    363a:	79ca      	ldrb	r2, [r1, #7]
    363c:	b10a      	cbz	r2, 3642 <ADC_InitSingle+0x36>
    tmp |= ADC_SINGLECTRL_ADJ_LEFT;
    363e:	f043 0304 	orr.w	r3, r3, #4
  }

  if (init->diff) {
    3642:	794a      	ldrb	r2, [r1, #5]
    3644:	b10a      	cbz	r2, 364a <ADC_InitSingle+0x3e>
    tmp |= ADC_SINGLECTRL_DIFF;
    3646:	f043 0302 	orr.w	r3, r3, #2
  }

  if (init->rep) {
    364a:	7a0a      	ldrb	r2, [r1, #8]
    364c:	b10a      	cbz	r2, 3652 <ADC_InitSingle+0x46>
    tmp |= ADC_SINGLECTRL_REP;
    364e:	f043 0301 	orr.w	r3, r3, #1
    tmp |= ADC_SINGLECTRL_REF_CONF;
  } else {
    tmp |= (init->reference << _ADC_SINGLECTRL_REF_SHIFT);
  }
#else
  tmp |= (init->reference << _ADC_SINGLECTRL_REF_SHIFT);
    3652:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
#endif
  adc->SINGLECTRL = tmp;
    3656:	60c3      	str	r3, [r0, #12]
#if defined(_ADC_BUSCONFLICT_MASK)
  tmp = adc->BUSREQ;
  EFM_ASSERT(!(tmp & adc->BUSCONFLICT));
  EFM_ASSERT(!(adc->STATUS & _ADC_STATUS_PROGERR_MASK));
#endif
}
    3658:	bcf0      	pop	{r4, r5, r6, r7}
    365a:	4770      	bx	lr
#endif
  else {
    return;
  }

  switch (ref) {
    365c:	2d06      	cmp	r5, #6
    365e:	d828      	bhi.n	36b2 <ADC_InitSingle+0xa6>
    3660:	e8df f005 	tbb	[pc, r5]
    3664:	25231910 	.word	0x25231910
    3668:	2727      	.short	0x2727
    366a:	04          	.byte	0x04
    366b:	00          	.byte	0x00
#endif
      break;

    case adcRef2xVDD:
      /* There is no gain calibration for this reference */
      newCal |= ((diCalReg[2] & DEVINFO_ADC0_OFFSET2XVDD_MASK)
    366c:	4b13      	ldr	r3, [pc, #76]	; (36bc <ADC_InitSingle+0xb0>)
    366e:	681b      	ldr	r3, [r3, #0]
                 >> DEVINFO_ADC0_OFFSET2XVDD_SHIFT)
                << _ADC_CAL_SINGLEOFFSET_SHIFT;
    3670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
              | _ADC_CAL_SINGLEOFFSETINV_MASK
#endif
              | _ADC_CAL_SINGLEGAIN_MASK);
  }

  calReg = adc->CAL & mask;
    3674:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
    3678:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    default:
      newCal = 0;
      break;
  }

  adc->CAL = calReg | (newCal << shift);
    367c:	4c0e      	ldr	r4, [pc, #56]	; (36b8 <ADC_InitSingle+0xac>)
    367e:	431a      	orrs	r2, r3
    3680:	6362      	str	r2, [r4, #52]	; 0x34
    3682:	e7cb      	b.n	361c <ADC_InitSingle+0x10>
    return;
  }

  switch (ref) {
    case adcRef1V25:
      newCal |= ((diCalReg[0] & DEVINFO_ADC0_GAIN1V25_MASK)
    3684:	4c0e      	ldr	r4, [pc, #56]	; (36c0 <ADC_InitSingle+0xb4>)
                << _ADC_CAL_SINGLEOFFSETINV_SHIFT;
#endif
      break;

    case adcRefVDD:
      newCal |= ((diCalReg[1] & DEVINFO_ADC0_GAINVDD_MASK)
    3686:	6823      	ldr	r3, [r4, #0]
                 >> DEVINFO_ADC0_GAINVDD_SHIFT)
                << _ADC_CAL_SINGLEGAIN_SHIFT;
      newCal |= ((diCalReg[1] & DEVINFO_ADC0_OFFSETVDD_MASK)
    3688:	6826      	ldr	r6, [r4, #0]
      break;

    case adcRefVDD:
      newCal |= ((diCalReg[1] & DEVINFO_ADC0_GAINVDD_MASK)
                 >> DEVINFO_ADC0_GAINVDD_SHIFT)
                << _ADC_CAL_SINGLEGAIN_SHIFT;
    368a:	f403 44fe 	and.w	r4, r3, #32512	; 0x7f00
      newCal |= ((diCalReg[1] & DEVINFO_ADC0_OFFSETVDD_MASK)
                 >> DEVINFO_ADC0_OFFSETVDD_SHIFT)
                << _ADC_CAL_SINGLEOFFSET_SHIFT;
    368e:	f006 037f 	and.w	r3, r6, #127	; 0x7f

    case adcRefVDD:
      newCal |= ((diCalReg[1] & DEVINFO_ADC0_GAINVDD_MASK)
                 >> DEVINFO_ADC0_GAINVDD_SHIFT)
                << _ADC_CAL_SINGLEGAIN_SHIFT;
      newCal |= ((diCalReg[1] & DEVINFO_ADC0_OFFSETVDD_MASK)
    3692:	4323      	orrs	r3, r4
    3694:	e7ee      	b.n	3674 <ADC_InitSingle+0x68>
                << _ADC_CAL_SINGLEOFFSETINV_SHIFT;
#endif
      break;

    case adcRef2V5:
      newCal |= ((diCalReg[0] & DEVINFO_ADC0_GAIN2V5_MASK)
    3696:	4b0a      	ldr	r3, [pc, #40]	; (36c0 <ADC_InitSingle+0xb4>)
                << _ADC_CAL_SINGLEOFFSETINV_SHIFT;
#endif
      break;

    case adcRef5VDIFF:
      newCal |= ((diCalReg[1] & DEVINFO_ADC0_GAIN5VDIFF_MASK)
    3698:	681c      	ldr	r4, [r3, #0]
                 >> DEVINFO_ADC0_GAIN5VDIFF_SHIFT)
                << _ADC_CAL_SINGLEGAIN_SHIFT;
      newCal |= ((diCalReg[1] & DEVINFO_ADC0_OFFSET5VDIFF_MASK)
    369a:	681b      	ldr	r3, [r3, #0]
#endif
      break;

    case adcRef5VDIFF:
      newCal |= ((diCalReg[1] & DEVINFO_ADC0_GAIN5VDIFF_MASK)
                 >> DEVINFO_ADC0_GAIN5VDIFF_SHIFT)
    369c:	f3c4 6406 	ubfx	r4, r4, #24, #7
                << _ADC_CAL_SINGLEGAIN_SHIFT;
      newCal |= ((diCalReg[1] & DEVINFO_ADC0_OFFSET5VDIFF_MASK)
                 >> DEVINFO_ADC0_OFFSET5VDIFF_SHIFT)
                << _ADC_CAL_SINGLEOFFSET_SHIFT;
    36a0:	f3c3 4306 	ubfx	r3, r3, #16, #7

    case adcRef5VDIFF:
      newCal |= ((diCalReg[1] & DEVINFO_ADC0_GAIN5VDIFF_MASK)
                 >> DEVINFO_ADC0_GAIN5VDIFF_SHIFT)
                << _ADC_CAL_SINGLEGAIN_SHIFT;
      newCal |= ((diCalReg[1] & DEVINFO_ADC0_OFFSET5VDIFF_MASK)
    36a4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    36a8:	e7e4      	b.n	3674 <ADC_InitSingle+0x68>
                << _ADC_CAL_SINGLEOFFSETINV_SHIFT;
#endif
      break;

    case adcRefVDD:
      newCal |= ((diCalReg[1] & DEVINFO_ADC0_GAINVDD_MASK)
    36aa:	4c06      	ldr	r4, [pc, #24]	; (36c4 <ADC_InitSingle+0xb8>)
    36ac:	e7eb      	b.n	3686 <ADC_InitSingle+0x7a>
                << _ADC_CAL_SINGLEOFFSETINV_SHIFT;
#endif
      break;

    case adcRef5VDIFF:
      newCal |= ((diCalReg[1] & DEVINFO_ADC0_GAIN5VDIFF_MASK)
    36ae:	4b05      	ldr	r3, [pc, #20]	; (36c4 <ADC_InitSingle+0xb8>)
    36b0:	e7f2      	b.n	3698 <ADC_InitSingle+0x8c>
    /* For external references, the calibration must be determined for the
       specific application and set by the user. Calibration data is also not
       available for the internal references adcRefVBGR, adcRefVEntropy and
       adcRefVBGRlow. */
    default:
      newCal = 0;
    36b2:	2300      	movs	r3, #0
    36b4:	e7de      	b.n	3674 <ADC_InitSingle+0x68>
    36b6:	bf00      	nop
    36b8:	40002000 	.word	0x40002000
    36bc:	0fe081bc 	.word	0x0fe081bc
    36c0:	0fe081b4 	.word	0x0fe081b4
    36c4:	0fe081b8 	.word	0x0fe081b8

000036c8 <ADC_TimebaseCalc>:
 *
 * @return
 *   Timebase value to use for ADC in order to achieve at least 1 us.
 ******************************************************************************/
uint8_t ADC_TimebaseCalc(uint32_t hfperFreq)
{
    36c8:	b508      	push	{r3, lr}
  if (!hfperFreq) {
    36ca:	b120      	cbz	r0, 36d6 <ADC_TimebaseCalc+0xe>
  /* Handle errata on Giant Gecko, max TIMEBASE is 5 bits wide or max 0x1F */
  /* cycles. This will give a warmp up time of e.g. 0.645us, not the       */
  /* required 1us when operating at 48MHz. One must also increase acqTime  */
  /* to compensate for the missing clock cycles, adding up to 1us in total.*/
  /* See reference manual for details. */
  if ( hfperFreq > 32000000 ) {
    36cc:	4b0a      	ldr	r3, [pc, #40]	; (36f8 <ADC_TimebaseCalc+0x30>)
    36ce:	4298      	cmp	r0, r3
    36d0:	d907      	bls.n	36e2 <ADC_TimebaseCalc+0x1a>
    36d2:	201f      	movs	r0, #31
  hfperFreq += 999999;
  hfperFreq /= 1000000;

  /* Return timebase value (N+1 format) */
  return (uint8_t)(hfperFreq - 1);
}
    36d4:	bd08      	pop	{r3, pc}
 *   Timebase value to use for ADC in order to achieve at least 1 us.
 ******************************************************************************/
uint8_t ADC_TimebaseCalc(uint32_t hfperFreq)
{
  if (!hfperFreq) {
    hfperFreq = CMU_ClockFreqGet(cmuClock_HFPER);
    36d6:	4809      	ldr	r0, [pc, #36]	; (36fc <ADC_TimebaseCalc+0x34>)
    36d8:	f000 fae6 	bl	3ca8 <CMU_ClockFreqGet>

    /* Just in case, make sure we get non-zero freq for below calculation */
    if (!hfperFreq) {
    36dc:	2800      	cmp	r0, #0
    36de:	d1f5      	bne.n	36cc <ADC_TimebaseCalc+0x4>
  hfperFreq += 999999;
  hfperFreq /= 1000000;

  /* Return timebase value (N+1 format) */
  return (uint8_t)(hfperFreq - 1);
}
    36e0:	bd08      	pop	{r3, pc}
    36e2:	4b07      	ldr	r3, [pc, #28]	; (3700 <ADC_TimebaseCalc+0x38>)
    36e4:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
    36e8:	f200 203f 	addw	r0, r0, #575	; 0x23f
    36ec:	fba3 3000 	umull	r3, r0, r3, r0
    36f0:	0c80      	lsrs	r0, r0, #18
    36f2:	3801      	subs	r0, #1
    36f4:	b2c0      	uxtb	r0, r0
    36f6:	bd08      	pop	{r3, pc}
    36f8:	01e84800 	.word	0x01e84800
    36fc:	00048140 	.word	0x00048140
    3700:	431bde83 	.word	0x431bde83

00003704 <BURTC_Init>:
 *
 * @param[in] burtcInit
 *   Pointer to BURTC initialization structure
 ******************************************************************************/
void BURTC_Init(const BURTC_Init_TypeDef *burtcInit)
{
    3704:	b5f0      	push	{r4, r5, r6, r7, lr}
  EFM_ASSERT((burtcInit->clkDiv >= 1) && (burtcInit->clkDiv <= 128));
  /* Ignored compare bits during low power operation must be less than 7 */
  /* Note! Giant Gecko revision C errata, do NOT use LPCOMP=7 */
  EFM_ASSERT(burtcInit->lowPowerComp <= 6);
  /* You cannot enable the BURTC if mode is set to disabled */
  EFM_ASSERT((burtcInit->enable == false)
    3706:	7806      	ldrb	r6, [r0, #0]

  /* Prescaler accepts an argument of 128 or less, valid values being 2^n */
  EFM_ASSERT((div > 0) && (div <= 32768));

  /* Count leading zeroes and "reverse" result, Cortex-M3 intrinsic */
  log2 = (31 - __CLZ(div));
    3708:	6883      	ldr	r3, [r0, #8]
    370a:	fab3 f383 	clz	r3, r3
    370e:	f1c3 041f 	rsb	r4, r3, #31
     value 1 will select a 2kHz ULFRCO clock, while any other value will
     select a 1kHz ULFRCO clock source. */
  presc = divToLog2(burtcInit->clkDiv);

  /* Make sure all registers are updated simultaneously */
  if (burtcInit->enable) {
    3712:	b116      	cbz	r6, 371a <BURTC_Init+0x16>
    3714:	4b18      	ldr	r3, [pc, #96]	; (3778 <BURTC_Init+0x74>)
    3716:	2201      	movs	r2, #1
    3718:	601a      	str	r2, [r3, #0]
__STATIC_INLINE void regSync(uint32_t mask)
{
  /* Avoid deadlock if modifying the same register twice when freeze mode is
     activated, or when no clock is selected for the BURTC. If no clock is
     selected, then the sync is done once the clock source is set. */
  if ((BURTC->FREEZE & BURTC_FREEZE_REGFREEZE)
    371a:	4918      	ldr	r1, [pc, #96]	; (377c <BURTC_Init+0x78>)
    371c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    371e:	07da      	lsls	r2, r3, #31
    3720:	d406      	bmi.n	3730 <BURTC_Init+0x2c>
      || ((BURTC->CTRL & _BURTC_CTRL_CLKSEL_MASK) == BURTC_CTRL_CLKSEL_NONE)) {
    3722:	680b      	ldr	r3, [r1, #0]
    3724:	f413 5f40 	tst.w	r3, #12288	; 0x3000
    3728:	d002      	beq.n	3730 <BURTC_Init+0x2c>
    return;
  }
  /* Wait for any pending previous write operation to have been completed */
  /* in low frequency domain. This is only required for the Gecko Family */
  while (BURTC->SYNCBUSY & mask)
    372a:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    372c:	07d3      	lsls	r3, r2, #31
    372e:	d4fc      	bmi.n	372a <BURTC_Init+0x26>
  /* Modification of LPMODE register requires sync with potential ongoing
   * register updates in LF domain. */
  regSync(BURTC_SYNCBUSY_LPMODE);

  /* Configure low power mode */
  BURTC->LPMODE = (uint32_t) (burtcInit->lowPowerMode);
    3730:	4d12      	ldr	r5, [pc, #72]	; (377c <BURTC_Init+0x78>)
    3732:	7c83      	ldrb	r3, [r0, #18]
    3734:	606b      	str	r3, [r5, #4]

  /* New configuration */
  ctrl = (BURTC_CTRL_RSTEN
          | (burtcInit->mode)
    3736:	7841      	ldrb	r1, [r0, #1]
          | (burtcInit->debugRun << _BURTC_CTRL_DEBUGRUN_SHIFT)
          | (burtcInit->compare0Top << _BURTC_CTRL_COMP0TOP_SHIFT)
          | (burtcInit->lowPowerComp << _BURTC_CTRL_LPCOMP_SHIFT)
    3738:	f8d0 c00c 	ldr.w	ip, [r0, #12]
          | (presc << _BURTC_CTRL_PRESC_SHIFT)
          | (burtcInit->clkSel)
    373c:	8887      	ldrh	r7, [r0, #4]

  /* New configuration */
  ctrl = (BURTC_CTRL_RSTEN
          | (burtcInit->mode)
          | (burtcInit->debugRun << _BURTC_CTRL_DEBUGRUN_SHIFT)
          | (burtcInit->compare0Top << _BURTC_CTRL_COMP0TOP_SHIFT)
    373e:	7c43      	ldrb	r3, [r0, #17]
  BURTC->LPMODE = (uint32_t) (burtcInit->lowPowerMode);

  /* New configuration */
  ctrl = (BURTC_CTRL_RSTEN
          | (burtcInit->mode)
          | (burtcInit->debugRun << _BURTC_CTRL_DEBUGRUN_SHIFT)
    3740:	7882      	ldrb	r2, [r0, #2]
          | (burtcInit->compare0Top << _BURTC_CTRL_COMP0TOP_SHIFT)
          | (burtcInit->lowPowerComp << _BURTC_CTRL_LPCOMP_SHIFT)
          | (presc << _BURTC_CTRL_PRESC_SHIFT)
          | (burtcInit->clkSel)
          | (burtcInit->timeStamp << _BURTC_CTRL_BUMODETSEN_SHIFT));
    3742:	f890 e010 	ldrb.w	lr, [r0, #16]
  /* Configure low power mode */
  BURTC->LPMODE = (uint32_t) (burtcInit->lowPowerMode);

  /* New configuration */
  ctrl = (BURTC_CTRL_RSTEN
          | (burtcInit->mode)
    3746:	f041 0108 	orr.w	r1, r1, #8
    374a:	ea47 104c 	orr.w	r0, r7, ip, lsl #5
    374e:	4301      	orrs	r1, r0
    3750:	ea41 0282 	orr.w	r2, r1, r2, lsl #2
    3754:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
    3758:	ea42 338e 	orr.w	r3, r2, lr, lsl #14

  /* Configure low power mode */
  BURTC->LPMODE = (uint32_t) (burtcInit->lowPowerMode);

  /* New configuration */
  ctrl = (BURTC_CTRL_RSTEN
    375c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 *   together to clear multiple interrupt sources for the BURTC module
 *   (BURTC_IFS_nnn).
 ******************************************************************************/
__STATIC_INLINE void BURTC_IntClear(uint32_t flags)
{
  BURTC->IFC = flags;
    3760:	f04f 32ff 	mov.w	r2, #4294967295
    3764:	632a      	str	r2, [r5, #48]	; 0x30

  /* Clear interrupts */
  BURTC_IntClear(0xFFFFFFFF);

  /* Set new configuration */
  BURTC->CTRL = ctrl;
    3766:	602b      	str	r3, [r5, #0]

  /* Enable BURTC and counter */
  if (burtcInit->enable) {
    3768:	b12e      	cbz	r6, 3776 <BURTC_Init+0x72>
    376a:	4905      	ldr	r1, [pc, #20]	; (3780 <BURTC_Init+0x7c>)
    376c:	4a02      	ldr	r2, [pc, #8]	; (3778 <BURTC_Init+0x74>)
 *   If true; asserts reset to BURTC, halts counter, if false; deassert reset
 ******************************************************************************/
__STATIC_INLINE void BURTC_Enable(bool enable)
{
  /* Note! If mode is disabled, BURTC counter will not start */
  EFM_ASSERT(((enable == true)
    376e:	682b      	ldr	r3, [r5, #0]
    3770:	2300      	movs	r3, #0
    3772:	600b      	str	r3, [r1, #0]
    3774:	6013      	str	r3, [r2, #0]
    3776:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3778:	43020700 	.word	0x43020700
    377c:	40081000 	.word	0x40081000
    3780:	4302000c 	.word	0x4302000c

00003784 <lfClkGet>:
 * @return
 *   The LFnCLK frequency in Hz. If no LFnCLK is selected (disabled), 0 is
 *   returned.
 ******************************************************************************/
static uint32_t lfClkGet(CMU_Clock_TypeDef lfClkBranch)
{
    3784:	b508      	push	{r3, lr}
CMU_Select_TypeDef CMU_ClockSelectGet(CMU_Clock_TypeDef clock)
{
  CMU_Select_TypeDef ret = cmuSelect_Disabled;
  uint32_t selReg;

  selReg = (clock >> CMU_SEL_REG_POS) & CMU_SEL_REG_MASK;
    3786:	f000 030f 	and.w	r3, r0, #15

  switch (selReg) {
    378a:	3b01      	subs	r3, #1
    378c:	2b06      	cmp	r3, #6
    378e:	d865      	bhi.n	385c <lfClkGet+0xd8>
    3790:	e8df f003 	tbb	[pc, r3]
    3794:	64473925 	.word	0x64473925
    3798:	5564      	.short	0x5564
    379a:	04          	.byte	0x04
    379b:	00          	.byte	0x00
#endif
      break;

#if defined(USBC_CLOCK_PRESENT)
    case CMU_USBCCLKSEL_REG:
      switch (CMU->STATUS
    379c:	4b46      	ldr	r3, [pc, #280]	; (38b8 <lfClkGet+0x134>)
    379e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              & (CMU_STATUS_USBCLFXOSEL
    37a0:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
#endif
      break;

#if defined(USBC_CLOCK_PRESENT)
    case CMU_USBCCLKSEL_REG:
      switch (CMU->STATUS
    37a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    37a8:	d023      	beq.n	37f2 <lfClkGet+0x6e>
    37aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    37ae:	d06d      	beq.n	388c <lfClkGet+0x108>
    37b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    37b4:	d04a      	beq.n	384c <lfClkGet+0xc8>
  }

  sel = CMU_ClockSelectGet(lfClkBranch);

  /* Get clock select field */
  switch (lfClkBranch) {
    37b6:	4b41      	ldr	r3, [pc, #260]	; (38bc <lfClkGet+0x138>)
    37b8:	4298      	cmp	r0, r3
    37ba:	d062      	beq.n	3882 <lfClkGet+0xfe>
    37bc:	4b40      	ldr	r3, [pc, #256]	; (38c0 <lfClkGet+0x13c>)
    37be:	4298      	cmp	r0, r3
    37c0:	d109      	bne.n	37d6 <lfClkGet+0x52>
#endif
      break;

    case cmuClock_LFB:
#if defined(_CMU_LFCLKSEL_MASK)
      sel = (CMU->LFCLKSEL & _CMU_LFCLKSEL_LFB_MASK) >> _CMU_LFCLKSEL_LFB_SHIFT;
    37c2:	4b3d      	ldr	r3, [pc, #244]	; (38b8 <lfClkGet+0x134>)
    37c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    37c6:	f3c3 0381 	ubfx	r3, r3, #2, #2
      break;
  }

  /* Get clock frequency */
#if defined(_CMU_LFCLKSEL_MASK)
  switch (sel) {
    37ca:	2b02      	cmp	r3, #2
    37cc:	d017      	beq.n	37fe <lfClkGet+0x7a>
    37ce:	2b03      	cmp	r3, #3
    37d0:	d062      	beq.n	3898 <lfClkGet+0x114>
    37d2:	2b01      	cmp	r3, #1
    37d4:	d148      	bne.n	3868 <lfClkGet+0xe4>
      break;
  }
#endif

  return ret;
}
    37d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  /* Get clock frequency */
#if defined(_CMU_LFCLKSEL_MASK)
  switch (sel) {
    case _CMU_LFCLKSEL_LFA_LFRCO:
      ret = SystemLFRCOClockGet();
    37da:	f002 ba8f 	b.w	5cfc <SystemLFRCOClockGet>
        default:
          ret = cmuSelect_HFRCO;
          break;
      }
#else
      switch (CMU->STATUS
    37de:	4b36      	ldr	r3, [pc, #216]	; (38b8 <lfClkGet+0x134>)
    37e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              & (CMU_STATUS_HFRCOSEL
    37e2:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
        default:
          ret = cmuSelect_HFRCO;
          break;
      }
#else
      switch (CMU->STATUS
    37e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    37ea:	d04f      	beq.n	388c <lfClkGet+0x108>
    37ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    37f0:	d12c      	bne.n	384c <lfClkGet+0xc8>
  }

  sel = CMU_ClockSelectGet(lfClkBranch);

  /* Get clock select field */
  switch (lfClkBranch) {
    37f2:	4b32      	ldr	r3, [pc, #200]	; (38bc <lfClkGet+0x138>)
    37f4:	4298      	cmp	r0, r3
    37f6:	d044      	beq.n	3882 <lfClkGet+0xfe>
    37f8:	4b31      	ldr	r3, [pc, #196]	; (38c0 <lfClkGet+0x13c>)
    37fa:	4298      	cmp	r0, r3
    37fc:	d0e1      	beq.n	37c2 <lfClkGet+0x3e>
      break;
  }
#endif

  return ret;
}
    37fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    case _CMU_LFCLKSEL_LFA_LFRCO:
      ret = SystemLFRCOClockGet();
      break;

    case _CMU_LFCLKSEL_LFA_LFXO:
      ret = SystemLFXOClockGet();
    3802:	f002 ba83 	b.w	5d0c <SystemLFXOClockGet>
      break;

#if defined(_CMU_LFCLKSEL_MASK) || defined(_CMU_LFACLKSEL_MASK)
    case CMU_LFACLKSEL_REG:
#if defined(_CMU_LFCLKSEL_MASK)
      switch (CMU->LFCLKSEL & _CMU_LFCLKSEL_LFA_MASK) {
    3806:	4a2c      	ldr	r2, [pc, #176]	; (38b8 <lfClkGet+0x134>)
    3808:	6a93      	ldr	r3, [r2, #40]	; 0x28
    380a:	f003 0303 	and.w	r3, r3, #3
    380e:	2b02      	cmp	r3, #2
    3810:	d0ef      	beq.n	37f2 <lfClkGet+0x6e>
    3812:	2b03      	cmp	r3, #3
    3814:	d01a      	beq.n	384c <lfClkGet+0xc8>
    3816:	2b01      	cmp	r3, #1
    3818:	d038      	beq.n	388c <lfClkGet+0x108>
          break;
#endif

        default:
#if defined(CMU_LFCLKSEL_LFAE)
          if (CMU->LFCLKSEL & _CMU_LFCLKSEL_LFAE_MASK) {
    381a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    381c:	03da      	lsls	r2, r3, #15
    381e:	d415      	bmi.n	384c <lfClkGet+0xc8>
    3820:	e7c9      	b.n	37b6 <lfClkGet+0x32>
#endif /* _CMU_LFCLKSEL_MASK || _CMU_LFACLKSEL_MASK */

#if defined(_CMU_LFCLKSEL_MASK) || defined(_CMU_LFBCLKSEL_MASK)
    case CMU_LFBCLKSEL_REG:
#if defined(_CMU_LFCLKSEL_MASK)
      switch (CMU->LFCLKSEL & _CMU_LFCLKSEL_LFB_MASK) {
    3822:	4a25      	ldr	r2, [pc, #148]	; (38b8 <lfClkGet+0x134>)
    3824:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3826:	f003 030c 	and.w	r3, r3, #12
    382a:	2b08      	cmp	r3, #8
    382c:	d0e1      	beq.n	37f2 <lfClkGet+0x6e>
    382e:	2b0c      	cmp	r3, #12
    3830:	d00c      	beq.n	384c <lfClkGet+0xc8>
    3832:	2b04      	cmp	r3, #4
    3834:	d02a      	beq.n	388c <lfClkGet+0x108>
          break;
#endif

        default:
#if defined(CMU_LFCLKSEL_LFBE)
          if (CMU->LFCLKSEL & _CMU_LFCLKSEL_LFBE_MASK) {
    3836:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3838:	02db      	lsls	r3, r3, #11
    383a:	d407      	bmi.n	384c <lfClkGet+0xc8>
    383c:	e7bb      	b.n	37b6 <lfClkGet+0x32>
          ret = cmuSelect_AUXHFRCO;
          break;
      }

#elif defined(_CMU_CTRL_DBGCLK_MASK)
      switch (CMU->CTRL & _CMU_CTRL_DBGCLK_MASK) {
    383e:	4b1e      	ldr	r3, [pc, #120]	; (38b8 <lfClkGet+0x134>)
    3840:	681b      	ldr	r3, [r3, #0]
    3842:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
    3846:	d001      	beq.n	384c <lfClkGet+0xc8>
    3848:	2b00      	cmp	r3, #0
    384a:	d0b4      	beq.n	37b6 <lfClkGet+0x32>
  }

  sel = CMU_ClockSelectGet(lfClkBranch);

  /* Get clock select field */
  switch (lfClkBranch) {
    384c:	4b1b      	ldr	r3, [pc, #108]	; (38bc <lfClkGet+0x138>)
    384e:	4298      	cmp	r0, r3
    3850:	d017      	beq.n	3882 <lfClkGet+0xfe>
    3852:	4b1b      	ldr	r3, [pc, #108]	; (38c0 <lfClkGet+0x13c>)
    3854:	4298      	cmp	r0, r3
    3856:	d0b4      	beq.n	37c2 <lfClkGet+0x3e>
#endif
      break;

    default:
      EFM_ASSERT(0);
      ret = 0U;
    3858:	2000      	movs	r0, #0
    385a:	bd08      	pop	{r3, pc}
  }

  sel = CMU_ClockSelectGet(lfClkBranch);

  /* Get clock select field */
  switch (lfClkBranch) {
    385c:	4b17      	ldr	r3, [pc, #92]	; (38bc <lfClkGet+0x138>)
    385e:	4298      	cmp	r0, r3
    3860:	d00f      	beq.n	3882 <lfClkGet+0xfe>
    3862:	4b17      	ldr	r3, [pc, #92]	; (38c0 <lfClkGet+0x13c>)
    3864:	4298      	cmp	r0, r3
    3866:	d0ac      	beq.n	37c2 <lfClkGet+0x3e>

    case _CMU_LFCLKSEL_LFA_DISABLED:
      ret = 0;
#if defined(CMU_LFCLKSEL_LFAE)
      /* Check LF Extended bit setting for LFA or LFB ULFRCO clock */
      if ((lfClkBranch == cmuClock_LFA) || (lfClkBranch == cmuClock_LFB)) {
    3868:	4b14      	ldr	r3, [pc, #80]	; (38bc <lfClkGet+0x138>)
    386a:	4298      	cmp	r0, r3
    386c:	d01b      	beq.n	38a6 <lfClkGet+0x122>
    386e:	4b14      	ldr	r3, [pc, #80]	; (38c0 <lfClkGet+0x13c>)
    3870:	4298      	cmp	r0, r3
    3872:	d1f1      	bne.n	3858 <lfClkGet+0xd4>
        if (CMU->LFCLKSEL >> (lfClkBranch == cmuClock_LFA
    3874:	4b10      	ldr	r3, [pc, #64]	; (38b8 <lfClkGet+0x134>)
    3876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                              ? _CMU_LFCLKSEL_LFAE_SHIFT
                              : _CMU_LFCLKSEL_LFBE_SHIFT)) {
    3878:	2014      	movs	r0, #20
    case _CMU_LFCLKSEL_LFA_DISABLED:
      ret = 0;
#if defined(CMU_LFCLKSEL_LFAE)
      /* Check LF Extended bit setting for LFA or LFB ULFRCO clock */
      if ((lfClkBranch == cmuClock_LFA) || (lfClkBranch == cmuClock_LFB)) {
        if (CMU->LFCLKSEL >> (lfClkBranch == cmuClock_LFA
    387a:	fa33 f000 	lsrs.w	r0, r3, r0
    387e:	d116      	bne.n	38ae <lfClkGet+0x12a>
      break;
  }
#endif

  return ret;
}
    3880:	bd08      	pop	{r3, pc}

  /* Get clock select field */
  switch (lfClkBranch) {
    case cmuClock_LFA:
#if defined(_CMU_LFCLKSEL_MASK)
      sel = (CMU->LFCLKSEL & _CMU_LFCLKSEL_LFA_MASK) >> _CMU_LFCLKSEL_LFA_SHIFT;
    3882:	4b0d      	ldr	r3, [pc, #52]	; (38b8 <lfClkGet+0x134>)
    3884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3886:	f003 0303 	and.w	r3, r3, #3
#elif defined(_CMU_LFACLKSEL_MASK)
      sel = (CMU->LFACLKSEL & _CMU_LFACLKSEL_LFA_MASK) >> _CMU_LFACLKSEL_LFA_SHIFT;
#else
      EFM_ASSERT(0);
#endif
      break;
    388a:	e79e      	b.n	37ca <lfClkGet+0x46>
  }

  sel = CMU_ClockSelectGet(lfClkBranch);

  /* Get clock select field */
  switch (lfClkBranch) {
    388c:	4b0b      	ldr	r3, [pc, #44]	; (38bc <lfClkGet+0x138>)
    388e:	4298      	cmp	r0, r3
    3890:	d0f7      	beq.n	3882 <lfClkGet+0xfe>
    3892:	4b0b      	ldr	r3, [pc, #44]	; (38c0 <lfClkGet+0x13c>)
    3894:	4298      	cmp	r0, r3
    3896:	d094      	beq.n	37c2 <lfClkGet+0x3e>
#if defined(_CMU_LFCLKSEL_LFA_HFCORECLKLEDIV2)
    case _CMU_LFCLKSEL_LFA_HFCORECLKLEDIV2:
#if defined(CMU_MAX_FREQ_HFLE)
      /* HFLE bit is or'ed by hardware with HFCORECLKLEDIV to reduce the
       * frequency of CMU_HFCORECLKLEDIV2. */
      ret = SystemCoreClockGet() / (1U << (getHfLeConfig() + 1));
    3898:	f002 f946 	bl	5b28 <SystemCoreClockGet>
{
#if defined(BITBAND_PER_BASE)
  uint32_t aliasAddr =
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);

  return *(volatile uint32_t *)aliasAddr;
    389c:	4b09      	ldr	r3, [pc, #36]	; (38c4 <lfClkGet+0x140>)
    389e:	681b      	ldr	r3, [r3, #0]
    38a0:	3301      	adds	r3, #1
    38a2:	40d8      	lsrs	r0, r3
#else
      ret = SystemCoreClockGet() / 2U;
#endif
      break;
    38a4:	bd08      	pop	{r3, pc}
    case _CMU_LFCLKSEL_LFA_DISABLED:
      ret = 0;
#if defined(CMU_LFCLKSEL_LFAE)
      /* Check LF Extended bit setting for LFA or LFB ULFRCO clock */
      if ((lfClkBranch == cmuClock_LFA) || (lfClkBranch == cmuClock_LFB)) {
        if (CMU->LFCLKSEL >> (lfClkBranch == cmuClock_LFA
    38a6:	4b04      	ldr	r3, [pc, #16]	; (38b8 <lfClkGet+0x134>)
                              ? _CMU_LFCLKSEL_LFAE_SHIFT
                              : _CMU_LFCLKSEL_LFBE_SHIFT)) {
    38a8:	2010      	movs	r0, #16
    case _CMU_LFCLKSEL_LFA_DISABLED:
      ret = 0;
#if defined(CMU_LFCLKSEL_LFAE)
      /* Check LF Extended bit setting for LFA or LFB ULFRCO clock */
      if ((lfClkBranch == cmuClock_LFA) || (lfClkBranch == cmuClock_LFB)) {
        if (CMU->LFCLKSEL >> (lfClkBranch == cmuClock_LFA
    38aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    38ac:	e7e5      	b.n	387a <lfClkGet+0xf6>
      break;
  }
#endif

  return ret;
}
    38ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      /* Check LF Extended bit setting for LFA or LFB ULFRCO clock */
      if ((lfClkBranch == cmuClock_LFA) || (lfClkBranch == cmuClock_LFB)) {
        if (CMU->LFCLKSEL >> (lfClkBranch == cmuClock_LFA
                              ? _CMU_LFCLKSEL_LFAE_SHIFT
                              : _CMU_LFCLKSEL_LFBE_SHIFT)) {
          ret = SystemULFRCOClockGet();
    38b2:	f002 ba27 	b.w	5d04 <SystemULFRCOClockGet>
    38b6:	bf00      	nop
    38b8:	400c8000 	.word	0x400c8000
    38bc:	001a0002 	.word	0x001a0002
    38c0:	001c0003 	.word	0x001c0003
    38c4:	43900078 	.word	0x43900078

000038c8 <CMU_ClockDivSet>:
 *
 * @param[in] div
 *   The clock divisor to use (<= cmuClkDiv_512).
 ******************************************************************************/
void CMU_ClockDivSet(CMU_Clock_TypeDef clock, CMU_ClkDiv_TypeDef div)
{
    38c8:	b538      	push	{r3, r4, r5, lr}
#elif defined(_SILICON_LABS_32B_SERIES_0)
  uint32_t freq;
  uint32_t divReg;

  /* Get divisor reg id */
  divReg = (clock >> CMU_DIV_REG_POS) & CMU_DIV_REG_MASK;
    38ca:	f3c0 1303 	ubfx	r3, r0, #4, #4

  switch (divReg) {
    38ce:	3b01      	subs	r3, #1
 *
 * @param[in] div
 *   The clock divisor to use (<= cmuClkDiv_512).
 ******************************************************************************/
void CMU_ClockDivSet(CMU_Clock_TypeDef clock, CMU_ClkDiv_TypeDef div)
{
    38d0:	460c      	mov	r4, r1
  uint32_t divReg;

  /* Get divisor reg id */
  divReg = (clock >> CMU_DIV_REG_POS) & CMU_DIV_REG_MASK;

  switch (divReg) {
    38d2:	2b06      	cmp	r3, #6
    38d4:	d812      	bhi.n	38fc <CMU_ClockDivSet+0x34>
    38d6:	e8df f003 	tbb	[pc, r3]
    38da:	111c      	.short	0x111c
    38dc:	04685d11 	.word	0x04685d11
    38e0:	12          	.byte	0x12
    38e1:	00          	.byte	0x00
      /* Optimize wait state setting for current core clk */
      CMU_UpdateWaitStates(freq, VSCALE_DEFAULT);
      break;

    case CMU_LFAPRESC0_REG:
      switch (clock) {
    38e2:	4ba6      	ldr	r3, [pc, #664]	; (3b7c <CMU_ClockDivSet+0x2b4>)
    38e4:	4298      	cmp	r0, r3
    38e6:	f000 8138 	beq.w	3b5a <CMU_ClockDivSet+0x292>
    38ea:	f503 13af 	add.w	r3, r3, #1433600	; 0x15e000
    38ee:	4298      	cmp	r0, r3
    38f0:	f000 811d 	beq.w	3b2e <CMU_ClockDivSet+0x266>
    38f4:	4ba2      	ldr	r3, [pc, #648]	; (3b80 <CMU_ClockDivSet+0x2b8>)
    38f6:	4298      	cmp	r0, r3
    38f8:	f000 8102 	beq.w	3b00 <CMU_ClockDivSet+0x238>
    38fc:	bd38      	pop	{r3, r4, r5, pc}
          break;
      }
      break;

    case CMU_LFBPRESC0_REG:
      switch (clock) {
    38fe:	4ba1      	ldr	r3, [pc, #644]	; (3b84 <CMU_ClockDivSet+0x2bc>)
    3900:	4298      	cmp	r0, r3
    3902:	f000 80d5 	beq.w	3ab0 <CMU_ClockDivSet+0x1e8>
    3906:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    390a:	4298      	cmp	r0, r3
    390c:	f000 80b9 	beq.w	3a82 <CMU_ClockDivSet+0x1ba>
    3910:	bd38      	pop	{r3, r4, r5, pc}
 *   this target. Retain SCBTP (Suppressed Conditional Branch Target Prefetch)
 *   setting.
 ******************************************************************************/
static void flashWaitStateMax(void)
{
  flashWaitStateControl(SystemMaxCoreClockGet(), 0);
    3912:	f002 f977 	bl	5c04 <SystemMaxCoreClockGet>
  bool scbtpEn;   /* Suppressed Conditional Branch Target Prefetch setting. */
#endif
  (void) vscale;  /* vscale parameter is only used on some devices */

  /* Make sure the MSC is unlocked */
  mscLocked = MSC->LOCK;
    3916:	4b9c      	ldr	r3, [pc, #624]	; (3b88 <CMU_ClockDivSet+0x2c0>)
  MSC->LOCK = MSC_UNLOCK_CODE;
    3918:	f641 3271 	movw	r2, #7025	; 0x1b71
  bool scbtpEn;   /* Suppressed Conditional Branch Target Prefetch setting. */
#endif
  (void) vscale;  /* vscale parameter is only used on some devices */

  /* Make sure the MSC is unlocked */
  mscLocked = MSC->LOCK;
    391c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
  MSC->LOCK = MSC_UNLOCK_CODE;
    391e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get mode and SCBTP enable */
  mode = MSC->READCTRL & _MSC_READCTRL_MODE_MASK;
    3920:	685b      	ldr	r3, [r3, #4]
    3922:	f003 0307 	and.w	r3, r3, #7
    3926:	2b04      	cmp	r3, #4
    3928:	d806      	bhi.n	3938 <CMU_ClockDivSet+0x70>
    392a:	2201      	movs	r2, #1
    392c:	fa02 f303 	lsl.w	r3, r2, r3
    3930:	f013 0f13 	tst.w	r3, #19
    3934:	f040 80df 	bne.w	3af6 <CMU_ClockDivSet+0x22e>

  /* Set mode based on the core clock frequency and SCBTP enable */
  if (false) {
  }
#if defined(MSC_READCTRL_MODE_WS2)
  else if (coreFreq > CMU_MAX_FREQ_1WS) {
    3938:	4b94      	ldr	r3, [pc, #592]	; (3b8c <CMU_ClockDivSet+0x2c4>)
    393a:	4298      	cmp	r0, r3
    393c:	f240 8099 	bls.w	3a72 <CMU_ClockDivSet+0x1aa>
    mode = (scbtpEn ? MSC_READCTRL_MODE_WS2SCBTP : MSC_READCTRL_MODE_WS2);
    3940:	2205      	movs	r2, #5

#endif

  /* BUS_RegMaskedWrite cannot be used here as it would temporarily set the
     mode field to WS0 */
  MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | mode;
    3942:	4991      	ldr	r1, [pc, #580]	; (3b88 <CMU_ClockDivSet+0x2c0>)
    3944:	684b      	ldr	r3, [r1, #4]
    3946:	f023 0307 	bic.w	r3, r3, #7
    394a:	4313      	orrs	r3, r2
    394c:	604b      	str	r3, [r1, #4]

  if (mscLocked) {
    394e:	b10d      	cbz	r5, 3954 <CMU_ClockDivSet+0x8c>
    MSC->LOCK = 0;
    3950:	2300      	movs	r3, #0
    3952:	63cb      	str	r3, [r1, #60]	; 0x3c

      /* Configure worst case wait states for flash access before setting divisor */
      flashWaitStateMax();

      /* Set divider */
      CMU->CTRL = (CMU->CTRL & ~_CMU_CTRL_HFCLKDIV_MASK)
    3954:	4a8e      	ldr	r2, [pc, #568]	; (3b90 <CMU_ClockDivSet+0x2c8>)
    3956:	6813      	ldr	r3, [r2, #0]
                  | ((div - 1) << _CMU_CTRL_HFCLKDIV_SHIFT);
    3958:	3c01      	subs	r4, #1

      /* Configure worst case wait states for flash access before setting divisor */
      flashWaitStateMax();

      /* Set divider */
      CMU->CTRL = (CMU->CTRL & ~_CMU_CTRL_HFCLKDIV_MASK)
    395a:	f423 33e0 	bic.w	r3, r3, #114688	; 0x1c000
                  | ((div - 1) << _CMU_CTRL_HFCLKDIV_SHIFT);
    395e:	ea43 3484 	orr.w	r4, r3, r4, lsl #14

      /* Configure worst case wait states for flash access before setting divisor */
      flashWaitStateMax();

      /* Set divider */
      CMU->CTRL = (CMU->CTRL & ~_CMU_CTRL_HFCLKDIV_MASK)
    3962:	6014      	str	r4, [r2, #0]
                           & ~_CMU_HFCORECLKDIV_HFCORECLKDIV_MASK)
                          | (div << _CMU_HFCORECLKDIV_HFCORECLKDIV_SHIFT);

      /* Update CMSIS core clock variable */
      /* (The function will update the global variable) */
      freq = SystemCoreClockGet();
    3964:	f002 f8e0 	bl	5b28 <SystemCoreClockGet>
  bool scbtpEn;   /* Suppressed Conditional Branch Target Prefetch setting. */
#endif
  (void) vscale;  /* vscale parameter is only used on some devices */

  /* Make sure the MSC is unlocked */
  mscLocked = MSC->LOCK;
    3968:	4b87      	ldr	r3, [pc, #540]	; (3b88 <CMU_ClockDivSet+0x2c0>)
  MSC->LOCK = MSC_UNLOCK_CODE;
    396a:	f641 3271 	movw	r2, #7025	; 0x1b71
  bool scbtpEn;   /* Suppressed Conditional Branch Target Prefetch setting. */
#endif
  (void) vscale;  /* vscale parameter is only used on some devices */

  /* Make sure the MSC is unlocked */
  mscLocked = MSC->LOCK;
    396e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  MSC->LOCK = MSC_UNLOCK_CODE;
    3970:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get mode and SCBTP enable */
  mode = MSC->READCTRL & _MSC_READCTRL_MODE_MASK;
    3972:	685b      	ldr	r3, [r3, #4]
    3974:	f003 0307 	and.w	r3, r3, #7
    3978:	2b04      	cmp	r3, #4
    397a:	d857      	bhi.n	3a2c <CMU_ClockDivSet+0x164>
    397c:	2201      	movs	r2, #1
    397e:	fa02 f303 	lsl.w	r3, r2, r3
    3982:	f013 0f13 	tst.w	r3, #19
    3986:	d051      	beq.n	3a2c <CMU_ClockDivSet+0x164>

  /* Set mode based on the core clock frequency and SCBTP enable */
  if (false) {
  }
#if defined(MSC_READCTRL_MODE_WS2)
  else if (coreFreq > CMU_MAX_FREQ_1WS) {
    3988:	4b80      	ldr	r3, [pc, #512]	; (3b8c <CMU_ClockDivSet+0x2c4>)
    398a:	4298      	cmp	r0, r3
    398c:	f240 80a6 	bls.w	3adc <CMU_ClockDivSet+0x214>
    mode = (scbtpEn ? MSC_READCTRL_MODE_WS2SCBTP : MSC_READCTRL_MODE_WS2);
    3990:	2204      	movs	r2, #4
    3992:	e04f      	b.n	3a34 <CMU_ClockDivSet+0x16c>

    case CMU_HFPERCLKDIV_REG:
      EFM_ASSERT((div >= cmuClkDiv_1) && (div <= cmuClkDiv_512));
      /* Convert to correct scale */
      div = CMU_DivToLog2(div);
      CMU->HFPERCLKDIV = (CMU->HFPERCLKDIV & ~_CMU_HFPERCLKDIV_HFPERCLKDIV_MASK)
    3994:	4a7e      	ldr	r2, [pc, #504]	; (3b90 <CMU_ClockDivSet+0x2c8>)

  /* Fixed 2^n prescalers take argument of 32768 or less. */
  EFM_ASSERT((div > 0U) && (div <= 32768U));

  /* Count leading zeroes and "reverse" result */
  log2 = (31U - __CLZ(div));
    3996:	fab1 f481 	clz	r4, r1
    399a:	6893      	ldr	r3, [r2, #8]
    399c:	f1c4 041f 	rsb	r4, r4, #31
    39a0:	f023 030f 	bic.w	r3, r3, #15
                         | (div << _CMU_HFPERCLKDIV_HFPERCLKDIV_SHIFT);
    39a4:	431c      	orrs	r4, r3

    case CMU_HFPERCLKDIV_REG:
      EFM_ASSERT((div >= cmuClkDiv_1) && (div <= cmuClkDiv_512));
      /* Convert to correct scale */
      div = CMU_DivToLog2(div);
      CMU->HFPERCLKDIV = (CMU->HFPERCLKDIV & ~_CMU_HFPERCLKDIV_HFPERCLKDIV_MASK)
    39a6:	6094      	str	r4, [r2, #8]
                         | (div << _CMU_HFPERCLKDIV_HFPERCLKDIV_SHIFT);
      break;
    39a8:	bd38      	pop	{r3, r4, r5, pc}
 *   this target. Retain SCBTP (Suppressed Conditional Branch Target Prefetch)
 *   setting.
 ******************************************************************************/
static void flashWaitStateMax(void)
{
  flashWaitStateControl(SystemMaxCoreClockGet(), 0);
    39aa:	f002 f92b 	bl	5c04 <SystemMaxCoreClockGet>
  bool scbtpEn;   /* Suppressed Conditional Branch Target Prefetch setting. */
#endif
  (void) vscale;  /* vscale parameter is only used on some devices */

  /* Make sure the MSC is unlocked */
  mscLocked = MSC->LOCK;
    39ae:	4b76      	ldr	r3, [pc, #472]	; (3b88 <CMU_ClockDivSet+0x2c0>)
  MSC->LOCK = MSC_UNLOCK_CODE;
    39b0:	f641 3271 	movw	r2, #7025	; 0x1b71
  bool scbtpEn;   /* Suppressed Conditional Branch Target Prefetch setting. */
#endif
  (void) vscale;  /* vscale parameter is only used on some devices */

  /* Make sure the MSC is unlocked */
  mscLocked = MSC->LOCK;
    39b4:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
  MSC->LOCK = MSC_UNLOCK_CODE;
    39b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get mode and SCBTP enable */
  mode = MSC->READCTRL & _MSC_READCTRL_MODE_MASK;
    39b8:	685b      	ldr	r3, [r3, #4]
    39ba:	f003 0307 	and.w	r3, r3, #7
    39be:	2b04      	cmp	r3, #4
    39c0:	d806      	bhi.n	39d0 <CMU_ClockDivSet+0x108>
    39c2:	2201      	movs	r2, #1
    39c4:	fa02 f303 	lsl.w	r3, r2, r3
    39c8:	f013 0f13 	tst.w	r3, #19
    39cc:	f040 808e 	bne.w	3aec <CMU_ClockDivSet+0x224>

  /* Set mode based on the core clock frequency and SCBTP enable */
  if (false) {
  }
#if defined(MSC_READCTRL_MODE_WS2)
  else if (coreFreq > CMU_MAX_FREQ_1WS) {
    39d0:	4b6e      	ldr	r3, [pc, #440]	; (3b8c <CMU_ClockDivSet+0x2c4>)
    39d2:	4298      	cmp	r0, r3
    39d4:	d945      	bls.n	3a62 <CMU_ClockDivSet+0x19a>
    mode = (scbtpEn ? MSC_READCTRL_MODE_WS2SCBTP : MSC_READCTRL_MODE_WS2);
    39d6:	2205      	movs	r2, #5

#endif

  /* BUS_RegMaskedWrite cannot be used here as it would temporarily set the
     mode field to WS0 */
  MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | mode;
    39d8:	496b      	ldr	r1, [pc, #428]	; (3b88 <CMU_ClockDivSet+0x2c0>)
    39da:	684b      	ldr	r3, [r1, #4]
    39dc:	f023 0307 	bic.w	r3, r3, #7
    39e0:	4313      	orrs	r3, r2
    39e2:	604b      	str	r3, [r1, #4]

  if (mscLocked) {
    39e4:	b10d      	cbz	r5, 39ea <CMU_ClockDivSet+0x122>
    MSC->LOCK = 0;
    39e6:	2300      	movs	r3, #0
    39e8:	63cb      	str	r3, [r1, #60]	; 0x3c

      /* Configure worst case wait states for flash access before setting divisor */
      flashWaitStateMax();

#if defined(CMU_MAX_FREQ_HFLE)
      setHfLeConfig(SystemHFClockGet() / div);
    39ea:	f002 f90f 	bl	5c0c <SystemHFClockGet>
  /* - Enable HFLE wait-state if to allow access to LE peripherals when HFBUSCLK is
       above maxLeFreq.
     - Set HFLE prescaler. Allowed HFLE clock frequency is maxLeFreq. */

  hfleWs = 1;
  if (hfFreq <= CMU_MAX_FREQ_HFLE) {
    39ee:	4b69      	ldr	r3, [pc, #420]	; (3b94 <CMU_ClockDivSet+0x2cc>)

      /* Configure worst case wait states for flash access before setting divisor */
      flashWaitStateMax();

#if defined(CMU_MAX_FREQ_HFLE)
      setHfLeConfig(SystemHFClockGet() / div);
    39f0:	fbb0 f0f4 	udiv	r0, r0, r4
  /* - Enable HFLE wait-state if to allow access to LE peripherals when HFBUSCLK is
       above maxLeFreq.
     - Set HFLE prescaler. Allowed HFLE clock frequency is maxLeFreq. */

  hfleWs = 1;
  if (hfFreq <= CMU_MAX_FREQ_HFLE) {
    39f4:	4298      	cmp	r0, r3
    39f6:	d931      	bls.n	3a5c <CMU_ClockDivSet+0x194>
    hfleWs = 0;
    hflePresc = 0;
  } else if (hfFreq <= (2 * CMU_MAX_FREQ_HFLE)) {
    39f8:	4b67      	ldr	r3, [pc, #412]	; (3b98 <CMU_ClockDivSet+0x2d0>)
    39fa:	2101      	movs	r1, #1
    39fc:	4298      	cmp	r0, r3
    39fe:	bf94      	ite	ls
    3a00:	f44f 7080 	movls.w	r0, #256	; 0x100
    3a04:	f44f 7000 	movhi.w	r0, #512	; 0x200
{
#if defined(BITBAND_PER_BASE)
  uint32_t aliasAddr =
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);

  *(volatile uint32_t *)aliasAddr = (uint32_t)val;
    3a08:	4b64      	ldr	r3, [pc, #400]	; (3b9c <CMU_ClockDivSet+0x2d4>)
    hflePresc = 1;
  } else {
    hflePresc = 2;
  }
  BUS_RegBitWrite(&CMU->CTRL, _GENERIC_HFLE_WS_SHIFT, hfleWs);
  GENERIC_HFLE_PRESC_REG = (GENERIC_HFLE_PRESC_REG & ~_GENERIC_HFLE_PRESC_MASK)
    3a0a:	4a61      	ldr	r2, [pc, #388]	; (3b90 <CMU_ClockDivSet+0x2c8>)
    3a0c:	6019      	str	r1, [r3, #0]
    3a0e:	6853      	ldr	r3, [r2, #4]
    3a10:	fab4 f484 	clz	r4, r4
    3a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
                           | (hflePresc << _GENERIC_HFLE_PRESC_SHIFT);
    3a18:	4318      	orrs	r0, r3
    hflePresc = 1;
  } else {
    hflePresc = 2;
  }
  BUS_RegBitWrite(&CMU->CTRL, _GENERIC_HFLE_WS_SHIFT, hfleWs);
  GENERIC_HFLE_PRESC_REG = (GENERIC_HFLE_PRESC_REG & ~_GENERIC_HFLE_PRESC_MASK)
    3a1a:	6050      	str	r0, [r2, #4]
#endif

      /* Convert to correct scale */
      div = CMU_DivToLog2(div);

      CMU->HFCORECLKDIV = (CMU->HFCORECLKDIV
    3a1c:	6853      	ldr	r3, [r2, #4]
    3a1e:	f1c4 041f 	rsb	r4, r4, #31
                           & ~_CMU_HFCORECLKDIV_HFCORECLKDIV_MASK)
    3a22:	f023 030f 	bic.w	r3, r3, #15
                          | (div << _CMU_HFCORECLKDIV_HFCORECLKDIV_SHIFT);
    3a26:	431c      	orrs	r4, r3
#endif

      /* Convert to correct scale */
      div = CMU_DivToLog2(div);

      CMU->HFCORECLKDIV = (CMU->HFCORECLKDIV
    3a28:	6054      	str	r4, [r2, #4]
    3a2a:	e79b      	b.n	3964 <CMU_ClockDivSet+0x9c>

  /* Set mode based on the core clock frequency and SCBTP enable */
  if (false) {
  }
#if defined(MSC_READCTRL_MODE_WS2)
  else if (coreFreq > CMU_MAX_FREQ_1WS) {
    3a2c:	4b57      	ldr	r3, [pc, #348]	; (3b8c <CMU_ClockDivSet+0x2c4>)
    3a2e:	4298      	cmp	r0, r3
    3a30:	d90c      	bls.n	3a4c <CMU_ClockDivSet+0x184>
    mode = (scbtpEn ? MSC_READCTRL_MODE_WS2SCBTP : MSC_READCTRL_MODE_WS2);
    3a32:	2205      	movs	r2, #5

#endif

  /* BUS_RegMaskedWrite cannot be used here as it would temporarily set the
     mode field to WS0 */
  MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | mode;
    3a34:	4954      	ldr	r1, [pc, #336]	; (3b88 <CMU_ClockDivSet+0x2c0>)
    3a36:	684b      	ldr	r3, [r1, #4]
    3a38:	f023 0307 	bic.w	r3, r3, #7
    3a3c:	4313      	orrs	r3, r2
    3a3e:	604b      	str	r3, [r1, #4]

  if (mscLocked) {
    3a40:	2c00      	cmp	r4, #0
    3a42:	f43f af5b 	beq.w	38fc <CMU_ClockDivSet+0x34>
    MSC->LOCK = 0;
    3a46:	2300      	movs	r3, #0
    3a48:	63cb      	str	r3, [r1, #60]	; 0x3c
    3a4a:	bd38      	pop	{r3, r4, r5, pc}
#if defined(MSC_READCTRL_MODE_WS2)
  else if (coreFreq > CMU_MAX_FREQ_1WS) {
    mode = (scbtpEn ? MSC_READCTRL_MODE_WS2SCBTP : MSC_READCTRL_MODE_WS2);
  }
#endif
  else if ((coreFreq <= CMU_MAX_FREQ_1WS) && (coreFreq > CMU_MAX_FREQ_0WS)) {
    3a4c:	4b54      	ldr	r3, [pc, #336]	; (3ba0 <CMU_ClockDivSet+0x2d8>)
    3a4e:	4a55      	ldr	r2, [pc, #340]	; (3ba4 <CMU_ClockDivSet+0x2dc>)
    3a50:	4403      	add	r3, r0
    mode = (scbtpEn ? MSC_READCTRL_MODE_WS1SCBTP : MSC_READCTRL_MODE_WS1);
    3a52:	4293      	cmp	r3, r2
    3a54:	bf8c      	ite	hi
    3a56:	2202      	movhi	r2, #2
    3a58:	2203      	movls	r2, #3
    3a5a:	e7eb      	b.n	3a34 <CMU_ClockDivSet+0x16c>
  /* - Enable HFLE wait-state if to allow access to LE peripherals when HFBUSCLK is
       above maxLeFreq.
     - Set HFLE prescaler. Allowed HFLE clock frequency is maxLeFreq. */

  hfleWs = 1;
  if (hfFreq <= CMU_MAX_FREQ_HFLE) {
    3a5c:	2000      	movs	r0, #0
    hfleWs = 0;
    3a5e:	4601      	mov	r1, r0
    3a60:	e7d2      	b.n	3a08 <CMU_ClockDivSet+0x140>
#if defined(MSC_READCTRL_MODE_WS2)
  else if (coreFreq > CMU_MAX_FREQ_1WS) {
    mode = (scbtpEn ? MSC_READCTRL_MODE_WS2SCBTP : MSC_READCTRL_MODE_WS2);
  }
#endif
  else if ((coreFreq <= CMU_MAX_FREQ_1WS) && (coreFreq > CMU_MAX_FREQ_0WS)) {
    3a62:	4b4f      	ldr	r3, [pc, #316]	; (3ba0 <CMU_ClockDivSet+0x2d8>)
    3a64:	4a4f      	ldr	r2, [pc, #316]	; (3ba4 <CMU_ClockDivSet+0x2dc>)
    3a66:	4403      	add	r3, r0
    mode = (scbtpEn ? MSC_READCTRL_MODE_WS1SCBTP : MSC_READCTRL_MODE_WS1);
    3a68:	4293      	cmp	r3, r2
    3a6a:	bf8c      	ite	hi
    3a6c:	2202      	movhi	r2, #2
    3a6e:	2203      	movls	r2, #3
    3a70:	e7b2      	b.n	39d8 <CMU_ClockDivSet+0x110>
#if defined(MSC_READCTRL_MODE_WS2)
  else if (coreFreq > CMU_MAX_FREQ_1WS) {
    mode = (scbtpEn ? MSC_READCTRL_MODE_WS2SCBTP : MSC_READCTRL_MODE_WS2);
  }
#endif
  else if ((coreFreq <= CMU_MAX_FREQ_1WS) && (coreFreq > CMU_MAX_FREQ_0WS)) {
    3a72:	4b4b      	ldr	r3, [pc, #300]	; (3ba0 <CMU_ClockDivSet+0x2d8>)
    3a74:	4a4b      	ldr	r2, [pc, #300]	; (3ba4 <CMU_ClockDivSet+0x2dc>)
    3a76:	4403      	add	r3, r0
    mode = (scbtpEn ? MSC_READCTRL_MODE_WS1SCBTP : MSC_READCTRL_MODE_WS1);
    3a78:	4293      	cmp	r3, r2
    3a7a:	bf8c      	ite	hi
    3a7c:	2202      	movhi	r2, #2
    3a7e:	2203      	movls	r2, #3
    3a80:	e75f      	b.n	3942 <CMU_ClockDivSet+0x7a>
 ******************************************************************************/
__STATIC_INLINE void syncReg(uint32_t mask)
{
  /* Avoid deadlock if modifying the same register twice when freeze mode is */
  /* activated. */
  if (CMU->FREEZE & CMU_FREEZE_REGFREEZE) {
    3a82:	4a43      	ldr	r2, [pc, #268]	; (3b90 <CMU_ClockDivSet+0x2c8>)
    3a84:	6d53      	ldr	r3, [r2, #84]	; 0x54
    3a86:	07d9      	lsls	r1, r3, #31
    3a88:	d50b      	bpl.n	3aa2 <CMU_ClockDivSet+0x1da>
    3a8a:	fab4 f484 	clz	r4, r4
          syncReg(CMU_SYNCBUSY_LFBPRESC0);

          /* Convert to correct scale */
          div = CMU_DivToLog2(div);

          CMU->LFBPRESC0 = (CMU->LFBPRESC0 & ~_CMU_LFBPRESC0_LEUART1_MASK)
    3a8e:	4a40      	ldr	r2, [pc, #256]	; (3b90 <CMU_ClockDivSet+0x2c8>)
    3a90:	6f13      	ldr	r3, [r2, #112]	; 0x70
    3a92:	f1c4 041f 	rsb	r4, r4, #31
    3a96:	f023 0330 	bic.w	r3, r3, #48	; 0x30
                           | (((uint32_t)div) << _CMU_LFBPRESC0_LEUART1_SHIFT);
    3a9a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
          syncReg(CMU_SYNCBUSY_LFBPRESC0);

          /* Convert to correct scale */
          div = CMU_DivToLog2(div);

          CMU->LFBPRESC0 = (CMU->LFBPRESC0 & ~_CMU_LFBPRESC0_LEUART1_MASK)
    3a9e:	6713      	str	r3, [r2, #112]	; 0x70
                           | (((uint32_t)div) << _CMU_LFBPRESC0_LEUART1_SHIFT);
          break;
    3aa0:	bd38      	pop	{r3, r4, r5, pc}
    return;
  }

  /* Wait for any pending previous write operation to have been completed */
  /* in low frequency domain */
  while (CMU->SYNCBUSY & mask) {
    3aa2:	6d13      	ldr	r3, [r2, #80]	; 0x50
    3aa4:	065b      	lsls	r3, r3, #25
    3aa6:	d5f0      	bpl.n	3a8a <CMU_ClockDivSet+0x1c2>
    3aa8:	6d13      	ldr	r3, [r2, #80]	; 0x50
    3aaa:	065b      	lsls	r3, r3, #25
    3aac:	d4f9      	bmi.n	3aa2 <CMU_ClockDivSet+0x1da>
    3aae:	e7ec      	b.n	3a8a <CMU_ClockDivSet+0x1c2>
 ******************************************************************************/
__STATIC_INLINE void syncReg(uint32_t mask)
{
  /* Avoid deadlock if modifying the same register twice when freeze mode is */
  /* activated. */
  if (CMU->FREEZE & CMU_FREEZE_REGFREEZE) {
    3ab0:	4a37      	ldr	r2, [pc, #220]	; (3b90 <CMU_ClockDivSet+0x2c8>)
    3ab2:	6d53      	ldr	r3, [r2, #84]	; 0x54
    3ab4:	07dd      	lsls	r5, r3, #31
    3ab6:	d50a      	bpl.n	3ace <CMU_ClockDivSet+0x206>
    3ab8:	fab4 f484 	clz	r4, r4
          syncReg(CMU_SYNCBUSY_LFBPRESC0);

          /* Convert to correct scale */
          div = CMU_DivToLog2(div);

          CMU->LFBPRESC0 = (CMU->LFBPRESC0 & ~_CMU_LFBPRESC0_LEUART0_MASK)
    3abc:	4a34      	ldr	r2, [pc, #208]	; (3b90 <CMU_ClockDivSet+0x2c8>)
    3abe:	6f13      	ldr	r3, [r2, #112]	; 0x70
    3ac0:	f1c4 041f 	rsb	r4, r4, #31
    3ac4:	f023 0303 	bic.w	r3, r3, #3
                           | (((uint32_t)div) << _CMU_LFBPRESC0_LEUART0_SHIFT);
    3ac8:	4323      	orrs	r3, r4
          syncReg(CMU_SYNCBUSY_LFBPRESC0);

          /* Convert to correct scale */
          div = CMU_DivToLog2(div);

          CMU->LFBPRESC0 = (CMU->LFBPRESC0 & ~_CMU_LFBPRESC0_LEUART0_MASK)
    3aca:	6713      	str	r3, [r2, #112]	; 0x70
                           | (((uint32_t)div) << _CMU_LFBPRESC0_LEUART0_SHIFT);
          break;
    3acc:	bd38      	pop	{r3, r4, r5, pc}
    return;
  }

  /* Wait for any pending previous write operation to have been completed */
  /* in low frequency domain */
  while (CMU->SYNCBUSY & mask) {
    3ace:	6d13      	ldr	r3, [r2, #80]	; 0x50
    3ad0:	0658      	lsls	r0, r3, #25
    3ad2:	d5f1      	bpl.n	3ab8 <CMU_ClockDivSet+0x1f0>
    3ad4:	6d13      	ldr	r3, [r2, #80]	; 0x50
    3ad6:	0658      	lsls	r0, r3, #25
    3ad8:	d4f9      	bmi.n	3ace <CMU_ClockDivSet+0x206>
    3ada:	e7ed      	b.n	3ab8 <CMU_ClockDivSet+0x1f0>
#if defined(MSC_READCTRL_MODE_WS2)
  else if (coreFreq > CMU_MAX_FREQ_1WS) {
    mode = (scbtpEn ? MSC_READCTRL_MODE_WS2SCBTP : MSC_READCTRL_MODE_WS2);
  }
#endif
  else if ((coreFreq <= CMU_MAX_FREQ_1WS) && (coreFreq > CMU_MAX_FREQ_0WS)) {
    3adc:	4b30      	ldr	r3, [pc, #192]	; (3ba0 <CMU_ClockDivSet+0x2d8>)
    3ade:	4a31      	ldr	r2, [pc, #196]	; (3ba4 <CMU_ClockDivSet+0x2dc>)
    3ae0:	4403      	add	r3, r0
    3ae2:	4293      	cmp	r3, r2
    3ae4:	bf8c      	ite	hi
    3ae6:	2200      	movhi	r2, #0
    3ae8:	2201      	movls	r2, #1
    3aea:	e7a3      	b.n	3a34 <CMU_ClockDivSet+0x16c>

  /* Set mode based on the core clock frequency and SCBTP enable */
  if (false) {
  }
#if defined(MSC_READCTRL_MODE_WS2)
  else if (coreFreq > CMU_MAX_FREQ_1WS) {
    3aec:	4b27      	ldr	r3, [pc, #156]	; (3b8c <CMU_ClockDivSet+0x2c4>)
    3aee:	4298      	cmp	r0, r3
    3af0:	d961      	bls.n	3bb6 <CMU_ClockDivSet+0x2ee>
    mode = (scbtpEn ? MSC_READCTRL_MODE_WS2SCBTP : MSC_READCTRL_MODE_WS2);
    3af2:	2204      	movs	r2, #4
    3af4:	e770      	b.n	39d8 <CMU_ClockDivSet+0x110>

  /* Set mode based on the core clock frequency and SCBTP enable */
  if (false) {
  }
#if defined(MSC_READCTRL_MODE_WS2)
  else if (coreFreq > CMU_MAX_FREQ_1WS) {
    3af6:	4b25      	ldr	r3, [pc, #148]	; (3b8c <CMU_ClockDivSet+0x2c4>)
    3af8:	4298      	cmp	r0, r3
    3afa:	d964      	bls.n	3bc6 <CMU_ClockDivSet+0x2fe>
    mode = (scbtpEn ? MSC_READCTRL_MODE_WS2SCBTP : MSC_READCTRL_MODE_WS2);
    3afc:	2204      	movs	r2, #4
    3afe:	e720      	b.n	3942 <CMU_ClockDivSet+0x7a>
 ******************************************************************************/
__STATIC_INLINE void syncReg(uint32_t mask)
{
  /* Avoid deadlock if modifying the same register twice when freeze mode is */
  /* activated. */
  if (CMU->FREEZE & CMU_FREEZE_REGFREEZE) {
    3b00:	4a23      	ldr	r2, [pc, #140]	; (3b90 <CMU_ClockDivSet+0x2c8>)
    3b02:	6d53      	ldr	r3, [r2, #84]	; 0x54
    3b04:	07d9      	lsls	r1, r3, #31
    3b06:	d50b      	bpl.n	3b20 <CMU_ClockDivSet+0x258>
    3b08:	fab4 f484 	clz	r4, r4
          syncReg(CMU_SYNCBUSY_LFAPRESC0);

          /* Convert to correct scale */
          div = CMU_DivToLog2(div);

          CMU->LFAPRESC0 = (CMU->LFAPRESC0 & ~_CMU_LFAPRESC0_RTC_MASK)
    3b0c:	4a20      	ldr	r2, [pc, #128]	; (3b90 <CMU_ClockDivSet+0x2c8>)
    3b0e:	6e93      	ldr	r3, [r2, #104]	; 0x68
    3b10:	f1c4 041f 	rsb	r4, r4, #31
    3b14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
                           | (div << _CMU_LFAPRESC0_RTC_SHIFT);
    3b18:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
          syncReg(CMU_SYNCBUSY_LFAPRESC0);

          /* Convert to correct scale */
          div = CMU_DivToLog2(div);

          CMU->LFAPRESC0 = (CMU->LFAPRESC0 & ~_CMU_LFAPRESC0_RTC_MASK)
    3b1c:	6693      	str	r3, [r2, #104]	; 0x68
                           | (div << _CMU_LFAPRESC0_RTC_SHIFT);
          break;
    3b1e:	bd38      	pop	{r3, r4, r5, pc}
    return;
  }

  /* Wait for any pending previous write operation to have been completed */
  /* in low frequency domain */
  while (CMU->SYNCBUSY & mask) {
    3b20:	6d13      	ldr	r3, [r2, #80]	; 0x50
    3b22:	075b      	lsls	r3, r3, #29
    3b24:	d5f0      	bpl.n	3b08 <CMU_ClockDivSet+0x240>
    3b26:	6d13      	ldr	r3, [r2, #80]	; 0x50
    3b28:	075b      	lsls	r3, r3, #29
    3b2a:	d4f9      	bmi.n	3b20 <CMU_ClockDivSet+0x258>
    3b2c:	e7ec      	b.n	3b08 <CMU_ClockDivSet+0x240>
 ******************************************************************************/
__STATIC_INLINE void syncReg(uint32_t mask)
{
  /* Avoid deadlock if modifying the same register twice when freeze mode is */
  /* activated. */
  if (CMU->FREEZE & CMU_FREEZE_REGFREEZE) {
    3b2e:	4a18      	ldr	r2, [pc, #96]	; (3b90 <CMU_ClockDivSet+0x2c8>)
    3b30:	6d53      	ldr	r3, [r2, #84]	; 0x54
    3b32:	07d9      	lsls	r1, r3, #31
    3b34:	d50a      	bpl.n	3b4c <CMU_ClockDivSet+0x284>
    3b36:	fab4 f484 	clz	r4, r4
          syncReg(CMU_SYNCBUSY_LFAPRESC0);

          /* Convert to correct scale */
          div = CMU_DivToLog2(div);

          CMU->LFAPRESC0 = (CMU->LFAPRESC0 & ~_CMU_LFAPRESC0_LESENSE_MASK)
    3b3a:	4a15      	ldr	r2, [pc, #84]	; (3b90 <CMU_ClockDivSet+0x2c8>)
    3b3c:	6e93      	ldr	r3, [r2, #104]	; 0x68
    3b3e:	f1c4 041f 	rsb	r4, r4, #31
    3b42:	f023 0303 	bic.w	r3, r3, #3
                           | (div << _CMU_LFAPRESC0_LESENSE_SHIFT);
    3b46:	4323      	orrs	r3, r4
          syncReg(CMU_SYNCBUSY_LFAPRESC0);

          /* Convert to correct scale */
          div = CMU_DivToLog2(div);

          CMU->LFAPRESC0 = (CMU->LFAPRESC0 & ~_CMU_LFAPRESC0_LESENSE_MASK)
    3b48:	6693      	str	r3, [r2, #104]	; 0x68
                           | (div << _CMU_LFAPRESC0_LESENSE_SHIFT);
          break;
    3b4a:	bd38      	pop	{r3, r4, r5, pc}
    return;
  }

  /* Wait for any pending previous write operation to have been completed */
  /* in low frequency domain */
  while (CMU->SYNCBUSY & mask) {
    3b4c:	6d13      	ldr	r3, [r2, #80]	; 0x50
    3b4e:	075b      	lsls	r3, r3, #29
    3b50:	d5f1      	bpl.n	3b36 <CMU_ClockDivSet+0x26e>
    3b52:	6d13      	ldr	r3, [r2, #80]	; 0x50
    3b54:	075b      	lsls	r3, r3, #29
    3b56:	d4f9      	bmi.n	3b4c <CMU_ClockDivSet+0x284>
    3b58:	e7ed      	b.n	3b36 <CMU_ClockDivSet+0x26e>
 ******************************************************************************/
__STATIC_INLINE void syncReg(uint32_t mask)
{
  /* Avoid deadlock if modifying the same register twice when freeze mode is */
  /* activated. */
  if (CMU->FREEZE & CMU_FREEZE_REGFREEZE) {
    3b5a:	4a0d      	ldr	r2, [pc, #52]	; (3b90 <CMU_ClockDivSet+0x2c8>)
    3b5c:	6d53      	ldr	r3, [r2, #84]	; 0x54
    3b5e:	07dd      	lsls	r5, r3, #31
    3b60:	d522      	bpl.n	3ba8 <CMU_ClockDivSet+0x2e0>
    3b62:	fab4 f484 	clz	r4, r4
          syncReg(CMU_SYNCBUSY_LFAPRESC0);

          /* Convert to correct scale */
          div = CMU_DivToLog2(div);

          CMU->LFAPRESC0 = (CMU->LFAPRESC0 & ~_CMU_LFAPRESC0_LETIMER0_MASK)
    3b66:	4a0a      	ldr	r2, [pc, #40]	; (3b90 <CMU_ClockDivSet+0x2c8>)
    3b68:	6e93      	ldr	r3, [r2, #104]	; 0x68
    3b6a:	f1c4 041f 	rsb	r4, r4, #31
    3b6e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
                           | (div << _CMU_LFAPRESC0_LETIMER0_SHIFT);
    3b72:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
          syncReg(CMU_SYNCBUSY_LFAPRESC0);

          /* Convert to correct scale */
          div = CMU_DivToLog2(div);

          CMU->LFAPRESC0 = (CMU->LFAPRESC0 & ~_CMU_LFAPRESC0_LETIMER0_MASK)
    3b76:	6693      	str	r3, [r2, #104]	; 0x68
                           | (div << _CMU_LFAPRESC0_LETIMER0_SHIFT);
          break;
    3b78:	bd38      	pop	{r3, r4, r5, pc}
    3b7a:	bf00      	nop
    3b7c:	00142660 	.word	0x00142660
    3b80:	00101660 	.word	0x00101660
    3b84:	00160770 	.word	0x00160770
    3b88:	400c0000 	.word	0x400c0000
    3b8c:	01e84800 	.word	0x01e84800
    3b90:	400c8000 	.word	0x400c8000
    3b94:	016e3600 	.word	0x016e3600
    3b98:	02dc6c00 	.word	0x02dc6c00
    3b9c:	43900078 	.word	0x43900078
    3ba0:	ff0bdbff 	.word	0xff0bdbff
    3ba4:	00f423ff 	.word	0x00f423ff
    return;
  }

  /* Wait for any pending previous write operation to have been completed */
  /* in low frequency domain */
  while (CMU->SYNCBUSY & mask) {
    3ba8:	6d13      	ldr	r3, [r2, #80]	; 0x50
    3baa:	0758      	lsls	r0, r3, #29
    3bac:	d5d9      	bpl.n	3b62 <CMU_ClockDivSet+0x29a>
    3bae:	6d13      	ldr	r3, [r2, #80]	; 0x50
    3bb0:	0758      	lsls	r0, r3, #29
    3bb2:	d4f9      	bmi.n	3ba8 <CMU_ClockDivSet+0x2e0>
    3bb4:	e7d5      	b.n	3b62 <CMU_ClockDivSet+0x29a>
#if defined(MSC_READCTRL_MODE_WS2)
  else if (coreFreq > CMU_MAX_FREQ_1WS) {
    mode = (scbtpEn ? MSC_READCTRL_MODE_WS2SCBTP : MSC_READCTRL_MODE_WS2);
  }
#endif
  else if ((coreFreq <= CMU_MAX_FREQ_1WS) && (coreFreq > CMU_MAX_FREQ_0WS)) {
    3bb6:	4b08      	ldr	r3, [pc, #32]	; (3bd8 <CMU_ClockDivSet+0x310>)
    3bb8:	4a08      	ldr	r2, [pc, #32]	; (3bdc <CMU_ClockDivSet+0x314>)
    3bba:	4403      	add	r3, r0
    3bbc:	4293      	cmp	r3, r2
    3bbe:	bf8c      	ite	hi
    3bc0:	2200      	movhi	r2, #0
    3bc2:	2201      	movls	r2, #1
    3bc4:	e708      	b.n	39d8 <CMU_ClockDivSet+0x110>
    3bc6:	4b04      	ldr	r3, [pc, #16]	; (3bd8 <CMU_ClockDivSet+0x310>)
    3bc8:	4a04      	ldr	r2, [pc, #16]	; (3bdc <CMU_ClockDivSet+0x314>)
    3bca:	4403      	add	r3, r0
    3bcc:	4293      	cmp	r3, r2
    3bce:	bf8c      	ite	hi
    3bd0:	2200      	movhi	r2, #0
    3bd2:	2201      	movls	r2, #1
    3bd4:	e6b5      	b.n	3942 <CMU_ClockDivSet+0x7a>
    3bd6:	bf00      	nop
    3bd8:	ff0bdbff 	.word	0xff0bdbff
    3bdc:	00f423ff 	.word	0x00f423ff

00003be0 <CMU_ClockSelectGet>:
CMU_Select_TypeDef CMU_ClockSelectGet(CMU_Clock_TypeDef clock)
{
  CMU_Select_TypeDef ret = cmuSelect_Disabled;
  uint32_t selReg;

  selReg = (clock >> CMU_SEL_REG_POS) & CMU_SEL_REG_MASK;
    3be0:	f000 000f 	and.w	r0, r0, #15

  switch (selReg) {
    3be4:	3801      	subs	r0, #1
    3be6:	2806      	cmp	r0, #6
    3be8:	d852      	bhi.n	3c90 <CMU_ClockSelectGet+0xb0>
    3bea:	e8df f000 	tbb	[pc, r0]
    3bee:	2414      	.short	0x2414
    3bf0:	46515135 	.word	0x46515135
    3bf4:	04          	.byte	0x04
    3bf5:	00          	.byte	0x00
#endif
      break;

#if defined(USBC_CLOCK_PRESENT)
    case CMU_USBCCLKSEL_REG:
      switch (CMU->STATUS
    3bf6:	4b2b      	ldr	r3, [pc, #172]	; (3ca4 <CMU_ClockSelectGet+0xc4>)
    3bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              & (CMU_STATUS_USBCLFXOSEL
    3bfa:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
#endif
      break;

#if defined(USBC_CLOCK_PRESENT)
    case CMU_USBCCLKSEL_REG:
      switch (CMU->STATUS
    3bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    3c02:	d049      	beq.n	3c98 <CMU_ClockSelectGet+0xb8>
    3c04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    3c08:	d044      	beq.n	3c94 <CMU_ClockSelectGet+0xb4>
    3c0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
        case CMU_STATUS_USBCLFRCOSEL:
          ret = cmuSelect_LFRCO;
          break;

        default:
          ret = cmuSelect_Disabled;
    3c0e:	bf0c      	ite	eq
    3c10:	2009      	moveq	r0, #9
    3c12:	2001      	movne	r0, #1
    3c14:	4770      	bx	lr
        default:
          ret = cmuSelect_HFRCO;
          break;
      }
#else
      switch (CMU->STATUS
    3c16:	4b23      	ldr	r3, [pc, #140]	; (3ca4 <CMU_ClockSelectGet+0xc4>)
    3c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              & (CMU_STATUS_HFRCOSEL
    3c1a:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
        default:
          ret = cmuSelect_HFRCO;
          break;
      }
#else
      switch (CMU->STATUS
    3c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    3c22:	d037      	beq.n	3c94 <CMU_ClockSelectGet+0xb4>
    3c24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    3c28:	d036      	beq.n	3c98 <CMU_ClockSelectGet+0xb8>
    3c2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
          ret = cmuSelect_USHFRCODIV2;
          break;
#endif

        default:
          ret = cmuSelect_HFRCO;
    3c2e:	bf0c      	ite	eq
    3c30:	2004      	moveq	r0, #4
    3c32:	2005      	movne	r0, #5
    3c34:	4770      	bx	lr
      break;

#if defined(_CMU_LFCLKSEL_MASK) || defined(_CMU_LFACLKSEL_MASK)
    case CMU_LFACLKSEL_REG:
#if defined(_CMU_LFCLKSEL_MASK)
      switch (CMU->LFCLKSEL & _CMU_LFCLKSEL_LFA_MASK) {
    3c36:	4b1b      	ldr	r3, [pc, #108]	; (3ca4 <CMU_ClockSelectGet+0xc4>)
    3c38:	6a98      	ldr	r0, [r3, #40]	; 0x28
    3c3a:	f000 0003 	and.w	r0, r0, #3
    3c3e:	2802      	cmp	r0, #2
    3c40:	d029      	beq.n	3c96 <CMU_ClockSelectGet+0xb6>
    3c42:	2803      	cmp	r0, #3
    3c44:	d02a      	beq.n	3c9c <CMU_ClockSelectGet+0xbc>
    3c46:	2801      	cmp	r0, #1
    3c48:	d024      	beq.n	3c94 <CMU_ClockSelectGet+0xb4>
          break;
#endif

        default:
#if defined(CMU_LFCLKSEL_LFAE)
          if (CMU->LFCLKSEL & _CMU_LFCLKSEL_LFAE_MASK) {
    3c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3c4c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
            ret = cmuSelect_ULFRCO;
    3c50:	bf0c      	ite	eq
    3c52:	2001      	moveq	r0, #1
    3c54:	200a      	movne	r0, #10
    3c56:	4770      	bx	lr
#endif /* _CMU_LFCLKSEL_MASK || _CMU_LFACLKSEL_MASK */

#if defined(_CMU_LFCLKSEL_MASK) || defined(_CMU_LFBCLKSEL_MASK)
    case CMU_LFBCLKSEL_REG:
#if defined(_CMU_LFCLKSEL_MASK)
      switch (CMU->LFCLKSEL & _CMU_LFCLKSEL_LFB_MASK) {
    3c58:	4a12      	ldr	r2, [pc, #72]	; (3ca4 <CMU_ClockSelectGet+0xc4>)
    3c5a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3c5c:	f003 030c 	and.w	r3, r3, #12
    3c60:	2b08      	cmp	r3, #8
    3c62:	d019      	beq.n	3c98 <CMU_ClockSelectGet+0xb8>
    3c64:	2b0c      	cmp	r3, #12
    3c66:	d019      	beq.n	3c9c <CMU_ClockSelectGet+0xbc>
    3c68:	2b04      	cmp	r3, #4
    3c6a:	d013      	beq.n	3c94 <CMU_ClockSelectGet+0xb4>
          break;
#endif

        default:
#if defined(CMU_LFCLKSEL_LFBE)
          if (CMU->LFCLKSEL & _CMU_LFCLKSEL_LFBE_MASK) {
    3c6c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3c6e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
#endif

        default:
#if defined(CMU_LFCLKSEL_LFAE)
          if (CMU->LFCLKSEL & _CMU_LFCLKSEL_LFAE_MASK) {
            ret = cmuSelect_ULFRCO;
    3c72:	bf0c      	ite	eq
    3c74:	2001      	moveq	r0, #1
    3c76:	200a      	movne	r0, #10
    3c78:	4770      	bx	lr
          ret = cmuSelect_AUXHFRCO;
          break;
      }

#elif defined(_CMU_CTRL_DBGCLK_MASK)
      switch (CMU->CTRL & _CMU_CTRL_DBGCLK_MASK) {
    3c7a:	4b0a      	ldr	r3, [pc, #40]	; (3ca4 <CMU_ClockSelectGet+0xc4>)
    3c7c:	681b      	ldr	r3, [r3, #0]
    3c7e:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
    3c82:	d00d      	beq.n	3ca0 <CMU_ClockSelectGet+0xc0>
    3c84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 *   Reference clock used for clocking selected branch, #cmuSelect_Error if
 *   invalid @p clock provided.
 ******************************************************************************/
CMU_Select_TypeDef CMU_ClockSelectGet(CMU_Clock_TypeDef clock)
{
  CMU_Select_TypeDef ret = cmuSelect_Disabled;
    3c88:	bf0c      	ite	eq
    3c8a:	2009      	moveq	r0, #9
    3c8c:	2001      	movne	r0, #1
    3c8e:	4770      	bx	lr
      break;
#endif

    default:
      EFM_ASSERT(0);
      ret = cmuSelect_Error;
    3c90:	2000      	movs	r0, #0
    3c92:	4770      	bx	lr
#if defined(_CMU_LFCLKSEL_MASK) || defined(_CMU_LFBCLKSEL_MASK)
    case CMU_LFBCLKSEL_REG:
#if defined(_CMU_LFCLKSEL_MASK)
      switch (CMU->LFCLKSEL & _CMU_LFCLKSEL_LFB_MASK) {
        case CMU_LFCLKSEL_LFB_LFRCO:
          ret = cmuSelect_LFRCO;
    3c94:	2003      	movs	r0, #3
      ret = cmuSelect_Error;
      break;
  }

  return ret;
}
    3c96:	4770      	bx	lr
#if defined(CMU_STATUS_USHFRCODIV2SEL)
                 | CMU_STATUS_USHFRCODIV2SEL
#endif
                 | CMU_STATUS_LFXOSEL)) {
        case CMU_STATUS_LFXOSEL:
          ret = cmuSelect_LFXO;
    3c98:	2002      	movs	r0, #2
    3c9a:	4770      	bx	lr
          ret = cmuSelect_LFXO;
          break;

#if defined(CMU_LFCLKSEL_LFB_HFCORECLKLEDIV2)
        case CMU_LFCLKSEL_LFB_HFCORECLKLEDIV2:
          ret = cmuSelect_HFCLKLE;
    3c9c:	2006      	movs	r0, #6
          break;
    3c9e:	4770      	bx	lr
      }

#elif defined(_CMU_CTRL_DBGCLK_MASK)
      switch (CMU->CTRL & _CMU_CTRL_DBGCLK_MASK) {
        case CMU_CTRL_DBGCLK_AUXHFRCO:
          ret = cmuSelect_AUXHFRCO;
    3ca0:	2007      	movs	r0, #7
    3ca2:	4770      	bx	lr
    3ca4:	400c8000 	.word	0x400c8000

00003ca8 <CMU_ClockFreqGet>:
 ******************************************************************************/
uint32_t CMU_ClockFreqGet(CMU_Clock_TypeDef clock)
{
  uint32_t ret;

  switch (clock & (CMU_CLK_BRANCH_MASK << CMU_CLK_BRANCH_POS)) {
    3ca8:	f400 1078 	and.w	r0, r0, #4063232	; 0x3e0000
    3cac:	f5b0 1fa0 	cmp.w	r0, #1310720	; 0x140000
 *
 * @return
 *   The current frequency in Hz.
 ******************************************************************************/
uint32_t CMU_ClockFreqGet(CMU_Clock_TypeDef clock)
{
    3cb0:	b508      	push	{r3, lr}
  uint32_t ret;

  switch (clock & (CMU_CLK_BRANCH_MASK << CMU_CLK_BRANCH_POS)) {
    3cb2:	f000 8093 	beq.w	3ddc <CMU_ClockFreqGet+0x134>
    3cb6:	d90e      	bls.n	3cd6 <CMU_ClockFreqGet+0x2e>
    3cb8:	f5b0 1fd0 	cmp.w	r0, #1703936	; 0x1a0000
    3cbc:	d066      	beq.n	3d8c <CMU_ClockFreqGet+0xe4>
    3cbe:	d956      	bls.n	3d6e <CMU_ClockFreqGet+0xc6>
    3cc0:	f5b0 1f08 	cmp.w	r0, #2228224	; 0x220000
    3cc4:	d038      	beq.n	3d38 <CMU_ClockFreqGet+0x90>
    3cc6:	f5b0 1f28 	cmp.w	r0, #2752512	; 0x2a0000
    3cca:	d076      	beq.n	3dba <CMU_ClockFreqGet+0x112>
    3ccc:	f5b0 1fe0 	cmp.w	r0, #1835008	; 0x1c0000
    3cd0:	d03f      	beq.n	3d52 <CMU_ClockFreqGet+0xaa>
    case cmuSelect_HFCLK:
      ret = SystemHFClockGet();
      break;
    default:
      /* Clock is not enabled */
      ret = 0;
    3cd2:	2000      	movs	r0, #0
      ret = 0;
      break;
  }

  return ret;
}
    3cd4:	bd08      	pop	{r3, pc}
 ******************************************************************************/
uint32_t CMU_ClockFreqGet(CMU_Clock_TypeDef clock)
{
  uint32_t ret;

  switch (clock & (CMU_CLK_BRANCH_MASK << CMU_CLK_BRANCH_POS)) {
    3cd6:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
    3cda:	d077      	beq.n	3dcc <CMU_ClockFreqGet+0x124>
    3cdc:	d93e      	bls.n	3d5c <CMU_ClockFreqGet+0xb4>
    3cde:	f5b0 2f60 	cmp.w	r0, #917504	; 0xe0000
    3ce2:	d010      	beq.n	3d06 <CMU_ClockFreqGet+0x5e>
    3ce4:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
    3ce8:	d05e      	beq.n	3da8 <CMU_ClockFreqGet+0x100>
    3cea:	f5b0 2f40 	cmp.w	r0, #786432	; 0xc0000
    3cee:	d1f0      	bne.n	3cd2 <CMU_ClockFreqGet+0x2a>
{
  uint32_t ret;
  CMU_Select_TypeDef clk;

  /* Get selected clock source */
  clk = CMU_ClockSelectGet(cmuClock_DBG);
    3cf0:	484b      	ldr	r0, [pc, #300]	; (3e20 <CMU_ClockFreqGet+0x178>)
    3cf2:	f7ff ff75 	bl	3be0 <CMU_ClockSelectGet>

  switch (clk) {
    3cf6:	2807      	cmp	r0, #7
    3cf8:	d005      	beq.n	3d06 <CMU_ClockFreqGet+0x5e>
    3cfa:	2809      	cmp	r0, #9
    3cfc:	d1e9      	bne.n	3cd2 <CMU_ClockFreqGet+0x2a>
      ret = 0;
      break;
  }

  return ret;
}
    3cfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    case cmuSelect_USHFRCO:
      ret = ushfrcoFreq;
      break;
#endif
    case cmuSelect_HFCLK:
      ret = SystemHFClockGet();
    3d02:	f001 bf83 	b.w	5c0c <SystemHFClockGet>
#if defined(_CMU_AUXHFRCOCTRL_FREQRANGE_MASK)
  ret = auxHfrcoFreq;

#elif defined(_CMU_AUXHFRCOCTRL_BAND_MASK)
  /* All series 0 families except EFM32G */
  switch (CMU->AUXHFRCOCTRL & _CMU_AUXHFRCOCTRL_BAND_MASK) {
    3d06:	4b47      	ldr	r3, [pc, #284]	; (3e24 <CMU_ClockFreqGet+0x17c>)
    3d08:	695b      	ldr	r3, [r3, #20]
    3d0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    3d0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3d12:	d07b      	beq.n	3e0c <CMU_ClockFreqGet+0x164>
    3d14:	d96b      	bls.n	3dee <CMU_ClockFreqGet+0x146>
    3d16:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    3d1a:	d075      	beq.n	3e08 <CMU_ClockFreqGet+0x160>
    3d1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    3d20:	d070      	beq.n	3e04 <CMU_ClockFreqGet+0x15c>
    3d22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    3d26:	d1d4      	bne.n	3cd2 <CMU_ClockFreqGet+0x2a>
 * @return
 *   Production revision for this part.
 ******************************************************************************/
__STATIC_INLINE uint8_t SYSTEM_GetProdRev(void)
{
  return (DEVINFO->PART & _DEVINFO_PART_PROD_REV_MASK)
    3d28:	4b3f      	ldr	r3, [pc, #252]	; (3e28 <CMU_ClockFreqGet+0x180>)
    3d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    case CMU_AUXHFRCOCTRL_BAND_1MHZ:
      if ( SYSTEM_GetProdRev() >= 19 ) {
    3d2c:	f1b3 5f98 	cmp.w	r3, #318767104	; 0x13000000
        ret = 1200000;
    3d30:	bf2c      	ite	cs
    3d32:	483e      	ldrcs	r0, [pc, #248]	; (3e2c <CMU_ClockFreqGet+0x184>)
      } else {
        ret = 1000000;
    3d34:	483e      	ldrcc	r0, [pc, #248]	; (3e30 <CMU_ClockFreqGet+0x188>)
    3d36:	bd08      	pop	{r3, pc}
{
  uint32_t ret;
  CMU_Select_TypeDef clk;

  /* Get selected clock source */
  clk = CMU_ClockSelectGet(cmuClock_USBC);
    3d38:	483e      	ldr	r0, [pc, #248]	; (3e34 <CMU_ClockFreqGet+0x18c>)
    3d3a:	f7ff ff51 	bl	3be0 <CMU_ClockSelectGet>

  switch (clk) {
    3d3e:	2803      	cmp	r0, #3
    3d40:	d05c      	beq.n	3dfc <CMU_ClockFreqGet+0x154>
    3d42:	2809      	cmp	r0, #9
    3d44:	d0db      	beq.n	3cfe <CMU_ClockFreqGet+0x56>
    3d46:	2802      	cmp	r0, #2
    3d48:	d1c3      	bne.n	3cd2 <CMU_ClockFreqGet+0x2a>
      ret = 0;
      break;
  }

  return ret;
}
    3d4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* Get selected clock source */
  clk = CMU_ClockSelectGet(cmuClock_USBC);

  switch (clk) {
    case cmuSelect_LFXO:
      ret = SystemLFXOClockGet();
    3d4e:	f001 bfdd 	b.w	5d0c <SystemLFXOClockGet>
              >> _CMU_LFAPRESC0_LESENSE_SHIFT;
      break;
#endif

    case (CMU_LFB_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = lfClkGet(cmuClock_LFB);
    3d52:	4839      	ldr	r0, [pc, #228]	; (3e38 <CMU_ClockFreqGet+0x190>)
      ret = 0;
      break;
  }

  return ret;
}
    3d54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
              >> _CMU_LFAPRESC0_LESENSE_SHIFT;
      break;
#endif

    case (CMU_LFB_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = lfClkGet(cmuClock_LFB);
    3d58:	f7ff bd14 	b.w	3784 <lfClkGet>
 ******************************************************************************/
uint32_t CMU_ClockFreqGet(CMU_Clock_TypeDef clock)
{
  uint32_t ret;

  switch (clock & (CMU_CLK_BRANCH_MASK << CMU_CLK_BRANCH_POS)) {
    3d5c:	2800      	cmp	r0, #0
    3d5e:	d0ce      	beq.n	3cfe <CMU_ClockFreqGet+0x56>
    3d60:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
    3d64:	d1b5      	bne.n	3cd2 <CMU_ClockFreqGet+0x2a>
      ret = 0;
      break;
  }

  return ret;
}
    3d66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      || defined(DMA_PRESENT) \
      || defined(EBI_PRESENT) \
      || defined(USB_PRESENT)
    case (CMU_HFCORE_CLK_BRANCH << CMU_CLK_BRANCH_POS):
    {
      ret = SystemCoreClockGet();
    3d6a:	f001 bedd 	b.w	5b28 <SystemCoreClockGet>
 ******************************************************************************/
uint32_t CMU_ClockFreqGet(CMU_Clock_TypeDef clock)
{
  uint32_t ret;

  switch (clock & (CMU_CLK_BRANCH_MASK << CMU_CLK_BRANCH_POS)) {
    3d6e:	f5b0 1fb0 	cmp.w	r0, #1441792	; 0x160000
    3d72:	d010      	beq.n	3d96 <CMU_ClockFreqGet+0xee>
    3d74:	f5b0 1fc0 	cmp.w	r0, #1572864	; 0x180000
    3d78:	d1ab      	bne.n	3cd2 <CMU_ClockFreqGet+0x2a>
      break;
#endif

#if defined(_CMU_LFBCLKEN0_LEUART1_MASK)
    case (CMU_LEUART1_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = lfClkGet(cmuClock_LFB);
    3d7a:	482f      	ldr	r0, [pc, #188]	; (3e38 <CMU_ClockFreqGet+0x190>)
    3d7c:	f7ff fd02 	bl	3784 <lfClkGet>
#if defined(_SILICON_LABS_32B_SERIES_0)
      ret >>= (CMU->LFBPRESC0 & _CMU_LFBPRESC0_LEUART1_MASK)
    3d80:	4b28      	ldr	r3, [pc, #160]	; (3e24 <CMU_ClockFreqGet+0x17c>)
    3d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
              >> _CMU_LFBPRESC0_LEUART1_SHIFT;
    3d84:	f3c3 1301 	ubfx	r3, r3, #4, #2

#if defined(_CMU_LFBCLKEN0_LEUART1_MASK)
    case (CMU_LEUART1_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = lfClkGet(cmuClock_LFB);
#if defined(_SILICON_LABS_32B_SERIES_0)
      ret >>= (CMU->LFBPRESC0 & _CMU_LFBPRESC0_LEUART1_MASK)
    3d88:	40d8      	lsrs	r0, r3
              >> _CMU_LFBPRESC0_LEUART1_SHIFT;
#else
      ret /= CMU_Log2ToDiv((CMU->LFBPRESC0 & _CMU_LFBPRESC0_LEUART1_MASK)
                           >> _CMU_LFBPRESC0_LEUART1_SHIFT);
#endif
      break;
    3d8a:	bd08      	pop	{r3, pc}
    } break;
#endif
#endif

    case (CMU_LFA_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = lfClkGet(cmuClock_LFA);
    3d8c:	482b      	ldr	r0, [pc, #172]	; (3e3c <CMU_ClockFreqGet+0x194>)
      ret = 0;
      break;
  }

  return ret;
}
    3d8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    } break;
#endif
#endif

    case (CMU_LFA_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = lfClkGet(cmuClock_LFA);
    3d92:	f7ff bcf7 	b.w	3784 <lfClkGet>
      ret = lfClkGet(cmuClock_LFB);
      break;

#if defined(_CMU_LFBCLKEN0_LEUART0_MASK)
    case (CMU_LEUART0_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = lfClkGet(cmuClock_LFB);
    3d96:	4828      	ldr	r0, [pc, #160]	; (3e38 <CMU_ClockFreqGet+0x190>)
    3d98:	f7ff fcf4 	bl	3784 <lfClkGet>
#if defined(_SILICON_LABS_32B_SERIES_0)
      ret >>= (CMU->LFBPRESC0 & _CMU_LFBPRESC0_LEUART0_MASK)
    3d9c:	4b21      	ldr	r3, [pc, #132]	; (3e24 <CMU_ClockFreqGet+0x17c>)
    3d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
              >> _CMU_LFBPRESC0_LEUART0_SHIFT;
    3da0:	f003 0303 	and.w	r3, r3, #3

#if defined(_CMU_LFBCLKEN0_LEUART0_MASK)
    case (CMU_LEUART0_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = lfClkGet(cmuClock_LFB);
#if defined(_SILICON_LABS_32B_SERIES_0)
      ret >>= (CMU->LFBPRESC0 & _CMU_LFBPRESC0_LEUART0_MASK)
    3da4:	40d8      	lsrs	r0, r3
              >> _CMU_LFBPRESC0_LEUART0_SHIFT;
#else
      ret /= CMU_Log2ToDiv((CMU->LFBPRESC0 & _CMU_LFBPRESC0_LEUART0_MASK)
                           >> _CMU_LFBPRESC0_LEUART0_SHIFT);
#endif
      break;
    3da6:	bd08      	pop	{r3, pc}
      ret = lfClkGet(cmuClock_LFA);
      break;

#if defined(_CMU_LFACLKEN0_RTC_MASK)
    case (CMU_RTC_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = lfClkGet(cmuClock_LFA);
    3da8:	4824      	ldr	r0, [pc, #144]	; (3e3c <CMU_ClockFreqGet+0x194>)
    3daa:	f7ff fceb 	bl	3784 <lfClkGet>
      ret >>= (CMU->LFAPRESC0 & _CMU_LFAPRESC0_RTC_MASK)
    3dae:	4b1d      	ldr	r3, [pc, #116]	; (3e24 <CMU_ClockFreqGet+0x17c>)
    3db0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
              >> _CMU_LFAPRESC0_RTC_SHIFT;
    3db2:	f3c3 1303 	ubfx	r3, r3, #4, #4
      break;

#if defined(_CMU_LFACLKEN0_RTC_MASK)
    case (CMU_RTC_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = lfClkGet(cmuClock_LFA);
      ret >>= (CMU->LFAPRESC0 & _CMU_LFAPRESC0_RTC_MASK)
    3db6:	40d8      	lsrs	r0, r3
              >> _CMU_LFAPRESC0_RTC_SHIFT;
      break;
    3db8:	bd08      	pop	{r3, pc}
#endif
#endif

#if defined(_CMU_LFACLKEN0_LESENSE_MASK)
    case (CMU_LESENSE_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = lfClkGet(cmuClock_LFA);
    3dba:	4820      	ldr	r0, [pc, #128]	; (3e3c <CMU_ClockFreqGet+0x194>)
    3dbc:	f7ff fce2 	bl	3784 <lfClkGet>
      ret >>= (CMU->LFAPRESC0 & _CMU_LFAPRESC0_LESENSE_MASK)
    3dc0:	4b18      	ldr	r3, [pc, #96]	; (3e24 <CMU_ClockFreqGet+0x17c>)
    3dc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
              >> _CMU_LFAPRESC0_LESENSE_SHIFT;
    3dc4:	f003 0303 	and.w	r3, r3, #3
#endif

#if defined(_CMU_LFACLKEN0_LESENSE_MASK)
    case (CMU_LESENSE_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = lfClkGet(cmuClock_LFA);
      ret >>= (CMU->LFAPRESC0 & _CMU_LFAPRESC0_LESENSE_MASK)
    3dc8:	40d8      	lsrs	r0, r3
              >> _CMU_LFAPRESC0_LESENSE_SHIFT;
      break;
    3dca:	bd08      	pop	{r3, pc}
    case (CMU_HF_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = SystemHFClockGet();
      break;

    case (CMU_HFPER_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = SystemHFClockGet();
    3dcc:	f001 ff1e 	bl	5c0c <SystemHFClockGet>
      /* Calculate frequency after HFPER divider. */
#if defined(_CMU_HFPERCLKDIV_HFPERCLKDIV_MASK)
      ret >>= (CMU->HFPERCLKDIV & _CMU_HFPERCLKDIV_HFPERCLKDIV_MASK)
    3dd0:	4b14      	ldr	r3, [pc, #80]	; (3e24 <CMU_ClockFreqGet+0x17c>)
    3dd2:	689b      	ldr	r3, [r3, #8]
              >> _CMU_HFPERCLKDIV_HFPERCLKDIV_SHIFT;
    3dd4:	f003 030f 	and.w	r3, r3, #15

    case (CMU_HFPER_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = SystemHFClockGet();
      /* Calculate frequency after HFPER divider. */
#if defined(_CMU_HFPERCLKDIV_HFPERCLKDIV_MASK)
      ret >>= (CMU->HFPERCLKDIV & _CMU_HFPERCLKDIV_HFPERCLKDIV_MASK)
    3dd8:	40d8      	lsrs	r0, r3
#endif
#if defined(_CMU_HFPERPRESC_PRESC_MASK)
      ret /= 1U + ((CMU->HFPERPRESC & _CMU_HFPERPRESC_PRESC_MASK)
                   >> _CMU_HFPERPRESC_PRESC_SHIFT);
#endif
      break;
    3dda:	bd08      	pop	{r3, pc}
      break;
#endif

#if defined(_CMU_LFACLKEN0_LETIMER0_MASK)
    case (CMU_LETIMER0_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = lfClkGet(cmuClock_LFA);
    3ddc:	4817      	ldr	r0, [pc, #92]	; (3e3c <CMU_ClockFreqGet+0x194>)
    3dde:	f7ff fcd1 	bl	3784 <lfClkGet>
#if defined(_SILICON_LABS_32B_SERIES_0)
      ret >>= (CMU->LFAPRESC0 & _CMU_LFAPRESC0_LETIMER0_MASK)
    3de2:	4b10      	ldr	r3, [pc, #64]	; (3e24 <CMU_ClockFreqGet+0x17c>)
    3de4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
              >> _CMU_LFAPRESC0_LETIMER0_SHIFT;
    3de6:	f3c3 2303 	ubfx	r3, r3, #8, #4

#if defined(_CMU_LFACLKEN0_LETIMER0_MASK)
    case (CMU_LETIMER0_CLK_BRANCH << CMU_CLK_BRANCH_POS):
      ret = lfClkGet(cmuClock_LFA);
#if defined(_SILICON_LABS_32B_SERIES_0)
      ret >>= (CMU->LFAPRESC0 & _CMU_LFAPRESC0_LETIMER0_MASK)
    3dea:	40d8      	lsrs	r0, r3
              >> _CMU_LFAPRESC0_LETIMER0_SHIFT;
#else
      ret /= CMU_Log2ToDiv((CMU->LFAPRESC0 & _CMU_LFAPRESC0_LETIMER0_MASK)
                           >> _CMU_LFAPRESC0_LETIMER0_SHIFT);
#endif
      break;
    3dec:	bd08      	pop	{r3, pc}
#if defined(_CMU_AUXHFRCOCTRL_FREQRANGE_MASK)
  ret = auxHfrcoFreq;

#elif defined(_CMU_AUXHFRCOCTRL_BAND_MASK)
  /* All series 0 families except EFM32G */
  switch (CMU->AUXHFRCOCTRL & _CMU_AUXHFRCOCTRL_BAND_MASK) {
    3dee:	b1ab      	cbz	r3, 3e1c <CMU_ClockFreqGet+0x174>
    3df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    3df4:	f47f af6d 	bne.w	3cd2 <CMU_ClockFreqGet+0x2a>
        ret = 7000000;
      }
      break;

    case CMU_AUXHFRCOCTRL_BAND_11MHZ:
      ret = 11000000;
    3df8:	4811      	ldr	r0, [pc, #68]	; (3e40 <CMU_ClockFreqGet+0x198>)
    3dfa:	bd08      	pop	{r3, pc}
      ret = 0;
      break;
  }

  return ret;
}
    3dfc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  switch (clk) {
    case cmuSelect_LFXO:
      ret = SystemLFXOClockGet();
      break;
    case cmuSelect_LFRCO:
      ret = SystemLFRCOClockGet();
    3e00:	f001 bf7c 	b.w	5cfc <SystemLFRCOClockGet>
    case CMU_AUXHFRCOCTRL_BAND_14MHZ:
      ret = 14000000;
      break;

    case CMU_AUXHFRCOCTRL_BAND_21MHZ:
      ret = 21000000;
    3e04:	480f      	ldr	r0, [pc, #60]	; (3e44 <CMU_ClockFreqGet+0x19c>)
    3e06:	bd08      	pop	{r3, pc}
      break;

#if defined(_CMU_AUXHFRCOCTRL_BAND_28MHZ)
    case CMU_AUXHFRCOCTRL_BAND_28MHZ:
      ret = 28000000;
    3e08:	480f      	ldr	r0, [pc, #60]	; (3e48 <CMU_ClockFreqGet+0x1a0>)
    3e0a:	bd08      	pop	{r3, pc}
    3e0c:	4b06      	ldr	r3, [pc, #24]	; (3e28 <CMU_ClockFreqGet+0x180>)
    3e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        ret = 1000000;
      }
      break;

    case CMU_AUXHFRCOCTRL_BAND_7MHZ:
      if ( SYSTEM_GetProdRev() >= 19 ) {
    3e10:	f1b3 5f98 	cmp.w	r3, #318767104	; 0x13000000
        ret = 6600000;
    3e14:	bf2c      	ite	cs
    3e16:	480d      	ldrcs	r0, [pc, #52]	; (3e4c <CMU_ClockFreqGet+0x1a4>)
      } else {
        ret = 7000000;
    3e18:	480d      	ldrcc	r0, [pc, #52]	; (3e50 <CMU_ClockFreqGet+0x1a8>)
    3e1a:	bd08      	pop	{r3, pc}
    case CMU_AUXHFRCOCTRL_BAND_11MHZ:
      ret = 11000000;
      break;

    case CMU_AUXHFRCOCTRL_BAND_14MHZ:
      ret = 14000000;
    3e1c:	480d      	ldr	r0, [pc, #52]	; (3e54 <CMU_ClockFreqGet+0x1ac>)
    3e1e:	bd08      	pop	{r3, pc}
    3e20:	000c0006 	.word	0x000c0006
    3e24:	400c8000 	.word	0x400c8000
    3e28:	0fe081b0 	.word	0x0fe081b0
    3e2c:	00124f80 	.word	0x00124f80
    3e30:	000f4240 	.word	0x000f4240
    3e34:	00222307 	.word	0x00222307
    3e38:	001c0003 	.word	0x001c0003
    3e3c:	001a0002 	.word	0x001a0002
    3e40:	00a7d8c0 	.word	0x00a7d8c0
    3e44:	01406f40 	.word	0x01406f40
    3e48:	01ab3f00 	.word	0x01ab3f00
    3e4c:	0064b540 	.word	0x0064b540
    3e50:	006acfc0 	.word	0x006acfc0
    3e54:	00d59f80 	.word	0x00d59f80

00003e58 <CMU_ClockEnable>:
 * @param[in] enable
 *   @li true - enable specified clock.
 *   @li false - disable specified clock.
 ******************************************************************************/
void CMU_ClockEnable(CMU_Clock_TypeDef clock, bool enable)
{
    3e58:	b530      	push	{r4, r5, lr}
  volatile uint32_t *reg;
  uint32_t          bit;
  uint32_t          sync = 0;

  /* Identify enable register */
  switch ((clock >> CMU_EN_REG_POS) & CMU_EN_REG_MASK) {
    3e5a:	f3c0 2303 	ubfx	r3, r0, #8, #4
    3e5e:	3b01      	subs	r3, #1
 * @param[in] enable
 *   @li true - enable specified clock.
 *   @li false - disable specified clock.
 ******************************************************************************/
void CMU_ClockEnable(CMU_Clock_TypeDef clock, bool enable)
{
    3e60:	b083      	sub	sp, #12
    3e62:	4604      	mov	r4, r0
  volatile uint32_t *reg;
  uint32_t          bit;
  uint32_t          sync = 0;

  /* Identify enable register */
  switch ((clock >> CMU_EN_REG_POS) & CMU_EN_REG_MASK) {
    3e64:	2b09      	cmp	r3, #9
    3e66:	d80c      	bhi.n	3e82 <CMU_ClockEnable+0x2a>
    3e68:	e8df f003 	tbb	[pc, r3]
    3e6c:	0b201e19 	.word	0x0b201e19
    3e70:	0b1b0d0b 	.word	0x0b1b0d0b
    3e74:	050b      	.short	0x050b
    3e76:	4d1c      	ldr	r5, [pc, #112]	; (3ee8 <CMU_ClockEnable+0x90>)
      EFM_ASSERT(0);
      return;
  }

  /* Get bit position used to enable/disable */
  bit = (clock >> CMU_EN_BIT_POS) & CMU_EN_BIT_MASK;
    3e78:	f3c4 3404 	ubfx	r4, r4, #12, #5
                                     unsigned int bit,
                                     unsigned int val)
{
#if defined(BITBAND_PER_BASE)
  uint32_t aliasAddr =
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);
    3e7c:	442c      	add	r4, r5
__STATIC_INLINE void BUS_RegBitWrite(volatile uint32_t *addr,
                                     unsigned int bit,
                                     unsigned int val)
{
#if defined(BITBAND_PER_BASE)
  uint32_t aliasAddr =
    3e7e:	00a4      	lsls	r4, r4, #2
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);

  *(volatile uint32_t *)aliasAddr = (uint32_t)val;
    3e80:	6021      	str	r1, [r4, #0]
    syncReg(sync);
  }

  /* Set/clear bit as requested */
  BUS_RegBitWrite(reg, bit, enable);
}
    3e82:	b003      	add	sp, #12
    3e84:	bd30      	pop	{r4, r5, pc}
  volatile uint32_t *reg;
  uint32_t          bit;
  uint32_t          sync = 0;

  /* Identify enable register */
  switch ((clock >> CMU_EN_REG_POS) & CMU_EN_REG_MASK) {
    3e86:	4d19      	ldr	r5, [pc, #100]	; (3eec <CMU_ClockEnable+0x94>)
      break;
#endif

    case CMU_LFACLKEN0_EN_REG:
      reg  = &CMU->LFACLKEN0;
      sync = CMU_SYNCBUSY_LFACLKEN0;
    3e88:	2001      	movs	r0, #1
 ******************************************************************************/
__STATIC_INLINE void syncReg(uint32_t mask)
{
  /* Avoid deadlock if modifying the same register twice when freeze mode is */
  /* activated. */
  if (CMU->FREEZE & CMU_FREEZE_REGFREEZE) {
    3e8a:	4a19      	ldr	r2, [pc, #100]	; (3ef0 <CMU_ClockEnable+0x98>)
    3e8c:	6d53      	ldr	r3, [r2, #84]	; 0x54
    3e8e:	07db      	lsls	r3, r3, #31
      EFM_ASSERT(0);
      return;
  }

  /* Get bit position used to enable/disable */
  bit = (clock >> CMU_EN_BIT_POS) & CMU_EN_BIT_MASK;
    3e90:	f3c4 3404 	ubfx	r4, r4, #12, #5
 ******************************************************************************/
__STATIC_INLINE void syncReg(uint32_t mask)
{
  /* Avoid deadlock if modifying the same register twice when freeze mode is */
  /* activated. */
  if (CMU->FREEZE & CMU_FREEZE_REGFREEZE) {
    3e94:	d4f2      	bmi.n	3e7c <CMU_ClockEnable+0x24>
    return;
  }

  /* Wait for any pending previous write operation to have been completed */
  /* in low frequency domain */
  while (CMU->SYNCBUSY & mask) {
    3e96:	6d13      	ldr	r3, [r2, #80]	; 0x50
    3e98:	4218      	tst	r0, r3
    3e9a:	d1fc      	bne.n	3e96 <CMU_ClockEnable+0x3e>
    3e9c:	e7ee      	b.n	3e7c <CMU_ClockEnable+0x24>
  volatile uint32_t *reg;
  uint32_t          bit;
  uint32_t          sync = 0;

  /* Identify enable register */
  switch ((clock >> CMU_EN_REG_POS) & CMU_EN_REG_MASK) {
    3e9e:	4d15      	ldr	r5, [pc, #84]	; (3ef4 <CMU_ClockEnable+0x9c>)
    3ea0:	e7ea      	b.n	3e78 <CMU_ClockEnable+0x20>
    3ea2:	4d15      	ldr	r5, [pc, #84]	; (3ef8 <CMU_ClockEnable+0xa0>)
      sync = CMU_SYNCBUSY_LFACLKEN0;
      break;

    case CMU_LFBCLKEN0_EN_REG:
      reg  = &CMU->LFBCLKEN0;
      sync = CMU_SYNCBUSY_LFBCLKEN0;
    3ea4:	2010      	movs	r0, #16
    3ea6:	e7f0      	b.n	3e8a <CMU_ClockEnable+0x32>
  volatile uint32_t *reg;
  uint32_t          bit;
  uint32_t          sync = 0;

  /* Identify enable register */
  switch ((clock >> CMU_EN_REG_POS) & CMU_EN_REG_MASK) {
    3ea8:	4d14      	ldr	r5, [pc, #80]	; (3efc <CMU_ClockEnable+0xa4>)
    3eaa:	e7e5      	b.n	3e78 <CMU_ClockEnable+0x20>

#if defined(_CMU_HFCORECLKEN0_MASK)
    case CMU_HFCORECLKEN0_EN_REG:
      reg = &CMU->HFCORECLKEN0;
#if defined(CMU_MAX_FREQ_HFLE)
      setHfLeConfig(CMU_ClockFreqGet(cmuClock_HFLE));
    3eac:	4814      	ldr	r0, [pc, #80]	; (3f00 <CMU_ClockEnable+0xa8>)
    3eae:	9101      	str	r1, [sp, #4]
    3eb0:	f7ff fefa 	bl	3ca8 <CMU_ClockFreqGet>
  /* - Enable HFLE wait-state if to allow access to LE peripherals when HFBUSCLK is
       above maxLeFreq.
     - Set HFLE prescaler. Allowed HFLE clock frequency is maxLeFreq. */

  hfleWs = 1;
  if (hfFreq <= CMU_MAX_FREQ_HFLE) {
    3eb4:	4b13      	ldr	r3, [pc, #76]	; (3f04 <CMU_ClockEnable+0xac>)
    3eb6:	9901      	ldr	r1, [sp, #4]
    3eb8:	4298      	cmp	r0, r3
    3eba:	d911      	bls.n	3ee0 <CMU_ClockEnable+0x88>
    hfleWs = 0;
    hflePresc = 0;
  } else if (hfFreq <= (2 * CMU_MAX_FREQ_HFLE)) {
    3ebc:	4b12      	ldr	r3, [pc, #72]	; (3f08 <CMU_ClockEnable+0xb0>)
    3ebe:	2501      	movs	r5, #1
    3ec0:	4298      	cmp	r0, r3
    3ec2:	bf94      	ite	ls
    3ec4:	f44f 7080 	movls.w	r0, #256	; 0x100
    3ec8:	f44f 7000 	movhi.w	r0, #512	; 0x200
    3ecc:	4b0f      	ldr	r3, [pc, #60]	; (3f0c <CMU_ClockEnable+0xb4>)
    hflePresc = 1;
  } else {
    hflePresc = 2;
  }
  BUS_RegBitWrite(&CMU->CTRL, _GENERIC_HFLE_WS_SHIFT, hfleWs);
  GENERIC_HFLE_PRESC_REG = (GENERIC_HFLE_PRESC_REG & ~_GENERIC_HFLE_PRESC_MASK)
    3ece:	4a08      	ldr	r2, [pc, #32]	; (3ef0 <CMU_ClockEnable+0x98>)
    3ed0:	601d      	str	r5, [r3, #0]
    3ed2:	6853      	ldr	r3, [r2, #4]
    3ed4:	4d0e      	ldr	r5, [pc, #56]	; (3f10 <CMU_ClockEnable+0xb8>)
    3ed6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
                           | (hflePresc << _GENERIC_HFLE_PRESC_SHIFT);
    3eda:	4318      	orrs	r0, r3
    hflePresc = 1;
  } else {
    hflePresc = 2;
  }
  BUS_RegBitWrite(&CMU->CTRL, _GENERIC_HFLE_WS_SHIFT, hfleWs);
  GENERIC_HFLE_PRESC_REG = (GENERIC_HFLE_PRESC_REG & ~_GENERIC_HFLE_PRESC_MASK)
    3edc:	6050      	str	r0, [r2, #4]
    3ede:	e7cb      	b.n	3e78 <CMU_ClockEnable+0x20>
  /* - Enable HFLE wait-state if to allow access to LE peripherals when HFBUSCLK is
       above maxLeFreq.
     - Set HFLE prescaler. Allowed HFLE clock frequency is maxLeFreq. */

  hfleWs = 1;
  if (hfFreq <= CMU_MAX_FREQ_HFLE) {
    3ee0:	2000      	movs	r0, #0
    hfleWs = 0;
    3ee2:	4605      	mov	r5, r0
    3ee4:	e7f2      	b.n	3ecc <CMU_ClockEnable+0x74>
    3ee6:	bf00      	nop
    3ee8:	10e403c0 	.word	0x10e403c0
    3eec:	10e402c0 	.word	0x10e402c0
    3ef0:	400c8000 	.word	0x400c8000
    3ef4:	10e40040 	.word	0x10e40040
    3ef8:	10e40300 	.word	0x10e40300
    3efc:	10e40220 	.word	0x10e40220
    3f00:	00024300 	.word	0x00024300
    3f04:	016e3600 	.word	0x016e3600
    3f08:	02dc6c00 	.word	0x02dc6c00
    3f0c:	43900078 	.word	0x43900078
    3f10:	10e40200 	.word	0x10e40200

00003f14 <CMU_ClockSelectSet>:
 *   @li #cmuSelect_ULFRCO
 *   @li #cmuSelect_PLFRCO
 *   @endif
 ******************************************************************************/
void CMU_ClockSelectSet(CMU_Clock_TypeDef clock, CMU_Select_TypeDef ref)
{
    3f14:	b538      	push	{r3, r4, r5, lr}
      EMU_VScaleEM01ByClock(vScaleFrequency, false);
    }
  }
#endif

  selRegId = (clock >> CMU_SEL_REG_POS) & CMU_SEL_REG_MASK;
    3f16:	f000 040f 	and.w	r4, r0, #15

  switch (selRegId) {
    3f1a:	1e63      	subs	r3, r4, #1
    3f1c:	2b06      	cmp	r3, #6
    3f1e:	d80e      	bhi.n	3f3e <CMU_ClockSelectSet+0x2a>
    3f20:	e8df f003 	tbb	[pc, r3]
    3f24:	0d14142e 	.word	0x0d14142e
    3f28:	0e0d      	.short	0x0e0d
    3f2a:	04          	.byte	0x04
    3f2b:	00          	.byte	0x00
      break;
#endif

#if defined(USBC_CLOCK_PRESENT)
    case CMU_USBCCLKSEL_REG:
      switch (ref) {
    3f2c:	2903      	cmp	r1, #3
    3f2e:	f000 8098 	beq.w	4062 <CMU_ClockSelectSet+0x14e>
    3f32:	2909      	cmp	r1, #9
    3f34:	f000 80cb 	beq.w	40ce <CMU_ClockSelectSet+0x1ba>
    3f38:	2902      	cmp	r1, #2
    3f3a:	f000 80a0 	beq.w	407e <CMU_ClockSelectSet+0x16a>
    3f3e:	bd38      	pop	{r3, r4, r5, pc}
#endif
#endif

#if defined(_CMU_DBGCLKSEL_DBG_MASK) || defined(CMU_CTRL_DBGCLK)
    case CMU_DBGCLKSEL_REG:
      switch (ref) {
    3f40:	2907      	cmp	r1, #7
    3f42:	d026      	beq.n	3f92 <CMU_ClockSelectSet+0x7e>
    3f44:	2909      	cmp	r1, #9
    3f46:	f000 80a9 	beq.w	409c <CMU_ClockSelectSet+0x188>
    3f4a:	bd38      	pop	{r3, r4, r5, pc}
      break;

#elif defined(_SILICON_LABS_32B_SERIES_0)
    case CMU_LFACLKSEL_REG:
    case CMU_LFBCLKSEL_REG:
      switch (ref) {
    3f4c:	3901      	subs	r1, #1
    3f4e:	2909      	cmp	r1, #9
    3f50:	d8f5      	bhi.n	3f3e <CMU_ClockSelectSet+0x2a>
    3f52:	a301      	add	r3, pc, #4	; (adr r3, 3f58 <CMU_ClockSelectSet+0x44>)
    3f54:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    3f58:	00004143 	.word	0x00004143
    3f5c:	0000415f 	.word	0x0000415f
    3f60:	000041af 	.word	0x000041af
    3f64:	00003f3f 	.word	0x00003f3f
    3f68:	00003f3f 	.word	0x00003f3f
    3f6c:	00004177 	.word	0x00004177
    3f70:	00003f3f 	.word	0x00003f3f
    3f74:	00003f3f 	.word	0x00003f3f
    3f78:	00003f3f 	.word	0x00003f3f
    3f7c:	000041c5 	.word	0x000041c5

  selRegId = (clock >> CMU_SEL_REG_POS) & CMU_SEL_REG_MASK;

  switch (selRegId) {
    case CMU_HFCLKSEL_REG:
      switch (ref) {
    3f80:	3902      	subs	r1, #2
    3f82:	2903      	cmp	r1, #3
    3f84:	d8db      	bhi.n	3f3e <CMU_ClockSelectSet+0x2a>
    3f86:	e8df f011 	tbh	[pc, r1, lsl #1]
    3f8a:	00c2      	.short	0x00c2
    3f8c:	00a9000a 	.word	0x00a9000a
    3f90:	00c7      	.short	0x00c7
#endif

#if defined(CMU_CTRL_DBGCLK)
        case cmuSelect_AUXHFRCO:
          /* Select AUXHFRCO as debug clock */
          CMU->CTRL = (CMU->CTRL & ~(_CMU_CTRL_DBGCLK_MASK))
    3f92:	4a9e      	ldr	r2, [pc, #632]	; (420c <CMU_ClockSelectSet+0x2f8>)
    3f94:	6813      	ldr	r3, [r2, #0]
                      | CMU_CTRL_DBGCLK_AUXHFRCO;
    3f96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
#endif

#if defined(CMU_CTRL_DBGCLK)
        case cmuSelect_AUXHFRCO:
          /* Select AUXHFRCO as debug clock */
          CMU->CTRL = (CMU->CTRL & ~(_CMU_CTRL_DBGCLK_MASK))
    3f9a:	6013      	str	r3, [r2, #0]
                      | CMU_CTRL_DBGCLK_AUXHFRCO;
          break;
    3f9c:	bd38      	pop	{r3, r4, r5, pc}

  selRegId = (clock >> CMU_SEL_REG_POS) & CMU_SEL_REG_MASK;

  switch (selRegId) {
    case CMU_HFCLKSEL_REG:
      switch (ref) {
    3f9e:	4a9c      	ldr	r2, [pc, #624]	; (4210 <CMU_ClockSelectSet+0x2fc>)

        case cmuSelect_LFRCO:
#if defined(_SILICON_LABS_32B_SERIES_1)
          select = CMU_HFCLKSEL_HF_LFRCO;
#elif defined(_SILICON_LABS_32B_SERIES_0)
          select = CMU_CMD_HFCLKSEL_LFRCO;
    3fa0:	2403      	movs	r4, #3
      ensBitPos = _CMU_STATUS_AUXHFRCOENS_SHIFT;
#endif
      break;

    case cmuOsc_LFRCO:
      enBit  = CMU_OSCENCMD_LFRCOEN;
    3fa2:	2340      	movs	r3, #64	; 0x40
      if ((CMU->HFXOCTRL & (_CMU_HFXOCTRL_MODE_MASK)) == CMU_HFXOCTRL_MODE_DIGEXTCLK) {
        setHfxoTuningMode(HFXO_TUNING_MODE_CMD);
      }
    }
#endif
    CMU->OSCENCMD = enBit;
    3fa4:	4999      	ldr	r1, [pc, #612]	; (420c <CMU_ClockSelectSet+0x2f8>)
    3fa6:	620b      	str	r3, [r1, #32]
{
#if defined(BITBAND_PER_BASE)
  uint32_t aliasAddr =
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);

  return *(volatile uint32_t *)aliasAddr;
    3fa8:	6813      	ldr	r3, [r2, #0]
    }
#endif

    /* Wait for clock to become ready after enable */
    if (wait) {
      while (!BUS_RegBitRead(&CMU->STATUS, rdyBitPos)) ;
    3faa:	2b00      	cmp	r3, #0
    3fac:	d0fc      	beq.n	3fa8 <CMU_ClockSelectSet+0x94>
 *   this target. Retain SCBTP (Suppressed Conditional Branch Target Prefetch)
 *   setting.
 ******************************************************************************/
static void flashWaitStateMax(void)
{
  flashWaitStateControl(SystemMaxCoreClockGet(), 0);
    3fae:	f001 fe29 	bl	5c04 <SystemMaxCoreClockGet>
  bool scbtpEn;   /* Suppressed Conditional Branch Target Prefetch setting. */
#endif
  (void) vscale;  /* vscale parameter is only used on some devices */

  /* Make sure the MSC is unlocked */
  mscLocked = MSC->LOCK;
    3fb2:	4b98      	ldr	r3, [pc, #608]	; (4214 <CMU_ClockSelectSet+0x300>)
  MSC->LOCK = MSC_UNLOCK_CODE;
    3fb4:	f641 3271 	movw	r2, #7025	; 0x1b71
  bool scbtpEn;   /* Suppressed Conditional Branch Target Prefetch setting. */
#endif
  (void) vscale;  /* vscale parameter is only used on some devices */

  /* Make sure the MSC is unlocked */
  mscLocked = MSC->LOCK;
    3fb8:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
  MSC->LOCK = MSC_UNLOCK_CODE;
    3fba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get mode and SCBTP enable */
  mode = MSC->READCTRL & _MSC_READCTRL_MODE_MASK;
    3fbc:	685b      	ldr	r3, [r3, #4]
    3fbe:	f003 0307 	and.w	r3, r3, #7
    3fc2:	2b04      	cmp	r3, #4
    3fc4:	d806      	bhi.n	3fd4 <CMU_ClockSelectSet+0xc0>
    3fc6:	2201      	movs	r2, #1
    3fc8:	fa02 f303 	lsl.w	r3, r2, r3
    3fcc:	f013 0f13 	tst.w	r3, #19
    3fd0:	f040 80ad 	bne.w	412e <CMU_ClockSelectSet+0x21a>

  /* Set mode based on the core clock frequency and SCBTP enable */
  if (false) {
  }
#if defined(MSC_READCTRL_MODE_WS2)
  else if (coreFreq > CMU_MAX_FREQ_1WS) {
    3fd4:	4b90      	ldr	r3, [pc, #576]	; (4218 <CMU_ClockSelectSet+0x304>)
    3fd6:	4298      	cmp	r0, r3
    3fd8:	d969      	bls.n	40ae <CMU_ClockSelectSet+0x19a>
    mode = (scbtpEn ? MSC_READCTRL_MODE_WS2SCBTP : MSC_READCTRL_MODE_WS2);
    3fda:	2205      	movs	r2, #5

#endif

  /* BUS_RegMaskedWrite cannot be used here as it would temporarily set the
     mode field to WS0 */
  MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | mode;
    3fdc:	498d      	ldr	r1, [pc, #564]	; (4214 <CMU_ClockSelectSet+0x300>)
    3fde:	684b      	ldr	r3, [r1, #4]
    3fe0:	f023 0307 	bic.w	r3, r3, #7
    3fe4:	4313      	orrs	r3, r2
    3fe6:	604b      	str	r3, [r1, #4]

  if (mscLocked) {
    3fe8:	b10d      	cbz	r5, 3fee <CMU_ClockSelectSet+0xda>
    MSC->LOCK = 0;
    3fea:	2300      	movs	r3, #0
    3fec:	63cb      	str	r3, [r1, #60]	; 0x3c

      /* Switch to selected oscillator */
#if defined(_CMU_HFCLKSEL_MASK)
      CMU->HFCLKSEL = select;
#else
      CMU->CMD = select;
    3fee:	4b87      	ldr	r3, [pc, #540]	; (420c <CMU_ClockSelectSet+0x2f8>)
#endif
#if defined(CMU_MAX_FREQ_HFLE)
      /* Update HFLE configuration after 'select' is set.
         Note that the HFCLKLE clock is connected differently on planform 1 and 2 */
      setHfLeConfig(CMU_ClockFreqGet(cmuClock_HFLE));
    3ff0:	488a      	ldr	r0, [pc, #552]	; (421c <CMU_ClockSelectSet+0x308>)

      /* Switch to selected oscillator */
#if defined(_CMU_HFCLKSEL_MASK)
      CMU->HFCLKSEL = select;
#else
      CMU->CMD = select;
    3ff2:	625c      	str	r4, [r3, #36]	; 0x24
#endif
#if defined(CMU_MAX_FREQ_HFLE)
      /* Update HFLE configuration after 'select' is set.
         Note that the HFCLKLE clock is connected differently on planform 1 and 2 */
      setHfLeConfig(CMU_ClockFreqGet(cmuClock_HFLE));
    3ff4:	f7ff fe58 	bl	3ca8 <CMU_ClockFreqGet>
  /* - Enable HFLE wait-state if to allow access to LE peripherals when HFBUSCLK is
       above maxLeFreq.
     - Set HFLE prescaler. Allowed HFLE clock frequency is maxLeFreq. */

  hfleWs = 1;
  if (hfFreq <= CMU_MAX_FREQ_HFLE) {
    3ff8:	4b89      	ldr	r3, [pc, #548]	; (4220 <CMU_ClockSelectSet+0x30c>)
    3ffa:	4298      	cmp	r0, r3
    3ffc:	d954      	bls.n	40a8 <CMU_ClockSelectSet+0x194>
    hfleWs = 0;
    hflePresc = 0;
  } else if (hfFreq <= (2 * CMU_MAX_FREQ_HFLE)) {
    3ffe:	4b89      	ldr	r3, [pc, #548]	; (4224 <CMU_ClockSelectSet+0x310>)
    4000:	2101      	movs	r1, #1
    4002:	4298      	cmp	r0, r3
    4004:	bf94      	ite	ls
    4006:	f44f 7080 	movls.w	r0, #256	; 0x100
    400a:	f44f 7000 	movhi.w	r0, #512	; 0x200
{
#if defined(BITBAND_PER_BASE)
  uint32_t aliasAddr =
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);

  *(volatile uint32_t *)aliasAddr = (uint32_t)val;
    400e:	4b86      	ldr	r3, [pc, #536]	; (4228 <CMU_ClockSelectSet+0x314>)
    hflePresc = 1;
  } else {
    hflePresc = 2;
  }
  BUS_RegBitWrite(&CMU->CTRL, _GENERIC_HFLE_WS_SHIFT, hfleWs);
  GENERIC_HFLE_PRESC_REG = (GENERIC_HFLE_PRESC_REG & ~_GENERIC_HFLE_PRESC_MASK)
    4010:	4a7e      	ldr	r2, [pc, #504]	; (420c <CMU_ClockSelectSet+0x2f8>)
    4012:	6019      	str	r1, [r3, #0]
    4014:	6853      	ldr	r3, [r2, #4]
    4016:	f423 7380 	bic.w	r3, r3, #256	; 0x100
                           | (hflePresc << _GENERIC_HFLE_PRESC_SHIFT);
    401a:	4318      	orrs	r0, r3
    hflePresc = 1;
  } else {
    hflePresc = 2;
  }
  BUS_RegBitWrite(&CMU->CTRL, _GENERIC_HFLE_WS_SHIFT, hfleWs);
  GENERIC_HFLE_PRESC_REG = (GENERIC_HFLE_PRESC_REG & ~_GENERIC_HFLE_PRESC_MASK)
    401c:	6050      	str	r0, [r2, #4]
      setHfLeConfig(CMU_ClockFreqGet(cmuClock_HFLE));
#endif

      /* Update CMSIS core clock variable */
      /* (The function will update the global variable) */
      freq = SystemCoreClockGet();
    401e:	f001 fd83 	bl	5b28 <SystemCoreClockGet>
  bool scbtpEn;   /* Suppressed Conditional Branch Target Prefetch setting. */
#endif
  (void) vscale;  /* vscale parameter is only used on some devices */

  /* Make sure the MSC is unlocked */
  mscLocked = MSC->LOCK;
    4022:	4b7c      	ldr	r3, [pc, #496]	; (4214 <CMU_ClockSelectSet+0x300>)
  MSC->LOCK = MSC_UNLOCK_CODE;
    4024:	f641 3271 	movw	r2, #7025	; 0x1b71
  bool scbtpEn;   /* Suppressed Conditional Branch Target Prefetch setting. */
#endif
  (void) vscale;  /* vscale parameter is only used on some devices */

  /* Make sure the MSC is unlocked */
  mscLocked = MSC->LOCK;
    4028:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  MSC->LOCK = MSC_UNLOCK_CODE;
    402a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get mode and SCBTP enable */
  mode = MSC->READCTRL & _MSC_READCTRL_MODE_MASK;
    402c:	685b      	ldr	r3, [r3, #4]
    402e:	f003 0307 	and.w	r3, r3, #7
    4032:	2b04      	cmp	r3, #4
    4034:	d805      	bhi.n	4042 <CMU_ClockSelectSet+0x12e>
    4036:	2201      	movs	r2, #1
    4038:	fa02 f303 	lsl.w	r3, r2, r3
    403c:	f013 0f13 	tst.w	r3, #19
    4040:	d17a      	bne.n	4138 <CMU_ClockSelectSet+0x224>

  /* Set mode based on the core clock frequency and SCBTP enable */
  if (false) {
  }
#if defined(MSC_READCTRL_MODE_WS2)
  else if (coreFreq > CMU_MAX_FREQ_1WS) {
    4042:	4b75      	ldr	r3, [pc, #468]	; (4218 <CMU_ClockSelectSet+0x304>)
    4044:	4298      	cmp	r0, r3
    4046:	d93a      	bls.n	40be <CMU_ClockSelectSet+0x1aa>
    mode = (scbtpEn ? MSC_READCTRL_MODE_WS2SCBTP : MSC_READCTRL_MODE_WS2);
    4048:	2205      	movs	r2, #5

#endif

  /* BUS_RegMaskedWrite cannot be used here as it would temporarily set the
     mode field to WS0 */
  MSC->READCTRL = (MSC->READCTRL & ~_MSC_READCTRL_MODE_MASK) | mode;
    404a:	4972      	ldr	r1, [pc, #456]	; (4214 <CMU_ClockSelectSet+0x300>)
    404c:	684b      	ldr	r3, [r1, #4]
    404e:	f023 0307 	bic.w	r3, r3, #7
    4052:	4313      	orrs	r3, r2
    4054:	604b      	str	r3, [r1, #4]

  if (mscLocked) {
    4056:	2c00      	cmp	r4, #0
    4058:	f43f af71 	beq.w	3f3e <CMU_ClockSelectSet+0x2a>
    MSC->LOCK = 0;
    405c:	2300      	movs	r3, #0
    405e:	63cb      	str	r3, [r1, #60]	; 0x3c
    4060:	bd38      	pop	{r3, r4, r5, pc}
      if ((CMU->HFXOCTRL & (_CMU_HFXOCTRL_MODE_MASK)) == CMU_HFXOCTRL_MODE_DIGEXTCLK) {
        setHfxoTuningMode(HFXO_TUNING_MODE_CMD);
      }
    }
#endif
    CMU->OSCENCMD = enBit;
    4062:	4b6a      	ldr	r3, [pc, #424]	; (420c <CMU_ClockSelectSet+0x2f8>)
{
#if defined(BITBAND_PER_BASE)
  uint32_t aliasAddr =
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);

  return *(volatile uint32_t *)aliasAddr;
    4064:	4a6a      	ldr	r2, [pc, #424]	; (4210 <CMU_ClockSelectSet+0x2fc>)
    4066:	2140      	movs	r1, #64	; 0x40
    4068:	6219      	str	r1, [r3, #32]
    406a:	6813      	ldr	r3, [r2, #0]
    }
#endif

    /* Wait for clock to become ready after enable */
    if (wait) {
      while (!BUS_RegBitRead(&CMU->STATUS, rdyBitPos)) ;
    406c:	2b00      	cmp	r3, #0
    406e:	d0fc      	beq.n	406a <CMU_ClockSelectSet+0x156>
          /* Select LFRCO as clock source for USB, can only be used in sleep mode */
          /* Ensure selected oscillator is enabled, waiting for it to stabilize */
          CMU_OscillatorEnable(cmuOsc_LFRCO, true, true);

          /* Switch oscillator */
          CMU->CMD = CMU_CMD_USBCCLKSEL_LFRCO;
    4070:	4a66      	ldr	r2, [pc, #408]	; (420c <CMU_ClockSelectSet+0x2f8>)
    4072:	2360      	movs	r3, #96	; 0x60
    4074:	6253      	str	r3, [r2, #36]	; 0x24

          /* Wait until clock is activated */
          while ((CMU->STATUS & CMU_STATUS_USBCLFRCOSEL) == 0) {
    4076:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    4078:	0399      	lsls	r1, r3, #14
    407a:	d5fc      	bpl.n	4076 <CMU_ClockSelectSet+0x162>
    407c:	bd38      	pop	{r3, r4, r5, pc}
      if ((CMU->HFXOCTRL & (_CMU_HFXOCTRL_MODE_MASK)) == CMU_HFXOCTRL_MODE_DIGEXTCLK) {
        setHfxoTuningMode(HFXO_TUNING_MODE_CMD);
      }
    }
#endif
    CMU->OSCENCMD = enBit;
    407e:	4b63      	ldr	r3, [pc, #396]	; (420c <CMU_ClockSelectSet+0x2f8>)
    4080:	4a6a      	ldr	r2, [pc, #424]	; (422c <CMU_ClockSelectSet+0x318>)
    4082:	f44f 7180 	mov.w	r1, #256	; 0x100
    4086:	6219      	str	r1, [r3, #32]
    4088:	6813      	ldr	r3, [r2, #0]
    }
#endif

    /* Wait for clock to become ready after enable */
    if (wait) {
      while (!BUS_RegBitRead(&CMU->STATUS, rdyBitPos)) ;
    408a:	2b00      	cmp	r3, #0
    408c:	d0fc      	beq.n	4088 <CMU_ClockSelectSet+0x174>
          /* Select LFXO as clock source for USB, can only be used in sleep mode */
          /* Ensure selected oscillator is enabled, waiting for it to stabilize */
          CMU_OscillatorEnable(cmuOsc_LFXO, true, true);

          /* Switch oscillator */
          CMU->CMD = CMU_CMD_USBCCLKSEL_LFXO;
    408e:	4a5f      	ldr	r2, [pc, #380]	; (420c <CMU_ClockSelectSet+0x2f8>)
    4090:	2340      	movs	r3, #64	; 0x40
    4092:	6253      	str	r3, [r2, #36]	; 0x24

          /* Wait until clock is activated */
          while ((CMU->STATUS & CMU_STATUS_USBCLFXOSEL) == 0) {
    4094:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    4096:	03d8      	lsls	r0, r3, #15
    4098:	d5fc      	bpl.n	4094 <CMU_ClockSelectSet+0x180>
    409a:	bd38      	pop	{r3, r4, r5, pc}
                      | CMU_CTRL_DBGCLK_AUXHFRCO;
          break;

        case cmuSelect_HFCLK:
          /* Select divided HFCLK as debug clock */
          CMU->CTRL = (CMU->CTRL & ~(_CMU_CTRL_DBGCLK_MASK))
    409c:	4a5b      	ldr	r2, [pc, #364]	; (420c <CMU_ClockSelectSet+0x2f8>)
    409e:	6813      	ldr	r3, [r2, #0]
                      | CMU_CTRL_DBGCLK_HFCLK;
    40a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
                      | CMU_CTRL_DBGCLK_AUXHFRCO;
          break;

        case cmuSelect_HFCLK:
          /* Select divided HFCLK as debug clock */
          CMU->CTRL = (CMU->CTRL & ~(_CMU_CTRL_DBGCLK_MASK))
    40a4:	6013      	str	r3, [r2, #0]
                      | CMU_CTRL_DBGCLK_HFCLK;
          break;
    40a6:	bd38      	pop	{r3, r4, r5, pc}
  /* - Enable HFLE wait-state if to allow access to LE peripherals when HFBUSCLK is
       above maxLeFreq.
     - Set HFLE prescaler. Allowed HFLE clock frequency is maxLeFreq. */

  hfleWs = 1;
  if (hfFreq <= CMU_MAX_FREQ_HFLE) {
    40a8:	2000      	movs	r0, #0
    hfleWs = 0;
    40aa:	4601      	mov	r1, r0
    40ac:	e7af      	b.n	400e <CMU_ClockSelectSet+0xfa>
#if defined(MSC_READCTRL_MODE_WS2)
  else if (coreFreq > CMU_MAX_FREQ_1WS) {
    mode = (scbtpEn ? MSC_READCTRL_MODE_WS2SCBTP : MSC_READCTRL_MODE_WS2);
  }
#endif
  else if ((coreFreq <= CMU_MAX_FREQ_1WS) && (coreFreq > CMU_MAX_FREQ_0WS)) {
    40ae:	4b60      	ldr	r3, [pc, #384]	; (4230 <CMU_ClockSelectSet+0x31c>)
    40b0:	4a60      	ldr	r2, [pc, #384]	; (4234 <CMU_ClockSelectSet+0x320>)
    40b2:	4403      	add	r3, r0
    mode = (scbtpEn ? MSC_READCTRL_MODE_WS1SCBTP : MSC_READCTRL_MODE_WS1);
    40b4:	4293      	cmp	r3, r2
    40b6:	bf8c      	ite	hi
    40b8:	2202      	movhi	r2, #2
    40ba:	2203      	movls	r2, #3
    40bc:	e78e      	b.n	3fdc <CMU_ClockSelectSet+0xc8>
#if defined(MSC_READCTRL_MODE_WS2)
  else if (coreFreq > CMU_MAX_FREQ_1WS) {
    mode = (scbtpEn ? MSC_READCTRL_MODE_WS2SCBTP : MSC_READCTRL_MODE_WS2);
  }
#endif
  else if ((coreFreq <= CMU_MAX_FREQ_1WS) && (coreFreq > CMU_MAX_FREQ_0WS)) {
    40be:	4b5c      	ldr	r3, [pc, #368]	; (4230 <CMU_ClockSelectSet+0x31c>)
    40c0:	4a5c      	ldr	r2, [pc, #368]	; (4234 <CMU_ClockSelectSet+0x320>)
    40c2:	4403      	add	r3, r0
    mode = (scbtpEn ? MSC_READCTRL_MODE_WS1SCBTP : MSC_READCTRL_MODE_WS1);
    40c4:	4293      	cmp	r3, r2
    40c6:	bf8c      	ite	hi
    40c8:	2202      	movhi	r2, #2
    40ca:	2203      	movls	r2, #3
    40cc:	e7bd      	b.n	404a <CMU_ClockSelectSet+0x136>

#if defined(CMU_STATUS_USBCHFCLKSEL)
        case cmuSelect_HFCLK:
          /* Select undivided HFCLK as clock source for USB */
          /* Oscillator must already be enabled to avoid a core lockup */
          CMU->CMD = CMU_CMD_USBCCLKSEL_HFCLKNODIV;
    40ce:	4a4f      	ldr	r2, [pc, #316]	; (420c <CMU_ClockSelectSet+0x2f8>)
    40d0:	2320      	movs	r3, #32
    40d2:	6253      	str	r3, [r2, #36]	; 0x24
          /* Wait until clock is activated */
          while ((CMU->STATUS & CMU_STATUS_USBCHFCLKSEL) == 0) {
    40d4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    40d6:	041b      	lsls	r3, r3, #16
    40d8:	d5fc      	bpl.n	40d4 <CMU_ClockSelectSet+0x1c0>
    40da:	bd38      	pop	{r3, r4, r5, pc}
{
#if defined(BITBAND_PER_BASE)
  uint32_t aliasAddr =
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);

  *(volatile uint32_t *)aliasAddr = (uint32_t)val;
    40dc:	4b52      	ldr	r3, [pc, #328]	; (4228 <CMU_ClockSelectSet+0x314>)
    hflePresc = 1;
  } else {
    hflePresc = 2;
  }
  BUS_RegBitWrite(&CMU->CTRL, _GENERIC_HFLE_WS_SHIFT, hfleWs);
  GENERIC_HFLE_PRESC_REG = (GENERIC_HFLE_PRESC_REG & ~_GENERIC_HFLE_PRESC_MASK)
    40de:	4c4b      	ldr	r4, [pc, #300]	; (420c <CMU_ClockSelectSet+0x2f8>)
    40e0:	2201      	movs	r2, #1
    40e2:	601a      	str	r2, [r3, #0]
    40e4:	6863      	ldr	r3, [r4, #4]
                           | (hflePresc << _GENERIC_HFLE_PRESC_SHIFT);
    40e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    hflePresc = 1;
  } else {
    hflePresc = 2;
  }
  BUS_RegBitWrite(&CMU->CTRL, _GENERIC_HFLE_WS_SHIFT, hfleWs);
  GENERIC_HFLE_PRESC_REG = (GENERIC_HFLE_PRESC_REG & ~_GENERIC_HFLE_PRESC_MASK)
    40ea:	6063      	str	r3, [r4, #4]
             This is known after 'select' is written below. */
          setHfLeConfig(CMU_MAX_FREQ_HFLE + 1);
#endif
#if defined(CMU_CTRL_HFXOBUFCUR_BOOSTABOVE32MHZ)
          /* Adjust HFXO buffer current for frequencies above 32MHz */
          if (SystemHFXOClockGet() > 32000000) {
    40ec:	f001 fdf6 	bl	5cdc <SystemHFXOClockGet>
    40f0:	4b49      	ldr	r3, [pc, #292]	; (4218 <CMU_ClockSelectSet+0x304>)
      ensBitPos = _CMU_STATUS_LFRCOENS_SHIFT;
#endif
      break;

    case cmuOsc_LFXO:
      enBit  = CMU_OSCENCMD_LFXOEN;
    40f2:	4a51      	ldr	r2, [pc, #324]	; (4238 <CMU_ClockSelectSet+0x324>)
             This is known after 'select' is written below. */
          setHfLeConfig(CMU_MAX_FREQ_HFLE + 1);
#endif
#if defined(CMU_CTRL_HFXOBUFCUR_BOOSTABOVE32MHZ)
          /* Adjust HFXO buffer current for frequencies above 32MHz */
          if (SystemHFXOClockGet() > 32000000) {
    40f4:	4298      	cmp	r0, r3
            CMU->CTRL = (CMU->CTRL & ~_CMU_CTRL_HFXOBUFCUR_MASK)
    40f6:	6823      	ldr	r3, [r4, #0]
                        | CMU_CTRL_HFXOBUFCUR_BOOSTABOVE32MHZ;
          } else {
            CMU->CTRL = (CMU->CTRL & ~_CMU_CTRL_HFXOBUFCUR_MASK)
    40f8:	bf96      	itet	ls
    40fa:	f023 0360 	bicls.w	r3, r3, #96	; 0x60
#endif
#if defined(CMU_CTRL_HFXOBUFCUR_BOOSTABOVE32MHZ)
          /* Adjust HFXO buffer current for frequencies above 32MHz */
          if (SystemHFXOClockGet() > 32000000) {
            CMU->CTRL = (CMU->CTRL & ~_CMU_CTRL_HFXOBUFCUR_MASK)
                        | CMU_CTRL_HFXOBUFCUR_BOOSTABOVE32MHZ;
    40fe:	f043 0360 	orrhi.w	r3, r3, #96	; 0x60
          } else {
            CMU->CTRL = (CMU->CTRL & ~_CMU_CTRL_HFXOBUFCUR_MASK)
                        | CMU_CTRL_HFXOBUFCUR_BOOSTUPTO32MHZ;
    4102:	f043 0320 	orrls.w	r3, r3, #32
          /* Adjust HFXO buffer current for frequencies above 32MHz */
          if (SystemHFXOClockGet() > 32000000) {
            CMU->CTRL = (CMU->CTRL & ~_CMU_CTRL_HFXOBUFCUR_MASK)
                        | CMU_CTRL_HFXOBUFCUR_BOOSTABOVE32MHZ;
          } else {
            CMU->CTRL = (CMU->CTRL & ~_CMU_CTRL_HFXOBUFCUR_MASK)
    4106:	6023      	str	r3, [r4, #0]
      ensBitPos = _CMU_STATUS_LFRCOENS_SHIFT;
#endif
      break;

    case cmuOsc_LFXO:
      enBit  = CMU_OSCENCMD_LFXOEN;
    4108:	2402      	movs	r4, #2
      ensBitPos = _CMU_STATUS_HFRCOENS_SHIFT;
#endif
      break;

    case cmuOsc_HFXO:
      enBit  = CMU_OSCENCMD_HFXOEN;
    410a:	2304      	movs	r3, #4
    410c:	e74a      	b.n	3fa4 <CMU_ClockSelectSet+0x90>

  selRegId = (clock >> CMU_SEL_REG_POS) & CMU_SEL_REG_MASK;

  switch (selRegId) {
    case CMU_HFCLKSEL_REG:
      switch (ref) {
    410e:	4a47      	ldr	r2, [pc, #284]	; (422c <CMU_ClockSelectSet+0x318>)
        case cmuSelect_LFXO:
#if defined(_SILICON_LABS_32B_SERIES_1)
          select = CMU_HFCLKSEL_HF_LFXO;
#elif defined(_SILICON_LABS_32B_SERIES_0)
          select = CMU_CMD_HFCLKSEL_LFXO;
    4110:	2404      	movs	r4, #4
      ensBitPos = _CMU_STATUS_LFRCOENS_SHIFT;
#endif
      break;

    case cmuOsc_LFXO:
      enBit  = CMU_OSCENCMD_LFXOEN;
    4112:	f44f 7380 	mov.w	r3, #256	; 0x100
    4116:	e745      	b.n	3fa4 <CMU_ClockSelectSet+0x90>
    4118:	4b43      	ldr	r3, [pc, #268]	; (4228 <CMU_ClockSelectSet+0x314>)
    hflePresc = 1;
  } else {
    hflePresc = 2;
  }
  BUS_RegBitWrite(&CMU->CTRL, _GENERIC_HFLE_WS_SHIFT, hfleWs);
  GENERIC_HFLE_PRESC_REG = (GENERIC_HFLE_PRESC_REG & ~_GENERIC_HFLE_PRESC_MASK)
    411a:	493c      	ldr	r1, [pc, #240]	; (420c <CMU_ClockSelectSet+0x2f8>)
    411c:	4a47      	ldr	r2, [pc, #284]	; (423c <CMU_ClockSelectSet+0x328>)
    411e:	2401      	movs	r4, #1
    4120:	601c      	str	r4, [r3, #0]
    4122:	684b      	ldr	r3, [r1, #4]
                           | (hflePresc << _GENERIC_HFLE_PRESC_SHIFT);
    4124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    hflePresc = 1;
  } else {
    hflePresc = 2;
  }
  BUS_RegBitWrite(&CMU->CTRL, _GENERIC_HFLE_WS_SHIFT, hfleWs);
  GENERIC_HFLE_PRESC_REG = (GENERIC_HFLE_PRESC_REG & ~_GENERIC_HFLE_PRESC_MASK)
    4128:	604b      	str	r3, [r1, #4]
  uint32_t enBit;
  uint32_t disBit;

  switch (osc) {
    case cmuOsc_HFRCO:
      enBit  = CMU_OSCENCMD_HFRCOEN;
    412a:	4623      	mov	r3, r4
    412c:	e73a      	b.n	3fa4 <CMU_ClockSelectSet+0x90>

  /* Set mode based on the core clock frequency and SCBTP enable */
  if (false) {
  }
#if defined(MSC_READCTRL_MODE_WS2)
  else if (coreFreq > CMU_MAX_FREQ_1WS) {
    412e:	4b3a      	ldr	r3, [pc, #232]	; (4218 <CMU_ClockSelectSet+0x304>)
    4130:	4298      	cmp	r0, r3
    4132:	d957      	bls.n	41e4 <CMU_ClockSelectSet+0x2d0>
    mode = (scbtpEn ? MSC_READCTRL_MODE_WS2SCBTP : MSC_READCTRL_MODE_WS2);
    4134:	2204      	movs	r2, #4
    4136:	e751      	b.n	3fdc <CMU_ClockSelectSet+0xc8>

  /* Set mode based on the core clock frequency and SCBTP enable */
  if (false) {
  }
#if defined(MSC_READCTRL_MODE_WS2)
  else if (coreFreq > CMU_MAX_FREQ_1WS) {
    4138:	4b37      	ldr	r3, [pc, #220]	; (4218 <CMU_ClockSelectSet+0x304>)
    413a:	4298      	cmp	r0, r3
    413c:	d95a      	bls.n	41f4 <CMU_ClockSelectSet+0x2e0>
    mode = (scbtpEn ? MSC_READCTRL_MODE_WS2SCBTP : MSC_READCTRL_MODE_WS2);
    413e:	2204      	movs	r2, #4
    4140:	e783      	b.n	404a <CMU_ClockSelectSet+0x136>
      break;

#elif defined(_SILICON_LABS_32B_SERIES_0)
    case CMU_LFACLKSEL_REG:
    case CMU_LFBCLKSEL_REG:
      switch (ref) {
    4142:	2000      	movs	r0, #0
    4144:	4602      	mov	r2, r0
        case cmuSelect_Disabled:
          tmp = _CMU_LFCLKSEL_LFA_DISABLED;
    4146:	4601      	mov	r1, r0
          EFM_ASSERT(0);
          return;
      }

      /* Apply select */
      if (selRegId == CMU_LFACLKSEL_REG) {
    4148:	2c02      	cmp	r4, #2
    414a:	d041      	beq.n	41d0 <CMU_ClockSelectSet+0x2bc>
        CMU->LFCLKSEL = (CMU->LFCLKSEL & ~_CMU_LFCLKSEL_LFA_MASK)
                        | (tmp << _CMU_LFCLKSEL_LFA_SHIFT);
#endif
      } else {
#if defined(_CMU_LFCLKSEL_LFBE_MASK)
        CMU->LFCLKSEL = (CMU->LFCLKSEL
    414c:	492f      	ldr	r1, [pc, #188]	; (420c <CMU_ClockSelectSet+0x2f8>)
    414e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
                         & ~(_CMU_LFCLKSEL_LFB_MASK | _CMU_LFCLKSEL_LFBE_MASK))
    4150:	f422 1380 	bic.w	r3, r2, #1048576	; 0x100000
    4154:	f023 030c 	bic.w	r3, r3, #12
                        | (tmp << _CMU_LFCLKSEL_LFB_SHIFT)
                        | (lfExtended << _CMU_LFCLKSEL_LFBE_SHIFT);
    4158:	4303      	orrs	r3, r0
        CMU->LFCLKSEL = (CMU->LFCLKSEL & ~_CMU_LFCLKSEL_LFA_MASK)
                        | (tmp << _CMU_LFCLKSEL_LFA_SHIFT);
#endif
      } else {
#if defined(_CMU_LFCLKSEL_LFBE_MASK)
        CMU->LFCLKSEL = (CMU->LFCLKSEL
    415a:	628b      	str	r3, [r1, #40]	; 0x28
    415c:	bd38      	pop	{r3, r4, r5, pc}
      if ((CMU->HFXOCTRL & (_CMU_HFXOCTRL_MODE_MASK)) == CMU_HFXOCTRL_MODE_DIGEXTCLK) {
        setHfxoTuningMode(HFXO_TUNING_MODE_CMD);
      }
    }
#endif
    CMU->OSCENCMD = enBit;
    415e:	4b2b      	ldr	r3, [pc, #172]	; (420c <CMU_ClockSelectSet+0x2f8>)
{
#if defined(BITBAND_PER_BASE)
  uint32_t aliasAddr =
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);

  return *(volatile uint32_t *)aliasAddr;
    4160:	4a32      	ldr	r2, [pc, #200]	; (422c <CMU_ClockSelectSet+0x318>)
    4162:	f44f 7180 	mov.w	r1, #256	; 0x100
    4166:	6219      	str	r1, [r3, #32]
    4168:	6813      	ldr	r3, [r2, #0]
    }
#endif

    /* Wait for clock to become ready after enable */
    if (wait) {
      while (!BUS_RegBitRead(&CMU->STATUS, rdyBitPos)) ;
    416a:	2b00      	cmp	r3, #0
    416c:	d0fc      	beq.n	4168 <CMU_ClockSelectSet+0x254>
    416e:	2008      	movs	r0, #8
    4170:	2200      	movs	r2, #0
          break;

        case cmuSelect_LFXO:
          /* Ensure selected oscillator is enabled, waiting for it to stabilize */
          CMU_OscillatorEnable(cmuOsc_LFXO, true, true);
          tmp = _CMU_LFCLKSEL_LFA_LFXO;
    4172:	2102      	movs	r1, #2
    4174:	e7e8      	b.n	4148 <CMU_ClockSelectSet+0x234>
          break;

        case cmuSelect_HFCLKLE:
#if defined(CMU_MAX_FREQ_HFLE)
          /* Set HFLE wait-state and divider */
          freq = SystemCoreClockGet();
    4176:	f001 fcd7 	bl	5b28 <SystemCoreClockGet>
  /* - Enable HFLE wait-state if to allow access to LE peripherals when HFBUSCLK is
       above maxLeFreq.
     - Set HFLE prescaler. Allowed HFLE clock frequency is maxLeFreq. */

  hfleWs = 1;
  if (hfFreq <= CMU_MAX_FREQ_HFLE) {
    417a:	4b29      	ldr	r3, [pc, #164]	; (4220 <CMU_ClockSelectSet+0x30c>)
    417c:	4298      	cmp	r0, r3
    417e:	d941      	bls.n	4204 <CMU_ClockSelectSet+0x2f0>
    hfleWs = 0;
    hflePresc = 0;
  } else if (hfFreq <= (2 * CMU_MAX_FREQ_HFLE)) {
    4180:	4b28      	ldr	r3, [pc, #160]	; (4224 <CMU_ClockSelectSet+0x310>)
    4182:	2501      	movs	r5, #1
    4184:	4298      	cmp	r0, r3
    4186:	bf94      	ite	ls
    4188:	f44f 7280 	movls.w	r2, #256	; 0x100
    418c:	f44f 7200 	movhi.w	r2, #512	; 0x200
{
#if defined(BITBAND_PER_BASE)
  uint32_t aliasAddr =
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);

  *(volatile uint32_t *)aliasAddr = (uint32_t)val;
    4190:	4b25      	ldr	r3, [pc, #148]	; (4228 <CMU_ClockSelectSet+0x314>)
    hflePresc = 1;
  } else {
    hflePresc = 2;
  }
  BUS_RegBitWrite(&CMU->CTRL, _GENERIC_HFLE_WS_SHIFT, hfleWs);
  GENERIC_HFLE_PRESC_REG = (GENERIC_HFLE_PRESC_REG & ~_GENERIC_HFLE_PRESC_MASK)
    4192:	491e      	ldr	r1, [pc, #120]	; (420c <CMU_ClockSelectSet+0x2f8>)
    4194:	601d      	str	r5, [r3, #0]
    4196:	684b      	ldr	r3, [r1, #4]
    4198:	4d29      	ldr	r5, [pc, #164]	; (4240 <CMU_ClockSelectSet+0x32c>)
    419a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
                           | (hflePresc << _GENERIC_HFLE_PRESC_SHIFT);
    419e:	4313      	orrs	r3, r2
    41a0:	2201      	movs	r2, #1
    hflePresc = 1;
  } else {
    hflePresc = 2;
  }
  BUS_RegBitWrite(&CMU->CTRL, _GENERIC_HFLE_WS_SHIFT, hfleWs);
  GENERIC_HFLE_PRESC_REG = (GENERIC_HFLE_PRESC_REG & ~_GENERIC_HFLE_PRESC_MASK)
    41a2:	604b      	str	r3, [r1, #4]
          setHfLeConfig(freq);
#endif
          /* Ensure HFCORE to LE clocking is enabled */
          BUS_RegBitWrite(&CMU->HFCORECLKEN0, _CMU_HFCORECLKEN0_LE_SHIFT, 1);
          tmp = _CMU_LFCLKSEL_LFA_HFCORECLKLEDIV2;
          break;
    41a4:	200c      	movs	r0, #12
    41a6:	602a      	str	r2, [r5, #0]
          freq = SystemCoreClockGet();
          setHfLeConfig(freq);
#endif
          /* Ensure HFCORE to LE clocking is enabled */
          BUS_RegBitWrite(&CMU->HFCORECLKEN0, _CMU_HFCORECLKEN0_LE_SHIFT, 1);
          tmp = _CMU_LFCLKSEL_LFA_HFCORECLKLEDIV2;
    41a8:	2103      	movs	r1, #3
          break;
    41aa:	2200      	movs	r2, #0
    41ac:	e7cc      	b.n	4148 <CMU_ClockSelectSet+0x234>
      if ((CMU->HFXOCTRL & (_CMU_HFXOCTRL_MODE_MASK)) == CMU_HFXOCTRL_MODE_DIGEXTCLK) {
        setHfxoTuningMode(HFXO_TUNING_MODE_CMD);
      }
    }
#endif
    CMU->OSCENCMD = enBit;
    41ae:	4b17      	ldr	r3, [pc, #92]	; (420c <CMU_ClockSelectSet+0x2f8>)
{
#if defined(BITBAND_PER_BASE)
  uint32_t aliasAddr =
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);

  return *(volatile uint32_t *)aliasAddr;
    41b0:	4a17      	ldr	r2, [pc, #92]	; (4210 <CMU_ClockSelectSet+0x2fc>)
    41b2:	2140      	movs	r1, #64	; 0x40
    41b4:	6219      	str	r1, [r3, #32]
    41b6:	6813      	ldr	r3, [r2, #0]
    }
#endif

    /* Wait for clock to become ready after enable */
    if (wait) {
      while (!BUS_RegBitRead(&CMU->STATUS, rdyBitPos)) ;
    41b8:	2b00      	cmp	r3, #0
    41ba:	d0fc      	beq.n	41b6 <CMU_ClockSelectSet+0x2a2>
    41bc:	2004      	movs	r0, #4
    41be:	2200      	movs	r2, #0
          break;

        case cmuSelect_LFRCO:
          /* Ensure selected oscillator is enabled, waiting for it to stabilize */
          CMU_OscillatorEnable(cmuOsc_LFRCO, true, true);
          tmp = _CMU_LFCLKSEL_LFA_LFRCO;
    41c0:	2101      	movs	r1, #1
    41c2:	e7c1      	b.n	4148 <CMU_ClockSelectSet+0x234>
      break;

#elif defined(_SILICON_LABS_32B_SERIES_0)
    case CMU_LFACLKSEL_REG:
    case CMU_LFBCLKSEL_REG:
      switch (ref) {
    41c4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    41c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
          break;

#if defined(CMU_LFCLKSEL_LFAE_ULFRCO)
        case cmuSelect_ULFRCO:
          /* ULFRCO is always enabled */
          tmp = _CMU_LFCLKSEL_LFA_DISABLED;
    41cc:	2100      	movs	r1, #0
    41ce:	e7bb      	b.n	4148 <CMU_ClockSelectSet+0x234>
      }

      /* Apply select */
      if (selRegId == CMU_LFACLKSEL_REG) {
#if defined(_CMU_LFCLKSEL_LFAE_MASK)
        CMU->LFCLKSEL = (CMU->LFCLKSEL
    41d0:	480e      	ldr	r0, [pc, #56]	; (420c <CMU_ClockSelectSet+0x2f8>)
    41d2:	6a83      	ldr	r3, [r0, #40]	; 0x28
                         & ~(_CMU_LFCLKSEL_LFA_MASK | _CMU_LFCLKSEL_LFAE_MASK))
    41d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    41d8:	430a      	orrs	r2, r1
    41da:	f023 0303 	bic.w	r3, r3, #3
                        | (tmp << _CMU_LFCLKSEL_LFA_SHIFT)
                        | (lfExtended << _CMU_LFCLKSEL_LFAE_SHIFT);
    41de:	4313      	orrs	r3, r2
      }

      /* Apply select */
      if (selRegId == CMU_LFACLKSEL_REG) {
#if defined(_CMU_LFCLKSEL_LFAE_MASK)
        CMU->LFCLKSEL = (CMU->LFCLKSEL
    41e0:	6283      	str	r3, [r0, #40]	; 0x28
    41e2:	bd38      	pop	{r3, r4, r5, pc}
#if defined(MSC_READCTRL_MODE_WS2)
  else if (coreFreq > CMU_MAX_FREQ_1WS) {
    mode = (scbtpEn ? MSC_READCTRL_MODE_WS2SCBTP : MSC_READCTRL_MODE_WS2);
  }
#endif
  else if ((coreFreq <= CMU_MAX_FREQ_1WS) && (coreFreq > CMU_MAX_FREQ_0WS)) {
    41e4:	4b12      	ldr	r3, [pc, #72]	; (4230 <CMU_ClockSelectSet+0x31c>)
    41e6:	4a13      	ldr	r2, [pc, #76]	; (4234 <CMU_ClockSelectSet+0x320>)
    41e8:	4403      	add	r3, r0
    41ea:	4293      	cmp	r3, r2
    41ec:	bf8c      	ite	hi
    41ee:	2200      	movhi	r2, #0
    41f0:	2201      	movls	r2, #1
    41f2:	e6f3      	b.n	3fdc <CMU_ClockSelectSet+0xc8>
    41f4:	4b0e      	ldr	r3, [pc, #56]	; (4230 <CMU_ClockSelectSet+0x31c>)
    41f6:	4a0f      	ldr	r2, [pc, #60]	; (4234 <CMU_ClockSelectSet+0x320>)
    41f8:	4403      	add	r3, r0
    41fa:	4293      	cmp	r3, r2
    41fc:	bf8c      	ite	hi
    41fe:	2200      	movhi	r2, #0
    4200:	2201      	movls	r2, #1
    4202:	e722      	b.n	404a <CMU_ClockSelectSet+0x136>
  /* - Enable HFLE wait-state if to allow access to LE peripherals when HFBUSCLK is
       above maxLeFreq.
     - Set HFLE prescaler. Allowed HFLE clock frequency is maxLeFreq. */

  hfleWs = 1;
  if (hfFreq <= CMU_MAX_FREQ_HFLE) {
    4204:	2200      	movs	r2, #0
    hfleWs = 0;
    4206:	4615      	mov	r5, r2
    4208:	e7c2      	b.n	4190 <CMU_ClockSelectSet+0x27c>
    420a:	bf00      	nop
    420c:	400c8000 	.word	0x400c8000
    4210:	4390059c 	.word	0x4390059c
    4214:	400c0000 	.word	0x400c0000
    4218:	01e84800 	.word	0x01e84800
    421c:	00024300 	.word	0x00024300
    4220:	016e3600 	.word	0x016e3600
    4224:	02dc6c00 	.word	0x02dc6c00
    4228:	43900078 	.word	0x43900078
    422c:	439005a4 	.word	0x439005a4
    4230:	ff0bdbff 	.word	0xff0bdbff
    4234:	00f423ff 	.word	0x00f423ff
    4238:	4390058c 	.word	0x4390058c
    423c:	43900584 	.word	0x43900584
    4240:	43900810 	.word	0x43900810

00004244 <CMU_OscillatorEnable>:
 *   @li true - wait for oscillator start-up time to timeout before returning.
 *   @li false - do not wait for oscillator start-up time to timeout before
 *     returning.
 ******************************************************************************/
void CMU_OscillatorEnable(CMU_Osc_TypeDef osc, bool enable, bool wait)
{
    4244:	b410      	push	{r4}
#endif

  uint32_t enBit;
  uint32_t disBit;

  switch (osc) {
    4246:	2804      	cmp	r0, #4
    4248:	d806      	bhi.n	4258 <CMU_OscillatorEnable+0x14>
    424a:	e8df f000 	tbb	[pc, r0]
    424e:	1b23      	.short	0x1b23
    4250:	0817      	.short	0x0817
    4252:	1f          	.byte	0x1f
    4253:	00          	.byte	0x00
        while (!BUS_RegBitRead(&CMU->STATUS, rdyBitPos)) ;
      }
#endif
    }
  } else {
    CMU->OSCENCMD = disBit;
    4254:	4a12      	ldr	r2, [pc, #72]	; (42a0 <CMU_OscillatorEnable+0x5c>)
    4256:	6213      	str	r3, [r2, #32]
    /* Always wait for ENS to go low */
    while (BUS_RegBitRead(&CMU->STATUS, ensBitPos)) {
    }
#endif
  }
}
    4258:	f85d 4b04 	ldr.w	r4, [sp], #4
    425c:	4770      	bx	lr
#endif

  uint32_t enBit;
  uint32_t disBit;

  switch (osc) {
    425e:	4811      	ldr	r0, [pc, #68]	; (42a4 <CMU_OscillatorEnable+0x60>)
    case cmuOsc_HFRCO:
      enBit  = CMU_OSCENCMD_HFRCOEN;
      disBit = CMU_OSCENCMD_HFRCODIS;
    4260:	2302      	movs	r3, #2
  uint32_t enBit;
  uint32_t disBit;

  switch (osc) {
    case cmuOsc_HFRCO:
      enBit  = CMU_OSCENCMD_HFRCOEN;
    4262:	2401      	movs	r4, #1
         intended for information: the ULFRCO is always on.  */
      EFM_ASSERT(0);
      return;
  }

  if (enable) {
    4264:	2900      	cmp	r1, #0
    4266:	d0f5      	beq.n	4254 <CMU_OscillatorEnable+0x10>
      if ((CMU->HFXOCTRL & (_CMU_HFXOCTRL_MODE_MASK)) == CMU_HFXOCTRL_MODE_DIGEXTCLK) {
        setHfxoTuningMode(HFXO_TUNING_MODE_CMD);
      }
    }
#endif
    CMU->OSCENCMD = enBit;
    4268:	4b0d      	ldr	r3, [pc, #52]	; (42a0 <CMU_OscillatorEnable+0x5c>)
    426a:	621c      	str	r4, [r3, #32]
    while (!BUS_RegBitRead(&CMU->STATUS, ensBitPos)) {
    }
#endif

    /* Wait for clock to become ready after enable */
    if (wait) {
    426c:	2a00      	cmp	r2, #0
    426e:	d0f3      	beq.n	4258 <CMU_OscillatorEnable+0x14>
    4270:	6803      	ldr	r3, [r0, #0]
      while (!BUS_RegBitRead(&CMU->STATUS, rdyBitPos)) ;
    4272:	2b00      	cmp	r3, #0
    4274:	d0fc      	beq.n	4270 <CMU_OscillatorEnable+0x2c>
    /* Always wait for ENS to go low */
    while (BUS_RegBitRead(&CMU->STATUS, ensBitPos)) {
    }
#endif
  }
}
    4276:	f85d 4b04 	ldr.w	r4, [sp], #4
    427a:	4770      	bx	lr
#endif

  uint32_t enBit;
  uint32_t disBit;

  switch (osc) {
    427c:	480a      	ldr	r0, [pc, #40]	; (42a8 <CMU_OscillatorEnable+0x64>)
#endif
      break;

    case cmuOsc_HFXO:
      enBit  = CMU_OSCENCMD_HFXOEN;
      disBit = CMU_OSCENCMD_HFXODIS;
    427e:	2308      	movs	r3, #8
      ensBitPos = _CMU_STATUS_HFRCOENS_SHIFT;
#endif
      break;

    case cmuOsc_HFXO:
      enBit  = CMU_OSCENCMD_HFXOEN;
    4280:	2404      	movs	r4, #4
    4282:	e7ef      	b.n	4264 <CMU_OscillatorEnable+0x20>
      disBit = CMU_OSCENCMD_LFRCODIS;
      rdyBitPos = _CMU_STATUS_LFRCORDY_SHIFT;
#if defined(_SILICON_LABS_32B_SERIES_1)
      ensBitPos = _CMU_STATUS_LFRCOENS_SHIFT;
#endif
      break;
    4284:	4809      	ldr	r0, [pc, #36]	; (42ac <CMU_OscillatorEnable+0x68>)
#endif
      break;

    case cmuOsc_LFRCO:
      enBit  = CMU_OSCENCMD_LFRCOEN;
      disBit = CMU_OSCENCMD_LFRCODIS;
    4286:	2380      	movs	r3, #128	; 0x80
      ensBitPos = _CMU_STATUS_AUXHFRCOENS_SHIFT;
#endif
      break;

    case cmuOsc_LFRCO:
      enBit  = CMU_OSCENCMD_LFRCOEN;
    4288:	2440      	movs	r4, #64	; 0x40
      disBit = CMU_OSCENCMD_LFRCODIS;
      rdyBitPos = _CMU_STATUS_LFRCORDY_SHIFT;
#if defined(_SILICON_LABS_32B_SERIES_1)
      ensBitPos = _CMU_STATUS_LFRCOENS_SHIFT;
#endif
      break;
    428a:	e7eb      	b.n	4264 <CMU_OscillatorEnable+0x20>
      disBit = CMU_OSCENCMD_AUXHFRCODIS;
      rdyBitPos = _CMU_STATUS_AUXHFRCORDY_SHIFT;
#if defined(_SILICON_LABS_32B_SERIES_1)
      ensBitPos = _CMU_STATUS_AUXHFRCOENS_SHIFT;
#endif
      break;
    428c:	4808      	ldr	r0, [pc, #32]	; (42b0 <CMU_OscillatorEnable+0x6c>)
#endif
      break;

    case cmuOsc_AUXHFRCO:
      enBit  = CMU_OSCENCMD_AUXHFRCOEN;
      disBit = CMU_OSCENCMD_AUXHFRCODIS;
    428e:	2320      	movs	r3, #32
      ensBitPos = _CMU_STATUS_HFXOENS_SHIFT;
#endif
      break;

    case cmuOsc_AUXHFRCO:
      enBit  = CMU_OSCENCMD_AUXHFRCOEN;
    4290:	2410      	movs	r4, #16
      disBit = CMU_OSCENCMD_AUXHFRCODIS;
      rdyBitPos = _CMU_STATUS_AUXHFRCORDY_SHIFT;
#if defined(_SILICON_LABS_32B_SERIES_1)
      ensBitPos = _CMU_STATUS_AUXHFRCOENS_SHIFT;
#endif
      break;
    4292:	e7e7      	b.n	4264 <CMU_OscillatorEnable+0x20>
      disBit = CMU_OSCENCMD_LFXODIS;
      rdyBitPos = _CMU_STATUS_LFXORDY_SHIFT;
#if defined(_SILICON_LABS_32B_SERIES_1)
      ensBitPos = _CMU_STATUS_LFXOENS_SHIFT;
#endif
      break;
    4294:	4807      	ldr	r0, [pc, #28]	; (42b4 <CMU_OscillatorEnable+0x70>)
#endif
      break;

    case cmuOsc_LFXO:
      enBit  = CMU_OSCENCMD_LFXOEN;
      disBit = CMU_OSCENCMD_LFXODIS;
    4296:	f44f 7300 	mov.w	r3, #512	; 0x200
      ensBitPos = _CMU_STATUS_LFRCOENS_SHIFT;
#endif
      break;

    case cmuOsc_LFXO:
      enBit  = CMU_OSCENCMD_LFXOEN;
    429a:	f44f 7480 	mov.w	r4, #256	; 0x100
      disBit = CMU_OSCENCMD_LFXODIS;
      rdyBitPos = _CMU_STATUS_LFXORDY_SHIFT;
#if defined(_SILICON_LABS_32B_SERIES_1)
      ensBitPos = _CMU_STATUS_LFXOENS_SHIFT;
#endif
      break;
    429e:	e7e1      	b.n	4264 <CMU_OscillatorEnable+0x20>
    42a0:	400c8000 	.word	0x400c8000
    42a4:	43900584 	.word	0x43900584
    42a8:	4390058c 	.word	0x4390058c
    42ac:	4390059c 	.word	0x4390059c
    42b0:	43900594 	.word	0x43900594
    42b4:	439005a4 	.word	0x439005a4

000042b8 <CORE_EnterAtomic>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    42b8:	f3ef 8010 	mrs	r0, PRIMASK
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    42bc:	b672      	cpsid	i
#else
  CORE_irqState_t irqState = __get_PRIMASK();
  __disable_irq();
  return irqState;
#endif // (CORE_ATOMIC_METHOD == CORE_ATOMIC_METHOD_BASEPRI)
}
    42be:	4770      	bx	lr

000042c0 <CORE_ExitAtomic>:
SL_WEAK void CORE_ExitAtomic(CORE_irqState_t irqState)
{
#if (CORE_ATOMIC_METHOD == CORE_ATOMIC_METHOD_BASEPRI)
  __set_BASEPRI(irqState);
#else
  if (irqState == 0) {
    42c0:	b900      	cbnz	r0, 42c4 <CORE_ExitAtomic+0x4>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    42c2:	b662      	cpsie	i
    42c4:	4770      	bx	lr
    42c6:	bf00      	nop

000042c8 <DMA_IRQHandler>:
  uint32_t               prio;
  uint32_t               primaryCpy;
  int                    i;

  /* Get all pending and enabled interrupts */
  pending  = DMA->IF;
    42c8:	4a1d      	ldr	r2, [pc, #116]	; (4340 <DMA_IRQHandler+0x78>)
    42ca:	4b1e      	ldr	r3, [pc, #120]	; (4344 <DMA_IRQHandler+0x7c>)
  pending &= DMA->IEN;
    42cc:	f241 010c 	movw	r1, #4108	; 0x100c
  uint32_t               prio;
  uint32_t               primaryCpy;
  int                    i;

  /* Get all pending and enabled interrupts */
  pending  = DMA->IF;
    42d0:	681b      	ldr	r3, [r3, #0]
  pending &= DMA->IEN;
    42d2:	5851      	ldr	r1, [r2, r1]
 *   a DMA IRQ handler, the user can define EXCLUDE_DEFAULT_DMA_IRQ_HANDLER
 *   with a \#define statement or with the compiler option -D.
 *
 ******************************************************************************/
void DMA_IRQHandler(void)
{
    42d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    channel = 0;
    /* Process pending interrupts within high/default priority group */
    /* honouring priority within group. */
    while (pendingPrio) {
      if (pendingPrio & 1) {
        DMA_DESCRIPTOR_TypeDef *descr = (DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE);
    42d8:	4616      	mov	r6, r2
  /* Assert on bus error. */
  EFM_ASSERT(!(pending & DMA_IF_ERR));

  /* Process all pending channel interrupts. First process channels */
  /* defined with high priority, then those with default priority. */
  prio        = DMA->CHPRIS;
    42da:	6b92      	ldr	r2, [r2, #56]	; 0x38
        DMA_DESCRIPTOR_TypeDef *descr = (DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE);
        uint32_t chmask = 1 << channel;

        /* Clear pending interrupt prior to invoking callback, in case it */
        /* sets up another DMA cycle. */
        DMA->IFC = chmask;
    42dc:	4f1a      	ldr	r7, [pc, #104]	; (4348 <DMA_IRQHandler+0x80>)
  uint32_t               primaryCpy;
  int                    i;

  /* Get all pending and enabled interrupts */
  pending  = DMA->IF;
  pending &= DMA->IEN;
    42de:	400b      	ands	r3, r1
  EFM_ASSERT(!(pending & DMA_IF_ERR));

  /* Process all pending channel interrupts. First process channels */
  /* defined with high priority, then those with default priority. */
  prio        = DMA->CHPRIS;
  pendingPrio = pending & prio;
    42e0:	ea03 0402 	and.w	r4, r3, r2
    42e4:	ea23 0802 	bic.w	r8, r3, r2
    42e8:	f04f 0902 	mov.w	r9, #2
  for (i = 0; i < 2; i++) {
    channel = 0;
    /* Process pending interrupts within high/default priority group */
    /* honouring priority within group. */
    while (pendingPrio) {
    42ec:	b1fc      	cbz	r4, 432e <DMA_IRQHandler+0x66>
    42ee:	2500      	movs	r5, #0
      if (pendingPrio & 1) {
        DMA_DESCRIPTOR_TypeDef *descr = (DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE);
        uint32_t chmask = 1 << channel;
    42f0:	f04f 0a01 	mov.w	sl, #1
  for (i = 0; i < 2; i++) {
    channel = 0;
    /* Process pending interrupts within high/default priority group */
    /* honouring priority within group. */
    while (pendingPrio) {
      if (pendingPrio & 1) {
    42f4:	07e3      	lsls	r3, r4, #31
        DMA_DESCRIPTOR_TypeDef *descr = (DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE);
        uint32_t chmask = 1 << channel;
    42f6:	fa0a f205 	lsl.w	r2, sl, r5
  for (i = 0; i < 2; i++) {
    channel = 0;
    /* Process pending interrupts within high/default priority group */
    /* honouring priority within group. */
    while (pendingPrio) {
      if (pendingPrio & 1) {
    42fa:	d514      	bpl.n	4326 <DMA_IRQHandler+0x5e>
        DMA_DESCRIPTOR_TypeDef *descr = (DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE);
    42fc:	68b3      	ldr	r3, [r6, #8]
        uint32_t chmask = 1 << channel;

        /* Clear pending interrupt prior to invoking callback, in case it */
        /* sets up another DMA cycle. */
        DMA->IFC = chmask;
    42fe:	603a      	str	r2, [r7, #0]

        /* Normally, no point in enabling interrupt without callback, but */
        /* check if callback is defined anyway. Callback info is always */
        /* located in primary descriptor. */
        cb = (DMA_CB_TypeDef *)(descr[channel].USER);
    4300:	eb03 1305 	add.w	r3, r3, r5, lsl #4
          /* Toggle next-descriptor indicator always prior to invoking */
          /* callback (in case callback reconfigurs something) */
          primaryCpy   = cb->primary;
          cb->primary ^= 1;
          if (cb->cbFunc) {
            cb->cbFunc(channel, (bool)primaryCpy, cb->userPtr);
    4304:	4628      	mov	r0, r5
        DMA->IFC = chmask;

        /* Normally, no point in enabling interrupt without callback, but */
        /* check if callback is defined anyway. Callback info is always */
        /* located in primary descriptor. */
        cb = (DMA_CB_TypeDef *)(descr[channel].USER);
    4306:	68db      	ldr	r3, [r3, #12]
        if (cb) {
    4308:	b16b      	cbz	r3, 4326 <DMA_IRQHandler+0x5e>
          /* Toggle next-descriptor indicator always prior to invoking */
          /* callback (in case callback reconfigurs something) */
          primaryCpy   = cb->primary;
    430a:	7a19      	ldrb	r1, [r3, #8]
          cb->primary ^= 1;
          if (cb->cbFunc) {
    430c:	f8d3 c000 	ldr.w	ip, [r3]
        cb = (DMA_CB_TypeDef *)(descr[channel].USER);
        if (cb) {
          /* Toggle next-descriptor indicator always prior to invoking */
          /* callback (in case callback reconfigurs something) */
          primaryCpy   = cb->primary;
          cb->primary ^= 1;
    4310:	f081 0201 	eor.w	r2, r1, #1
          if (cb->cbFunc) {
            cb->cbFunc(channel, (bool)primaryCpy, cb->userPtr);
    4314:	3100      	adds	r1, #0
    4316:	bf18      	it	ne
    4318:	2101      	movne	r1, #1
        cb = (DMA_CB_TypeDef *)(descr[channel].USER);
        if (cb) {
          /* Toggle next-descriptor indicator always prior to invoking */
          /* callback (in case callback reconfigurs something) */
          primaryCpy   = cb->primary;
          cb->primary ^= 1;
    431a:	721a      	strb	r2, [r3, #8]
          if (cb->cbFunc) {
    431c:	f1bc 0f00 	cmp.w	ip, #0
    4320:	d001      	beq.n	4326 <DMA_IRQHandler+0x5e>
            cb->cbFunc(channel, (bool)primaryCpy, cb->userPtr);
    4322:	685a      	ldr	r2, [r3, #4]
    4324:	47e0      	blx	ip
  pendingPrio = pending & prio;
  for (i = 0; i < 2; i++) {
    channel = 0;
    /* Process pending interrupts within high/default priority group */
    /* honouring priority within group. */
    while (pendingPrio) {
    4326:	0864      	lsrs	r4, r4, #1
          }
        }
      }

      pendingPrio >>= 1;
      channel++;
    4328:	f105 0501 	add.w	r5, r5, #1
  pendingPrio = pending & prio;
  for (i = 0; i < 2; i++) {
    channel = 0;
    /* Process pending interrupts within high/default priority group */
    /* honouring priority within group. */
    while (pendingPrio) {
    432c:	d1e2      	bne.n	42f4 <DMA_IRQHandler+0x2c>

  /* Process all pending channel interrupts. First process channels */
  /* defined with high priority, then those with default priority. */
  prio        = DMA->CHPRIS;
  pendingPrio = pending & prio;
  for (i = 0; i < 2; i++) {
    432e:	f1b9 0f01 	cmp.w	r9, #1
    4332:	d003      	beq.n	433c <DMA_IRQHandler+0x74>
    4334:	f04f 0901 	mov.w	r9, #1
      pendingPrio >>= 1;
      channel++;
    }

    /* On second iteration, process default priority channels */
    pendingPrio = pending & ~prio;
    4338:	4644      	mov	r4, r8
    433a:	e7d7      	b.n	42ec <DMA_IRQHandler+0x24>
    433c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4340:	400c2000 	.word	0x400c2000
    4344:	400c3000 	.word	0x400c3000
    4348:	400c3008 	.word	0x400c3008

0000434c <DMA_ActivatePingPong>:
                          const void *primSrc,
                          unsigned int primNMinus1,
                          void *altDst,
                          const void *altSrc,
                          unsigned int altNMinus1)
{
    434c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  DMA_CB_TypeDef         *cb;
  uint32_t               inc;
  uint32_t               chBit;
  uint32_t               tmp;

  primDescr = ((DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE)) + channel;
    4350:	4c3b      	ldr	r4, [pc, #236]	; (4440 <DMA_ActivatePingPong+0xf4>)
                          const void *primSrc,
                          unsigned int primNMinus1,
                          void *altDst,
                          const void *altSrc,
                          unsigned int altNMinus1)
{
    4352:	9d08      	ldr	r5, [sp, #32]
  DMA_CB_TypeDef         *cb;
  uint32_t               inc;
  uint32_t               chBit;
  uint32_t               tmp;

  primDescr = ((DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE)) + channel;
    4354:	68a7      	ldr	r7, [r4, #8]

  /* Find descriptor to configure */
  if (primary) {
    descr = primDescr;
  } else {
    descr = ((DMA_DESCRIPTOR_TypeDef *)(DMA->ALTCTRLBASE)) + channel;
    4356:	f8d4 c00c 	ldr.w	ip, [r4, #12]
  DMA_CB_TypeDef         *cb;
  uint32_t               inc;
  uint32_t               chBit;
  uint32_t               tmp;

  primDescr = ((DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE)) + channel;
    435a:	0106      	lsls	r6, r0, #4
    435c:	4437      	add	r7, r6
                          const void *primSrc,
                          unsigned int primNMinus1,
                          void *altDst,
                          const void *altSrc,
                          unsigned int altNMinus1)
{
    435e:	ac09      	add	r4, sp, #36	; 0x24
  }

  /* If callback defined, update info on whether callback is issued */
  /* for primary or alternate descriptor. Mainly needed for ping-pong */
  /* cycles. */
  cb = (DMA_CB_TypeDef *)(primDescr->USER);
    4360:	f8d7 900c 	ldr.w	r9, [r7, #12]
                          const void *primSrc,
                          unsigned int primNMinus1,
                          void *altDst,
                          const void *altSrc,
                          unsigned int altNMinus1)
{
    4364:	e894 4110 	ldmia.w	r4, {r4, r8, lr}

  /* Find descriptor to configure */
  if (primary) {
    descr = primDescr;
  } else {
    descr = ((DMA_DESCRIPTOR_TypeDef *)(DMA->ALTCTRLBASE)) + channel;
    4368:	eb06 070c 	add.w	r7, r6, ip

  /* If callback defined, update info on whether callback is issued */
  /* for primary or alternate descriptor. Mainly needed for ping-pong */
  /* cycles. */
  cb = (DMA_CB_TypeDef *)(primDescr->USER);
  if (cb) {
    436c:	f1b9 0f00 	cmp.w	r9, #0
    4370:	d003      	beq.n	437a <DMA_ActivatePingPong+0x2e>
    cb->primary = (uint8_t)primary;
    4372:	f04f 0a00 	mov.w	sl, #0
    4376:	f889 a008 	strb.w	sl, [r9, #8]
  }

  if (src) {
    437a:	f1b8 0f00 	cmp.w	r8, #0
    437e:	d00b      	beq.n	4398 <DMA_ActivatePingPong+0x4c>
    inc = (descr->CTRL & _DMA_CTRL_SRC_INC_MASK) >> _DMA_CTRL_SRC_INC_SHIFT;
    4380:	f8d7 9008 	ldr.w	r9, [r7, #8]
    4384:	f3c9 6981 	ubfx	r9, r9, #26, #2
    if (inc == _DMA_CTRL_SRC_INC_NONE) {
    4388:	f1b9 0f03 	cmp.w	r9, #3
      descr->SRCEND = (volatile void*)src;
    } else {
      descr->SRCEND = (void *)((uint32_t)src + (nMinus1 << inc));
    438c:	bf1c      	itt	ne
    438e:	fa0e f909 	lslne.w	r9, lr, r9
    4392:	44c8      	addne	r8, r9
    4394:	f846 800c 	str.w	r8, [r6, ip]
    }
  }

  if (dst) {
    4398:	b154      	cbz	r4, 43b0 <DMA_ActivatePingPong+0x64>
    inc = (descr->CTRL & _DMA_CTRL_DST_INC_MASK) >> _DMA_CTRL_DST_INC_SHIFT;
    439a:	f8d7 c008 	ldr.w	ip, [r7, #8]
    439e:	ea4f 7c9c 	mov.w	ip, ip, lsr #30
    if (inc == _DMA_CTRL_DST_INC_NONE) {
    43a2:	f1bc 0f03 	cmp.w	ip, #3
      descr->DSTEND = dst;
    } else {
      descr->DSTEND = (void *)((uint32_t)dst + (nMinus1 << inc));
    43a6:	bf1c      	itt	ne
    43a8:	fa0e fc0c 	lslne.w	ip, lr, ip
    43ac:	4464      	addne	r4, ip
    43ae:	607c      	str	r4, [r7, #4]
    }
  }

  chBit = 1 << channel;
    43b0:	2401      	movs	r4, #1
    43b2:	4084      	lsls	r4, r0
  if (useBurst) {
    DMA->CHUSEBURSTS = chBit;
    43b4:	4822      	ldr	r0, [pc, #136]	; (4440 <DMA_ActivatePingPong+0xf4>)
      descr->DSTEND = (void *)((uint32_t)dst + (nMinus1 << inc));
    }
  }

  chBit = 1 << channel;
  if (useBurst) {
    43b6:	2900      	cmp	r1, #0
    43b8:	d03e      	beq.n	4438 <DMA_ActivatePingPong+0xec>
    DMA->CHUSEBURSTS = chBit;
    43ba:	6184      	str	r4, [r0, #24]
  }

  if (primary) {
    DMA->CHALTC = chBit;
  } else {
    DMA->CHALTS = chBit;
    43bc:	f8df c080 	ldr.w	ip, [pc, #128]	; 4440 <DMA_ActivatePingPong+0xf4>
    43c0:	f8cc 4030 	str.w	r4, [ip, #48]	; 0x30
  }

  /* Set cycle control */
  tmp  = descr->CTRL & ~(_DMA_CTRL_CYCLE_CTRL_MASK | _DMA_CTRL_N_MINUS_1_MASK);
    43c4:	68b8      	ldr	r0, [r7, #8]
    43c6:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
    43ca:	f020 0037 	bic.w	r0, r0, #55	; 0x37
    43ce:	f040 0003 	orr.w	r0, r0, #3
  tmp |= nMinus1 << _DMA_CTRL_N_MINUS_1_SHIFT;
  tmp |= (uint32_t)cycleCtrl << _DMA_CTRL_CYCLE_CTRL_SHIFT;
    43d2:	ea40 100e 	orr.w	r0, r0, lr, lsl #4
  descr->CTRL = tmp;
    43d6:	60b8      	str	r0, [r7, #8]
  DMA_CB_TypeDef         *cb;
  uint32_t               inc;
  uint32_t               chBit;
  uint32_t               tmp;

  primDescr = ((DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE)) + channel;
    43d8:	f8dc e008 	ldr.w	lr, [ip, #8]
    43dc:	eb06 000e 	add.w	r0, r6, lr
  }

  /* If callback defined, update info on whether callback is issued */
  /* for primary or alternate descriptor. Mainly needed for ping-pong */
  /* cycles. */
  cb = (DMA_CB_TypeDef *)(primDescr->USER);
    43e0:	68c7      	ldr	r7, [r0, #12]
  if (cb) {
    43e2:	b11f      	cbz	r7, 43ec <DMA_ActivatePingPong+0xa0>
    cb->primary = (uint8_t)primary;
    43e4:	f04f 0c01 	mov.w	ip, #1
    43e8:	f887 c008 	strb.w	ip, [r7, #8]
  }

  if (src) {
    43ec:	b14b      	cbz	r3, 4402 <DMA_ActivatePingPong+0xb6>
    inc = (descr->CTRL & _DMA_CTRL_SRC_INC_MASK) >> _DMA_CTRL_SRC_INC_SHIFT;
    43ee:	6887      	ldr	r7, [r0, #8]
    43f0:	f3c7 6781 	ubfx	r7, r7, #26, #2
    if (inc == _DMA_CTRL_SRC_INC_NONE) {
    43f4:	2f03      	cmp	r7, #3
      descr->SRCEND = (volatile void*)src;
    } else {
      descr->SRCEND = (void *)((uint32_t)src + (nMinus1 << inc));
    43f6:	bf1c      	itt	ne
    43f8:	fa05 f707 	lslne.w	r7, r5, r7
    43fc:	19db      	addne	r3, r3, r7
    43fe:	f846 300e 	str.w	r3, [r6, lr]
    }
  }

  if (dst) {
    4402:	b13a      	cbz	r2, 4414 <DMA_ActivatePingPong+0xc8>
    inc = (descr->CTRL & _DMA_CTRL_DST_INC_MASK) >> _DMA_CTRL_DST_INC_SHIFT;
    4404:	6883      	ldr	r3, [r0, #8]
    4406:	0f9b      	lsrs	r3, r3, #30
    if (inc == _DMA_CTRL_DST_INC_NONE) {
    4408:	2b03      	cmp	r3, #3
      descr->DSTEND = dst;
    } else {
      descr->DSTEND = (void *)((uint32_t)dst + (nMinus1 << inc));
    440a:	bf1c      	itt	ne
    440c:	fa05 f303 	lslne.w	r3, r5, r3
    4410:	18d2      	addne	r2, r2, r3
    4412:	6042      	str	r2, [r0, #4]
    }
  }

  chBit = 1 << channel;
  if (useBurst) {
    DMA->CHUSEBURSTS = chBit;
    4414:	4b0a      	ldr	r3, [pc, #40]	; (4440 <DMA_ActivatePingPong+0xf4>)
      descr->DSTEND = (void *)((uint32_t)dst + (nMinus1 << inc));
    }
  }

  chBit = 1 << channel;
  if (useBurst) {
    4416:	b189      	cbz	r1, 443c <DMA_ActivatePingPong+0xf0>
    DMA->CHUSEBURSTS = chBit;
    4418:	619c      	str	r4, [r3, #24]
  } else {
    DMA->CHUSEBURSTC = chBit;
  }

  if (primary) {
    DMA->CHALTC = chBit;
    441a:	4a09      	ldr	r2, [pc, #36]	; (4440 <DMA_ActivatePingPong+0xf4>)
    441c:	6354      	str	r4, [r2, #52]	; 0x34
  } else {
    DMA->CHALTS = chBit;
  }

  /* Set cycle control */
  tmp  = descr->CTRL & ~(_DMA_CTRL_CYCLE_CTRL_MASK | _DMA_CTRL_N_MINUS_1_MASK);
    441e:	6883      	ldr	r3, [r0, #8]
    4420:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
    4424:	f023 0337 	bic.w	r3, r3, #55	; 0x37
    4428:	f043 0303 	orr.w	r3, r3, #3
  tmp |= nMinus1 << _DMA_CTRL_N_MINUS_1_SHIFT;
  tmp |= (uint32_t)cycleCtrl << _DMA_CTRL_CYCLE_CTRL_SHIFT;
    442c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  descr->CTRL = tmp;
    4430:	6083      	str	r3, [r0, #8]
              primDst,
              primSrc,
              primNMinus1);

  /* Enable channel, request signal is provided by peripheral device */
  DMA->CHENS = 1 << channel;
    4432:	6294      	str	r4, [r2, #40]	; 0x28
    4434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  chBit = 1 << channel;
  if (useBurst) {
    DMA->CHUSEBURSTS = chBit;
  } else {
    DMA->CHUSEBURSTC = chBit;
    4438:	61c4      	str	r4, [r0, #28]
    443a:	e7bf      	b.n	43bc <DMA_ActivatePingPong+0x70>
    443c:	61dc      	str	r4, [r3, #28]
    443e:	e7ec      	b.n	441a <DMA_ActivatePingPong+0xce>
    4440:	400c2000 	.word	0x400c2000

00004444 <DMA_CfgChannel>:

  EFM_ASSERT(channel < DMA_CHAN_COUNT);
  EFM_ASSERT(cfg);

  /* Always keep callback configuration reference in primary descriptor */
  descr               = (DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE);
    4444:	4a12      	ldr	r2, [pc, #72]	; (4490 <DMA_CfgChannel+0x4c>)
    4446:	6893      	ldr	r3, [r2, #8]
  descr[channel].USER = (uint32_t)(cfg->cb);
    4448:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 *
 * @param[in] cfg
 *   Configuration to use.
 ******************************************************************************/
void DMA_CfgChannel(unsigned int channel, DMA_CfgChannel_TypeDef *cfg)
{
    444c:	b430      	push	{r4, r5}
  /* Always keep callback configuration reference in primary descriptor */
  descr               = (DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE);
  descr[channel].USER = (uint32_t)(cfg->cb);

  /* Set to specified priority for channel */
  if (cfg->highPri) {
    444e:	780c      	ldrb	r4, [r1, #0]
  EFM_ASSERT(channel < DMA_CHAN_COUNT);
  EFM_ASSERT(cfg);

  /* Always keep callback configuration reference in primary descriptor */
  descr               = (DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE);
  descr[channel].USER = (uint32_t)(cfg->cb);
    4450:	688d      	ldr	r5, [r1, #8]
    4452:	60dd      	str	r5, [r3, #12]

  /* Set to specified priority for channel */
  if (cfg->highPri) {
    DMA->CHPRIS = 1 << channel;
    4454:	2301      	movs	r3, #1
    4456:	4083      	lsls	r3, r0
  /* Always keep callback configuration reference in primary descriptor */
  descr               = (DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE);
  descr[channel].USER = (uint32_t)(cfg->cb);

  /* Set to specified priority for channel */
  if (cfg->highPri) {
    4458:	b174      	cbz	r4, 4478 <DMA_CfgChannel+0x34>
    DMA->CHPRIS = 1 << channel;
    445a:	6393      	str	r3, [r2, #56]	; 0x38

  /* Set DMA signal source select */
  DMA->CH[channel].CTRL = cfg->select;

  /* Enable/disable interrupt as specified */
  if (cfg->enableInt) {
    445c:	784a      	ldrb	r2, [r1, #1]
  } else {
    DMA->CHPRIC = 1 << channel;
  }

  /* Set DMA signal source select */
  DMA->CH[channel].CTRL = cfg->select;
    445e:	684d      	ldr	r5, [r1, #4]
    4460:	4c0b      	ldr	r4, [pc, #44]	; (4490 <DMA_CfgChannel+0x4c>)
    4462:	f500 6188 	add.w	r1, r0, #1088	; 0x440
    4466:	f844 5021 	str.w	r5, [r4, r1, lsl #2]

  /* Enable/disable interrupt as specified */
  if (cfg->enableInt) {
    446a:	b93a      	cbnz	r2, 447c <DMA_CfgChannel+0x38>
                                     unsigned int bit,
                                     unsigned int val)
{
#if defined(BITBAND_PER_BASE)
  uint32_t aliasAddr =
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);
    446c:	4b09      	ldr	r3, [pc, #36]	; (4494 <DMA_CfgChannel+0x50>)
    446e:	4403      	add	r3, r0
__STATIC_INLINE void BUS_RegBitWrite(volatile uint32_t *addr,
                                     unsigned int bit,
                                     unsigned int val)
{
#if defined(BITBAND_PER_BASE)
  uint32_t aliasAddr =
    4470:	009b      	lsls	r3, r3, #2
    DMA->IFC = (1 << channel);
    BUS_RegBitWrite(&(DMA->IEN), channel, 1);
  } else {
    BUS_RegBitWrite(&(DMA->IEN), channel, 0);
  }
}
    4472:	bc30      	pop	{r4, r5}
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);

  *(volatile uint32_t *)aliasAddr = (uint32_t)val;
    4474:	601a      	str	r2, [r3, #0]
    4476:	4770      	bx	lr

  /* Set to specified priority for channel */
  if (cfg->highPri) {
    DMA->CHPRIS = 1 << channel;
  } else {
    DMA->CHPRIC = 1 << channel;
    4478:	63d3      	str	r3, [r2, #60]	; 0x3c
    447a:	e7ef      	b.n	445c <DMA_CfgChannel+0x18>
                                     unsigned int bit,
                                     unsigned int val)
{
#if defined(BITBAND_PER_BASE)
  uint32_t aliasAddr =
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);
    447c:	4a05      	ldr	r2, [pc, #20]	; (4494 <DMA_CfgChannel+0x50>)
    447e:	4402      	add	r2, r0
__STATIC_INLINE void BUS_RegBitWrite(volatile uint32_t *addr,
                                     unsigned int bit,
                                     unsigned int val)
{
#if defined(BITBAND_PER_BASE)
  uint32_t aliasAddr =
    4480:	0092      	lsls	r2, r2, #2
  /* Set DMA signal source select */
  DMA->CH[channel].CTRL = cfg->select;

  /* Enable/disable interrupt as specified */
  if (cfg->enableInt) {
    DMA->IFC = (1 << channel);
    4482:	f241 0008 	movw	r0, #4104	; 0x1008
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);

  *(volatile uint32_t *)aliasAddr = (uint32_t)val;
    4486:	2101      	movs	r1, #1
    4488:	5023      	str	r3, [r4, r0]
    448a:	6011      	str	r1, [r2, #0]
    BUS_RegBitWrite(&(DMA->IEN), channel, 1);
  } else {
    BUS_RegBitWrite(&(DMA->IEN), channel, 0);
  }
}
    448c:	bc30      	pop	{r4, r5}
    448e:	4770      	bx	lr
    4490:	400c2000 	.word	0x400c2000
    4494:	10e18060 	.word	0x10e18060

00004498 <DMA_CfgDescr>:
 *   Configuration to use.
 ******************************************************************************/
void DMA_CfgDescr(unsigned int channel,
                  bool primary,
                  DMA_CfgDescr_TypeDef *cfg)
{
    4498:	b4f0      	push	{r4, r5, r6, r7}
  EFM_ASSERT(channel < DMA_CHAN_COUNT);
  EFM_ASSERT(cfg);

  /* Find descriptor to configure */
  if (primary) {
    descr = (DMA_DESCRIPTOR_TypeDef *)DMA->CTRLBASE;
    449a:	4b0d      	ldr	r3, [pc, #52]	; (44d0 <DMA_CfgDescr+0x38>)

  EFM_ASSERT(channel < DMA_CHAN_COUNT);
  EFM_ASSERT(cfg);

  /* Find descriptor to configure */
  if (primary) {
    449c:	b9a9      	cbnz	r1, 44ca <DMA_CfgDescr+0x32>
    descr = (DMA_DESCRIPTOR_TypeDef *)DMA->CTRLBASE;
  } else {
    descr = (DMA_DESCRIPTOR_TypeDef *)DMA->ALTCTRLBASE;
    449e:	68dd      	ldr	r5, [r3, #12]
  }
  descr += channel;

  /* Prepare the descriptor */
  /* Source/destination end addresses set when started */
  descr->CTRL = (cfg->dstInc << _DMA_CTRL_DST_INC_SHIFT)
    44a0:	7811      	ldrb	r1, [r2, #0]
                | (cfg->size << _DMA_CTRL_DST_SIZE_SHIFT)
    44a2:	7896      	ldrb	r6, [r2, #2]
                | (cfg->srcInc << _DMA_CTRL_SRC_INC_SHIFT)
                | (cfg->size << _DMA_CTRL_SRC_SIZE_SHIFT)
                | ((uint32_t)(cfg->hprot) << _DMA_CTRL_SRC_PROT_CTRL_SHIFT)
    44a4:	7914      	ldrb	r4, [r2, #4]

  /* Prepare the descriptor */
  /* Source/destination end addresses set when started */
  descr->CTRL = (cfg->dstInc << _DMA_CTRL_DST_INC_SHIFT)
                | (cfg->size << _DMA_CTRL_DST_SIZE_SHIFT)
                | (cfg->srcInc << _DMA_CTRL_SRC_INC_SHIFT)
    44a6:	7857      	ldrb	r7, [r2, #1]
                | (cfg->size << _DMA_CTRL_SRC_SIZE_SHIFT)
                | ((uint32_t)(cfg->hprot) << _DMA_CTRL_SRC_PROT_CTRL_SHIFT)
                | (cfg->arbRate << _DMA_CTRL_R_POWER_SHIFT)
    44a8:	78d3      	ldrb	r3, [r2, #3]
  }
  descr += channel;

  /* Prepare the descriptor */
  /* Source/destination end addresses set when started */
  descr->CTRL = (cfg->dstInc << _DMA_CTRL_DST_INC_SHIFT)
    44aa:	0789      	lsls	r1, r1, #30
                | (cfg->size << _DMA_CTRL_DST_SIZE_SHIFT)
    44ac:	ea41 7106 	orr.w	r1, r1, r6, lsl #28
                | (cfg->srcInc << _DMA_CTRL_SRC_INC_SHIFT)
    44b0:	ea41 6287 	orr.w	r2, r1, r7, lsl #26
                | (cfg->size << _DMA_CTRL_SRC_SIZE_SHIFT)
                | ((uint32_t)(cfg->hprot) << _DMA_CTRL_SRC_PROT_CTRL_SHIFT)
    44b4:	04a1      	lsls	r1, r4, #18
  if (primary) {
    descr = (DMA_DESCRIPTOR_TypeDef *)DMA->CTRLBASE;
  } else {
    descr = (DMA_DESCRIPTOR_TypeDef *)DMA->ALTCTRLBASE;
  }
  descr += channel;
    44b6:	eb05 1000 	add.w	r0, r5, r0, lsl #4
  /* Prepare the descriptor */
  /* Source/destination end addresses set when started */
  descr->CTRL = (cfg->dstInc << _DMA_CTRL_DST_INC_SHIFT)
                | (cfg->size << _DMA_CTRL_DST_SIZE_SHIFT)
                | (cfg->srcInc << _DMA_CTRL_SRC_INC_SHIFT)
                | (cfg->size << _DMA_CTRL_SRC_SIZE_SHIFT)
    44ba:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
    44be:	ea41 3383 	orr.w	r3, r1, r3, lsl #14
                | ((uint32_t)(cfg->hprot) << _DMA_CTRL_SRC_PROT_CTRL_SHIFT)
                | (cfg->arbRate << _DMA_CTRL_R_POWER_SHIFT)
                | (0 << _DMA_CTRL_N_MINUS_1_SHIFT)     /* Set when activated */
                | (0 << _DMA_CTRL_NEXT_USEBURST_SHIFT) /* Set when activated */
                | DMA_CTRL_CYCLE_CTRL_INVALID;         /* Set when activated */
    44c2:	4313      	orrs	r3, r2
  }
  descr += channel;

  /* Prepare the descriptor */
  /* Source/destination end addresses set when started */
  descr->CTRL = (cfg->dstInc << _DMA_CTRL_DST_INC_SHIFT)
    44c4:	6083      	str	r3, [r0, #8]
                | ((uint32_t)(cfg->hprot) << _DMA_CTRL_SRC_PROT_CTRL_SHIFT)
                | (cfg->arbRate << _DMA_CTRL_R_POWER_SHIFT)
                | (0 << _DMA_CTRL_N_MINUS_1_SHIFT)     /* Set when activated */
                | (0 << _DMA_CTRL_NEXT_USEBURST_SHIFT) /* Set when activated */
                | DMA_CTRL_CYCLE_CTRL_INVALID;         /* Set when activated */
}
    44c6:	bcf0      	pop	{r4, r5, r6, r7}
    44c8:	4770      	bx	lr
  EFM_ASSERT(channel < DMA_CHAN_COUNT);
  EFM_ASSERT(cfg);

  /* Find descriptor to configure */
  if (primary) {
    descr = (DMA_DESCRIPTOR_TypeDef *)DMA->CTRLBASE;
    44ca:	689d      	ldr	r5, [r3, #8]
    44cc:	e7e8      	b.n	44a0 <DMA_CfgDescr+0x8>
    44ce:	bf00      	nop
    44d0:	400c2000 	.word	0x400c2000

000044d4 <DMA_Init>:
 *
 * @param[in] init
 *   Pointer to a structure containing DMA init information.
 ******************************************************************************/
void DMA_Init(DMA_Init_TypeDef *init)
{
    44d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
#error "Unsupported DMA channel count (em_dma.c)."
#endif

  /* Make sure DMA clock is enabled prior to accessing DMA module */
  CMU_ClockEnable(cmuClock_DMA, true);
    44d8:	2101      	movs	r1, #1
 *
 * @param[in] init
 *   Pointer to a structure containing DMA init information.
 ******************************************************************************/
void DMA_Init(DMA_Init_TypeDef *init)
{
    44da:	b083      	sub	sp, #12
    44dc:	4606      	mov	r6, r0
#else
#error "Unsupported DMA channel count (em_dma.c)."
#endif

  /* Make sure DMA clock is enabled prior to accessing DMA module */
  CMU_ClockEnable(cmuClock_DMA, true);
    44de:	482e      	ldr	r0, [pc, #184]	; (4598 <DMA_Init+0xc4>)
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    44e0:	4d2e      	ldr	r5, [pc, #184]	; (459c <DMA_Init+0xc8>)
  DMA->CHENC       = _DMA_CHENC_MASK;
  DMA->CHALTC      = _DMA_CHALTC_MASK;
  DMA->CHPRIC      = _DMA_CHPRIC_MASK;
  DMA->ERRORC      = DMA_ERRORC_ERRORC;
  DMA->IEN         = _DMA_IEN_RESETVALUE;
  DMA->IFC         = _DMA_IFC_MASK;
    44e2:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 45a8 <DMA_Init+0xd4>
#else
#error "Unsupported DMA channel count (em_dma.c)."
#endif

  /* Make sure DMA clock is enabled prior to accessing DMA module */
  CMU_ClockEnable(cmuClock_DMA, true);
    44e6:	f7ff fcb7 	bl	3e58 <CMU_ClockEnable>

  /* Disable DMA interrupts */
  NVIC_DisableIRQ(DMA_IRQn);

  /* Put the DMA controller into a known state, first disabling it. */
  DMA->CONFIG      = _DMA_CONFIG_RESETVALUE;
    44ea:	4a2d      	ldr	r2, [pc, #180]	; (45a0 <DMA_Init+0xcc>)
  DMA->IEN = DMA_IEN_ERR;

  /* Set pointer to control block, notice that this ptr must have been */
  /* properly aligned, according to requirements defined in the reference */
  /* manual. */
  DMA->CTRLBASE = (uint32_t)(init->controlBlock);
    44ec:	6873      	ldr	r3, [r6, #4]
  DMA->IEN         = _DMA_IEN_RESETVALUE;
  DMA->IFC         = _DMA_IFC_MASK;

  /* Clear channel control flags */
  for (i = 0; i < DMA_CHAN_COUNT; i++) {
    DMA->CH[i].CTRL = _DMA_CH_CTRL_RESETVALUE;
    44ee:	492d      	ldr	r1, [pc, #180]	; (45a4 <DMA_Init+0xd0>)
  DMA->IEN = DMA_IEN_ERR;

  /* Set pointer to control block, notice that this ptr must have been */
  /* properly aligned, according to requirements defined in the reference */
  /* manual. */
  DMA->CTRLBASE = (uint32_t)(init->controlBlock);
    44f0:	9301      	str	r3, [sp, #4]
  DMA->CHREQMASKC  = _DMA_CHREQMASKC_MASK;
  DMA->CHENC       = _DMA_CHENC_MASK;
  DMA->CHALTC      = _DMA_CHALTC_MASK;
  DMA->CHPRIC      = _DMA_CHPRIC_MASK;
  DMA->ERRORC      = DMA_ERRORC_ERRORC;
  DMA->IEN         = _DMA_IEN_RESETVALUE;
    44f2:	f241 070c 	movw	r7, #4108	; 0x100c
  DMA->IFC         = _DMA_IFC_MASK;
    44f6:	f241 0a08 	movw	sl, #4104	; 0x1008

  /* Disable DMA interrupts */
  NVIC_DisableIRQ(DMA_IRQn);

  /* Put the DMA controller into a known state, first disabling it. */
  DMA->CONFIG      = _DMA_CONFIG_RESETVALUE;
    44fa:	2300      	movs	r3, #0
    44fc:	2401      	movs	r4, #1
  DMA->CHUSEBURSTC = _DMA_CHUSEBURSTC_MASK;
    44fe:	f640 70ff 	movw	r0, #4095	; 0xfff
  DMA->IEN         = _DMA_IEN_RESETVALUE;
  DMA->IFC         = _DMA_IFC_MASK;

  /* Clear channel control flags */
  for (i = 0; i < DMA_CHAN_COUNT; i++) {
    DMA->CH[i].CTRL = _DMA_CH_CTRL_RESETVALUE;
    4502:	f502 5988 	add.w	r9, r2, #4352	; 0x1100
    4506:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
    450a:	f501 5888 	add.w	r8, r1, #4352	; 0x1100

  /* Disable DMA interrupts */
  NVIC_DisableIRQ(DMA_IRQn);

  /* Put the DMA controller into a known state, first disabling it. */
  DMA->CONFIG      = _DMA_CONFIG_RESETVALUE;
    450e:	6053      	str	r3, [r2, #4]
  DMA->IEN         = _DMA_IEN_RESETVALUE;
  DMA->IFC         = _DMA_IFC_MASK;

  /* Clear channel control flags */
  for (i = 0; i < DMA_CHAN_COUNT; i++) {
    DMA->CH[i].CTRL = _DMA_CH_CTRL_RESETVALUE;
    4510:	f241 1c04 	movw	ip, #4356	; 0x1104
  /* Disable DMA interrupts */
  NVIC_DisableIRQ(DMA_IRQn);

  /* Put the DMA controller into a known state, first disabling it. */
  DMA->CONFIG      = _DMA_CONFIG_RESETVALUE;
  DMA->CHUSEBURSTC = _DMA_CHUSEBURSTC_MASK;
    4514:	61d0      	str	r0, [r2, #28]
  DMA->IEN         = _DMA_IEN_RESETVALUE;
  DMA->IFC         = _DMA_IFC_MASK;

  /* Clear channel control flags */
  for (i = 0; i < DMA_CHAN_COUNT; i++) {
    DMA->CH[i].CTRL = _DMA_CH_CTRL_RESETVALUE;
    4516:	f241 1e08 	movw	lr, #4360	; 0x1108
  NVIC_DisableIRQ(DMA_IRQn);

  /* Put the DMA controller into a known state, first disabling it. */
  DMA->CONFIG      = _DMA_CONFIG_RESETVALUE;
  DMA->CHUSEBURSTC = _DMA_CHUSEBURSTC_MASK;
  DMA->CHREQMASKC  = _DMA_CHREQMASKC_MASK;
    451a:	6250      	str	r0, [r2, #36]	; 0x24
  DMA->CHENC       = _DMA_CHENC_MASK;
    451c:	62d0      	str	r0, [r2, #44]	; 0x2c
  DMA->CHALTC      = _DMA_CHALTC_MASK;
    451e:	6350      	str	r0, [r2, #52]	; 0x34
  DMA->CHPRIC      = _DMA_CHPRIC_MASK;
    4520:	63d0      	str	r0, [r2, #60]	; 0x3c
  DMA->ERRORC      = DMA_ERRORC_ERRORC;
    4522:	64d4      	str	r4, [r2, #76]	; 0x4c
  DMA->IEN         = _DMA_IEN_RESETVALUE;
  DMA->IFC         = _DMA_IFC_MASK;

  /* Clear channel control flags */
  for (i = 0; i < DMA_CHAN_COUNT; i++) {
    DMA->CH[i].CTRL = _DMA_CH_CTRL_RESETVALUE;
    4524:	f241 100c 	movw	r0, #4364	; 0x110c
  DMA->CHREQMASKC  = _DMA_CHREQMASKC_MASK;
  DMA->CHENC       = _DMA_CHENC_MASK;
  DMA->CHALTC      = _DMA_CHALTC_MASK;
  DMA->CHPRIC      = _DMA_CHPRIC_MASK;
  DMA->ERRORC      = DMA_ERRORC_ERRORC;
  DMA->IEN         = _DMA_IEN_RESETVALUE;
    4528:	51d3      	str	r3, [r2, r7]
  DMA->IFC         = _DMA_IFC_MASK;
    452a:	f842 b00a 	str.w	fp, [r2, sl]

  /* Clear channel control flags */
  for (i = 0; i < DMA_CHAN_COUNT; i++) {
    DMA->CH[i].CTRL = _DMA_CH_CTRL_RESETVALUE;
    452e:	f241 1a10 	movw	sl, #4368	; 0x1110
    4532:	f8c9 3000 	str.w	r3, [r9]
    4536:	f241 1914 	movw	r9, #4372	; 0x1114
    453a:	f8c8 3000 	str.w	r3, [r8]
    453e:	f841 300c 	str.w	r3, [r1, ip]
    4542:	f241 1818 	movw	r8, #4376	; 0x1118
    4546:	f841 300e 	str.w	r3, [r1, lr]
    454a:	f241 1c1c 	movw	ip, #4380	; 0x111c
    454e:	500b      	str	r3, [r1, r0]
    4550:	f501 5e89 	add.w	lr, r1, #4384	; 0x1120
    4554:	f841 300a 	str.w	r3, [r1, sl]
    4558:	f241 1024 	movw	r0, #4388	; 0x1124
    455c:	f241 1a28 	movw	sl, #4392	; 0x1128
    4560:	f841 3009 	str.w	r3, [r1, r9]
  /* Clear/enable DMA interrupts */
  NVIC_ClearPendingIRQ(DMA_IRQn);
  NVIC_EnableIRQ(DMA_IRQn);

  /* Enable bus error interrupt */
  DMA->IEN = DMA_IEN_ERR;
    4564:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
  DMA->IEN         = _DMA_IEN_RESETVALUE;
  DMA->IFC         = _DMA_IFC_MASK;

  /* Clear channel control flags */
  for (i = 0; i < DMA_CHAN_COUNT; i++) {
    DMA->CH[i].CTRL = _DMA_CH_CTRL_RESETVALUE;
    4568:	f841 3008 	str.w	r3, [r1, r8]
    456c:	f841 300c 	str.w	r3, [r1, ip]
    4570:	f8ce 3000 	str.w	r3, [lr]
    4574:	500b      	str	r3, [r1, r0]
    4576:	f841 300a 	str.w	r3, [r1, sl]
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    457a:	f8c5 4180 	str.w	r4, [r5, #384]	; 0x180
  DMA->IEN = DMA_IEN_ERR;

  /* Set pointer to control block, notice that this ptr must have been */
  /* properly aligned, according to requirements defined in the reference */
  /* manual. */
  DMA->CTRLBASE = (uint32_t)(init->controlBlock);
    457e:	9b01      	ldr	r3, [sp, #4]
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4580:	602c      	str	r4, [r5, #0]
  /* Clear/enable DMA interrupts */
  NVIC_ClearPendingIRQ(DMA_IRQn);
  NVIC_EnableIRQ(DMA_IRQn);

  /* Enable bus error interrupt */
  DMA->IEN = DMA_IEN_ERR;
    4582:	f842 9007 	str.w	r9, [r2, r7]

  /* Set pointer to control block, notice that this ptr must have been */
  /* properly aligned, according to requirements defined in the reference */
  /* manual. */
  DMA->CTRLBASE = (uint32_t)(init->controlBlock);
    4586:	6093      	str	r3, [r2, #8]

  /* Configure and enable the DMA controller */
  DMA->CONFIG = ((uint32_t)(init->hprot) << _DMA_CONFIG_CHPROT_SHIFT)
    4588:	7833      	ldrb	r3, [r6, #0]
    458a:	015b      	lsls	r3, r3, #5
                | DMA_CONFIG_EN;
    458c:	4323      	orrs	r3, r4
  /* properly aligned, according to requirements defined in the reference */
  /* manual. */
  DMA->CTRLBASE = (uint32_t)(init->controlBlock);

  /* Configure and enable the DMA controller */
  DMA->CONFIG = ((uint32_t)(init->hprot) << _DMA_CONFIG_CHPROT_SHIFT)
    458e:	6053      	str	r3, [r2, #4]
                | DMA_CONFIG_EN;
}
    4590:	b003      	add	sp, #12
    4592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4596:	bf00      	nop
    4598:	00020300 	.word	0x00020300
    459c:	e000e100 	.word	0xe000e100
    45a0:	400c2000 	.word	0x400c2000
    45a4:	400c2004 	.word	0x400c2004
    45a8:	80000fff 	.word	0x80000fff

000045ac <DMA_RefreshPingPong>:
                         bool useBurst,
                         void *dst,
                         const void *src,
                         unsigned int nMinus1,
                         bool stop)
{
    45ac:	b4f0      	push	{r4, r5, r6, r7}
    45ae:	f89d 4018 	ldrb.w	r4, [sp, #24]
    45b2:	9f04      	ldr	r7, [sp, #16]
    45b4:	9e05      	ldr	r6, [sp, #20]

  EFM_ASSERT(channel < DMA_CHAN_COUNT);
  EFM_ASSERT(nMinus1 <= (_DMA_CTRL_N_MINUS_1_MASK >> _DMA_CTRL_N_MINUS_1_SHIFT));

  /* The ping-pong DMA cycle may be stopped by issuing a basic cycle type */
  if (stop) {
    45b6:	2c00      	cmp	r4, #0
    45b8:	bf14      	ite	ne
    45ba:	2501      	movne	r5, #1
    45bc:	2503      	moveq	r5, #3
  } else {
    cycleCtrl = dmaCycleCtrlPingPong;
  }

  /* Find descriptor to configure */
  if (primary) {
    45be:	b331      	cbz	r1, 460e <DMA_RefreshPingPong+0x62>
    descr = ((DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE)) + channel;
    45c0:	4917      	ldr	r1, [pc, #92]	; (4620 <DMA_RefreshPingPong+0x74>)
    45c2:	6889      	ldr	r1, [r1, #8]
    45c4:	eb01 1100 	add.w	r1, r1, r0, lsl #4
  } else {
    descr = ((DMA_DESCRIPTOR_TypeDef *)(DMA->ALTCTRLBASE)) + channel;
  }

  if (src) {
    45c8:	b147      	cbz	r7, 45dc <DMA_RefreshPingPong+0x30>
    inc = (descr->CTRL & _DMA_CTRL_SRC_INC_MASK) >> _DMA_CTRL_SRC_INC_SHIFT;
    45ca:	688c      	ldr	r4, [r1, #8]
    45cc:	f3c4 6481 	ubfx	r4, r4, #26, #2
    if (inc == _DMA_CTRL_SRC_INC_NONE) {
    45d0:	2c03      	cmp	r4, #3
      descr->SRCEND = (volatile void*)src;
    } else {
      descr->SRCEND = (void *)((uint32_t)src + (nMinus1 << inc));
    45d2:	bf1c      	itt	ne
    45d4:	fa06 f404 	lslne.w	r4, r6, r4
    45d8:	193f      	addne	r7, r7, r4
    45da:	600f      	str	r7, [r1, #0]
    }
  }

  if (dst) {
    45dc:	b13b      	cbz	r3, 45ee <DMA_RefreshPingPong+0x42>
    inc = (descr->CTRL & _DMA_CTRL_DST_INC_MASK) >> _DMA_CTRL_DST_INC_SHIFT;
    45de:	688c      	ldr	r4, [r1, #8]
    45e0:	0fa4      	lsrs	r4, r4, #30
    if (inc == _DMA_CTRL_DST_INC_NONE) {
    45e2:	2c03      	cmp	r4, #3
      descr->DSTEND = dst;
    } else {
      descr->DSTEND = (void *)((uint32_t)dst + (nMinus1 << inc));
    45e4:	bf1c      	itt	ne
    45e6:	fa06 f404 	lslne.w	r4, r6, r4
    45ea:	191b      	addne	r3, r3, r4
    45ec:	604b      	str	r3, [r1, #4]
    }
  }

  chBit = 1 << channel;
    45ee:	2301      	movs	r3, #1
    45f0:	4083      	lsls	r3, r0
  if (useBurst) {
    45f2:	b98a      	cbnz	r2, 4618 <DMA_RefreshPingPong+0x6c>
    DMA->CHUSEBURSTS = chBit;
  } else {
    DMA->CHUSEBURSTC = chBit;
    45f4:	4a0a      	ldr	r2, [pc, #40]	; (4620 <DMA_RefreshPingPong+0x74>)
    45f6:	61d3      	str	r3, [r2, #28]
  }

  /* Set cycle control */
  tmp  = descr->CTRL & ~(_DMA_CTRL_CYCLE_CTRL_MASK | _DMA_CTRL_N_MINUS_1_MASK);
    45f8:	688b      	ldr	r3, [r1, #8]
    45fa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
    45fe:	f023 0337 	bic.w	r3, r3, #55	; 0x37
  tmp |= nMinus1 << _DMA_CTRL_N_MINUS_1_SHIFT;
    4602:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmp |= cycleCtrl << _DMA_CTRL_CYCLE_CTRL_SHIFT;
    4606:	432b      	orrs	r3, r5
  descr->CTRL = tmp;
    4608:	608b      	str	r3, [r1, #8]
}
    460a:	bcf0      	pop	{r4, r5, r6, r7}
    460c:	4770      	bx	lr

  /* Find descriptor to configure */
  if (primary) {
    descr = ((DMA_DESCRIPTOR_TypeDef *)(DMA->CTRLBASE)) + channel;
  } else {
    descr = ((DMA_DESCRIPTOR_TypeDef *)(DMA->ALTCTRLBASE)) + channel;
    460e:	4904      	ldr	r1, [pc, #16]	; (4620 <DMA_RefreshPingPong+0x74>)
    4610:	68c9      	ldr	r1, [r1, #12]
    4612:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    4616:	e7d7      	b.n	45c8 <DMA_RefreshPingPong+0x1c>
    }
  }

  chBit = 1 << channel;
  if (useBurst) {
    DMA->CHUSEBURSTS = chBit;
    4618:	4a01      	ldr	r2, [pc, #4]	; (4620 <DMA_RefreshPingPong+0x74>)
    461a:	6193      	str	r3, [r2, #24]
    461c:	e7ec      	b.n	45f8 <DMA_RefreshPingPong+0x4c>
    461e:	bf00      	nop
    4620:	400c2000 	.word	0x400c2000

00004624 <EBI_Init>:
 *   GPIO lines must be configured as PUSH_PULL for correct operation
 *   GPIO and EBI clocks must be enabled in the CMU
 ******************************************************************************/
void EBI_Init(const EBI_Init_TypeDef *ebiInit)
{
  uint32_t ctrl = EBI->CTRL;
    4624:	4bce      	ldr	r3, [pc, #824]	; (4960 <EBI_Init+0x33c>)
#else
  /* Enable Independent Timing for devices that supports it */
  ctrl |= EBI_CTRL_ITS;

  /* Set polarity of address ready */
  EBI_BankPolaritySet(ebiInit->banks, ebiLineARDY, ebiInit->ardyPolarity);
    4626:	68c2      	ldr	r2, [r0, #12]
 * @note
 *   GPIO lines must be configured as PUSH_PULL for correct operation
 *   GPIO and EBI clocks must be enabled in the CMU
 ******************************************************************************/
void EBI_Init(const EBI_Init_TypeDef *ebiInit)
{
    4628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ctrl = EBI->CTRL;
    462c:	f8d3 9000 	ldr.w	r9, [r3]
#else
  /* Enable Independent Timing for devices that supports it */
  ctrl |= EBI_CTRL_ITS;

  /* Set polarity of address ready */
  EBI_BankPolaritySet(ebiInit->banks, ebiLineARDY, ebiInit->ardyPolarity);
    4630:	7847      	ldrb	r7, [r0, #1]
  EBI_PolaritySet(ebiLineRE, ebiInit->rePolarity);
  /* Set polarity of chip select lines */
  EBI_PolaritySet(ebiLineCS, ebiInit->csPolarity);
#else
  /* Enable Independent Timing for devices that supports it */
  ctrl |= EBI_CTRL_ITS;
    4632:	f049 4580 	orr.w	r5, r9, #1073741824	; 0x40000000
  volatile uint32_t *polRegister = 0;

  /* Verify only valid banks are used */
  EFM_ASSERT((banks & ~(EBI_BANK0 | EBI_BANK1 | EBI_BANK2 | EBI_BANK3)) == 0);

  while (banks) {
    4636:	2a00      	cmp	r2, #0
    4638:	f000 82d5 	beq.w	4be6 <EBI_Init+0x5c2>
    463c:	2300      	movs	r3, #0
    463e:	f8df b344 	ldr.w	fp, [pc, #836]	; 4984 <EBI_Init+0x360>
    4642:	f8df a344 	ldr.w	sl, [pc, #836]	; 4988 <EBI_Init+0x364>
    4646:	f8df 8344 	ldr.w	r8, [pc, #836]	; 498c <EBI_Init+0x368>
    464a:	f8df c324 	ldr.w	ip, [pc, #804]	; 4970 <EBI_Init+0x34c>
    464e:	f8df e340 	ldr.w	lr, [pc, #832]	; 4990 <EBI_Init+0x36c>
    4652:	4619      	mov	r1, r3
    if (banks & EBI_BANK0) {
    4654:	f002 0402 	and.w	r4, r2, #2
    4658:	2c00      	cmp	r4, #0
      polRegister = &EBI->POLARITY;
      bankSet = EBI_BANK0;
    }
    if (banks & EBI_BANK1) {
    465a:	f002 0604 	and.w	r6, r2, #4
    465e:	bf1c      	itt	ne
    4660:	2102      	movne	r1, #2
    4662:	465b      	movne	r3, fp
      polRegister = &EBI->POLARITY1;
      bankSet = EBI_BANK1;
    }
    if (banks & EBI_BANK2) {
    4664:	f002 0408 	and.w	r4, r2, #8
    4668:	2e00      	cmp	r6, #0
    466a:	bf1c      	itt	ne
    466c:	2104      	movne	r1, #4
    466e:	4653      	movne	r3, sl
    4670:	2c00      	cmp	r4, #0
    4672:	bf18      	it	ne
    4674:	4643      	movne	r3, r8
      polRegister = &EBI->POLARITY2;
      bankSet = EBI_BANK2;
    }
    if (banks & EBI_BANK3) {
    4676:	f002 0610 	and.w	r6, r2, #16
    467a:	ea4f 1443 	mov.w	r4, r3, lsl #5
    467e:	bf18      	it	ne
    4680:	2108      	movne	r1, #8
    4682:	f104 4484 	add.w	r4, r4, #1107296256	; 0x42000000
    4686:	2e00      	cmp	r6, #0
    4688:	f104 0410 	add.w	r4, r4, #16
    468c:	ea6f 0601 	mvn.w	r6, r1
    4690:	bf1f      	itttt	ne
    4692:	4674      	movne	r4, lr
    4694:	f06f 0610 	mvnne.w	r6, #16
    4698:	4663      	movne	r3, ip
    469a:	2110      	movne	r1, #16
  volatile uint32_t *polRegister = 0;

  /* Verify only valid banks are used */
  EFM_ASSERT((banks & ~(EBI_BANK0 | EBI_BANK1 | EBI_BANK2 | EBI_BANK3)) == 0);

  while (banks) {
    469c:	4032      	ands	r2, r6
    469e:	6027      	str	r7, [r4, #0]
    46a0:	d1d8      	bne.n	4654 <EBI_Init+0x30>
  ctrl |= EBI_CTRL_ITS;

  /* Set polarity of address ready */
  EBI_BankPolaritySet(ebiInit->banks, ebiLineARDY, ebiInit->ardyPolarity);
  /* Set polarity of address latch enable */
  EBI_BankPolaritySet(ebiInit->banks, ebiLineALE, ebiInit->alePolarity);
    46a2:	68c3      	ldr	r3, [r0, #12]
    46a4:	f890 a002 	ldrb.w	sl, [r0, #2]
  volatile uint32_t *polRegister = 0;

  /* Verify only valid banks are used */
  EFM_ASSERT((banks & ~(EBI_BANK0 | EBI_BANK1 | EBI_BANK2 | EBI_BANK3)) == 0);

  while (banks) {
    46a8:	2b00      	cmp	r3, #0
    46aa:	f000 833a 	beq.w	4d22 <EBI_Init+0x6fe>
    46ae:	f8df b2d4 	ldr.w	fp, [pc, #724]	; 4984 <EBI_Init+0x360>
    46b2:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 4988 <EBI_Init+0x364>
    46b6:	f8df c2d4 	ldr.w	ip, [pc, #724]	; 498c <EBI_Init+0x368>
    46ba:	f8df e2b4 	ldr.w	lr, [pc, #692]	; 4970 <EBI_Init+0x34c>
    46be:	4fa9      	ldr	r7, [pc, #676]	; (4964 <EBI_Init+0x340>)
    46c0:	4611      	mov	r1, r2
    if (banks & EBI_BANK0) {
    46c2:	f003 0402 	and.w	r4, r3, #2
    46c6:	2c00      	cmp	r4, #0
      polRegister = &EBI->POLARITY;
      bankSet = EBI_BANK0;
    }
    if (banks & EBI_BANK1) {
    46c8:	f003 0604 	and.w	r6, r3, #4
    46cc:	bf1c      	itt	ne
    46ce:	2102      	movne	r1, #2
    46d0:	465a      	movne	r2, fp
      polRegister = &EBI->POLARITY1;
      bankSet = EBI_BANK1;
    }
    if (banks & EBI_BANK2) {
    46d2:	f003 0408 	and.w	r4, r3, #8
    46d6:	2e00      	cmp	r6, #0
    46d8:	bf1c      	itt	ne
    46da:	2104      	movne	r1, #4
    46dc:	4642      	movne	r2, r8
    46de:	2c00      	cmp	r4, #0
    46e0:	bf18      	it	ne
    46e2:	4662      	movne	r2, ip
      polRegister = &EBI->POLARITY2;
      bankSet = EBI_BANK2;
    }
    if (banks & EBI_BANK3) {
    46e4:	f003 0610 	and.w	r6, r3, #16
    46e8:	ea4f 1442 	mov.w	r4, r2, lsl #5
    46ec:	bf18      	it	ne
    46ee:	2108      	movne	r1, #8
    46f0:	f104 4484 	add.w	r4, r4, #1107296256	; 0x42000000
    46f4:	2e00      	cmp	r6, #0
    46f6:	f104 040c 	add.w	r4, r4, #12
    46fa:	ea6f 0601 	mvn.w	r6, r1
    46fe:	bf1f      	itttt	ne
    4700:	463c      	movne	r4, r7
    4702:	f06f 0610 	mvnne.w	r6, #16
    4706:	4672      	movne	r2, lr
    4708:	2110      	movne	r1, #16
  volatile uint32_t *polRegister = 0;

  /* Verify only valid banks are used */
  EFM_ASSERT((banks & ~(EBI_BANK0 | EBI_BANK1 | EBI_BANK2 | EBI_BANK3)) == 0);

  while (banks) {
    470a:	4033      	ands	r3, r6
    470c:	f8c4 a000 	str.w	sl, [r4]
    4710:	d1d7      	bne.n	46c2 <EBI_Init+0x9e>
    4712:	68c2      	ldr	r2, [r0, #12]
  /* Set polarity of address ready */
  EBI_BankPolaritySet(ebiInit->banks, ebiLineARDY, ebiInit->ardyPolarity);
  /* Set polarity of address latch enable */
  EBI_BankPolaritySet(ebiInit->banks, ebiLineALE, ebiInit->alePolarity);
  /* Set polarity of write enable */
  EBI_BankPolaritySet(ebiInit->banks, ebiLineWE, ebiInit->wePolarity);
    4714:	f890 a003 	ldrb.w	sl, [r0, #3]
  volatile uint32_t *polRegister = 0;

  /* Verify only valid banks are used */
  EFM_ASSERT((banks & ~(EBI_BANK0 | EBI_BANK1 | EBI_BANK2 | EBI_BANK3)) == 0);

  while (banks) {
    4718:	2a00      	cmp	r2, #0
    471a:	f000 8263 	beq.w	4be4 <EBI_Init+0x5c0>
    471e:	f8df b264 	ldr.w	fp, [pc, #612]	; 4984 <EBI_Init+0x360>
    4722:	f8df 8264 	ldr.w	r8, [pc, #612]	; 4988 <EBI_Init+0x364>
    4726:	f8df c264 	ldr.w	ip, [pc, #612]	; 498c <EBI_Init+0x368>
    472a:	f8df e244 	ldr.w	lr, [pc, #580]	; 4970 <EBI_Init+0x34c>
    472e:	4f8e      	ldr	r7, [pc, #568]	; (4968 <EBI_Init+0x344>)
    4730:	4619      	mov	r1, r3
    if (banks & EBI_BANK0) {
    4732:	f002 0402 	and.w	r4, r2, #2
    4736:	2c00      	cmp	r4, #0
      polRegister = &EBI->POLARITY;
      bankSet = EBI_BANK0;
    }
    if (banks & EBI_BANK1) {
    4738:	f002 0604 	and.w	r6, r2, #4
    473c:	bf1c      	itt	ne
    473e:	2102      	movne	r1, #2
    4740:	465b      	movne	r3, fp
      polRegister = &EBI->POLARITY1;
      bankSet = EBI_BANK1;
    }
    if (banks & EBI_BANK2) {
    4742:	f002 0408 	and.w	r4, r2, #8
    4746:	2e00      	cmp	r6, #0
    4748:	bf1c      	itt	ne
    474a:	2104      	movne	r1, #4
    474c:	4643      	movne	r3, r8
    474e:	2c00      	cmp	r4, #0
    4750:	bf18      	it	ne
    4752:	4663      	movne	r3, ip
      polRegister = &EBI->POLARITY2;
      bankSet = EBI_BANK2;
    }
    if (banks & EBI_BANK3) {
    4754:	f002 0610 	and.w	r6, r2, #16
    4758:	ea4f 1443 	mov.w	r4, r3, lsl #5
    475c:	bf18      	it	ne
    475e:	2108      	movne	r1, #8
    4760:	f104 4484 	add.w	r4, r4, #1107296256	; 0x42000000
    4764:	2e00      	cmp	r6, #0
    4766:	f104 0408 	add.w	r4, r4, #8
    476a:	ea6f 0601 	mvn.w	r6, r1
    476e:	bf1f      	itttt	ne
    4770:	463c      	movne	r4, r7
    4772:	f06f 0610 	mvnne.w	r6, #16
    4776:	4673      	movne	r3, lr
    4778:	2110      	movne	r1, #16
  volatile uint32_t *polRegister = 0;

  /* Verify only valid banks are used */
  EFM_ASSERT((banks & ~(EBI_BANK0 | EBI_BANK1 | EBI_BANK2 | EBI_BANK3)) == 0);

  while (banks) {
    477a:	4032      	ands	r2, r6
    477c:	f8c4 a000 	str.w	sl, [r4]
    4780:	d1d7      	bne.n	4732 <EBI_Init+0x10e>
    4782:	68c3      	ldr	r3, [r0, #12]
  /* Set polarity of address latch enable */
  EBI_BankPolaritySet(ebiInit->banks, ebiLineALE, ebiInit->alePolarity);
  /* Set polarity of write enable */
  EBI_BankPolaritySet(ebiInit->banks, ebiLineWE, ebiInit->wePolarity);
  /* Set polarity of read enable */
  EBI_BankPolaritySet(ebiInit->banks, ebiLineRE, ebiInit->rePolarity);
    4784:	f890 a004 	ldrb.w	sl, [r0, #4]
  volatile uint32_t *polRegister = 0;

  /* Verify only valid banks are used */
  EFM_ASSERT((banks & ~(EBI_BANK0 | EBI_BANK1 | EBI_BANK2 | EBI_BANK3)) == 0);

  while (banks) {
    4788:	2b00      	cmp	r3, #0
    478a:	f000 82ca 	beq.w	4d22 <EBI_Init+0x6fe>
    478e:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 4984 <EBI_Init+0x360>
    4792:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 4988 <EBI_Init+0x364>
    4796:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 498c <EBI_Init+0x368>
    479a:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 4970 <EBI_Init+0x34c>
    479e:	4f73      	ldr	r7, [pc, #460]	; (496c <EBI_Init+0x348>)
    47a0:	4611      	mov	r1, r2
    if (banks & EBI_BANK0) {
    47a2:	f003 0402 	and.w	r4, r3, #2
    47a6:	2c00      	cmp	r4, #0
      polRegister = &EBI->POLARITY;
      bankSet = EBI_BANK0;
    }
    if (banks & EBI_BANK1) {
    47a8:	f003 0604 	and.w	r6, r3, #4
    47ac:	bf1c      	itt	ne
    47ae:	2102      	movne	r1, #2
    47b0:	465a      	movne	r2, fp
      polRegister = &EBI->POLARITY1;
      bankSet = EBI_BANK1;
    }
    if (banks & EBI_BANK2) {
    47b2:	f003 0408 	and.w	r4, r3, #8
    47b6:	2e00      	cmp	r6, #0
    47b8:	bf1c      	itt	ne
    47ba:	2104      	movne	r1, #4
    47bc:	4642      	movne	r2, r8
    47be:	2c00      	cmp	r4, #0
    47c0:	bf18      	it	ne
    47c2:	4662      	movne	r2, ip
      polRegister = &EBI->POLARITY2;
      bankSet = EBI_BANK2;
    }
    if (banks & EBI_BANK3) {
    47c4:	f003 0610 	and.w	r6, r3, #16
    47c8:	ea4f 1442 	mov.w	r4, r2, lsl #5
    47cc:	bf18      	it	ne
    47ce:	2108      	movne	r1, #8
    47d0:	f104 4484 	add.w	r4, r4, #1107296256	; 0x42000000
    47d4:	2e00      	cmp	r6, #0
    47d6:	f104 0404 	add.w	r4, r4, #4
    47da:	ea6f 0601 	mvn.w	r6, r1
    47de:	bf1f      	itttt	ne
    47e0:	463c      	movne	r4, r7
    47e2:	f06f 0610 	mvnne.w	r6, #16
    47e6:	4672      	movne	r2, lr
    47e8:	2110      	movne	r1, #16
  volatile uint32_t *polRegister = 0;

  /* Verify only valid banks are used */
  EFM_ASSERT((banks & ~(EBI_BANK0 | EBI_BANK1 | EBI_BANK2 | EBI_BANK3)) == 0);

  while (banks) {
    47ea:	4033      	ands	r3, r6
    47ec:	f8c4 a000 	str.w	sl, [r4]
    47f0:	d1d7      	bne.n	47a2 <EBI_Init+0x17e>
    47f2:	68c2      	ldr	r2, [r0, #12]
  /* Set polarity of write enable */
  EBI_BankPolaritySet(ebiInit->banks, ebiLineWE, ebiInit->wePolarity);
  /* Set polarity of read enable */
  EBI_BankPolaritySet(ebiInit->banks, ebiLineRE, ebiInit->rePolarity);
  /* Set polarity of chip select lines */
  EBI_BankPolaritySet(ebiInit->banks, ebiLineCS, ebiInit->csPolarity);
    47f4:	f890 a005 	ldrb.w	sl, [r0, #5]
  volatile uint32_t *polRegister = 0;

  /* Verify only valid banks are used */
  EFM_ASSERT((banks & ~(EBI_BANK0 | EBI_BANK1 | EBI_BANK2 | EBI_BANK3)) == 0);

  while (banks) {
    47f8:	2a00      	cmp	r2, #0
    47fa:	f000 81f3 	beq.w	4be4 <EBI_Init+0x5c0>
    47fe:	f8df 8184 	ldr.w	r8, [pc, #388]	; 4984 <EBI_Init+0x360>
    4802:	f8df c184 	ldr.w	ip, [pc, #388]	; 4988 <EBI_Init+0x364>
    4806:	f8df e184 	ldr.w	lr, [pc, #388]	; 498c <EBI_Init+0x368>
    480a:	4f59      	ldr	r7, [pc, #356]	; (4970 <EBI_Init+0x34c>)
    480c:	4e59      	ldr	r6, [pc, #356]	; (4974 <EBI_Init+0x350>)
    480e:	4619      	mov	r1, r3
    if (banks & EBI_BANK0) {
    4810:	f002 0402 	and.w	r4, r2, #2
    4814:	2c00      	cmp	r4, #0
      polRegister = &EBI->POLARITY;
      bankSet = EBI_BANK0;
    }
    if (banks & EBI_BANK1) {
    4816:	f002 0b04 	and.w	fp, r2, #4
    481a:	bf1c      	itt	ne
    481c:	2102      	movne	r1, #2
    481e:	4643      	movne	r3, r8
      polRegister = &EBI->POLARITY1;
      bankSet = EBI_BANK1;
    }
    if (banks & EBI_BANK2) {
    4820:	f002 0408 	and.w	r4, r2, #8
    4824:	f1bb 0f00 	cmp.w	fp, #0
    4828:	bf1c      	itt	ne
    482a:	2104      	movne	r1, #4
    482c:	4663      	movne	r3, ip
    482e:	2c00      	cmp	r4, #0
    4830:	bf18      	it	ne
    4832:	4673      	movne	r3, lr
      polRegister = &EBI->POLARITY2;
      bankSet = EBI_BANK2;
    }
    if (banks & EBI_BANK3) {
    4834:	f002 0b10 	and.w	fp, r2, #16
    4838:	bf18      	it	ne
    483a:	2108      	movne	r1, #8
    483c:	f103 7404 	add.w	r4, r3, #34603008	; 0x2100000
    4840:	f1bb 0f00 	cmp.w	fp, #0
    4844:	ea4f 1444 	mov.w	r4, r4, lsl #5
    4848:	ea6f 0b01 	mvn.w	fp, r1
    484c:	bf1f      	itttt	ne
    484e:	4634      	movne	r4, r6
    4850:	f06f 0b10 	mvnne.w	fp, #16
    4854:	463b      	movne	r3, r7
    4856:	2110      	movne	r1, #16
  volatile uint32_t *polRegister = 0;

  /* Verify only valid banks are used */
  EFM_ASSERT((banks & ~(EBI_BANK0 | EBI_BANK1 | EBI_BANK2 | EBI_BANK3)) == 0);

  while (banks) {
    4858:	ea12 020b 	ands.w	r2, r2, fp
    485c:	f8c4 a000 	str.w	sl, [r4]
    4860:	d1d6      	bne.n	4810 <EBI_Init+0x1ec>
    4862:	68c4      	ldr	r4, [r0, #12]
  /* Set polarity of read enable */
  EBI_BankPolaritySet(ebiInit->banks, ebiLineRE, ebiInit->rePolarity);
  /* Set polarity of chip select lines */
  EBI_BankPolaritySet(ebiInit->banks, ebiLineCS, ebiInit->csPolarity);
  /* Set polarity of byte lane line */
  EBI_BankPolaritySet(ebiInit->banks, ebiLineBL, ebiInit->blPolarity);
    4864:	f890 8006 	ldrb.w	r8, [r0, #6]
  volatile uint32_t *polRegister = 0;

  /* Verify only valid banks are used */
  EFM_ASSERT((banks & ~(EBI_BANK0 | EBI_BANK1 | EBI_BANK2 | EBI_BANK3)) == 0);

  while (banks) {
    4868:	2c00      	cmp	r4, #0
    486a:	f000 825a 	beq.w	4d22 <EBI_Init+0x6fe>
    486e:	f8df a114 	ldr.w	sl, [pc, #276]	; 4984 <EBI_Init+0x360>
    4872:	f8df c114 	ldr.w	ip, [pc, #276]	; 4988 <EBI_Init+0x364>
    4876:	f8df e114 	ldr.w	lr, [pc, #276]	; 498c <EBI_Init+0x368>
    487a:	4f3d      	ldr	r7, [pc, #244]	; (4970 <EBI_Init+0x34c>)
    487c:	4e3e      	ldr	r6, [pc, #248]	; (4978 <EBI_Init+0x354>)
    487e:	4613      	mov	r3, r2
    if (banks & EBI_BANK0) {
    4880:	f004 0102 	and.w	r1, r4, #2
    4884:	2900      	cmp	r1, #0
      polRegister = &EBI->POLARITY;
      bankSet = EBI_BANK0;
    }
    if (banks & EBI_BANK1) {
    4886:	f004 0b04 	and.w	fp, r4, #4
    488a:	bf1c      	itt	ne
    488c:	2302      	movne	r3, #2
    488e:	4652      	movne	r2, sl
      polRegister = &EBI->POLARITY1;
      bankSet = EBI_BANK1;
    }
    if (banks & EBI_BANK2) {
    4890:	f004 0108 	and.w	r1, r4, #8
    4894:	f1bb 0f00 	cmp.w	fp, #0
    4898:	bf1c      	itt	ne
    489a:	2304      	movne	r3, #4
    489c:	4662      	movne	r2, ip
    489e:	2900      	cmp	r1, #0
    48a0:	bf18      	it	ne
    48a2:	4672      	movne	r2, lr
      polRegister = &EBI->POLARITY2;
      bankSet = EBI_BANK2;
    }
    if (banks & EBI_BANK3) {
    48a4:	f004 0b10 	and.w	fp, r4, #16
    48a8:	ea4f 1142 	mov.w	r1, r2, lsl #5
    48ac:	bf18      	it	ne
    48ae:	2308      	movne	r3, #8
    48b0:	f101 4184 	add.w	r1, r1, #1107296256	; 0x42000000
    48b4:	f1bb 0f00 	cmp.w	fp, #0
    48b8:	f101 0114 	add.w	r1, r1, #20
    48bc:	ea6f 0b03 	mvn.w	fp, r3
    48c0:	bf1f      	itttt	ne
    48c2:	4631      	movne	r1, r6
    48c4:	f06f 0b10 	mvnne.w	fp, #16
    48c8:	463a      	movne	r2, r7
    48ca:	2310      	movne	r3, #16
  volatile uint32_t *polRegister = 0;

  /* Verify only valid banks are used */
  EFM_ASSERT((banks & ~(EBI_BANK0 | EBI_BANK1 | EBI_BANK2 | EBI_BANK3)) == 0);

  while (banks) {
    48cc:	ea14 040b 	ands.w	r4, r4, fp
    48d0:	f8c1 8000 	str.w	r8, [r1]
    48d4:	d1d4      	bne.n	4880 <EBI_Init+0x25c>
    48d6:	68c2      	ldr	r2, [r0, #12]
  }
  ctrl |= ebiInit->mode;
  ctrl |= (ebiInit->ardyEnable << _EBI_CTRL_ARDYEN_SHIFT);
  ctrl |= (ebiInit->ardyDisableTimeout << _EBI_CTRL_ARDYTODIS_SHIFT);
#else
  if (ebiInit->banks & EBI_BANK0) {
    48d8:	f012 0602 	ands.w	r6, r2, #2
    48dc:	f000 8183 	beq.w	4be6 <EBI_Init+0x5c2>
    ctrl &= ~(_EBI_CTRL_MODE_MASK
    48e0:	4926      	ldr	r1, [pc, #152]	; (497c <EBI_Init+0x358>)
              | _EBI_CTRL_ARDYEN_MASK
              | _EBI_CTRL_ARDYTODIS_MASK
              | _EBI_CTRL_BL_MASK
              | _EBI_CTRL_NOIDLE_MASK
              | _EBI_CTRL_BANK0EN_MASK);
    ctrl |= (ebiInit->mode << _EBI_CTRL_MODE_SHIFT);
    48e2:	7807      	ldrb	r7, [r0, #0]
    ctrl |= (ebiInit->ardyEnable << _EBI_CTRL_ARDYEN_SHIFT);
    48e4:	f890 8009 	ldrb.w	r8, [r0, #9]
    ctrl |= (ebiInit->ardyDisableTimeout << _EBI_CTRL_ARDYTODIS_SHIFT);
    48e8:	f890 c00a 	ldrb.w	ip, [r0, #10]
    ctrl |= (ebiInit->blEnable << _EBI_CTRL_BL_SHIFT);
    48ec:	79c5      	ldrb	r5, [r0, #7]
    ctrl |= (ebiInit->noIdle << _EBI_CTRL_NOIDLE_SHIFT);
    48ee:	f890 e008 	ldrb.w	lr, [r0, #8]
    if ( ebiInit->enable) {
    48f2:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
  ctrl |= ebiInit->mode;
  ctrl |= (ebiInit->ardyEnable << _EBI_CTRL_ARDYEN_SHIFT);
  ctrl |= (ebiInit->ardyDisableTimeout << _EBI_CTRL_ARDYTODIS_SHIFT);
#else
  if (ebiInit->banks & EBI_BANK0) {
    ctrl &= ~(_EBI_CTRL_MODE_MASK
    48f6:	ea09 0101 	and.w	r1, r9, r1
    48fa:	ea41 0407 	orr.w	r4, r1, r7
              | _EBI_CTRL_ARDYEN_MASK
              | _EBI_CTRL_ARDYTODIS_MASK
              | _EBI_CTRL_BL_MASK
              | _EBI_CTRL_NOIDLE_MASK
              | _EBI_CTRL_BANK0EN_MASK);
    ctrl |= (ebiInit->mode << _EBI_CTRL_MODE_SHIFT);
    48fe:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    ctrl |= (ebiInit->ardyEnable << _EBI_CTRL_ARDYEN_SHIFT);
    4902:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
    ctrl |= (ebiInit->ardyDisableTimeout << _EBI_CTRL_ARDYTODIS_SHIFT);
    4906:	ea44 414c 	orr.w	r1, r4, ip, lsl #17
    ctrl |= (ebiInit->blEnable << _EBI_CTRL_BL_SHIFT);
    490a:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
    ctrl |= (ebiInit->noIdle << _EBI_CTRL_NOIDLE_SHIFT);
    490e:	ea41 350e 	orr.w	r5, r1, lr, lsl #12
    if ( ebiInit->enable) {
    4912:	2b00      	cmp	r3, #0
    4914:	f000 8203 	beq.w	4d1e <EBI_Init+0x6fa>
      ctrl |= EBI_CTRL_BANK0EN;
    }
  }
  if (ebiInit->banks & EBI_BANK1) {
    4918:	f012 0c04 	ands.w	ip, r2, #4
    ctrl |= (ebiInit->ardyEnable << _EBI_CTRL_ARDYEN_SHIFT);
    ctrl |= (ebiInit->ardyDisableTimeout << _EBI_CTRL_ARDYTODIS_SHIFT);
    ctrl |= (ebiInit->blEnable << _EBI_CTRL_BL_SHIFT);
    ctrl |= (ebiInit->noIdle << _EBI_CTRL_NOIDLE_SHIFT);
    if ( ebiInit->enable) {
      ctrl |= EBI_CTRL_BANK0EN;
    491c:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    4920:	4696      	mov	lr, r2
    }
  }
  if (ebiInit->banks & EBI_BANK1) {
    4922:	f040 8167 	bne.w	4bf4 <EBI_Init+0x5d0>
    ctrl |= (ebiInit->noIdle << _EBI_CTRL_NOIDLE1_SHIFT);
    if ( ebiInit->enable) {
      ctrl |= EBI_CTRL_BANK1EN;
    }
  }
  if (ebiInit->banks & EBI_BANK2) {
    4926:	f012 0308 	ands.w	r3, r2, #8
    492a:	d033      	beq.n	4994 <EBI_Init+0x370>
              | _EBI_CTRL_ARDY2EN_MASK
              | _EBI_CTRL_ARDYTO2DIS_MASK
              | _EBI_CTRL_NOIDLE2_MASK
              | _EBI_CTRL_BANK2EN_MASK);
    ctrl |= (ebiInit->mode << _EBI_CTRL_MODE2_SHIFT);
    ctrl |= (ebiInit->ardyEnable << _EBI_CTRL_ARDY2EN_SHIFT);
    492c:	7a41      	ldrb	r1, [r0, #9]
    ctrl |= (ebiInit->ardyDisableTimeout << _EBI_CTRL_ARDYTO2DIS_SHIFT);
    492e:	f890 a00a 	ldrb.w	sl, [r0, #10]
    ctrl |= (ebiInit->blEnable << _EBI_CTRL_BL2_SHIFT);
    4932:	79c2      	ldrb	r2, [r0, #7]
    ctrl |= (ebiInit->noIdle << _EBI_CTRL_NOIDLE2_SHIFT);
    4934:	f890 9008 	ldrb.w	r9, [r0, #8]
    if ( ebiInit->enable) {
      ctrl |= EBI_CTRL_BANK1EN;
    }
  }
  if (ebiInit->banks & EBI_BANK2) {
    ctrl &= ~(_EBI_CTRL_BL2_MASK
    4938:	4c11      	ldr	r4, [pc, #68]	; (4980 <EBI_Init+0x35c>)
    ctrl |= (ebiInit->mode << _EBI_CTRL_MODE2_SHIFT);
    ctrl |= (ebiInit->ardyEnable << _EBI_CTRL_ARDY2EN_SHIFT);
    ctrl |= (ebiInit->ardyDisableTimeout << _EBI_CTRL_ARDYTO2DIS_SHIFT);
    ctrl |= (ebiInit->blEnable << _EBI_CTRL_BL2_SHIFT);
    ctrl |= (ebiInit->noIdle << _EBI_CTRL_NOIDLE2_SHIFT);
    if ( ebiInit->enable) {
    493a:	f890 804c 	ldrb.w	r8, [r0, #76]	; 0x4c
              | _EBI_CTRL_ARDY2EN_MASK
              | _EBI_CTRL_ARDYTO2DIS_MASK
              | _EBI_CTRL_NOIDLE2_MASK
              | _EBI_CTRL_BANK2EN_MASK);
    ctrl |= (ebiInit->mode << _EBI_CTRL_MODE2_SHIFT);
    ctrl |= (ebiInit->ardyEnable << _EBI_CTRL_ARDY2EN_SHIFT);
    493e:	0509      	lsls	r1, r1, #20
    4940:	ea41 514a 	orr.w	r1, r1, sl, lsl #21
    4944:	ea41 6282 	orr.w	r2, r1, r2, lsl #26
    4948:	ea42 3289 	orr.w	r2, r2, r9, lsl #14
    494c:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
    if ( ebiInit->enable) {
      ctrl |= EBI_CTRL_BANK1EN;
    }
  }
  if (ebiInit->banks & EBI_BANK2) {
    ctrl &= ~(_EBI_CTRL_BL2_MASK
    4950:	402c      	ands	r4, r5
              | _EBI_CTRL_BANK2EN_MASK);
    ctrl |= (ebiInit->mode << _EBI_CTRL_MODE2_SHIFT);
    ctrl |= (ebiInit->ardyEnable << _EBI_CTRL_ARDY2EN_SHIFT);
    ctrl |= (ebiInit->ardyDisableTimeout << _EBI_CTRL_ARDYTO2DIS_SHIFT);
    ctrl |= (ebiInit->blEnable << _EBI_CTRL_BL2_SHIFT);
    ctrl |= (ebiInit->noIdle << _EBI_CTRL_NOIDLE2_SHIFT);
    4952:	ea42 0504 	orr.w	r5, r2, r4
    if ( ebiInit->enable) {
    4956:	f1b8 0f00 	cmp.w	r8, #0
    495a:	f040 81dd 	bne.w	4d18 <EBI_Init+0x6f4>
    495e:	e019      	b.n	4994 <EBI_Init+0x370>
    4960:	40008000 	.word	0x40008000
    4964:	4210088c 	.word	0x4210088c
    4968:	42100888 	.word	0x42100888
    496c:	42100884 	.word	0x42100884
    4970:	40008044 	.word	0x40008044
    4974:	42100880 	.word	0x42100880
    4978:	42100894 	.word	0x42100894
    497c:	fefceefc 	.word	0xfefceefc
    4980:	fbcfbbcf 	.word	0xfbcfbbcf
    4984:	40008010 	.word	0x40008010
    4988:	40008024 	.word	0x40008024
    498c:	40008034 	.word	0x40008034
    4990:	42100890 	.word	0x42100890
      ctrl |= EBI_CTRL_BANK2EN;
    }
  }
  if (ebiInit->banks & EBI_BANK3) {
    4994:	f01e 0e10 	ands.w	lr, lr, #16
    4998:	d018      	beq.n	49cc <EBI_Init+0x3a8>
              | _EBI_CTRL_ARDY3EN_MASK
              | _EBI_CTRL_ARDYTO3DIS_MASK
              | _EBI_CTRL_NOIDLE3_MASK
              | _EBI_CTRL_BANK3EN_MASK);
    ctrl |= (ebiInit->mode << _EBI_CTRL_MODE3_SHIFT);
    ctrl |= (ebiInit->ardyEnable << _EBI_CTRL_ARDY3EN_SHIFT);
    499a:	7a41      	ldrb	r1, [r0, #9]
    ctrl |= (ebiInit->ardyDisableTimeout << _EBI_CTRL_ARDYTO3DIS_SHIFT);
    499c:	f890 a00a 	ldrb.w	sl, [r0, #10]
    ctrl |= (ebiInit->blEnable << _EBI_CTRL_BL3_SHIFT);
    49a0:	79c2      	ldrb	r2, [r0, #7]
    ctrl |= (ebiInit->noIdle << _EBI_CTRL_NOIDLE3_SHIFT);
    49a2:	f890 9008 	ldrb.w	r9, [r0, #8]
    if ( ebiInit->enable) {
      ctrl |= EBI_CTRL_BANK2EN;
    }
  }
  if (ebiInit->banks & EBI_BANK3) {
    ctrl &= ~(_EBI_CTRL_BL3_MASK
    49a6:	4ca2      	ldr	r4, [pc, #648]	; (4c30 <EBI_Init+0x60c>)
    ctrl |= (ebiInit->mode << _EBI_CTRL_MODE3_SHIFT);
    ctrl |= (ebiInit->ardyEnable << _EBI_CTRL_ARDY3EN_SHIFT);
    ctrl |= (ebiInit->ardyDisableTimeout << _EBI_CTRL_ARDYTO3DIS_SHIFT);
    ctrl |= (ebiInit->blEnable << _EBI_CTRL_BL3_SHIFT);
    ctrl |= (ebiInit->noIdle << _EBI_CTRL_NOIDLE3_SHIFT);
    if ( ebiInit->enable) {
    49a8:	f890 804c 	ldrb.w	r8, [r0, #76]	; 0x4c
              | _EBI_CTRL_ARDY3EN_MASK
              | _EBI_CTRL_ARDYTO3DIS_MASK
              | _EBI_CTRL_NOIDLE3_MASK
              | _EBI_CTRL_BANK3EN_MASK);
    ctrl |= (ebiInit->mode << _EBI_CTRL_MODE3_SHIFT);
    ctrl |= (ebiInit->ardyEnable << _EBI_CTRL_ARDY3EN_SHIFT);
    49ac:	0589      	lsls	r1, r1, #22
    49ae:	ea41 51ca 	orr.w	r1, r1, sl, lsl #23
    49b2:	ea41 62c2 	orr.w	r2, r1, r2, lsl #27
    49b6:	ea42 32c9 	orr.w	r2, r2, r9, lsl #15
    49ba:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
    if ( ebiInit->enable) {
      ctrl |= EBI_CTRL_BANK2EN;
    }
  }
  if (ebiInit->banks & EBI_BANK3) {
    ctrl &= ~(_EBI_CTRL_BL3_MASK
    49be:	402c      	ands	r4, r5
              | _EBI_CTRL_BANK3EN_MASK);
    ctrl |= (ebiInit->mode << _EBI_CTRL_MODE3_SHIFT);
    ctrl |= (ebiInit->ardyEnable << _EBI_CTRL_ARDY3EN_SHIFT);
    ctrl |= (ebiInit->ardyDisableTimeout << _EBI_CTRL_ARDYTO3DIS_SHIFT);
    ctrl |= (ebiInit->blEnable << _EBI_CTRL_BL3_SHIFT);
    ctrl |= (ebiInit->noIdle << _EBI_CTRL_NOIDLE3_SHIFT);
    49c0:	ea42 0504 	orr.w	r5, r2, r4
    if ( ebiInit->enable) {
    49c4:	f1b8 0f00 	cmp.w	r8, #0
    49c8:	f040 81a3 	bne.w	4d12 <EBI_Init+0x6ee>
  EFM_ASSERT(holdCycles < 4);

  /* Configure timing values */
  readTiming = (setupCycles << _EBI_RDTIMING_RDSETUP_SHIFT)
               | (strobeCycles << _EBI_RDTIMING_RDSTRB_SHIFT)
               | (holdCycles << _EBI_RDTIMING_RDHOLD_SHIFT);
    49cc:	6a84      	ldr	r4, [r0, #40]	; 0x28
  EFM_ASSERT(strobeCycles < 64);
  EFM_ASSERT(holdCycles < 4);

  /* Configure timing values */
  readTiming = (setupCycles << _EBI_RDTIMING_RDSETUP_SHIFT)
               | (strobeCycles << _EBI_RDTIMING_RDSTRB_SHIFT)
    49ce:	6a41      	ldr	r1, [r0, #36]	; 0x24
               | (holdCycles << _EBI_RDTIMING_RDHOLD_SHIFT);
    49d0:	6a02      	ldr	r2, [r0, #32]
    49d2:	0424      	lsls	r4, r4, #16
    49d4:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    49d8:	4311      	orrs	r1, r2

  if (banks & EBI_BANK0) {
    49da:	b13e      	cbz	r6, 49ec <EBI_Init+0x3c8>
    EBI->RDTIMING = (EBI->RDTIMING
    49dc:	4c95      	ldr	r4, [pc, #596]	; (4c34 <EBI_Init+0x610>)
    49de:	68a2      	ldr	r2, [r4, #8]
                     & ~(_EBI_RDTIMING_RDSETUP_MASK
    49e0:	f022 1203 	bic.w	r2, r2, #196611	; 0x30003
    49e4:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
                         | _EBI_RDTIMING_RDSTRB_MASK
                         | _EBI_RDTIMING_RDHOLD_MASK))
                    | readTiming;
    49e8:	430a      	orrs	r2, r1
  readTiming = (setupCycles << _EBI_RDTIMING_RDSETUP_SHIFT)
               | (strobeCycles << _EBI_RDTIMING_RDSTRB_SHIFT)
               | (holdCycles << _EBI_RDTIMING_RDHOLD_SHIFT);

  if (banks & EBI_BANK0) {
    EBI->RDTIMING = (EBI->RDTIMING
    49ea:	60a2      	str	r2, [r4, #8]
                     & ~(_EBI_RDTIMING_RDSETUP_MASK
                         | _EBI_RDTIMING_RDSTRB_MASK
                         | _EBI_RDTIMING_RDHOLD_MASK))
                    | readTiming;
  }
  if (banks & EBI_BANK1) {
    49ec:	f1bc 0f00 	cmp.w	ip, #0
    49f0:	d007      	beq.n	4a02 <EBI_Init+0x3de>
    EBI->RDTIMING1 = (EBI->RDTIMING1
    49f2:	4c90      	ldr	r4, [pc, #576]	; (4c34 <EBI_Init+0x610>)
    49f4:	69e2      	ldr	r2, [r4, #28]
                      & ~(_EBI_RDTIMING1_RDSETUP_MASK
    49f6:	f022 1203 	bic.w	r2, r2, #196611	; 0x30003
    49fa:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
                          | _EBI_RDTIMING1_RDSTRB_MASK
                          | _EBI_RDTIMING1_RDHOLD_MASK))
                     | readTiming;
    49fe:	430a      	orrs	r2, r1
                         | _EBI_RDTIMING_RDSTRB_MASK
                         | _EBI_RDTIMING_RDHOLD_MASK))
                    | readTiming;
  }
  if (banks & EBI_BANK1) {
    EBI->RDTIMING1 = (EBI->RDTIMING1
    4a00:	61e2      	str	r2, [r4, #28]
                      & ~(_EBI_RDTIMING1_RDSETUP_MASK
                          | _EBI_RDTIMING1_RDSTRB_MASK
                          | _EBI_RDTIMING1_RDHOLD_MASK))
                     | readTiming;
  }
  if (banks & EBI_BANK2) {
    4a02:	b13b      	cbz	r3, 4a14 <EBI_Init+0x3f0>
    EBI->RDTIMING2 = (EBI->RDTIMING2
    4a04:	4c8b      	ldr	r4, [pc, #556]	; (4c34 <EBI_Init+0x610>)
    4a06:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
                      & ~(_EBI_RDTIMING2_RDSETUP_MASK
    4a08:	f022 1203 	bic.w	r2, r2, #196611	; 0x30003
    4a0c:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
                          | _EBI_RDTIMING2_RDSTRB_MASK
                          | _EBI_RDTIMING2_RDHOLD_MASK))
                     | readTiming;
    4a10:	430a      	orrs	r2, r1
                          | _EBI_RDTIMING1_RDSTRB_MASK
                          | _EBI_RDTIMING1_RDHOLD_MASK))
                     | readTiming;
  }
  if (banks & EBI_BANK2) {
    EBI->RDTIMING2 = (EBI->RDTIMING2
    4a12:	62e2      	str	r2, [r4, #44]	; 0x2c
                      & ~(_EBI_RDTIMING2_RDSETUP_MASK
                          | _EBI_RDTIMING2_RDSTRB_MASK
                          | _EBI_RDTIMING2_RDHOLD_MASK))
                     | readTiming;
  }
  if (banks & EBI_BANK3) {
    4a14:	f1be 0f00 	cmp.w	lr, #0
    4a18:	d007      	beq.n	4a2a <EBI_Init+0x406>
    EBI->RDTIMING3 = (EBI->RDTIMING3
    4a1a:	4c86      	ldr	r4, [pc, #536]	; (4c34 <EBI_Init+0x610>)
    4a1c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                      & ~(_EBI_RDTIMING3_RDSETUP_MASK
    4a1e:	f022 1203 	bic.w	r2, r2, #196611	; 0x30003
    4a22:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
                          | _EBI_RDTIMING3_RDSTRB_MASK
                          | _EBI_RDTIMING3_RDHOLD_MASK))
                     | readTiming;
    4a26:	4311      	orrs	r1, r2
                          | _EBI_RDTIMING2_RDSTRB_MASK
                          | _EBI_RDTIMING2_RDHOLD_MASK))
                     | readTiming;
  }
  if (banks & EBI_BANK3) {
    EBI->RDTIMING3 = (EBI->RDTIMING3
    4a28:	63e1      	str	r1, [r4, #60]	; 0x3c
#else
  EBI_BankReadTimingSet(ebiInit->banks,
                        ebiInit->readSetupCycles,
                        ebiInit->readStrobeCycles,
                        ebiInit->readHoldCycles);
  EBI_BankReadTimingConfig(ebiInit->banks,
    4a2a:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
    4a2e:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
    4a32:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
{
  /* Verify only valid banks are used */
  EFM_ASSERT((banks & ~(EBI_BANK0 | EBI_BANK1 | EBI_BANK2 | EBI_BANK3)) == 0);

  /* Configure read operation parameters */
  if ( banks & EBI_BANK0 ) {
    4a36:	b14e      	cbz	r6, 4a4c <EBI_Init+0x428>
    4a38:	f8df 9240 	ldr.w	r9, [pc, #576]	; 4c7c <EBI_Init+0x658>
    4a3c:	f8df 8240 	ldr.w	r8, [pc, #576]	; 4c80 <EBI_Init+0x65c>
    4a40:	4e7d      	ldr	r6, [pc, #500]	; (4c38 <EBI_Init+0x614>)
    4a42:	f8c9 4000 	str.w	r4, [r9]
    4a46:	f8c8 1000 	str.w	r1, [r8]
    4a4a:	6032      	str	r2, [r6, #0]
    BUS_RegBitWrite(&EBI->RDTIMING, _EBI_RDTIMING_PAGEMODE_SHIFT, pageMode);
    BUS_RegBitWrite(&EBI->RDTIMING, _EBI_RDTIMING_PREFETCH_SHIFT, prefetch);
    BUS_RegBitWrite(&EBI->RDTIMING, _EBI_RDTIMING_HALFRE_SHIFT, halfRE);
  }
  if ( banks & EBI_BANK1 ) {
    4a4c:	f1bc 0f00 	cmp.w	ip, #0
    4a50:	d009      	beq.n	4a66 <EBI_Init+0x442>
    4a52:	f8df 8230 	ldr.w	r8, [pc, #560]	; 4c84 <EBI_Init+0x660>
    4a56:	f8df c230 	ldr.w	ip, [pc, #560]	; 4c88 <EBI_Init+0x664>
    4a5a:	4e78      	ldr	r6, [pc, #480]	; (4c3c <EBI_Init+0x618>)
    4a5c:	f8c8 4000 	str.w	r4, [r8]
    4a60:	f8cc 1000 	str.w	r1, [ip]
    4a64:	6032      	str	r2, [r6, #0]
    BUS_RegBitWrite(&EBI->RDTIMING1, _EBI_RDTIMING_PAGEMODE_SHIFT, pageMode);
    BUS_RegBitWrite(&EBI->RDTIMING1, _EBI_RDTIMING_PREFETCH_SHIFT, prefetch);
    BUS_RegBitWrite(&EBI->RDTIMING1, _EBI_RDTIMING_HALFRE_SHIFT, halfRE);
  }
  if ( banks & EBI_BANK2 ) {
    4a66:	b13b      	cbz	r3, 4a78 <EBI_Init+0x454>
    4a68:	f8df c220 	ldr.w	ip, [pc, #544]	; 4c8c <EBI_Init+0x668>
    4a6c:	4e74      	ldr	r6, [pc, #464]	; (4c40 <EBI_Init+0x61c>)
    4a6e:	4b75      	ldr	r3, [pc, #468]	; (4c44 <EBI_Init+0x620>)
    4a70:	f8cc 4000 	str.w	r4, [ip]
    4a74:	6031      	str	r1, [r6, #0]
    4a76:	601a      	str	r2, [r3, #0]
    BUS_RegBitWrite(&EBI->RDTIMING2, _EBI_RDTIMING_PAGEMODE_SHIFT, pageMode);
    BUS_RegBitWrite(&EBI->RDTIMING2, _EBI_RDTIMING_PREFETCH_SHIFT, prefetch);
    BUS_RegBitWrite(&EBI->RDTIMING2, _EBI_RDTIMING_HALFRE_SHIFT, halfRE);
  }
  if ( banks & EBI_BANK3 ) {
    4a78:	f1be 0f00 	cmp.w	lr, #0
    4a7c:	d007      	beq.n	4a8e <EBI_Init+0x46a>
    4a7e:	f8df e210 	ldr.w	lr, [pc, #528]	; 4c90 <EBI_Init+0x66c>
    4a82:	4e71      	ldr	r6, [pc, #452]	; (4c48 <EBI_Init+0x624>)
    4a84:	4b71      	ldr	r3, [pc, #452]	; (4c4c <EBI_Init+0x628>)
    4a86:	f8ce 4000 	str.w	r4, [lr]
    4a8a:	6031      	str	r1, [r6, #0]
    4a8c:	601a      	str	r2, [r3, #0]
  EFM_ASSERT(holdCycles < 4);

  /* Configure timing values */
  writeTiming = (setupCycles << _EBI_WRTIMING_WRSETUP_SHIFT)
                | (strobeCycles << _EBI_WRTIMING_WRSTRB_SHIFT)
                | (holdCycles << _EBI_WRTIMING_WRHOLD_SHIFT);
    4a8e:	6b82      	ldr	r2, [r0, #56]	; 0x38
  EFM_ASSERT(strobeCycles < 64);
  EFM_ASSERT(holdCycles < 4);

  /* Configure timing values */
  writeTiming = (setupCycles << _EBI_WRTIMING_WRSETUP_SHIFT)
                | (strobeCycles << _EBI_WRTIMING_WRSTRB_SHIFT)
    4a90:	6b44      	ldr	r4, [r0, #52]	; 0x34
                        ebiInit->readHoldCycles);
  EBI_BankReadTimingConfig(ebiInit->banks,
                           ebiInit->readPageMode,
                           ebiInit->readPrefetch,
                           ebiInit->readHalfRE);
  EBI_BankWriteTimingSet(ebiInit->banks,
    4a92:	68c3      	ldr	r3, [r0, #12]
  EFM_ASSERT(holdCycles < 4);

  /* Configure timing values */
  writeTiming = (setupCycles << _EBI_WRTIMING_WRSETUP_SHIFT)
                | (strobeCycles << _EBI_WRTIMING_WRSTRB_SHIFT)
                | (holdCycles << _EBI_WRTIMING_WRHOLD_SHIFT);
    4a94:	6b01      	ldr	r1, [r0, #48]	; 0x30
    4a96:	0412      	lsls	r2, r2, #16
    4a98:	ea42 2204 	orr.w	r2, r2, r4, lsl #8

  if (banks & EBI_BANK0) {
    4a9c:	f013 0602 	ands.w	r6, r3, #2
  EFM_ASSERT(holdCycles < 4);

  /* Configure timing values */
  writeTiming = (setupCycles << _EBI_WRTIMING_WRSETUP_SHIFT)
                | (strobeCycles << _EBI_WRTIMING_WRSTRB_SHIFT)
                | (holdCycles << _EBI_WRTIMING_WRHOLD_SHIFT);
    4aa0:	ea42 0201 	orr.w	r2, r2, r1

  if (banks & EBI_BANK0) {
    4aa4:	d007      	beq.n	4ab6 <EBI_Init+0x492>
    EBI->WRTIMING = (EBI->WRTIMING
    4aa6:	4c63      	ldr	r4, [pc, #396]	; (4c34 <EBI_Init+0x610>)
    4aa8:	68e1      	ldr	r1, [r4, #12]
                     & ~(_EBI_WRTIMING_WRSETUP_MASK
    4aaa:	f021 1103 	bic.w	r1, r1, #196611	; 0x30003
    4aae:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
                         | _EBI_WRTIMING_WRSTRB_MASK
                         | _EBI_WRTIMING_WRHOLD_MASK))
                    | writeTiming;
    4ab2:	4311      	orrs	r1, r2
  writeTiming = (setupCycles << _EBI_WRTIMING_WRSETUP_SHIFT)
                | (strobeCycles << _EBI_WRTIMING_WRSTRB_SHIFT)
                | (holdCycles << _EBI_WRTIMING_WRHOLD_SHIFT);

  if (banks & EBI_BANK0) {
    EBI->WRTIMING = (EBI->WRTIMING
    4ab4:	60e1      	str	r1, [r4, #12]
                     & ~(_EBI_WRTIMING_WRSETUP_MASK
                         | _EBI_WRTIMING_WRSTRB_MASK
                         | _EBI_WRTIMING_WRHOLD_MASK))
                    | writeTiming;
  }
  if (banks & EBI_BANK1) {
    4ab6:	f013 0404 	ands.w	r4, r3, #4
    4aba:	d00a      	beq.n	4ad2 <EBI_Init+0x4ae>
    EBI->WRTIMING1 = (EBI->WRTIMING1
    4abc:	f8df e174 	ldr.w	lr, [pc, #372]	; 4c34 <EBI_Init+0x610>
    4ac0:	f8de 1020 	ldr.w	r1, [lr, #32]
                      & ~(_EBI_WRTIMING1_WRSETUP_MASK
    4ac4:	f021 1103 	bic.w	r1, r1, #196611	; 0x30003
    4ac8:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
                          | _EBI_WRTIMING1_WRSTRB_MASK
                          | _EBI_WRTIMING1_WRHOLD_MASK))
                     | writeTiming;
    4acc:	4311      	orrs	r1, r2
                         | _EBI_WRTIMING_WRSTRB_MASK
                         | _EBI_WRTIMING_WRHOLD_MASK))
                    | writeTiming;
  }
  if (banks & EBI_BANK1) {
    EBI->WRTIMING1 = (EBI->WRTIMING1
    4ace:	f8ce 1020 	str.w	r1, [lr, #32]
                      & ~(_EBI_WRTIMING1_WRSETUP_MASK
                          | _EBI_WRTIMING1_WRSTRB_MASK
                          | _EBI_WRTIMING1_WRHOLD_MASK))
                     | writeTiming;
  }
  if (banks & EBI_BANK2) {
    4ad2:	f013 0e08 	ands.w	lr, r3, #8
    4ad6:	d00a      	beq.n	4aee <EBI_Init+0x4ca>
    EBI->WRTIMING2 = (EBI->WRTIMING2
    4ad8:	f8df c158 	ldr.w	ip, [pc, #344]	; 4c34 <EBI_Init+0x610>
    4adc:	f8dc 1030 	ldr.w	r1, [ip, #48]	; 0x30
                      & ~(_EBI_WRTIMING2_WRSETUP_MASK
    4ae0:	f021 1103 	bic.w	r1, r1, #196611	; 0x30003
    4ae4:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
                          | _EBI_WRTIMING2_WRSTRB_MASK
                          | _EBI_WRTIMING2_WRHOLD_MASK))
                     | writeTiming;
    4ae8:	4311      	orrs	r1, r2
                          | _EBI_WRTIMING1_WRSTRB_MASK
                          | _EBI_WRTIMING1_WRHOLD_MASK))
                     | writeTiming;
  }
  if (banks & EBI_BANK2) {
    EBI->WRTIMING2 = (EBI->WRTIMING2
    4aea:	f8cc 1030 	str.w	r1, [ip, #48]	; 0x30
                      & ~(_EBI_WRTIMING2_WRSETUP_MASK
                          | _EBI_WRTIMING2_WRSTRB_MASK
                          | _EBI_WRTIMING2_WRHOLD_MASK))
                     | writeTiming;
  }
  if (banks & EBI_BANK3) {
    4aee:	f013 0310 	ands.w	r3, r3, #16
    4af2:	d00a      	beq.n	4b0a <EBI_Init+0x4e6>
    EBI->WRTIMING3 = (EBI->WRTIMING3
    4af4:	f8df c13c 	ldr.w	ip, [pc, #316]	; 4c34 <EBI_Init+0x610>
    4af8:	f8dc 1040 	ldr.w	r1, [ip, #64]	; 0x40
                      & ~(_EBI_WRTIMING3_WRSETUP_MASK
    4afc:	f021 1103 	bic.w	r1, r1, #196611	; 0x30003
    4b00:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
                          | _EBI_WRTIMING3_WRSTRB_MASK
                          | _EBI_WRTIMING3_WRHOLD_MASK))
                     | writeTiming;
    4b04:	430a      	orrs	r2, r1
                          | _EBI_WRTIMING2_WRSTRB_MASK
                          | _EBI_WRTIMING2_WRHOLD_MASK))
                     | writeTiming;
  }
  if (banks & EBI_BANK3) {
    EBI->WRTIMING3 = (EBI->WRTIMING3
    4b06:	f8cc 2040 	str.w	r2, [ip, #64]	; 0x40
                           ebiInit->readHalfRE);
  EBI_BankWriteTimingSet(ebiInit->banks,
                         ebiInit->writeSetupCycles,
                         ebiInit->writeStrobeCycles,
                         ebiInit->writeHoldCycles);
  EBI_BankWriteTimingConfig(ebiInit->banks,
    4b0a:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
    4b0e:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
  /* Verify only valid banks are used */
  EFM_ASSERT((banks & ~(EBI_BANK0 | EBI_BANK1 | EBI_BANK2 | EBI_BANK3)) == 0);

  /* Configure write operation parameters */
  if ( banks & EBI_BANK0 ) {
    4b12:	b12e      	cbz	r6, 4b20 <EBI_Init+0x4fc>
    4b14:	f8df c17c 	ldr.w	ip, [pc, #380]	; 4c94 <EBI_Init+0x670>
    4b18:	4e4d      	ldr	r6, [pc, #308]	; (4c50 <EBI_Init+0x62c>)
    4b1a:	f8cc 1000 	str.w	r1, [ip]
    4b1e:	6032      	str	r2, [r6, #0]
    BUS_RegBitWrite(&EBI->WRTIMING, _EBI_WRTIMING_WBUFDIS_SHIFT, writeBufDisable);
    BUS_RegBitWrite(&EBI->WRTIMING, _EBI_WRTIMING_HALFWE_SHIFT, halfWE);
  }
  if ( banks & EBI_BANK1 ) {
    4b20:	b11c      	cbz	r4, 4b2a <EBI_Init+0x506>
    4b22:	4e4c      	ldr	r6, [pc, #304]	; (4c54 <EBI_Init+0x630>)
    4b24:	4c4c      	ldr	r4, [pc, #304]	; (4c58 <EBI_Init+0x634>)
    4b26:	6031      	str	r1, [r6, #0]
    4b28:	6022      	str	r2, [r4, #0]
    BUS_RegBitWrite(&EBI->WRTIMING1, _EBI_WRTIMING_WBUFDIS_SHIFT, writeBufDisable);
    BUS_RegBitWrite(&EBI->WRTIMING1, _EBI_WRTIMING_HALFWE_SHIFT, halfWE);
  }
  if ( banks & EBI_BANK2 ) {
    4b2a:	f1be 0f00 	cmp.w	lr, #0
    4b2e:	d003      	beq.n	4b38 <EBI_Init+0x514>
    4b30:	4e4a      	ldr	r6, [pc, #296]	; (4c5c <EBI_Init+0x638>)
    4b32:	4c4b      	ldr	r4, [pc, #300]	; (4c60 <EBI_Init+0x63c>)
    4b34:	6031      	str	r1, [r6, #0]
    4b36:	6022      	str	r2, [r4, #0]
    BUS_RegBitWrite(&EBI->WRTIMING2, _EBI_WRTIMING_WBUFDIS_SHIFT, writeBufDisable);
    BUS_RegBitWrite(&EBI->WRTIMING2, _EBI_WRTIMING_HALFWE_SHIFT, halfWE);
  }
  if ( banks & EBI_BANK3 ) {
    4b38:	b11b      	cbz	r3, 4b42 <EBI_Init+0x51e>
    4b3a:	4c4a      	ldr	r4, [pc, #296]	; (4c64 <EBI_Init+0x640>)
    4b3c:	4b4a      	ldr	r3, [pc, #296]	; (4c68 <EBI_Init+0x644>)
    4b3e:	6021      	str	r1, [r4, #0]
    4b40:	601a      	str	r2, [r3, #0]
                         ebiInit->writeStrobeCycles,
                         ebiInit->writeHoldCycles);
  EBI_BankWriteTimingConfig(ebiInit->banks,
                            ebiInit->writeBufferDisable,
                            ebiInit->writeHalfWE);
  EBI_BankAddressTimingSet(ebiInit->banks,
    4b42:	68c3      	ldr	r3, [r0, #12]
  EFM_ASSERT(setupCycles < 4);
  EFM_ASSERT(holdCycles < 4);

  /* Configure address latch timing values */
  addressLatchTiming = (setupCycles << _EBI_ADDRTIMING_ADDRSETUP_SHIFT)
                       | (holdCycles << _EBI_ADDRTIMING_ADDRHOLD_SHIFT);
    4b44:	6981      	ldr	r1, [r0, #24]
    4b46:	6942      	ldr	r2, [r0, #20]

  if (banks & EBI_BANK0) {
    4b48:	f013 0602 	ands.w	r6, r3, #2
  EFM_ASSERT(setupCycles < 4);
  EFM_ASSERT(holdCycles < 4);

  /* Configure address latch timing values */
  addressLatchTiming = (setupCycles << _EBI_ADDRTIMING_ADDRSETUP_SHIFT)
                       | (holdCycles << _EBI_ADDRTIMING_ADDRHOLD_SHIFT);
    4b4c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  if (banks & EBI_BANK0) {
    4b50:	d007      	beq.n	4b62 <EBI_Init+0x53e>
    EBI->ADDRTIMING = (EBI->ADDRTIMING
    4b52:	4c38      	ldr	r4, [pc, #224]	; (4c34 <EBI_Init+0x610>)
    4b54:	6861      	ldr	r1, [r4, #4]
                       & ~(_EBI_ADDRTIMING_ADDRSETUP_MASK
    4b56:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    4b5a:	f021 0103 	bic.w	r1, r1, #3
                           | _EBI_ADDRTIMING_ADDRHOLD_MASK))
                      | addressLatchTiming;
    4b5e:	4311      	orrs	r1, r2
  /* Configure address latch timing values */
  addressLatchTiming = (setupCycles << _EBI_ADDRTIMING_ADDRSETUP_SHIFT)
                       | (holdCycles << _EBI_ADDRTIMING_ADDRHOLD_SHIFT);

  if (banks & EBI_BANK0) {
    EBI->ADDRTIMING = (EBI->ADDRTIMING
    4b60:	6061      	str	r1, [r4, #4]
                       & ~(_EBI_ADDRTIMING_ADDRSETUP_MASK
                           | _EBI_ADDRTIMING_ADDRHOLD_MASK))
                      | addressLatchTiming;
  }
  if (banks & EBI_BANK1) {
    4b62:	f013 0404 	ands.w	r4, r3, #4
    4b66:	d00a      	beq.n	4b7e <EBI_Init+0x55a>
    EBI->ADDRTIMING1 = (EBI->ADDRTIMING1
    4b68:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 4c34 <EBI_Init+0x610>
    4b6c:	f8de 1018 	ldr.w	r1, [lr, #24]
                        & ~(_EBI_ADDRTIMING1_ADDRSETUP_MASK
    4b70:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    4b74:	f021 0103 	bic.w	r1, r1, #3
                            | _EBI_ADDRTIMING1_ADDRHOLD_MASK))
                       | addressLatchTiming;
    4b78:	4311      	orrs	r1, r2
                       & ~(_EBI_ADDRTIMING_ADDRSETUP_MASK
                           | _EBI_ADDRTIMING_ADDRHOLD_MASK))
                      | addressLatchTiming;
  }
  if (banks & EBI_BANK1) {
    EBI->ADDRTIMING1 = (EBI->ADDRTIMING1
    4b7a:	f8ce 1018 	str.w	r1, [lr, #24]
                        & ~(_EBI_ADDRTIMING1_ADDRSETUP_MASK
                            | _EBI_ADDRTIMING1_ADDRHOLD_MASK))
                       | addressLatchTiming;
  }
  if (banks & EBI_BANK2) {
    4b7e:	f013 0e08 	ands.w	lr, r3, #8
    4b82:	d00a      	beq.n	4b9a <EBI_Init+0x576>
    EBI->ADDRTIMING2 = (EBI->ADDRTIMING2
    4b84:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 4c34 <EBI_Init+0x610>
    4b88:	f8dc 1028 	ldr.w	r1, [ip, #40]	; 0x28
                        & ~(_EBI_ADDRTIMING2_ADDRSETUP_MASK
    4b8c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    4b90:	f021 0103 	bic.w	r1, r1, #3
                            | _EBI_ADDRTIMING2_ADDRHOLD_MASK))
                       | addressLatchTiming;
    4b94:	4311      	orrs	r1, r2
                        & ~(_EBI_ADDRTIMING1_ADDRSETUP_MASK
                            | _EBI_ADDRTIMING1_ADDRHOLD_MASK))
                       | addressLatchTiming;
  }
  if (banks & EBI_BANK2) {
    EBI->ADDRTIMING2 = (EBI->ADDRTIMING2
    4b96:	f8cc 1028 	str.w	r1, [ip, #40]	; 0x28
                        & ~(_EBI_ADDRTIMING2_ADDRSETUP_MASK
                            | _EBI_ADDRTIMING2_ADDRHOLD_MASK))
                       | addressLatchTiming;
  }
  if (banks & EBI_BANK3) {
    4b9a:	f013 0310 	ands.w	r3, r3, #16
    4b9e:	d00a      	beq.n	4bb6 <EBI_Init+0x592>
    EBI->ADDRTIMING3 = (EBI->ADDRTIMING3
    4ba0:	f8df c090 	ldr.w	ip, [pc, #144]	; 4c34 <EBI_Init+0x610>
    4ba4:	f8dc 1038 	ldr.w	r1, [ip, #56]	; 0x38
                        & ~(_EBI_ADDRTIMING3_ADDRSETUP_MASK
    4ba8:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    4bac:	f021 0103 	bic.w	r1, r1, #3
                            | _EBI_ADDRTIMING3_ADDRHOLD_MASK))
                       | addressLatchTiming;
    4bb0:	430a      	orrs	r2, r1
                        & ~(_EBI_ADDRTIMING2_ADDRSETUP_MASK
                            | _EBI_ADDRTIMING2_ADDRHOLD_MASK))
                       | addressLatchTiming;
  }
  if (banks & EBI_BANK3) {
    EBI->ADDRTIMING3 = (EBI->ADDRTIMING3
    4bb2:	f8cc 2038 	str.w	r2, [ip, #56]	; 0x38
                            ebiInit->writeBufferDisable,
                            ebiInit->writeHalfWE);
  EBI_BankAddressTimingSet(ebiInit->banks,
                           ebiInit->addrSetupCycles,
                           ebiInit->addrHoldCycles);
  EBI_BankAddressTimingConfig(ebiInit->banks,
    4bb6:	7f02      	ldrb	r2, [r0, #28]
void EBI_BankAddressTimingConfig(uint32_t banks, bool halfALE)
{
  /* Verify only valid banks are used */
  EFM_ASSERT((banks & ~(EBI_BANK0 | EBI_BANK1 | EBI_BANK2 | EBI_BANK3)) == 0);

  if ( banks & EBI_BANK0 ) {
    4bb8:	b10e      	cbz	r6, 4bbe <EBI_Init+0x59a>
    4bba:	492c      	ldr	r1, [pc, #176]	; (4c6c <EBI_Init+0x648>)
    4bbc:	600a      	str	r2, [r1, #0]
    BUS_RegBitWrite(&EBI->ADDRTIMING, _EBI_ADDRTIMING_HALFALE_SHIFT, halfALE);
  }
  if ( banks & EBI_BANK1 ) {
    4bbe:	b10c      	cbz	r4, 4bc4 <EBI_Init+0x5a0>
    4bc0:	492b      	ldr	r1, [pc, #172]	; (4c70 <EBI_Init+0x64c>)
    4bc2:	600a      	str	r2, [r1, #0]
    BUS_RegBitWrite(&EBI->ADDRTIMING1, _EBI_ADDRTIMING_HALFALE_SHIFT, halfALE);
  }
  if ( banks & EBI_BANK2 ) {
    4bc4:	f1be 0f00 	cmp.w	lr, #0
    4bc8:	d001      	beq.n	4bce <EBI_Init+0x5aa>
    4bca:	492a      	ldr	r1, [pc, #168]	; (4c74 <EBI_Init+0x650>)
    4bcc:	600a      	str	r2, [r1, #0]
    BUS_RegBitWrite(&EBI->ADDRTIMING2, _EBI_ADDRTIMING_HALFALE_SHIFT, halfALE);
  }
  if ( banks & EBI_BANK3 ) {
    4bce:	b10b      	cbz	r3, 4bd4 <EBI_Init+0x5b0>
    4bd0:	4b29      	ldr	r3, [pc, #164]	; (4c78 <EBI_Init+0x654>)
    4bd2:	601a      	str	r2, [r3, #0]
  EBI_BankAddressTimingConfig(ebiInit->banks,
                              ebiInit->addrHalfALE);
#endif

  /* Activate new configuration */
  EBI->CTRL = ctrl;
    4bd4:	4b17      	ldr	r3, [pc, #92]	; (4c34 <EBI_Init+0x610>)
    4bd6:	601d      	str	r5, [r3, #0]

  /* Configure Adress Latch Enable */
  switch (ebiInit->mode) {
    4bd8:	2f03      	cmp	r7, #3
    4bda:	d862      	bhi.n	4ca2 <EBI_Init+0x67e>
    4bdc:	e8df f007 	tbb	[pc, r7]
    4be0:	5e95955e 	.word	0x5e95955e
  volatile uint32_t *polRegister = 0;

  /* Verify only valid banks are used */
  EFM_ASSERT((banks & ~(EBI_BANK0 | EBI_BANK1 | EBI_BANK2 | EBI_BANK3)) == 0);

  while (banks) {
    4be4:	461a      	mov	r2, r3
    4be6:	7807      	ldrb	r7, [r0, #0]
    4be8:	4696      	mov	lr, r2
  }
  ctrl |= ebiInit->mode;
  ctrl |= (ebiInit->ardyEnable << _EBI_CTRL_ARDYEN_SHIFT);
  ctrl |= (ebiInit->ardyDisableTimeout << _EBI_CTRL_ARDYTODIS_SHIFT);
#else
  if (ebiInit->banks & EBI_BANK0) {
    4bea:	2600      	movs	r6, #0
    ctrl |= (ebiInit->noIdle << _EBI_CTRL_NOIDLE_SHIFT);
    if ( ebiInit->enable) {
      ctrl |= EBI_CTRL_BANK0EN;
    }
  }
  if (ebiInit->banks & EBI_BANK1) {
    4bec:	f012 0c04 	ands.w	ip, r2, #4
    4bf0:	f43f ae99 	beq.w	4926 <EBI_Init+0x302>
              | _EBI_CTRL_ARDY1EN_MASK
              | _EBI_CTRL_ARDYTO1DIS_MASK
              | _EBI_CTRL_NOIDLE1_MASK
              | _EBI_CTRL_BANK1EN_MASK);
    ctrl |= (ebiInit->mode << _EBI_CTRL_MODE1_SHIFT);
    ctrl |= (ebiInit->ardyEnable << _EBI_CTRL_ARDY1EN_SHIFT);
    4bf4:	7a44      	ldrb	r4, [r0, #9]
    ctrl |= (ebiInit->ardyDisableTimeout << _EBI_CTRL_ARDYTO1DIS_SHIFT);
    4bf6:	7a81      	ldrb	r1, [r0, #10]
    ctrl |= (ebiInit->blEnable << _EBI_CTRL_BL1_SHIFT);
    4bf8:	79c3      	ldrb	r3, [r0, #7]
    ctrl |= (ebiInit->noIdle << _EBI_CTRL_NOIDLE1_SHIFT);
    4bfa:	f890 a008 	ldrb.w	sl, [r0, #8]
    if ( ebiInit->enable) {
      ctrl |= EBI_CTRL_BANK0EN;
    }
  }
  if (ebiInit->banks & EBI_BANK1) {
    ctrl &= ~(_EBI_CTRL_BL1_MASK
    4bfe:	f8df 8098 	ldr.w	r8, [pc, #152]	; 4c98 <EBI_Init+0x674>
    ctrl |= (ebiInit->mode << _EBI_CTRL_MODE1_SHIFT);
    ctrl |= (ebiInit->ardyEnable << _EBI_CTRL_ARDY1EN_SHIFT);
    ctrl |= (ebiInit->ardyDisableTimeout << _EBI_CTRL_ARDYTO1DIS_SHIFT);
    ctrl |= (ebiInit->blEnable << _EBI_CTRL_BL1_SHIFT);
    ctrl |= (ebiInit->noIdle << _EBI_CTRL_NOIDLE1_SHIFT);
    if ( ebiInit->enable) {
    4c02:	f890 904c 	ldrb.w	r9, [r0, #76]	; 0x4c
              | _EBI_CTRL_ARDY1EN_MASK
              | _EBI_CTRL_ARDYTO1DIS_MASK
              | _EBI_CTRL_NOIDLE1_MASK
              | _EBI_CTRL_BANK1EN_MASK);
    ctrl |= (ebiInit->mode << _EBI_CTRL_MODE1_SHIFT);
    ctrl |= (ebiInit->ardyEnable << _EBI_CTRL_ARDY1EN_SHIFT);
    4c06:	04a4      	lsls	r4, r4, #18
    4c08:	ea44 41c1 	orr.w	r1, r4, r1, lsl #19
    4c0c:	ea41 6143 	orr.w	r1, r1, r3, lsl #25
    4c10:	ea41 334a 	orr.w	r3, r1, sl, lsl #13
    if ( ebiInit->enable) {
      ctrl |= EBI_CTRL_BANK0EN;
    }
  }
  if (ebiInit->banks & EBI_BANK1) {
    ctrl &= ~(_EBI_CTRL_BL1_MASK
    4c14:	ea05 0808 	and.w	r8, r5, r8
    4c18:	ea43 0508 	orr.w	r5, r3, r8
              | _EBI_CTRL_BANK1EN_MASK);
    ctrl |= (ebiInit->mode << _EBI_CTRL_MODE1_SHIFT);
    ctrl |= (ebiInit->ardyEnable << _EBI_CTRL_ARDY1EN_SHIFT);
    ctrl |= (ebiInit->ardyDisableTimeout << _EBI_CTRL_ARDYTO1DIS_SHIFT);
    ctrl |= (ebiInit->blEnable << _EBI_CTRL_BL1_SHIFT);
    ctrl |= (ebiInit->noIdle << _EBI_CTRL_NOIDLE1_SHIFT);
    4c1c:	ea45 0587 	orr.w	r5, r5, r7, lsl #2
    if ( ebiInit->enable) {
    4c20:	f1b9 0f00 	cmp.w	r9, #0
    4c24:	f43f ae7f 	beq.w	4926 <EBI_Init+0x302>
      ctrl |= EBI_CTRL_BANK1EN;
    4c28:	f445 7500 	orr.w	r5, r5, #512	; 0x200
    4c2c:	e67b      	b.n	4926 <EBI_Init+0x302>
    4c2e:	bf00      	nop
    4c30:	f73f773f 	.word	0xf73f773f
    4c34:	40008000 	.word	0x40008000
    4c38:	42100170 	.word	0x42100170
    4c3c:	421003f0 	.word	0x421003f0
    4c40:	421005f4 	.word	0x421005f4
    4c44:	421005f0 	.word	0x421005f0
    4c48:	421007f4 	.word	0x421007f4
    4c4c:	421007f0 	.word	0x421007f0
    4c50:	421001f0 	.word	0x421001f0
    4c54:	42100474 	.word	0x42100474
    4c58:	42100470 	.word	0x42100470
    4c5c:	42100674 	.word	0x42100674
    4c60:	42100670 	.word	0x42100670
    4c64:	42100874 	.word	0x42100874
    4c68:	42100870 	.word	0x42100870
    4c6c:	421000f0 	.word	0x421000f0
    4c70:	42100370 	.word	0x42100370
    4c74:	42100570 	.word	0x42100570
    4c78:	42100770 	.word	0x42100770
    4c7c:	42100178 	.word	0x42100178
    4c80:	42100174 	.word	0x42100174
    4c84:	421003f8 	.word	0x421003f8
    4c88:	421003f4 	.word	0x421003f4
    4c8c:	421005f8 	.word	0x421005f8
    4c90:	421007f8 	.word	0x421007f8
    4c94:	421001f4 	.word	0x421001f4
    4c98:	fdf3ddf3 	.word	0xfdf3ddf3
    4c9c:	4b24      	ldr	r3, [pc, #144]	; (4d30 <EBI_Init+0x70c>)
    4c9e:	2200      	movs	r2, #0
    4ca0:	601a      	str	r2, [r3, #0]
      break;
  }

#if !defined(_EFM32_GECKO_FAMILY)
  /* Limit pin enable */
  EBI_GENERIC_ROUTE_REG = (EBI_GENERIC_ROUTE_REG & ~_EBI_GENERIC_ALB_MASK) | ebiInit->aLow;
    4ca2:	4b24      	ldr	r3, [pc, #144]	; (4d34 <EBI_Init+0x710>)
    4ca4:	6c02      	ldr	r2, [r0, #64]	; 0x40
    4ca6:	695e      	ldr	r6, [r3, #20]
  EBI_GENERIC_ROUTE_REG = (EBI_GENERIC_ROUTE_REG & ~_EBI_GENERIC_APEN_MASK) | ebiInit->aHigh;
    4ca8:	6c44      	ldr	r4, [r0, #68]	; 0x44
#if defined(_EBI_ROUTE_LOCATION_MASK)
  /* Location */
  EBI->ROUTE = (EBI->ROUTE & ~_EBI_ROUTE_LOCATION_MASK) | ebiInit->location;
    4caa:	6c81      	ldr	r1, [r0, #72]	; 0x48
      break;
  }

#if !defined(_EFM32_GECKO_FAMILY)
  /* Limit pin enable */
  EBI_GENERIC_ROUTE_REG = (EBI_GENERIC_ROUTE_REG & ~_EBI_GENERIC_ALB_MASK) | ebiInit->aLow;
    4cac:	f426 3640 	bic.w	r6, r6, #196608	; 0x30000
    4cb0:	4332      	orrs	r2, r6
    4cb2:	615a      	str	r2, [r3, #20]
  EBI_GENERIC_ROUTE_REG = (EBI_GENERIC_ROUTE_REG & ~_EBI_GENERIC_APEN_MASK) | ebiInit->aHigh;
    4cb4:	695a      	ldr	r2, [r3, #20]
    4cb6:	f422 02f8 	bic.w	r2, r2, #8126464	; 0x7c0000
    4cba:	4322      	orrs	r2, r4
    4cbc:	615a      	str	r2, [r3, #20]
#if defined(_EBI_ROUTE_LOCATION_MASK)
  /* Location */
  EBI->ROUTE = (EBI->ROUTE & ~_EBI_ROUTE_LOCATION_MASK) | ebiInit->location;
    4cbe:	695a      	ldr	r2, [r3, #20]
    4cc0:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
    4cc4:	430a      	orrs	r2, r1
#endif

  /* Enable EBI BL pin if necessary */
  if (ctrl & (_EBI_CTRL_BL_MASK | _EBI_CTRL_BL1_MASK | _EBI_CTRL_BL2_MASK | _EBI_CTRL_BL3_MASK)) {
    4cc6:	f015 6f70 	tst.w	r5, #251658240	; 0xf000000
  /* Limit pin enable */
  EBI_GENERIC_ROUTE_REG = (EBI_GENERIC_ROUTE_REG & ~_EBI_GENERIC_ALB_MASK) | ebiInit->aLow;
  EBI_GENERIC_ROUTE_REG = (EBI_GENERIC_ROUTE_REG & ~_EBI_GENERIC_APEN_MASK) | ebiInit->aHigh;
#if defined(_EBI_ROUTE_LOCATION_MASK)
  /* Location */
  EBI->ROUTE = (EBI->ROUTE & ~_EBI_ROUTE_LOCATION_MASK) | ebiInit->location;
    4cca:	615a      	str	r2, [r3, #20]
#endif

  /* Enable EBI BL pin if necessary */
  if (ctrl & (_EBI_CTRL_BL_MASK | _EBI_CTRL_BL1_MASK | _EBI_CTRL_BL2_MASK | _EBI_CTRL_BL3_MASK)) {
    4ccc:	d002      	beq.n	4cd4 <EBI_Init+0x6b0>
    4cce:	4b1a      	ldr	r3, [pc, #104]	; (4d38 <EBI_Init+0x714>)
    EBI_RouteBitWrite(_EBI_GENERIC_BLPEN_SHIFT, ebiInit->blEnable);
    4cd0:	79c2      	ldrb	r2, [r0, #7]
    4cd2:	601a      	str	r2, [r3, #0]
    4cd4:	4b19      	ldr	r3, [pc, #100]	; (4d3c <EBI_Init+0x718>)
    4cd6:	2201      	movs	r2, #1
    4cd8:	601a      	str	r2, [r3, #0]

  /* Enable EBI pins EBI_WEn and EBI_REn */
  EBI_RouteBitWrite(_EBI_GENERIC_EBIPEN_SHIFT, 1);

  /* Enable chip select lines */
  EBI_ChipSelectEnable(ebiInit->csLines, true);
    4cda:	6903      	ldr	r3, [r0, #16]
 * @param[in] enable
 *   True to enable, false to disable
 ******************************************************************************/
void EBI_ChipSelectEnable(uint32_t cs, bool enable)
{
  if (cs & EBI_CS0) {
    4cdc:	0798      	lsls	r0, r3, #30
    4cde:	bf44      	itt	mi
    4ce0:	4917      	ldrmi	r1, [pc, #92]	; (4d40 <EBI_Init+0x71c>)
    4ce2:	600a      	strmi	r2, [r1, #0]
    EBI_RouteBitWrite(_EBI_GENERIC_CS0PEN_SHIFT, enable);
  }
  if (cs & EBI_CS1) {
    4ce4:	0759      	lsls	r1, r3, #29
    4ce6:	d502      	bpl.n	4cee <EBI_Init+0x6ca>
    4ce8:	4a16      	ldr	r2, [pc, #88]	; (4d44 <EBI_Init+0x720>)
    4cea:	2101      	movs	r1, #1
    4cec:	6011      	str	r1, [r2, #0]
    EBI_RouteBitWrite(_EBI_GENERIC_CS1PEN_SHIFT, enable);
  }
  if (cs & EBI_CS2) {
    4cee:	071a      	lsls	r2, r3, #28
    4cf0:	d502      	bpl.n	4cf8 <EBI_Init+0x6d4>
    4cf2:	4a15      	ldr	r2, [pc, #84]	; (4d48 <EBI_Init+0x724>)
    4cf4:	2101      	movs	r1, #1
    4cf6:	6011      	str	r1, [r2, #0]
    EBI_RouteBitWrite(_EBI_GENERIC_CS2PEN_SHIFT, enable);
  }
  if (cs & EBI_CS3) {
    4cf8:	06db      	lsls	r3, r3, #27
    4cfa:	d504      	bpl.n	4d06 <EBI_Init+0x6e2>
    4cfc:	4b13      	ldr	r3, [pc, #76]	; (4d4c <EBI_Init+0x728>)
    4cfe:	2201      	movs	r2, #1
    4d00:	601a      	str	r2, [r3, #0]
    4d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4d0a:	4b09      	ldr	r3, [pc, #36]	; (4d30 <EBI_Init+0x70c>)
    4d0c:	2201      	movs	r2, #1
    4d0e:	601a      	str	r2, [r3, #0]
    4d10:	e7c7      	b.n	4ca2 <EBI_Init+0x67e>
    ctrl |= (ebiInit->ardyEnable << _EBI_CTRL_ARDY3EN_SHIFT);
    ctrl |= (ebiInit->ardyDisableTimeout << _EBI_CTRL_ARDYTO3DIS_SHIFT);
    ctrl |= (ebiInit->blEnable << _EBI_CTRL_BL3_SHIFT);
    ctrl |= (ebiInit->noIdle << _EBI_CTRL_NOIDLE3_SHIFT);
    if ( ebiInit->enable) {
      ctrl |= EBI_CTRL_BANK3EN;
    4d12:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
    4d16:	e659      	b.n	49cc <EBI_Init+0x3a8>
    ctrl |= (ebiInit->ardyEnable << _EBI_CTRL_ARDY2EN_SHIFT);
    ctrl |= (ebiInit->ardyDisableTimeout << _EBI_CTRL_ARDYTO2DIS_SHIFT);
    ctrl |= (ebiInit->blEnable << _EBI_CTRL_BL2_SHIFT);
    ctrl |= (ebiInit->noIdle << _EBI_CTRL_NOIDLE2_SHIFT);
    if ( ebiInit->enable) {
      ctrl |= EBI_CTRL_BANK2EN;
    4d18:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
    4d1c:	e63a      	b.n	4994 <EBI_Init+0x370>
    4d1e:	4696      	mov	lr, r2
    4d20:	e764      	b.n	4bec <EBI_Init+0x5c8>
    ctrl |= (ebiInit->noIdle << _EBI_CTRL_NOIDLE1_SHIFT);
    if ( ebiInit->enable) {
      ctrl |= EBI_CTRL_BANK1EN;
    }
  }
  if (ebiInit->banks & EBI_BANK2) {
    4d22:	2300      	movs	r3, #0
  }
  ctrl |= ebiInit->mode;
  ctrl |= (ebiInit->ardyEnable << _EBI_CTRL_ARDYEN_SHIFT);
  ctrl |= (ebiInit->ardyDisableTimeout << _EBI_CTRL_ARDYTODIS_SHIFT);
#else
  if (ebiInit->banks & EBI_BANK0) {
    4d24:	461e      	mov	r6, r3
    4d26:	469e      	mov	lr, r3
    ctrl |= (ebiInit->noIdle << _EBI_CTRL_NOIDLE_SHIFT);
    if ( ebiInit->enable) {
      ctrl |= EBI_CTRL_BANK0EN;
    }
  }
  if (ebiInit->banks & EBI_BANK1) {
    4d28:	469c      	mov	ip, r3
    4d2a:	7807      	ldrb	r7, [r0, #0]
    4d2c:	e632      	b.n	4994 <EBI_Init+0x370>
    4d2e:	bf00      	nop
    4d30:	42100294 	.word	0x42100294
    4d34:	40008000 	.word	0x40008000
    4d38:	4210029c 	.word	0x4210029c
    4d3c:	42100280 	.word	0x42100280
    4d40:	42100284 	.word	0x42100284
    4d44:	42100288 	.word	0x42100288
    4d48:	4210028c 	.word	0x4210028c
    4d4c:	42100290 	.word	0x42100290

00004d50 <EMU_EM4Init>:
 *
 * @param[in] em4Init
 *    Energy Mode 4 configuration structure
 ******************************************************************************/
void EMU_EM4Init(const EMU_EM4Init_TypeDef *em4Init)
{
    4d50:	b430      	push	{r4, r5}
#if defined(_EMU_EM4CONF_MASK)
  /* Init for platforms with EMU->EM4CONF register */
  uint32_t em4conf = EMU->EM4CONF;
    4d52:	4d09      	ldr	r5, [pc, #36]	; (4d78 <EMU_EM4Init+0x28>)
               | _EMU_EM4CONF_BURTCWU_MASK
               | _EMU_EM4CONF_VREGEN_MASK);

  /* Configure new settings */
  em4conf |= (em4Init->lockConfig << _EMU_EM4CONF_LOCKCONF_SHIFT)
             | (em4Init->osc)
    4d54:	7884      	ldrb	r4, [r0, #2]
             | (em4Init->buRtcWakeup << _EMU_EM4CONF_BURTCWU_SHIFT)
             | (em4Init->vreg << _EMU_EM4CONF_VREGEN_SHIFT);
    4d56:	7901      	ldrb	r1, [r0, #4]
               | _EMU_EM4CONF_OSC_MASK
               | _EMU_EM4CONF_BURTCWU_MASK
               | _EMU_EM4CONF_VREGEN_MASK);

  /* Configure new settings */
  em4conf |= (em4Init->lockConfig << _EMU_EM4CONF_LOCKCONF_SHIFT)
    4d58:	7803      	ldrb	r3, [r0, #0]
 ******************************************************************************/
void EMU_EM4Init(const EMU_EM4Init_TypeDef *em4Init)
{
#if defined(_EMU_EM4CONF_MASK)
  /* Init for platforms with EMU->EM4CONF register */
  uint32_t em4conf = EMU->EM4CONF;
    4d5a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
               | _EMU_EM4CONF_VREGEN_MASK);

  /* Configure new settings */
  em4conf |= (em4Init->lockConfig << _EMU_EM4CONF_LOCKCONF_SHIFT)
             | (em4Init->osc)
             | (em4Init->buRtcWakeup << _EMU_EM4CONF_BURTCWU_SHIFT)
    4d5c:	78c0      	ldrb	r0, [r0, #3]
    4d5e:	4321      	orrs	r1, r4
    4d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
#if defined(_EMU_EM4CONF_MASK)
  /* Init for platforms with EMU->EM4CONF register */
  uint32_t em4conf = EMU->EM4CONF;

  /* Clear fields that will be reconfigured */
  em4conf &= ~(_EMU_EM4CONF_LOCKCONF_MASK
    4d64:	f422 3380 	bic.w	r3, r2, #65536	; 0x10000
    4d68:	f023 030f 	bic.w	r3, r3, #15

  /* Configure new settings */
  em4conf |= (em4Init->lockConfig << _EMU_EM4CONF_LOCKCONF_SHIFT)
             | (em4Init->osc)
             | (em4Init->buRtcWakeup << _EMU_EM4CONF_BURTCWU_SHIFT)
             | (em4Init->vreg << _EMU_EM4CONF_VREGEN_SHIFT);
    4d6c:	ea41 0240 	orr.w	r2, r1, r0, lsl #1
               | _EMU_EM4CONF_OSC_MASK
               | _EMU_EM4CONF_BURTCWU_MASK
               | _EMU_EM4CONF_VREGEN_MASK);

  /* Configure new settings */
  em4conf |= (em4Init->lockConfig << _EMU_EM4CONF_LOCKCONF_SHIFT)
    4d70:	4313      	orrs	r3, r2
             | (em4Init->osc)
             | (em4Init->buRtcWakeup << _EMU_EM4CONF_BURTCWU_SHIFT)
             | (em4Init->vreg << _EMU_EM4CONF_VREGEN_SHIFT);

  /* Apply configuration. Note that lock can be set after this stage. */
  EMU->EM4CONF = em4conf;
    4d72:	62eb      	str	r3, [r5, #44]	; 0x2c

#if defined(_EMU_CTRL_EM4HVSCALE_MASK)
  EMU->CTRL = (EMU->CTRL & ~_EMU_CTRL_EM4HVSCALE_MASK)
              | (em4Init->vScaleEM4HVoltage << _EMU_CTRL_EM4HVSCALE_SHIFT);
#endif
}
    4d74:	bc30      	pop	{r4, r5}
    4d76:	4770      	bx	lr
    4d78:	400c6000 	.word	0x400c6000

00004d7c <GPIO_ExtIntConfig>:
                       unsigned int pin,
                       unsigned int intNo,
                       bool risingEdge,
                       bool fallingEdge,
                       bool enable)
{
    4d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif

  /* There are two registers controlling the interrupt configuration:
   * The EXTIPSELL register controls pins 0-7 and EXTIPSELH controls
   * pins 8-15. */
  if (intNo < 8) {
    4d7e:	2a07      	cmp	r2, #7
                       unsigned int pin,
                       unsigned int intNo,
                       bool risingEdge,
                       bool fallingEdge,
                       bool enable)
{
    4d80:	f89d 5014 	ldrb.w	r5, [sp, #20]
    4d84:	f89d 4018 	ldrb.w	r4, [sp, #24]
#endif

  /* There are two registers controlling the interrupt configuration:
   * The EXTIPSELL register controls pins 0-7 and EXTIPSELH controls
   * pins 8-15. */
  if (intNo < 8) {
    4d88:	d91d      	bls.n	4dc6 <GPIO_ExtIntConfig+0x4a>
{
#if defined(PER_BITCLR_MEM_BASE)
  BUS_RegMaskedClear(addr, mask);
  BUS_RegMaskedSet(addr, val);
#else
  *addr = (*addr & ~mask) | val;
    4d8a:	f8df e064 	ldr.w	lr, [pc, #100]	; 4df0 <GPIO_ExtIntConfig+0x74>
    BUS_RegMaskedWrite(&GPIO->EXTIPSELL,
                       _GPIO_EXTIPSELL_EXTIPSEL0_MASK
                       << (_GPIO_EXTIPSELL_EXTIPSEL1_SHIFT * intNo),
                       port << (_GPIO_EXTIPSELL_EXTIPSEL1_SHIFT * intNo));
  } else {
    tmp = intNo - 8;
    4d8e:	f1a2 0108 	sub.w	r1, r2, #8
    BUS_RegMaskedWrite(&GPIO->EXTIPSELH,
                       _GPIO_EXTIPSELH_EXTIPSEL8_MASK
                       << (_GPIO_EXTIPSELH_EXTIPSEL9_SHIFT * tmp),
    4d92:	0089      	lsls	r1, r1, #2
    4d94:	f8de 6000 	ldr.w	r6, [lr]
                       _GPIO_EXTIPSELL_EXTIPSEL0_MASK
                       << (_GPIO_EXTIPSELL_EXTIPSEL1_SHIFT * intNo),
                       port << (_GPIO_EXTIPSELL_EXTIPSEL1_SHIFT * intNo));
  } else {
    tmp = intNo - 8;
    BUS_RegMaskedWrite(&GPIO->EXTIPSELH,
    4d98:	2707      	movs	r7, #7
    4d9a:	408f      	lsls	r7, r1
                       _GPIO_EXTIPSELH_EXTIPSEL8_MASK
                       << (_GPIO_EXTIPSELH_EXTIPSEL9_SHIFT * tmp),
                       port << (_GPIO_EXTIPSELH_EXTIPSEL9_SHIFT * tmp));
    4d9c:	4088      	lsls	r0, r1
    4d9e:	ea26 0107 	bic.w	r1, r6, r7
    4da2:	4308      	orrs	r0, r1
    4da4:	f8ce 0000 	str.w	r0, [lr]
                                     unsigned int bit,
                                     unsigned int val)
{
#if defined(BITBAND_PER_BASE)
  uint32_t aliasAddr =
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);
    4da8:	490e      	ldr	r1, [pc, #56]	; (4de4 <GPIO_ExtIntConfig+0x68>)

  /* Enable/disable falling edge */
  BUS_RegBitWrite(&(GPIO->EXTIFALL), intNo, fallingEdge);

  /* Clear any pending interrupt */
  GPIO->IFC = 1 << intNo;
    4daa:	4e0f      	ldr	r6, [pc, #60]	; (4de8 <GPIO_ExtIntConfig+0x6c>)
    4dac:	4411      	add	r1, r2
__STATIC_INLINE void BUS_RegBitWrite(volatile uint32_t *addr,
                                     unsigned int bit,
                                     unsigned int val)
{
#if defined(BITBAND_PER_BASE)
  uint32_t aliasAddr =
    4dae:	0089      	lsls	r1, r1, #2
    4db0:	2001      	movs	r0, #1
    4db2:	fa00 f202 	lsl.w	r2, r0, r2
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);

  *(volatile uint32_t *)aliasAddr = (uint32_t)val;
    4db6:	600b      	str	r3, [r1, #0]
    4db8:	f8c1 5080 	str.w	r5, [r1, #128]	; 0x80
    4dbc:	f8c6 211c 	str.w	r2, [r6, #284]	; 0x11c
    4dc0:	f8c1 4100 	str.w	r4, [r1, #256]	; 0x100
    4dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
#if defined(PER_BITCLR_MEM_BASE)
  BUS_RegMaskedClear(addr, mask);
  BUS_RegMaskedSet(addr, val);
#else
  *addr = (*addr & ~mask) | val;
    4dc6:	4f09      	ldr	r7, [pc, #36]	; (4dec <GPIO_ExtIntConfig+0x70>)
   * The EXTIPSELL register controls pins 0-7 and EXTIPSELH controls
   * pins 8-15. */
  if (intNo < 8) {
    BUS_RegMaskedWrite(&GPIO->EXTIPSELL,
                       _GPIO_EXTIPSELL_EXTIPSEL0_MASK
                       << (_GPIO_EXTIPSELL_EXTIPSEL1_SHIFT * intNo),
    4dc8:	ea4f 0e82 	mov.w	lr, r2, lsl #2
    4dcc:	683e      	ldr	r6, [r7, #0]

  /* There are two registers controlling the interrupt configuration:
   * The EXTIPSELL register controls pins 0-7 and EXTIPSELH controls
   * pins 8-15. */
  if (intNo < 8) {
    BUS_RegMaskedWrite(&GPIO->EXTIPSELL,
    4dce:	2107      	movs	r1, #7
    4dd0:	fa01 f10e 	lsl.w	r1, r1, lr
                       _GPIO_EXTIPSELL_EXTIPSEL0_MASK
                       << (_GPIO_EXTIPSELL_EXTIPSEL1_SHIFT * intNo),
                       port << (_GPIO_EXTIPSELL_EXTIPSEL1_SHIFT * intNo));
    4dd4:	fa00 f00e 	lsl.w	r0, r0, lr
    4dd8:	ea26 0101 	bic.w	r1, r6, r1
    4ddc:	4308      	orrs	r0, r1
    4dde:	6038      	str	r0, [r7, #0]
    4de0:	e7e2      	b.n	4da8 <GPIO_ExtIntConfig+0x2c>
    4de2:	bf00      	nop
    4de4:	10830840 	.word	0x10830840
    4de8:	40006000 	.word	0x40006000
    4dec:	40006100 	.word	0x40006100
    4df0:	40006104 	.word	0x40006104

00004df4 <GPIO_PinModeSet>:
 ******************************************************************************/
void GPIO_PinModeSet(GPIO_Port_TypeDef port,
                     unsigned int pin,
                     GPIO_Mode_TypeDef mode,
                     unsigned int out)
{
    4df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 ******************************************************************************/
__STATIC_INLINE void GPIO_PinOutSet(GPIO_Port_TypeDef port, unsigned int pin)
{
  EFM_ASSERT(GPIO_PORT_PIN_VALID(port, pin));
#if defined(_GPIO_P_DOUTSET_MASK)
  GPIO->P[port].DOUTSET = 1 << pin;
    4df6:	00c4      	lsls	r4, r0, #3
  EFM_ASSERT(GPIO_PORT_PIN_VALID(port, pin));

  /* If disabling pin, do not modify DOUT in order to reduce chance for */
  /* glitch/spike (may not be sufficient precaution in all use cases) */
  if (mode != gpioModeDisabled) {
    4df8:	b14a      	cbz	r2, 4e0e <GPIO_PinModeSet+0x1a>
    if (out) {
    4dfa:	b3b3      	cbz	r3, 4e6a <GPIO_PinModeSet+0x76>
    4dfc:	1825      	adds	r5, r4, r0
    4dfe:	00ad      	lsls	r5, r5, #2
    4e00:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    4e04:	f505 45c0 	add.w	r5, r5, #24576	; 0x6000
    4e08:	2601      	movs	r6, #1
    4e0a:	408e      	lsls	r6, r1
    4e0c:	612e      	str	r6, [r5, #16]
    4e0e:	1825      	adds	r5, r4, r0
    4e10:	00ad      	lsls	r5, r5, #2
    4e12:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    }
  }

  /* There are two registers controlling the pins for each port. The MODEL
   * register controls pins 0-7 and MODEH controls pins 8-15. */
  if (pin < 8) {
    4e16:	2907      	cmp	r1, #7
    4e18:	f505 45c0 	add.w	r5, r5, #24576	; 0x6000
    4e1c:	d815      	bhi.n	4e4a <GPIO_PinModeSet+0x56>
    GPIO->P[port].MODEL = (GPIO->P[port].MODEL & ~(0xFu << (pin * 4)))
    4e1e:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    4e22:	686f      	ldr	r7, [r5, #4]
    4e24:	260f      	movs	r6, #15
    4e26:	fa06 f60e 	lsl.w	r6, r6, lr
    4e2a:	ea27 0706 	bic.w	r7, r7, r6
                          | (mode << (pin * 4));
    4e2e:	fa02 f60e 	lsl.w	r6, r2, lr
    4e32:	433e      	orrs	r6, r7
  }

  /* There are two registers controlling the pins for each port. The MODEL
   * register controls pins 0-7 and MODEH controls pins 8-15. */
  if (pin < 8) {
    GPIO->P[port].MODEL = (GPIO->P[port].MODEL & ~(0xFu << (pin * 4)))
    4e34:	606e      	str	r6, [r5, #4]
  } else {
    GPIO->P[port].MODEH = (GPIO->P[port].MODEH & ~(0xFu << ((pin - 8) * 4)))
                          | (mode << ((pin - 8) * 4));
  }

  if (mode == gpioModeDisabled) {
    4e36:	b93a      	cbnz	r2, 4e48 <GPIO_PinModeSet+0x54>
    4e38:	4420      	add	r0, r4
    if (out) {
    4e3a:	b9f3      	cbnz	r3, 4e7a <GPIO_PinModeSet+0x86>
 ******************************************************************************/
__STATIC_INLINE void GPIO_PinOutClear(GPIO_Port_TypeDef port, unsigned int pin)
{
  EFM_ASSERT(GPIO_PORT_PIN_VALID(port, pin));
#if defined(_GPIO_P_DOUTCLR_MASK)
  GPIO->P[port].DOUTCLR = 1 << pin;
    4e3c:	4b13      	ldr	r3, [pc, #76]	; (4e8c <GPIO_PinModeSet+0x98>)
    4e3e:	0080      	lsls	r0, r0, #2
    4e40:	4403      	add	r3, r0
    4e42:	2201      	movs	r2, #1
    4e44:	408a      	lsls	r2, r1
    4e46:	605a      	str	r2, [r3, #4]
    4e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
   * register controls pins 0-7 and MODEH controls pins 8-15. */
  if (pin < 8) {
    GPIO->P[port].MODEL = (GPIO->P[port].MODEL & ~(0xFu << (pin * 4)))
                          | (mode << (pin * 4));
  } else {
    GPIO->P[port].MODEH = (GPIO->P[port].MODEH & ~(0xFu << ((pin - 8) * 4)))
    4e4a:	f101 4680 	add.w	r6, r1, #1073741824	; 0x40000000
    4e4e:	3e08      	subs	r6, #8
    4e50:	68af      	ldr	r7, [r5, #8]
    4e52:	00b6      	lsls	r6, r6, #2
    4e54:	f04f 0e0f 	mov.w	lr, #15
    4e58:	fa0e fe06 	lsl.w	lr, lr, r6
    4e5c:	ea27 070e 	bic.w	r7, r7, lr
                          | (mode << ((pin - 8) * 4));
    4e60:	fa02 f606 	lsl.w	r6, r2, r6
    4e64:	433e      	orrs	r6, r7
   * register controls pins 0-7 and MODEH controls pins 8-15. */
  if (pin < 8) {
    GPIO->P[port].MODEL = (GPIO->P[port].MODEL & ~(0xFu << (pin * 4)))
                          | (mode << (pin * 4));
  } else {
    GPIO->P[port].MODEH = (GPIO->P[port].MODEH & ~(0xFu << ((pin - 8) * 4)))
    4e66:	60ae      	str	r6, [r5, #8]
    4e68:	e7e5      	b.n	4e36 <GPIO_PinModeSet+0x42>
    4e6a:	1826      	adds	r6, r4, r0
    4e6c:	4d07      	ldr	r5, [pc, #28]	; (4e8c <GPIO_PinModeSet+0x98>)
    4e6e:	00b6      	lsls	r6, r6, #2
    4e70:	4435      	add	r5, r6
    4e72:	2601      	movs	r6, #1
    4e74:	408e      	lsls	r6, r1
    4e76:	606e      	str	r6, [r5, #4]
    4e78:	e7c9      	b.n	4e0e <GPIO_PinModeSet+0x1a>
 ******************************************************************************/
__STATIC_INLINE void GPIO_PinOutSet(GPIO_Port_TypeDef port, unsigned int pin)
{
  EFM_ASSERT(GPIO_PORT_PIN_VALID(port, pin));
#if defined(_GPIO_P_DOUTSET_MASK)
  GPIO->P[port].DOUTSET = 1 << pin;
    4e7a:	0080      	lsls	r0, r0, #2
    4e7c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    4e80:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    4e84:	2301      	movs	r3, #1
    4e86:	408b      	lsls	r3, r1
    4e88:	6103      	str	r3, [r0, #16]
    4e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e8c:	40006010 	.word	0x40006010

00004e90 <OPAMP_Enable>:
#elif defined(_SILICON_LABS_32B_SERIES_1)
  VDAC_TypeDef *dac,
#endif
  OPAMP_TypeDef opa,
  const OPAMP_Init_TypeDef *init)
{
    4e90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4e94:	4605      	mov	r5, r0
    4e96:	4614      	mov	r4, r2
                            >> _DAC_BIASPROG_BIASPROG_SHIFT));

  if (opa == OPA0) {
    EFM_ASSERT((init->outPen & ~_DAC_OPA0MUX_OUTPEN_MASK) == 0);

    dac->BIASPROG = (dac->BIASPROG
    4e98:	6b03      	ldr	r3, [r0, #48]	; 0x30
                     & ~(_DAC_BIASPROG_BIASPROG_MASK
                         | DAC_BIASPROG_HALFBIAS))
                    | (init->bias     << _DAC_BIASPROG_BIASPROG_SHIFT)
                    | (init->halfBias ?   DAC_BIASPROG_HALFBIAS : 0);
    4e9a:	7e10      	ldrb	r0, [r2, #24]
    EFM_ASSERT((init->outPen & ~_DAC_OPA0MUX_OUTPEN_MASK) == 0);

    dac->BIASPROG = (dac->BIASPROG
                     & ~(_DAC_BIASPROG_BIASPROG_MASK
                         | DAC_BIASPROG_HALFBIAS))
                    | (init->bias     << _DAC_BIASPROG_BIASPROG_SHIFT)
    4e9c:	6952      	ldr	r2, [r2, #20]
  EFM_ASSERT(DAC_REF_VALID(dac));
  EFM_ASSERT(DAC_OPA_VALID(opa));
  EFM_ASSERT(init->bias <= (_DAC_BIASPROG_BIASPROG_MASK
                            >> _DAC_BIASPROG_BIASPROG_SHIFT));

  if (opa == OPA0) {
    4e9e:	2900      	cmp	r1, #0
    4ea0:	d16e      	bne.n	4f80 <OPAMP_Enable+0xf0>
    EFM_ASSERT((init->outPen & ~_DAC_OPA0MUX_OUTPEN_MASK) == 0);

    dac->BIASPROG = (dac->BIASPROG
                     & ~(_DAC_BIASPROG_BIASPROG_MASK
    4ea2:	f023 034f 	bic.w	r3, r3, #79	; 0x4f
                         | DAC_BIASPROG_HALFBIAS))
                    | (init->bias     << _DAC_BIASPROG_BIASPROG_SHIFT)
                    | (init->halfBias ?   DAC_BIASPROG_HALFBIAS : 0);
    4ea6:	2800      	cmp	r0, #0
    EFM_ASSERT((init->outPen & ~_DAC_OPA0MUX_OUTPEN_MASK) == 0);

    dac->BIASPROG = (dac->BIASPROG
                     & ~(_DAC_BIASPROG_BIASPROG_MASK
                         | DAC_BIASPROG_HALFBIAS))
                    | (init->bias     << _DAC_BIASPROG_BIASPROG_SHIFT)
    4ea8:	ea42 0203 	orr.w	r2, r2, r3
                    | (init->halfBias ?   DAC_BIASPROG_HALFBIAS : 0);

    if (init->defaultOffset) {
    4eac:	f894 1020 	ldrb.w	r1, [r4, #32]

    dac->BIASPROG = (dac->BIASPROG
                     & ~(_DAC_BIASPROG_BIASPROG_MASK
                         | DAC_BIASPROG_HALFBIAS))
                    | (init->bias     << _DAC_BIASPROG_BIASPROG_SHIFT)
                    | (init->halfBias ?   DAC_BIASPROG_HALFBIAS : 0);
    4eb0:	bf14      	ite	ne
    4eb2:	2340      	movne	r3, #64	; 0x40
    4eb4:	2300      	moveq	r3, #0
    4eb6:	4313      	orrs	r3, r2
                            >> _DAC_BIASPROG_BIASPROG_SHIFT));

  if (opa == OPA0) {
    EFM_ASSERT((init->outPen & ~_DAC_OPA0MUX_OUTPEN_MASK) == 0);

    dac->BIASPROG = (dac->BIASPROG
    4eb8:	632b      	str	r3, [r5, #48]	; 0x30
                     & ~(_DAC_BIASPROG_BIASPROG_MASK
                         | DAC_BIASPROG_HALFBIAS))
                    | (init->bias     << _DAC_BIASPROG_BIASPROG_SHIFT)
                    | (init->halfBias ?   DAC_BIASPROG_HALFBIAS : 0);

    if (init->defaultOffset) {
    4eba:	2900      	cmp	r1, #0
    4ebc:	f040 80cf 	bne.w	505e <OPAMP_Enable+0x1ce>
                 | (offset &  _DAC_CAL_CH0OFFSET_MASK);
    } else {
      EFM_ASSERT(init->offset <= (_DAC_CAL_CH0OFFSET_MASK
                                  >> _DAC_CAL_CH0OFFSET_SHIFT));

      dac->CAL = (dac->CAL & ~_DAC_CAL_CH0OFFSET_MASK)
    4ec0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
                 | (init->offset << _DAC_CAL_CH0OFFSET_SHIFT);
    4ec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
                 | (offset &  _DAC_CAL_CH0OFFSET_MASK);
    } else {
      EFM_ASSERT(init->offset <= (_DAC_CAL_CH0OFFSET_MASK
                                  >> _DAC_CAL_CH0OFFSET_SHIFT));

      dac->CAL = (dac->CAL & ~_DAC_CAL_CH0OFFSET_MASK)
    4ec4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
                 | (init->offset << _DAC_CAL_CH0OFFSET_SHIFT);
    4ec8:	4313      	orrs	r3, r2
                 | (offset &  _DAC_CAL_CH0OFFSET_MASK);
    } else {
      EFM_ASSERT(init->offset <= (_DAC_CAL_CH0OFFSET_MASK
                                  >> _DAC_CAL_CH0OFFSET_SHIFT));

      dac->CAL = (dac->CAL & ~_DAC_CAL_CH0OFFSET_MASK)
    4eca:	62eb      	str	r3, [r5, #44]	; 0x2c
                 | (init->offset << _DAC_CAL_CH0OFFSET_SHIFT);
    }

    dac->OPA0MUX  = (uint32_t)init->resSel
                    | (uint32_t)init->outMode
    4ecc:	f8d4 b004 	ldr.w	fp, [r4, #4]
    4ed0:	68a6      	ldr	r6, [r4, #8]
                    | init->outPen
    4ed2:	6920      	ldr	r0, [r4, #16]
                    | (uint32_t)init->resInMux
    4ed4:	89a1      	ldrh	r1, [r4, #12]
                    | (uint32_t)init->negSel
    4ed6:	7822      	ldrb	r2, [r4, #0]
                    | (uint32_t)init->posSel
                    | (init->nextOut ? DAC_OPA0MUX_NEXTOUT : 0)
    4ed8:	f894 a01b 	ldrb.w	sl, [r4, #27]
    dac->OPA0MUX  = (uint32_t)init->resSel
                    | (uint32_t)init->outMode
                    | init->outPen
                    | (uint32_t)init->resInMux
                    | (uint32_t)init->negSel
                    | (uint32_t)init->posSel
    4edc:	7863      	ldrb	r3, [r4, #1]
                    | (init->nextOut ? DAC_OPA0MUX_NEXTOUT : 0)
                    | (init->npEn    ? DAC_OPA0MUX_NPEN    : 0)
    4ede:	f894 901c 	ldrb.w	r9, [r4, #28]
                    | (init->ppEn    ? DAC_OPA0MUX_PPEN    : 0);
    4ee2:	f894 801d 	ldrb.w	r8, [r4, #29]
    dac->CH0CTRL |= DAC_CH0CTRL_EN;
    dac->OPACTRL  = (dac->OPACTRL
                     & ~(DAC_OPACTRL_OPA0SHORT
                         | _DAC_OPACTRL_OPA0LPFDIS_MASK
                         |  DAC_OPACTRL_OPA0HCMDIS))
                    | (init->shortInputs ?  DAC_OPACTRL_OPA0SHORT : 0)
    4ee6:	f894 c01e 	ldrb.w	ip, [r4, #30]
                    | (init->lpfPosPadDisable
                       ? DAC_OPACTRL_OPA0LPFDIS_PLPFDIS : 0)
    4eea:	f894 e019 	ldrb.w	lr, [r4, #25]
                    | (init->lpfNegPadDisable
                       ? DAC_OPACTRL_OPA0LPFDIS_NLPFDIS : 0)
    4eee:	7ea7      	ldrb	r7, [r4, #26]
                    | (init->hcmDisable ? DAC_OPACTRL_OPA0HCMDIS : 0)
    4ef0:	7fe4      	ldrb	r4, [r4, #31]
      dac->CAL = (dac->CAL & ~_DAC_CAL_CH0OFFSET_MASK)
                 | (init->offset << _DAC_CAL_CH0OFFSET_SHIFT);
    }

    dac->OPA0MUX  = (uint32_t)init->resSel
                    | (uint32_t)init->outMode
    4ef2:	ea4b 0606 	orr.w	r6, fp, r6
                    | init->outPen
    4ef6:	4330      	orrs	r0, r6
                    | (uint32_t)init->resInMux
    4ef8:	4301      	orrs	r1, r0
                    | (uint32_t)init->negSel
    4efa:	430a      	orrs	r2, r1
                    | (uint32_t)init->posSel
                    | (init->nextOut ? DAC_OPA0MUX_NEXTOUT : 0)
    4efc:	f1ba 0f00 	cmp.w	sl, #0
    dac->OPA0MUX  = (uint32_t)init->resSel
                    | (uint32_t)init->outMode
                    | init->outPen
                    | (uint32_t)init->resInMux
                    | (uint32_t)init->negSel
                    | (uint32_t)init->posSel
    4f00:	ea43 0302 	orr.w	r3, r3, r2
                    | (init->nextOut ? DAC_OPA0MUX_NEXTOUT : 0)
    4f04:	bf14      	ite	ne
    4f06:	f04f 6680 	movne.w	r6, #67108864	; 0x4000000
    4f0a:	2600      	moveq	r6, #0
                    | (init->npEn    ? DAC_OPA0MUX_NPEN    : 0)
    4f0c:	f1b9 0f00 	cmp.w	r9, #0
    4f10:	bf14      	ite	ne
    4f12:	f44f 5000 	movne.w	r0, #8192	; 0x2000
    4f16:	2000      	moveq	r0, #0
                    | (uint32_t)init->outMode
                    | init->outPen
                    | (uint32_t)init->resInMux
                    | (uint32_t)init->negSel
                    | (uint32_t)init->posSel
                    | (init->nextOut ? DAC_OPA0MUX_NEXTOUT : 0)
    4f18:	4333      	orrs	r3, r6
                    | (init->npEn    ? DAC_OPA0MUX_NPEN    : 0)
                    | (init->ppEn    ? DAC_OPA0MUX_PPEN    : 0);
    4f1a:	f1b8 0f00 	cmp.w	r8, #0
    4f1e:	bf14      	ite	ne
    4f20:	f44f 5180 	movne.w	r1, #4096	; 0x1000
    4f24:	2100      	moveq	r1, #0
                    | init->outPen
                    | (uint32_t)init->resInMux
                    | (uint32_t)init->negSel
                    | (uint32_t)init->posSel
                    | (init->nextOut ? DAC_OPA0MUX_NEXTOUT : 0)
                    | (init->npEn    ? DAC_OPA0MUX_NPEN    : 0)
    4f26:	4303      	orrs	r3, r0
                    | (init->ppEn    ? DAC_OPA0MUX_PPEN    : 0);
    4f28:	430b      	orrs	r3, r1

      dac->CAL = (dac->CAL & ~_DAC_CAL_CH0OFFSET_MASK)
                 | (init->offset << _DAC_CAL_CH0OFFSET_SHIFT);
    }

    dac->OPA0MUX  = (uint32_t)init->resSel
    4f2a:	65eb      	str	r3, [r5, #92]	; 0x5c
                    | (uint32_t)init->posSel
                    | (init->nextOut ? DAC_OPA0MUX_NEXTOUT : 0)
                    | (init->npEn    ? DAC_OPA0MUX_NPEN    : 0)
                    | (init->ppEn    ? DAC_OPA0MUX_PPEN    : 0);

    dac->CH0CTRL |= DAC_CH0CTRL_EN;
    4f2c:	68ab      	ldr	r3, [r5, #8]
    4f2e:	f043 0301 	orr.w	r3, r3, #1
    4f32:	60ab      	str	r3, [r5, #8]
    dac->OPACTRL  = (dac->OPACTRL
    4f34:	6d6b      	ldr	r3, [r5, #84]	; 0x54
                     & ~(DAC_OPACTRL_OPA0SHORT
    4f36:	f023 1340 	bic.w	r3, r3, #4194368	; 0x400040
                         | _DAC_OPACTRL_OPA0LPFDIS_MASK
                         |  DAC_OPACTRL_OPA0HCMDIS))
                    | (init->shortInputs ?  DAC_OPACTRL_OPA0SHORT : 0)
    4f3a:	f1bc 0f00 	cmp.w	ip, #0
                    | (init->npEn    ? DAC_OPA0MUX_NPEN    : 0)
                    | (init->ppEn    ? DAC_OPA0MUX_PPEN    : 0);

    dac->CH0CTRL |= DAC_CH0CTRL_EN;
    dac->OPACTRL  = (dac->OPACTRL
                     & ~(DAC_OPACTRL_OPA0SHORT
    4f3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
                         | _DAC_OPACTRL_OPA0LPFDIS_MASK
                         |  DAC_OPACTRL_OPA0HCMDIS))
                    | (init->shortInputs ?  DAC_OPACTRL_OPA0SHORT : 0)
    4f42:	bf14      	ite	ne
    4f44:	f44f 0280 	movne.w	r2, #4194304	; 0x400000
    4f48:	2200      	moveq	r2, #0
    4f4a:	f043 0301 	orr.w	r3, r3, #1
                    | (init->lpfPosPadDisable
                       ? DAC_OPACTRL_OPA0LPFDIS_PLPFDIS : 0)
    4f4e:	f1be 0f00 	cmp.w	lr, #0
    4f52:	ea43 0302 	orr.w	r3, r3, r2
    4f56:	bf14      	ite	ne
    4f58:	f44f 5280 	movne.w	r2, #4096	; 0x1000
    4f5c:	2200      	moveq	r2, #0
                    | (init->lpfNegPadDisable
                       ? DAC_OPACTRL_OPA0LPFDIS_NLPFDIS : 0)
    4f5e:	2f00      	cmp	r7, #0
    4f60:	ea43 0302 	orr.w	r3, r3, r2
    4f64:	bf14      	ite	ne
    4f66:	f44f 5200 	movne.w	r2, #8192	; 0x2000
    4f6a:	2200      	moveq	r2, #0
                    | (init->hcmDisable ? DAC_OPACTRL_OPA0HCMDIS : 0)
    4f6c:	2c00      	cmp	r4, #0
    4f6e:	ea43 0302 	orr.w	r3, r3, r2
    4f72:	bf14      	ite	ne
    4f74:	2240      	movne	r2, #64	; 0x40
    4f76:	2200      	moveq	r2, #0
                    | DAC_OPACTRL_OPA0EN;
    4f78:	4313      	orrs	r3, r2
                    | (init->nextOut ? DAC_OPA0MUX_NEXTOUT : 0)
                    | (init->npEn    ? DAC_OPA0MUX_NPEN    : 0)
                    | (init->ppEn    ? DAC_OPA0MUX_PPEN    : 0);

    dac->CH0CTRL |= DAC_CH0CTRL_EN;
    dac->OPACTRL  = (dac->OPACTRL
    4f7a:	656b      	str	r3, [r5, #84]	; 0x54
    4f7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                       ? DAC_OPACTRL_OPA0LPFDIS_PLPFDIS : 0)
                    | (init->lpfNegPadDisable
                       ? DAC_OPACTRL_OPA0LPFDIS_NLPFDIS : 0)
                    | (init->hcmDisable ? DAC_OPACTRL_OPA0HCMDIS : 0)
                    | DAC_OPACTRL_OPA0EN;
  } else if ( opa == OPA1 ) {
    4f80:	2901      	cmp	r1, #1
                     & ~(_DAC_BIASPROG_BIASPROG_MASK
                         | DAC_BIASPROG_HALFBIAS))
                    | (init->bias   << _DAC_BIASPROG_BIASPROG_SHIFT)
                    | (init->halfBias ? DAC_BIASPROG_HALFBIAS : 0);

    if (init->defaultOffset) {
    4f82:	f894 1020 	ldrb.w	r1, [r4, #32]
                       ? DAC_OPACTRL_OPA0LPFDIS_PLPFDIS : 0)
                    | (init->lpfNegPadDisable
                       ? DAC_OPACTRL_OPA0LPFDIS_NLPFDIS : 0)
                    | (init->hcmDisable ? DAC_OPACTRL_OPA0HCMDIS : 0)
                    | DAC_OPACTRL_OPA0EN;
  } else if ( opa == OPA1 ) {
    4f86:	d074      	beq.n	5072 <OPAMP_Enable+0x1e2>

    dac->BIASPROG = (dac->BIASPROG
                     & ~(_DAC_BIASPROG_OPA2BIASPROG_MASK
                         | DAC_BIASPROG_OPA2HALFBIAS))
                    | (init->bias << _DAC_BIASPROG_OPA2BIASPROG_SHIFT)
                    | (init->halfBias ? DAC_BIASPROG_OPA2HALFBIAS : 0);
    4f88:	2800      	cmp	r0, #0
    EFM_ASSERT((init->outMode & ~DAC_OPA2MUX_OUTMODE) == 0);

    EFM_ASSERT((init->outPen & ~_DAC_OPA2MUX_OUTPEN_MASK) == 0);

    dac->BIASPROG = (dac->BIASPROG
                     & ~(_DAC_BIASPROG_OPA2BIASPROG_MASK
    4f8a:	f423 439e 	bic.w	r3, r3, #20224	; 0x4f00
                         | DAC_BIASPROG_OPA2HALFBIAS))
                    | (init->bias << _DAC_BIASPROG_OPA2BIASPROG_SHIFT)
    4f8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                    | (init->halfBias ? DAC_BIASPROG_OPA2HALFBIAS : 0);
    4f92:	bf14      	ite	ne
    4f94:	f44f 4280 	movne.w	r2, #16384	; 0x4000
    4f98:	2200      	moveq	r2, #0
    4f9a:	4313      	orrs	r3, r2

    EFM_ASSERT((init->outMode & ~DAC_OPA2MUX_OUTMODE) == 0);

    EFM_ASSERT((init->outPen & ~_DAC_OPA2MUX_OUTPEN_MASK) == 0);

    dac->BIASPROG = (dac->BIASPROG
    4f9c:	632b      	str	r3, [r5, #48]	; 0x30
                     & ~(_DAC_BIASPROG_OPA2BIASPROG_MASK
                         | DAC_BIASPROG_OPA2HALFBIAS))
                    | (init->bias << _DAC_BIASPROG_OPA2BIASPROG_SHIFT)
                    | (init->halfBias ? DAC_BIASPROG_OPA2HALFBIAS : 0);

    if (init->defaultOffset) {
    4f9e:	2900      	cmp	r1, #0
    4fa0:	f040 80d4 	bne.w	514c <OPAMP_Enable+0x2bc>
      dac->OPAOFFSET = (dac->OPAOFFSET & ~_DAC_OPAOFFSET_OPA2OFFSET_MASK)
                       | (offset       &  _DAC_OPAOFFSET_OPA2OFFSET_MASK);
    } else {
      EFM_ASSERT(init->offset <= (_DAC_OPAOFFSET_OPA2OFFSET_MASK
                                  >> _DAC_OPAOFFSET_OPA2OFFSET_SHIFT));
      dac->OPAOFFSET = (dac->OPAOFFSET & ~_DAC_OPAOFFSET_OPA2OFFSET_MASK)
    4fa4:	6daa      	ldr	r2, [r5, #88]	; 0x58
                       | (init->offset << _DAC_OPAOFFSET_OPA2OFFSET_SHIFT);
    4fa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
      dac->OPAOFFSET = (dac->OPAOFFSET & ~_DAC_OPAOFFSET_OPA2OFFSET_MASK)
                       | (offset       &  _DAC_OPAOFFSET_OPA2OFFSET_MASK);
    } else {
      EFM_ASSERT(init->offset <= (_DAC_OPAOFFSET_OPA2OFFSET_MASK
                                  >> _DAC_OPAOFFSET_OPA2OFFSET_SHIFT));
      dac->OPAOFFSET = (dac->OPAOFFSET & ~_DAC_OPAOFFSET_OPA2OFFSET_MASK)
    4fa8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
                       | (init->offset << _DAC_OPAOFFSET_OPA2OFFSET_SHIFT);
    4fac:	4313      	orrs	r3, r2
      dac->OPAOFFSET = (dac->OPAOFFSET & ~_DAC_OPAOFFSET_OPA2OFFSET_MASK)
                       | (offset       &  _DAC_OPAOFFSET_OPA2OFFSET_MASK);
    } else {
      EFM_ASSERT(init->offset <= (_DAC_OPAOFFSET_OPA2OFFSET_MASK
                                  >> _DAC_OPAOFFSET_OPA2OFFSET_SHIFT));
      dac->OPAOFFSET = (dac->OPAOFFSET & ~_DAC_OPAOFFSET_OPA2OFFSET_MASK)
    4fae:	65ab      	str	r3, [r5, #88]	; 0x58
                       | (init->offset << _DAC_OPAOFFSET_OPA2OFFSET_SHIFT);
    }

    dac->OPA2MUX  = (uint32_t)init->resSel
                    | (uint32_t)init->outMode
    4fb0:	f8d4 b004 	ldr.w	fp, [r4, #4]
    4fb4:	68a6      	ldr	r6, [r4, #8]
                    | init->outPen
    4fb6:	6920      	ldr	r0, [r4, #16]
                    | (uint32_t)init->resInMux
    4fb8:	89a1      	ldrh	r1, [r4, #12]
                    | (uint32_t)init->negSel
    4fba:	7822      	ldrb	r2, [r4, #0]
                    | (uint32_t)init->posSel
                    | (init->nextOut ? DAC_OPA2MUX_NEXTOUT : 0)
    4fbc:	f894 a01b 	ldrb.w	sl, [r4, #27]
    dac->OPA2MUX  = (uint32_t)init->resSel
                    | (uint32_t)init->outMode
                    | init->outPen
                    | (uint32_t)init->resInMux
                    | (uint32_t)init->negSel
                    | (uint32_t)init->posSel
    4fc0:	7863      	ldrb	r3, [r4, #1]
                    | (init->nextOut ? DAC_OPA2MUX_NEXTOUT : 0)
                    | (init->npEn    ? DAC_OPA2MUX_NPEN    : 0)
    4fc2:	f894 901c 	ldrb.w	r9, [r4, #28]
                    | (init->ppEn    ? DAC_OPA2MUX_PPEN    : 0);
    4fc6:	f894 801d 	ldrb.w	r8, [r4, #29]

    dac->OPACTRL  = (dac->OPACTRL
                     & ~(DAC_OPACTRL_OPA2SHORT
                         | _DAC_OPACTRL_OPA2LPFDIS_MASK
                         | DAC_OPACTRL_OPA2HCMDIS))
                    | (init->shortInputs ?  DAC_OPACTRL_OPA2SHORT : 0)
    4fca:	f894 c01e 	ldrb.w	ip, [r4, #30]
                    | (init->lpfPosPadDisable
                       ? DAC_OPACTRL_OPA2LPFDIS_PLPFDIS : 0)
    4fce:	f894 e019 	ldrb.w	lr, [r4, #25]
                    | (init->lpfNegPadDisable
                       ? DAC_OPACTRL_OPA2LPFDIS_NLPFDIS : 0)
    4fd2:	7ea7      	ldrb	r7, [r4, #26]
                    | (init->hcmDisable ? DAC_OPACTRL_OPA2HCMDIS : 0)
    4fd4:	7fe4      	ldrb	r4, [r4, #31]
      dac->OPAOFFSET = (dac->OPAOFFSET & ~_DAC_OPAOFFSET_OPA2OFFSET_MASK)
                       | (init->offset << _DAC_OPAOFFSET_OPA2OFFSET_SHIFT);
    }

    dac->OPA2MUX  = (uint32_t)init->resSel
                    | (uint32_t)init->outMode
    4fd6:	ea4b 0606 	orr.w	r6, fp, r6
                    | init->outPen
    4fda:	4330      	orrs	r0, r6
                    | (uint32_t)init->resInMux
    4fdc:	4301      	orrs	r1, r0
                    | (uint32_t)init->negSel
    4fde:	430a      	orrs	r2, r1
                    | (uint32_t)init->posSel
                    | (init->nextOut ? DAC_OPA2MUX_NEXTOUT : 0)
    4fe0:	f1ba 0f00 	cmp.w	sl, #0
    dac->OPA2MUX  = (uint32_t)init->resSel
                    | (uint32_t)init->outMode
                    | init->outPen
                    | (uint32_t)init->resInMux
                    | (uint32_t)init->negSel
                    | (uint32_t)init->posSel
    4fe4:	ea43 0302 	orr.w	r3, r3, r2
                    | (init->nextOut ? DAC_OPA2MUX_NEXTOUT : 0)
    4fe8:	bf14      	ite	ne
    4fea:	f04f 6680 	movne.w	r6, #67108864	; 0x4000000
    4fee:	2600      	moveq	r6, #0
                    | (init->npEn    ? DAC_OPA2MUX_NPEN    : 0)
    4ff0:	f1b9 0f00 	cmp.w	r9, #0
    4ff4:	bf14      	ite	ne
    4ff6:	f44f 5000 	movne.w	r0, #8192	; 0x2000
    4ffa:	2000      	moveq	r0, #0
                    | (uint32_t)init->outMode
                    | init->outPen
                    | (uint32_t)init->resInMux
                    | (uint32_t)init->negSel
                    | (uint32_t)init->posSel
                    | (init->nextOut ? DAC_OPA2MUX_NEXTOUT : 0)
    4ffc:	4333      	orrs	r3, r6
                    | (init->npEn    ? DAC_OPA2MUX_NPEN    : 0)
                    | (init->ppEn    ? DAC_OPA2MUX_PPEN    : 0);
    4ffe:	f1b8 0f00 	cmp.w	r8, #0
    5002:	bf14      	ite	ne
    5004:	f44f 5180 	movne.w	r1, #4096	; 0x1000
    5008:	2100      	moveq	r1, #0
                    | init->outPen
                    | (uint32_t)init->resInMux
                    | (uint32_t)init->negSel
                    | (uint32_t)init->posSel
                    | (init->nextOut ? DAC_OPA2MUX_NEXTOUT : 0)
                    | (init->npEn    ? DAC_OPA2MUX_NPEN    : 0)
    500a:	4303      	orrs	r3, r0
                    | (init->ppEn    ? DAC_OPA2MUX_PPEN    : 0);
    500c:	430b      	orrs	r3, r1
                                  >> _DAC_OPAOFFSET_OPA2OFFSET_SHIFT));
      dac->OPAOFFSET = (dac->OPAOFFSET & ~_DAC_OPAOFFSET_OPA2OFFSET_MASK)
                       | (init->offset << _DAC_OPAOFFSET_OPA2OFFSET_SHIFT);
    }

    dac->OPA2MUX  = (uint32_t)init->resSel
    500e:	666b      	str	r3, [r5, #100]	; 0x64
                    | (uint32_t)init->posSel
                    | (init->nextOut ? DAC_OPA2MUX_NEXTOUT : 0)
                    | (init->npEn    ? DAC_OPA2MUX_NPEN    : 0)
                    | (init->ppEn    ? DAC_OPA2MUX_PPEN    : 0);

    dac->OPACTRL  = (dac->OPACTRL
    5010:	6d6b      	ldr	r3, [r5, #84]	; 0x54
                     & ~(DAC_OPACTRL_OPA2SHORT
    5012:	f023 2301 	bic.w	r3, r3, #16777472	; 0x1000100
                         | _DAC_OPACTRL_OPA2LPFDIS_MASK
                         | DAC_OPACTRL_OPA2HCMDIS))
                    | (init->shortInputs ?  DAC_OPACTRL_OPA2SHORT : 0)
    5016:	f1bc 0f00 	cmp.w	ip, #0
                    | (init->nextOut ? DAC_OPA2MUX_NEXTOUT : 0)
                    | (init->npEn    ? DAC_OPA2MUX_NPEN    : 0)
                    | (init->ppEn    ? DAC_OPA2MUX_PPEN    : 0);

    dac->OPACTRL  = (dac->OPACTRL
                     & ~(DAC_OPACTRL_OPA2SHORT
    501a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
                         | _DAC_OPACTRL_OPA2LPFDIS_MASK
                         | DAC_OPACTRL_OPA2HCMDIS))
                    | (init->shortInputs ?  DAC_OPACTRL_OPA2SHORT : 0)
    501e:	bf14      	ite	ne
    5020:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
    5024:	2200      	moveq	r2, #0
    5026:	f043 0304 	orr.w	r3, r3, #4
                    | (init->lpfPosPadDisable
                       ? DAC_OPACTRL_OPA2LPFDIS_PLPFDIS : 0)
    502a:	f1be 0f00 	cmp.w	lr, #0
    502e:	ea43 0302 	orr.w	r3, r3, r2
    5032:	bf14      	ite	ne
    5034:	f44f 3280 	movne.w	r2, #65536	; 0x10000
    5038:	2200      	moveq	r2, #0
                    | (init->lpfNegPadDisable
                       ? DAC_OPACTRL_OPA2LPFDIS_NLPFDIS : 0)
    503a:	2f00      	cmp	r7, #0
    503c:	ea43 0302 	orr.w	r3, r3, r2
    5040:	bf14      	ite	ne
    5042:	f44f 3200 	movne.w	r2, #131072	; 0x20000
    5046:	2200      	moveq	r2, #0
                    | (init->hcmDisable ? DAC_OPACTRL_OPA2HCMDIS : 0)
    5048:	2c00      	cmp	r4, #0
    504a:	ea43 0302 	orr.w	r3, r3, r2
    504e:	bf14      	ite	ne
    5050:	f44f 7280 	movne.w	r2, #256	; 0x100
    5054:	2200      	moveq	r2, #0
                    | DAC_OPACTRL_OPA2EN;
    5056:	4313      	orrs	r3, r2
                    | (uint32_t)init->posSel
                    | (init->nextOut ? DAC_OPA2MUX_NEXTOUT : 0)
                    | (init->npEn    ? DAC_OPA2MUX_NPEN    : 0)
                    | (init->ppEn    ? DAC_OPA2MUX_PPEN    : 0);

    dac->OPACTRL  = (dac->OPACTRL
    5058:	656b      	str	r3, [r5, #84]	; 0x54
    505a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                         | DAC_BIASPROG_HALFBIAS))
                    | (init->bias     << _DAC_BIASPROG_BIASPROG_SHIFT)
                    | (init->halfBias ?   DAC_BIASPROG_HALFBIAS : 0);

    if (init->defaultOffset) {
      offset = SYSTEM_GetCalibrationValue(&dac->CAL);
    505e:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    5062:	f000 f93d 	bl	52e0 <SYSTEM_GetCalibrationValue>
      dac->CAL = (dac->CAL & ~_DAC_CAL_CH0OFFSET_MASK)
    5066:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    5068:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
                 | (offset &  _DAC_CAL_CH0OFFSET_MASK);
    506c:	4318      	orrs	r0, r3
                    | (init->bias     << _DAC_BIASPROG_BIASPROG_SHIFT)
                    | (init->halfBias ?   DAC_BIASPROG_HALFBIAS : 0);

    if (init->defaultOffset) {
      offset = SYSTEM_GetCalibrationValue(&dac->CAL);
      dac->CAL = (dac->CAL & ~_DAC_CAL_CH0OFFSET_MASK)
    506e:	62e8      	str	r0, [r5, #44]	; 0x2c
    5070:	e72c      	b.n	4ecc <OPAMP_Enable+0x3c>
                    | DAC_OPACTRL_OPA0EN;
  } else if ( opa == OPA1 ) {
    EFM_ASSERT((init->outPen & ~_DAC_OPA1MUX_OUTPEN_MASK) == 0);

    dac->BIASPROG = (dac->BIASPROG
                     & ~(_DAC_BIASPROG_BIASPROG_MASK
    5072:	f023 034f 	bic.w	r3, r3, #79	; 0x4f
                         | DAC_BIASPROG_HALFBIAS))
                    | (init->bias   << _DAC_BIASPROG_BIASPROG_SHIFT)
                    | (init->halfBias ? DAC_BIASPROG_HALFBIAS : 0);
    5076:	2800      	cmp	r0, #0
    EFM_ASSERT((init->outPen & ~_DAC_OPA1MUX_OUTPEN_MASK) == 0);

    dac->BIASPROG = (dac->BIASPROG
                     & ~(_DAC_BIASPROG_BIASPROG_MASK
                         | DAC_BIASPROG_HALFBIAS))
                    | (init->bias   << _DAC_BIASPROG_BIASPROG_SHIFT)
    5078:	ea42 0203 	orr.w	r2, r2, r3
                    | (init->halfBias ? DAC_BIASPROG_HALFBIAS : 0);
    507c:	bf14      	ite	ne
    507e:	2340      	movne	r3, #64	; 0x40
    5080:	2300      	moveq	r3, #0
    5082:	4313      	orrs	r3, r2
                    | (init->hcmDisable ? DAC_OPACTRL_OPA0HCMDIS : 0)
                    | DAC_OPACTRL_OPA0EN;
  } else if ( opa == OPA1 ) {
    EFM_ASSERT((init->outPen & ~_DAC_OPA1MUX_OUTPEN_MASK) == 0);

    dac->BIASPROG = (dac->BIASPROG
    5084:	632b      	str	r3, [r5, #48]	; 0x30
                     & ~(_DAC_BIASPROG_BIASPROG_MASK
                         | DAC_BIASPROG_HALFBIAS))
                    | (init->bias   << _DAC_BIASPROG_BIASPROG_SHIFT)
                    | (init->halfBias ? DAC_BIASPROG_HALFBIAS : 0);

    if (init->defaultOffset) {
    5086:	2900      	cmp	r1, #0
    5088:	d16a      	bne.n	5160 <OPAMP_Enable+0x2d0>
                 | (offset &  _DAC_CAL_CH1OFFSET_MASK);
    } else {
      EFM_ASSERT(init->offset <= (_DAC_CAL_CH1OFFSET_MASK
                                  >> _DAC_CAL_CH1OFFSET_SHIFT));

      dac->CAL = (dac->CAL & ~_DAC_CAL_CH1OFFSET_MASK)
    508a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
                 | (init->offset << _DAC_CAL_CH1OFFSET_SHIFT);
    508c:	6a62      	ldr	r2, [r4, #36]	; 0x24
                 | (offset &  _DAC_CAL_CH1OFFSET_MASK);
    } else {
      EFM_ASSERT(init->offset <= (_DAC_CAL_CH1OFFSET_MASK
                                  >> _DAC_CAL_CH1OFFSET_SHIFT));

      dac->CAL = (dac->CAL & ~_DAC_CAL_CH1OFFSET_MASK)
    508e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
                 | (init->offset << _DAC_CAL_CH1OFFSET_SHIFT);
    5092:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                 | (offset &  _DAC_CAL_CH1OFFSET_MASK);
    } else {
      EFM_ASSERT(init->offset <= (_DAC_CAL_CH1OFFSET_MASK
                                  >> _DAC_CAL_CH1OFFSET_SHIFT));

      dac->CAL = (dac->CAL & ~_DAC_CAL_CH1OFFSET_MASK)
    5096:	62eb      	str	r3, [r5, #44]	; 0x2c
                 | (init->offset << _DAC_CAL_CH1OFFSET_SHIFT);
    }

    dac->OPA1MUX  = (uint32_t)init->resSel
                    | (uint32_t)init->outMode
    5098:	f8d4 b004 	ldr.w	fp, [r4, #4]
    509c:	68a6      	ldr	r6, [r4, #8]
                    | init->outPen
    509e:	6920      	ldr	r0, [r4, #16]
                    | (uint32_t)init->resInMux
    50a0:	89a1      	ldrh	r1, [r4, #12]
                    | (uint32_t)init->negSel
    50a2:	7822      	ldrb	r2, [r4, #0]
                    | (uint32_t)init->posSel
                    | (init->nextOut ? DAC_OPA1MUX_NEXTOUT : 0)
    50a4:	f894 a01b 	ldrb.w	sl, [r4, #27]
    dac->OPA1MUX  = (uint32_t)init->resSel
                    | (uint32_t)init->outMode
                    | init->outPen
                    | (uint32_t)init->resInMux
                    | (uint32_t)init->negSel
                    | (uint32_t)init->posSel
    50a8:	7863      	ldrb	r3, [r4, #1]
                    | (init->nextOut ? DAC_OPA1MUX_NEXTOUT : 0)
                    | (init->npEn    ? DAC_OPA1MUX_NPEN    : 0)
    50aa:	f894 901c 	ldrb.w	r9, [r4, #28]
                    | (init->ppEn    ? DAC_OPA1MUX_PPEN    : 0);
    50ae:	f894 801d 	ldrb.w	r8, [r4, #29]
    dac->CH1CTRL |= DAC_CH1CTRL_EN;
    dac->OPACTRL  = (dac->OPACTRL
                     & ~(DAC_OPACTRL_OPA1SHORT
                         | _DAC_OPACTRL_OPA1LPFDIS_MASK
                         | DAC_OPACTRL_OPA1HCMDIS))
                    | (init->shortInputs ? DAC_OPACTRL_OPA1SHORT : 0)
    50b2:	f894 c01e 	ldrb.w	ip, [r4, #30]
                    | (init->lpfPosPadDisable
                       ? DAC_OPACTRL_OPA1LPFDIS_PLPFDIS : 0)
    50b6:	f894 e019 	ldrb.w	lr, [r4, #25]
                    | (init->lpfNegPadDisable
                       ? DAC_OPACTRL_OPA1LPFDIS_NLPFDIS : 0)
    50ba:	7ea7      	ldrb	r7, [r4, #26]
                    | (init->hcmDisable ? DAC_OPACTRL_OPA1HCMDIS : 0)
    50bc:	7fe4      	ldrb	r4, [r4, #31]
      dac->CAL = (dac->CAL & ~_DAC_CAL_CH1OFFSET_MASK)
                 | (init->offset << _DAC_CAL_CH1OFFSET_SHIFT);
    }

    dac->OPA1MUX  = (uint32_t)init->resSel
                    | (uint32_t)init->outMode
    50be:	ea4b 0606 	orr.w	r6, fp, r6
                    | init->outPen
    50c2:	4330      	orrs	r0, r6
                    | (uint32_t)init->resInMux
    50c4:	4301      	orrs	r1, r0
                    | (uint32_t)init->negSel
    50c6:	430a      	orrs	r2, r1
                    | (uint32_t)init->posSel
                    | (init->nextOut ? DAC_OPA1MUX_NEXTOUT : 0)
    50c8:	f1ba 0f00 	cmp.w	sl, #0
    dac->OPA1MUX  = (uint32_t)init->resSel
                    | (uint32_t)init->outMode
                    | init->outPen
                    | (uint32_t)init->resInMux
                    | (uint32_t)init->negSel
                    | (uint32_t)init->posSel
    50cc:	ea43 0302 	orr.w	r3, r3, r2
                    | (init->nextOut ? DAC_OPA1MUX_NEXTOUT : 0)
    50d0:	bf14      	ite	ne
    50d2:	f04f 6080 	movne.w	r0, #67108864	; 0x4000000
    50d6:	2000      	moveq	r0, #0
                    | (init->npEn    ? DAC_OPA1MUX_NPEN    : 0)
    50d8:	f1b9 0f00 	cmp.w	r9, #0
    50dc:	bf14      	ite	ne
    50de:	f44f 5100 	movne.w	r1, #8192	; 0x2000
    50e2:	2100      	moveq	r1, #0
                    | (uint32_t)init->outMode
                    | init->outPen
                    | (uint32_t)init->resInMux
                    | (uint32_t)init->negSel
                    | (uint32_t)init->posSel
                    | (init->nextOut ? DAC_OPA1MUX_NEXTOUT : 0)
    50e4:	4303      	orrs	r3, r0
                    | (init->npEn    ? DAC_OPA1MUX_NPEN    : 0)
                    | (init->ppEn    ? DAC_OPA1MUX_PPEN    : 0);
    50e6:	f1b8 0f00 	cmp.w	r8, #0
    50ea:	bf14      	ite	ne
    50ec:	f44f 5280 	movne.w	r2, #4096	; 0x1000
    50f0:	2200      	moveq	r2, #0
                    | init->outPen
                    | (uint32_t)init->resInMux
                    | (uint32_t)init->negSel
                    | (uint32_t)init->posSel
                    | (init->nextOut ? DAC_OPA1MUX_NEXTOUT : 0)
                    | (init->npEn    ? DAC_OPA1MUX_NPEN    : 0)
    50f2:	430b      	orrs	r3, r1
                    | (init->ppEn    ? DAC_OPA1MUX_PPEN    : 0);
    50f4:	4313      	orrs	r3, r2

      dac->CAL = (dac->CAL & ~_DAC_CAL_CH1OFFSET_MASK)
                 | (init->offset << _DAC_CAL_CH1OFFSET_SHIFT);
    }

    dac->OPA1MUX  = (uint32_t)init->resSel
    50f6:	662b      	str	r3, [r5, #96]	; 0x60
                    | (uint32_t)init->posSel
                    | (init->nextOut ? DAC_OPA1MUX_NEXTOUT : 0)
                    | (init->npEn    ? DAC_OPA1MUX_NPEN    : 0)
                    | (init->ppEn    ? DAC_OPA1MUX_PPEN    : 0);

    dac->CH1CTRL |= DAC_CH1CTRL_EN;
    50f8:	68eb      	ldr	r3, [r5, #12]
    50fa:	f043 0301 	orr.w	r3, r3, #1
    50fe:	60eb      	str	r3, [r5, #12]
    dac->OPACTRL  = (dac->OPACTRL
    5100:	6d6b      	ldr	r3, [r5, #84]	; 0x54
                     & ~(DAC_OPACTRL_OPA1SHORT
    5102:	f023 1380 	bic.w	r3, r3, #8388736	; 0x800080
                         | _DAC_OPACTRL_OPA1LPFDIS_MASK
                         | DAC_OPACTRL_OPA1HCMDIS))
                    | (init->shortInputs ? DAC_OPACTRL_OPA1SHORT : 0)
    5106:	f1bc 0f00 	cmp.w	ip, #0
                    | (init->npEn    ? DAC_OPA1MUX_NPEN    : 0)
                    | (init->ppEn    ? DAC_OPA1MUX_PPEN    : 0);

    dac->CH1CTRL |= DAC_CH1CTRL_EN;
    dac->OPACTRL  = (dac->OPACTRL
                     & ~(DAC_OPACTRL_OPA1SHORT
    510a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
                         | _DAC_OPACTRL_OPA1LPFDIS_MASK
                         | DAC_OPACTRL_OPA1HCMDIS))
                    | (init->shortInputs ? DAC_OPACTRL_OPA1SHORT : 0)
    510e:	bf14      	ite	ne
    5110:	f44f 0200 	movne.w	r2, #8388608	; 0x800000
    5114:	2200      	moveq	r2, #0
    5116:	f043 0302 	orr.w	r3, r3, #2
                    | (init->lpfPosPadDisable
                       ? DAC_OPACTRL_OPA1LPFDIS_PLPFDIS : 0)
    511a:	f1be 0f00 	cmp.w	lr, #0
    511e:	ea43 0302 	orr.w	r3, r3, r2
    5122:	bf14      	ite	ne
    5124:	f44f 4280 	movne.w	r2, #16384	; 0x4000
    5128:	2200      	moveq	r2, #0
                    | (init->lpfNegPadDisable
                       ? DAC_OPACTRL_OPA1LPFDIS_NLPFDIS : 0)
    512a:	2f00      	cmp	r7, #0
    512c:	ea43 0302 	orr.w	r3, r3, r2
    5130:	bf14      	ite	ne
    5132:	f44f 4200 	movne.w	r2, #32768	; 0x8000
    5136:	2200      	moveq	r2, #0
                    | (init->hcmDisable ? DAC_OPACTRL_OPA1HCMDIS : 0)
    5138:	2c00      	cmp	r4, #0
    513a:	ea43 0302 	orr.w	r3, r3, r2
    513e:	bf14      	ite	ne
    5140:	2280      	movne	r2, #128	; 0x80
    5142:	2200      	moveq	r2, #0
                    | DAC_OPACTRL_OPA1EN;
    5144:	4313      	orrs	r3, r2
                    | (init->nextOut ? DAC_OPA1MUX_NEXTOUT : 0)
                    | (init->npEn    ? DAC_OPA1MUX_NPEN    : 0)
                    | (init->ppEn    ? DAC_OPA1MUX_PPEN    : 0);

    dac->CH1CTRL |= DAC_CH1CTRL_EN;
    dac->OPACTRL  = (dac->OPACTRL
    5146:	656b      	str	r3, [r5, #84]	; 0x54
    5148:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                         | DAC_BIASPROG_OPA2HALFBIAS))
                    | (init->bias << _DAC_BIASPROG_OPA2BIASPROG_SHIFT)
                    | (init->halfBias ? DAC_BIASPROG_OPA2HALFBIAS : 0);

    if (init->defaultOffset) {
      offset = SYSTEM_GetCalibrationValue(&dac->OPAOFFSET);
    514c:	f105 0058 	add.w	r0, r5, #88	; 0x58
    5150:	f000 f8c6 	bl	52e0 <SYSTEM_GetCalibrationValue>
      dac->OPAOFFSET = (dac->OPAOFFSET & ~_DAC_OPAOFFSET_OPA2OFFSET_MASK)
    5154:	6dab      	ldr	r3, [r5, #88]	; 0x58
    5156:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
                       | (offset       &  _DAC_OPAOFFSET_OPA2OFFSET_MASK);
    515a:	4318      	orrs	r0, r3
                    | (init->bias << _DAC_BIASPROG_OPA2BIASPROG_SHIFT)
                    | (init->halfBias ? DAC_BIASPROG_OPA2HALFBIAS : 0);

    if (init->defaultOffset) {
      offset = SYSTEM_GetCalibrationValue(&dac->OPAOFFSET);
      dac->OPAOFFSET = (dac->OPAOFFSET & ~_DAC_OPAOFFSET_OPA2OFFSET_MASK)
    515c:	65a8      	str	r0, [r5, #88]	; 0x58
    515e:	e727      	b.n	4fb0 <OPAMP_Enable+0x120>
                         | DAC_BIASPROG_HALFBIAS))
                    | (init->bias   << _DAC_BIASPROG_BIASPROG_SHIFT)
                    | (init->halfBias ? DAC_BIASPROG_HALFBIAS : 0);

    if (init->defaultOffset) {
      offset = SYSTEM_GetCalibrationValue(&dac->CAL);
    5160:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    5164:	f000 f8bc 	bl	52e0 <SYSTEM_GetCalibrationValue>
      dac->CAL = (dac->CAL & ~_DAC_CAL_CH1OFFSET_MASK)
    5168:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    516a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    516e:	62eb      	str	r3, [r5, #44]	; 0x2c
    5170:	e792      	b.n	5098 <OPAMP_Enable+0x208>
    5172:	bf00      	nop

00005174 <PRS_SourceSignalSet>:
                         PRS_Edge_TypeDef edge)
{
  EFM_ASSERT(ch < PRS_CHAN_COUNT);

  PRS->CH[ch].CTRL = (source & _PRS_CH_CTRL_SOURCESEL_MASK)
                     | (signal & _PRS_CH_CTRL_SIGSEL_MASK)
    5174:	f002 0207 	and.w	r2, r2, #7
    5178:	4313      	orrs	r3, r2
                         uint32_t signal,
                         PRS_Edge_TypeDef edge)
{
  EFM_ASSERT(ch < PRS_CHAN_COUNT);

  PRS->CH[ch].CTRL = (source & _PRS_CH_CTRL_SOURCESEL_MASK)
    517a:	f401 117c 	and.w	r1, r1, #4128768	; 0x3f0000
    517e:	3004      	adds	r0, #4
    5180:	4a02      	ldr	r2, [pc, #8]	; (518c <PRS_SourceSignalSet+0x18>)
                     | (signal & _PRS_CH_CTRL_SIGSEL_MASK)
                     | (uint32_t)edge;
    5182:	4319      	orrs	r1, r3
                         uint32_t signal,
                         PRS_Edge_TypeDef edge)
{
  EFM_ASSERT(ch < PRS_CHAN_COUNT);

  PRS->CH[ch].CTRL = (source & _PRS_CH_CTRL_SOURCESEL_MASK)
    5184:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
    5188:	4770      	bx	lr
    518a:	bf00      	nop
    518c:	400cc000 	.word	0x400cc000

00005190 <RMU_ResetControl>:
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
    5190:	fa90 f0a0 	rbit	r0, r0
 *   Number of trailing zeros in value.
 ******************************************************************************/
__STATIC_INLINE uint32_t SL_CTZ(uint32_t value)
{
#if (__CORTEX_M >= 3)
  return __CLZ(__RBIT(value));
    5194:	fab0 f080 	clz	r0, r0
                                     unsigned int bit,
                                     unsigned int val)
{
#if defined(BITBAND_PER_BASE)
  uint32_t aliasAddr =
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);
    5198:	f100 5087 	add.w	r0, r0, #283115520	; 0x10e00000
    519c:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
  shift = SL_CTZ((uint32_t)reset);
#if defined(_RMU_CTRL_PINRMODE_MASK)
  val = (uint32_t)mode << shift;
  RMU->CTRL = (RMU->CTRL & ~reset) | val;
#else
  BUS_RegBitWrite(&RMU->CTRL, (uint32_t)shift, mode ? 1 : 0);
    51a0:	3100      	adds	r1, #0
__STATIC_INLINE void BUS_RegBitWrite(volatile uint32_t *addr,
                                     unsigned int bit,
                                     unsigned int val)
{
#if defined(BITBAND_PER_BASE)
  uint32_t aliasAddr =
    51a2:	ea4f 0080 	mov.w	r0, r0, lsl #2
    51a6:	bf18      	it	ne
    51a8:	2101      	movne	r1, #1
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);

  *(volatile uint32_t *)aliasAddr = (uint32_t)val;
    51aa:	6001      	str	r1, [r0, #0]
    51ac:	4770      	bx	lr
    51ae:	bf00      	nop

000051b0 <RMU_ResetCauseClear>:
 *   The reset cause bits must be cleared by SW before a new reset occurs,
 *   otherwise reset causes may accumulate. See @ref RMU_ResetCauseGet().
 ******************************************************************************/
void RMU_ResetCauseClear(void)
{
  RMU->CMD = RMU_CMD_RCCLR;
    51b0:	4b0b      	ldr	r3, [pc, #44]	; (51e0 <RMU_ResetCauseClear+0x30>)
  {
    uint32_t locked;

    /* Clear some reset causes not cleared with RMU CMD register */
    /* (If EMU registers locked, they must be unlocked first) */
    locked = EMU->LOCK & EMU_LOCK_LOCKKEY_LOCKED;
    51b2:	490c      	ldr	r1, [pc, #48]	; (51e4 <RMU_ResetCauseClear+0x34>)
 *   The reset cause bits must be cleared by SW before a new reset occurs,
 *   otherwise reset causes may accumulate. See @ref RMU_ResetCauseGet().
 ******************************************************************************/
void RMU_ResetCauseClear(void)
{
  RMU->CMD = RMU_CMD_RCCLR;
    51b4:	2201      	movs	r2, #1
    51b6:	609a      	str	r2, [r3, #8]
  {
    uint32_t locked;

    /* Clear some reset causes not cleared with RMU CMD register */
    /* (If EMU registers locked, they must be unlocked first) */
    locked = EMU->LOCK & EMU_LOCK_LOCKKEY_LOCKED;
    51b8:	688b      	ldr	r3, [r1, #8]
    if (locked) {
    51ba:	4013      	ands	r3, r2
    51bc:	d00b      	beq.n	51d6 <RMU_ResetCauseClear+0x26>
    51be:	480a      	ldr	r0, [pc, #40]	; (51e8 <RMU_ResetCauseClear+0x38>)
 *   This function clears all the reset cause bits of the RSTCAUSE register.
 *   The reset cause bits must be cleared by SW before a new reset occurs,
 *   otherwise reset causes may accumulate. See @ref RMU_ResetCauseGet().
 ******************************************************************************/
void RMU_ResetCauseClear(void)
{
    51c0:	b410      	push	{r4}
    51c2:	2300      	movs	r3, #0
 * @brief
 *   Unlock the EMU so that writing to locked registers again is possible.
 ******************************************************************************/
__STATIC_INLINE void EMU_Unlock(void)
{
  EMU->LOCK = EMU_LOCK_LOCKKEY_UNLOCK;
    51c4:	f64a 54e8 	movw	r4, #44520	; 0xade8
    51c8:	608c      	str	r4, [r1, #8]
    51ca:	6002      	str	r2, [r0, #0]
    if (locked) {
      EMU_Lock();
    }
  }
#endif
}
    51cc:	f85d 4b04 	ldr.w	r4, [sp], #4
    51d0:	6003      	str	r3, [r0, #0]
 *   An exception to this is the energy mode entering API (EMU_EnterEMn()),
 *   which can be used when the EMU registers are locked.
 ******************************************************************************/
__STATIC_INLINE void EMU_Lock(void)
{
  EMU->LOCK = EMU_LOCK_LOCKKEY_LOCK;
    51d2:	608b      	str	r3, [r1, #8]
    51d4:	4770      	bx	lr
    51d6:	4904      	ldr	r1, [pc, #16]	; (51e8 <RMU_ResetCauseClear+0x38>)
    51d8:	600a      	str	r2, [r1, #0]
    51da:	600b      	str	r3, [r1, #0]
    51dc:	4770      	bx	lr
    51de:	bf00      	nop
    51e0:	400ca000 	.word	0x400ca000
    51e4:	400c6000 	.word	0x400c6000
    51e8:	438c0480 	.word	0x438c0480

000051ec <RMU_ResetCauseGet>:
{
#define LB_CLW0           (*((volatile uint32_t *)(LOCKBITS_BASE) +122))
#define LB_CLW0_PINRESETSOFT    (1 << 2)

#if !defined(EMLIB_REGRESSION_TEST)
  uint32_t rstCause = RMU->RSTCAUSE;
    51ec:	4b3b      	ldr	r3, [pc, #236]	; (52dc <RMU_ResetCauseGet+0xf0>)
    51ee:	685b      	ldr	r3, [r3, #4]
    }
#endif

    /* Check reset cause requirements. Note that a bit is "don't care" if 0 in
       both resetCauseMask and resetCauseZeroXMask. */
    if ((rstCause & resetCauseMasks[i].resetCauseMask)
    51f0:	f003 0201 	and.w	r2, r3, #1
    51f4:	0799      	lsls	r1, r3, #30
#define LB_CLW0_PINRESETSOFT    (1 << 2)

#if !defined(EMLIB_REGRESSION_TEST)
  uint32_t rstCause = RMU->RSTCAUSE;
#endif
  uint32_t validRstCause = 0;
    51f6:	4610      	mov	r0, r2
    }
#endif

    /* Check reset cause requirements. Note that a bit is "don't care" if 0 in
       both resetCauseMask and resetCauseZeroXMask. */
    if ((rstCause & resetCauseMasks[i].resetCauseMask)
    51f8:	d504      	bpl.n	5204 <RMU_ResetCauseGet+0x18>
        && !(rstCause & zeroXMask)) {
    51fa:	f013 0f81 	tst.w	r3, #129	; 0x81
      /* Add this reset-cause to the mask of qualified reset-causes */
      validRstCause |= resetCauseMasks[i].resetCauseMask;
    51fe:	bf08      	it	eq
    5200:	f042 0002 	orreq.w	r0, r2, #2
    }
#endif

    /* Check reset cause requirements. Note that a bit is "don't care" if 0 in
       both resetCauseMask and resetCauseZeroXMask. */
    if ((rstCause & resetCauseMasks[i].resetCauseMask)
    5204:	0759      	lsls	r1, r3, #29
    5206:	d504      	bpl.n	5212 <RMU_ResetCauseGet+0x26>
        && !(rstCause & zeroXMask)) {
    5208:	f013 0f91 	tst.w	r3, #145	; 0x91
      /* Add this reset-cause to the mask of qualified reset-causes */
      validRstCause |= resetCauseMasks[i].resetCauseMask;
    520c:	bf08      	it	eq
    520e:	f040 0004 	orreq.w	r0, r0, #4
    }
#endif

    /* Check reset cause requirements. Note that a bit is "don't care" if 0 in
       both resetCauseMask and resetCauseZeroXMask. */
    if ((rstCause & resetCauseMasks[i].resetCauseMask)
    5212:	0719      	lsls	r1, r3, #28
    5214:	d501      	bpl.n	521a <RMU_ResetCauseGet+0x2e>
        && !(rstCause & zeroXMask)) {
    5216:	2a00      	cmp	r2, #0
    5218:	d05c      	beq.n	52d4 <RMU_ResetCauseGet+0xe8>
    }
#endif

    /* Check reset cause requirements. Note that a bit is "don't care" if 0 in
       both resetCauseMask and resetCauseZeroXMask. */
    if ((rstCause & resetCauseMasks[i].resetCauseMask)
    521a:	06d9      	lsls	r1, r3, #27
    521c:	d503      	bpl.n	5226 <RMU_ResetCauseGet+0x3a>
        && !(rstCause & zeroXMask)) {
    521e:	0799      	lsls	r1, r3, #30
      /* Add this reset-cause to the mask of qualified reset-causes */
      validRstCause |= resetCauseMasks[i].resetCauseMask;
    5220:	bf08      	it	eq
    5222:	f040 0010 	orreq.w	r0, r0, #16
    }
#endif

    /* Check reset cause requirements. Note that a bit is "don't care" if 0 in
       both resetCauseMask and resetCauseZeroXMask. */
    if ((rstCause & resetCauseMasks[i].resetCauseMask)
    5226:	0699      	lsls	r1, r3, #26
    5228:	d504      	bpl.n	5234 <RMU_ResetCauseGet+0x48>
        && !(rstCause & zeroXMask)) {
    522a:	f64e 71df 	movw	r1, #61407	; 0xefdf
    522e:	4019      	ands	r1, r3
    5230:	2900      	cmp	r1, #0
    5232:	d04c      	beq.n	52ce <RMU_ResetCauseGet+0xe2>
    }
#endif

    /* Check reset cause requirements. Note that a bit is "don't care" if 0 in
       both resetCauseMask and resetCauseZeroXMask. */
    if ((rstCause & resetCauseMasks[i].resetCauseMask)
    5234:	0659      	lsls	r1, r3, #25
    5236:	d504      	bpl.n	5242 <RMU_ResetCauseGet+0x56>
        && !(rstCause & zeroXMask)) {
    5238:	f64e 719f 	movw	r1, #61343	; 0xef9f
    523c:	4019      	ands	r1, r3
    523e:	2900      	cmp	r1, #0
    5240:	d042      	beq.n	52c8 <RMU_ResetCauseGet+0xdc>
    }
#endif

    /* Check reset cause requirements. Note that a bit is "don't care" if 0 in
       both resetCauseMask and resetCauseZeroXMask. */
    if ((rstCause & resetCauseMasks[i].resetCauseMask)
    5242:	0619      	lsls	r1, r3, #24
    5244:	d504      	bpl.n	5250 <RMU_ResetCauseGet+0x64>
        && !(rstCause & zeroXMask)) {
    5246:	f240 7119 	movw	r1, #1817	; 0x719
    524a:	4019      	ands	r1, r3
    524c:	2900      	cmp	r1, #0
    524e:	d038      	beq.n	52c2 <RMU_ResetCauseGet+0xd6>
    }
#endif

    /* Check reset cause requirements. Note that a bit is "don't care" if 0 in
       both resetCauseMask and resetCauseZeroXMask. */
    if ((rstCause & resetCauseMasks[i].resetCauseMask)
    5250:	05d9      	lsls	r1, r3, #23
    5252:	d503      	bpl.n	525c <RMU_ResetCauseGet+0x70>
        && !(rstCause & zeroXMask)) {
    5254:	f240 6119 	movw	r1, #1561	; 0x619
    5258:	4019      	ands	r1, r3
    525a:	b379      	cbz	r1, 52bc <RMU_ResetCauseGet+0xd0>
    }
#endif

    /* Check reset cause requirements. Note that a bit is "don't care" if 0 in
       both resetCauseMask and resetCauseZeroXMask. */
    if ((rstCause & resetCauseMasks[i].resetCauseMask)
    525c:	0599      	lsls	r1, r3, #22
    525e:	d503      	bpl.n	5268 <RMU_ResetCauseGet+0x7c>
        && !(rstCause & zeroXMask)) {
    5260:	f240 411f 	movw	r1, #1055	; 0x41f
    5264:	4019      	ands	r1, r3
    5266:	b331      	cbz	r1, 52b6 <RMU_ResetCauseGet+0xca>
    }
#endif

    /* Check reset cause requirements. Note that a bit is "don't care" if 0 in
       both resetCauseMask and resetCauseZeroXMask. */
    if ((rstCause & resetCauseMasks[i].resetCauseMask)
    5268:	0559      	lsls	r1, r3, #21
    526a:	d503      	bpl.n	5274 <RMU_ResetCauseGet+0x88>
        && !(rstCause & zeroXMask)) {
    526c:	f240 211f 	movw	r1, #543	; 0x21f
    5270:	4019      	ands	r1, r3
    5272:	b1e9      	cbz	r1, 52b0 <RMU_ResetCauseGet+0xc4>
    }
#endif

    /* Check reset cause requirements. Note that a bit is "don't care" if 0 in
       both resetCauseMask and resetCauseZeroXMask. */
    if ((rstCause & resetCauseMasks[i].resetCauseMask)
    5274:	0519      	lsls	r1, r3, #20
    5276:	d500      	bpl.n	527a <RMU_ResetCauseGet+0x8e>
        && !(rstCause & zeroXMask)) {
    5278:	b1ba      	cbz	r2, 52aa <RMU_ResetCauseGet+0xbe>
    }
#endif

    /* Check reset cause requirements. Note that a bit is "don't care" if 0 in
       both resetCauseMask and resetCauseZeroXMask. */
    if ((rstCause & resetCauseMasks[i].resetCauseMask)
    527a:	04d9      	lsls	r1, r3, #19
    527c:	d500      	bpl.n	5280 <RMU_ResetCauseGet+0x94>
        && !(rstCause & zeroXMask)) {
    527e:	b18a      	cbz	r2, 52a4 <RMU_ResetCauseGet+0xb8>
    }
#endif

    /* Check reset cause requirements. Note that a bit is "don't care" if 0 in
       both resetCauseMask and resetCauseZeroXMask. */
    if ((rstCause & resetCauseMasks[i].resetCauseMask)
    5280:	0499      	lsls	r1, r3, #18
    5282:	d500      	bpl.n	5286 <RMU_ResetCauseGet+0x9a>
        && !(rstCause & zeroXMask)) {
    5284:	b15a      	cbz	r2, 529e <RMU_ResetCauseGet+0xb2>
    }
#endif

    /* Check reset cause requirements. Note that a bit is "don't care" if 0 in
       both resetCauseMask and resetCauseZeroXMask. */
    if ((rstCause & resetCauseMasks[i].resetCauseMask)
    5286:	0459      	lsls	r1, r3, #17
    5288:	d500      	bpl.n	528c <RMU_ResetCauseGet+0xa0>
        && !(rstCause & zeroXMask)) {
    528a:	b12a      	cbz	r2, 5298 <RMU_ResetCauseGet+0xac>
    }
#endif

    /* Check reset cause requirements. Note that a bit is "don't care" if 0 in
       both resetCauseMask and resetCauseZeroXMask. */
    if ((rstCause & resetCauseMasks[i].resetCauseMask)
    528c:	041b      	lsls	r3, r3, #16
    528e:	d502      	bpl.n	5296 <RMU_ResetCauseGet+0xaa>
        && !(rstCause & zeroXMask)) {
    5290:	b90a      	cbnz	r2, 5296 <RMU_ResetCauseGet+0xaa>
      /* Add this reset-cause to the mask of qualified reset-causes */
      validRstCause |= resetCauseMasks[i].resetCauseMask;
    5292:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
                       | RMU_RSTCAUSE_DVDDBOD
                       | RMU_RSTCAUSE_AVDDBOD);
  }
#endif
  return validRstCause;
}
    5296:	4770      	bx	lr
    /* Check reset cause requirements. Note that a bit is "don't care" if 0 in
       both resetCauseMask and resetCauseZeroXMask. */
    if ((rstCause & resetCauseMasks[i].resetCauseMask)
        && !(rstCause & zeroXMask)) {
      /* Add this reset-cause to the mask of qualified reset-causes */
      validRstCause |= resetCauseMasks[i].resetCauseMask;
    5298:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
    529c:	e7f6      	b.n	528c <RMU_ResetCauseGet+0xa0>
    529e:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    52a2:	e7f0      	b.n	5286 <RMU_ResetCauseGet+0x9a>
    52a4:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
    52a8:	e7ea      	b.n	5280 <RMU_ResetCauseGet+0x94>
    52aa:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    52ae:	e7e4      	b.n	527a <RMU_ResetCauseGet+0x8e>
    52b0:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    52b4:	e7de      	b.n	5274 <RMU_ResetCauseGet+0x88>
    52b6:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    52ba:	e7d5      	b.n	5268 <RMU_ResetCauseGet+0x7c>
    52bc:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    52c0:	e7cc      	b.n	525c <RMU_ResetCauseGet+0x70>
    52c2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    52c6:	e7c3      	b.n	5250 <RMU_ResetCauseGet+0x64>
    52c8:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    52cc:	e7b9      	b.n	5242 <RMU_ResetCauseGet+0x56>
    52ce:	f040 0020 	orr.w	r0, r0, #32
    52d2:	e7af      	b.n	5234 <RMU_ResetCauseGet+0x48>
    52d4:	f040 0008 	orr.w	r0, r0, #8
    52d8:	e79f      	b.n	521a <RMU_ResetCauseGet+0x2e>
    52da:	bf00      	nop
    52dc:	400ca000 	.word	0x400ca000

000052e0 <SYSTEM_GetCalibrationValue>:
 ******************************************************************************/
bool SYSTEM_GetCalibrationValue(volatile uint32_t *regAddress)
{
  SYSTEM_CalAddrVal_TypeDef * p, * end;

  p   = (SYSTEM_CalAddrVal_TypeDef *)(DEVINFO_BASE & 0xFFFFF000);
    52e0:	4b08      	ldr	r3, [pc, #32]	; (5304 <SYSTEM_GetCalibrationValue+0x24>)
  end = (SYSTEM_CalAddrVal_TypeDef *)DEVINFO_BASE;

  for (; p < end; p++) {
    52e2:	4909      	ldr	r1, [pc, #36]	; (5308 <SYSTEM_GetCalibrationValue+0x28>)
    52e4:	e004      	b.n	52f0 <SYSTEM_GetCalibrationValue+0x10>
    if (p->address == 0xFFFFFFFF) {
      /* Found table terminator */
      return false;
    }
    if (p->address == (uint32_t)regAddress) {
    52e6:	4290      	cmp	r0, r2
    52e8:	d008      	beq.n	52fc <SYSTEM_GetCalibrationValue+0x1c>
  SYSTEM_CalAddrVal_TypeDef * p, * end;

  p   = (SYSTEM_CalAddrVal_TypeDef *)(DEVINFO_BASE & 0xFFFFF000);
  end = (SYSTEM_CalAddrVal_TypeDef *)DEVINFO_BASE;

  for (; p < end; p++) {
    52ea:	3308      	adds	r3, #8
    52ec:	428b      	cmp	r3, r1
    52ee:	d003      	beq.n	52f8 <SYSTEM_GetCalibrationValue+0x18>
    if (p->address == 0xFFFFFFFF) {
    52f0:	681a      	ldr	r2, [r3, #0]
    52f2:	f1b2 3fff 	cmp.w	r2, #4294967295
    52f6:	d1f6      	bne.n	52e6 <SYSTEM_GetCalibrationValue+0x6>
      /* Found table terminator */
      return false;
    52f8:	2000      	movs	r0, #0
      return true;
    }
  }
  /* Nothing found for regAddress */
  return false;
}
    52fa:	4770      	bx	lr
    if (p->address == 0xFFFFFFFF) {
      /* Found table terminator */
      return false;
    }
    if (p->address == (uint32_t)regAddress) {
      *regAddress = p->calValue;
    52fc:	685b      	ldr	r3, [r3, #4]
    52fe:	6003      	str	r3, [r0, #0]
      return true;
    5300:	2001      	movs	r0, #1
    5302:	4770      	bx	lr
    5304:	0fe08000 	.word	0x0fe08000
    5308:	0fe081b0 	.word	0x0fe081b0

0000530c <TIMER_Init>:
 *
 * @param[in] init
 *   Pointer to TIMER initialization structure.
 ******************************************************************************/
void TIMER_Init(TIMER_TypeDef *timer, const TIMER_Init_TypeDef *init)
{
    530c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  EFM_ASSERT(TIMER_REF_VALID(timer));

  /* Stop timer if specified to be disabled (dosn't hurt if already stopped) */
  if (!(init->enable)) {
    5310:	780c      	ldrb	r4, [r1, #0]
    5312:	b90c      	cbnz	r4, 5318 <TIMER_Init+0xc>
    timer->CMD = TIMER_CMD_STOP;
    5314:	2302      	movs	r3, #2
    5316:	6043      	str	r3, [r0, #4]

  /* Reset counter */
  timer->CNT = _TIMER_CNT_RESETVALUE;

  timer->CTRL = ((uint32_t)(init->prescale)     << _TIMER_CTRL_PRESC_SHIFT)
                | ((uint32_t)(init->clkSel)     << _TIMER_CTRL_CLKSEL_SHIFT)
    5318:	78ca      	ldrb	r2, [r1, #3]
  }

  /* Reset counter */
  timer->CNT = _TIMER_CNT_RESETVALUE;

  timer->CTRL = ((uint32_t)(init->prescale)     << _TIMER_CTRL_PRESC_SHIFT)
    531a:	f891 b002 	ldrb.w	fp, [r1, #2]
                | ((uint32_t)(init->clkSel)     << _TIMER_CTRL_CLKSEL_SHIFT)
                | ((uint32_t)(init->fallAction) << _TIMER_CTRL_FALLA_SHIFT)
                | ((uint32_t)(init->riseAction) << _TIMER_CTRL_RISEA_SHIFT)
                | ((uint32_t)(init->mode)       << _TIMER_CTRL_MODE_SHIFT)
    531e:	7a0b      	ldrb	r3, [r1, #8]
                | (init->debugRun               ?   TIMER_CTRL_DEBUGRUN  : 0)
    5320:	f891 a001 	ldrb.w	sl, [r1, #1]
  /* Reset counter */
  timer->CNT = _TIMER_CNT_RESETVALUE;

  timer->CTRL = ((uint32_t)(init->prescale)     << _TIMER_CTRL_PRESC_SHIFT)
                | ((uint32_t)(init->clkSel)     << _TIMER_CTRL_CLKSEL_SHIFT)
                | ((uint32_t)(init->fallAction) << _TIMER_CTRL_FALLA_SHIFT)
    5324:	f891 9006 	ldrb.w	r9, [r1, #6]
                | ((uint32_t)(init->riseAction) << _TIMER_CTRL_RISEA_SHIFT)
    5328:	f891 8007 	ldrb.w	r8, [r1, #7]
                | ((uint32_t)(init->mode)       << _TIMER_CTRL_MODE_SHIFT)
                | (init->debugRun               ?   TIMER_CTRL_DEBUGRUN  : 0)
                | (init->dmaClrAct              ?   TIMER_CTRL_DMACLRACT : 0)
    532c:	f891 c009 	ldrb.w	ip, [r1, #9]
                | (init->quadModeX4             ?   TIMER_CTRL_QDM_X4    : 0)
    5330:	f891 e00a 	ldrb.w	lr, [r1, #10]
                | (init->oneShot                ?   TIMER_CTRL_OSMEN     : 0)
    5334:	7acf      	ldrb	r7, [r1, #11]

#if defined(TIMER_CTRL_X2CNT) && defined(TIMER_CTRL_ATI)
                | (init->count2x                ?   TIMER_CTRL_X2CNT     : 0)
    5336:	790e      	ldrb	r6, [r1, #4]
                | (init->ati                    ?   TIMER_CTRL_ATI       : 0)
    5338:	794d      	ldrb	r5, [r1, #5]
#endif
                | (init->sync                   ?   TIMER_CTRL_SYNC      : 0);
    533a:	7b09      	ldrb	r1, [r1, #12]

  /* Reset counter */
  timer->CNT = _TIMER_CNT_RESETVALUE;

  timer->CTRL = ((uint32_t)(init->prescale)     << _TIMER_CTRL_PRESC_SHIFT)
                | ((uint32_t)(init->clkSel)     << _TIMER_CTRL_CLKSEL_SHIFT)
    533c:	0412      	lsls	r2, r2, #16
    533e:	ea42 6b0b 	orr.w	fp, r2, fp, lsl #24
    5342:	ea4b 0303 	orr.w	r3, fp, r3
    5346:	ea43 2989 	orr.w	r9, r3, r9, lsl #10
                | ((uint32_t)(init->fallAction) << _TIMER_CTRL_FALLA_SHIFT)
                | ((uint32_t)(init->riseAction) << _TIMER_CTRL_RISEA_SHIFT)
                | ((uint32_t)(init->mode)       << _TIMER_CTRL_MODE_SHIFT)
                | (init->debugRun               ?   TIMER_CTRL_DEBUGRUN  : 0)
    534a:	f1ba 0f00 	cmp.w	sl, #0
    534e:	bf14      	ite	ne
    5350:	2340      	movne	r3, #64	; 0x40
    5352:	2300      	moveq	r3, #0

  timer->CTRL = ((uint32_t)(init->prescale)     << _TIMER_CTRL_PRESC_SHIFT)
                | ((uint32_t)(init->clkSel)     << _TIMER_CTRL_CLKSEL_SHIFT)
                | ((uint32_t)(init->fallAction) << _TIMER_CTRL_FALLA_SHIFT)
                | ((uint32_t)(init->riseAction) << _TIMER_CTRL_RISEA_SHIFT)
                | ((uint32_t)(init->mode)       << _TIMER_CTRL_MODE_SHIFT)
    5354:	ea49 2808 	orr.w	r8, r9, r8, lsl #8
                | (init->debugRun               ?   TIMER_CTRL_DEBUGRUN  : 0)
                | (init->dmaClrAct              ?   TIMER_CTRL_DMACLRACT : 0)
    5358:	f1bc 0f00 	cmp.w	ip, #0
    535c:	bf14      	ite	ne
    535e:	2280      	movne	r2, #128	; 0x80
    5360:	2200      	moveq	r2, #0
  timer->CTRL = ((uint32_t)(init->prescale)     << _TIMER_CTRL_PRESC_SHIFT)
                | ((uint32_t)(init->clkSel)     << _TIMER_CTRL_CLKSEL_SHIFT)
                | ((uint32_t)(init->fallAction) << _TIMER_CTRL_FALLA_SHIFT)
                | ((uint32_t)(init->riseAction) << _TIMER_CTRL_RISEA_SHIFT)
                | ((uint32_t)(init->mode)       << _TIMER_CTRL_MODE_SHIFT)
                | (init->debugRun               ?   TIMER_CTRL_DEBUGRUN  : 0)
    5362:	ea48 0303 	orr.w	r3, r8, r3
                | (init->dmaClrAct              ?   TIMER_CTRL_DMACLRACT : 0)
                | (init->quadModeX4             ?   TIMER_CTRL_QDM_X4    : 0)
    5366:	f1be 0f00 	cmp.w	lr, #0
                | ((uint32_t)(init->clkSel)     << _TIMER_CTRL_CLKSEL_SHIFT)
                | ((uint32_t)(init->fallAction) << _TIMER_CTRL_FALLA_SHIFT)
                | ((uint32_t)(init->riseAction) << _TIMER_CTRL_RISEA_SHIFT)
                | ((uint32_t)(init->mode)       << _TIMER_CTRL_MODE_SHIFT)
                | (init->debugRun               ?   TIMER_CTRL_DEBUGRUN  : 0)
                | (init->dmaClrAct              ?   TIMER_CTRL_DMACLRACT : 0)
    536a:	ea43 0302 	orr.w	r3, r3, r2
                | (init->quadModeX4             ?   TIMER_CTRL_QDM_X4    : 0)
    536e:	bf14      	ite	ne
    5370:	2220      	movne	r2, #32
    5372:	2200      	moveq	r2, #0
                | (init->oneShot                ?   TIMER_CTRL_OSMEN     : 0)
    5374:	2f00      	cmp	r7, #0
                | ((uint32_t)(init->fallAction) << _TIMER_CTRL_FALLA_SHIFT)
                | ((uint32_t)(init->riseAction) << _TIMER_CTRL_RISEA_SHIFT)
                | ((uint32_t)(init->mode)       << _TIMER_CTRL_MODE_SHIFT)
                | (init->debugRun               ?   TIMER_CTRL_DEBUGRUN  : 0)
                | (init->dmaClrAct              ?   TIMER_CTRL_DMACLRACT : 0)
                | (init->quadModeX4             ?   TIMER_CTRL_QDM_X4    : 0)
    5376:	ea43 0302 	orr.w	r3, r3, r2
                | (init->oneShot                ?   TIMER_CTRL_OSMEN     : 0)
    537a:	bf14      	ite	ne
    537c:	2210      	movne	r2, #16
    537e:	2200      	moveq	r2, #0

#if defined(TIMER_CTRL_X2CNT) && defined(TIMER_CTRL_ATI)
                | (init->count2x                ?   TIMER_CTRL_X2CNT     : 0)
    5380:	2e00      	cmp	r6, #0
                | ((uint32_t)(init->riseAction) << _TIMER_CTRL_RISEA_SHIFT)
                | ((uint32_t)(init->mode)       << _TIMER_CTRL_MODE_SHIFT)
                | (init->debugRun               ?   TIMER_CTRL_DEBUGRUN  : 0)
                | (init->dmaClrAct              ?   TIMER_CTRL_DMACLRACT : 0)
                | (init->quadModeX4             ?   TIMER_CTRL_QDM_X4    : 0)
                | (init->oneShot                ?   TIMER_CTRL_OSMEN     : 0)
    5382:	ea43 0302 	orr.w	r3, r3, r2

#if defined(TIMER_CTRL_X2CNT) && defined(TIMER_CTRL_ATI)
                | (init->count2x                ?   TIMER_CTRL_X2CNT     : 0)
    5386:	bf14      	ite	ne
    5388:	f44f 5600 	movne.w	r6, #8192	; 0x2000
    538c:	2600      	moveq	r6, #0
                | (init->ati                    ?   TIMER_CTRL_ATI       : 0)
    538e:	2d00      	cmp	r5, #0
                | (init->dmaClrAct              ?   TIMER_CTRL_DMACLRACT : 0)
                | (init->quadModeX4             ?   TIMER_CTRL_QDM_X4    : 0)
                | (init->oneShot                ?   TIMER_CTRL_OSMEN     : 0)

#if defined(TIMER_CTRL_X2CNT) && defined(TIMER_CTRL_ATI)
                | (init->count2x                ?   TIMER_CTRL_X2CNT     : 0)
    5390:	ea43 0306 	orr.w	r3, r3, r6
                | (init->ati                    ?   TIMER_CTRL_ATI       : 0)
    5394:	bf14      	ite	ne
    5396:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
    539a:	2200      	moveq	r2, #0
#endif
                | (init->sync                   ?   TIMER_CTRL_SYNC      : 0);
    539c:	2900      	cmp	r1, #0
                | (init->quadModeX4             ?   TIMER_CTRL_QDM_X4    : 0)
                | (init->oneShot                ?   TIMER_CTRL_OSMEN     : 0)

#if defined(TIMER_CTRL_X2CNT) && defined(TIMER_CTRL_ATI)
                | (init->count2x                ?   TIMER_CTRL_X2CNT     : 0)
                | (init->ati                    ?   TIMER_CTRL_ATI       : 0)
    539e:	ea42 0203 	orr.w	r2, r2, r3
#endif
                | (init->sync                   ?   TIMER_CTRL_SYNC      : 0);
    53a2:	bf14      	ite	ne
    53a4:	2308      	movne	r3, #8
    53a6:	2300      	moveq	r3, #0
    53a8:	4313      	orrs	r3, r2
  if (!(init->enable)) {
    timer->CMD = TIMER_CMD_STOP;
  }

  /* Reset counter */
  timer->CNT = _TIMER_CNT_RESETVALUE;
    53aa:	2200      	movs	r2, #0
    53ac:	6242      	str	r2, [r0, #36]	; 0x24

  timer->CTRL = ((uint32_t)(init->prescale)     << _TIMER_CTRL_PRESC_SHIFT)
    53ae:	6003      	str	r3, [r0, #0]
                | (init->ati                    ?   TIMER_CTRL_ATI       : 0)
#endif
                | (init->sync                   ?   TIMER_CTRL_SYNC      : 0);

  /* Start timer if specified to be enabled (dosn't hurt if already started) */
  if (init->enable) {
    53b0:	b10c      	cbz	r4, 53b6 <TIMER_Init+0xaa>
    timer->CMD = TIMER_CMD_START;
    53b2:	2301      	movs	r3, #1
    53b4:	6043      	str	r3, [r0, #4]
    53b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    53ba:	bf00      	nop

000053bc <TIMER_Reset>:
 *
 * @param[in] timer
 *   Pointer to TIMER peripheral register block.
 ******************************************************************************/
void TIMER_Reset(TIMER_TypeDef *timer)
{
    53bc:	b470      	push	{r4, r5, r6}
  EFM_ASSERT(TIMER_REF_VALID(timer));

  /* Make sure disabled first, before resetting other registers */
  timer->CMD = TIMER_CMD_STOP;

  timer->CTRL = _TIMER_CTRL_RESETVALUE;
    53be:	2300      	movs	r3, #0
  int i;

  EFM_ASSERT(TIMER_REF_VALID(timer));

  /* Make sure disabled first, before resetting other registers */
  timer->CMD = TIMER_CMD_STOP;
    53c0:	2602      	movs	r6, #2

  timer->CTRL = _TIMER_CTRL_RESETVALUE;
  timer->IEN  = _TIMER_IEN_RESETVALUE;
  timer->IFC  = _TIMER_IFC_MASK;
    53c2:	f240 7573 	movw	r5, #1907	; 0x773
  timer->TOPB = _TIMER_TOPB_RESETVALUE;
  /* Write TOP after TOPB to invalidate TOPB (clear TIMER_STATUS_TOPBV) */
  timer->TOP  = _TIMER_TOP_RESETVALUE;
    53c6:	f64f 74ff 	movw	r4, #65535	; 0xffff

  /* Reset dead time insertion module, no effect on timers without DTI */

#if defined(TIMER_DTLOCK_LOCKKEY_UNLOCK)
  /* Unlock DTI registers first in case locked */
  timer->DTLOCK = TIMER_DTLOCK_LOCKKEY_UNLOCK;
    53ca:	f64c 6180 	movw	r1, #52864	; 0xce80

  timer->DTCTRL   = _TIMER_DTCTRL_RESETVALUE;
  timer->DTTIME   = _TIMER_DTTIME_RESETVALUE;
  timer->DTFC     = _TIMER_DTFC_RESETVALUE;
  timer->DTOGEN   = _TIMER_DTOGEN_RESETVALUE;
  timer->DTFAULTC = _TIMER_DTFAULTC_MASK;
    53ce:	220f      	movs	r2, #15
  int i;

  EFM_ASSERT(TIMER_REF_VALID(timer));

  /* Make sure disabled first, before resetting other registers */
  timer->CMD = TIMER_CMD_STOP;
    53d0:	6046      	str	r6, [r0, #4]

  timer->CTRL = _TIMER_CTRL_RESETVALUE;
    53d2:	6003      	str	r3, [r0, #0]
  timer->IEN  = _TIMER_IEN_RESETVALUE;
    53d4:	60c3      	str	r3, [r0, #12]
  timer->IFC  = _TIMER_IFC_MASK;
    53d6:	6185      	str	r5, [r0, #24]
  timer->TOPB = _TIMER_TOPB_RESETVALUE;
    53d8:	6203      	str	r3, [r0, #32]
  /* Write TOP after TOPB to invalidate TOPB (clear TIMER_STATUS_TOPBV) */
  timer->TOP  = _TIMER_TOP_RESETVALUE;
    53da:	61c4      	str	r4, [r0, #28]
  timer->CNT  = _TIMER_CNT_RESETVALUE;
    53dc:	6243      	str	r3, [r0, #36]	; 0x24
  timer->DTTIME   = _TIMER_DTTIME_RESETVALUE;
  timer->DTFC     = _TIMER_DTFC_RESETVALUE;
  timer->DTOGEN   = _TIMER_DTOGEN_RESETVALUE;
  timer->DTFAULTC = _TIMER_DTFAULTC_MASK;
#endif
}
    53de:	bc70      	pop	{r4, r5, r6}
  timer->CNT  = _TIMER_CNT_RESETVALUE;
  /* Do not reset route register, setting should be done independently */
  /* (Note: ROUTE register may be locked by DTLOCK register.) */

  for (i = 0; TIMER_CH_VALID(i); i++) {
    timer->CC[i].CTRL = _TIMER_CC_CTRL_RESETVALUE;
    53e0:	6303      	str	r3, [r0, #48]	; 0x30
    timer->CC[i].CCV  = _TIMER_CC_CCV_RESETVALUE;
    53e2:	6343      	str	r3, [r0, #52]	; 0x34
    timer->CC[i].CCVB = _TIMER_CC_CCVB_RESETVALUE;
    53e4:	63c3      	str	r3, [r0, #60]	; 0x3c
  timer->CNT  = _TIMER_CNT_RESETVALUE;
  /* Do not reset route register, setting should be done independently */
  /* (Note: ROUTE register may be locked by DTLOCK register.) */

  for (i = 0; TIMER_CH_VALID(i); i++) {
    timer->CC[i].CTRL = _TIMER_CC_CTRL_RESETVALUE;
    53e6:	6403      	str	r3, [r0, #64]	; 0x40
    timer->CC[i].CCV  = _TIMER_CC_CCV_RESETVALUE;
    53e8:	6443      	str	r3, [r0, #68]	; 0x44
    timer->CC[i].CCVB = _TIMER_CC_CCVB_RESETVALUE;
    53ea:	64c3      	str	r3, [r0, #76]	; 0x4c
  timer->CNT  = _TIMER_CNT_RESETVALUE;
  /* Do not reset route register, setting should be done independently */
  /* (Note: ROUTE register may be locked by DTLOCK register.) */

  for (i = 0; TIMER_CH_VALID(i); i++) {
    timer->CC[i].CTRL = _TIMER_CC_CTRL_RESETVALUE;
    53ec:	6503      	str	r3, [r0, #80]	; 0x50
    timer->CC[i].CCV  = _TIMER_CC_CCV_RESETVALUE;
    53ee:	6543      	str	r3, [r0, #84]	; 0x54
    timer->CC[i].CCVB = _TIMER_CC_CCVB_RESETVALUE;
    53f0:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Reset dead time insertion module, no effect on timers without DTI */

#if defined(TIMER_DTLOCK_LOCKKEY_UNLOCK)
  /* Unlock DTI registers first in case locked */
  timer->DTLOCK = TIMER_DTLOCK_LOCKKEY_UNLOCK;
    53f2:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88

  timer->DTCTRL   = _TIMER_DTCTRL_RESETVALUE;
    53f6:	6703      	str	r3, [r0, #112]	; 0x70
  timer->DTTIME   = _TIMER_DTTIME_RESETVALUE;
    53f8:	6743      	str	r3, [r0, #116]	; 0x74
  timer->DTFC     = _TIMER_DTFC_RESETVALUE;
    53fa:	6783      	str	r3, [r0, #120]	; 0x78
  timer->DTOGEN   = _TIMER_DTOGEN_RESETVALUE;
    53fc:	67c3      	str	r3, [r0, #124]	; 0x7c
  timer->DTFAULTC = _TIMER_DTFAULTC_MASK;
    53fe:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
#endif
}
    5402:	4770      	bx	lr

00005404 <USART_BaudrateSyncSet>:
 *
 * @param[in] baudrate
 *   Baudrate to try to achieve for USART.
 ******************************************************************************/
void USART_BaudrateSyncSet(USART_TypeDef *usart, uint32_t refFreq, uint32_t baudrate)
{
    5404:	b538      	push	{r3, r4, r5, lr}
    5406:	4605      	mov	r5, r0
    5408:	4614      	mov	r4, r2
   *
   * CLKDIV = 256 * (fHFPERCLK/(2 * br) - 1)
   */

  /* HFPERCLK used to clock all USART/UART peripheral modules */
  if (!refFreq) {
    540a:	b919      	cbnz	r1, 5414 <USART_BaudrateSyncSet+0x10>
    refFreq = CMU_ClockFreqGet(cmuClock_HFPER);
    540c:	4805      	ldr	r0, [pc, #20]	; (5424 <USART_BaudrateSyncSet+0x20>)
    540e:	f7fe fc4b 	bl	3ca8 <CMU_ClockFreqGet>
    5412:	4601      	mov	r1, r0
  }

  clkdiv = (refFreq - 1) / (2 * baudrate);
    5414:	3901      	subs	r1, #1
    5416:	0064      	lsls	r4, r4, #1
    5418:	fbb1 f1f4 	udiv	r1, r1, r4
  clkdiv = clkdiv << 8;
    541c:	0209      	lsls	r1, r1, #8

  /* Verify that resulting clock divider is within limits */
  EFM_ASSERT(!(clkdiv & ~CLKDIV_MASK));

  usart->CLKDIV = clkdiv;
    541e:	6169      	str	r1, [r5, #20]
    5420:	bd38      	pop	{r3, r4, r5, pc}
    5422:	bf00      	nop
    5424:	00048140 	.word	0x00048140

00005428 <USART_InitSync>:
  usart->ROUTELOC1 = _USART_ROUTELOC1_RESETVALUE;
#else
  usart->ROUTE     = _USART_ROUTE_RESETVALUE;
#endif

  if (USART_IRDA_VALID(usart)) {
    5428:	4a2b      	ldr	r2, [pc, #172]	; (54d8 <USART_InitSync+0xb0>)
 *
 * @param[in] init
 *   Pointer to initialization structure used to configure basic async setup.
 ******************************************************************************/
void USART_InitSync(USART_TypeDef *usart, const USART_InitSync_TypeDef *init)
{
    542a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    542c:	4604      	mov	r4, r0

  /* Make sure disabled first, before resetting other registers */
  usart->CMD = USART_CMD_RXDIS | USART_CMD_TXDIS | USART_CMD_MASTERDIS
               | USART_CMD_RXBLOCKDIS | USART_CMD_TXTRIDIS | USART_CMD_CLEARTX
               | USART_CMD_CLEARRX;
  usart->CTRL      = _USART_CTRL_RESETVALUE;
    542e:	2300      	movs	r3, #0
  EFM_ASSERT(USART_REF_VALID(usart)
             || USARTRF_REF_VALID(usart)
             || UART_REF_VALID(usart) );

  /* Make sure disabled first, before resetting other registers */
  usart->CMD = USART_CMD_RXDIS | USART_CMD_TXDIS | USART_CMD_MASTERDIS
    5430:	f640 67aa 	movw	r7, #3754	; 0xeaa
               | USART_CMD_RXBLOCKDIS | USART_CMD_TXTRIDIS | USART_CMD_CLEARTX
               | USART_CMD_CLEARRX;
  usart->CTRL      = _USART_CTRL_RESETVALUE;
  usart->FRAME     = _USART_FRAME_RESETVALUE;
    5434:	f241 0605 	movw	r6, #4101	; 0x1005
  usart->TRIGCTRL  = _USART_TRIGCTRL_RESETVALUE;
  usart->CLKDIV    = _USART_CLKDIV_RESETVALUE;
  usart->IEN       = _USART_IEN_RESETVALUE;
  usart->IFC       = _USART_IFC_MASK;
    5438:	f641 70f9 	movw	r0, #8185	; 0x1ff9
  usart->ROUTELOC1 = _USART_ROUTELOC1_RESETVALUE;
#else
  usart->ROUTE     = _USART_ROUTE_RESETVALUE;
#endif

  if (USART_IRDA_VALID(usart)) {
    543c:	4294      	cmp	r4, r2
  EFM_ASSERT(USART_REF_VALID(usart)
             || USARTRF_REF_VALID(usart)
             || UART_REF_VALID(usart) );

  /* Make sure disabled first, before resetting other registers */
  usart->CMD = USART_CMD_RXDIS | USART_CMD_TXDIS | USART_CMD_MASTERDIS
    543e:	60e7      	str	r7, [r4, #12]
 *
 * @param[in] init
 *   Pointer to initialization structure used to configure basic async setup.
 ******************************************************************************/
void USART_InitSync(USART_TypeDef *usart, const USART_InitSync_TypeDef *init)
{
    5440:	460d      	mov	r5, r1

  /* Make sure disabled first, before resetting other registers */
  usart->CMD = USART_CMD_RXDIS | USART_CMD_TXDIS | USART_CMD_MASTERDIS
               | USART_CMD_RXBLOCKDIS | USART_CMD_TXTRIDIS | USART_CMD_CLEARTX
               | USART_CMD_CLEARRX;
  usart->CTRL      = _USART_CTRL_RESETVALUE;
    5442:	6023      	str	r3, [r4, #0]
  usart->FRAME     = _USART_FRAME_RESETVALUE;
    5444:	6066      	str	r6, [r4, #4]
  usart->TRIGCTRL  = _USART_TRIGCTRL_RESETVALUE;
    5446:	60a3      	str	r3, [r4, #8]
  usart->CLKDIV    = _USART_CLKDIV_RESETVALUE;
    5448:	6163      	str	r3, [r4, #20]
  usart->IEN       = _USART_IEN_RESETVALUE;
    544a:	64e3      	str	r3, [r4, #76]	; 0x4c
  usart->IFC       = _USART_IFC_MASK;
    544c:	64a0      	str	r0, [r4, #72]	; 0x48
#if defined(_USART_ROUTEPEN_MASK) || defined(_UART_ROUTEPEN_MASK)
  usart->ROUTEPEN  = _USART_ROUTEPEN_RESETVALUE;
  usart->ROUTELOC0 = _USART_ROUTELOC0_RESETVALUE;
  usart->ROUTELOC1 = _USART_ROUTELOC1_RESETVALUE;
#else
  usart->ROUTE     = _USART_ROUTE_RESETVALUE;
    544e:	6563      	str	r3, [r4, #84]	; 0x54
#endif

  if (USART_IRDA_VALID(usart)) {
    5450:	d03e      	beq.n	54d0 <USART_InitSync+0xa8>
#if defined(_USART_INPUT_RESETVALUE)
  usart->INPUT = _USART_INPUT_RESETVALUE;
#endif

#if defined(_USART_I2SCTRL_RESETVALUE)
  if (USART_I2S_VALID(usart)) {
    5452:	4a22      	ldr	r2, [pc, #136]	; (54dc <USART_InitSync+0xb4>)
  if (USART_IRDA_VALID(usart)) {
    usart->IRCTRL = _USART_IRCTRL_RESETVALUE;
  }

#if defined(_USART_INPUT_RESETVALUE)
  usart->INPUT = _USART_INPUT_RESETVALUE;
    5454:	65a3      	str	r3, [r4, #88]	; 0x58
#endif

#if defined(_USART_I2SCTRL_RESETVALUE)
  if (USART_I2S_VALID(usart)) {
    5456:	4294      	cmp	r4, r2
    5458:	d037      	beq.n	54ca <USART_InitSync+0xa2>
    545a:	4b21      	ldr	r3, [pc, #132]	; (54e0 <USART_InitSync+0xb8>)
    545c:	429c      	cmp	r4, r3
    545e:	d034      	beq.n	54ca <USART_InitSync+0xa2>
  /* Init USART registers to HW reset state. */
  USART_Reset(usart);

  /* Set bits for synchronous mode */
  usart->CTRL |= (USART_CTRL_SYNC)
                 | (uint32_t)init->clockMode
    5460:	8a2b      	ldrh	r3, [r5, #16]
                 | (init->msbf ? USART_CTRL_MSBF : 0);
    5462:	7bae      	ldrb	r6, [r5, #14]

  /* Init USART registers to HW reset state. */
  USART_Reset(usart);

  /* Set bits for synchronous mode */
  usart->CTRL |= (USART_CTRL_SYNC)
    5464:	6822      	ldr	r2, [r4, #0]
                 | (uint32_t)init->clockMode
                 | (init->msbf ? USART_CTRL_MSBF : 0);

#if defined(_USART_CTRL_AUTOTX_MASK)
  usart->CTRL |= init->autoTx ? USART_CTRL_AUTOTX : 0;
    5466:	7d28      	ldrb	r0, [r5, #20]
#endif

#if defined(_USART_INPUT_RXPRS_MASK)
  /* Configure PRS input mode. */
  if (init->prsRxEnable) {
    5468:	7ca9      	ldrb	r1, [r5, #18]
  /* Init USART registers to HW reset state. */
  USART_Reset(usart);

  /* Set bits for synchronous mode */
  usart->CTRL |= (USART_CTRL_SYNC)
                 | (uint32_t)init->clockMode
    546a:	f043 0301 	orr.w	r3, r3, #1
                 | (init->msbf ? USART_CTRL_MSBF : 0);
    546e:	2e00      	cmp	r6, #0
  /* Init USART registers to HW reset state. */
  USART_Reset(usart);

  /* Set bits for synchronous mode */
  usart->CTRL |= (USART_CTRL_SYNC)
                 | (uint32_t)init->clockMode
    5470:	b29b      	uxth	r3, r3
    5472:	ea43 0302 	orr.w	r3, r3, r2
                 | (init->msbf ? USART_CTRL_MSBF : 0);
    5476:	bf14      	ite	ne
    5478:	f44f 6280 	movne.w	r2, #1024	; 0x400
    547c:	2200      	moveq	r2, #0

  /* Init USART registers to HW reset state. */
  USART_Reset(usart);

  /* Set bits for synchronous mode */
  usart->CTRL |= (USART_CTRL_SYNC)
    547e:	4313      	orrs	r3, r2
    5480:	6023      	str	r3, [r4, #0]
                 | (uint32_t)init->clockMode
                 | (init->msbf ? USART_CTRL_MSBF : 0);

#if defined(_USART_CTRL_AUTOTX_MASK)
  usart->CTRL |= init->autoTx ? USART_CTRL_AUTOTX : 0;
    5482:	6823      	ldr	r3, [r4, #0]
    5484:	2800      	cmp	r0, #0
    5486:	bf14      	ite	ne
    5488:	f04f 5200 	movne.w	r2, #536870912	; 0x20000000
    548c:	2200      	moveq	r2, #0
    548e:	4313      	orrs	r3, r2
    5490:	6023      	str	r3, [r4, #0]
#endif

#if defined(_USART_INPUT_RXPRS_MASK)
  /* Configure PRS input mode. */
  if (init->prsRxEnable) {
    5492:	b119      	cbz	r1, 549c <USART_InitSync+0x74>
    usart->INPUT = (uint32_t)init->prsRxCh | USART_INPUT_RXPRS;
    5494:	7ceb      	ldrb	r3, [r5, #19]
    5496:	f043 0310 	orr.w	r3, r3, #16
    549a:	65a3      	str	r3, [r4, #88]	; 0x58
  }
#endif

  /* Configure databits, leave stopbits and parity at reset default (not used) */
  usart->FRAME = (uint32_t)init->databits
    549c:	7b2b      	ldrb	r3, [r5, #12]
                 | USART_FRAME_STOPBITS_DEFAULT
                 | USART_FRAME_PARITY_DEFAULT;

  /* Configure baudrate */
  USART_BaudrateSyncSet(usart, init->refFreq, init->baudrate);
    549e:	6868      	ldr	r0, [r5, #4]
    54a0:	68ae      	ldr	r6, [r5, #8]
#endif

  /* Configure databits, leave stopbits and parity at reset default (not used) */
  usart->FRAME = (uint32_t)init->databits
                 | USART_FRAME_STOPBITS_DEFAULT
                 | USART_FRAME_PARITY_DEFAULT;
    54a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    usart->INPUT = (uint32_t)init->prsRxCh | USART_INPUT_RXPRS;
  }
#endif

  /* Configure databits, leave stopbits and parity at reset default (not used) */
  usart->FRAME = (uint32_t)init->databits
    54a6:	6063      	str	r3, [r4, #4]
   *
   * CLKDIV = 256 * (fHFPERCLK/(2 * br) - 1)
   */

  /* HFPERCLK used to clock all USART/UART peripheral modules */
  if (!refFreq) {
    54a8:	b910      	cbnz	r0, 54b0 <USART_InitSync+0x88>
    refFreq = CMU_ClockFreqGet(cmuClock_HFPER);
    54aa:	480e      	ldr	r0, [pc, #56]	; (54e4 <USART_InitSync+0xbc>)
    54ac:	f7fe fbfc 	bl	3ca8 <CMU_ClockFreqGet>

  /* Configure baudrate */
  USART_BaudrateSyncSet(usart, init->refFreq, init->baudrate);

  /* Finally enable (as specified) */
  if (init->master) {
    54b0:	7b6b      	ldrb	r3, [r5, #13]
  /* HFPERCLK used to clock all USART/UART peripheral modules */
  if (!refFreq) {
    refFreq = CMU_ClockFreqGet(cmuClock_HFPER);
  }

  clkdiv = (refFreq - 1) / (2 * baudrate);
    54b2:	3801      	subs	r0, #1
    54b4:	0076      	lsls	r6, r6, #1
    54b6:	fbb0 f0f6 	udiv	r0, r0, r6
  clkdiv = clkdiv << 8;
    54ba:	0200      	lsls	r0, r0, #8

  /* Verify that resulting clock divider is within limits */
  EFM_ASSERT(!(clkdiv & ~CLKDIV_MASK));

  usart->CLKDIV = clkdiv;
    54bc:	6160      	str	r0, [r4, #20]

  /* Configure baudrate */
  USART_BaudrateSyncSet(usart, init->refFreq, init->baudrate);

  /* Finally enable (as specified) */
  if (init->master) {
    54be:	b10b      	cbz	r3, 54c4 <USART_InitSync+0x9c>
    usart->CMD = USART_CMD_MASTEREN;
    54c0:	2310      	movs	r3, #16
    54c2:	60e3      	str	r3, [r4, #12]
  if (init->autoCsEnable) {
    usart->CTRL |= USART_CTRL_AUTOCS;
  }
#endif

  usart->CMD = (uint32_t)init->enable;
    54c4:	782b      	ldrb	r3, [r5, #0]
    54c6:	60e3      	str	r3, [r4, #12]
    54c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  usart->INPUT = _USART_INPUT_RESETVALUE;
#endif

#if defined(_USART_I2SCTRL_RESETVALUE)
  if (USART_I2S_VALID(usart)) {
    usart->I2SCTRL = _USART_I2SCTRL_RESETVALUE;
    54ca:	2300      	movs	r3, #0
    54cc:	65e3      	str	r3, [r4, #92]	; 0x5c
    54ce:	e7c7      	b.n	5460 <USART_InitSync+0x38>
#else
  usart->ROUTE     = _USART_ROUTE_RESETVALUE;
#endif

  if (USART_IRDA_VALID(usart)) {
    usart->IRCTRL = _USART_IRCTRL_RESETVALUE;
    54d0:	6523      	str	r3, [r4, #80]	; 0x50
  }

#if defined(_USART_INPUT_RESETVALUE)
  usart->INPUT = _USART_INPUT_RESETVALUE;
    54d2:	65a3      	str	r3, [r4, #88]	; 0x58
    54d4:	e7c4      	b.n	5460 <USART_InitSync+0x38>
    54d6:	bf00      	nop
    54d8:	4000c000 	.word	0x4000c000
    54dc:	4000c400 	.word	0x4000c400
    54e0:	4000c800 	.word	0x4000c800
    54e4:	00048140 	.word	0x00048140

000054e8 <USART_SpiTransfer>:
 * @return
 *   Data received.
 ******************************************************************************/
uint8_t USART_SpiTransfer(USART_TypeDef *usart, uint8_t data)
{
  while (!(usart->STATUS & USART_STATUS_TXBL))
    54e8:	6903      	ldr	r3, [r0, #16]
    54ea:	065a      	lsls	r2, r3, #25
    54ec:	d5fc      	bpl.n	54e8 <USART_SpiTransfer>
    ;
  usart->TXDATA = (uint32_t)data;
    54ee:	6341      	str	r1, [r0, #52]	; 0x34
  while (!(usart->STATUS & USART_STATUS_TXC))
    54f0:	6903      	ldr	r3, [r0, #16]
    54f2:	069b      	lsls	r3, r3, #26
    54f4:	d5fc      	bpl.n	54f0 <USART_SpiTransfer+0x8>
    ;
  return (uint8_t)usart->RXDATA;
    54f6:	69c0      	ldr	r0, [r0, #28]
}
    54f8:	b2c0      	uxtb	r0, r0
    54fa:	4770      	bx	lr

000054fc <WDOGn_Enable>:
 *   watchdog has been locked.
 ******************************************************************************/
void WDOGn_Enable(WDOG_TypeDef *wdog, bool enable)
{
  /* SYNCBUSY may stall when locked. */
  if (wdog->CTRL & WDOG_CTRL_LOCK) {
    54fc:	6803      	ldr	r3, [r0, #0]
    54fe:	06db      	lsls	r3, r3, #27
    5500:	d410      	bmi.n	5524 <WDOGn_Enable+0x28>
    return;
  }

  if (!enable) {
    5502:	b951      	cbnz	r1, 551a <WDOGn_Enable+0x1e>
__STATIC_INLINE unsigned int BUS_RegBitRead(volatile const uint32_t *addr,
                                            unsigned int bit)
{
#if defined(BITBAND_PER_BASE)
  uint32_t aliasAddr =
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);
    5504:	f100 7204 	add.w	r2, r0, #34603008	; 0x2100000
 ******************************************************************************/
__STATIC_INLINE unsigned int BUS_RegBitRead(volatile const uint32_t *addr,
                                            unsigned int bit)
{
#if defined(BITBAND_PER_BASE)
  uint32_t aliasAddr =
    5508:	0152      	lsls	r2, r2, #5
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);

  return *(volatile uint32_t *)aliasAddr;
    550a:	6813      	ldr	r3, [r2, #0]
    /* If the user intends to disable and the WDOG is enabled */
    if (BUS_RegBitRead(&wdog->CTRL, _WDOG_CTRL_EN_SHIFT)) {
    550c:	b153      	cbz	r3, 5524 <WDOGn_Enable+0x28>
      /* Wait for any pending previous write operation to have been completed in */
      /* low frequency domain */
      while (wdog->SYNCBUSY & WDOG_SYNCBUSY_CTRL)
    550e:	6883      	ldr	r3, [r0, #8]
    5510:	f013 0301 	ands.w	r3, r3, #1
    5514:	d1fb      	bne.n	550e <WDOGn_Enable+0x12>
{
#if defined(BITBAND_PER_BASE)
  uint32_t aliasAddr =
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);

  *(volatile uint32_t *)aliasAddr = (uint32_t)val;
    5516:	6013      	str	r3, [r2, #0]
    5518:	4770      	bx	lr
                                     unsigned int bit,
                                     unsigned int val)
{
#if defined(BITBAND_PER_BASE)
  uint32_t aliasAddr =
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);
    551a:	f100 7004 	add.w	r0, r0, #34603008	; 0x2100000
__STATIC_INLINE void BUS_RegBitWrite(volatile uint32_t *addr,
                                     unsigned int bit,
                                     unsigned int val)
{
#if defined(BITBAND_PER_BASE)
  uint32_t aliasAddr =
    551e:	0140      	lsls	r0, r0, #5
    BITBAND_PER_BASE + (((uint32_t)addr - PER_MEM_BASE) * 32) + (bit * 4);

  *(volatile uint32_t *)aliasAddr = (uint32_t)val;
    5520:	2301      	movs	r3, #1
    5522:	6003      	str	r3, [r0, #0]
    5524:	4770      	bx	lr
    5526:	bf00      	nop

00005528 <WDOGn_Feed>:
 *   Pointer to WDOG peripheral register block.
 ******************************************************************************/
void WDOGn_Feed(WDOG_TypeDef *wdog)
{
  /* The watchdog should not be fed while it is disabled */
  if (!(wdog->CTRL & WDOG_CTRL_EN)) {
    5528:	6803      	ldr	r3, [r0, #0]
    552a:	07d9      	lsls	r1, r3, #31
    552c:	d507      	bpl.n	553e <WDOGn_Feed+0x16>

  /* If a previous clearing is being synchronized to LF domain, then there */
  /* is no point in waiting for it to complete before clearing over again. */
  /* This avoids stalling the core in the typical use case where some idle loop */
  /* keeps clearing the watchdog. */
  if (wdog->SYNCBUSY & WDOG_SYNCBUSY_CMD) {
    552e:	6883      	ldr	r3, [r0, #8]
    5530:	079a      	lsls	r2, r3, #30
    5532:	d404      	bmi.n	553e <WDOGn_Feed+0x16>
    return;
  }
  /* Before writing to the WDOG_CMD register we also need to make sure that
   * any previous write to WDOG_CTRL is complete. */
  while ( wdog->SYNCBUSY & WDOG_SYNCBUSY_CTRL )
    5534:	6883      	ldr	r3, [r0, #8]
    5536:	07db      	lsls	r3, r3, #31
    5538:	d4fc      	bmi.n	5534 <WDOGn_Feed+0xc>
    ;

  wdog->CMD = WDOG_CMD_CLEAR;
    553a:	2301      	movs	r3, #1
    553c:	6043      	str	r3, [r0, #4]
    553e:	4770      	bx	lr

00005540 <WDOGn_Init>:
    setting = WDOG_CTRL_EN;
  } else {
    setting = 0;
  }

  if (init->debugRun) {
    5540:	784a      	ldrb	r2, [r1, #1]
void WDOGn_Init(WDOG_TypeDef *wdog, const WDOG_Init_TypeDef *init)
{
  uint32_t setting;

  if (init->enable) {
    setting = WDOG_CTRL_EN;
    5542:	780b      	ldrb	r3, [r1, #0]
  } else {
    setting = 0;
  }

  if (init->debugRun) {
    5544:	b10a      	cbz	r2, 554a <WDOGn_Init+0xa>
    setting |= WDOG_CTRL_DEBUGRUN;
    5546:	f043 0302 	orr.w	r3, r3, #2
  }

  if (init->em2Run) {
    554a:	788a      	ldrb	r2, [r1, #2]
    554c:	b10a      	cbz	r2, 5552 <WDOGn_Init+0x12>
    setting |= WDOG_CTRL_EM2RUN;
    554e:	f043 0304 	orr.w	r3, r3, #4
  }

  if (init->em3Run) {
    5552:	78ca      	ldrb	r2, [r1, #3]
    5554:	b10a      	cbz	r2, 555a <WDOGn_Init+0x1a>
    setting |= WDOG_CTRL_EM3RUN;
    5556:	f043 0308 	orr.w	r3, r3, #8
  }

  if (init->em4Block) {
    555a:	790a      	ldrb	r2, [r1, #4]
    555c:	b10a      	cbz	r2, 5562 <WDOGn_Init+0x22>
    setting |= WDOG_CTRL_EM4BLOCK;
    555e:	f043 0320 	orr.w	r3, r3, #32
  }
  if (init->swoscBlock) {
    5562:	794a      	ldrb	r2, [r1, #5]
    5564:	b10a      	cbz	r2, 556a <WDOGn_Init+0x2a>
    setting |= WDOG_CTRL_SWOSCBLOCK;
    5566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  }
  if (init->lock) {
    556a:	798a      	ldrb	r2, [r1, #6]
    556c:	b10a      	cbz	r2, 5572 <WDOGn_Init+0x32>
    setting |= WDOG_CTRL_LOCK;
    556e:	f043 0310 	orr.w	r3, r3, #16
#if defined(_WDOG_CTRL_WDOGRSTDIS_MASK)
  if (init->resetDisable) {
    setting |= WDOG_CTRL_WDOGRSTDIS;
  }
#endif
  setting |= ((uint32_t)(init->clkSel)   << _WDOG_CTRL_CLKSEL_SHIFT)
    5572:	79ca      	ldrb	r2, [r1, #7]
             | ((uint32_t)(init->warnSel) << _WDOG_CTRL_WARNSEL_SHIFT)
#endif
#if defined(_WDOG_CTRL_WINSEL_MASK)
             | ((uint32_t)(init->winSel) << _WDOG_CTRL_WINSEL_SHIFT)
#endif
             | ((uint32_t)(init->perSel) << _WDOG_CTRL_PERSEL_SHIFT);
    5574:	7a09      	ldrb	r1, [r1, #8]
#if defined(_WDOG_CTRL_WDOGRSTDIS_MASK)
  if (init->resetDisable) {
    setting |= WDOG_CTRL_WDOGRSTDIS;
  }
#endif
  setting |= ((uint32_t)(init->clkSel)   << _WDOG_CTRL_CLKSEL_SHIFT)
    5576:	0312      	lsls	r2, r2, #12
             | ((uint32_t)(init->warnSel) << _WDOG_CTRL_WARNSEL_SHIFT)
#endif
#if defined(_WDOG_CTRL_WINSEL_MASK)
             | ((uint32_t)(init->winSel) << _WDOG_CTRL_WINSEL_SHIFT)
#endif
             | ((uint32_t)(init->perSel) << _WDOG_CTRL_PERSEL_SHIFT);
    5578:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
#if defined(_WDOG_CTRL_WDOGRSTDIS_MASK)
  if (init->resetDisable) {
    setting |= WDOG_CTRL_WDOGRSTDIS;
  }
#endif
  setting |= ((uint32_t)(init->clkSel)   << _WDOG_CTRL_CLKSEL_SHIFT)
    557c:	431a      	orrs	r2, r3
#endif
             | ((uint32_t)(init->perSel) << _WDOG_CTRL_PERSEL_SHIFT);

  /* Wait for any pending previous write operation to have been completed in */
  /* low frequency domain */
  while (wdog->SYNCBUSY & WDOG_SYNCBUSY_CTRL)
    557e:	6883      	ldr	r3, [r0, #8]
    5580:	07db      	lsls	r3, r3, #31
    5582:	d4fc      	bmi.n	557e <WDOGn_Init+0x3e>
    ;

  wdog->CTRL = setting;
    5584:	6002      	str	r2, [r0, #0]
    5586:	4770      	bx	lr

00005588 <MICROSD_Init>:
 * @brief
 *  Initialize the SPI peripheral for microSD card usage.
 *  SPI pins and speed etc. is defined in microsdconfig.h.
 *****************************************************************************/
void MICROSD_Init(void)
{
    5588:	b570      	push	{r4, r5, r6, lr}
  USART_InitSync_TypeDef init = USART_INITSYNC_DEFAULT;
    558a:	4d1f      	ldr	r5, [pc, #124]	; (5608 <MICROSD_Init+0x80>)

  /* Initialize USART in SPI master mode. */
  xfersPrMsec   = MICROSD_LO_SPI_FREQ / 8000;
  init.baudrate = MICROSD_LO_SPI_FREQ;
  init.msbf     = true;
  USART_InitSync(MICROSD_USART, &init);
    558c:	4e1f      	ldr	r6, [pc, #124]	; (560c <MICROSD_Init+0x84>)
 *  Initialize the SPI peripheral for microSD card usage.
 *  SPI pins and speed etc. is defined in microsdconfig.h.
 *****************************************************************************/
void MICROSD_Init(void)
{
  USART_InitSync_TypeDef init = USART_INITSYNC_DEFAULT;
    558e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 * @brief
 *  Initialize the SPI peripheral for microSD card usage.
 *  SPI pins and speed etc. is defined in microsdconfig.h.
 *****************************************************************************/
void MICROSD_Init(void)
{
    5590:	b086      	sub	sp, #24
  USART_InitSync_TypeDef init = USART_INITSYNC_DEFAULT;
    5592:	466c      	mov	r4, sp
    5594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5596:	e895 0003 	ldmia.w	r5, {r0, r1}
    559a:	e884 0003 	stmia.w	r4, {r0, r1}

  /* Enabling clock to USART 0 */
  CMU_ClockEnable(MICROSD_CMUCLOCK, true);
    559e:	481c      	ldr	r0, [pc, #112]	; (5610 <MICROSD_Init+0x88>)
    55a0:	2101      	movs	r1, #1
    55a2:	f7fe fc59 	bl	3e58 <CMU_ClockEnable>
  CMU_ClockEnable(cmuClock_GPIO, true);
    55a6:	481b      	ldr	r0, [pc, #108]	; (5614 <MICROSD_Init+0x8c>)
    55a8:	2101      	movs	r1, #1
    55aa:	f7fe fc55 	bl	3e58 <CMU_ClockEnable>

  /* Initialize USART in SPI master mode. */
  xfersPrMsec   = MICROSD_LO_SPI_FREQ / 8000;
    55ae:	4b1a      	ldr	r3, [pc, #104]	; (5618 <MICROSD_Init+0x90>)
  init.baudrate = MICROSD_LO_SPI_FREQ;
    55b0:	4a1a      	ldr	r2, [pc, #104]	; (561c <MICROSD_Init+0x94>)
    55b2:	9202      	str	r2, [sp, #8]
  init.msbf     = true;
    55b4:	2401      	movs	r4, #1
  USART_InitSync(MICROSD_USART, &init);
    55b6:	4630      	mov	r0, r6
  /* Enabling clock to USART 0 */
  CMU_ClockEnable(MICROSD_CMUCLOCK, true);
  CMU_ClockEnable(cmuClock_GPIO, true);

  /* Initialize USART in SPI master mode. */
  xfersPrMsec   = MICROSD_LO_SPI_FREQ / 8000;
    55b8:	220c      	movs	r2, #12
  init.baudrate = MICROSD_LO_SPI_FREQ;
  init.msbf     = true;
  USART_InitSync(MICROSD_USART, &init);
    55ba:	4669      	mov	r1, sp
  /* Enabling clock to USART 0 */
  CMU_ClockEnable(MICROSD_CMUCLOCK, true);
  CMU_ClockEnable(cmuClock_GPIO, true);

  /* Initialize USART in SPI master mode. */
  xfersPrMsec   = MICROSD_LO_SPI_FREQ / 8000;
    55bc:	601a      	str	r2, [r3, #0]
  init.baudrate = MICROSD_LO_SPI_FREQ;
  init.msbf     = true;
    55be:	f88d 400e 	strb.w	r4, [sp, #14]
  USART_InitSync(MICROSD_USART, &init);
    55c2:	f7ff ff31 	bl	5428 <USART_InitSync>

  /* Enabling pins and setting location, SPI CS not enable */
  MICROSD_USART->ROUTE = USART_ROUTE_TXPEN | USART_ROUTE_RXPEN
    55c6:	f240 130b 	movw	r3, #267	; 0x10b
    55ca:	6573      	str	r3, [r6, #84]	; 0x54
                         | USART_ROUTE_CLKPEN | MICROSD_LOC;

#if defined(USART_CTRL_SMSDELAY)
  /* This will allow us to use higher baudrate. */
  MICROSD_USART->CTRL |= USART_CTRL_SMSDELAY;
    55cc:	6833      	ldr	r3, [r6, #0]
    55ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    55d2:	6033      	str	r3, [r6, #0]
#endif

  /* IO configuration */
  GPIO_PinModeSet(MICROSD_GPIOPORT, MICROSD_MOSIPIN, gpioModePushPull, 0);  /* MOSI */
    55d4:	4620      	mov	r0, r4
    55d6:	2103      	movs	r1, #3
    55d8:	2204      	movs	r2, #4
    55da:	2300      	movs	r3, #0
    55dc:	f7ff fc0a 	bl	4df4 <GPIO_PinModeSet>
  GPIO_PinModeSet(MICROSD_GPIOPORT, MICROSD_MISOPIN, gpioModeInputPull, 1); /* MISO */
    55e0:	4620      	mov	r0, r4
    55e2:	4623      	mov	r3, r4
    55e4:	2104      	movs	r1, #4
    55e6:	2202      	movs	r2, #2
    55e8:	f7ff fc04 	bl	4df4 <GPIO_PinModeSet>
  GPIO_PinModeSet(MICROSD_GPIOPORT, MICROSD_CSPIN, gpioModePushPull, 1);    /* CS */
    55ec:	4620      	mov	r0, r4
    55ee:	4623      	mov	r3, r4
    55f0:	2106      	movs	r1, #6
    55f2:	2204      	movs	r2, #4
    55f4:	f7ff fbfe 	bl	4df4 <GPIO_PinModeSet>
  GPIO_PinModeSet(MICROSD_GPIOPORT, MICROSD_CLKPIN, gpioModePushPull, 0);   /* CLK */
    55f8:	4620      	mov	r0, r4
    55fa:	2105      	movs	r1, #5
    55fc:	2204      	movs	r2, #4
    55fe:	2300      	movs	r3, #0
    5600:	f7ff fbf8 	bl	4df4 <GPIO_PinModeSet>
}
    5604:	b006      	add	sp, #24
    5606:	bd70      	pop	{r4, r5, r6, pc}
    5608:	0000d078 	.word	0x0000d078
    560c:	4000c800 	.word	0x4000c800
    5610:	00042200 	.word	0x00042200
    5614:	0004d200 	.word	0x0004d200
    5618:	200010c4 	.word	0x200010c4
    561c:	000186a0 	.word	0x000186a0

00005620 <MICROSD_XferSpi>:
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    5620:	4a04      	ldr	r2, [pc, #16]	; (5634 <MICROSD_XferSpi+0x14>)
    5622:	6813      	ldr	r3, [r2, #0]
 *
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
    5624:	4601      	mov	r1, r0
  if ( timeOut ) {
    5626:	b10b      	cbz	r3, 562c <MICROSD_XferSpi+0xc>
    timeOut--;
    5628:	3b01      	subs	r3, #1
    562a:	6013      	str	r3, [r2, #0]
  }

  return USART_SpiTransfer(MICROSD_USART, data);
    562c:	4802      	ldr	r0, [pc, #8]	; (5638 <MICROSD_XferSpi+0x18>)
    562e:	f7ff bf5b 	b.w	54e8 <USART_SpiTransfer>
    5632:	bf00      	nop
    5634:	200010c8 	.word	0x200010c8
    5638:	4000c800 	.word	0x4000c800

0000563c <MICROSD_Deselect>:
/**************************************************************************//**
 * @brief Deselect the micro SD card and release the SPI bus.
 *****************************************************************************/
void MICROSD_Deselect(void)
{
  GPIO->P[MICROSD_GPIOPORT].DOUTSET = 1 << MICROSD_CSPIN;   /* CS pin high. */
    563c:	4b05      	ldr	r3, [pc, #20]	; (5654 <MICROSD_Deselect+0x18>)
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    563e:	4a06      	ldr	r2, [pc, #24]	; (5658 <MICROSD_Deselect+0x1c>)
/**************************************************************************//**
 * @brief Deselect the micro SD card and release the SPI bus.
 *****************************************************************************/
void MICROSD_Deselect(void)
{
  GPIO->P[MICROSD_GPIOPORT].DOUTSET = 1 << MICROSD_CSPIN;   /* CS pin high. */
    5640:	2140      	movs	r1, #64	; 0x40
    5642:	6359      	str	r1, [r3, #52]	; 0x34
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    5644:	6813      	ldr	r3, [r2, #0]
    5646:	b10b      	cbz	r3, 564c <MICROSD_Deselect+0x10>
    timeOut--;
    5648:	3b01      	subs	r3, #1
    564a:	6013      	str	r3, [r2, #0]
  }

  return USART_SpiTransfer(MICROSD_USART, data);
    564c:	4803      	ldr	r0, [pc, #12]	; (565c <MICROSD_Deselect+0x20>)
    564e:	21ff      	movs	r1, #255	; 0xff
    5650:	f7ff bf4a 	b.w	54e8 <USART_SpiTransfer>
    5654:	40006000 	.word	0x40006000
    5658:	200010c8 	.word	0x200010c8
    565c:	4000c800 	.word	0x4000c800

00005660 <MICROSD_Select>:
 * @brief Select the micro SD card and wait for the card to become ready.
 * @return 1:Successful, 0:Timeout.
 *****************************************************************************/
int MICROSD_Select(void)
{
  GPIO->P[MICROSD_GPIOPORT].DOUTCLR = 1 << MICROSD_CSPIN;   /* CS pin low. */
    5660:	4a14      	ldr	r2, [pc, #80]	; (56b4 <MICROSD_Select+0x54>)
{
  uint8_t res;
  uint32_t retryCount;

  /* Wait for ready in timeout of 500ms */
  retryCount = 500 * xfersPrMsec;
    5662:	4b15      	ldr	r3, [pc, #84]	; (56b8 <MICROSD_Select+0x58>)
 * @brief Select the micro SD card and wait for the card to become ready.
 * @return 1:Successful, 0:Timeout.
 *****************************************************************************/
int MICROSD_Select(void)
{
  GPIO->P[MICROSD_GPIOPORT].DOUTCLR = 1 << MICROSD_CSPIN;   /* CS pin low. */
    5664:	2140      	movs	r1, #64	; 0x40
/**************************************************************************//**
 * @brief Select the micro SD card and wait for the card to become ready.
 * @return 1:Successful, 0:Timeout.
 *****************************************************************************/
int MICROSD_Select(void)
{
    5666:	b570      	push	{r4, r5, r6, lr}
  GPIO->P[MICROSD_GPIOPORT].DOUTCLR = 1 << MICROSD_CSPIN;   /* CS pin low. */
    5668:	6391      	str	r1, [r2, #56]	; 0x38
{
  uint8_t res;
  uint32_t retryCount;

  /* Wait for ready in timeout of 500ms */
  retryCount = 500 * xfersPrMsec;
    566a:	681c      	ldr	r4, [r3, #0]
    566c:	4d13      	ldr	r5, [pc, #76]	; (56bc <MICROSD_Select+0x5c>)
    566e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    5672:	fb03 f404 	mul.w	r4, r3, r4
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    5676:	462e      	mov	r6, r5
    5678:	e001      	b.n	567e <MICROSD_Select+0x1e>

  /* Wait for ready in timeout of 500ms */
  retryCount = 500 * xfersPrMsec;
  do {
    res = MICROSD_XferSpi(0xff);
  } while ((res != 0xFF) && --retryCount);
    567a:	3c01      	subs	r4, #1
    567c:	d00b      	beq.n	5696 <MICROSD_Select+0x36>
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    567e:	682b      	ldr	r3, [r5, #0]
    timeOut--;
  }

  return USART_SpiTransfer(MICROSD_USART, data);
    5680:	480f      	ldr	r0, [pc, #60]	; (56c0 <MICROSD_Select+0x60>)
    5682:	21ff      	movs	r1, #255	; 0xff
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    5684:	b10b      	cbz	r3, 568a <MICROSD_Select+0x2a>
    timeOut--;
    5686:	3b01      	subs	r3, #1
    5688:	6033      	str	r3, [r6, #0]
  }

  return USART_SpiTransfer(MICROSD_USART, data);
    568a:	f7ff ff2d 	bl	54e8 <USART_SpiTransfer>

  /* Wait for ready in timeout of 500ms */
  retryCount = 500 * xfersPrMsec;
  do {
    res = MICROSD_XferSpi(0xff);
  } while ((res != 0xFF) && --retryCount);
    568e:	28ff      	cmp	r0, #255	; 0xff
    5690:	d1f3      	bne.n	567a <MICROSD_Select+0x1a>
  GPIO->P[MICROSD_GPIOPORT].DOUTCLR = 1 << MICROSD_CSPIN;   /* CS pin low. */
  if (WaitReady() != 0xFF) {
    MICROSD_Deselect();
    return 0;
  }
  return 1;
    5692:	2001      	movs	r0, #1
    5694:	bd70      	pop	{r4, r5, r6, pc}
/**************************************************************************//**
 * @brief Deselect the micro SD card and release the SPI bus.
 *****************************************************************************/
void MICROSD_Deselect(void)
{
  GPIO->P[MICROSD_GPIOPORT].DOUTSET = 1 << MICROSD_CSPIN;   /* CS pin high. */
    5696:	4b07      	ldr	r3, [pc, #28]	; (56b4 <MICROSD_Select+0x54>)
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    5698:	4908      	ldr	r1, [pc, #32]	; (56bc <MICROSD_Select+0x5c>)
/**************************************************************************//**
 * @brief Deselect the micro SD card and release the SPI bus.
 *****************************************************************************/
void MICROSD_Deselect(void)
{
  GPIO->P[MICROSD_GPIOPORT].DOUTSET = 1 << MICROSD_CSPIN;   /* CS pin high. */
    569a:	2240      	movs	r2, #64	; 0x40
    569c:	635a      	str	r2, [r3, #52]	; 0x34
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    569e:	682b      	ldr	r3, [r5, #0]
    56a0:	b10b      	cbz	r3, 56a6 <MICROSD_Select+0x46>
    timeOut--;
    56a2:	3b01      	subs	r3, #1
    56a4:	600b      	str	r3, [r1, #0]
  }

  return USART_SpiTransfer(MICROSD_USART, data);
    56a6:	21ff      	movs	r1, #255	; 0xff
    56a8:	4805      	ldr	r0, [pc, #20]	; (56c0 <MICROSD_Select+0x60>)
    56aa:	f7ff ff1d 	bl	54e8 <USART_SpiTransfer>
    56ae:	2000      	movs	r0, #0
    56b0:	bd70      	pop	{r4, r5, r6, pc}
    56b2:	bf00      	nop
    56b4:	40006000 	.word	0x40006000
    56b8:	200010c4 	.word	0x200010c4
    56bc:	200010c8 	.word	0x200010c8
    56c0:	4000c800 	.word	0x4000c800

000056c4 <MICROSD_PowerOn>:
 *        DK doesn't support socket power control, only enable the SPI clock.
 *****************************************************************************/
void MICROSD_PowerOn(void)
{
  /* Enable SPI clock */
  CMU_ClockEnable(MICROSD_CMUCLOCK, true);
    56c4:	4801      	ldr	r0, [pc, #4]	; (56cc <MICROSD_PowerOn+0x8>)
    56c6:	2101      	movs	r1, #1
    56c8:	f7fe bbc6 	b.w	3e58 <CMU_ClockEnable>
    56cc:	00042200 	.word	0x00042200

000056d0 <MICROSD_PowerOff>:
 * @brief Select the micro SD card and wait for the card to become ready.
 * @return 1:Successful, 0:Timeout.
 *****************************************************************************/
int MICROSD_Select(void)
{
  GPIO->P[MICROSD_GPIOPORT].DOUTCLR = 1 << MICROSD_CSPIN;   /* CS pin low. */
    56d0:	4a1b      	ldr	r2, [pc, #108]	; (5740 <MICROSD_PowerOff+0x70>)
{
  uint8_t res;
  uint32_t retryCount;

  /* Wait for ready in timeout of 500ms */
  retryCount = 500 * xfersPrMsec;
    56d2:	4b1c      	ldr	r3, [pc, #112]	; (5744 <MICROSD_PowerOff+0x74>)
 * @brief Select the micro SD card and wait for the card to become ready.
 * @return 1:Successful, 0:Timeout.
 *****************************************************************************/
int MICROSD_Select(void)
{
  GPIO->P[MICROSD_GPIOPORT].DOUTCLR = 1 << MICROSD_CSPIN;   /* CS pin low. */
    56d4:	2140      	movs	r1, #64	; 0x40
/**************************************************************************//**
 * @brief Turn off micro SD card power.
 *        DK doesn't support socket power control, only disable the SPI clock.
 *****************************************************************************/
void MICROSD_PowerOff(void)
{
    56d6:	b570      	push	{r4, r5, r6, lr}
 * @brief Select the micro SD card and wait for the card to become ready.
 * @return 1:Successful, 0:Timeout.
 *****************************************************************************/
int MICROSD_Select(void)
{
  GPIO->P[MICROSD_GPIOPORT].DOUTCLR = 1 << MICROSD_CSPIN;   /* CS pin low. */
    56d8:	6391      	str	r1, [r2, #56]	; 0x38
{
  uint8_t res;
  uint32_t retryCount;

  /* Wait for ready in timeout of 500ms */
  retryCount = 500 * xfersPrMsec;
    56da:	681c      	ldr	r4, [r3, #0]
    56dc:	4d1a      	ldr	r5, [pc, #104]	; (5748 <MICROSD_PowerOff+0x78>)
    56de:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    56e2:	fb03 f404 	mul.w	r4, r3, r4
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    56e6:	462e      	mov	r6, r5
    56e8:	e001      	b.n	56ee <MICROSD_PowerOff+0x1e>

  /* Wait for ready in timeout of 500ms */
  retryCount = 500 * xfersPrMsec;
  do {
    res = MICROSD_XferSpi(0xff);
  } while ((res != 0xFF) && --retryCount);
    56ea:	3c01      	subs	r4, #1
    56ec:	d01b      	beq.n	5726 <MICROSD_PowerOff+0x56>
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    56ee:	682b      	ldr	r3, [r5, #0]
    timeOut--;
  }

  return USART_SpiTransfer(MICROSD_USART, data);
    56f0:	4816      	ldr	r0, [pc, #88]	; (574c <MICROSD_PowerOff+0x7c>)
    56f2:	21ff      	movs	r1, #255	; 0xff
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    56f4:	b10b      	cbz	r3, 56fa <MICROSD_PowerOff+0x2a>
    timeOut--;
    56f6:	3b01      	subs	r3, #1
    56f8:	6033      	str	r3, [r6, #0]
  }

  return USART_SpiTransfer(MICROSD_USART, data);
    56fa:	f7ff fef5 	bl	54e8 <USART_SpiTransfer>

  /* Wait for ready in timeout of 500ms */
  retryCount = 500 * xfersPrMsec;
  do {
    res = MICROSD_XferSpi(0xff);
  } while ((res != 0xFF) && --retryCount);
    56fe:	28ff      	cmp	r0, #255	; 0xff
    5700:	d1f3      	bne.n	56ea <MICROSD_PowerOff+0x1a>
/**************************************************************************//**
 * @brief Deselect the micro SD card and release the SPI bus.
 *****************************************************************************/
void MICROSD_Deselect(void)
{
  GPIO->P[MICROSD_GPIOPORT].DOUTSET = 1 << MICROSD_CSPIN;   /* CS pin high. */
    5702:	4b0f      	ldr	r3, [pc, #60]	; (5740 <MICROSD_PowerOff+0x70>)
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    5704:	4910      	ldr	r1, [pc, #64]	; (5748 <MICROSD_PowerOff+0x78>)
/**************************************************************************//**
 * @brief Deselect the micro SD card and release the SPI bus.
 *****************************************************************************/
void MICROSD_Deselect(void)
{
  GPIO->P[MICROSD_GPIOPORT].DOUTSET = 1 << MICROSD_CSPIN;   /* CS pin high. */
    5706:	2240      	movs	r2, #64	; 0x40
    5708:	635a      	str	r2, [r3, #52]	; 0x34
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    570a:	682b      	ldr	r3, [r5, #0]
    570c:	b10b      	cbz	r3, 5712 <MICROSD_PowerOff+0x42>
    timeOut--;
    570e:	3b01      	subs	r3, #1
    5710:	600b      	str	r3, [r1, #0]
  }

  return USART_SpiTransfer(MICROSD_USART, data);
    5712:	21ff      	movs	r1, #255	; 0xff
    5714:	480d      	ldr	r0, [pc, #52]	; (574c <MICROSD_PowerOff+0x7c>)
    5716:	f7ff fee7 	bl	54e8 <USART_SpiTransfer>
{
  /* Wait for micro SD card ready */
  MICROSD_Select();
  MICROSD_Deselect();
  /* Disable SPI clock */
  CMU_ClockEnable(MICROSD_CMUCLOCK, false);
    571a:	480d      	ldr	r0, [pc, #52]	; (5750 <MICROSD_PowerOff+0x80>)
    571c:	2100      	movs	r1, #0
}
    571e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
  /* Wait for micro SD card ready */
  MICROSD_Select();
  MICROSD_Deselect();
  /* Disable SPI clock */
  CMU_ClockEnable(MICROSD_CMUCLOCK, false);
    5722:	f7fe bb99 	b.w	3e58 <CMU_ClockEnable>
/**************************************************************************//**
 * @brief Deselect the micro SD card and release the SPI bus.
 *****************************************************************************/
void MICROSD_Deselect(void)
{
  GPIO->P[MICROSD_GPIOPORT].DOUTSET = 1 << MICROSD_CSPIN;   /* CS pin high. */
    5726:	4b06      	ldr	r3, [pc, #24]	; (5740 <MICROSD_PowerOff+0x70>)
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    5728:	4907      	ldr	r1, [pc, #28]	; (5748 <MICROSD_PowerOff+0x78>)
/**************************************************************************//**
 * @brief Deselect the micro SD card and release the SPI bus.
 *****************************************************************************/
void MICROSD_Deselect(void)
{
  GPIO->P[MICROSD_GPIOPORT].DOUTSET = 1 << MICROSD_CSPIN;   /* CS pin high. */
    572a:	2240      	movs	r2, #64	; 0x40
    572c:	635a      	str	r2, [r3, #52]	; 0x34
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    572e:	682b      	ldr	r3, [r5, #0]
    5730:	b10b      	cbz	r3, 5736 <MICROSD_PowerOff+0x66>
    timeOut--;
    5732:	3b01      	subs	r3, #1
    5734:	600b      	str	r3, [r1, #0]
  }

  return USART_SpiTransfer(MICROSD_USART, data);
    5736:	21ff      	movs	r1, #255	; 0xff
    5738:	4804      	ldr	r0, [pc, #16]	; (574c <MICROSD_PowerOff+0x7c>)
    573a:	f7ff fed5 	bl	54e8 <USART_SpiTransfer>
    573e:	e7e0      	b.n	5702 <MICROSD_PowerOff+0x32>
    5740:	40006000 	.word	0x40006000
    5744:	200010c4 	.word	0x200010c4
    5748:	200010c8 	.word	0x200010c8
    574c:	4000c800 	.word	0x4000c800
    5750:	00042200 	.word	0x00042200

00005754 <MICROSD_BlockRx>:
 *  Byte count (must be multiple of 4).
 * @return
 *  1:OK, 0:Failed.
 *****************************************************************************/
int MICROSD_BlockRx(uint8_t *buff, uint32_t btr)
{
    5754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t token;
  uint16_t val;
  uint32_t retryCount, framectrl, ctrl;

  /* Wait for data packet in timeout of 100ms */
  retryCount = 100 * xfersPrMsec;
    5758:	4b2b      	ldr	r3, [pc, #172]	; (5808 <MICROSD_BlockRx+0xb4>)
    575a:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 5810 <MICROSD_BlockRx+0xbc>
    575e:	681c      	ldr	r4, [r3, #0]
    5760:	2364      	movs	r3, #100	; 0x64
 *  Byte count (must be multiple of 4).
 * @return
 *  1:OK, 0:Failed.
 *****************************************************************************/
int MICROSD_BlockRx(uint8_t *buff, uint32_t btr)
{
    5762:	4607      	mov	r7, r0
    5764:	460e      	mov	r6, r1
  uint8_t token;
  uint16_t val;
  uint32_t retryCount, framectrl, ctrl;

  /* Wait for data packet in timeout of 100ms */
  retryCount = 100 * xfersPrMsec;
    5766:	fb03 f404 	mul.w	r4, r3, r4
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    576a:	46c1      	mov	r9, r8
    576c:	e001      	b.n	5772 <MICROSD_BlockRx+0x1e>

  /* Wait for data packet in timeout of 100ms */
  retryCount = 100 * xfersPrMsec;
  do {
    token = MICROSD_XferSpi(0xff);
  } while ((token == 0xFF) && --retryCount);
    576e:	3c01      	subs	r4, #1
    5770:	d047      	beq.n	5802 <MICROSD_BlockRx+0xae>
{
  if ( timeOut ) {
    timeOut--;
  }

  return USART_SpiTransfer(MICROSD_USART, data);
    5772:	4d26      	ldr	r5, [pc, #152]	; (580c <MICROSD_BlockRx+0xb8>)
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    5774:	f8d8 3000 	ldr.w	r3, [r8]
    timeOut--;
  }

  return USART_SpiTransfer(MICROSD_USART, data);
    5778:	4628      	mov	r0, r5
    577a:	21ff      	movs	r1, #255	; 0xff
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    577c:	b113      	cbz	r3, 5784 <MICROSD_BlockRx+0x30>
    timeOut--;
    577e:	3b01      	subs	r3, #1
    5780:	f8c9 3000 	str.w	r3, [r9]
  }

  return USART_SpiTransfer(MICROSD_USART, data);
    5784:	f7ff feb0 	bl	54e8 <USART_SpiTransfer>

  /* Wait for data packet in timeout of 100ms */
  retryCount = 100 * xfersPrMsec;
  do {
    token = MICROSD_XferSpi(0xff);
  } while ((token == 0xFF) && --retryCount);
    5788:	28ff      	cmp	r0, #255	; 0xff
    578a:	d0f0      	beq.n	576e <MICROSD_BlockRx+0x1a>

  if (token != 0xFE) {
    578c:	28fe      	cmp	r0, #254	; 0xfe
    578e:	d138      	bne.n	5802 <MICROSD_BlockRx+0xae>
    /* Invalid data token */
    return 0;
  }

  /* Save current configuration. */
  framectrl = MICROSD_USART->FRAME;
    5790:	6868      	ldr	r0, [r5, #4]
  ctrl      = MICROSD_USART->CTRL;
    5792:	682c      	ldr	r4, [r5, #0]

  /* Set frame length to 16 bit. This will increase the effective data rate. */
  MICROSD_USART->FRAME = (MICROSD_USART->FRAME & (~_USART_FRAME_DATABITS_MASK))
    5794:	686b      	ldr	r3, [r5, #4]
    5796:	f023 030f 	bic.w	r3, r3, #15
                         | USART_FRAME_DATABITS_SIXTEEN;
    579a:	f043 030d 	orr.w	r3, r3, #13
  /* Save current configuration. */
  framectrl = MICROSD_USART->FRAME;
  ctrl      = MICROSD_USART->CTRL;

  /* Set frame length to 16 bit. This will increase the effective data rate. */
  MICROSD_USART->FRAME = (MICROSD_USART->FRAME & (~_USART_FRAME_DATABITS_MASK))
    579e:	606b      	str	r3, [r5, #4]
                         | USART_FRAME_DATABITS_SIXTEEN;
  MICROSD_USART->CTRL |= USART_CTRL_BYTESWAP;
    57a0:	682b      	ldr	r3, [r5, #0]

  /* Clear send and receive buffers. */
  MICROSD_USART->CMD = USART_CMD_CLEARRX | USART_CMD_CLEARTX;
    57a2:	f44f 6240 	mov.w	r2, #3072	; 0xc00
  ctrl      = MICROSD_USART->CTRL;

  /* Set frame length to 16 bit. This will increase the effective data rate. */
  MICROSD_USART->FRAME = (MICROSD_USART->FRAME & (~_USART_FRAME_DATABITS_MASK))
                         | USART_FRAME_DATABITS_SIXTEEN;
  MICROSD_USART->CTRL |= USART_CTRL_BYTESWAP;
    57a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    57aa:	602b      	str	r3, [r5, #0]

  /* Clear send and receive buffers. */
  MICROSD_USART->CMD = USART_CMD_CLEARRX | USART_CMD_CLEARTX;
    57ac:	60ea      	str	r2, [r5, #12]

  if ( timeOut >= btr + 2 ) {
    57ae:	f8d8 3000 	ldr.w	r3, [r8]
  }

  /* Pipelining - The USART has two buffers of 16 bit in both
   * directions. Make sure that at least one is in the pipe at all
   * times to maximize throughput. */
  MICROSD_USART->TXDOUBLE = 0xffff;
    57b2:	4d16      	ldr	r5, [pc, #88]	; (580c <MICROSD_BlockRx+0xb8>)
  MICROSD_USART->CTRL |= USART_CTRL_BYTESWAP;

  /* Clear send and receive buffers. */
  MICROSD_USART->CMD = USART_CMD_CLEARRX | USART_CMD_CLEARTX;

  if ( timeOut >= btr + 2 ) {
    57b4:	1cb2      	adds	r2, r6, #2
    57b6:	429a      	cmp	r2, r3
    57b8:	bf9a      	itte	ls
    57ba:	3b02      	subls	r3, #2
    timeOut -= btr + 2;
    57bc:	1b9b      	subls	r3, r3, r6
  } else {
    timeOut = 0;
    57be:	2300      	movhi	r3, #0
  }

  /* Pipelining - The USART has two buffers of 16 bit in both
   * directions. Make sure that at least one is in the pipe at all
   * times to maximize throughput. */
  MICROSD_USART->TXDOUBLE = 0xffff;
    57c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    57c4:	f8c8 3000 	str.w	r3, [r8]
  do {
    MICROSD_USART->TXDOUBLE = 0xffff;
    57c8:	462a      	mov	r2, r5
    57ca:	3702      	adds	r7, #2
  }

  /* Pipelining - The USART has two buffers of 16 bit in both
   * directions. Make sure that at least one is in the pipe at all
   * times to maximize throughput. */
  MICROSD_USART->TXDOUBLE = 0xffff;
    57cc:	63e9      	str	r1, [r5, #60]	; 0x3c
  do {
    MICROSD_USART->TXDOUBLE = 0xffff;
    57ce:	63d1      	str	r1, [r2, #60]	; 0x3c

    while (!(MICROSD_USART->STATUS & USART_STATUS_RXDATAV)) ;
    57d0:	6913      	ldr	r3, [r2, #16]
    57d2:	061b      	lsls	r3, r3, #24
    57d4:	d5fc      	bpl.n	57d0 <MICROSD_BlockRx+0x7c>

    val = MICROSD_USART->RXDOUBLE;
    57d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    *buff++ = val;
    57d8:	f807 3c02 	strb.w	r3, [r7, #-2]
    *buff++ = val >> 8;

    btr -= 2;
  } while (btr);
    57dc:	3e02      	subs	r6, #2

    while (!(MICROSD_USART->STATUS & USART_STATUS_RXDATAV)) ;

    val = MICROSD_USART->RXDOUBLE;
    *buff++ = val;
    *buff++ = val >> 8;
    57de:	f3c3 2307 	ubfx	r3, r3, #8, #8
    57e2:	f807 3c01 	strb.w	r3, [r7, #-1]
    57e6:	f107 0702 	add.w	r7, r7, #2

    btr -= 2;
  } while (btr);
    57ea:	d1f0      	bne.n	57ce <MICROSD_BlockRx+0x7a>

  /* Next two bytes is the CRC which we discard. */
  while (!(MICROSD_USART->STATUS & USART_STATUS_RXDATAV)) ;
    57ec:	4907      	ldr	r1, [pc, #28]	; (580c <MICROSD_BlockRx+0xb8>)
    57ee:	690b      	ldr	r3, [r1, #16]
    57f0:	4a06      	ldr	r2, [pc, #24]	; (580c <MICROSD_BlockRx+0xb8>)
    57f2:	061b      	lsls	r3, r3, #24
    57f4:	d5fb      	bpl.n	57ee <MICROSD_BlockRx+0x9a>
  MICROSD_USART->RXDOUBLE;
    57f6:	6a53      	ldr	r3, [r2, #36]	; 0x24

  /* Restore old settings. */
  MICROSD_USART->FRAME = framectrl;
    57f8:	6050      	str	r0, [r2, #4]
  MICROSD_USART->CTRL  = ctrl;

  return 1;     /* Return with success */
    57fa:	2001      	movs	r0, #1
  while (!(MICROSD_USART->STATUS & USART_STATUS_RXDATAV)) ;
  MICROSD_USART->RXDOUBLE;

  /* Restore old settings. */
  MICROSD_USART->FRAME = framectrl;
  MICROSD_USART->CTRL  = ctrl;
    57fc:	6014      	str	r4, [r2, #0]

  return 1;     /* Return with success */
    57fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    token = MICROSD_XferSpi(0xff);
  } while ((token == 0xFF) && --retryCount);

  if (token != 0xFE) {
    /* Invalid data token */
    return 0;
    5802:	2000      	movs	r0, #0
  /* Restore old settings. */
  MICROSD_USART->FRAME = framectrl;
  MICROSD_USART->CTRL  = ctrl;

  return 1;     /* Return with success */
}
    5804:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5808:	200010c4 	.word	0x200010c4
    580c:	4000c800 	.word	0x4000c800
    5810:	200010c8 	.word	0x200010c8

00005814 <MICROSD_BlockTx>:
{
  uint8_t res;
  uint32_t retryCount;

  /* Wait for ready in timeout of 500ms */
  retryCount = 500 * xfersPrMsec;
    5814:	4b3f      	ldr	r3, [pc, #252]	; (5914 <MICROSD_BlockTx+0x100>)
 * @param token Data token.
 * @return 1:OK, 0:Failed.
 *****************************************************************************/
#if _READONLY == 0
int MICROSD_BlockTx(const uint8_t *buff, uint8_t token)
{
    5816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
{
  uint8_t res;
  uint32_t retryCount;

  /* Wait for ready in timeout of 500ms */
  retryCount = 500 * xfersPrMsec;
    581a:	681d      	ldr	r5, [r3, #0]
    581c:	4c3e      	ldr	r4, [pc, #248]	; (5918 <MICROSD_BlockTx+0x104>)
    581e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 * @param token Data token.
 * @return 1:OK, 0:Failed.
 *****************************************************************************/
#if _READONLY == 0
int MICROSD_BlockTx(const uint8_t *buff, uint8_t token)
{
    5822:	4606      	mov	r6, r0
    5824:	4688      	mov	r8, r1
{
  uint8_t res;
  uint32_t retryCount;

  /* Wait for ready in timeout of 500ms */
  retryCount = 500 * xfersPrMsec;
    5826:	fb03 f505 	mul.w	r5, r3, r5
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    582a:	4627      	mov	r7, r4
    582c:	e001      	b.n	5832 <MICROSD_BlockTx+0x1e>

  /* Wait for ready in timeout of 500ms */
  retryCount = 500 * xfersPrMsec;
  do {
    res = MICROSD_XferSpi(0xff);
  } while ((res != 0xFF) && --retryCount);
    582e:	3d01      	subs	r5, #1
    5830:	d06a      	beq.n	5908 <MICROSD_BlockTx+0xf4>
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    5832:	6823      	ldr	r3, [r4, #0]
    timeOut--;
  }

  return USART_SpiTransfer(MICROSD_USART, data);
    5834:	4839      	ldr	r0, [pc, #228]	; (591c <MICROSD_BlockTx+0x108>)
    5836:	21ff      	movs	r1, #255	; 0xff
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    5838:	b10b      	cbz	r3, 583e <MICROSD_BlockTx+0x2a>
    timeOut--;
    583a:	3b01      	subs	r3, #1
    583c:	603b      	str	r3, [r7, #0]
  }

  return USART_SpiTransfer(MICROSD_USART, data);
    583e:	f7ff fe53 	bl	54e8 <USART_SpiTransfer>

  /* Wait for ready in timeout of 500ms */
  retryCount = 500 * xfersPrMsec;
  do {
    res = MICROSD_XferSpi(0xff);
  } while ((res != 0xFF) && --retryCount);
    5842:	28ff      	cmp	r0, #255	; 0xff
    5844:	d1f3      	bne.n	582e <MICROSD_BlockTx+0x1a>
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    5846:	6823      	ldr	r3, [r4, #0]
    5848:	4a33      	ldr	r2, [pc, #204]	; (5918 <MICROSD_BlockTx+0x104>)
    584a:	b10b      	cbz	r3, 5850 <MICROSD_BlockTx+0x3c>
    timeOut--;
    584c:	3b01      	subs	r3, #1
    584e:	6013      	str	r3, [r2, #0]
  }

  return USART_SpiTransfer(MICROSD_USART, data);
    5850:	4d32      	ldr	r5, [pc, #200]	; (591c <MICROSD_BlockTx+0x108>)
    5852:	4641      	mov	r1, r8
    5854:	4628      	mov	r0, r5
    5856:	f7ff fe47 	bl	54e8 <USART_SpiTransfer>
    return 0;
  }

  MICROSD_XferSpi(token);         /* Xmit a token */

  if (token == 0xFD) {
    585a:	f1b8 0ffd 	cmp.w	r8, #253	; 0xfd
    585e:	d056      	beq.n	590e <MICROSD_BlockTx+0xfa>
    /* StopTran token */
    return 1;
  }

  /* Save current configuration. */
  framectrl = MICROSD_USART->FRAME;
    5860:	f8d5 8004 	ldr.w	r8, [r5, #4]
  ctrl      = MICROSD_USART->CTRL;
    5864:	f8d5 c000 	ldr.w	ip, [r5]

  /* Set frame length to 16 bit. This will increase the effective data rate. */
  MICROSD_USART->FRAME = (MICROSD_USART->FRAME & (~_USART_FRAME_DATABITS_MASK))
    5868:	686b      	ldr	r3, [r5, #4]
    586a:	f023 030f 	bic.w	r3, r3, #15
                         | USART_FRAME_DATABITS_SIXTEEN;
    586e:	f043 030d 	orr.w	r3, r3, #13
  /* Save current configuration. */
  framectrl = MICROSD_USART->FRAME;
  ctrl      = MICROSD_USART->CTRL;

  /* Set frame length to 16 bit. This will increase the effective data rate. */
  MICROSD_USART->FRAME = (MICROSD_USART->FRAME & (~_USART_FRAME_DATABITS_MASK))
    5872:	606b      	str	r3, [r5, #4]
                         | USART_FRAME_DATABITS_SIXTEEN;
  MICROSD_USART->CTRL |= USART_CTRL_BYTESWAP;
    5874:	682b      	ldr	r3, [r5, #0]

  /* Clear send and receive buffers. */
  MICROSD_USART->CMD = USART_CMD_CLEARRX | USART_CMD_CLEARTX;
    5876:	f44f 6240 	mov.w	r2, #3072	; 0xc00
  ctrl      = MICROSD_USART->CTRL;

  /* Set frame length to 16 bit. This will increase the effective data rate. */
  MICROSD_USART->FRAME = (MICROSD_USART->FRAME & (~_USART_FRAME_DATABITS_MASK))
                         | USART_FRAME_DATABITS_SIXTEEN;
  MICROSD_USART->CTRL |= USART_CTRL_BYTESWAP;
    587a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    587e:	602b      	str	r3, [r5, #0]

  /* Clear send and receive buffers. */
  MICROSD_USART->CMD = USART_CMD_CLEARRX | USART_CMD_CLEARTX;
    5880:	60ea      	str	r2, [r5, #12]

  if ( timeOut >= bc + 2 ) {
    5882:	6823      	ldr	r3, [r4, #0]
    5884:	f240 2201 	movw	r2, #513	; 0x201
    5888:	4293      	cmp	r3, r2

    val  = *buff++;
    val |= *buff++ << 8;
    bc  -= 2;

    while (!(MICROSD_USART->STATUS & USART_STATUS_TXBL)) ;
    588a:	4a24      	ldr	r2, [pc, #144]	; (591c <MICROSD_BlockTx+0x108>)

  /* Clear send and receive buffers. */
  MICROSD_USART->CMD = USART_CMD_CLEARRX | USART_CMD_CLEARTX;

  if ( timeOut >= bc + 2 ) {
    timeOut -= bc + 2;
    588c:	bf8c      	ite	hi
    588e:	f2a3 2e02 	subwhi	lr, r3, #514	; 0x202
  } else {
    timeOut = 0;
    5892:	f04f 0e00 	movls.w	lr, #0
    5896:	f8c4 e000 	str.w	lr, [r4]

    val  = *buff++;
    val |= *buff++ << 8;
    bc  -= 2;

    while (!(MICROSD_USART->STATUS & USART_STATUS_TXBL)) ;
    589a:	4617      	mov	r7, r2
    589c:	1cb1      	adds	r1, r6, #2
    589e:	f206 2502 	addw	r5, r6, #514	; 0x202

  do {
    /* Transmit a 512 byte data block to the SD-Card. */

    val  = *buff++;
    val |= *buff++ << 8;
    58a2:	f811 0c01 	ldrb.w	r0, [r1, #-1]
    58a6:	f811 3c02 	ldrb.w	r3, [r1, #-2]
    58aa:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    bc  -= 2;

    while (!(MICROSD_USART->STATUS & USART_STATUS_TXBL)) ;
    58ae:	6913      	ldr	r3, [r2, #16]
    58b0:	065e      	lsls	r6, r3, #25
    58b2:	d5fc      	bpl.n	58ae <MICROSD_BlockTx+0x9a>
    58b4:	3102      	adds	r1, #2

    MICROSD_USART->TXDOUBLE = val;
  } while (bc);
    58b6:	42a9      	cmp	r1, r5
    val |= *buff++ << 8;
    bc  -= 2;

    while (!(MICROSD_USART->STATUS & USART_STATUS_TXBL)) ;

    MICROSD_USART->TXDOUBLE = val;
    58b8:	63f8      	str	r0, [r7, #60]	; 0x3c
  } while (bc);
    58ba:	d1f2      	bne.n	58a2 <MICROSD_BlockTx+0x8e>

  while (!(MICROSD_USART->STATUS & USART_STATUS_TXBL)) ;
    58bc:	4917      	ldr	r1, [pc, #92]	; (591c <MICROSD_BlockTx+0x108>)
    58be:	690a      	ldr	r2, [r1, #16]
    58c0:	4b16      	ldr	r3, [pc, #88]	; (591c <MICROSD_BlockTx+0x108>)
    58c2:	0650      	lsls	r0, r2, #25
    58c4:	d5fb      	bpl.n	58be <MICROSD_BlockTx+0xaa>

  /* Transmit two dummy CRC bytes. */
  MICROSD_USART->TXDOUBLE = 0xFFFF;
    58c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    58ca:	63da      	str	r2, [r3, #60]	; 0x3c

  while (!(MICROSD_USART->STATUS & USART_STATUS_TXC)) ;
    58cc:	691a      	ldr	r2, [r3, #16]
    58ce:	4913      	ldr	r1, [pc, #76]	; (591c <MICROSD_BlockTx+0x108>)
    58d0:	0692      	lsls	r2, r2, #26
    58d2:	d5fb      	bpl.n	58cc <MICROSD_BlockTx+0xb8>

  /* Clear send and receive buffers. */
  MICROSD_USART->CMD = USART_CMD_CLEARRX | USART_CMD_CLEARTX;
    58d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    58d8:	60cb      	str	r3, [r1, #12]

  /* Restore old settings. */
  MICROSD_USART->FRAME = framectrl;
    58da:	f8c1 8004 	str.w	r8, [r1, #4]
  MICROSD_USART->CTRL  = ctrl;
    58de:	f8c1 c000 	str.w	ip, [r1]
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    58e2:	f1be 0f00 	cmp.w	lr, #0
    58e6:	d002      	beq.n	58ee <MICROSD_BlockTx+0xda>
    timeOut--;
    58e8:	f10e 33ff 	add.w	r3, lr, #4294967295
    58ec:	6023      	str	r3, [r4, #0]
  }

  return USART_SpiTransfer(MICROSD_USART, data);
    58ee:	21ff      	movs	r1, #255	; 0xff
    58f0:	480a      	ldr	r0, [pc, #40]	; (591c <MICROSD_BlockTx+0x108>)
    58f2:	f7ff fdf9 	bl	54e8 <USART_SpiTransfer>
  MICROSD_USART->FRAME = framectrl;
  MICROSD_USART->CTRL  = ctrl;

  resp = MICROSD_XferSpi(0xff); /* Receive a data response */

  if ((resp & 0x1F) != 0x05) {  /* If not accepted, return with error */
    58f6:	f000 001f 	and.w	r0, r0, #31
    58fa:	f1a0 0005 	sub.w	r0, r0, #5
    58fe:	fab0 f080 	clz	r0, r0
    5902:	0940      	lsrs	r0, r0, #5
    5904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint16_t val;
  uint32_t bc = 512;
  uint32_t framectrl, ctrl;

  if (WaitReady() != 0xFF) {
    return 0;
    5908:	4628      	mov	r0, r5
    590a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  MICROSD_XferSpi(token);         /* Xmit a token */

  if (token == 0xFD) {
    /* StopTran token */
    return 1;
    590e:	2001      	movs	r0, #1
    5910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5914:	200010c4 	.word	0x200010c4
    5918:	200010c8 	.word	0x200010c8
    591c:	4000c800 	.word	0x4000c800

00005920 <MICROSD_SendCmd>:
uint8_t MICROSD_SendCmd(uint8_t cmd, DWORD arg)
{
  uint8_t  n, res;
  uint32_t retryCount;

  if (cmd & 0x80) { /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    5920:	0602      	lsls	r2, r0, #24
 *  Argument.
 * @return
 *  Response value.
 *****************************************************************************/
uint8_t MICROSD_SendCmd(uint8_t cmd, DWORD arg)
{
    5922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5926:	4607      	mov	r7, r0
    5928:	4688      	mov	r8, r1
  uint8_t  n, res;
  uint32_t retryCount;

  if (cmd & 0x80) { /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    592a:	d46c      	bmi.n	5a06 <MICROSD_SendCmd+0xe6>
/**************************************************************************//**
 * @brief Deselect the micro SD card and release the SPI bus.
 *****************************************************************************/
void MICROSD_Deselect(void)
{
  GPIO->P[MICROSD_GPIOPORT].DOUTSET = 1 << MICROSD_CSPIN;   /* CS pin high. */
    592c:	4b53      	ldr	r3, [pc, #332]	; (5a7c <MICROSD_SendCmd+0x15c>)
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    592e:	4d54      	ldr	r5, [pc, #336]	; (5a80 <MICROSD_SendCmd+0x160>)
/**************************************************************************//**
 * @brief Deselect the micro SD card and release the SPI bus.
 *****************************************************************************/
void MICROSD_Deselect(void)
{
  GPIO->P[MICROSD_GPIOPORT].DOUTSET = 1 << MICROSD_CSPIN;   /* CS pin high. */
    5930:	2240      	movs	r2, #64	; 0x40
    5932:	635a      	str	r2, [r3, #52]	; 0x34
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    5934:	682b      	ldr	r3, [r5, #0]
    5936:	b10b      	cbz	r3, 593c <MICROSD_SendCmd+0x1c>
    timeOut--;
    5938:	3b01      	subs	r3, #1
    593a:	602b      	str	r3, [r5, #0]
  }

  return USART_SpiTransfer(MICROSD_USART, data);
    593c:	21ff      	movs	r1, #255	; 0xff
    593e:	4851      	ldr	r0, [pc, #324]	; (5a84 <MICROSD_SendCmd+0x164>)
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    5940:	4e4f      	ldr	r6, [pc, #316]	; (5a80 <MICROSD_SendCmd+0x160>)
    timeOut--;
  }

  return USART_SpiTransfer(MICROSD_USART, data);
    5942:	f7ff fdd1 	bl	54e8 <USART_SpiTransfer>
 * @brief Select the micro SD card and wait for the card to become ready.
 * @return 1:Successful, 0:Timeout.
 *****************************************************************************/
int MICROSD_Select(void)
{
  GPIO->P[MICROSD_GPIOPORT].DOUTCLR = 1 << MICROSD_CSPIN;   /* CS pin low. */
    5946:	4a4d      	ldr	r2, [pc, #308]	; (5a7c <MICROSD_SendCmd+0x15c>)
{
  uint8_t res;
  uint32_t retryCount;

  /* Wait for ready in timeout of 500ms */
  retryCount = 500 * xfersPrMsec;
    5948:	4b4f      	ldr	r3, [pc, #316]	; (5a88 <MICROSD_SendCmd+0x168>)
 * @brief Select the micro SD card and wait for the card to become ready.
 * @return 1:Successful, 0:Timeout.
 *****************************************************************************/
int MICROSD_Select(void)
{
  GPIO->P[MICROSD_GPIOPORT].DOUTCLR = 1 << MICROSD_CSPIN;   /* CS pin low. */
    594a:	2140      	movs	r1, #64	; 0x40
    594c:	6391      	str	r1, [r2, #56]	; 0x38
{
  uint8_t res;
  uint32_t retryCount;

  /* Wait for ready in timeout of 500ms */
  retryCount = 500 * xfersPrMsec;
    594e:	681c      	ldr	r4, [r3, #0]
    5950:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    5954:	fb03 f404 	mul.w	r4, r3, r4
    5958:	e001      	b.n	595e <MICROSD_SendCmd+0x3e>
  do {
    res = MICROSD_XferSpi(0xff);
  } while ((res != 0xFF) && --retryCount);
    595a:	3c01      	subs	r4, #1
    595c:	d044      	beq.n	59e8 <MICROSD_SendCmd+0xc8>
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    595e:	682b      	ldr	r3, [r5, #0]
    timeOut--;
  }

  return USART_SpiTransfer(MICROSD_USART, data);
    5960:	4848      	ldr	r0, [pc, #288]	; (5a84 <MICROSD_SendCmd+0x164>)
    5962:	21ff      	movs	r1, #255	; 0xff
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    5964:	b10b      	cbz	r3, 596a <MICROSD_SendCmd+0x4a>
    timeOut--;
    5966:	3b01      	subs	r3, #1
    5968:	6033      	str	r3, [r6, #0]
  }

  return USART_SpiTransfer(MICROSD_USART, data);
    596a:	f7ff fdbd 	bl	54e8 <USART_SpiTransfer>

  /* Wait for ready in timeout of 500ms */
  retryCount = 500 * xfersPrMsec;
  do {
    res = MICROSD_XferSpi(0xff);
  } while ((res != 0xFF) && --retryCount);
    596e:	28ff      	cmp	r0, #255	; 0xff
    5970:	d1f3      	bne.n	595a <MICROSD_SendCmd+0x3a>
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    5972:	682b      	ldr	r3, [r5, #0]
    5974:	4a42      	ldr	r2, [pc, #264]	; (5a80 <MICROSD_SendCmd+0x160>)
    5976:	b10b      	cbz	r3, 597c <MICROSD_SendCmd+0x5c>
    timeOut--;
    5978:	3b01      	subs	r3, #1
    597a:	6013      	str	r3, [r2, #0]
  }

  return USART_SpiTransfer(MICROSD_USART, data);
    597c:	f047 0140 	orr.w	r1, r7, #64	; 0x40
    5980:	4840      	ldr	r0, [pc, #256]	; (5a84 <MICROSD_SendCmd+0x164>)
    5982:	f7ff fdb1 	bl	54e8 <USART_SpiTransfer>
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    5986:	682b      	ldr	r3, [r5, #0]
    5988:	4a3d      	ldr	r2, [pc, #244]	; (5a80 <MICROSD_SendCmd+0x160>)
    return 0xFF;
  }

  /* Send command packet */
  MICROSD_XferSpi(0x40 | cmd);            /* Start + Command index */
  MICROSD_XferSpi((uint8_t)(arg >> 24));  /* Argument[31..24] */
    598a:	ea4f 6118 	mov.w	r1, r8, lsr #24
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    598e:	b10b      	cbz	r3, 5994 <MICROSD_SendCmd+0x74>
    timeOut--;
    5990:	3b01      	subs	r3, #1
    5992:	6013      	str	r3, [r2, #0]
  }

  return USART_SpiTransfer(MICROSD_USART, data);
    5994:	483b      	ldr	r0, [pc, #236]	; (5a84 <MICROSD_SendCmd+0x164>)
    5996:	f7ff fda7 	bl	54e8 <USART_SpiTransfer>
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    599a:	682b      	ldr	r3, [r5, #0]
    599c:	4a38      	ldr	r2, [pc, #224]	; (5a80 <MICROSD_SendCmd+0x160>)
  }

  /* Send command packet */
  MICROSD_XferSpi(0x40 | cmd);            /* Start + Command index */
  MICROSD_XferSpi((uint8_t)(arg >> 24));  /* Argument[31..24] */
  MICROSD_XferSpi((uint8_t)(arg >> 16));  /* Argument[23..16] */
    599e:	f3c8 4107 	ubfx	r1, r8, #16, #8
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    59a2:	b10b      	cbz	r3, 59a8 <MICROSD_SendCmd+0x88>
    timeOut--;
    59a4:	3b01      	subs	r3, #1
    59a6:	6013      	str	r3, [r2, #0]
  }

  return USART_SpiTransfer(MICROSD_USART, data);
    59a8:	4836      	ldr	r0, [pc, #216]	; (5a84 <MICROSD_SendCmd+0x164>)
    59aa:	f7ff fd9d 	bl	54e8 <USART_SpiTransfer>
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    59ae:	682b      	ldr	r3, [r5, #0]
    59b0:	4a33      	ldr	r2, [pc, #204]	; (5a80 <MICROSD_SendCmd+0x160>)

  /* Send command packet */
  MICROSD_XferSpi(0x40 | cmd);            /* Start + Command index */
  MICROSD_XferSpi((uint8_t)(arg >> 24));  /* Argument[31..24] */
  MICROSD_XferSpi((uint8_t)(arg >> 16));  /* Argument[23..16] */
  MICROSD_XferSpi((uint8_t)(arg >> 8));   /* Argument[15..8] */
    59b2:	f3c8 2107 	ubfx	r1, r8, #8, #8
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    59b6:	b10b      	cbz	r3, 59bc <MICROSD_SendCmd+0x9c>
    timeOut--;
    59b8:	3b01      	subs	r3, #1
    59ba:	6013      	str	r3, [r2, #0]
  }

  return USART_SpiTransfer(MICROSD_USART, data);
    59bc:	4831      	ldr	r0, [pc, #196]	; (5a84 <MICROSD_SendCmd+0x164>)
    59be:	f7ff fd93 	bl	54e8 <USART_SpiTransfer>
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    59c2:	682b      	ldr	r3, [r5, #0]
    59c4:	4a2e      	ldr	r2, [pc, #184]	; (5a80 <MICROSD_SendCmd+0x160>)
  /* Send command packet */
  MICROSD_XferSpi(0x40 | cmd);            /* Start + Command index */
  MICROSD_XferSpi((uint8_t)(arg >> 24));  /* Argument[31..24] */
  MICROSD_XferSpi((uint8_t)(arg >> 16));  /* Argument[23..16] */
  MICROSD_XferSpi((uint8_t)(arg >> 8));   /* Argument[15..8] */
  MICROSD_XferSpi((uint8_t) arg);         /* Argument[7..0] */
    59c6:	fa5f f188 	uxtb.w	r1, r8
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    59ca:	b10b      	cbz	r3, 59d0 <MICROSD_SendCmd+0xb0>
    timeOut--;
    59cc:	3b01      	subs	r3, #1
    59ce:	6013      	str	r3, [r2, #0]
  }

  return USART_SpiTransfer(MICROSD_USART, data);
    59d0:	482c      	ldr	r0, [pc, #176]	; (5a84 <MICROSD_SendCmd+0x164>)
    59d2:	f7ff fd89 	bl	54e8 <USART_SpiTransfer>
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    59d6:	682b      	ldr	r3, [r5, #0]
  MICROSD_XferSpi((uint8_t)(arg >> 24));  /* Argument[31..24] */
  MICROSD_XferSpi((uint8_t)(arg >> 16));  /* Argument[23..16] */
  MICROSD_XferSpi((uint8_t)(arg >> 8));   /* Argument[15..8] */
  MICROSD_XferSpi((uint8_t) arg);         /* Argument[7..0] */
  n = 0x01;                               /* Dummy CRC + Stop */
  if (cmd == CMD0) {
    59d8:	2f00      	cmp	r7, #0
    59da:	d038      	beq.n	5a4e <MICROSD_SendCmd+0x12e>
    n = 0x95;                             /* Valid CRC for CMD0(0) */
  }
  if (cmd == CMD8) {
    59dc:	2f08      	cmp	r7, #8
    59de:	d11d      	bne.n	5a1c <MICROSD_SendCmd+0xfc>
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    59e0:	2b00      	cmp	r3, #0
    59e2:	d046      	beq.n	5a72 <MICROSD_SendCmd+0x152>
  n = 0x01;                               /* Dummy CRC + Stop */
  if (cmd == CMD0) {
    n = 0x95;                             /* Valid CRC for CMD0(0) */
  }
  if (cmd == CMD8) {
    n = 0x87;                             /* Valid CRC for CMD8(0x1AA) */
    59e4:	2187      	movs	r1, #135	; 0x87
    59e6:	e01b      	b.n	5a20 <MICROSD_SendCmd+0x100>
/**************************************************************************//**
 * @brief Deselect the micro SD card and release the SPI bus.
 *****************************************************************************/
void MICROSD_Deselect(void)
{
  GPIO->P[MICROSD_GPIOPORT].DOUTSET = 1 << MICROSD_CSPIN;   /* CS pin high. */
    59e8:	4b24      	ldr	r3, [pc, #144]	; (5a7c <MICROSD_SendCmd+0x15c>)
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    59ea:	4925      	ldr	r1, [pc, #148]	; (5a80 <MICROSD_SendCmd+0x160>)
/**************************************************************************//**
 * @brief Deselect the micro SD card and release the SPI bus.
 *****************************************************************************/
void MICROSD_Deselect(void)
{
  GPIO->P[MICROSD_GPIOPORT].DOUTSET = 1 << MICROSD_CSPIN;   /* CS pin high. */
    59ec:	2240      	movs	r2, #64	; 0x40
    59ee:	635a      	str	r2, [r3, #52]	; 0x34
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    59f0:	682b      	ldr	r3, [r5, #0]
    59f2:	b10b      	cbz	r3, 59f8 <MICROSD_SendCmd+0xd8>
    timeOut--;
    59f4:	3b01      	subs	r3, #1
    59f6:	600b      	str	r3, [r1, #0]
  }

  return USART_SpiTransfer(MICROSD_USART, data);
    59f8:	21ff      	movs	r1, #255	; 0xff
    59fa:	4822      	ldr	r0, [pc, #136]	; (5a84 <MICROSD_SendCmd+0x164>)
    59fc:	f7ff fd74 	bl	54e8 <USART_SpiTransfer>
  }

  /* Select the card and wait for ready */
  MICROSD_Deselect();
  if (!MICROSD_Select()) {
    return 0xFF;
    5a00:	20ff      	movs	r0, #255	; 0xff
    5a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint8_t  n, res;
  uint32_t retryCount;

  if (cmd & 0x80) { /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    cmd &= 0x7F;
    res  = MICROSD_SendCmd(CMD55, 0);
    5a06:	2037      	movs	r0, #55	; 0x37
    5a08:	2100      	movs	r1, #0
    5a0a:	f7ff ff89 	bl	5920 <MICROSD_SendCmd>
    if (res > 1) {
    5a0e:	2801      	cmp	r0, #1
    5a10:	d901      	bls.n	5a16 <MICROSD_SendCmd+0xf6>
  do {
    res = MICROSD_XferSpi(0xff);
  } while ((res & 0x80) && --retryCount);

  return res;             /* Return with the response value */
}
    5a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
  uint8_t  n, res;
  uint32_t retryCount;

  if (cmd & 0x80) { /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    cmd &= 0x7F;
    5a16:	f007 077f 	and.w	r7, r7, #127	; 0x7f
    5a1a:	e787      	b.n	592c <MICROSD_SendCmd+0xc>
  MICROSD_XferSpi(0x40 | cmd);            /* Start + Command index */
  MICROSD_XferSpi((uint8_t)(arg >> 24));  /* Argument[31..24] */
  MICROSD_XferSpi((uint8_t)(arg >> 16));  /* Argument[23..16] */
  MICROSD_XferSpi((uint8_t)(arg >> 8));   /* Argument[15..8] */
  MICROSD_XferSpi((uint8_t) arg);         /* Argument[7..0] */
  n = 0x01;                               /* Dummy CRC + Stop */
    5a1c:	2101      	movs	r1, #1
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    5a1e:	b10b      	cbz	r3, 5a24 <MICROSD_SendCmd+0x104>
    timeOut--;
    5a20:	3b01      	subs	r3, #1
    5a22:	602b      	str	r3, [r5, #0]
  }

  return USART_SpiTransfer(MICROSD_USART, data);
    5a24:	4817      	ldr	r0, [pc, #92]	; (5a84 <MICROSD_SendCmd+0x164>)
    5a26:	f7ff fd5f 	bl	54e8 <USART_SpiTransfer>
    n = 0x87;                             /* Valid CRC for CMD8(0x1AA) */
  }
  MICROSD_XferSpi(n);

  /* Receive command response */
  if (cmd == CMD12) {
    5a2a:	2f0c      	cmp	r7, #12
    5a2c:	d017      	beq.n	5a5e <MICROSD_SendCmd+0x13e>
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    5a2e:	4e14      	ldr	r6, [pc, #80]	; (5a80 <MICROSD_SendCmd+0x160>)
  MICROSD_XferSpi(0x40 | cmd);            /* Start + Command index */
  MICROSD_XferSpi((uint8_t)(arg >> 24));  /* Argument[31..24] */
  MICROSD_XferSpi((uint8_t)(arg >> 16));  /* Argument[23..16] */
  MICROSD_XferSpi((uint8_t)(arg >> 8));   /* Argument[15..8] */
  MICROSD_XferSpi((uint8_t) arg);         /* Argument[7..0] */
  n = 0x01;                               /* Dummy CRC + Stop */
    5a30:	240a      	movs	r4, #10
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    5a32:	682b      	ldr	r3, [r5, #0]
    timeOut--;
  }

  return USART_SpiTransfer(MICROSD_USART, data);
    5a34:	4813      	ldr	r0, [pc, #76]	; (5a84 <MICROSD_SendCmd+0x164>)
    5a36:	21ff      	movs	r1, #255	; 0xff
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    5a38:	b10b      	cbz	r3, 5a3e <MICROSD_SendCmd+0x11e>
    timeOut--;
    5a3a:	3b01      	subs	r3, #1
    5a3c:	6033      	str	r3, [r6, #0]
  }

  return USART_SpiTransfer(MICROSD_USART, data);
    5a3e:	f7ff fd53 	bl	54e8 <USART_SpiTransfer>
    MICROSD_XferSpi(0xff);                /* Skip a stuff byte when stop reading */
  }
  retryCount = 10;                        /* Wait for a valid response in timeout of 10 attempts */
  do {
    res = MICROSD_XferSpi(0xff);
  } while ((res & 0x80) && --retryCount);
    5a42:	0603      	lsls	r3, r0, #24
    5a44:	d5e5      	bpl.n	5a12 <MICROSD_SendCmd+0xf2>
    5a46:	3c01      	subs	r4, #1
    5a48:	d1f3      	bne.n	5a32 <MICROSD_SendCmd+0x112>
    5a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    5a4e:	b10b      	cbz	r3, 5a54 <MICROSD_SendCmd+0x134>
  MICROSD_XferSpi((uint8_t)(arg >> 16));  /* Argument[23..16] */
  MICROSD_XferSpi((uint8_t)(arg >> 8));   /* Argument[15..8] */
  MICROSD_XferSpi((uint8_t) arg);         /* Argument[7..0] */
  n = 0x01;                               /* Dummy CRC + Stop */
  if (cmd == CMD0) {
    n = 0x95;                             /* Valid CRC for CMD0(0) */
    5a50:	2195      	movs	r1, #149	; 0x95
    5a52:	e7e5      	b.n	5a20 <MICROSD_SendCmd+0x100>
{
  if ( timeOut ) {
    timeOut--;
  }

  return USART_SpiTransfer(MICROSD_USART, data);
    5a54:	2195      	movs	r1, #149	; 0x95
    5a56:	480b      	ldr	r0, [pc, #44]	; (5a84 <MICROSD_SendCmd+0x164>)
    5a58:	f7ff fd46 	bl	54e8 <USART_SpiTransfer>
    5a5c:	e7e7      	b.n	5a2e <MICROSD_SendCmd+0x10e>
 * @return
 *  Byte received.
 *****************************************************************************/
uint8_t MICROSD_XferSpi(uint8_t data)
{
  if ( timeOut ) {
    5a5e:	682b      	ldr	r3, [r5, #0]
    5a60:	4a07      	ldr	r2, [pc, #28]	; (5a80 <MICROSD_SendCmd+0x160>)
    5a62:	b10b      	cbz	r3, 5a68 <MICROSD_SendCmd+0x148>
    timeOut--;
    5a64:	3b01      	subs	r3, #1
    5a66:	6013      	str	r3, [r2, #0]
  }

  return USART_SpiTransfer(MICROSD_USART, data);
    5a68:	21ff      	movs	r1, #255	; 0xff
    5a6a:	4806      	ldr	r0, [pc, #24]	; (5a84 <MICROSD_SendCmd+0x164>)
    5a6c:	f7ff fd3c 	bl	54e8 <USART_SpiTransfer>
    5a70:	e7dd      	b.n	5a2e <MICROSD_SendCmd+0x10e>
    5a72:	2187      	movs	r1, #135	; 0x87
    5a74:	4803      	ldr	r0, [pc, #12]	; (5a84 <MICROSD_SendCmd+0x164>)
    5a76:	f7ff fd37 	bl	54e8 <USART_SpiTransfer>
    5a7a:	e7d8      	b.n	5a2e <MICROSD_SendCmd+0x10e>
    5a7c:	40006000 	.word	0x40006000
    5a80:	200010c8 	.word	0x200010c8
    5a84:	4000c800 	.word	0x4000c800
    5a88:	200010c4 	.word	0x200010c4

00005a8c <MICROSD_SpiClkSlow>:
/**************************************************************************//**
 * @brief Set SPI clock to a low frequency suitable for initial
 *        card initialization.
 *****************************************************************************/
void MICROSD_SpiClkSlow(void)
{
    5a8c:	b508      	push	{r3, lr}
  USART_BaudrateSyncSet(MICROSD_USART, 0, MICROSD_LO_SPI_FREQ);
    5a8e:	4a04      	ldr	r2, [pc, #16]	; (5aa0 <MICROSD_SpiClkSlow+0x14>)
    5a90:	4804      	ldr	r0, [pc, #16]	; (5aa4 <MICROSD_SpiClkSlow+0x18>)
    5a92:	2100      	movs	r1, #0
    5a94:	f7ff fcb6 	bl	5404 <USART_BaudrateSyncSet>
  xfersPrMsec = MICROSD_LO_SPI_FREQ / 8000;
    5a98:	4b03      	ldr	r3, [pc, #12]	; (5aa8 <MICROSD_SpiClkSlow+0x1c>)
    5a9a:	220c      	movs	r2, #12
    5a9c:	601a      	str	r2, [r3, #0]
    5a9e:	bd08      	pop	{r3, pc}
    5aa0:	000186a0 	.word	0x000186a0
    5aa4:	4000c800 	.word	0x4000c800
    5aa8:	200010c4 	.word	0x200010c4

00005aac <MICROSD_SpiClkFast>:

/**************************************************************************//**
 * @brief Set SPI clock to maximum frequency.
 *****************************************************************************/
void MICROSD_SpiClkFast(void)
{
    5aac:	b508      	push	{r3, lr}
  USART_BaudrateSyncSet(MICROSD_USART, 0, MICROSD_HI_SPI_FREQ);
    5aae:	4a05      	ldr	r2, [pc, #20]	; (5ac4 <MICROSD_SpiClkFast+0x18>)
    5ab0:	4805      	ldr	r0, [pc, #20]	; (5ac8 <MICROSD_SpiClkFast+0x1c>)
    5ab2:	2100      	movs	r1, #0
    5ab4:	f7ff fca6 	bl	5404 <USART_BaudrateSyncSet>
  xfersPrMsec = MICROSD_HI_SPI_FREQ / 8000;
    5ab8:	4b04      	ldr	r3, [pc, #16]	; (5acc <MICROSD_SpiClkFast+0x20>)
    5aba:	f240 52dc 	movw	r2, #1500	; 0x5dc
    5abe:	601a      	str	r2, [r3, #0]
    5ac0:	bd08      	pop	{r3, pc}
    5ac2:	bf00      	nop
    5ac4:	00b71b00 	.word	0x00b71b00
    5ac8:	4000c800 	.word	0x4000c800
    5acc:	200010c4 	.word	0x200010c4

00005ad0 <MICROSD_TimeOutSet>:
 * @param[in] msec
 *  Millisecond timeout value (very approximate).
 *****************************************************************************/
void MICROSD_TimeOutSet(uint32_t msec)
{
  timeOut = xfersPrMsec * msec;
    5ad0:	4b03      	ldr	r3, [pc, #12]	; (5ae0 <MICROSD_TimeOutSet+0x10>)
    5ad2:	4a04      	ldr	r2, [pc, #16]	; (5ae4 <MICROSD_TimeOutSet+0x14>)
    5ad4:	681b      	ldr	r3, [r3, #0]
    5ad6:	fb03 f000 	mul.w	r0, r3, r0
    5ada:	6010      	str	r0, [r2, #0]
    5adc:	4770      	bx	lr
    5ade:	bf00      	nop
    5ae0:	200010c4 	.word	0x200010c4
    5ae4:	200010c8 	.word	0x200010c8

00005ae8 <MICROSD_TimeOutElapsed>:
 * @return
 *  True if timeout has elapsed.
 *****************************************************************************/
bool MICROSD_TimeOutElapsed(void)
{
  return timeOut == 0;
    5ae8:	4b02      	ldr	r3, [pc, #8]	; (5af4 <MICROSD_TimeOutElapsed+0xc>)
    5aea:	6818      	ldr	r0, [r3, #0]
}
    5aec:	fab0 f080 	clz	r0, r0
    5af0:	0940      	lsrs	r0, r0, #5
    5af2:	4770      	bx	lr
    5af4:	200010c8 	.word	0x200010c8

00005af8 <Reset_Handler>:
    .align      2
    .globl      Reset_Handler
    .type       Reset_Handler, %function
Reset_Handler:
#ifndef __NO_SYSTEM_INIT
    ldr     r0, =SystemInit
    5af8:	4806      	ldr	r0, [pc, #24]	; (5b14 <Reset_Handler+0x1c>)
    blx     r0
    5afa:	4780      	blx	r0
 *    __data_start__: VMA of start of the section to copy to
 *    __data_end__: VMA of end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
    ldr     r1, =__etext
    5afc:	4906      	ldr	r1, [pc, #24]	; (5b18 <Reset_Handler+0x20>)
    ldr     r2, =__data_start__
    5afe:	4a07      	ldr	r2, [pc, #28]	; (5b1c <Reset_Handler+0x24>)
    ldr     r3, =__data_end__
    5b00:	4b07      	ldr	r3, [pc, #28]	; (5b20 <Reset_Handler+0x28>)

.L_loop1:
    cmp     r2, r3
    5b02:	429a      	cmp	r2, r3
    ittt    lt
    5b04:	bfbe      	ittt	lt
    ldrlt   r0, [r1], #4
    5b06:	f851 0b04 	ldrlt.w	r0, [r1], #4
    strlt   r0, [r2], #4
    5b0a:	f842 0b04 	strlt.w	r0, [r2], #4
    blt     .L_loop1
    5b0e:	e7f8      	blt.n	5b02 <Reset_Handler+0xa>
#endif /* __STARTUP_CLEAR_BSS_MULTIPLE || __STARTUP_CLEAR_BSS */

#ifndef __START
#define __START _start
#endif
    bl      __START
    5b10:	f7fa fb14 	bl	13c <_mainCRTStartup>
    .align      2
    .globl      Reset_Handler
    .type       Reset_Handler, %function
Reset_Handler:
#ifndef __NO_SYSTEM_INIT
    ldr     r0, =SystemInit
    5b14:	00005ce9 	.word	0x00005ce9
 *    __data_start__: VMA of start of the section to copy to
 *    __data_end__: VMA of end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
    ldr     r1, =__etext
    5b18:	00035ce0 	.word	0x00035ce0
    ldr     r2, =__data_start__
    5b1c:	20000000 	.word	0x20000000
    ldr     r3, =__data_end__
    5b20:	20000a88 	.word	0x20000a88

00005b24 <ACMP0_IRQHandler>:
    .align  1
    .thumb_func
    .weak   Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    b       .
    5b24:	e7fe      	b.n	5b24 <ACMP0_IRQHandler>
    5b26:	bf00      	nop

00005b28 <SystemCoreClockGet>:
 ******************************************************************************/
uint32_t SystemHFClockGet(void)
{
  uint32_t ret;

  switch (CMU->STATUS & (CMU_STATUS_HFRCOSEL | CMU_STATUS_HFXOSEL |
    5b28:	4a29      	ldr	r2, [pc, #164]	; (5bd0 <SystemCoreClockGet+0xa8>)
    5b2a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    5b2c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
    5b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    5b34:	d02a      	beq.n	5b8c <SystemCoreClockGet+0x64>
    5b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    5b3a:	d024      	beq.n	5b86 <SystemCoreClockGet+0x5e>
    5b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    5b40:	d011      	beq.n	5b66 <SystemCoreClockGet+0x3e>
      ret = 0;
#endif
      break;

    default: /* CMU_STATUS_HFRCOSEL */
      switch (CMU->HFRCOCTRL & _CMU_HFRCOCTRL_BAND_MASK)
    5b42:	68d3      	ldr	r3, [r2, #12]
    5b44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    5b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    5b4c:	d03d      	beq.n	5bca <SystemCoreClockGet+0xa2>
    5b4e:	d920      	bls.n	5b92 <SystemCoreClockGet+0x6a>
    5b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    5b54:	d037      	beq.n	5bc6 <SystemCoreClockGet+0x9e>
    5b56:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    5b5a:	d032      	beq.n	5bc2 <SystemCoreClockGet+0x9a>
    5b5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    5b60:	d024      	beq.n	5bac <SystemCoreClockGet+0x84>
        else
          ret = 1000000;
        break;

      default:
        ret = 0;
    5b62:	2300      	movs	r3, #0
    5b64:	e001      	b.n	5b6a <SystemCoreClockGet+0x42>
      ret = EFM32_LFRCO_FREQ;
      break;

    case CMU_STATUS_HFXOSEL:
#if (EFM32_HFXO_FREQ > 0)
      ret = SystemHFXOClock;
    5b66:	4b1b      	ldr	r3, [pc, #108]	; (5bd4 <SystemCoreClockGet+0xac>)
    5b68:	681b      	ldr	r3, [r3, #0]
        break;
      }
      break;
  }

  return ret / (1U + ((CMU->CTRL & _CMU_CTRL_HFCLKDIV_MASK)
    5b6a:	4a19      	ldr	r2, [pc, #100]	; (5bd0 <SystemCoreClockGet+0xa8>)
  ret = SystemHFClockGet();
  ret >>= (CMU->HFCORECLKDIV & _CMU_HFCORECLKDIV_HFCORECLKDIV_MASK) >>
          _CMU_HFCORECLKDIV_HFCORECLKDIV_SHIFT;

  /* Keep CMSIS variable up-to-date just in case */
  SystemCoreClock = ret;
    5b6c:	491a      	ldr	r1, [pc, #104]	; (5bd8 <SystemCoreClockGet+0xb0>)
        break;
      }
      break;
  }

  return ret / (1U + ((CMU->CTRL & _CMU_CTRL_HFCLKDIV_MASK)
    5b6e:	6810      	ldr	r0, [r2, #0]
uint32_t SystemCoreClockGet(void)
{
  uint32_t ret;

  ret = SystemHFClockGet();
  ret >>= (CMU->HFCORECLKDIV & _CMU_HFCORECLKDIV_HFCORECLKDIV_MASK) >>
    5b70:	6852      	ldr	r2, [r2, #4]
      }
      break;
  }

  return ret / (1U + ((CMU->CTRL & _CMU_CTRL_HFCLKDIV_MASK)
                      >> _CMU_CTRL_HFCLKDIV_SHIFT));
    5b72:	f3c0 3082 	ubfx	r0, r0, #14, #3
uint32_t SystemCoreClockGet(void)
{
  uint32_t ret;

  ret = SystemHFClockGet();
  ret >>= (CMU->HFCORECLKDIV & _CMU_HFCORECLKDIV_HFCORECLKDIV_MASK) >>
    5b76:	f002 020f 	and.w	r2, r2, #15
        break;
      }
      break;
  }

  return ret / (1U + ((CMU->CTRL & _CMU_CTRL_HFCLKDIV_MASK)
    5b7a:	3001      	adds	r0, #1
    5b7c:	fbb3 f0f0 	udiv	r0, r3, r0
uint32_t SystemCoreClockGet(void)
{
  uint32_t ret;

  ret = SystemHFClockGet();
  ret >>= (CMU->HFCORECLKDIV & _CMU_HFCORECLKDIV_HFCORECLKDIV_MASK) >>
    5b80:	40d0      	lsrs	r0, r2
          _CMU_HFCORECLKDIV_HFCORECLKDIV_SHIFT;

  /* Keep CMSIS variable up-to-date just in case */
  SystemCoreClock = ret;
    5b82:	6008      	str	r0, [r1, #0]

  return ret;
}
    5b84:	4770      	bx	lr
  switch (CMU->STATUS & (CMU_STATUS_HFRCOSEL | CMU_STATUS_HFXOSEL |
                         CMU_STATUS_LFRCOSEL | CMU_STATUS_LFXOSEL))
  {
    case CMU_STATUS_LFXOSEL:
#if (EFM32_LFXO_FREQ > 0)
      ret = SystemLFXOClock;
    5b86:	4b15      	ldr	r3, [pc, #84]	; (5bdc <SystemCoreClockGet+0xb4>)
    5b88:	681b      	ldr	r3, [r3, #0]
    5b8a:	e7ee      	b.n	5b6a <SystemCoreClockGet+0x42>
      ret = 0;
#endif
      break;

    case CMU_STATUS_LFRCOSEL:
      ret = EFM32_LFRCO_FREQ;
    5b8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    5b90:	e7eb      	b.n	5b6a <SystemCoreClockGet+0x42>
      ret = 0;
#endif
      break;

    default: /* CMU_STATUS_HFRCOSEL */
      switch (CMU->HFRCOCTRL & _CMU_HFRCOCTRL_BAND_MASK)
    5b92:	b16b      	cbz	r3, 5bb0 <SystemCoreClockGet+0x88>
    5b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    5b98:	d1e3      	bne.n	5b62 <SystemCoreClockGet+0x3a>
#endif

/* Inline function to get the chip's Production Revision. */
__STATIC_INLINE uint8_t GetProdRev(void)
{
  return ((DEVINFO->PART & _DEVINFO_PART_PROD_REV_MASK)
    5b9a:	4b11      	ldr	r3, [pc, #68]	; (5be0 <SystemCoreClockGet+0xb8>)

      case CMU_HFRCOCTRL_BAND_7MHZ:
        if ( GetProdRev() >= 19 )
          ret = 6600000;
        else
          ret = 7000000;
    5b9c:	4a11      	ldr	r2, [pc, #68]	; (5be4 <SystemCoreClockGet+0xbc>)
#endif

/* Inline function to get the chip's Production Revision. */
__STATIC_INLINE uint8_t GetProdRev(void)
{
  return ((DEVINFO->PART & _DEVINFO_PART_PROD_REV_MASK)
    5b9e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c

      case CMU_HFRCOCTRL_BAND_7MHZ:
        if ( GetProdRev() >= 19 )
          ret = 6600000;
        else
          ret = 7000000;
    5ba0:	4b11      	ldr	r3, [pc, #68]	; (5be8 <SystemCoreClockGet+0xc0>)
    5ba2:	f1b0 5f98 	cmp.w	r0, #318767104	; 0x13000000
    5ba6:	bf28      	it	cs
    5ba8:	4613      	movcs	r3, r2
    5baa:	e7de      	b.n	5b6a <SystemCoreClockGet+0x42>
      case CMU_HFRCOCTRL_BAND_21MHZ:
        ret = 21000000;
        break;

      case CMU_HFRCOCTRL_BAND_14MHZ:
        ret = 14000000;
    5bac:	4b0f      	ldr	r3, [pc, #60]	; (5bec <SystemCoreClockGet+0xc4>)
    5bae:	e7dc      	b.n	5b6a <SystemCoreClockGet+0x42>
#endif

/* Inline function to get the chip's Production Revision. */
__STATIC_INLINE uint8_t GetProdRev(void)
{
  return ((DEVINFO->PART & _DEVINFO_PART_PROD_REV_MASK)
    5bb0:	4b0b      	ldr	r3, [pc, #44]	; (5be0 <SystemCoreClockGet+0xb8>)

      case CMU_HFRCOCTRL_BAND_1MHZ:
        if ( GetProdRev() >= 19 )
          ret = 1200000;
        else
          ret = 1000000;
    5bb2:	4a0f      	ldr	r2, [pc, #60]	; (5bf0 <SystemCoreClockGet+0xc8>)
#endif

/* Inline function to get the chip's Production Revision. */
__STATIC_INLINE uint8_t GetProdRev(void)
{
  return ((DEVINFO->PART & _DEVINFO_PART_PROD_REV_MASK)
    5bb4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c

      case CMU_HFRCOCTRL_BAND_1MHZ:
        if ( GetProdRev() >= 19 )
          ret = 1200000;
        else
          ret = 1000000;
    5bb6:	4b0f      	ldr	r3, [pc, #60]	; (5bf4 <SystemCoreClockGet+0xcc>)
    5bb8:	f1b0 5f98 	cmp.w	r0, #318767104	; 0x13000000
    5bbc:	bf28      	it	cs
    5bbe:	4613      	movcs	r3, r2
    5bc0:	e7d3      	b.n	5b6a <SystemCoreClockGet+0x42>

    default: /* CMU_STATUS_HFRCOSEL */
      switch (CMU->HFRCOCTRL & _CMU_HFRCOCTRL_BAND_MASK)
      {
      case CMU_HFRCOCTRL_BAND_28MHZ:
        ret = 28000000;
    5bc2:	4b0d      	ldr	r3, [pc, #52]	; (5bf8 <SystemCoreClockGet+0xd0>)
    5bc4:	e7d1      	b.n	5b6a <SystemCoreClockGet+0x42>
        break;

      case CMU_HFRCOCTRL_BAND_21MHZ:
        ret = 21000000;
    5bc6:	4b0d      	ldr	r3, [pc, #52]	; (5bfc <SystemCoreClockGet+0xd4>)
    5bc8:	e7cf      	b.n	5b6a <SystemCoreClockGet+0x42>
      case CMU_HFRCOCTRL_BAND_14MHZ:
        ret = 14000000;
        break;

      case CMU_HFRCOCTRL_BAND_11MHZ:
        ret = 11000000;
    5bca:	4b0d      	ldr	r3, [pc, #52]	; (5c00 <SystemCoreClockGet+0xd8>)
    5bcc:	e7cd      	b.n	5b6a <SystemCoreClockGet+0x42>
    5bce:	bf00      	nop
    5bd0:	400c8000 	.word	0x400c8000
    5bd4:	2000000c 	.word	0x2000000c
    5bd8:	20000010 	.word	0x20000010
    5bdc:	20000008 	.word	0x20000008
    5be0:	0fe081b0 	.word	0x0fe081b0
    5be4:	0064b540 	.word	0x0064b540
    5be8:	006acfc0 	.word	0x006acfc0
    5bec:	00d59f80 	.word	0x00d59f80
    5bf0:	00124f80 	.word	0x00124f80
    5bf4:	000f4240 	.word	0x000f4240
    5bf8:	01ab3f00 	.word	0x01ab3f00
    5bfc:	01406f40 	.word	0x01406f40
    5c00:	00a7d8c0 	.word	0x00a7d8c0

00005c04 <SystemMaxCoreClockGet>:
 ******************************************************************************/
uint32_t SystemMaxCoreClockGet(void)
{
  return (EFM32_HFRCO_MAX_FREQ > EFM32_HFXO_FREQ ? \
          EFM32_HFRCO_MAX_FREQ : EFM32_HFXO_FREQ);
}
    5c04:	4800      	ldr	r0, [pc, #0]	; (5c08 <SystemMaxCoreClockGet+0x4>)
    5c06:	4770      	bx	lr
    5c08:	02dc6c00 	.word	0x02dc6c00

00005c0c <SystemHFClockGet>:
 ******************************************************************************/
uint32_t SystemHFClockGet(void)
{
  uint32_t ret;

  switch (CMU->STATUS & (CMU_STATUS_HFRCOSEL | CMU_STATUS_HFXOSEL |
    5c0c:	4a27      	ldr	r2, [pc, #156]	; (5cac <SystemHFClockGet+0xa0>)
    5c0e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    5c10:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
    5c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    5c18:	d024      	beq.n	5c64 <SystemHFClockGet+0x58>
    5c1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    5c1e:	d01e      	beq.n	5c5e <SystemHFClockGet+0x52>
    5c20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    5c24:	d011      	beq.n	5c4a <SystemHFClockGet+0x3e>
      ret = 0;
#endif
      break;

    default: /* CMU_STATUS_HFRCOSEL */
      switch (CMU->HFRCOCTRL & _CMU_HFRCOCTRL_BAND_MASK)
    5c26:	68d3      	ldr	r3, [r2, #12]
    5c28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    5c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    5c30:	d039      	beq.n	5ca6 <SystemHFClockGet+0x9a>
    5c32:	d91a      	bls.n	5c6a <SystemHFClockGet+0x5e>
    5c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    5c38:	d033      	beq.n	5ca2 <SystemHFClockGet+0x96>
    5c3a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    5c3e:	d02e      	beq.n	5c9e <SystemHFClockGet+0x92>
    5c40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    5c44:	d01f      	beq.n	5c86 <SystemHFClockGet+0x7a>
        else
          ret = 1000000;
        break;

      default:
        ret = 0;
    5c46:	2000      	movs	r0, #0
        break;
    5c48:	e001      	b.n	5c4e <SystemHFClockGet+0x42>
      ret = EFM32_LFRCO_FREQ;
      break;

    case CMU_STATUS_HFXOSEL:
#if (EFM32_HFXO_FREQ > 0)
      ret = SystemHFXOClock;
    5c4a:	4b19      	ldr	r3, [pc, #100]	; (5cb0 <SystemHFClockGet+0xa4>)
    5c4c:	6818      	ldr	r0, [r3, #0]
        break;
      }
      break;
  }

  return ret / (1U + ((CMU->CTRL & _CMU_CTRL_HFCLKDIV_MASK)
    5c4e:	4b17      	ldr	r3, [pc, #92]	; (5cac <SystemHFClockGet+0xa0>)
    5c50:	681b      	ldr	r3, [r3, #0]
                      >> _CMU_CTRL_HFCLKDIV_SHIFT));
    5c52:	f3c3 3382 	ubfx	r3, r3, #14, #3
        break;
      }
      break;
  }

  return ret / (1U + ((CMU->CTRL & _CMU_CTRL_HFCLKDIV_MASK)
    5c56:	3301      	adds	r3, #1
                      >> _CMU_CTRL_HFCLKDIV_SHIFT));
}
    5c58:	fbb0 f0f3 	udiv	r0, r0, r3
    5c5c:	4770      	bx	lr
  switch (CMU->STATUS & (CMU_STATUS_HFRCOSEL | CMU_STATUS_HFXOSEL |
                         CMU_STATUS_LFRCOSEL | CMU_STATUS_LFXOSEL))
  {
    case CMU_STATUS_LFXOSEL:
#if (EFM32_LFXO_FREQ > 0)
      ret = SystemLFXOClock;
    5c5e:	4b15      	ldr	r3, [pc, #84]	; (5cb4 <SystemHFClockGet+0xa8>)
    5c60:	6818      	ldr	r0, [r3, #0]
#else
      /* We should not get here, since core should not be clocked. May */
      /* be caused by a misconfiguration though. */
      ret = 0;
#endif
      break;
    5c62:	e7f4      	b.n	5c4e <SystemHFClockGet+0x42>

    case CMU_STATUS_LFRCOSEL:
      ret = EFM32_LFRCO_FREQ;
    5c64:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    5c68:	e7f1      	b.n	5c4e <SystemHFClockGet+0x42>
      ret = 0;
#endif
      break;

    default: /* CMU_STATUS_HFRCOSEL */
      switch (CMU->HFRCOCTRL & _CMU_HFRCOCTRL_BAND_MASK)
    5c6a:	b173      	cbz	r3, 5c8a <SystemHFClockGet+0x7e>
    5c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    5c70:	d1e9      	bne.n	5c46 <SystemHFClockGet+0x3a>
#endif

/* Inline function to get the chip's Production Revision. */
__STATIC_INLINE uint8_t GetProdRev(void)
{
  return ((DEVINFO->PART & _DEVINFO_PART_PROD_REV_MASK)
    5c72:	4a11      	ldr	r2, [pc, #68]	; (5cb8 <SystemHFClockGet+0xac>)

      case CMU_HFRCOCTRL_BAND_7MHZ:
        if ( GetProdRev() >= 19 )
          ret = 6600000;
        else
          ret = 7000000;
    5c74:	4b11      	ldr	r3, [pc, #68]	; (5cbc <SystemHFClockGet+0xb0>)
#endif

/* Inline function to get the chip's Production Revision. */
__STATIC_INLINE uint8_t GetProdRev(void)
{
  return ((DEVINFO->PART & _DEVINFO_PART_PROD_REV_MASK)
    5c76:	6cd0      	ldr	r0, [r2, #76]	; 0x4c

      case CMU_HFRCOCTRL_BAND_7MHZ:
        if ( GetProdRev() >= 19 )
          ret = 6600000;
        else
          ret = 7000000;
    5c78:	4a11      	ldr	r2, [pc, #68]	; (5cc0 <SystemHFClockGet+0xb4>)
    5c7a:	f1b0 5f98 	cmp.w	r0, #318767104	; 0x13000000
    5c7e:	bf2c      	ite	cs
    5c80:	4618      	movcs	r0, r3
    5c82:	4610      	movcc	r0, r2
    5c84:	e7e3      	b.n	5c4e <SystemHFClockGet+0x42>
      case CMU_HFRCOCTRL_BAND_21MHZ:
        ret = 21000000;
        break;

      case CMU_HFRCOCTRL_BAND_14MHZ:
        ret = 14000000;
    5c86:	480f      	ldr	r0, [pc, #60]	; (5cc4 <SystemHFClockGet+0xb8>)
        break;
    5c88:	e7e1      	b.n	5c4e <SystemHFClockGet+0x42>
#endif

/* Inline function to get the chip's Production Revision. */
__STATIC_INLINE uint8_t GetProdRev(void)
{
  return ((DEVINFO->PART & _DEVINFO_PART_PROD_REV_MASK)
    5c8a:	4a0b      	ldr	r2, [pc, #44]	; (5cb8 <SystemHFClockGet+0xac>)

      case CMU_HFRCOCTRL_BAND_1MHZ:
        if ( GetProdRev() >= 19 )
          ret = 1200000;
        else
          ret = 1000000;
    5c8c:	4b0e      	ldr	r3, [pc, #56]	; (5cc8 <SystemHFClockGet+0xbc>)
#endif

/* Inline function to get the chip's Production Revision. */
__STATIC_INLINE uint8_t GetProdRev(void)
{
  return ((DEVINFO->PART & _DEVINFO_PART_PROD_REV_MASK)
    5c8e:	6cd0      	ldr	r0, [r2, #76]	; 0x4c

      case CMU_HFRCOCTRL_BAND_1MHZ:
        if ( GetProdRev() >= 19 )
          ret = 1200000;
        else
          ret = 1000000;
    5c90:	4a0e      	ldr	r2, [pc, #56]	; (5ccc <SystemHFClockGet+0xc0>)
    5c92:	f1b0 5f98 	cmp.w	r0, #318767104	; 0x13000000
    5c96:	bf2c      	ite	cs
    5c98:	4618      	movcs	r0, r3
    5c9a:	4610      	movcc	r0, r2
    5c9c:	e7d7      	b.n	5c4e <SystemHFClockGet+0x42>

    default: /* CMU_STATUS_HFRCOSEL */
      switch (CMU->HFRCOCTRL & _CMU_HFRCOCTRL_BAND_MASK)
      {
      case CMU_HFRCOCTRL_BAND_28MHZ:
        ret = 28000000;
    5c9e:	480c      	ldr	r0, [pc, #48]	; (5cd0 <SystemHFClockGet+0xc4>)
    5ca0:	e7d5      	b.n	5c4e <SystemHFClockGet+0x42>
        break;

      case CMU_HFRCOCTRL_BAND_21MHZ:
        ret = 21000000;
    5ca2:	480c      	ldr	r0, [pc, #48]	; (5cd4 <SystemHFClockGet+0xc8>)
    5ca4:	e7d3      	b.n	5c4e <SystemHFClockGet+0x42>
      case CMU_HFRCOCTRL_BAND_14MHZ:
        ret = 14000000;
        break;

      case CMU_HFRCOCTRL_BAND_11MHZ:
        ret = 11000000;
    5ca6:	480c      	ldr	r0, [pc, #48]	; (5cd8 <SystemHFClockGet+0xcc>)
        break;
    5ca8:	e7d1      	b.n	5c4e <SystemHFClockGet+0x42>
    5caa:	bf00      	nop
    5cac:	400c8000 	.word	0x400c8000
    5cb0:	2000000c 	.word	0x2000000c
    5cb4:	20000008 	.word	0x20000008
    5cb8:	0fe081b0 	.word	0x0fe081b0
    5cbc:	0064b540 	.word	0x0064b540
    5cc0:	006acfc0 	.word	0x006acfc0
    5cc4:	00d59f80 	.word	0x00d59f80
    5cc8:	00124f80 	.word	0x00124f80
    5ccc:	000f4240 	.word	0x000f4240
    5cd0:	01ab3f00 	.word	0x01ab3f00
    5cd4:	01406f40 	.word	0x01406f40
    5cd8:	00a7d8c0 	.word	0x00a7d8c0

00005cdc <SystemHFXOClockGet>:
 *****************************************************************************/
uint32_t SystemHFXOClockGet(void)
{
  /* External crystal oscillator present? */
#if (EFM32_HFXO_FREQ > 0)
  return SystemHFXOClock;
    5cdc:	4b01      	ldr	r3, [pc, #4]	; (5ce4 <SystemHFXOClockGet+0x8>)
#else
  return 0;
#endif
}
    5cde:	6818      	ldr	r0, [r3, #0]
    5ce0:	4770      	bx	lr
    5ce2:	bf00      	nop
    5ce4:	2000000c 	.word	0x2000000c

00005ce8 <SystemInit>:
 *****************************************************************************/
void SystemInit(void)
{
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  /* Set floating point coprosessor access mode. */
  SCB->CPACR |= ((3UL << 10*2) |                    /* set CP10 Full Access */
    5ce8:	4a03      	ldr	r2, [pc, #12]	; (5cf8 <SystemInit+0x10>)
    5cea:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    5cee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    5cf2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    5cf6:	4770      	bx	lr
    5cf8:	e000ed00 	.word	0xe000ed00

00005cfc <SystemLFRCOClockGet>:
{
  /* Currently we assume that this frequency is properly tuned during */
  /* manufacturing and is not changed after reset. If future requirements */
  /* for re-tuning by user, we can add support for that. */
  return EFM32_LFRCO_FREQ;
}
    5cfc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    5d00:	4770      	bx	lr
    5d02:	bf00      	nop

00005d04 <SystemULFRCOClockGet>:
 *****************************************************************************/
uint32_t SystemULFRCOClockGet(void)
{
  /* The ULFRCO frequency is not tuned, and can be very inaccurate */
  return EFM32_ULFRCO_FREQ;
}
    5d04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    5d08:	4770      	bx	lr
    5d0a:	bf00      	nop

00005d0c <SystemLFXOClockGet>:
 *****************************************************************************/
uint32_t SystemLFXOClockGet(void)
{
  /* External crystal oscillator present? */
#if (EFM32_LFXO_FREQ > 0)
  return SystemLFXOClock;
    5d0c:	4b01      	ldr	r3, [pc, #4]	; (5d14 <SystemLFXOClockGet+0x8>)
#else
  return 0;
#endif
}
    5d0e:	6818      	ldr	r0, [r3, #0]
    5d10:	4770      	bx	lr
    5d12:	bf00      	nop
    5d14:	20000008 	.word	0x20000008

00005d18 <move_window>:
static
FRESULT move_window (
    FATFS *fs,      /* File system object */
    DWORD sector    /* Sector number to make appearance in the fs->win[] */
)                   /* Move to zero only writes back dirty window */
{
    5d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    DWORD wsect;


    wsect = fs->winsect;
    5d1c:	6b06      	ldr	r6, [r0, #48]	; 0x30
    if (wsect != sector) {  /* Changed current window */
    5d1e:	428e      	cmp	r6, r1
    5d20:	d004      	beq.n	5d2c <move_window+0x14>
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
    5d22:	7903      	ldrb	r3, [r0, #4]
    5d24:	460f      	mov	r7, r1
    5d26:	4604      	mov	r4, r0
    5d28:	b973      	cbnz	r3, 5d48 <move_window+0x30>
                    disk_write(fs->drv, fs->win, wsect, 1);
                }
            }
        }
#endif
        if (sector) {
    5d2a:	b917      	cbnz	r7, 5d32 <move_window+0x1a>
                return FR_DISK_ERR;
            fs->winsect = sector;
        }
    }

    return FR_OK;
    5d2c:	2000      	movs	r0, #0
    5d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                }
            }
        }
#endif
        if (sector) {
            if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    5d32:	7860      	ldrb	r0, [r4, #1]
    5d34:	f104 0134 	add.w	r1, r4, #52	; 0x34
    5d38:	463a      	mov	r2, r7
    5d3a:	2301      	movs	r3, #1
    5d3c:	f7fd fa2e 	bl	319c <disk_read>
    5d40:	bb20      	cbnz	r0, 5d8c <move_window+0x74>
                return FR_DISK_ERR;
            fs->winsect = sector;
    5d42:	6327      	str	r7, [r4, #48]	; 0x30
        }
    }

    return FR_OK;
}
    5d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    5d48:	f100 0834 	add.w	r8, r0, #52	; 0x34
    5d4c:	4641      	mov	r1, r8
    5d4e:	7840      	ldrb	r0, [r0, #1]
    5d50:	4632      	mov	r2, r6
    5d52:	2301      	movs	r3, #1
    5d54:	f7fd fa70 	bl	3238 <disk_write>
    5d58:	b9c0      	cbnz	r0, 5d8c <move_window+0x74>
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    5d5a:	6a23      	ldr	r3, [r4, #32]
    5d5c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
    5d5e:	7120      	strb	r0, [r4, #4]
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    5d60:	441a      	add	r2, r3
    5d62:	4296      	cmp	r6, r2
    5d64:	d2e1      	bcs.n	5d2a <move_window+0x12>
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    5d66:	78e5      	ldrb	r5, [r4, #3]
    5d68:	2d01      	cmp	r5, #1
    5d6a:	d801      	bhi.n	5d70 <move_window+0x58>
    5d6c:	e7dd      	b.n	5d2a <move_window+0x12>
    5d6e:	6a23      	ldr	r3, [r4, #32]
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    5d70:	7860      	ldrb	r0, [r4, #1]
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
                    wsect += fs->fsize;
    5d72:	441e      	add	r6, r3
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    5d74:	3d01      	subs	r5, #1
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    5d76:	4632      	mov	r2, r6
    5d78:	4641      	mov	r1, r8
    5d7a:	2301      	movs	r3, #1
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    5d7c:	b2ed      	uxtb	r5, r5
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    5d7e:	f7fd fa5b 	bl	3238 <disk_write>
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    5d82:	2d01      	cmp	r5, #1
    5d84:	d1f3      	bne.n	5d6e <move_window+0x56>
                    disk_write(fs->drv, fs->win, wsect, 1);
                }
            }
        }
#endif
        if (sector) {
    5d86:	2f00      	cmp	r7, #0
    5d88:	d0d0      	beq.n	5d2c <move_window+0x14>
    5d8a:	e7d2      	b.n	5d32 <move_window+0x1a>
    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
    5d8c:	2001      	movs	r0, #1
    5d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d92:	bf00      	nop

00005d94 <sync>:
#if !_FS_READONLY
static
FRESULT sync (  /* FR_OK: successful, FR_DISK_ERR: failed */
    FATFS *fs   /* File system object */
)
{
    5d94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
)                   /* Move to zero only writes back dirty window */
{
    DWORD wsect;


    wsect = fs->winsect;
    5d98:	6b05      	ldr	r5, [r0, #48]	; 0x30
#if !_FS_READONLY
static
FRESULT sync (  /* FR_OK: successful, FR_DISK_ERR: failed */
    FATFS *fs   /* File system object */
)
{
    5d9a:	4604      	mov	r4, r0
{
    DWORD wsect;


    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
    5d9c:	b10d      	cbz	r5, 5da2 <sync+0xe>
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
    5d9e:	7903      	ldrb	r3, [r0, #4]
    5da0:	b963      	cbnz	r3, 5dbc <sync+0x28>


    res = move_window(fs, 0);
    if (res == FR_OK) {
        /* Update FSInfo sector if needed */
        if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    5da2:	7823      	ldrb	r3, [r4, #0]
    5da4:	2b03      	cmp	r3, #3
    5da6:	d02c      	beq.n	5e02 <sync+0x6e>
            /* Write it into the FSInfo sector */
            disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
            fs->fsi_flag = 0;
        }
        /* Make sure that no pending write process in the physical drive */
        if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    5da8:	2100      	movs	r1, #0
    5daa:	7860      	ldrb	r0, [r4, #1]
    5dac:	460a      	mov	r2, r1
    5dae:	f7fd faa5 	bl	32fc <disk_ioctl>
    5db2:	3000      	adds	r0, #0
    5db4:	bf18      	it	ne
    5db6:	2001      	movne	r0, #1
    5db8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    5dbc:	f100 0734 	add.w	r7, r0, #52	; 0x34
    5dc0:	4639      	mov	r1, r7
    5dc2:	7840      	ldrb	r0, [r0, #1]
    5dc4:	462a      	mov	r2, r5
    5dc6:	2301      	movs	r3, #1
    5dc8:	f7fd fa36 	bl	3238 <disk_write>
    5dcc:	b9b0      	cbnz	r0, 5dfc <sync+0x68>
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    5dce:	6a23      	ldr	r3, [r4, #32]
    5dd0:	6a62      	ldr	r2, [r4, #36]	; 0x24
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
    5dd2:	7120      	strb	r0, [r4, #4]
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    5dd4:	441a      	add	r2, r3
    5dd6:	4295      	cmp	r5, r2
    5dd8:	d2e3      	bcs.n	5da2 <sync+0xe>
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    5dda:	78e6      	ldrb	r6, [r4, #3]
    5ddc:	2e01      	cmp	r6, #1
    5dde:	d801      	bhi.n	5de4 <sync+0x50>
    5de0:	e7df      	b.n	5da2 <sync+0xe>
    5de2:	6a23      	ldr	r3, [r4, #32]
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    5de4:	7860      	ldrb	r0, [r4, #1]
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
                    wsect += fs->fsize;
    5de6:	441d      	add	r5, r3
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    5de8:	3e01      	subs	r6, #1
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    5dea:	462a      	mov	r2, r5
    5dec:	4639      	mov	r1, r7
    5dee:	2301      	movs	r3, #1
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    5df0:	b2f6      	uxtb	r6, r6
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    5df2:	f7fd fa21 	bl	3238 <disk_write>
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    5df6:	2e01      	cmp	r6, #1
    5df8:	d1f3      	bne.n	5de2 <sync+0x4e>
    5dfa:	e7d2      	b.n	5da2 <sync+0xe>

    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    5dfc:	2001      	movs	r0, #1
    5dfe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}


    res = move_window(fs, 0);
    if (res == FR_OK) {
        /* Update FSInfo sector if needed */
        if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    5e02:	7963      	ldrb	r3, [r4, #5]
    5e04:	2b00      	cmp	r3, #0
    5e06:	d0cf      	beq.n	5da8 <sync+0x14>
            fs->winsect = 0;
    5e08:	2600      	movs	r6, #0
            /* Create FSInfo structure */
            mem_set(fs->win, 0, 512);
    5e0a:	f104 0534 	add.w	r5, r4, #52	; 0x34
    5e0e:	4631      	mov	r1, r6
    5e10:	4628      	mov	r0, r5
    5e12:	f44f 7200 	mov.w	r2, #512	; 0x200

    res = move_window(fs, 0);
    if (res == FR_OK) {
        /* Update FSInfo sector if needed */
        if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
            fs->winsect = 0;
    5e16:	6326      	str	r6, [r4, #48]	; 0x30
    5e18:	f006 f817 	bl	be4a <memset>
            /* Create FSInfo structure */
            mem_set(fs->win, 0, 512);
            ST_WORD(fs->win+BS_55AA, 0xAA55);
            ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
            ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
            ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    5e1c:	6923      	ldr	r3, [r4, #16]
            ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    5e1e:	68e2      	ldr	r2, [r4, #12]
            /* Create FSInfo structure */
            mem_set(fs->win, 0, 512);
            ST_WORD(fs->win+BS_55AA, 0xAA55);
            ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
            ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
            ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    5e20:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
    5e24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
    5e28:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    5e2c:	0e1b      	lsrs	r3, r3, #24
            ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    5e2e:	ea4f 6c12 	mov.w	ip, r2, lsr #24
        if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
            fs->winsect = 0;
            /* Create FSInfo structure */
            mem_set(fs->win, 0, 512);
            ST_WORD(fs->win+BS_55AA, 0xAA55);
            ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    5e32:	2061      	movs	r0, #97	; 0x61
            ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
            ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
            ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    5e34:	f3c2 2907 	ubfx	r9, r2, #8, #8
    5e38:	ea4f 4812 	mov.w	r8, r2, lsr #16
        /* Update FSInfo sector if needed */
        if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
            fs->winsect = 0;
            /* Create FSInfo structure */
            mem_set(fs->win, 0, 512);
            ST_WORD(fs->win+BS_55AA, 0xAA55);
    5e3c:	f04f 0e55 	mov.w	lr, #85	; 0x55
            ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    5e40:	2752      	movs	r7, #82	; 0x52
            ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
            ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
            ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
            /* Write it into the FSInfo sector */
            disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    5e42:	4629      	mov	r1, r5
            /* Create FSInfo structure */
            mem_set(fs->win, 0, 512);
            ST_WORD(fs->win+BS_55AA, 0xAA55);
            ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
            ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
            ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    5e44:	f884 a21e 	strb.w	sl, [r4, #542]	; 0x21e
        if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
            fs->winsect = 0;
            /* Create FSInfo structure */
            mem_set(fs->win, 0, 512);
            ST_WORD(fs->win+BS_55AA, 0xAA55);
            ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    5e48:	2541      	movs	r5, #65	; 0x41
            ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    5e4a:	f04f 0a72 	mov.w	sl, #114	; 0x72
            ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    5e4e:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
        /* Update FSInfo sector if needed */
        if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
            fs->winsect = 0;
            /* Create FSInfo structure */
            mem_set(fs->win, 0, 512);
            ST_WORD(fs->win+BS_55AA, 0xAA55);
    5e52:	f06f 0355 	mvn.w	r3, #85	; 0x55
            ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
            ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
            ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
            ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    5e56:	f884 2220 	strb.w	r2, [r4, #544]	; 0x220
        /* Update FSInfo sector if needed */
        if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
            fs->winsect = 0;
            /* Create FSInfo structure */
            mem_set(fs->win, 0, 512);
            ST_WORD(fs->win+BS_55AA, 0xAA55);
    5e5a:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
            ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    5e5e:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
            ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    5e62:	f884 021b 	strb.w	r0, [r4, #539]	; 0x21b
            ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    5e66:	f884 b21d 	strb.w	fp, [r4, #541]	; 0x21d
            ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    5e6a:	f884 9221 	strb.w	r9, [r4, #545]	; 0x221
    5e6e:	f884 8222 	strb.w	r8, [r4, #546]	; 0x222
    5e72:	f884 c223 	strb.w	ip, [r4, #547]	; 0x223
        /* Update FSInfo sector if needed */
        if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
            fs->winsect = 0;
            /* Create FSInfo structure */
            mem_set(fs->win, 0, 512);
            ST_WORD(fs->win+BS_55AA, 0xAA55);
    5e76:	f884 e232 	strb.w	lr, [r4, #562]	; 0x232
            ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    5e7a:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
    5e7e:	f884 7035 	strb.w	r7, [r4, #53]	; 0x35
    5e82:	f884 5037 	strb.w	r5, [r4, #55]	; 0x37
            ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    5e86:	f884 521a 	strb.w	r5, [r4, #538]	; 0x21a
    5e8a:	f884 a218 	strb.w	sl, [r4, #536]	; 0x218
    5e8e:	f884 a219 	strb.w	sl, [r4, #537]	; 0x219
            ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
            ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
            /* Write it into the FSInfo sector */
            disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    5e92:	7860      	ldrb	r0, [r4, #1]
    5e94:	6962      	ldr	r2, [r4, #20]
    5e96:	2301      	movs	r3, #1
    5e98:	f7fd f9ce 	bl	3238 <disk_write>
            fs->fsi_flag = 0;
    5e9c:	7166      	strb	r6, [r4, #5]
    5e9e:	e783      	b.n	5da8 <sync+0x14>

00005ea0 <put_fat.part.4>:
/*-----------------------------------------------------------------------*/
/* FAT access - Change value of a FAT entry                              */
/*-----------------------------------------------------------------------*/
#if !_FS_READONLY

FRESULT put_fat (
    5ea0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

    if (clst < 2 || clst >= fs->n_fatent) { /* Check range */
        res = FR_INT_ERR;

    } else {
        switch (fs->fs_type) {
    5ea4:	7803      	ldrb	r3, [r0, #0]
    5ea6:	2b02      	cmp	r3, #2
/*-----------------------------------------------------------------------*/
/* FAT access - Change value of a FAT entry                              */
/*-----------------------------------------------------------------------*/
#if !_FS_READONLY

FRESULT put_fat (
    5ea8:	4604      	mov	r4, r0
    5eaa:	460d      	mov	r5, r1
    5eac:	4617      	mov	r7, r2

    if (clst < 2 || clst >= fs->n_fatent) { /* Check range */
        res = FR_INT_ERR;

    } else {
        switch (fs->fs_type) {
    5eae:	f000 80a1 	beq.w	5ff4 <put_fat.part.4+0x154>
    5eb2:	2b03      	cmp	r3, #3
    5eb4:	d06d      	beq.n	5f92 <put_fat.part.4+0xf2>
    5eb6:	2b01      	cmp	r3, #1
    5eb8:	d004      	beq.n	5ec4 <put_fat.part.4+0x24>
            val |= LD_DWORD(p) & 0xF0000000;
            ST_DWORD(p, val);
            break;

        default :
            res = FR_INT_ERR;
    5eba:	2002      	movs	r0, #2
        }
        fs->wflag = 1;
    5ebc:	2301      	movs	r3, #1
    5ebe:	7123      	strb	r3, [r4, #4]
    }

    return res;
}
    5ec0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        res = FR_INT_ERR;

    } else {
        switch (fs->fs_type) {
        case FS_FAT12 :
            bc = clst; bc += bc / 2;
    5ec4:	b28e      	uxth	r6, r1
    5ec6:	eb06 0656 	add.w	r6, r6, r6, lsr #1
            res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    5eca:	6a42      	ldr	r2, [r0, #36]	; 0x24
)                   /* Move to zero only writes back dirty window */
{
    DWORD wsect;


    wsect = fs->winsect;
    5ecc:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
        res = FR_INT_ERR;

    } else {
        switch (fs->fs_type) {
        case FS_FAT12 :
            bc = clst; bc += bc / 2;
    5ed0:	b2b6      	uxth	r6, r6
            res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    5ed2:	eb02 2856 	add.w	r8, r2, r6, lsr #9
{
    DWORD wsect;


    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
    5ed6:	45c8      	cmp	r8, r9
    5ed8:	d00a      	beq.n	5ef0 <put_fat.part.4+0x50>
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
    5eda:	7902      	ldrb	r2, [r0, #4]
    5edc:	2a00      	cmp	r2, #0
    5ede:	f040 8104 	bne.w	60ea <put_fat.part.4+0x24a>
                    disk_write(fs->drv, fs->win, wsect, 1);
                }
            }
        }
#endif
        if (sector) {
    5ee2:	f1b8 0f00 	cmp.w	r8, #0
    5ee6:	f040 8125 	bne.w	6134 <put_fat.part.4+0x294>
    5eea:	6a62      	ldr	r2, [r4, #36]	; 0x24
    5eec:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
        case FS_FAT12 :
            bc = clst; bc += bc / 2;
            res = move_window(fs, fs->fatbase + (bc / SS(fs)));
            if (res != FR_OK) break;
            p = &fs->win[bc % SS(fs)];
            *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    5ef0:	f015 0501 	ands.w	r5, r5, #1
        switch (fs->fs_type) {
        case FS_FAT12 :
            bc = clst; bc += bc / 2;
            res = move_window(fs, fs->fatbase + (bc / SS(fs)));
            if (res != FR_OK) break;
            p = &fs->win[bc % SS(fs)];
    5ef4:	f3c6 0308 	ubfx	r3, r6, #0, #9
            *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    5ef8:	f040 80a1 	bne.w	603e <put_fat.part.4+0x19e>
    5efc:	18e1      	adds	r1, r4, r3
    5efe:	b2f8      	uxtb	r0, r7
            bc++;
    5f00:	3601      	adds	r6, #1
    5f02:	b2b6      	uxth	r6, r6
            fs->wflag = 1;
            res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    5f04:	eb02 2956 	add.w	r9, r2, r6, lsr #9
            res = move_window(fs, fs->fatbase + (bc / SS(fs)));
            if (res != FR_OK) break;
            p = &fs->win[bc % SS(fs)];
            *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
            bc++;
            fs->wflag = 1;
    5f08:	2301      	movs	r3, #1
{
    DWORD wsect;


    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
    5f0a:	45c1      	cmp	r9, r8
        case FS_FAT12 :
            bc = clst; bc += bc / 2;
            res = move_window(fs, fs->fatbase + (bc / SS(fs)));
            if (res != FR_OK) break;
            p = &fs->win[bc % SS(fs)];
            *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    5f0c:	f881 0034 	strb.w	r0, [r1, #52]	; 0x34
            bc++;
            fs->wflag = 1;
    5f10:	7123      	strb	r3, [r4, #4]
{
    DWORD wsect;


    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
    5f12:	d032      	beq.n	5f7a <put_fat.part.4+0xda>
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    5f14:	f104 0b34 	add.w	fp, r4, #52	; 0x34
    5f18:	4659      	mov	r1, fp
    5f1a:	7860      	ldrb	r0, [r4, #1]
    5f1c:	4642      	mov	r2, r8
    5f1e:	f7fd f98b 	bl	3238 <disk_write>
    5f22:	2800      	cmp	r0, #0
    5f24:	f040 810e 	bne.w	6144 <put_fat.part.4+0x2a4>
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    5f28:	6a23      	ldr	r3, [r4, #32]
    5f2a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
    5f2c:	7120      	strb	r0, [r4, #4]
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    5f2e:	441a      	add	r2, r3
    5f30:	4542      	cmp	r2, r8
    5f32:	d914      	bls.n	5f5e <put_fat.part.4+0xbe>
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    5f34:	f894 a003 	ldrb.w	sl, [r4, #3]
    5f38:	f1ba 0f01 	cmp.w	sl, #1
    5f3c:	d801      	bhi.n	5f42 <put_fat.part.4+0xa2>
    5f3e:	e00e      	b.n	5f5e <put_fat.part.4+0xbe>
    5f40:	6a23      	ldr	r3, [r4, #32]
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    5f42:	7860      	ldrb	r0, [r4, #1]
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
                    wsect += fs->fsize;
    5f44:	4498      	add	r8, r3
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    5f46:	f10a 3aff 	add.w	sl, sl, #4294967295
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    5f4a:	4642      	mov	r2, r8
    5f4c:	4659      	mov	r1, fp
    5f4e:	2301      	movs	r3, #1
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    5f50:	fa5f fa8a 	uxtb.w	sl, sl
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    5f54:	f7fd f970 	bl	3238 <disk_write>
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    5f58:	f1ba 0f01 	cmp.w	sl, #1
    5f5c:	d1f0      	bne.n	5f40 <put_fat.part.4+0xa0>
                    disk_write(fs->drv, fs->win, wsect, 1);
                }
            }
        }
#endif
        if (sector) {
    5f5e:	f1b9 0f00 	cmp.w	r9, #0
    5f62:	d00a      	beq.n	5f7a <put_fat.part.4+0xda>
            if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    5f64:	4659      	mov	r1, fp
    5f66:	7860      	ldrb	r0, [r4, #1]
    5f68:	464a      	mov	r2, r9
    5f6a:	2301      	movs	r3, #1
    5f6c:	f7fd f916 	bl	319c <disk_read>
    5f70:	2800      	cmp	r0, #0
    5f72:	f040 80e7 	bne.w	6144 <put_fat.part.4+0x2a4>
                return FR_DISK_ERR;
            fs->winsect = sector;
    5f76:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
            *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
            bc++;
            fs->wflag = 1;
            res = move_window(fs, fs->fatbase + (bc / SS(fs)));
            if (res != FR_OK) break;
            p = &fs->win[bc % SS(fs)];
    5f7a:	f3c6 0608 	ubfx	r6, r6, #0, #9
            *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    5f7e:	2d00      	cmp	r5, #0
    5f80:	f000 80e9 	beq.w	6156 <put_fat.part.4+0x2b6>
    5f84:	f3c7 1707 	ubfx	r7, r7, #4, #8
    5f88:	4426      	add	r6, r4
    5f8a:	f886 7034 	strb.w	r7, [r6, #52]	; 0x34
    5f8e:	2000      	movs	r0, #0
    5f90:	e794      	b.n	5ebc <put_fat.part.4+0x1c>
            p = &fs->win[clst * 2 % SS(fs)];
            ST_WORD(p, (WORD)val);
            break;

        case FS_FAT32 :
            res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    5f92:	6a46      	ldr	r6, [r0, #36]	; 0x24
)                   /* Move to zero only writes back dirty window */
{
    DWORD wsect;


    wsect = fs->winsect;
    5f94:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
            p = &fs->win[clst * 2 % SS(fs)];
            ST_WORD(p, (WORD)val);
            break;

        case FS_FAT32 :
            res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    5f98:	eb06 16d1 	add.w	r6, r6, r1, lsr #7
{
    DWORD wsect;


    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
    5f9c:	454e      	cmp	r6, r9
    5f9e:	d00e      	beq.n	5fbe <put_fat.part.4+0x11e>
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
    5fa0:	7903      	ldrb	r3, [r0, #4]
    5fa2:	2b00      	cmp	r3, #0
    5fa4:	d155      	bne.n	6052 <put_fat.part.4+0x1b2>
                    disk_write(fs->drv, fs->win, wsect, 1);
                }
            }
        }
#endif
        if (sector) {
    5fa6:	b156      	cbz	r6, 5fbe <put_fat.part.4+0x11e>
            if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    5fa8:	7860      	ldrb	r0, [r4, #1]
    5faa:	f104 0134 	add.w	r1, r4, #52	; 0x34
    5fae:	4632      	mov	r2, r6
    5fb0:	2301      	movs	r3, #1
    5fb2:	f7fd f8f3 	bl	319c <disk_read>
    5fb6:	2800      	cmp	r0, #0
    5fb8:	f040 80c4 	bne.w	6144 <put_fat.part.4+0x2a4>
                return FR_DISK_ERR;
            fs->winsect = sector;
    5fbc:	6326      	str	r6, [r4, #48]	; 0x30
            break;

        case FS_FAT32 :
            res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
            if (res != FR_OK) break;
            p = &fs->win[clst * 4 % SS(fs)];
    5fbe:	00ad      	lsls	r5, r5, #2
    5fc0:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
    5fc4:	1963      	adds	r3, r4, r5
            val |= LD_DWORD(p) & 0xF0000000;
            ST_DWORD(p, val);
    5fc6:	2000      	movs	r0, #0

        case FS_FAT32 :
            res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
            if (res != FR_OK) break;
            p = &fs->win[clst * 4 % SS(fs)];
            val |= LD_DWORD(p) & 0xF0000000;
    5fc8:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
    5fcc:	0612      	lsls	r2, r2, #24
    5fce:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    5fd2:	4317      	orrs	r7, r2
            ST_DWORD(p, val);
    5fd4:	f3c7 2607 	ubfx	r6, r7, #8, #8
    5fd8:	0c39      	lsrs	r1, r7, #16
    5fda:	0e3a      	lsrs	r2, r7, #24
    5fdc:	f883 7034 	strb.w	r7, [r3, #52]	; 0x34
    5fe0:	f883 6035 	strb.w	r6, [r3, #53]	; 0x35
    5fe4:	f883 1036 	strb.w	r1, [r3, #54]	; 0x36
    5fe8:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
            break;

        default :
            res = FR_INT_ERR;
        }
        fs->wflag = 1;
    5fec:	2301      	movs	r3, #1
    5fee:	7123      	strb	r3, [r4, #4]
    }

    return res;
}
    5ff0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            p = &fs->win[bc % SS(fs)];
            *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
            break;

        case FS_FAT16 :
            res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    5ff4:	6a46      	ldr	r6, [r0, #36]	; 0x24
)                   /* Move to zero only writes back dirty window */
{
    DWORD wsect;


    wsect = fs->winsect;
    5ff6:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
            p = &fs->win[bc % SS(fs)];
            *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
            break;

        case FS_FAT16 :
            res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    5ffa:	eb06 2611 	add.w	r6, r6, r1, lsr #8
{
    DWORD wsect;


    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
    5ffe:	454e      	cmp	r6, r9
    6000:	d00e      	beq.n	6020 <put_fat.part.4+0x180>
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
    6002:	7903      	ldrb	r3, [r0, #4]
    6004:	2b00      	cmp	r3, #0
    6006:	d14a      	bne.n	609e <put_fat.part.4+0x1fe>
                    disk_write(fs->drv, fs->win, wsect, 1);
                }
            }
        }
#endif
        if (sector) {
    6008:	b156      	cbz	r6, 6020 <put_fat.part.4+0x180>
            if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    600a:	7860      	ldrb	r0, [r4, #1]
    600c:	f104 0134 	add.w	r1, r4, #52	; 0x34
    6010:	4632      	mov	r2, r6
    6012:	2301      	movs	r3, #1
    6014:	f7fd f8c2 	bl	319c <disk_read>
    6018:	2800      	cmp	r0, #0
    601a:	f040 8093 	bne.w	6144 <put_fat.part.4+0x2a4>
                return FR_DISK_ERR;
            fs->winsect = sector;
    601e:	6326      	str	r6, [r4, #48]	; 0x30
            break;

        case FS_FAT16 :
            res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
            if (res != FR_OK) break;
            p = &fs->win[clst * 2 % SS(fs)];
    6020:	006d      	lsls	r5, r5, #1
    6022:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
            ST_WORD(p, (WORD)val);
    6026:	1962      	adds	r2, r4, r5
    6028:	f3c7 2307 	ubfx	r3, r7, #8, #8
    602c:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
            break;

        default :
            res = FR_INT_ERR;
        }
        fs->wflag = 1;
    6030:	2301      	movs	r3, #1

        case FS_FAT16 :
            res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
            if (res != FR_OK) break;
            p = &fs->win[clst * 2 % SS(fs)];
            ST_WORD(p, (WORD)val);
    6032:	f882 7034 	strb.w	r7, [r2, #52]	; 0x34
            break;

        default :
            res = FR_INT_ERR;
        }
        fs->wflag = 1;
    6036:	7123      	strb	r3, [r4, #4]

        case FS_FAT16 :
            res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
            if (res != FR_OK) break;
            p = &fs->win[clst * 2 % SS(fs)];
            ST_WORD(p, (WORD)val);
    6038:	2000      	movs	r0, #0
        }
        fs->wflag = 1;
    }

    return res;
}
    603a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        case FS_FAT12 :
            bc = clst; bc += bc / 2;
            res = move_window(fs, fs->fatbase + (bc / SS(fs)));
            if (res != FR_OK) break;
            p = &fs->win[bc % SS(fs)];
            *p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    603e:	18e1      	adds	r1, r4, r3
    6040:	b2f8      	uxtb	r0, r7
    6042:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
    6046:	f003 030f 	and.w	r3, r3, #15
    604a:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
    604e:	b2c0      	uxtb	r0, r0
    6050:	e756      	b.n	5f00 <put_fat.part.4+0x60>

    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    6052:	f100 0a34 	add.w	sl, r0, #52	; 0x34
    6056:	4651      	mov	r1, sl
    6058:	7840      	ldrb	r0, [r0, #1]
    605a:	464a      	mov	r2, r9
    605c:	2301      	movs	r3, #1
    605e:	f7fd f8eb 	bl	3238 <disk_write>
    6062:	2800      	cmp	r0, #0
    6064:	d16e      	bne.n	6144 <put_fat.part.4+0x2a4>
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    6066:	6a23      	ldr	r3, [r4, #32]
    6068:	6a62      	ldr	r2, [r4, #36]	; 0x24
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
    606a:	7120      	strb	r0, [r4, #4]
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    606c:	441a      	add	r2, r3
    606e:	4591      	cmp	r9, r2
    6070:	d299      	bcs.n	5fa6 <put_fat.part.4+0x106>
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    6072:	f894 8003 	ldrb.w	r8, [r4, #3]
    6076:	f1b8 0f01 	cmp.w	r8, #1
    607a:	d801      	bhi.n	6080 <put_fat.part.4+0x1e0>
    607c:	e793      	b.n	5fa6 <put_fat.part.4+0x106>
    607e:	6a23      	ldr	r3, [r4, #32]
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    6080:	7860      	ldrb	r0, [r4, #1]
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
                    wsect += fs->fsize;
    6082:	4499      	add	r9, r3
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    6084:	f108 38ff 	add.w	r8, r8, #4294967295
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    6088:	464a      	mov	r2, r9
    608a:	4651      	mov	r1, sl
    608c:	2301      	movs	r3, #1
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    608e:	fa5f f888 	uxtb.w	r8, r8
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    6092:	f7fd f8d1 	bl	3238 <disk_write>
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    6096:	f1b8 0f01 	cmp.w	r8, #1
    609a:	d1f0      	bne.n	607e <put_fat.part.4+0x1de>
    609c:	e783      	b.n	5fa6 <put_fat.part.4+0x106>

    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    609e:	f100 0a34 	add.w	sl, r0, #52	; 0x34
    60a2:	4651      	mov	r1, sl
    60a4:	7840      	ldrb	r0, [r0, #1]
    60a6:	464a      	mov	r2, r9
    60a8:	2301      	movs	r3, #1
    60aa:	f7fd f8c5 	bl	3238 <disk_write>
    60ae:	2800      	cmp	r0, #0
    60b0:	d148      	bne.n	6144 <put_fat.part.4+0x2a4>
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    60b2:	6a23      	ldr	r3, [r4, #32]
    60b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
    60b6:	7120      	strb	r0, [r4, #4]
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    60b8:	441a      	add	r2, r3
    60ba:	4591      	cmp	r9, r2
    60bc:	d2a4      	bcs.n	6008 <put_fat.part.4+0x168>
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    60be:	f894 8003 	ldrb.w	r8, [r4, #3]
    60c2:	f1b8 0f01 	cmp.w	r8, #1
    60c6:	d801      	bhi.n	60cc <put_fat.part.4+0x22c>
    60c8:	e79e      	b.n	6008 <put_fat.part.4+0x168>
    60ca:	6a23      	ldr	r3, [r4, #32]
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    60cc:	7860      	ldrb	r0, [r4, #1]
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
                    wsect += fs->fsize;
    60ce:	4499      	add	r9, r3
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    60d0:	f108 38ff 	add.w	r8, r8, #4294967295
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    60d4:	464a      	mov	r2, r9
    60d6:	4651      	mov	r1, sl
    60d8:	2301      	movs	r3, #1
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    60da:	fa5f f888 	uxtb.w	r8, r8
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    60de:	f7fd f8ab 	bl	3238 <disk_write>
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    60e2:	f1b8 0f01 	cmp.w	r8, #1
    60e6:	d1f0      	bne.n	60ca <put_fat.part.4+0x22a>
    60e8:	e78e      	b.n	6008 <put_fat.part.4+0x168>

    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    60ea:	f100 0a34 	add.w	sl, r0, #52	; 0x34
    60ee:	4651      	mov	r1, sl
    60f0:	7840      	ldrb	r0, [r0, #1]
    60f2:	464a      	mov	r2, r9
    60f4:	f7fd f8a0 	bl	3238 <disk_write>
    60f8:	bb20      	cbnz	r0, 6144 <put_fat.part.4+0x2a4>
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    60fa:	6a23      	ldr	r3, [r4, #32]
    60fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
    60fe:	7120      	strb	r0, [r4, #4]
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    6100:	441a      	add	r2, r3
    6102:	4591      	cmp	r9, r2
    6104:	f4bf aeed 	bcs.w	5ee2 <put_fat.part.4+0x42>
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    6108:	f894 b003 	ldrb.w	fp, [r4, #3]
    610c:	f1bb 0f01 	cmp.w	fp, #1
    6110:	d801      	bhi.n	6116 <put_fat.part.4+0x276>
    6112:	e6e6      	b.n	5ee2 <put_fat.part.4+0x42>
    6114:	6a23      	ldr	r3, [r4, #32]
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    6116:	7860      	ldrb	r0, [r4, #1]
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
                    wsect += fs->fsize;
    6118:	4499      	add	r9, r3
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    611a:	f10b 3bff 	add.w	fp, fp, #4294967295
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    611e:	464a      	mov	r2, r9
    6120:	4651      	mov	r1, sl
    6122:	2301      	movs	r3, #1
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    6124:	fa5f fb8b 	uxtb.w	fp, fp
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    6128:	f7fd f886 	bl	3238 <disk_write>
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    612c:	f1bb 0f01 	cmp.w	fp, #1
    6130:	d1f0      	bne.n	6114 <put_fat.part.4+0x274>
    6132:	e6d6      	b.n	5ee2 <put_fat.part.4+0x42>
                }
            }
        }
#endif
        if (sector) {
            if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    6134:	7860      	ldrb	r0, [r4, #1]
    6136:	f104 0134 	add.w	r1, r4, #52	; 0x34
    613a:	4642      	mov	r2, r8
    613c:	2301      	movs	r3, #1
    613e:	f7fd f82d 	bl	319c <disk_read>
    6142:	b120      	cbz	r0, 614e <put_fat.part.4+0x2ae>
            break;

        default :
            res = FR_INT_ERR;
        }
        fs->wflag = 1;
    6144:	2301      	movs	r3, #1
    6146:	7123      	strb	r3, [r4, #4]
            val |= LD_DWORD(p) & 0xF0000000;
            ST_DWORD(p, val);
            break;

        default :
            res = FR_INT_ERR;
    6148:	2001      	movs	r0, #1
        }
        fs->wflag = 1;
    }

    return res;
}
    614a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        }
#endif
        if (sector) {
            if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->winsect = sector;
    614e:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
    6152:	6a62      	ldr	r2, [r4, #36]	; 0x24
    6154:	e6cc      	b.n	5ef0 <put_fat.part.4+0x50>
            bc++;
            fs->wflag = 1;
            res = move_window(fs, fs->fatbase + (bc / SS(fs)));
            if (res != FR_OK) break;
            p = &fs->win[bc % SS(fs)];
            *p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    6156:	4426      	add	r6, r4
    6158:	f3c7 2703 	ubfx	r7, r7, #8, #4
    615c:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
    6160:	f023 030f 	bic.w	r3, r3, #15
    6164:	431f      	orrs	r7, r3
    6166:	e710      	b.n	5f8a <put_fat.part.4+0xea>

00006168 <remove_chain.part.6>:
/*-----------------------------------------------------------------------*/
/* FAT handling - Remove a cluster chain                                 */
/*-----------------------------------------------------------------------*/
#if !_FS_READONLY
static
FRESULT remove_chain (
    6168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    616c:	4604      	mov	r4, r0
    616e:	b083      	sub	sp, #12
    6170:	460d      	mov	r5, r1

    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    6172:	f100 0734 	add.w	r7, r0, #52	; 0x34
    6176:	f04f 0801 	mov.w	r8, #1
    if (clst < 2 || clst >= fs->n_fatent) { /* Check range */
        res = FR_INT_ERR;

    } else {
        res = FR_OK;
        while (clst < fs->n_fatent) {           /* Not a last link? */
    617a:	69e3      	ldr	r3, [r4, #28]
    617c:	429d      	cmp	r5, r3
    617e:	d266      	bcs.n	624e <remove_chain.part.6+0xe6>
{
    UINT wc, bc;
    BYTE *p;


    if (clst < 2 || clst >= fs->n_fatent)   /* Chack range */
    6180:	2d01      	cmp	r5, #1
    6182:	d92a      	bls.n	61da <remove_chain.part.6+0x72>
        return 1;

    switch (fs->fs_type) {
    6184:	7823      	ldrb	r3, [r4, #0]
    6186:	2b02      	cmp	r3, #2
    6188:	d007      	beq.n	619a <remove_chain.part.6+0x32>
    618a:	2b03      	cmp	r3, #3
    618c:	d061      	beq.n	6252 <remove_chain.part.6+0xea>
    618e:	2b01      	cmp	r3, #1
    6190:	d027      	beq.n	61e2 <remove_chain.part.6+0x7a>
        res = FR_OK;
        while (clst < fs->n_fatent) {           /* Not a last link? */
            nxt = get_fat(fs, clst);            /* Get cluster status */
            if (nxt == 0) break;                /* Empty cluster? */
            if (nxt == 1) { res = FR_INT_ERR; break; }  /* Internal error? */
            if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }    /* Disk error? */
    6192:	2001      	movs	r0, #1
            clst = nxt; /* Next cluster */
        }
    }

    return res;
}
    6194:	b003      	add	sp, #12
    6196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
        wc |= fs->win[bc % SS(fs)] << 8;
        return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);

    case FS_FAT16 :
        if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    619a:	6a66      	ldr	r6, [r4, #36]	; 0x24
)                   /* Move to zero only writes back dirty window */
{
    DWORD wsect;


    wsect = fs->winsect;
    619c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
        wc |= fs->win[bc % SS(fs)] << 8;
        return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);

    case FS_FAT16 :
        if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    61a0:	eb06 2615 	add.w	r6, r6, r5, lsr #8
{
    DWORD wsect;


    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
    61a4:	4556      	cmp	r6, sl
    61a6:	d005      	beq.n	61b4 <remove_chain.part.6+0x4c>
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
    61a8:	7923      	ldrb	r3, [r4, #4]
    61aa:	2b00      	cmp	r3, #0
    61ac:	f040 80a6 	bne.w	62fc <remove_chain.part.6+0x194>
                    disk_write(fs->drv, fs->win, wsect, 1);
                }
            }
        }
#endif
        if (sector) {
    61b0:	2e00      	cmp	r6, #0
    61b2:	d17f      	bne.n	62b4 <remove_chain.part.6+0x14c>
        wc |= fs->win[bc % SS(fs)] << 8;
        return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);

    case FS_FAT16 :
        if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
        p = &fs->win[clst * 2 % SS(fs)];
    61b4:	006b      	lsls	r3, r5, #1
    61b6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
        return LD_WORD(p);
    61ba:	18e1      	adds	r1, r4, r3
    61bc:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
    61c0:	f891 6035 	ldrb.w	r6, [r1, #53]	; 0x35
    61c4:	ea43 2606 	orr.w	r6, r3, r6, lsl #8

    } else {
        res = FR_OK;
        while (clst < fs->n_fatent) {           /* Not a last link? */
            nxt = get_fat(fs, clst);            /* Get cluster status */
            if (nxt == 0) break;                /* Empty cluster? */
    61c8:	2e00      	cmp	r6, #0
    61ca:	d040      	beq.n	624e <remove_chain.part.6+0xe6>
            if (nxt == 1) { res = FR_INT_ERR; break; }  /* Internal error? */
    61cc:	2e01      	cmp	r6, #1
    61ce:	d004      	beq.n	61da <remove_chain.part.6+0x72>
    UINT bc;
    BYTE *p;
    FRESULT res;


    if (clst < 2 || clst >= fs->n_fatent) { /* Check range */
    61d0:	2d01      	cmp	r5, #1
    61d2:	d902      	bls.n	61da <remove_chain.part.6+0x72>
    61d4:	69e3      	ldr	r3, [r4, #28]
    61d6:	429d      	cmp	r5, r3
    61d8:	d35b      	bcc.n	6292 <remove_chain.part.6+0x12a>
    } else {
        res = FR_OK;
        while (clst < fs->n_fatent) {           /* Not a last link? */
            nxt = get_fat(fs, clst);            /* Get cluster status */
            if (nxt == 0) break;                /* Empty cluster? */
            if (nxt == 1) { res = FR_INT_ERR; break; }  /* Internal error? */
    61da:	2002      	movs	r0, #2
            clst = nxt; /* Next cluster */
        }
    }

    return res;
}
    61dc:	b003      	add	sp, #12
    61de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (clst < 2 || clst >= fs->n_fatent)   /* Chack range */
        return 1;

    switch (fs->fs_type) {
    case FS_FAT12 :
        bc = (UINT)clst; bc += bc / 2;
    61e2:	b2ae      	uxth	r6, r5
    61e4:	eb06 0656 	add.w	r6, r6, r6, lsr #1
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    61e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
)                   /* Move to zero only writes back dirty window */
{
    DWORD wsect;


    wsect = fs->winsect;
    61ea:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
    if (clst < 2 || clst >= fs->n_fatent)   /* Chack range */
        return 1;

    switch (fs->fs_type) {
    case FS_FAT12 :
        bc = (UINT)clst; bc += bc / 2;
    61ee:	b2b6      	uxth	r6, r6
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    61f0:	eb02 2956 	add.w	r9, r2, r6, lsr #9
{
    DWORD wsect;


    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
    61f4:	45ca      	cmp	sl, r9
    61f6:	d009      	beq.n	620c <remove_chain.part.6+0xa4>
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
    61f8:	7922      	ldrb	r2, [r4, #4]
    61fa:	2a00      	cmp	r2, #0
    61fc:	f040 80ca 	bne.w	6394 <remove_chain.part.6+0x22c>
                    disk_write(fs->drv, fs->win, wsect, 1);
                }
            }
        }
#endif
        if (sector) {
    6200:	f1b9 0f00 	cmp.w	r9, #0
    6204:	d16c      	bne.n	62e0 <remove_chain.part.6+0x178>
    6206:	6a62      	ldr	r2, [r4, #36]	; 0x24
    6208:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30

    switch (fs->fs_type) {
    case FS_FAT12 :
        bc = (UINT)clst; bc += bc / 2;
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
        wc = fs->win[bc % SS(fs)]; bc++;
    620c:	f3c6 0308 	ubfx	r3, r6, #0, #9
    6210:	3601      	adds	r6, #1
    6212:	fa1f f986 	uxth.w	r9, r6
    6216:	4423      	add	r3, r4
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    6218:	eb02 2b59 	add.w	fp, r2, r9, lsr #9
{
    DWORD wsect;


    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
    621c:	45d3      	cmp	fp, sl

    switch (fs->fs_type) {
    case FS_FAT12 :
        bc = (UINT)clst; bc += bc / 2;
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
        wc = fs->win[bc % SS(fs)]; bc++;
    621e:	f893 6034 	ldrb.w	r6, [r3, #52]	; 0x34
{
    DWORD wsect;


    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
    6222:	d007      	beq.n	6234 <remove_chain.part.6+0xcc>
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
    6224:	7923      	ldrb	r3, [r4, #4]
    6226:	2b00      	cmp	r3, #0
    6228:	f040 80e8 	bne.w	63fc <remove_chain.part.6+0x294>
                    disk_write(fs->drv, fs->win, wsect, 1);
                }
            }
        }
#endif
        if (sector) {
    622c:	f1bb 0f00 	cmp.w	fp, #0
    6230:	f040 80d8 	bne.w	63e4 <remove_chain.part.6+0x27c>
    case FS_FAT12 :
        bc = (UINT)clst; bc += bc / 2;
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
        wc = fs->win[bc % SS(fs)]; bc++;
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
        wc |= fs->win[bc % SS(fs)] << 8;
    6234:	f3c9 0908 	ubfx	r9, r9, #0, #9
    6238:	44a1      	add	r9, r4
    623a:	f899 3034 	ldrb.w	r3, [r9, #52]	; 0x34
    623e:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
        return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    6242:	07eb      	lsls	r3, r5, #31
    6244:	f140 80cb 	bpl.w	63de <remove_chain.part.6+0x276>
    6248:	0936      	lsrs	r6, r6, #4

    } else {
        res = FR_OK;
        while (clst < fs->n_fatent) {           /* Not a last link? */
            nxt = get_fat(fs, clst);            /* Get cluster status */
            if (nxt == 0) break;                /* Empty cluster? */
    624a:	2e00      	cmp	r6, #0
    624c:	d1be      	bne.n	61cc <remove_chain.part.6+0x64>
/*-----------------------------------------------------------------------*/
/* FAT handling - Remove a cluster chain                                 */
/*-----------------------------------------------------------------------*/
#if !_FS_READONLY
static
FRESULT remove_chain (
    624e:	2000      	movs	r0, #0
    6250:	e7a0      	b.n	6194 <remove_chain.part.6+0x2c>
        if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
        p = &fs->win[clst * 2 % SS(fs)];
        return LD_WORD(p);

    case FS_FAT32 :
        if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    6252:	6a66      	ldr	r6, [r4, #36]	; 0x24
)                   /* Move to zero only writes back dirty window */
{
    DWORD wsect;


    wsect = fs->winsect;
    6254:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
        if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
        p = &fs->win[clst * 2 % SS(fs)];
        return LD_WORD(p);

    case FS_FAT32 :
        if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    6258:	eb06 16d5 	add.w	r6, r6, r5, lsr #7
{
    DWORD wsect;


    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
    625c:	4556      	cmp	r6, sl
    625e:	d003      	beq.n	6268 <remove_chain.part.6+0x100>
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
    6260:	7923      	ldrb	r3, [r4, #4]
    6262:	2b00      	cmp	r3, #0
    6264:	d170      	bne.n	6348 <remove_chain.part.6+0x1e0>
                    disk_write(fs->drv, fs->win, wsect, 1);
                }
            }
        }
#endif
        if (sector) {
    6266:	bb86      	cbnz	r6, 62ca <remove_chain.part.6+0x162>
        p = &fs->win[clst * 2 % SS(fs)];
        return LD_WORD(p);

    case FS_FAT32 :
        if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
        p = &fs->win[clst * 4 % SS(fs)];
    6268:	00ab      	lsls	r3, r5, #2
    626a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
    626e:	18e1      	adds	r1, r4, r3
        return LD_DWORD(p) & 0x0FFFFFFF;
    6270:	f891 2037 	ldrb.w	r2, [r1, #55]	; 0x37
    6274:	f891 0036 	ldrb.w	r0, [r1, #54]	; 0x36
    6278:	f891 6035 	ldrb.w	r6, [r1, #53]	; 0x35
    627c:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
    6280:	0612      	lsls	r2, r2, #24
    6282:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    6286:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
    628a:	431e      	orrs	r6, r3
    628c:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
    6290:	e79a      	b.n	61c8 <remove_chain.part.6+0x60>
    6292:	4629      	mov	r1, r5
    6294:	4620      	mov	r0, r4
    6296:	2200      	movs	r2, #0
    6298:	f7ff fe02 	bl	5ea0 <put_fat.part.4>
            nxt = get_fat(fs, clst);            /* Get cluster status */
            if (nxt == 0) break;                /* Empty cluster? */
            if (nxt == 1) { res = FR_INT_ERR; break; }  /* Internal error? */
            if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }    /* Disk error? */
            res = put_fat(fs, clst, 0);         /* Mark the cluster "empty" */
            if (res != FR_OK) break;
    629c:	2800      	cmp	r0, #0
    629e:	f47f af79 	bne.w	6194 <remove_chain.part.6+0x2c>
            if (fs->free_clust != 0xFFFFFFFF) { /* Update FSInfo */
    62a2:	6923      	ldr	r3, [r4, #16]
    62a4:	1c5a      	adds	r2, r3, #1
    62a6:	d003      	beq.n	62b0 <remove_chain.part.6+0x148>
                fs->free_clust++;
    62a8:	3301      	adds	r3, #1
    62aa:	6123      	str	r3, [r4, #16]
                fs->fsi_flag = 1;
    62ac:	f884 8005 	strb.w	r8, [r4, #5]
/*-----------------------------------------------------------------------*/
/* FAT handling - Remove a cluster chain                                 */
/*-----------------------------------------------------------------------*/
#if !_FS_READONLY
static
FRESULT remove_chain (
    62b0:	4635      	mov	r5, r6
    62b2:	e762      	b.n	617a <remove_chain.part.6+0x12>
                }
            }
        }
#endif
        if (sector) {
            if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    62b4:	7860      	ldrb	r0, [r4, #1]
    62b6:	4639      	mov	r1, r7
    62b8:	4632      	mov	r2, r6
    62ba:	2301      	movs	r3, #1
    62bc:	f7fc ff6e 	bl	319c <disk_read>
    62c0:	2800      	cmp	r0, #0
    62c2:	f47f af66 	bne.w	6192 <remove_chain.part.6+0x2a>
                return FR_DISK_ERR;
            fs->winsect = sector;
    62c6:	6326      	str	r6, [r4, #48]	; 0x30
    62c8:	e774      	b.n	61b4 <remove_chain.part.6+0x4c>
                }
            }
        }
#endif
        if (sector) {
            if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    62ca:	7860      	ldrb	r0, [r4, #1]
    62cc:	4639      	mov	r1, r7
    62ce:	4632      	mov	r2, r6
    62d0:	2301      	movs	r3, #1
    62d2:	f7fc ff63 	bl	319c <disk_read>
    62d6:	2800      	cmp	r0, #0
    62d8:	f47f af5b 	bne.w	6192 <remove_chain.part.6+0x2a>
                return FR_DISK_ERR;
            fs->winsect = sector;
    62dc:	6326      	str	r6, [r4, #48]	; 0x30
    62de:	e7c3      	b.n	6268 <remove_chain.part.6+0x100>
                }
            }
        }
#endif
        if (sector) {
            if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    62e0:	7860      	ldrb	r0, [r4, #1]
    62e2:	4639      	mov	r1, r7
    62e4:	464a      	mov	r2, r9
    62e6:	2301      	movs	r3, #1
    62e8:	f7fc ff58 	bl	319c <disk_read>
    62ec:	2800      	cmp	r0, #0
    62ee:	f47f af50 	bne.w	6192 <remove_chain.part.6+0x2a>
                return FR_DISK_ERR;
            fs->winsect = sector;
    62f2:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
    62f6:	46ca      	mov	sl, r9
    62f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
    62fa:	e787      	b.n	620c <remove_chain.part.6+0xa4>

    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    62fc:	7860      	ldrb	r0, [r4, #1]
    62fe:	4639      	mov	r1, r7
    6300:	4652      	mov	r2, sl
    6302:	2301      	movs	r3, #1
    6304:	f7fc ff98 	bl	3238 <disk_write>
    6308:	2800      	cmp	r0, #0
    630a:	f47f af42 	bne.w	6192 <remove_chain.part.6+0x2a>
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    630e:	6a23      	ldr	r3, [r4, #32]
    6310:	6a62      	ldr	r2, [r4, #36]	; 0x24
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
    6312:	7120      	strb	r0, [r4, #4]
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    6314:	441a      	add	r2, r3
    6316:	4592      	cmp	sl, r2
    6318:	f4bf af4a 	bcs.w	61b0 <remove_chain.part.6+0x48>
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    631c:	f894 9003 	ldrb.w	r9, [r4, #3]
    6320:	f1b9 0f01 	cmp.w	r9, #1
    6324:	d801      	bhi.n	632a <remove_chain.part.6+0x1c2>
    6326:	e743      	b.n	61b0 <remove_chain.part.6+0x48>
    6328:	6a23      	ldr	r3, [r4, #32]
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    632a:	7860      	ldrb	r0, [r4, #1]
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
                    wsect += fs->fsize;
    632c:	449a      	add	sl, r3
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    632e:	f109 39ff 	add.w	r9, r9, #4294967295
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    6332:	4652      	mov	r2, sl
    6334:	4639      	mov	r1, r7
    6336:	2301      	movs	r3, #1
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    6338:	fa5f f989 	uxtb.w	r9, r9
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    633c:	f7fc ff7c 	bl	3238 <disk_write>
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    6340:	f1b9 0f01 	cmp.w	r9, #1
    6344:	d1f0      	bne.n	6328 <remove_chain.part.6+0x1c0>
    6346:	e733      	b.n	61b0 <remove_chain.part.6+0x48>

    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    6348:	7860      	ldrb	r0, [r4, #1]
    634a:	4639      	mov	r1, r7
    634c:	4652      	mov	r2, sl
    634e:	2301      	movs	r3, #1
    6350:	f7fc ff72 	bl	3238 <disk_write>
    6354:	2800      	cmp	r0, #0
    6356:	f47f af1c 	bne.w	6192 <remove_chain.part.6+0x2a>
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    635a:	6a23      	ldr	r3, [r4, #32]
    635c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
    635e:	7120      	strb	r0, [r4, #4]
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    6360:	441a      	add	r2, r3
    6362:	4592      	cmp	sl, r2
    6364:	f4bf af7f 	bcs.w	6266 <remove_chain.part.6+0xfe>
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    6368:	f894 9003 	ldrb.w	r9, [r4, #3]
    636c:	f1b9 0f01 	cmp.w	r9, #1
    6370:	d801      	bhi.n	6376 <remove_chain.part.6+0x20e>
    6372:	e778      	b.n	6266 <remove_chain.part.6+0xfe>
    6374:	6a23      	ldr	r3, [r4, #32]
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    6376:	7860      	ldrb	r0, [r4, #1]
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
                    wsect += fs->fsize;
    6378:	449a      	add	sl, r3
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    637a:	f109 39ff 	add.w	r9, r9, #4294967295
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    637e:	4652      	mov	r2, sl
    6380:	4639      	mov	r1, r7
    6382:	2301      	movs	r3, #1
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    6384:	fa5f f989 	uxtb.w	r9, r9
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    6388:	f7fc ff56 	bl	3238 <disk_write>
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    638c:	f1b9 0f01 	cmp.w	r9, #1
    6390:	d1f0      	bne.n	6374 <remove_chain.part.6+0x20c>
    6392:	e768      	b.n	6266 <remove_chain.part.6+0xfe>

    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    6394:	7860      	ldrb	r0, [r4, #1]
    6396:	4639      	mov	r1, r7
    6398:	4652      	mov	r2, sl
    639a:	f7fc ff4d 	bl	3238 <disk_write>
    639e:	2800      	cmp	r0, #0
    63a0:	f47f aef7 	bne.w	6192 <remove_chain.part.6+0x2a>
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    63a4:	6a23      	ldr	r3, [r4, #32]
    63a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
    63a8:	7120      	strb	r0, [r4, #4]
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    63aa:	441a      	add	r2, r3
    63ac:	4592      	cmp	sl, r2
    63ae:	f4bf af27 	bcs.w	6200 <remove_chain.part.6+0x98>
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    63b2:	f894 b003 	ldrb.w	fp, [r4, #3]
    63b6:	f1bb 0f01 	cmp.w	fp, #1
    63ba:	d801      	bhi.n	63c0 <remove_chain.part.6+0x258>
    63bc:	e720      	b.n	6200 <remove_chain.part.6+0x98>
    63be:	6a23      	ldr	r3, [r4, #32]
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    63c0:	7860      	ldrb	r0, [r4, #1]
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
                    wsect += fs->fsize;
    63c2:	449a      	add	sl, r3
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    63c4:	f10b 3bff 	add.w	fp, fp, #4294967295
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    63c8:	4652      	mov	r2, sl
    63ca:	4639      	mov	r1, r7
    63cc:	2301      	movs	r3, #1
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    63ce:	fa5f fb8b 	uxtb.w	fp, fp
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    63d2:	f7fc ff31 	bl	3238 <disk_write>
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    63d6:	f1bb 0f01 	cmp.w	fp, #1
    63da:	d1f0      	bne.n	63be <remove_chain.part.6+0x256>
    63dc:	e710      	b.n	6200 <remove_chain.part.6+0x98>
        bc = (UINT)clst; bc += bc / 2;
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
        wc = fs->win[bc % SS(fs)]; bc++;
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
        wc |= fs->win[bc % SS(fs)] << 8;
        return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    63de:	f3c6 060b 	ubfx	r6, r6, #0, #12
    63e2:	e6f1      	b.n	61c8 <remove_chain.part.6+0x60>
                }
            }
        }
#endif
        if (sector) {
            if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    63e4:	7860      	ldrb	r0, [r4, #1]
    63e6:	4639      	mov	r1, r7
    63e8:	465a      	mov	r2, fp
    63ea:	2301      	movs	r3, #1
    63ec:	f7fc fed6 	bl	319c <disk_read>
    63f0:	2800      	cmp	r0, #0
    63f2:	f47f aece 	bne.w	6192 <remove_chain.part.6+0x2a>
                return FR_DISK_ERR;
            fs->winsect = sector;
    63f6:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
    63fa:	e71b      	b.n	6234 <remove_chain.part.6+0xcc>

    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    63fc:	7860      	ldrb	r0, [r4, #1]
    63fe:	4639      	mov	r1, r7
    6400:	4652      	mov	r2, sl
    6402:	2301      	movs	r3, #1
    6404:	f7fc ff18 	bl	3238 <disk_write>
    6408:	2800      	cmp	r0, #0
    640a:	f47f aec2 	bne.w	6192 <remove_chain.part.6+0x2a>
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    640e:	6a23      	ldr	r3, [r4, #32]
    6410:	6a62      	ldr	r2, [r4, #36]	; 0x24
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
    6412:	7120      	strb	r0, [r4, #4]
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    6414:	441a      	add	r2, r3
    6416:	4552      	cmp	r2, sl
    6418:	f67f af08 	bls.w	622c <remove_chain.part.6+0xc4>
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    641c:	f894 c003 	ldrb.w	ip, [r4, #3]
    6420:	f1bc 0f01 	cmp.w	ip, #1
    6424:	d801      	bhi.n	642a <remove_chain.part.6+0x2c2>
    6426:	e701      	b.n	622c <remove_chain.part.6+0xc4>
    6428:	6a23      	ldr	r3, [r4, #32]
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    642a:	7860      	ldrb	r0, [r4, #1]
    642c:	f8cd c004 	str.w	ip, [sp, #4]
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
                    wsect += fs->fsize;
    6430:	449a      	add	sl, r3
                    disk_write(fs->drv, fs->win, wsect, 1);
    6432:	4652      	mov	r2, sl
    6434:	4639      	mov	r1, r7
    6436:	2301      	movs	r3, #1
    6438:	f7fc fefe 	bl	3238 <disk_write>
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    643c:	f8dd c004 	ldr.w	ip, [sp, #4]
    6440:	f10c 3cff 	add.w	ip, ip, #4294967295
    6444:	fa5f fc8c 	uxtb.w	ip, ip
    6448:	f1bc 0f01 	cmp.w	ip, #1
    644c:	d1ec      	bne.n	6428 <remove_chain.part.6+0x2c0>
                    disk_write(fs->drv, fs->win, wsect, 1);
                }
            }
        }
#endif
        if (sector) {
    644e:	f1bb 0f00 	cmp.w	fp, #0
    6452:	f43f aeef 	beq.w	6234 <remove_chain.part.6+0xcc>
    6456:	e7c5      	b.n	63e4 <remove_chain.part.6+0x27c>

00006458 <get_fat.part.3>:
/*-----------------------------------------------------------------------*/
/* FAT access - Read value of a FAT entry                                */
/*-----------------------------------------------------------------------*/


DWORD get_fat ( /* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
    6458:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}


    if (clst < 2 || clst >= fs->n_fatent)   /* Chack range */
        return 1;

    switch (fs->fs_type) {
    645c:	7803      	ldrb	r3, [r0, #0]
    645e:	2b02      	cmp	r3, #2
/*-----------------------------------------------------------------------*/
/* FAT access - Read value of a FAT entry                                */
/*-----------------------------------------------------------------------*/


DWORD get_fat ( /* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
    6460:	4604      	mov	r4, r0
    6462:	460d      	mov	r5, r1


    if (clst < 2 || clst >= fs->n_fatent)   /* Chack range */
        return 1;

    switch (fs->fs_type) {
    6464:	d069      	beq.n	653a <get_fat.part.3+0xe2>
    6466:	2b03      	cmp	r3, #3
    6468:	d03b      	beq.n	64e2 <get_fat.part.3+0x8a>
    646a:	2b01      	cmp	r3, #1
    646c:	d003      	beq.n	6476 <get_fat.part.3+0x1e>
        if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
        p = &fs->win[clst * 4 % SS(fs)];
        return LD_DWORD(p) & 0x0FFFFFFF;
    }

    return 0xFFFFFFFF;  /* An error occurred at the disk I/O layer */
    646e:	f04f 30ff 	mov.w	r0, #4294967295
    6472:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (clst < 2 || clst >= fs->n_fatent)   /* Chack range */
        return 1;

    switch (fs->fs_type) {
    case FS_FAT12 :
        bc = (UINT)clst; bc += bc / 2;
    6476:	b28e      	uxth	r6, r1
    6478:	eb06 0656 	add.w	r6, r6, r6, lsr #1
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    647c:	6a42      	ldr	r2, [r0, #36]	; 0x24
)                   /* Move to zero only writes back dirty window */
{
    DWORD wsect;


    wsect = fs->winsect;
    647e:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
    if (clst < 2 || clst >= fs->n_fatent)   /* Chack range */
        return 1;

    switch (fs->fs_type) {
    case FS_FAT12 :
        bc = (UINT)clst; bc += bc / 2;
    6482:	b2b6      	uxth	r6, r6
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    6484:	eb02 2756 	add.w	r7, r2, r6, lsr #9
{
    DWORD wsect;


    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
    6488:	4547      	cmp	r7, r8
    648a:	f000 8119 	beq.w	66c0 <get_fat.part.3+0x268>
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
    648e:	7902      	ldrb	r2, [r0, #4]
    6490:	2a00      	cmp	r2, #0
    6492:	f040 8095 	bne.w	65c0 <get_fat.part.3+0x168>
                    disk_write(fs->drv, fs->win, wsect, 1);
                }
            }
        }
#endif
        if (sector) {
    6496:	2f00      	cmp	r7, #0
    6498:	f040 80dc 	bne.w	6654 <get_fat.part.3+0x1fc>
    649c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    649e:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30

    switch (fs->fs_type) {
    case FS_FAT12 :
        bc = (UINT)clst; bc += bc / 2;
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
        wc = fs->win[bc % SS(fs)]; bc++;
    64a2:	f3c6 0308 	ubfx	r3, r6, #0, #9
    64a6:	3601      	adds	r6, #1
    64a8:	b2b7      	uxth	r7, r6
    64aa:	4423      	add	r3, r4
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    64ac:	eb02 2857 	add.w	r8, r2, r7, lsr #9
{
    DWORD wsect;


    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
    64b0:	45c8      	cmp	r8, r9

    switch (fs->fs_type) {
    case FS_FAT12 :
        bc = (UINT)clst; bc += bc / 2;
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
        wc = fs->win[bc % SS(fs)]; bc++;
    64b2:	f893 6034 	ldrb.w	r6, [r3, #52]	; 0x34
{
    DWORD wsect;


    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
    64b6:	d007      	beq.n	64c8 <get_fat.part.3+0x70>
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
    64b8:	7923      	ldrb	r3, [r4, #4]
    64ba:	2b00      	cmp	r3, #0
    64bc:	f040 80d8 	bne.w	6670 <get_fat.part.3+0x218>
                    disk_write(fs->drv, fs->win, wsect, 1);
                }
            }
        }
#endif
        if (sector) {
    64c0:	f1b8 0f00 	cmp.w	r8, #0
    64c4:	f040 80fe 	bne.w	66c4 <get_fat.part.3+0x26c>
    case FS_FAT12 :
        bc = (UINT)clst; bc += bc / 2;
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
        wc = fs->win[bc % SS(fs)]; bc++;
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
        wc |= fs->win[bc % SS(fs)] << 8;
    64c8:	f3c7 0708 	ubfx	r7, r7, #0, #9
    64cc:	443c      	add	r4, r7
        return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    64ce:	07eb      	lsls	r3, r5, #31
    case FS_FAT12 :
        bc = (UINT)clst; bc += bc / 2;
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
        wc = fs->win[bc % SS(fs)]; bc++;
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
        wc |= fs->win[bc % SS(fs)] << 8;
    64d0:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
    64d4:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
        return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    64d8:	f140 8101 	bpl.w	66de <get_fat.part.3+0x286>
    64dc:	0930      	lsrs	r0, r6, #4
    64de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
        p = &fs->win[clst * 2 % SS(fs)];
        return LD_WORD(p);

    case FS_FAT32 :
        if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    64e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
)                   /* Move to zero only writes back dirty window */
{
    DWORD wsect;


    wsect = fs->winsect;
    64e4:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
        if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
        p = &fs->win[clst * 2 % SS(fs)];
        return LD_WORD(p);

    case FS_FAT32 :
        if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    64e8:	eb06 16d1 	add.w	r6, r6, r1, lsr #7
{
    DWORD wsect;


    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
    64ec:	4546      	cmp	r6, r8
    64ee:	d00e      	beq.n	650e <get_fat.part.3+0xb6>
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
    64f0:	7903      	ldrb	r3, [r0, #4]
    64f2:	2b00      	cmp	r3, #0
    64f4:	f040 808b 	bne.w	660e <get_fat.part.3+0x1b6>
                    disk_write(fs->drv, fs->win, wsect, 1);
                }
            }
        }
#endif
        if (sector) {
    64f8:	b14e      	cbz	r6, 650e <get_fat.part.3+0xb6>
            if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    64fa:	7860      	ldrb	r0, [r4, #1]
    64fc:	f104 0134 	add.w	r1, r4, #52	; 0x34
    6500:	4632      	mov	r2, r6
    6502:	2301      	movs	r3, #1
    6504:	f7fc fe4a 	bl	319c <disk_read>
    6508:	2800      	cmp	r0, #0
    650a:	d1b0      	bne.n	646e <get_fat.part.3+0x16>
                return FR_DISK_ERR;
            fs->winsect = sector;
    650c:	6326      	str	r6, [r4, #48]	; 0x30
        p = &fs->win[clst * 2 % SS(fs)];
        return LD_WORD(p);

    case FS_FAT32 :
        if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
        p = &fs->win[clst * 4 % SS(fs)];
    650e:	00ad      	lsls	r5, r5, #2
    6510:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
    6514:	1963      	adds	r3, r4, r5
        return LD_DWORD(p) & 0x0FFFFFFF;
    6516:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
    651a:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
    651e:	f893 0035 	ldrb.w	r0, [r3, #53]	; 0x35
    6522:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    6526:	0612      	lsls	r2, r2, #24
    6528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    652c:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    6530:	4318      	orrs	r0, r3
    6532:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
    }

    return 0xFFFFFFFF;  /* An error occurred at the disk I/O layer */
}
    6536:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
        wc |= fs->win[bc % SS(fs)] << 8;
        return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);

    case FS_FAT16 :
        if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    653a:	6a46      	ldr	r6, [r0, #36]	; 0x24
)                   /* Move to zero only writes back dirty window */
{
    DWORD wsect;


    wsect = fs->winsect;
    653c:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
        wc |= fs->win[bc % SS(fs)] << 8;
        return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);

    case FS_FAT16 :
        if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    6540:	eb06 2611 	add.w	r6, r6, r1, lsr #8
{
    DWORD wsect;


    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
    6544:	4546      	cmp	r6, r8
    6546:	d00c      	beq.n	6562 <get_fat.part.3+0x10a>
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
    6548:	7903      	ldrb	r3, [r0, #4]
    654a:	b9bb      	cbnz	r3, 657c <get_fat.part.3+0x124>
                    disk_write(fs->drv, fs->win, wsect, 1);
                }
            }
        }
#endif
        if (sector) {
    654c:	b14e      	cbz	r6, 6562 <get_fat.part.3+0x10a>
            if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    654e:	7860      	ldrb	r0, [r4, #1]
    6550:	f104 0134 	add.w	r1, r4, #52	; 0x34
    6554:	4632      	mov	r2, r6
    6556:	2301      	movs	r3, #1
    6558:	f7fc fe20 	bl	319c <disk_read>
    655c:	2800      	cmp	r0, #0
    655e:	d186      	bne.n	646e <get_fat.part.3+0x16>
                return FR_DISK_ERR;
            fs->winsect = sector;
    6560:	6326      	str	r6, [r4, #48]	; 0x30
        wc |= fs->win[bc % SS(fs)] << 8;
        return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);

    case FS_FAT16 :
        if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
        p = &fs->win[clst * 2 % SS(fs)];
    6562:	006d      	lsls	r5, r5, #1
    6564:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
        return LD_WORD(p);
    6568:	1963      	adds	r3, r4, r5
    656a:	461d      	mov	r5, r3
    656c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
    6570:	f895 0035 	ldrb.w	r0, [r5, #53]	; 0x35
    6574:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    6578:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    657c:	f100 0934 	add.w	r9, r0, #52	; 0x34
    6580:	4649      	mov	r1, r9
    6582:	7840      	ldrb	r0, [r0, #1]
    6584:	4642      	mov	r2, r8
    6586:	2301      	movs	r3, #1
    6588:	f7fc fe56 	bl	3238 <disk_write>
    658c:	2800      	cmp	r0, #0
    658e:	f47f af6e 	bne.w	646e <get_fat.part.3+0x16>
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    6592:	6a23      	ldr	r3, [r4, #32]
    6594:	6a62      	ldr	r2, [r4, #36]	; 0x24
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
    6596:	7120      	strb	r0, [r4, #4]
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    6598:	441a      	add	r2, r3
    659a:	4590      	cmp	r8, r2
    659c:	d2d6      	bcs.n	654c <get_fat.part.3+0xf4>
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    659e:	78e7      	ldrb	r7, [r4, #3]
    65a0:	2f01      	cmp	r7, #1
    65a2:	d801      	bhi.n	65a8 <get_fat.part.3+0x150>
    65a4:	e7d2      	b.n	654c <get_fat.part.3+0xf4>
    65a6:	6a23      	ldr	r3, [r4, #32]
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    65a8:	7860      	ldrb	r0, [r4, #1]
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
                    wsect += fs->fsize;
    65aa:	4498      	add	r8, r3
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    65ac:	3f01      	subs	r7, #1
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    65ae:	4642      	mov	r2, r8
    65b0:	4649      	mov	r1, r9
    65b2:	2301      	movs	r3, #1
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    65b4:	b2ff      	uxtb	r7, r7
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    65b6:	f7fc fe3f 	bl	3238 <disk_write>
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    65ba:	2f01      	cmp	r7, #1
    65bc:	d1f3      	bne.n	65a6 <get_fat.part.3+0x14e>
    65be:	e7c5      	b.n	654c <get_fat.part.3+0xf4>

    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    65c0:	f100 0a34 	add.w	sl, r0, #52	; 0x34
    65c4:	4651      	mov	r1, sl
    65c6:	7840      	ldrb	r0, [r0, #1]
    65c8:	4642      	mov	r2, r8
    65ca:	f7fc fe35 	bl	3238 <disk_write>
    65ce:	2800      	cmp	r0, #0
    65d0:	f47f af4d 	bne.w	646e <get_fat.part.3+0x16>
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    65d4:	6a23      	ldr	r3, [r4, #32]
    65d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
    65d8:	7120      	strb	r0, [r4, #4]
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    65da:	441a      	add	r2, r3
    65dc:	4590      	cmp	r8, r2
    65de:	f4bf af5a 	bcs.w	6496 <get_fat.part.3+0x3e>
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    65e2:	f894 9003 	ldrb.w	r9, [r4, #3]
    65e6:	f1b9 0f01 	cmp.w	r9, #1
    65ea:	d801      	bhi.n	65f0 <get_fat.part.3+0x198>
    65ec:	e753      	b.n	6496 <get_fat.part.3+0x3e>
    65ee:	6a23      	ldr	r3, [r4, #32]
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    65f0:	7860      	ldrb	r0, [r4, #1]
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
                    wsect += fs->fsize;
    65f2:	4498      	add	r8, r3
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    65f4:	f109 39ff 	add.w	r9, r9, #4294967295
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    65f8:	4642      	mov	r2, r8
    65fa:	4651      	mov	r1, sl
    65fc:	2301      	movs	r3, #1
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    65fe:	fa5f f989 	uxtb.w	r9, r9
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    6602:	f7fc fe19 	bl	3238 <disk_write>
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    6606:	f1b9 0f01 	cmp.w	r9, #1
    660a:	d1f0      	bne.n	65ee <get_fat.part.3+0x196>
    660c:	e743      	b.n	6496 <get_fat.part.3+0x3e>

    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    660e:	f100 0934 	add.w	r9, r0, #52	; 0x34
    6612:	4649      	mov	r1, r9
    6614:	7840      	ldrb	r0, [r0, #1]
    6616:	4642      	mov	r2, r8
    6618:	2301      	movs	r3, #1
    661a:	f7fc fe0d 	bl	3238 <disk_write>
    661e:	2800      	cmp	r0, #0
    6620:	f47f af25 	bne.w	646e <get_fat.part.3+0x16>
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    6624:	6a23      	ldr	r3, [r4, #32]
    6626:	6a62      	ldr	r2, [r4, #36]	; 0x24
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
    6628:	7120      	strb	r0, [r4, #4]
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    662a:	441a      	add	r2, r3
    662c:	4590      	cmp	r8, r2
    662e:	f4bf af63 	bcs.w	64f8 <get_fat.part.3+0xa0>
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    6632:	78e7      	ldrb	r7, [r4, #3]
    6634:	2f01      	cmp	r7, #1
    6636:	d801      	bhi.n	663c <get_fat.part.3+0x1e4>
    6638:	e75e      	b.n	64f8 <get_fat.part.3+0xa0>
    663a:	6a23      	ldr	r3, [r4, #32]
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    663c:	7860      	ldrb	r0, [r4, #1]
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
                    wsect += fs->fsize;
    663e:	4498      	add	r8, r3
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    6640:	3f01      	subs	r7, #1
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    6642:	4642      	mov	r2, r8
    6644:	4649      	mov	r1, r9
    6646:	2301      	movs	r3, #1
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    6648:	b2ff      	uxtb	r7, r7
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    664a:	f7fc fdf5 	bl	3238 <disk_write>
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    664e:	2f01      	cmp	r7, #1
    6650:	d1f3      	bne.n	663a <get_fat.part.3+0x1e2>
    6652:	e751      	b.n	64f8 <get_fat.part.3+0xa0>
                }
            }
        }
#endif
        if (sector) {
            if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    6654:	7860      	ldrb	r0, [r4, #1]
    6656:	f104 0134 	add.w	r1, r4, #52	; 0x34
    665a:	463a      	mov	r2, r7
    665c:	2301      	movs	r3, #1
    665e:	f7fc fd9d 	bl	319c <disk_read>
    6662:	2800      	cmp	r0, #0
    6664:	f47f af03 	bne.w	646e <get_fat.part.3+0x16>
                return FR_DISK_ERR;
            fs->winsect = sector;
    6668:	6327      	str	r7, [r4, #48]	; 0x30
    666a:	46b9      	mov	r9, r7
    666c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    666e:	e718      	b.n	64a2 <get_fat.part.3+0x4a>

    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    6670:	f104 0b34 	add.w	fp, r4, #52	; 0x34
    6674:	4659      	mov	r1, fp
    6676:	7860      	ldrb	r0, [r4, #1]
    6678:	464a      	mov	r2, r9
    667a:	2301      	movs	r3, #1
    667c:	f7fc fddc 	bl	3238 <disk_write>
    6680:	2800      	cmp	r0, #0
    6682:	f47f aef4 	bne.w	646e <get_fat.part.3+0x16>
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    6686:	6a23      	ldr	r3, [r4, #32]
    6688:	6a62      	ldr	r2, [r4, #36]	; 0x24
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
    668a:	7120      	strb	r0, [r4, #4]
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    668c:	441a      	add	r2, r3
    668e:	454a      	cmp	r2, r9
    6690:	f67f af16 	bls.w	64c0 <get_fat.part.3+0x68>
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    6694:	f894 a003 	ldrb.w	sl, [r4, #3]
    6698:	f1ba 0f01 	cmp.w	sl, #1
    669c:	d801      	bhi.n	66a2 <get_fat.part.3+0x24a>
    669e:	e70f      	b.n	64c0 <get_fat.part.3+0x68>
    66a0:	6a23      	ldr	r3, [r4, #32]
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    66a2:	7860      	ldrb	r0, [r4, #1]
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
                    wsect += fs->fsize;
    66a4:	4499      	add	r9, r3
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    66a6:	f10a 3aff 	add.w	sl, sl, #4294967295
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    66aa:	464a      	mov	r2, r9
    66ac:	4659      	mov	r1, fp
    66ae:	2301      	movs	r3, #1
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    66b0:	fa5f fa8a 	uxtb.w	sl, sl
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    66b4:	f7fc fdc0 	bl	3238 <disk_write>
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    66b8:	f1ba 0f01 	cmp.w	sl, #1
    66bc:	d1f0      	bne.n	66a0 <get_fat.part.3+0x248>
    66be:	e6ff      	b.n	64c0 <get_fat.part.3+0x68>
{
    DWORD wsect;


    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
    66c0:	46b9      	mov	r9, r7
    66c2:	e6ee      	b.n	64a2 <get_fat.part.3+0x4a>
                }
            }
        }
#endif
        if (sector) {
            if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    66c4:	7860      	ldrb	r0, [r4, #1]
    66c6:	f104 0134 	add.w	r1, r4, #52	; 0x34
    66ca:	4642      	mov	r2, r8
    66cc:	2301      	movs	r3, #1
    66ce:	f7fc fd65 	bl	319c <disk_read>
    66d2:	2800      	cmp	r0, #0
    66d4:	f47f aecb 	bne.w	646e <get_fat.part.3+0x16>
                return FR_DISK_ERR;
            fs->winsect = sector;
    66d8:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
    66dc:	e6f4      	b.n	64c8 <get_fat.part.3+0x70>
        bc = (UINT)clst; bc += bc / 2;
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
        wc = fs->win[bc % SS(fs)]; bc++;
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
        wc |= fs->win[bc % SS(fs)] << 8;
        return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    66de:	f3c6 000b 	ubfx	r0, r6, #0, #12
    66e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    66e6:	bf00      	nop

000066e8 <dir_sdi>:
static
FRESULT dir_sdi (
    DIR *dj,        /* Pointer to directory object */
    WORD idx        /* Directory index number */
)
{
    66e8:	b570      	push	{r4, r5, r6, lr}
    66ea:	460c      	mov	r4, r1
    DWORD clst;
    WORD ic;


    dj->index = idx;
    clst = dj->sclust;
    66ec:	6881      	ldr	r1, [r0, #8]
{
    DWORD clst;
    WORD ic;


    dj->index = idx;
    66ee:	80c4      	strh	r4, [r0, #6]
    clst = dj->sclust;
    if (clst == 1 || clst >= dj->fs->n_fatent)  /* Check start cluster range */
    66f0:	2901      	cmp	r1, #1
static
FRESULT dir_sdi (
    DIR *dj,        /* Pointer to directory object */
    WORD idx        /* Directory index number */
)
{
    66f2:	4605      	mov	r5, r0
    WORD ic;


    dj->index = idx;
    clst = dj->sclust;
    if (clst == 1 || clst >= dj->fs->n_fatent)  /* Check start cluster range */
    66f4:	d003      	beq.n	66fe <dir_sdi+0x16>
    66f6:	6800      	ldr	r0, [r0, #0]
    66f8:	69c3      	ldr	r3, [r0, #28]
    66fa:	4299      	cmp	r1, r3
    66fc:	d301      	bcc.n	6702 <dir_sdi+0x1a>
        return FR_INT_ERR;
    66fe:	2002      	movs	r0, #2
    6700:	bd70      	pop	{r4, r5, r6, pc}
    if (!clst && dj->fs->fs_type == FS_FAT32)   /* Replace cluster# 0 with root cluster# if in FAT32 */
    6702:	b9b9      	cbnz	r1, 6734 <dir_sdi+0x4c>
    6704:	7802      	ldrb	r2, [r0, #0]
    6706:	2a03      	cmp	r2, #3
    6708:	d011      	beq.n	672e <dir_sdi+0x46>
        clst = dj->fs->dirbase;

    if (clst == 0) {    /* Static table (root-dir in FAT12/16) */
        dj->clust = clst;
        if (idx >= dj->fs->n_rootdir)       /* Index is out of range */
    670a:	8903      	ldrh	r3, [r0, #8]
        return FR_INT_ERR;
    if (!clst && dj->fs->fs_type == FS_FAT32)   /* Replace cluster# 0 with root cluster# if in FAT32 */
        clst = dj->fs->dirbase;

    if (clst == 0) {    /* Static table (root-dir in FAT12/16) */
        dj->clust = clst;
    670c:	2200      	movs	r2, #0
        if (idx >= dj->fs->n_rootdir)       /* Index is out of range */
    670e:	42a3      	cmp	r3, r4
        return FR_INT_ERR;
    if (!clst && dj->fs->fs_type == FS_FAT32)   /* Replace cluster# 0 with root cluster# if in FAT32 */
        clst = dj->fs->dirbase;

    if (clst == 0) {    /* Static table (root-dir in FAT12/16) */
        dj->clust = clst;
    6710:	60ea      	str	r2, [r5, #12]
        if (idx >= dj->fs->n_rootdir)       /* Index is out of range */
    6712:	d9f4      	bls.n	66fe <dir_sdi+0x16>
            return FR_INT_ERR;
        dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);   /* Sector# */
    6714:	6a83      	ldr	r3, [r0, #40]	; 0x28
    6716:	f3c4 120f 	ubfx	r2, r4, #4, #16
    671a:	4413      	add	r3, r2
    671c:	612b      	str	r3, [r5, #16]
        }
        dj->clust = clst;
        dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);  /* Sector# */
    }

    dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR; /* Ptr to the entry in the sector */
    671e:	f004 040f 	and.w	r4, r4, #15
    6722:	eb00 1444 	add.w	r4, r0, r4, lsl #5
    6726:	3434      	adds	r4, #52	; 0x34
    6728:	616c      	str	r4, [r5, #20]

    return FR_OK;   /* Seek succeeded */
    672a:	2000      	movs	r0, #0
    672c:	bd70      	pop	{r4, r5, r6, pc}
    dj->index = idx;
    clst = dj->sclust;
    if (clst == 1 || clst >= dj->fs->n_fatent)  /* Check start cluster range */
        return FR_INT_ERR;
    if (!clst && dj->fs->fs_type == FS_FAT32)   /* Replace cluster# 0 with root cluster# if in FAT32 */
        clst = dj->fs->dirbase;
    672e:	6a81      	ldr	r1, [r0, #40]	; 0x28

    if (clst == 0) {    /* Static table (root-dir in FAT12/16) */
    6730:	2900      	cmp	r1, #0
    6732:	d0ea      	beq.n	670a <dir_sdi+0x22>
        if (idx >= dj->fs->n_rootdir)       /* Index is out of range */
            return FR_INT_ERR;
        dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);   /* Sector# */
    }
    else {              /* Dynamic table (sub-dirs or root-dir in FAT32) */
        ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;   /* Entries per cluster */
    6734:	7886      	ldrb	r6, [r0, #2]
    6736:	0136      	lsls	r6, r6, #4
        while (idx >= ic) { /* Follow cluster chain */
    6738:	42b4      	cmp	r4, r6
    673a:	d318      	bcc.n	676e <dir_sdi+0x86>
    673c:	1ba4      	subs	r4, r4, r6
    673e:	b2a4      	uxth	r4, r4
    6740:	e00f      	b.n	6762 <dir_sdi+0x7a>
    6742:	f7ff fe89 	bl	6458 <get_fat.part.3>
    6746:	1ba2      	subs	r2, r4, r6
            clst = get_fat(dj->fs, clst);               /* Get next cluster */
            if (clst == 0xFFFFFFFF) return FR_DISK_ERR; /* Disk error */
    6748:	1c43      	adds	r3, r0, #1
    674a:	4601      	mov	r1, r0
    674c:	b292      	uxth	r2, r2
    674e:	d01d      	beq.n	678c <dir_sdi+0xa4>
            if (clst < 2 || clst >= dj->fs->n_fatent)   /* Reached to end of table or int error */
    6750:	2801      	cmp	r0, #1
    6752:	d9d4      	bls.n	66fe <dir_sdi+0x16>
    6754:	6828      	ldr	r0, [r5, #0]
    6756:	69c3      	ldr	r3, [r0, #28]
    6758:	428b      	cmp	r3, r1
    675a:	d9d0      	bls.n	66fe <dir_sdi+0x16>
            return FR_INT_ERR;
        dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);   /* Sector# */
    }
    else {              /* Dynamic table (sub-dirs or root-dir in FAT32) */
        ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;   /* Entries per cluster */
        while (idx >= ic) { /* Follow cluster chain */
    675c:	42a6      	cmp	r6, r4
    675e:	d806      	bhi.n	676e <dir_sdi+0x86>
    6760:	4614      	mov	r4, r2
{
    UINT wc, bc;
    BYTE *p;


    if (clst < 2 || clst >= fs->n_fatent)   /* Chack range */
    6762:	2901      	cmp	r1, #1
    6764:	d9cb      	bls.n	66fe <dir_sdi+0x16>
    6766:	4299      	cmp	r1, r3
    6768:	d3eb      	bcc.n	6742 <dir_sdi+0x5a>


    dj->index = idx;
    clst = dj->sclust;
    if (clst == 1 || clst >= dj->fs->n_fatent)  /* Check start cluster range */
        return FR_INT_ERR;
    676a:	2002      	movs	r0, #2
    676c:	bd70      	pop	{r4, r5, r6, pc}
DWORD clust2sect (  /* !=0: Sector number, 0: Failed - invalid cluster# */
    FATFS *fs,      /* File system object */
    DWORD clst      /* Cluster# to be converted */
)
{
    clst -= 2;
    676e:	1e8a      	subs	r2, r1, #2
    if (clst >= (fs->n_fatent - 2)) return 0;       /* Invalid cluster# */
    6770:	3b02      	subs	r3, #2
    6772:	429a      	cmp	r2, r3
            if (clst == 0xFFFFFFFF) return FR_DISK_ERR; /* Disk error */
            if (clst < 2 || clst >= dj->fs->n_fatent)   /* Reached to end of table or int error */
                return FR_INT_ERR;
            idx -= ic;
        }
        dj->clust = clst;
    6774:	60e9      	str	r1, [r5, #12]
    DWORD clst      /* Cluster# to be converted */
)
{
    clst -= 2;
    if (clst >= (fs->n_fatent - 2)) return 0;       /* Invalid cluster# */
    return clst * fs->csize + fs->database;
    6776:	bf3b      	ittet	cc
    6778:	6ac3      	ldrcc	r3, [r0, #44]	; 0x2c
    677a:	7881      	ldrbcc	r1, [r0, #2]
    FATFS *fs,      /* File system object */
    DWORD clst      /* Cluster# to be converted */
)
{
    clst -= 2;
    if (clst >= (fs->n_fatent - 2)) return 0;       /* Invalid cluster# */
    677c:	2200      	movcs	r2, #0
    return clst * fs->csize + fs->database;
    677e:	fb01 3202 	mlacc	r2, r1, r2, r3
            if (clst < 2 || clst >= dj->fs->n_fatent)   /* Reached to end of table or int error */
                return FR_INT_ERR;
            idx -= ic;
        }
        dj->clust = clst;
        dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);  /* Sector# */
    6782:	f3c4 130f 	ubfx	r3, r4, #4, #16
    6786:	441a      	add	r2, r3
    6788:	612a      	str	r2, [r5, #16]
    678a:	e7c8      	b.n	671e <dir_sdi+0x36>
    }
    else {              /* Dynamic table (sub-dirs or root-dir in FAT32) */
        ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;   /* Entries per cluster */
        while (idx >= ic) { /* Follow cluster chain */
            clst = get_fat(dj->fs, clst);               /* Get next cluster */
            if (clst == 0xFFFFFFFF) return FR_DISK_ERR; /* Disk error */
    678c:	2001      	movs	r0, #1
    }

    dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR; /* Ptr to the entry in the sector */

    return FR_OK;   /* Seek succeeded */
}
    678e:	bd70      	pop	{r4, r5, r6, pc}

00006790 <create_chain>:
static
DWORD create_chain (    /* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
    FATFS *fs,          /* File system object */
    DWORD clst          /* Cluster# to stretch. 0 means create a new chain. */
)
{
    6790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6794:	b083      	sub	sp, #12
    6796:	4606      	mov	r6, r0
    DWORD cs, ncl, scl;
    FRESULT res;


    if (clst == 0) {        /* Create a new chain */
    6798:	9100      	str	r1, [sp, #0]
    679a:	bb21      	cbnz	r1, 67e6 <create_chain+0x56>
        scl = fs->last_clust;           /* Get suggested start point */
    679c:	f8d0 900c 	ldr.w	r9, [r0, #12]
    67a0:	69c3      	ldr	r3, [r0, #28]
        if (!scl || scl >= fs->n_fatent) scl = 1;
    67a2:	f1b9 0f00 	cmp.w	r9, #0
    67a6:	d028      	beq.n	67fa <create_chain+0x6a>
    67a8:	4599      	cmp	r9, r3
    67aa:	bf28      	it	cs
    67ac:	f04f 0901 	movcs.w	r9, #1
    67b0:	464c      	mov	r4, r9

    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    67b2:	f106 0b34 	add.w	fp, r6, #52	; 0x34
        scl = clst;
    }

    ncl = scl;              /* Start cluster */
    for (;;) {
        ncl++;                          /* Next cluster */
    67b6:	3401      	adds	r4, #1
        if (ncl >= fs->n_fatent) {      /* Wrap around */
    67b8:	429c      	cmp	r4, r3
    67ba:	d321      	bcc.n	6800 <create_chain+0x70>
            ncl = 2;
            if (ncl > scl) return 0;    /* No free cluster */
    67bc:	f1b9 0f01 	cmp.w	r9, #1
    67c0:	f240 8124 	bls.w	6a0c <create_chain+0x27c>
{
    UINT wc, bc;
    BYTE *p;


    if (clst < 2 || clst >= fs->n_fatent)   /* Chack range */
    67c4:	2b02      	cmp	r3, #2
    67c6:	d914      	bls.n	67f2 <create_chain+0x62>
        return 1;

    switch (fs->fs_type) {
    67c8:	7833      	ldrb	r3, [r6, #0]
    67ca:	2b02      	cmp	r3, #2

    ncl = scl;              /* Start cluster */
    for (;;) {
        ncl++;                          /* Next cluster */
        if (ncl >= fs->n_fatent) {      /* Wrap around */
            ncl = 2;
    67cc:	f04f 0402 	mov.w	r4, #2


    if (clst < 2 || clst >= fs->n_fatent)   /* Chack range */
        return 1;

    switch (fs->fs_type) {
    67d0:	d01b      	beq.n	680a <create_chain+0x7a>
    67d2:	2b03      	cmp	r3, #3
    67d4:	f000 809f 	beq.w	6916 <create_chain+0x186>
    67d8:	2b01      	cmp	r3, #1
    67da:	d038      	beq.n	684e <create_chain+0xbe>
    67dc:	f04f 30ff 	mov.w	r0, #4294967295
    } else {
        ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    }

    return ncl;     /* Return new cluster number or error code */
}
    67e0:	b003      	add	sp, #12
    67e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
    UINT wc, bc;
    BYTE *p;


    if (clst < 2 || clst >= fs->n_fatent)   /* Chack range */
    67e6:	2901      	cmp	r1, #1
    67e8:	d903      	bls.n	67f2 <create_chain+0x62>
    67ea:	69c3      	ldr	r3, [r0, #28]
    67ec:	4299      	cmp	r1, r3
    67ee:	f0c0 810f 	bcc.w	6a10 <create_chain+0x280>
        return 1;
    67f2:	2001      	movs	r0, #1
    } else {
        ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    }

    return ncl;     /* Return new cluster number or error code */
}
    67f4:	b003      	add	sp, #12
    67f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FRESULT res;


    if (clst == 0) {        /* Create a new chain */
        scl = fs->last_clust;           /* Get suggested start point */
        if (!scl || scl >= fs->n_fatent) scl = 1;
    67fa:	f04f 0901 	mov.w	r9, #1
    67fe:	e7d7      	b.n	67b0 <create_chain+0x20>
{
    UINT wc, bc;
    BYTE *p;


    if (clst < 2 || clst >= fs->n_fatent)   /* Chack range */
    6800:	2c01      	cmp	r4, #1
    6802:	d9f6      	bls.n	67f2 <create_chain+0x62>
        return 1;

    switch (fs->fs_type) {
    6804:	7833      	ldrb	r3, [r6, #0]
    6806:	2b02      	cmp	r3, #2
    6808:	d1e3      	bne.n	67d2 <create_chain+0x42>
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
        wc |= fs->win[bc % SS(fs)] << 8;
        return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);

    case FS_FAT16 :
        if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    680a:	6a75      	ldr	r5, [r6, #36]	; 0x24
)                   /* Move to zero only writes back dirty window */
{
    DWORD wsect;


    wsect = fs->winsect;
    680c:	f8d6 8030 	ldr.w	r8, [r6, #48]	; 0x30
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
        wc |= fs->win[bc % SS(fs)] << 8;
        return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);

    case FS_FAT16 :
        if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    6810:	eb05 2514 	add.w	r5, r5, r4, lsr #8
{
    DWORD wsect;


    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
    6814:	4545      	cmp	r5, r8
    6816:	d006      	beq.n	6826 <create_chain+0x96>
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
    6818:	7933      	ldrb	r3, [r6, #4]
    681a:	2b00      	cmp	r3, #0
    681c:	f040 80c6 	bne.w	69ac <create_chain+0x21c>
                    disk_write(fs->drv, fs->win, wsect, 1);
                }
            }
        }
#endif
        if (sector) {
    6820:	2d00      	cmp	r5, #0
    6822:	f040 80e6 	bne.w	69f2 <create_chain+0x262>
        wc |= fs->win[bc % SS(fs)] << 8;
        return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);

    case FS_FAT16 :
        if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
        p = &fs->win[clst * 2 % SS(fs)];
    6826:	0063      	lsls	r3, r4, #1
    6828:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
        return LD_WORD(p);
    682c:	18f1      	adds	r1, r6, r3
    682e:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
    6832:	f891 0035 	ldrb.w	r0, [r1, #53]	; 0x35
    6836:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
        if (ncl >= fs->n_fatent) {      /* Wrap around */
            ncl = 2;
            if (ncl > scl) return 0;    /* No free cluster */
        }
        cs = get_fat(fs, ncl);          /* Get the cluster status */
        if (cs == 0) break;             /* Found a free cluster */
    683a:	2800      	cmp	r0, #0
    683c:	f000 8138 	beq.w	6ab0 <create_chain+0x320>
        if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    6840:	2801      	cmp	r0, #1
    6842:	d0d7      	beq.n	67f4 <create_chain+0x64>
            return cs;
        if (ncl == scl) return 0;       /* No free cluster */
    6844:	454c      	cmp	r4, r9
    6846:	f000 80e1 	beq.w	6a0c <create_chain+0x27c>
    684a:	69f3      	ldr	r3, [r6, #28]
    684c:	e7b3      	b.n	67b6 <create_chain+0x26>
    if (clst < 2 || clst >= fs->n_fatent)   /* Chack range */
        return 1;

    switch (fs->fs_type) {
    case FS_FAT12 :
        bc = (UINT)clst; bc += bc / 2;
    684e:	b2a5      	uxth	r5, r4
    6850:	eb05 0555 	add.w	r5, r5, r5, lsr #1
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    6854:	6a72      	ldr	r2, [r6, #36]	; 0x24
)                   /* Move to zero only writes back dirty window */
{
    DWORD wsect;


    wsect = fs->winsect;
    6856:	6b37      	ldr	r7, [r6, #48]	; 0x30
    if (clst < 2 || clst >= fs->n_fatent)   /* Chack range */
        return 1;

    switch (fs->fs_type) {
    case FS_FAT12 :
        bc = (UINT)clst; bc += bc / 2;
    6858:	b2ad      	uxth	r5, r5
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    685a:	eb02 2855 	add.w	r8, r2, r5, lsr #9
{
    DWORD wsect;


    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
    685e:	4547      	cmp	r7, r8
    6860:	f000 80d2 	beq.w	6a08 <create_chain+0x278>
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
    6864:	7932      	ldrb	r2, [r6, #4]
    6866:	bb22      	cbnz	r2, 68b2 <create_chain+0x122>
                    disk_write(fs->drv, fs->win, wsect, 1);
                }
            }
        }
#endif
        if (sector) {
    6868:	f1b8 0f00 	cmp.w	r8, #0
    686c:	d146      	bne.n	68fc <create_chain+0x16c>
    686e:	6a72      	ldr	r2, [r6, #36]	; 0x24
    6870:	f8d6 8030 	ldr.w	r8, [r6, #48]	; 0x30

    switch (fs->fs_type) {
    case FS_FAT12 :
        bc = (UINT)clst; bc += bc / 2;
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
        wc = fs->win[bc % SS(fs)]; bc++;
    6874:	f3c5 0308 	ubfx	r3, r5, #0, #9
    6878:	3501      	adds	r5, #1
    687a:	b2af      	uxth	r7, r5
    687c:	4433      	add	r3, r6
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    687e:	eb02 2a57 	add.w	sl, r2, r7, lsr #9
{
    DWORD wsect;


    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
    6882:	45c2      	cmp	sl, r8

    switch (fs->fs_type) {
    case FS_FAT12 :
        bc = (UINT)clst; bc += bc / 2;
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
        wc = fs->win[bc % SS(fs)]; bc++;
    6884:	f893 5034 	ldrb.w	r5, [r3, #52]	; 0x34
{
    DWORD wsect;


    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
    6888:	d007      	beq.n	689a <create_chain+0x10a>
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
    688a:	7933      	ldrb	r3, [r6, #4]
    688c:	2b00      	cmp	r3, #0
    688e:	f040 80d7 	bne.w	6a40 <create_chain+0x2b0>
                    disk_write(fs->drv, fs->win, wsect, 1);
                }
            }
        }
#endif
        if (sector) {
    6892:	f1ba 0f00 	cmp.w	sl, #0
    6896:	f040 80c7 	bne.w	6a28 <create_chain+0x298>
    case FS_FAT12 :
        bc = (UINT)clst; bc += bc / 2;
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
        wc = fs->win[bc % SS(fs)]; bc++;
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
        wc |= fs->win[bc % SS(fs)] << 8;
    689a:	f3c7 0708 	ubfx	r7, r7, #0, #9
    689e:	4437      	add	r7, r6
        return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    68a0:	07e3      	lsls	r3, r4, #31
    case FS_FAT12 :
        bc = (UINT)clst; bc += bc / 2;
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
        wc = fs->win[bc % SS(fs)]; bc++;
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
        wc |= fs->win[bc % SS(fs)] << 8;
    68a2:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
    68a6:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
        return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    68aa:	f140 80fe 	bpl.w	6aaa <create_chain+0x31a>
    68ae:	0928      	lsrs	r0, r5, #4
    68b0:	e7c3      	b.n	683a <create_chain+0xaa>

    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    68b2:	7870      	ldrb	r0, [r6, #1]
    68b4:	4659      	mov	r1, fp
    68b6:	463a      	mov	r2, r7
    68b8:	f7fc fcbe 	bl	3238 <disk_write>
    68bc:	2800      	cmp	r0, #0
    68be:	d18d      	bne.n	67dc <create_chain+0x4c>
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    68c0:	6a33      	ldr	r3, [r6, #32]
    68c2:	6a72      	ldr	r2, [r6, #36]	; 0x24
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
    68c4:	7130      	strb	r0, [r6, #4]
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    68c6:	441a      	add	r2, r3
    68c8:	4297      	cmp	r7, r2
    68ca:	d2cd      	bcs.n	6868 <create_chain+0xd8>
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    68cc:	f896 a003 	ldrb.w	sl, [r6, #3]
    68d0:	f1ba 0f01 	cmp.w	sl, #1
    68d4:	d801      	bhi.n	68da <create_chain+0x14a>
    68d6:	e7c7      	b.n	6868 <create_chain+0xd8>
    68d8:	6a33      	ldr	r3, [r6, #32]
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    68da:	7870      	ldrb	r0, [r6, #1]
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
                    wsect += fs->fsize;
    68dc:	441f      	add	r7, r3
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    68de:	f10a 3aff 	add.w	sl, sl, #4294967295
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    68e2:	463a      	mov	r2, r7
    68e4:	4659      	mov	r1, fp
    68e6:	2301      	movs	r3, #1
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    68e8:	fa5f fa8a 	uxtb.w	sl, sl
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    68ec:	f7fc fca4 	bl	3238 <disk_write>
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    68f0:	f1ba 0f01 	cmp.w	sl, #1
    68f4:	d1f0      	bne.n	68d8 <create_chain+0x148>
                    disk_write(fs->drv, fs->win, wsect, 1);
                }
            }
        }
#endif
        if (sector) {
    68f6:	f1b8 0f00 	cmp.w	r8, #0
    68fa:	d0b8      	beq.n	686e <create_chain+0xde>
            if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    68fc:	7870      	ldrb	r0, [r6, #1]
    68fe:	4659      	mov	r1, fp
    6900:	4642      	mov	r2, r8
    6902:	2301      	movs	r3, #1
    6904:	f7fc fc4a 	bl	319c <disk_read>
    6908:	2800      	cmp	r0, #0
    690a:	f47f af67 	bne.w	67dc <create_chain+0x4c>
                return FR_DISK_ERR;
            fs->winsect = sector;
    690e:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
    6912:	6a72      	ldr	r2, [r6, #36]	; 0x24
    6914:	e7ae      	b.n	6874 <create_chain+0xe4>
        if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
        p = &fs->win[clst * 2 % SS(fs)];
        return LD_WORD(p);

    case FS_FAT32 :
        if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    6916:	6a75      	ldr	r5, [r6, #36]	; 0x24
)                   /* Move to zero only writes back dirty window */
{
    DWORD wsect;


    wsect = fs->winsect;
    6918:	f8d6 8030 	ldr.w	r8, [r6, #48]	; 0x30
        if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
        p = &fs->win[clst * 2 % SS(fs)];
        return LD_WORD(p);

    case FS_FAT32 :
        if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    691c:	eb05 15d4 	add.w	r5, r5, r4, lsr #7
{
    DWORD wsect;


    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
    6920:	4545      	cmp	r5, r8
    6922:	d002      	beq.n	692a <create_chain+0x19a>
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
    6924:	7933      	ldrb	r3, [r6, #4]
    6926:	b9ab      	cbnz	r3, 6954 <create_chain+0x1c4>
                    disk_write(fs->drv, fs->win, wsect, 1);
                }
            }
        }
#endif
        if (sector) {
    6928:	bbad      	cbnz	r5, 6996 <create_chain+0x206>
        p = &fs->win[clst * 2 % SS(fs)];
        return LD_WORD(p);

    case FS_FAT32 :
        if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
        p = &fs->win[clst * 4 % SS(fs)];
    692a:	00a3      	lsls	r3, r4, #2
    692c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
    6930:	18f1      	adds	r1, r6, r3
        return LD_DWORD(p) & 0x0FFFFFFF;
    6932:	f891 2037 	ldrb.w	r2, [r1, #55]	; 0x37
    6936:	f891 5036 	ldrb.w	r5, [r1, #54]	; 0x36
    693a:	f891 0035 	ldrb.w	r0, [r1, #53]	; 0x35
    693e:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
    6942:	0612      	lsls	r2, r2, #24
    6944:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    6948:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    694c:	4318      	orrs	r0, r3
    694e:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
    6952:	e772      	b.n	683a <create_chain+0xaa>

    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    6954:	7870      	ldrb	r0, [r6, #1]
    6956:	4659      	mov	r1, fp
    6958:	4642      	mov	r2, r8
    695a:	2301      	movs	r3, #1
    695c:	f7fc fc6c 	bl	3238 <disk_write>
    6960:	2800      	cmp	r0, #0
    6962:	f47f af3b 	bne.w	67dc <create_chain+0x4c>
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    6966:	6a33      	ldr	r3, [r6, #32]
    6968:	6a72      	ldr	r2, [r6, #36]	; 0x24
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
    696a:	7130      	strb	r0, [r6, #4]
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    696c:	441a      	add	r2, r3
    696e:	4590      	cmp	r8, r2
    6970:	d2da      	bcs.n	6928 <create_chain+0x198>
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    6972:	78f7      	ldrb	r7, [r6, #3]
    6974:	2f01      	cmp	r7, #1
    6976:	d801      	bhi.n	697c <create_chain+0x1ec>
    6978:	e7d6      	b.n	6928 <create_chain+0x198>
    697a:	6a33      	ldr	r3, [r6, #32]
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    697c:	7870      	ldrb	r0, [r6, #1]
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
                    wsect += fs->fsize;
    697e:	4498      	add	r8, r3
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    6980:	3f01      	subs	r7, #1
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    6982:	4642      	mov	r2, r8
    6984:	4659      	mov	r1, fp
    6986:	2301      	movs	r3, #1
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    6988:	b2ff      	uxtb	r7, r7
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    698a:	f7fc fc55 	bl	3238 <disk_write>
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    698e:	2f01      	cmp	r7, #1
    6990:	d1f3      	bne.n	697a <create_chain+0x1ea>
                    disk_write(fs->drv, fs->win, wsect, 1);
                }
            }
        }
#endif
        if (sector) {
    6992:	2d00      	cmp	r5, #0
    6994:	d0c9      	beq.n	692a <create_chain+0x19a>
            if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    6996:	7870      	ldrb	r0, [r6, #1]
    6998:	4659      	mov	r1, fp
    699a:	462a      	mov	r2, r5
    699c:	2301      	movs	r3, #1
    699e:	f7fc fbfd 	bl	319c <disk_read>
    69a2:	2800      	cmp	r0, #0
    69a4:	f47f af1a 	bne.w	67dc <create_chain+0x4c>
                return FR_DISK_ERR;
            fs->winsect = sector;
    69a8:	6335      	str	r5, [r6, #48]	; 0x30
    69aa:	e7be      	b.n	692a <create_chain+0x19a>

    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    69ac:	7870      	ldrb	r0, [r6, #1]
    69ae:	4659      	mov	r1, fp
    69b0:	4642      	mov	r2, r8
    69b2:	2301      	movs	r3, #1
    69b4:	f7fc fc40 	bl	3238 <disk_write>
    69b8:	2800      	cmp	r0, #0
    69ba:	f47f af0f 	bne.w	67dc <create_chain+0x4c>
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    69be:	6a33      	ldr	r3, [r6, #32]
    69c0:	6a72      	ldr	r2, [r6, #36]	; 0x24
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
    69c2:	7130      	strb	r0, [r6, #4]
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    69c4:	441a      	add	r2, r3
    69c6:	4590      	cmp	r8, r2
    69c8:	f4bf af2a 	bcs.w	6820 <create_chain+0x90>
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    69cc:	78f7      	ldrb	r7, [r6, #3]
    69ce:	2f01      	cmp	r7, #1
    69d0:	d801      	bhi.n	69d6 <create_chain+0x246>
    69d2:	e725      	b.n	6820 <create_chain+0x90>
    69d4:	6a33      	ldr	r3, [r6, #32]
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    69d6:	7870      	ldrb	r0, [r6, #1]
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
                    wsect += fs->fsize;
    69d8:	4498      	add	r8, r3
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    69da:	3f01      	subs	r7, #1
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    69dc:	4642      	mov	r2, r8
    69de:	4659      	mov	r1, fp
    69e0:	2301      	movs	r3, #1
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    69e2:	b2ff      	uxtb	r7, r7
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    69e4:	f7fc fc28 	bl	3238 <disk_write>
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    69e8:	2f01      	cmp	r7, #1
    69ea:	d1f3      	bne.n	69d4 <create_chain+0x244>
                    disk_write(fs->drv, fs->win, wsect, 1);
                }
            }
        }
#endif
        if (sector) {
    69ec:	2d00      	cmp	r5, #0
    69ee:	f43f af1a 	beq.w	6826 <create_chain+0x96>
            if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    69f2:	7870      	ldrb	r0, [r6, #1]
    69f4:	4659      	mov	r1, fp
    69f6:	462a      	mov	r2, r5
    69f8:	2301      	movs	r3, #1
    69fa:	f7fc fbcf 	bl	319c <disk_read>
    69fe:	2800      	cmp	r0, #0
    6a00:	f47f aeec 	bne.w	67dc <create_chain+0x4c>
                return FR_DISK_ERR;
            fs->winsect = sector;
    6a04:	6335      	str	r5, [r6, #48]	; 0x30
    6a06:	e70e      	b.n	6826 <create_chain+0x96>
{
    DWORD wsect;


    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
    6a08:	46b8      	mov	r8, r7
    6a0a:	e733      	b.n	6874 <create_chain+0xe4>
    ncl = scl;              /* Start cluster */
    for (;;) {
        ncl++;                          /* Next cluster */
        if (ncl >= fs->n_fatent) {      /* Wrap around */
            ncl = 2;
            if (ncl > scl) return 0;    /* No free cluster */
    6a0c:	2000      	movs	r0, #0
    6a0e:	e6f1      	b.n	67f4 <create_chain+0x64>
    6a10:	f7ff fd22 	bl	6458 <get_fat.part.3>
        scl = fs->last_clust;           /* Get suggested start point */
        if (!scl || scl >= fs->n_fatent) scl = 1;
    }
    else {                  /* Stretch the current chain */
        cs = get_fat(fs, clst);         /* Check the cluster status */
        if (cs < 2) return 1;           /* It is an invalid cluster */
    6a14:	2801      	cmp	r0, #1
    6a16:	f67f aeec 	bls.w	67f2 <create_chain+0x62>
        if (cs < fs->n_fatent) return cs;   /* It is already followed by next cluster */
    6a1a:	69f3      	ldr	r3, [r6, #28]
    6a1c:	4283      	cmp	r3, r0
    6a1e:	f63f aee9 	bhi.w	67f4 <create_chain+0x64>
    6a22:	f8dd 9000 	ldr.w	r9, [sp]
    6a26:	e6c3      	b.n	67b0 <create_chain+0x20>
                }
            }
        }
#endif
        if (sector) {
            if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    6a28:	7870      	ldrb	r0, [r6, #1]
    6a2a:	4659      	mov	r1, fp
    6a2c:	4652      	mov	r2, sl
    6a2e:	2301      	movs	r3, #1
    6a30:	f7fc fbb4 	bl	319c <disk_read>
    6a34:	2800      	cmp	r0, #0
    6a36:	f47f aed1 	bne.w	67dc <create_chain+0x4c>
                return FR_DISK_ERR;
            fs->winsect = sector;
    6a3a:	f8c6 a030 	str.w	sl, [r6, #48]	; 0x30
    6a3e:	e72c      	b.n	689a <create_chain+0x10a>

    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    6a40:	7870      	ldrb	r0, [r6, #1]
    6a42:	4659      	mov	r1, fp
    6a44:	4642      	mov	r2, r8
    6a46:	2301      	movs	r3, #1
    6a48:	f7fc fbf6 	bl	3238 <disk_write>
    6a4c:	2800      	cmp	r0, #0
    6a4e:	f47f aec5 	bne.w	67dc <create_chain+0x4c>
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    6a52:	6a33      	ldr	r3, [r6, #32]
    6a54:	6a72      	ldr	r2, [r6, #36]	; 0x24
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
    6a56:	7130      	strb	r0, [r6, #4]
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    6a58:	441a      	add	r2, r3
    6a5a:	4542      	cmp	r2, r8
    6a5c:	f67f af19 	bls.w	6892 <create_chain+0x102>
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    6a60:	f896 c003 	ldrb.w	ip, [r6, #3]
    6a64:	f1bc 0f01 	cmp.w	ip, #1
    6a68:	f67f af13 	bls.w	6892 <create_chain+0x102>
    6a6c:	4632      	mov	r2, r6
    6a6e:	9401      	str	r4, [sp, #4]
    6a70:	462e      	mov	r6, r5
    6a72:	4644      	mov	r4, r8
    6a74:	4615      	mov	r5, r2
    6a76:	46e0      	mov	r8, ip
    6a78:	e000      	b.n	6a7c <create_chain+0x2ec>
    6a7a:	6a2b      	ldr	r3, [r5, #32]
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    6a7c:	7868      	ldrb	r0, [r5, #1]
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
                    wsect += fs->fsize;
    6a7e:	441c      	add	r4, r3
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    6a80:	f108 38ff 	add.w	r8, r8, #4294967295
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    6a84:	4622      	mov	r2, r4
    6a86:	4659      	mov	r1, fp
    6a88:	2301      	movs	r3, #1
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    6a8a:	fa5f f888 	uxtb.w	r8, r8
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    6a8e:	f7fc fbd3 	bl	3238 <disk_write>
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    6a92:	f1b8 0f01 	cmp.w	r8, #1
    6a96:	d1f0      	bne.n	6a7a <create_chain+0x2ea>
    6a98:	462b      	mov	r3, r5
    6a9a:	9c01      	ldr	r4, [sp, #4]
    6a9c:	4635      	mov	r5, r6
    6a9e:	461e      	mov	r6, r3
                    disk_write(fs->drv, fs->win, wsect, 1);
                }
            }
        }
#endif
        if (sector) {
    6aa0:	f1ba 0f00 	cmp.w	sl, #0
    6aa4:	f43f aef9 	beq.w	689a <create_chain+0x10a>
    6aa8:	e7be      	b.n	6a28 <create_chain+0x298>
        bc = (UINT)clst; bc += bc / 2;
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
        wc = fs->win[bc % SS(fs)]; bc++;
        if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
        wc |= fs->win[bc % SS(fs)] << 8;
        return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    6aaa:	f3c5 000b 	ubfx	r0, r5, #0, #12
    6aae:	e6c4      	b.n	683a <create_chain+0xaa>
    UINT bc;
    BYTE *p;
    FRESULT res;


    if (clst < 2 || clst >= fs->n_fatent) { /* Check range */
    6ab0:	69f3      	ldr	r3, [r6, #28]
    6ab2:	42a3      	cmp	r3, r4
    6ab4:	f67f ae9d 	bls.w	67f2 <create_chain+0x62>
    6ab8:	4630      	mov	r0, r6
    6aba:	4621      	mov	r1, r4
    6abc:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    6ac0:	f7ff f9ee 	bl	5ea0 <put_fat.part.4>
            return cs;
        if (ncl == scl) return 0;       /* No free cluster */
    }

    res = put_fat(fs, ncl, 0x0FFFFFFF); /* Mark the new cluster "last link" */
    if (res == FR_OK && clst != 0) {
    6ac4:	b9c8      	cbnz	r0, 6afa <create_chain+0x36a>
    6ac6:	9b00      	ldr	r3, [sp, #0]
    6ac8:	b16b      	cbz	r3, 6ae6 <create_chain+0x356>
    UINT bc;
    BYTE *p;
    FRESULT res;


    if (clst < 2 || clst >= fs->n_fatent) { /* Check range */
    6aca:	2b01      	cmp	r3, #1
    6acc:	461a      	mov	r2, r3
    6ace:	f67f ae90 	bls.w	67f2 <create_chain+0x62>
    6ad2:	69f3      	ldr	r3, [r6, #28]
    6ad4:	429a      	cmp	r2, r3
    6ad6:	f4bf ae8c 	bcs.w	67f2 <create_chain+0x62>
    6ada:	4611      	mov	r1, r2
    6adc:	4630      	mov	r0, r6
    6ade:	4622      	mov	r2, r4
    6ae0:	f7ff f9de 	bl	5ea0 <put_fat.part.4>

    res = put_fat(fs, ncl, 0x0FFFFFFF); /* Mark the new cluster "last link" */
    if (res == FR_OK && clst != 0) {
        res = put_fat(fs, clst, ncl);   /* Link it to the previous one if needed */
    }
    if (res == FR_OK) {
    6ae4:	b948      	cbnz	r0, 6afa <create_chain+0x36a>
        fs->last_clust = ncl;           /* Update FSINFO */
        if (fs->free_clust != 0xFFFFFFFF) {
    6ae6:	6933      	ldr	r3, [r6, #16]
    res = put_fat(fs, ncl, 0x0FFFFFFF); /* Mark the new cluster "last link" */
    if (res == FR_OK && clst != 0) {
        res = put_fat(fs, clst, ncl);   /* Link it to the previous one if needed */
    }
    if (res == FR_OK) {
        fs->last_clust = ncl;           /* Update FSINFO */
    6ae8:	60f4      	str	r4, [r6, #12]
        if (fs->free_clust != 0xFFFFFFFF) {
    6aea:	1c5a      	adds	r2, r3, #1
    6aec:	d009      	beq.n	6b02 <create_chain+0x372>
            fs->free_clust--;
    6aee:	3b01      	subs	r3, #1
            fs->fsi_flag = 1;
    6af0:	2201      	movs	r2, #1
        res = put_fat(fs, clst, ncl);   /* Link it to the previous one if needed */
    }
    if (res == FR_OK) {
        fs->last_clust = ncl;           /* Update FSINFO */
        if (fs->free_clust != 0xFFFFFFFF) {
            fs->free_clust--;
    6af2:	6133      	str	r3, [r6, #16]
            fs->fsi_flag = 1;
    6af4:	4620      	mov	r0, r4
    6af6:	7172      	strb	r2, [r6, #5]
    6af8:	e67c      	b.n	67f4 <create_chain+0x64>
        }
    } else {
        ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    6afa:	2801      	cmp	r0, #1
    6afc:	f47f ae79 	bne.w	67f2 <create_chain+0x62>
    6b00:	e66c      	b.n	67dc <create_chain+0x4c>
    6b02:	4620      	mov	r0, r4
    6b04:	e676      	b.n	67f4 <create_chain+0x64>
    6b06:	bf00      	nop

00006b08 <dir_next.constprop.11>:
/*-----------------------------------------------------------------------*/
/* Directory handling - Move directory index next                        */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_next (  /* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
    6b08:	b570      	push	{r4, r5, r6, lr}
    DWORD clst;
    WORD i;


    stretch = stretch;      /* To suppress warning on read-only cfg. */
    i = dj->index + 1;
    6b0a:	88c4      	ldrh	r4, [r0, #6]
    6b0c:	3401      	adds	r4, #1
    6b0e:	b2a4      	uxth	r4, r4
    if (!i || !dj->sect)    /* Report EOT when index has reached 65535 */
    6b10:	b90c      	cbnz	r4, 6b16 <dir_next.constprop.11+0xe>
        return FR_NO_FILE;
    6b12:	2004      	movs	r0, #4
    6b14:	bd70      	pop	{r4, r5, r6, pc}
    WORD i;


    stretch = stretch;      /* To suppress warning on read-only cfg. */
    i = dj->index + 1;
    if (!i || !dj->sect)    /* Report EOT when index has reached 65535 */
    6b16:	6903      	ldr	r3, [r0, #16]
    6b18:	2b00      	cmp	r3, #0
    6b1a:	d0fa      	beq.n	6b12 <dir_next.constprop.11+0xa>
        return FR_NO_FILE;

    if (!(i % (SS(dj->fs) / SZ_DIR))) { /* Sector changed? */
    6b1c:	f014 060f 	ands.w	r6, r4, #15
    6b20:	4605      	mov	r5, r0
    6b22:	d007      	beq.n	6b34 <dir_next.constprop.11+0x2c>
    6b24:	6803      	ldr	r3, [r0, #0]
                dj->sect = clust2sect(dj->fs, clst);
            }
        }
    }

    dj->index = i;
    6b26:	80ec      	strh	r4, [r5, #6]
    dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    6b28:	eb03 1346 	add.w	r3, r3, r6, lsl #5
    6b2c:	3334      	adds	r3, #52	; 0x34
    6b2e:	616b      	str	r3, [r5, #20]

    return FR_OK;
    6b30:	2000      	movs	r0, #0
    6b32:	bd70      	pop	{r4, r5, r6, pc}
        return FR_NO_FILE;

    if (!(i % (SS(dj->fs) / SZ_DIR))) { /* Sector changed? */
        dj->sect++;                 /* Next sector */

        if (dj->clust == 0) {   /* Static table */
    6b34:	68c1      	ldr	r1, [r0, #12]
    i = dj->index + 1;
    if (!i || !dj->sect)    /* Report EOT when index has reached 65535 */
        return FR_NO_FILE;

    if (!(i % (SS(dj->fs) / SZ_DIR))) { /* Sector changed? */
        dj->sect++;                 /* Next sector */
    6b36:	3301      	adds	r3, #1
    6b38:	6103      	str	r3, [r0, #16]

        if (dj->clust == 0) {   /* Static table */
            if (i >= dj->fs->n_rootdir) /* Report EOT when end of table */
    6b3a:	6803      	ldr	r3, [r0, #0]
        return FR_NO_FILE;

    if (!(i % (SS(dj->fs) / SZ_DIR))) { /* Sector changed? */
        dj->sect++;                 /* Next sector */

        if (dj->clust == 0) {   /* Static table */
    6b3c:	b159      	cbz	r1, 6b56 <dir_next.constprop.11+0x4e>
            if (i >= dj->fs->n_rootdir) /* Report EOT when end of table */
                return FR_NO_FILE;
        }
        else {                  /* Dynamic table */
            if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) { /* Cluster changed? */
    6b3e:	789a      	ldrb	r2, [r3, #2]
    6b40:	3a01      	subs	r2, #1
    6b42:	ea12 1214 	ands.w	r2, r2, r4, lsr #4
    6b46:	d1ee      	bne.n	6b26 <dir_next.constprop.11+0x1e>
{
    UINT wc, bc;
    BYTE *p;


    if (clst < 2 || clst >= fs->n_fatent)   /* Chack range */
    6b48:	2901      	cmp	r1, #1
    6b4a:	d902      	bls.n	6b52 <dir_next.constprop.11+0x4a>
    6b4c:	69da      	ldr	r2, [r3, #28]
    6b4e:	4291      	cmp	r1, r2
    6b50:	d305      	bcc.n	6b5e <dir_next.constprop.11+0x56>
                return FR_NO_FILE;
        }
        else {                  /* Dynamic table */
            if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) { /* Cluster changed? */
                clst = get_fat(dj->fs, dj->clust);              /* Get next cluster */
                if (clst <= 1) return FR_INT_ERR;
    6b52:	2002      	movs	r0, #2
    6b54:	bd70      	pop	{r4, r5, r6, pc}

    if (!(i % (SS(dj->fs) / SZ_DIR))) { /* Sector changed? */
        dj->sect++;                 /* Next sector */

        if (dj->clust == 0) {   /* Static table */
            if (i >= dj->fs->n_rootdir) /* Report EOT when end of table */
    6b56:	891a      	ldrh	r2, [r3, #8]
    6b58:	42a2      	cmp	r2, r4
    6b5a:	d9da      	bls.n	6b12 <dir_next.constprop.11+0xa>
    6b5c:	e7e3      	b.n	6b26 <dir_next.constprop.11+0x1e>
    6b5e:	4618      	mov	r0, r3
    6b60:	f7ff fc7a 	bl	6458 <get_fat.part.3>
                return FR_NO_FILE;
        }
        else {                  /* Dynamic table */
            if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) { /* Cluster changed? */
                clst = get_fat(dj->fs, dj->clust);              /* Get next cluster */
                if (clst <= 1) return FR_INT_ERR;
    6b64:	2801      	cmp	r0, #1
    6b66:	d9f4      	bls.n	6b52 <dir_next.constprop.11+0x4a>
                if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    6b68:	1c43      	adds	r3, r0, #1
    6b6a:	d00f      	beq.n	6b8c <dir_next.constprop.11+0x84>
                if (clst >= dj->fs->n_fatent) {                 /* When it reached end of dynamic table */
    6b6c:	682b      	ldr	r3, [r5, #0]
    6b6e:	69da      	ldr	r2, [r3, #28]
    6b70:	4290      	cmp	r0, r2
    6b72:	d2ce      	bcs.n	6b12 <dir_next.constprop.11+0xa>
DWORD clust2sect (  /* !=0: Sector number, 0: Failed - invalid cluster# */
    FATFS *fs,      /* File system object */
    DWORD clst      /* Cluster# to be converted */
)
{
    clst -= 2;
    6b74:	1e81      	subs	r1, r0, #2
    if (clst >= (fs->n_fatent - 2)) return 0;       /* Invalid cluster# */
    6b76:	3a02      	subs	r2, #2
    6b78:	4291      	cmp	r1, r2
                    dj->fs->winsect -= c;                       /* Rewind window address */
#else
                    return FR_NO_FILE;          /* Report EOT */
#endif
                }
                dj->clust = clst;               /* Initialize data for new cluster */
    6b7a:	60e8      	str	r0, [r5, #12]
    DWORD clst      /* Cluster# to be converted */
)
{
    clst -= 2;
    if (clst >= (fs->n_fatent - 2)) return 0;       /* Invalid cluster# */
    return clst * fs->csize + fs->database;
    6b7c:	bf3b      	ittet	cc
    6b7e:	7898      	ldrbcc	r0, [r3, #2]
    6b80:	6ada      	ldrcc	r2, [r3, #44]	; 0x2c
    FATFS *fs,      /* File system object */
    DWORD clst      /* Cluster# to be converted */
)
{
    clst -= 2;
    if (clst >= (fs->n_fatent - 2)) return 0;       /* Invalid cluster# */
    6b82:	2100      	movcs	r1, #0
    return clst * fs->csize + fs->database;
    6b84:	fb00 2101 	mlacc	r1, r0, r1, r2
#else
                    return FR_NO_FILE;          /* Report EOT */
#endif
                }
                dj->clust = clst;               /* Initialize data for new cluster */
                dj->sect = clust2sect(dj->fs, clst);
    6b88:	6129      	str	r1, [r5, #16]
    6b8a:	e7cc      	b.n	6b26 <dir_next.constprop.11+0x1e>
        }
        else {                  /* Dynamic table */
            if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) { /* Cluster changed? */
                clst = get_fat(dj->fs, dj->clust);              /* Get next cluster */
                if (clst <= 1) return FR_INT_ERR;
                if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    6b8c:	2001      	movs	r0, #1

    dj->index = i;
    dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;

    return FR_OK;
}
    6b8e:	bd70      	pop	{r4, r5, r6, pc}

00006b90 <dir_find.part.5>:
/*-----------------------------------------------------------------------*/
/* Directory handling - Find an object in the directory                  */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_find (
    6b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6b94:	27ff      	movs	r7, #255	; 0xff
    6b96:	6805      	ldr	r5, [r0, #0]
    6b98:	f8d0 a010 	ldr.w	sl, [r0, #16]
    6b9c:	b083      	sub	sp, #12
    6b9e:	4681      	mov	r9, r0
    6ba0:	463e      	mov	r6, r7
)                   /* Move to zero only writes back dirty window */
{
    DWORD wsect;


    wsect = fs->winsect;
    6ba2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
    if (wsect != sector) {  /* Changed current window */
    6ba4:	45a2      	cmp	sl, r4
    6ba6:	d004      	beq.n	6bb2 <dir_find.part.5+0x22>
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
    6ba8:	792b      	ldrb	r3, [r5, #4]
    6baa:	b9e3      	cbnz	r3, 6be6 <dir_find.part.5+0x56>
                    disk_write(fs->drv, fs->win, wsect, 1);
                }
            }
        }
#endif
        if (sector) {
    6bac:	f1ba 0f00 	cmp.w	sl, #0
    6bb0:	d142      	bne.n	6c38 <dir_find.part.5+0xa8>
    ord = sum = 0xFF;
#endif
    do {
        res = move_window(dj->fs, dj->sect);
        if (res != FR_OK) break;
        dir = dj->dir;                  /* Ptr to the directory entry of current index */
    6bb2:	f8d9 4014 	ldr.w	r4, [r9, #20]
        c = dir[DIR_Name];
    6bb6:	7823      	ldrb	r3, [r4, #0]
        if (c == 0) { res = FR_NO_FILE; break; }    /* Reached to end of table */
    6bb8:	b18b      	cbz	r3, 6bde <dir_find.part.5+0x4e>
#if _USE_LFN    /* LFN configuration */
        a = dir[DIR_Attr] & AM_MASK;
    6bba:	7ae2      	ldrb	r2, [r4, #11]
        if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {    /* An entry without valid data */
    6bbc:	2be5      	cmp	r3, #229	; 0xe5
        if (res != FR_OK) break;
        dir = dj->dir;                  /* Ptr to the directory entry of current index */
        c = dir[DIR_Name];
        if (c == 0) { res = FR_NO_FILE; break; }    /* Reached to end of table */
#if _USE_LFN    /* LFN configuration */
        a = dir[DIR_Attr] & AM_MASK;
    6bbe:	f002 013f 	and.w	r1, r2, #63	; 0x3f
        if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {    /* An entry without valid data */
    6bc2:	d004      	beq.n	6bce <dir_find.part.5+0x3e>
    6bc4:	0715      	lsls	r5, r2, #28
    6bc6:	d544      	bpl.n	6c52 <dir_find.part.5+0xc2>
    6bc8:	290f      	cmp	r1, #15
    6bca:	f000 80ed 	beq.w	6da8 <dir_find.part.5+0x218>
                    /* Check validity of the LFN entry and compare it with given name */
                    ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
                }
            } else {                    /* An SFN entry is found */
                if (!ord && sum == sum_sfn(dir)) break; /* LFN matched? */
                ord = 0xFF; dj->lfn_idx = 0xFFFF;   /* Reset LFN sequence */
    6bce:	26ff      	movs	r6, #255	; 0xff
    DWORD clst;
    WORD i;


    stretch = stretch;      /* To suppress warning on read-only cfg. */
    i = dj->index + 1;
    6bd0:	f8b9 4006 	ldrh.w	r4, [r9, #6]
    6bd4:	3401      	adds	r4, #1
    6bd6:	b2a4      	uxth	r4, r4
    if (!i || !dj->sect)    /* Report EOT when index has reached 65535 */
    6bd8:	2c00      	cmp	r4, #0
    6bda:	f040 80cf 	bne.w	6d7c <dir_find.part.5+0x1ec>
        return FR_NO_FILE;
    6bde:	2004      	movs	r0, #4
#endif
        res = dir_next(dj, 0);      /* Next entry */
    } while (res == FR_OK);

    return res;
}
    6be0:	b003      	add	sp, #12
    6be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    6be6:	f105 0b34 	add.w	fp, r5, #52	; 0x34
    6bea:	4659      	mov	r1, fp
    6bec:	7868      	ldrb	r0, [r5, #1]
    6bee:	4622      	mov	r2, r4
    6bf0:	2301      	movs	r3, #1
    6bf2:	f7fc fb21 	bl	3238 <disk_write>
    6bf6:	2800      	cmp	r0, #0
    6bf8:	f040 80d4 	bne.w	6da4 <dir_find.part.5+0x214>
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    6bfc:	6a2b      	ldr	r3, [r5, #32]
    6bfe:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
    6c00:	7128      	strb	r0, [r5, #4]
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    6c02:	441a      	add	r2, r3
    6c04:	4294      	cmp	r4, r2
    6c06:	d2d1      	bcs.n	6bac <dir_find.part.5+0x1c>
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    6c08:	f895 8003 	ldrb.w	r8, [r5, #3]
    6c0c:	f1b8 0f01 	cmp.w	r8, #1
    6c10:	d801      	bhi.n	6c16 <dir_find.part.5+0x86>
    6c12:	e7cb      	b.n	6bac <dir_find.part.5+0x1c>
    6c14:	6a2b      	ldr	r3, [r5, #32]
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    6c16:	7868      	ldrb	r0, [r5, #1]
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
                    wsect += fs->fsize;
    6c18:	441c      	add	r4, r3
                    disk_write(fs->drv, fs->win, wsect, 1);
    6c1a:	4622      	mov	r2, r4
    6c1c:	4659      	mov	r1, fp
    6c1e:	2301      	movs	r3, #1
    6c20:	f7fc fb0a 	bl	3238 <disk_write>
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    6c24:	f108 3cff 	add.w	ip, r8, #4294967295
    6c28:	fa5f f88c 	uxtb.w	r8, ip
    6c2c:	f1b8 0f01 	cmp.w	r8, #1
    6c30:	d1f0      	bne.n	6c14 <dir_find.part.5+0x84>
                    disk_write(fs->drv, fs->win, wsect, 1);
                }
            }
        }
#endif
        if (sector) {
    6c32:	f1ba 0f00 	cmp.w	sl, #0
    6c36:	d0bc      	beq.n	6bb2 <dir_find.part.5+0x22>
            if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    6c38:	7868      	ldrb	r0, [r5, #1]
    6c3a:	f105 0134 	add.w	r1, r5, #52	; 0x34
    6c3e:	4652      	mov	r2, sl
    6c40:	2301      	movs	r3, #1
    6c42:	f7fc faab 	bl	319c <disk_read>
    6c46:	2800      	cmp	r0, #0
    6c48:	f040 80ac 	bne.w	6da4 <dir_find.part.5+0x214>
                return FR_DISK_ERR;
            fs->winsect = sector;
    6c4c:	f8c5 a030 	str.w	sl, [r5, #48]	; 0x30
    6c50:	e7af      	b.n	6bb2 <dir_find.part.5+0x22>
#if _USE_LFN    /* LFN configuration */
        a = dir[DIR_Attr] & AM_MASK;
        if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {    /* An entry without valid data */
            ord = 0xFF;
        } else {
            if (a == AM_LFN) {          /* An LFN entry is found */
    6c52:	290f      	cmp	r1, #15
    6c54:	f000 80a8 	beq.w	6da8 <dir_find.part.5+0x218>
                    }
                    /* Check validity of the LFN entry and compare it with given name */
                    ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
                }
            } else {                    /* An SFN entry is found */
                if (!ord && sum == sum_sfn(dir)) break; /* LFN matched? */
    6c58:	2e00      	cmp	r6, #0
    6c5a:	d14a      	bne.n	6cf2 <dir_find.part.5+0x162>
)
{
    BYTE sum = 0;
    UINT n = 11;

    do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    6c5c:	f894 c001 	ldrb.w	ip, [r4, #1]
    6c60:	f894 a002 	ldrb.w	sl, [r4, #2]
    6c64:	f894 e003 	ldrb.w	lr, [r4, #3]
    6c68:	7926      	ldrb	r6, [r4, #4]
    6c6a:	7960      	ldrb	r0, [r4, #5]
    6c6c:	79a5      	ldrb	r5, [r4, #6]
    6c6e:	79e1      	ldrb	r1, [r4, #7]
    6c70:	7a22      	ldrb	r2, [r4, #8]
    6c72:	ea4f 1bc3 	mov.w	fp, r3, lsl #7
    6c76:	ea4b 0353 	orr.w	r3, fp, r3, lsr #1
    6c7a:	4463      	add	r3, ip
    6c7c:	f3c3 0c46 	ubfx	ip, r3, #1, #7
    6c80:	ea4c 13c3 	orr.w	r3, ip, r3, lsl #7
    6c84:	fa5a f383 	uxtab	r3, sl, r3
    6c88:	f3c3 0c46 	ubfx	ip, r3, #1, #7
    6c8c:	ea4c 13c3 	orr.w	r3, ip, r3, lsl #7
    6c90:	fa5e fe83 	uxtab	lr, lr, r3
    6c94:	f3ce 0346 	ubfx	r3, lr, #1, #7
    6c98:	ea43 13ce 	orr.w	r3, r3, lr, lsl #7
    6c9c:	fa56 fe83 	uxtab	lr, r6, r3
    6ca0:	f3ce 0646 	ubfx	r6, lr, #1, #7
    6ca4:	ea46 16ce 	orr.w	r6, r6, lr, lsl #7
    6ca8:	fa50 f086 	uxtab	r0, r0, r6
    6cac:	f3c0 0646 	ubfx	r6, r0, #1, #7
    6cb0:	ea46 10c0 	orr.w	r0, r6, r0, lsl #7
    6cb4:	fa55 f580 	uxtab	r5, r5, r0
    6cb8:	f3c5 0046 	ubfx	r0, r5, #1, #7
    6cbc:	ea40 10c5 	orr.w	r0, r0, r5, lsl #7
    6cc0:	fa51 f380 	uxtab	r3, r1, r0
    6cc4:	f3c3 0046 	ubfx	r0, r3, #1, #7
    6cc8:	ea40 13c3 	orr.w	r3, r0, r3, lsl #7
    6ccc:	fa52 f183 	uxtab	r1, r2, r3
    6cd0:	f3c1 0246 	ubfx	r2, r1, #1, #7
    6cd4:	7a63      	ldrb	r3, [r4, #9]
    6cd6:	7aa0      	ldrb	r0, [r4, #10]
    6cd8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    6cdc:	fa53 f382 	uxtab	r3, r3, r2
    6ce0:	f3c3 0246 	ubfx	r2, r3, #1, #7
    6ce4:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
    6ce8:	fa50 f383 	uxtab	r3, r0, r3
                    }
                    /* Check validity of the LFN entry and compare it with given name */
                    ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
                }
            } else {                    /* An SFN entry is found */
                if (!ord && sum == sum_sfn(dir)) break; /* LFN matched? */
    6cec:	b2db      	uxtb	r3, r3
    6cee:	42bb      	cmp	r3, r7
    6cf0:	d040      	beq.n	6d74 <dir_find.part.5+0x1e4>
                ord = 0xFF; dj->lfn_idx = 0xFFFF;   /* Reset LFN sequence */
    6cf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
                if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;    /* SFN matched? */
    6cf6:	f8d9 3018 	ldr.w	r3, [r9, #24]
                    /* Check validity of the LFN entry and compare it with given name */
                    ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
                }
            } else {                    /* An SFN entry is found */
                if (!ord && sum == sum_sfn(dir)) break; /* LFN matched? */
                ord = 0xFF; dj->lfn_idx = 0xFFFF;   /* Reset LFN sequence */
    6cfa:	f8a9 2020 	strh.w	r2, [r9, #32]
                if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;    /* SFN matched? */
    6cfe:	7ada      	ldrb	r2, [r3, #11]
    6d00:	07d2      	lsls	r2, r2, #31
    6d02:	f53f af64 	bmi.w	6bce <dir_find.part.5+0x3e>
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
    const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    int r = 0;

    while (cnt-- && (r = *d++ - *s++) == 0) ;
    6d06:	7821      	ldrb	r1, [r4, #0]
    6d08:	781a      	ldrb	r2, [r3, #0]
    6d0a:	4291      	cmp	r1, r2
    6d0c:	f47f af5f 	bne.w	6bce <dir_find.part.5+0x3e>
    6d10:	7861      	ldrb	r1, [r4, #1]
    6d12:	785a      	ldrb	r2, [r3, #1]
    6d14:	4291      	cmp	r1, r2
    6d16:	f47f af5a 	bne.w	6bce <dir_find.part.5+0x3e>
    6d1a:	78a1      	ldrb	r1, [r4, #2]
    6d1c:	789a      	ldrb	r2, [r3, #2]
    6d1e:	4291      	cmp	r1, r2
    6d20:	f47f af55 	bne.w	6bce <dir_find.part.5+0x3e>
    6d24:	78e1      	ldrb	r1, [r4, #3]
    6d26:	78da      	ldrb	r2, [r3, #3]
    6d28:	4291      	cmp	r1, r2
    6d2a:	f47f af50 	bne.w	6bce <dir_find.part.5+0x3e>
    6d2e:	7921      	ldrb	r1, [r4, #4]
    6d30:	791a      	ldrb	r2, [r3, #4]
    6d32:	4291      	cmp	r1, r2
    6d34:	f47f af4b 	bne.w	6bce <dir_find.part.5+0x3e>
    6d38:	7961      	ldrb	r1, [r4, #5]
    6d3a:	795a      	ldrb	r2, [r3, #5]
    6d3c:	4291      	cmp	r1, r2
    6d3e:	f47f af46 	bne.w	6bce <dir_find.part.5+0x3e>
    6d42:	79a1      	ldrb	r1, [r4, #6]
    6d44:	799a      	ldrb	r2, [r3, #6]
    6d46:	4291      	cmp	r1, r2
    6d48:	f47f af41 	bne.w	6bce <dir_find.part.5+0x3e>
    6d4c:	79e1      	ldrb	r1, [r4, #7]
    6d4e:	79da      	ldrb	r2, [r3, #7]
    6d50:	4291      	cmp	r1, r2
    6d52:	f47f af3c 	bne.w	6bce <dir_find.part.5+0x3e>
    6d56:	7a21      	ldrb	r1, [r4, #8]
    6d58:	7a1a      	ldrb	r2, [r3, #8]
    6d5a:	4291      	cmp	r1, r2
    6d5c:	f47f af37 	bne.w	6bce <dir_find.part.5+0x3e>
    6d60:	7a61      	ldrb	r1, [r4, #9]
    6d62:	7a5a      	ldrb	r2, [r3, #9]
    6d64:	4291      	cmp	r1, r2
    6d66:	f47f af32 	bne.w	6bce <dir_find.part.5+0x3e>
    6d6a:	7aa2      	ldrb	r2, [r4, #10]
    6d6c:	7a9b      	ldrb	r3, [r3, #10]
    6d6e:	429a      	cmp	r2, r3
    6d70:	f47f af2d 	bne.w	6bce <dir_find.part.5+0x3e>
    do {
        res = move_window(dj->fs, dj->sect);
        if (res != FR_OK) break;
        dir = dj->dir;                  /* Ptr to the directory entry of current index */
        c = dir[DIR_Name];
        if (c == 0) { res = FR_NO_FILE; break; }    /* Reached to end of table */
    6d74:	2000      	movs	r0, #0
#endif
        res = dir_next(dj, 0);      /* Next entry */
    } while (res == FR_OK);

    return res;
}
    6d76:	b003      	add	sp, #12
    6d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    WORD i;


    stretch = stretch;      /* To suppress warning on read-only cfg. */
    i = dj->index + 1;
    if (!i || !dj->sect)    /* Report EOT when index has reached 65535 */
    6d7c:	f8d9 a010 	ldr.w	sl, [r9, #16]
    6d80:	f1ba 0f00 	cmp.w	sl, #0
    6d84:	f43f af2b 	beq.w	6bde <dir_find.part.5+0x4e>
        return FR_NO_FILE;

    if (!(i % (SS(dj->fs) / SZ_DIR))) { /* Sector changed? */
    6d88:	f014 0b0f 	ands.w	fp, r4, #15
    6d8c:	d054      	beq.n	6e38 <dir_find.part.5+0x2a8>
    6d8e:	f8d9 5000 	ldr.w	r5, [r9]
                dj->sect = clust2sect(dj->fs, clst);
            }
        }
    }

    dj->index = i;
    6d92:	f8a9 4006 	strh.w	r4, [r9, #6]
    dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    6d96:	eb05 1b4b 	add.w	fp, r5, fp, lsl #5
    6d9a:	f10b 0334 	add.w	r3, fp, #52	; 0x34
    6d9e:	f8c9 3014 	str.w	r3, [r9, #20]
    6da2:	e6fe      	b.n	6ba2 <dir_find.part.5+0x12>
        }
        else {                  /* Dynamic table */
            if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) { /* Cluster changed? */
                clst = get_fat(dj->fs, dj->clust);              /* Get next cluster */
                if (clst <= 1) return FR_INT_ERR;
                if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    6da4:	2001      	movs	r0, #1
    6da6:	e71b      	b.n	6be0 <dir_find.part.5+0x50>
        a = dir[DIR_Attr] & AM_MASK;
        if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {    /* An entry without valid data */
            ord = 0xFF;
        } else {
            if (a == AM_LFN) {          /* An LFN entry is found */
                if (dj->lfn) {
    6da8:	f8d9 501c 	ldr.w	r5, [r9, #28]
    6dac:	2d00      	cmp	r5, #0
    6dae:	f43f af0f 	beq.w	6bd0 <dir_find.part.5+0x40>
                    if (c & LLE) {      /* Is it start of LFN sequence? */
    6db2:	0658      	lsls	r0, r3, #25
    6db4:	d53c      	bpl.n	6e30 <dir_find.part.5+0x2a0>
                        sum = dir[LDIR_Chksum];
                        c &= ~LLE; ord = c; /* LFN start order */
                        dj->lfn_idx = dj->index;
    6db6:	f8b9 2006 	ldrh.w	r2, [r9, #6]
            ord = 0xFF;
        } else {
            if (a == AM_LFN) {          /* An LFN entry is found */
                if (dj->lfn) {
                    if (c & LLE) {      /* Is it start of LFN sequence? */
                        sum = dir[LDIR_Chksum];
    6dba:	7b67      	ldrb	r7, [r4, #13]
                        c &= ~LLE; ord = c; /* LFN start order */
                        dj->lfn_idx = dj->index;
    6dbc:	f8a9 2020 	strh.w	r2, [r9, #32]
        } else {
            if (a == AM_LFN) {          /* An LFN entry is found */
                if (dj->lfn) {
                    if (c & LLE) {      /* Is it start of LFN sequence? */
                        sum = dir[LDIR_Chksum];
                        c &= ~LLE; ord = c; /* LFN start order */
    6dc0:	f003 06bf 	and.w	r6, r3, #191	; 0xbf
                        dj->lfn_idx = dj->index;
                    }
                    /* Check validity of the LFN entry and compare it with given name */
                    ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    6dc4:	f894 b00d 	ldrb.w	fp, [r4, #13]
    6dc8:	45bb      	cmp	fp, r7
    6dca:	f47f af00 	bne.w	6bce <dir_find.part.5+0x3e>
{
    UINT i, s;
    WCHAR wc, uc;


    i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;  /* Get offset in the LFN buffer */
    6dce:	7823      	ldrb	r3, [r4, #0]
    6dd0:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 6ec8 <dir_find.part.5+0x338>
    6dd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    6dd8:	3b01      	subs	r3, #1
    6dda:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    6dde:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    6de2:	b29a      	uxth	r2, r3
    s = 0; wc = 1;
    6de4:	2001      	movs	r0, #1
        if (wc) {   /* Last char has not been processed */
            wc = ff_wtoupper(uc);       /* Convert it to upper case */
            if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))    /* Compare it */
                return 0;               /* Not matched */
        } else {
            if (uc != 0xFFFF) return 0; /* Check filler */
    6de6:	f64f 77ff 	movw	r7, #65535	; 0xffff
    6dea:	e004      	b.n	6df6 <dir_find.part.5+0x266>
    6dec:	42bb      	cmp	r3, r7
    6dee:	d144      	bne.n	6e7a <dir_find.part.5+0x2ea>
        }
    } while (++s < 13);             /* Repeat until all chars in the entry are checked */
    6df0:	4b34      	ldr	r3, [pc, #208]	; (6ec4 <dir_find.part.5+0x334>)
    6df2:	459a      	cmp	sl, r3
    6df4:	d03a      	beq.n	6e6c <dir_find.part.5+0x2dc>


    i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;  /* Get offset in the LFN buffer */
    s = 0; wc = 1;
    do {
        uc = LD_WORD(dir+LfnOfs[s]);    /* Pick an LFN character from the entry */
    6df6:	f81a 3b01 	ldrb.w	r3, [sl], #1
    6dfa:	18e1      	adds	r1, r4, r3
    6dfc:	5ce3      	ldrb	r3, [r4, r3]
    6dfe:	7849      	ldrb	r1, [r1, #1]
    6e00:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
        if (wc) {   /* Last char has not been processed */
    6e04:	2800      	cmp	r0, #0
    6e06:	d0f1      	beq.n	6dec <dir_find.part.5+0x25c>
            wc = ff_wtoupper(uc);       /* Convert it to upper case */
    6e08:	4618      	mov	r0, r3
    6e0a:	9201      	str	r2, [sp, #4]
    6e0c:	f7fc f896 	bl	2f3c <ff_wtoupper>
            if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))    /* Compare it */
    6e10:	9a01      	ldr	r2, [sp, #4]
    i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;  /* Get offset in the LFN buffer */
    s = 0; wc = 1;
    do {
        uc = LD_WORD(dir+LfnOfs[s]);    /* Pick an LFN character from the entry */
        if (wc) {   /* Last char has not been processed */
            wc = ff_wtoupper(uc);       /* Convert it to upper case */
    6e12:	9000      	str	r0, [sp, #0]
            if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))    /* Compare it */
    6e14:	1c53      	adds	r3, r2, #1
    6e16:	2afe      	cmp	r2, #254	; 0xfe
    6e18:	fa1f f883 	uxth.w	r8, r3
    6e1c:	d82d      	bhi.n	6e7a <dir_find.part.5+0x2ea>
    6e1e:	f835 0012 	ldrh.w	r0, [r5, r2, lsl #1]
    6e22:	f7fc f88b 	bl	2f3c <ff_wtoupper>
    6e26:	9900      	ldr	r1, [sp, #0]
    6e28:	4281      	cmp	r1, r0
    6e2a:	d126      	bne.n	6e7a <dir_find.part.5+0x2ea>
    6e2c:	4642      	mov	r2, r8
    6e2e:	e7df      	b.n	6df0 <dir_find.part.5+0x260>
                        sum = dir[LDIR_Chksum];
                        c &= ~LLE; ord = c; /* LFN start order */
                        dj->lfn_idx = dj->index;
                    }
                    /* Check validity of the LFN entry and compare it with given name */
                    ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    6e30:	42b3      	cmp	r3, r6
    6e32:	f47f aecc 	bne.w	6bce <dir_find.part.5+0x3e>
    6e36:	e7c5      	b.n	6dc4 <dir_find.part.5+0x234>
        return FR_NO_FILE;

    if (!(i % (SS(dj->fs) / SZ_DIR))) { /* Sector changed? */
        dj->sect++;                 /* Next sector */

        if (dj->clust == 0) {   /* Static table */
    6e38:	f8d9 100c 	ldr.w	r1, [r9, #12]
            if (i >= dj->fs->n_rootdir) /* Report EOT when end of table */
    6e3c:	f8d9 5000 	ldr.w	r5, [r9]
    i = dj->index + 1;
    if (!i || !dj->sect)    /* Report EOT when index has reached 65535 */
        return FR_NO_FILE;

    if (!(i % (SS(dj->fs) / SZ_DIR))) { /* Sector changed? */
        dj->sect++;                 /* Next sector */
    6e40:	f10a 0a01 	add.w	sl, sl, #1
    6e44:	f8c9 a010 	str.w	sl, [r9, #16]

        if (dj->clust == 0) {   /* Static table */
    6e48:	b921      	cbnz	r1, 6e54 <dir_find.part.5+0x2c4>
            if (i >= dj->fs->n_rootdir) /* Report EOT when end of table */
    6e4a:	892b      	ldrh	r3, [r5, #8]
    6e4c:	42a3      	cmp	r3, r4
    6e4e:	f67f aec6 	bls.w	6bde <dir_find.part.5+0x4e>
    6e52:	e79e      	b.n	6d92 <dir_find.part.5+0x202>
                return FR_NO_FILE;
        }
        else {                  /* Dynamic table */
            if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) { /* Cluster changed? */
    6e54:	78ab      	ldrb	r3, [r5, #2]
    6e56:	3b01      	subs	r3, #1
    6e58:	ea13 1314 	ands.w	r3, r3, r4, lsr #4
    6e5c:	d199      	bne.n	6d92 <dir_find.part.5+0x202>
{
    UINT wc, bc;
    BYTE *p;


    if (clst < 2 || clst >= fs->n_fatent)   /* Chack range */
    6e5e:	2901      	cmp	r1, #1
    6e60:	d902      	bls.n	6e68 <dir_find.part.5+0x2d8>
    6e62:	69eb      	ldr	r3, [r5, #28]
    6e64:	4299      	cmp	r1, r3
    6e66:	d30f      	bcc.n	6e88 <dir_find.part.5+0x2f8>
                return FR_NO_FILE;
        }
        else {                  /* Dynamic table */
            if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) { /* Cluster changed? */
                clst = get_fat(dj->fs, dj->clust);              /* Get next cluster */
                if (clst <= 1) return FR_INT_ERR;
    6e68:	2002      	movs	r0, #2
    6e6a:	e6b9      	b.n	6be0 <dir_find.part.5+0x50>
        } else {
            if (uc != 0xFFFF) return 0; /* Check filler */
        }
    } while (++s < 13);             /* Repeat until all chars in the entry are checked */

    if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])   /* Last segment matched but different length */
    6e6c:	7823      	ldrb	r3, [r4, #0]
    6e6e:	0659      	lsls	r1, r3, #25
    6e70:	d506      	bpl.n	6e80 <dir_find.part.5+0x2f0>
    6e72:	b128      	cbz	r0, 6e80 <dir_find.part.5+0x2f0>
    6e74:	f835 3012 	ldrh.w	r3, [r5, r2, lsl #1]
    6e78:	b113      	cbz	r3, 6e80 <dir_find.part.5+0x2f0>
                        sum = dir[LDIR_Chksum];
                        c &= ~LLE; ord = c; /* LFN start order */
                        dj->lfn_idx = dj->index;
                    }
                    /* Check validity of the LFN entry and compare it with given name */
                    ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    6e7a:	465f      	mov	r7, fp
    6e7c:	26ff      	movs	r6, #255	; 0xff
    6e7e:	e6a7      	b.n	6bd0 <dir_find.part.5+0x40>
    6e80:	3e01      	subs	r6, #1
    6e82:	b2f6      	uxtb	r6, r6
    6e84:	465f      	mov	r7, fp
    6e86:	e6a3      	b.n	6bd0 <dir_find.part.5+0x40>
    6e88:	4628      	mov	r0, r5
    6e8a:	f7ff fae5 	bl	6458 <get_fat.part.3>
                return FR_NO_FILE;
        }
        else {                  /* Dynamic table */
            if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) { /* Cluster changed? */
                clst = get_fat(dj->fs, dj->clust);              /* Get next cluster */
                if (clst <= 1) return FR_INT_ERR;
    6e8e:	2801      	cmp	r0, #1
    6e90:	d9ea      	bls.n	6e68 <dir_find.part.5+0x2d8>
                if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    6e92:	1c43      	adds	r3, r0, #1
    6e94:	d086      	beq.n	6da4 <dir_find.part.5+0x214>
                if (clst >= dj->fs->n_fatent) {                 /* When it reached end of dynamic table */
    6e96:	f8d9 5000 	ldr.w	r5, [r9]
    6e9a:	69eb      	ldr	r3, [r5, #28]
    6e9c:	4298      	cmp	r0, r3
    6e9e:	f4bf ae9e 	bcs.w	6bde <dir_find.part.5+0x4e>
    FATFS *fs,      /* File system object */
    DWORD clst      /* Cluster# to be converted */
)
{
    clst -= 2;
    if (clst >= (fs->n_fatent - 2)) return 0;       /* Invalid cluster# */
    6ea2:	3b02      	subs	r3, #2
DWORD clust2sect (  /* !=0: Sector number, 0: Failed - invalid cluster# */
    FATFS *fs,      /* File system object */
    DWORD clst      /* Cluster# to be converted */
)
{
    clst -= 2;
    6ea4:	1e82      	subs	r2, r0, #2
    if (clst >= (fs->n_fatent - 2)) return 0;       /* Invalid cluster# */
    6ea6:	429a      	cmp	r2, r3
                    dj->fs->winsect -= c;                       /* Rewind window address */
#else
                    return FR_NO_FILE;          /* Report EOT */
#endif
                }
                dj->clust = clst;               /* Initialize data for new cluster */
    6ea8:	f8c9 000c 	str.w	r0, [r9, #12]
    DWORD clst      /* Cluster# to be converted */
)
{
    clst -= 2;
    if (clst >= (fs->n_fatent - 2)) return 0;       /* Invalid cluster# */
    return clst * fs->csize + fs->database;
    6eac:	bf3b      	ittet	cc
    6eae:	f895 a002 	ldrbcc.w	sl, [r5, #2]
    6eb2:	6aeb      	ldrcc	r3, [r5, #44]	; 0x2c
    FATFS *fs,      /* File system object */
    DWORD clst      /* Cluster# to be converted */
)
{
    clst -= 2;
    if (clst >= (fs->n_fatent - 2)) return 0;       /* Invalid cluster# */
    6eb4:	f04f 0a00 	movcs.w	sl, #0
    return clst * fs->csize + fs->database;
    6eb8:	fb0a 3a02 	mlacc	sl, sl, r2, r3
#else
                    return FR_NO_FILE;          /* Report EOT */
#endif
                }
                dj->clust = clst;               /* Initialize data for new cluster */
                dj->sect = clust2sect(dj->fs, clst);
    6ebc:	f8c9 a010 	str.w	sl, [r9, #16]
    6ec0:	e767      	b.n	6d92 <dir_find.part.5+0x202>
    6ec2:	bf00      	nop
    6ec4:	0000d0e5 	.word	0x0000d0e5
    6ec8:	0000d0d8 	.word	0x0000d0d8

00006ecc <follow_path>:
static
FRESULT follow_path (   /* FR_OK(0): successful, !=0: error code */
    DIR *dj,            /* Directory object to return last directory and found object */
    const TCHAR *path   /* Full-path string to find a file or directory */
)
{
    6ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    FRESULT res;
    BYTE *dir, ns;


#if _FS_RPATH
    if (*path == '/' || *path == '\\') { /* There is a heading separator */
    6ed0:	780b      	ldrb	r3, [r1, #0]
    6ed2:	2b2f      	cmp	r3, #47	; 0x2f
static
FRESULT follow_path (   /* FR_OK(0): successful, !=0: error code */
    DIR *dj,            /* Directory object to return last directory and found object */
    const TCHAR *path   /* Full-path string to find a file or directory */
)
{
    6ed4:	b083      	sub	sp, #12
    6ed6:	4688      	mov	r8, r1
    6ed8:	4606      	mov	r6, r0
    FRESULT res;
    BYTE *dir, ns;


#if _FS_RPATH
    if (*path == '/' || *path == '\\') { /* There is a heading separator */
    6eda:	f000 8193 	beq.w	7204 <follow_path+0x338>
    6ede:	2b5c      	cmp	r3, #92	; 0x5c
    6ee0:	f000 8190 	beq.w	7204 <follow_path+0x338>
        path++; dj->sclust = 0;     /* Strip it and start from the root dir */
    } else {                            /* No heading separator */
        dj->sclust = dj->fs->cdir;  /* Start from the current dir */
    6ee4:	6803      	ldr	r3, [r0, #0]
    6ee6:	699b      	ldr	r3, [r3, #24]
    6ee8:	60b3      	str	r3, [r6, #8]
    if (*path == '/' || *path == '\\')  /* Strip heading separator if exist */
        path++;
    dj->sclust = 0;                     /* Start from the root dir */
#endif

    if ((UINT)*path < ' ') {            /* Nul path means the start directory itself */
    6eea:	f898 3000 	ldrb.w	r3, [r8]
    6eee:	2b1f      	cmp	r3, #31
    6ef0:	f240 817f 	bls.w	71f2 <follow_path+0x326>
    6ef4:	4643      	mov	r3, r8
    WCHAR w, *lfn;
    UINT i, ni, si, di;
    const TCHAR *p;

    /* Create LFN in Unicode */
    for (p = *path; *p == '/' || *p == '\\'; p++) ; /* Strip duplicated separator */
    6ef6:	781a      	ldrb	r2, [r3, #0]
    6ef8:	2a2f      	cmp	r2, #47	; 0x2f
    6efa:	4698      	mov	r8, r3
    6efc:	f103 0301 	add.w	r3, r3, #1
    6f00:	d0f9      	beq.n	6ef6 <follow_path+0x2a>
    6f02:	2a5c      	cmp	r2, #92	; 0x5c
    6f04:	d0f7      	beq.n	6ef6 <follow_path+0x2a>
    lfn = dj->lfn;
    si = di = 0;
    for (;;) {
        w = p[si++];                    /* Get a character */
    6f06:	b290      	uxth	r0, r2
        if (w < ' ' || w == '/' || w == '\\') break;    /* Break on end of segment */
    6f08:	281f      	cmp	r0, #31
    UINT i, ni, si, di;
    const TCHAR *p;

    /* Create LFN in Unicode */
    for (p = *path; *p == '/' || *p == '\\'; p++) ; /* Strip duplicated separator */
    lfn = dj->lfn;
    6f0a:	69f5      	ldr	r5, [r6, #28]
    si = di = 0;
    for (;;) {
        w = p[si++];                    /* Get a character */
        if (w < ' ' || w == '/' || w == '\\') break;    /* Break on end of segment */
    6f0c:	f240 8113 	bls.w	7136 <follow_path+0x26a>
    6f10:	282f      	cmp	r0, #47	; 0x2f
    6f12:	d046      	beq.n	6fa2 <follow_path+0xd6>
    6f14:	285c      	cmp	r0, #92	; 0x5c
    6f16:	d044      	beq.n	6fa2 <follow_path+0xd6>
    6f18:	2400      	movs	r4, #0
    6f1a:	4627      	mov	r7, r4
    6f1c:	f1a5 0902 	sub.w	r9, r5, #2
    6f20:	2301      	movs	r3, #1
        if (di >= _MAX_LFN)             /* Reject too long name */
            return FR_INVALID_NAME;
#if !_LFN_UNICODE
        w &= 0xFF;
        if (IsDBCS1(w)) {               /* Check if it is a DBC 1st byte (always false on SBCS cfg) */
    6f22:	f102 017f 	add.w	r1, r2, #127	; 0x7f
    6f26:	b2c9      	uxtb	r1, r1
    6f28:	291e      	cmp	r1, #30
    6f2a:	d92a      	bls.n	6f82 <follow_path+0xb6>
    6f2c:	3220      	adds	r2, #32
    6f2e:	b2d2      	uxtb	r2, r2
    6f30:	2a1c      	cmp	r2, #28
    6f32:	d926      	bls.n	6f82 <follow_path+0xb6>
    6f34:	461f      	mov	r7, r3
            b = (BYTE)p[si++];          /* Get 2nd byte */
            if (!IsDBCS2(b))
                return FR_INVALID_NAME; /* Reject invalid sequence */
            w = (w << 8) + b;           /* Create a DBC */
        }
        w = ff_convert(w, 1);           /* Convert ANSI/OEM to Unicode */
    6f36:	2101      	movs	r1, #1
    6f38:	f7fb fffc 	bl	2f34 <ff_convert>
        if (!w) return FR_INVALID_NAME; /* Reject invalid code */
    6f3c:	b1e8      	cbz	r0, 6f7a <follow_path+0xae>
#endif
        if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    6f3e:	287f      	cmp	r0, #127	; 0x7f
    6f40:	d809      	bhi.n	6f56 <follow_path+0x8a>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
    while (*str && *str != chr) str++;
    6f42:	2822      	cmp	r0, #34	; 0x22
    6f44:	d019      	beq.n	6f7a <follow_path+0xae>
    6f46:	4ac0      	ldr	r2, [pc, #768]	; (7248 <follow_path+0x37c>)
    6f48:	e001      	b.n	6f4e <follow_path+0x82>
    6f4a:	4298      	cmp	r0, r3
    6f4c:	d015      	beq.n	6f7a <follow_path+0xae>
    6f4e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    6f52:	2b00      	cmp	r3, #0
    6f54:	d1f9      	bne.n	6f4a <follow_path+0x7e>
        w = ff_convert(w, 1);           /* Convert ANSI/OEM to Unicode */
        if (!w) return FR_INVALID_NAME; /* Reject invalid code */
#endif
        if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
            return FR_INVALID_NAME;
        lfn[di++] = w;                  /* Store the Unicode char */
    6f56:	f829 0f02 	strh.w	r0, [r9, #2]!
    /* Create LFN in Unicode */
    for (p = *path; *p == '/' || *p == '\\'; p++) ; /* Strip duplicated separator */
    lfn = dj->lfn;
    si = di = 0;
    for (;;) {
        w = p[si++];                    /* Get a character */
    6f5a:	f818 2007 	ldrb.w	r2, [r8, r7]
    6f5e:	b290      	uxth	r0, r2
        w = ff_convert(w, 1);           /* Convert ANSI/OEM to Unicode */
        if (!w) return FR_INVALID_NAME; /* Reject invalid code */
#endif
        if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
            return FR_INVALID_NAME;
        lfn[di++] = w;                  /* Store the Unicode char */
    6f60:	3401      	adds	r4, #1
    /* Create LFN in Unicode */
    for (p = *path; *p == '/' || *p == '\\'; p++) ; /* Strip duplicated separator */
    lfn = dj->lfn;
    si = di = 0;
    for (;;) {
        w = p[si++];                    /* Get a character */
    6f62:	1c7b      	adds	r3, r7, #1
        if (w < ' ' || w == '/' || w == '\\') break;    /* Break on end of segment */
    6f64:	281f      	cmp	r0, #31
        w = ff_convert(w, 1);           /* Convert ANSI/OEM to Unicode */
        if (!w) return FR_INVALID_NAME; /* Reject invalid code */
#endif
        if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
            return FR_INVALID_NAME;
        lfn[di++] = w;                  /* Store the Unicode char */
    6f66:	b2a4      	uxth	r4, r4
    /* Create LFN in Unicode */
    for (p = *path; *p == '/' || *p == '\\'; p++) ; /* Strip duplicated separator */
    lfn = dj->lfn;
    si = di = 0;
    for (;;) {
        w = p[si++];                    /* Get a character */
    6f68:	b29b      	uxth	r3, r3
        if (w < ' ' || w == '/' || w == '\\') break;    /* Break on end of segment */
    6f6a:	f240 80e6 	bls.w	713a <follow_path+0x26e>
    6f6e:	282f      	cmp	r0, #47	; 0x2f
    6f70:	d019      	beq.n	6fa6 <follow_path+0xda>
    6f72:	285c      	cmp	r0, #92	; 0x5c
    6f74:	d017      	beq.n	6fa6 <follow_path+0xda>
        if (di >= _MAX_LFN)             /* Reject too long name */
    6f76:	2cff      	cmp	r4, #255	; 0xff
    6f78:	d1d3      	bne.n	6f22 <follow_path+0x56>
            }
        }
        dj->fn[i++] = (BYTE)w;
    }

    if (dj->fn[0] == DDE) dj->fn[0] = NDDE; /* If the first char collides with deleted mark, replace it with 0x05 */
    6f7a:	2006      	movs	r0, #6
            dj->sclust = LD_CLUST(dir);
        }
    }

    return res;
}
    6f7c:	b003      	add	sp, #12
    6f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (di >= _MAX_LFN)             /* Reject too long name */
            return FR_INVALID_NAME;
#if !_LFN_UNICODE
        w &= 0xFF;
        if (IsDBCS1(w)) {               /* Check if it is a DBC 1st byte (always false on SBCS cfg) */
            b = (BYTE)p[si++];          /* Get 2nd byte */
    6f82:	f818 3003 	ldrb.w	r3, [r8, r3]
            if (!IsDBCS2(b))
    6f86:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
        if (di >= _MAX_LFN)             /* Reject too long name */
            return FR_INVALID_NAME;
#if !_LFN_UNICODE
        w &= 0xFF;
        if (IsDBCS1(w)) {               /* Check if it is a DBC 1st byte (always false on SBCS cfg) */
            b = (BYTE)p[si++];          /* Get 2nd byte */
    6f8a:	3702      	adds	r7, #2
            if (!IsDBCS2(b))
    6f8c:	2a3e      	cmp	r2, #62	; 0x3e
        if (di >= _MAX_LFN)             /* Reject too long name */
            return FR_INVALID_NAME;
#if !_LFN_UNICODE
        w &= 0xFF;
        if (IsDBCS1(w)) {               /* Check if it is a DBC 1st byte (always false on SBCS cfg) */
            b = (BYTE)p[si++];          /* Get 2nd byte */
    6f8e:	b2bf      	uxth	r7, r7
            if (!IsDBCS2(b))
    6f90:	d903      	bls.n	6f9a <follow_path+0xce>
    6f92:	f083 0280 	eor.w	r2, r3, #128	; 0x80
    6f96:	2a7c      	cmp	r2, #124	; 0x7c
    6f98:	d8ef      	bhi.n	6f7a <follow_path+0xae>
                return FR_INVALID_NAME; /* Reject invalid sequence */
            w = (w << 8) + b;           /* Create a DBC */
    6f9a:	eb03 2000 	add.w	r0, r3, r0, lsl #8
    6f9e:	b280      	uxth	r0, r0
    6fa0:	e7c9      	b.n	6f36 <follow_path+0x6a>
    for (p = *path; *p == '/' || *p == '\\'; p++) ; /* Strip duplicated separator */
    lfn = dj->lfn;
    si = di = 0;
    for (;;) {
        w = p[si++];                    /* Get a character */
        if (w < ' ' || w == '/' || w == '\\') break;    /* Break on end of segment */
    6fa2:	2301      	movs	r3, #1
    const TCHAR *p;

    /* Create LFN in Unicode */
    for (p = *path; *p == '/' || *p == '\\'; p++) ; /* Strip duplicated separator */
    lfn = dj->lfn;
    si = di = 0;
    6fa4:	2400      	movs	r4, #0
        lfn[di++] = w;                  /* Store the Unicode char */
    }
    *path = &p[si];                     /* Return pointer to the next segment */
    cf = (w < ' ') ? NS_LAST : 0;       /* Set last segment flag if end of path */
#if _FS_RPATH
    if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
    6fa6:	2c01      	cmp	r4, #1
#endif
        if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
            return FR_INVALID_NAME;
        lfn[di++] = w;                  /* Store the Unicode char */
    }
    *path = &p[si];                     /* Return pointer to the next segment */
    6fa8:	4498      	add	r8, r3
    cf = (w < ' ') ? NS_LAST : 0;       /* Set last segment flag if end of path */
    6faa:	f04f 0900 	mov.w	r9, #0
#endif
        if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
            return FR_INVALID_NAME;
        lfn[di++] = w;                  /* Store the Unicode char */
    }
    *path = &p[si];                     /* Return pointer to the next segment */
    6fae:	f04f 0320 	mov.w	r3, #32
    cf = (w < ' ') ? NS_LAST : 0;       /* Set last segment flag if end of path */
#if _FS_RPATH
    if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
    6fb2:	f000 80ca 	beq.w	714a <follow_path+0x27e>
    6fb6:	2c02      	cmp	r4, #2
    6fb8:	f000 80ff 	beq.w	71ba <follow_path+0x2ee>
            dj->fn[i] = (i < di) ? '.' : ' ';
        dj->fn[i] = cf | NS_DOT;        /* This is a dot entry */
        return FR_OK;
    }
#endif
    while (di) {                        /* Strip trailing spaces and dots */
    6fbc:	2c00      	cmp	r4, #0
    6fbe:	d0dc      	beq.n	6f7a <follow_path+0xae>
        w = lfn[di-1];
    6fc0:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
    6fc4:	3b01      	subs	r3, #1
        if (w != ' ' && w != '.') break;
        di--;
    6fc6:	1e61      	subs	r1, r4, #1
        dj->fn[i] = cf | NS_DOT;        /* This is a dot entry */
        return FR_OK;
    }
#endif
    while (di) {                        /* Strip trailing spaces and dots */
        w = lfn[di-1];
    6fc8:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
        if (w != ' ' && w != '.') break;
    6fcc:	2a20      	cmp	r2, #32
    6fce:	d001      	beq.n	6fd4 <follow_path+0x108>
    6fd0:	2a2e      	cmp	r2, #46	; 0x2e
    6fd2:	d101      	bne.n	6fd8 <follow_path+0x10c>
        di--;
    6fd4:	b28c      	uxth	r4, r1
    6fd6:	e7f1      	b.n	6fbc <follow_path+0xf0>
    if (!di) return FR_INVALID_NAME;    /* Reject nul string */

    lfn[di] = 0;                        /* LFN is created */

    /* Create SFN in directory form */
    mem_set(dj->fn, ' ', 11);
    6fd8:	69b1      	ldr	r1, [r6, #24]
static
void mem_set (void* dst, int val, UINT cnt) {
    BYTE *d = (BYTE*)dst;

    while (cnt--)
        *d++ = (BYTE)val;
    6fda:	2020      	movs	r0, #32
        if (w != ' ' && w != '.') break;
        di--;
    }
    if (!di) return FR_INVALID_NAME;    /* Reject nul string */

    lfn[di] = 0;                        /* LFN is created */
    6fdc:	2200      	movs	r2, #0
    6fde:	f825 2014 	strh.w	r2, [r5, r4, lsl #1]
static
void mem_set (void* dst, int val, UINT cnt) {
    BYTE *d = (BYTE*)dst;

    while (cnt--)
        *d++ = (BYTE)val;
    6fe2:	7008      	strb	r0, [r1, #0]
    6fe4:	7048      	strb	r0, [r1, #1]
    6fe6:	7088      	strb	r0, [r1, #2]
    6fe8:	70c8      	strb	r0, [r1, #3]
    6fea:	7108      	strb	r0, [r1, #4]
    6fec:	7148      	strb	r0, [r1, #5]
    6fee:	7188      	strb	r0, [r1, #6]
    6ff0:	71c8      	strb	r0, [r1, #7]
    6ff2:	7208      	strb	r0, [r1, #8]
    6ff4:	7248      	strb	r0, [r1, #9]
    6ff6:	7288      	strb	r0, [r1, #10]
    6ff8:	b297      	uxth	r7, r2
    6ffa:	3201      	adds	r2, #1

    lfn[di] = 0;                        /* LFN is created */

    /* Create SFN in directory form */
    mem_set(dj->fn, ' ', 11);
    for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;  /* Strip leading spaces and dots */
    6ffc:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
    7000:	2820      	cmp	r0, #32
    7002:	d0f9      	beq.n	6ff8 <follow_path+0x12c>
    7004:	282e      	cmp	r0, #46	; 0x2e
    7006:	d0f7      	beq.n	6ff8 <follow_path+0x12c>
    if (si) cf |= NS_LOSS | NS_LFN;
    7008:	b167      	cbz	r7, 7024 <follow_path+0x158>
    while (di && lfn[di - 1] != '.') di--;  /* Find extension (di<=si: no extension) */
    700a:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
    700e:	2b2e      	cmp	r3, #46	; 0x2e
    lfn[di] = 0;                        /* LFN is created */

    /* Create SFN in directory form */
    mem_set(dj->fn, ' ', 11);
    for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;  /* Strip leading spaces and dots */
    if (si) cf |= NS_LOSS | NS_LFN;
    7010:	f049 0903 	orr.w	r9, r9, #3
    while (di && lfn[di - 1] != '.') di--;  /* Find extension (di<=si: no extension) */
    7014:	f104 32ff 	add.w	r2, r4, #4294967295
    7018:	d00a      	beq.n	7030 <follow_path+0x164>
    701a:	b294      	uxth	r4, r2
    701c:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
    7020:	b134      	cbz	r4, 7030 <follow_path+0x164>
    7022:	3b01      	subs	r3, #1
    7024:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
    7028:	2b2e      	cmp	r3, #46	; 0x2e
    702a:	f104 32ff 	add.w	r2, r4, #4294967295
    702e:	d1f4      	bne.n	701a <follow_path+0x14e>

    lfn[di] = 0;                        /* LFN is created */

    /* Create SFN in directory form */
    mem_set(dj->fn, ' ', 11);
    for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;  /* Strip leading spaces and dots */
    7030:	f04f 0a00 	mov.w	sl, #0
    7034:	4653      	mov	r3, sl
    7036:	f04f 0b08 	mov.w	fp, #8
    if (si) cf |= NS_LOSS | NS_LFN;
    while (di && lfn[di - 1] != '.') di--;  /* Find extension (di<=si: no extension) */

    b = i = 0; ni = 8;
    for (;;) {
        w = lfn[si++];                  /* Get an LFN char */
    703a:	3701      	adds	r7, #1
    703c:	b2bf      	uxth	r7, r7
        if (!w) break;                  /* Break on end of the LFN */
    703e:	b3b0      	cbz	r0, 70ae <follow_path+0x1e2>
        if (w == ' ' || (w == '.' && si != di)) {   /* Remove spaces and dots */
    7040:	2820      	cmp	r0, #32
    7042:	d022      	beq.n	708a <follow_path+0x1be>
    7044:	282e      	cmp	r0, #46	; 0x2e
    7046:	d01d      	beq.n	7084 <follow_path+0x1b8>
            cf |= NS_LOSS | NS_LFN; continue;
        }

        if (i >= ni || si == di) {      /* Extension or end of SFN */
    7048:	45da      	cmp	sl, fp
    704a:	d224      	bcs.n	7096 <follow_path+0x1ca>
    704c:	42bc      	cmp	r4, r7
    704e:	f000 80c4 	beq.w	71da <follow_path+0x30e>
            if (si > di) break;         /* No extension */
            si = di; i = 8; ni = 11;    /* Enter extension section */
            b <<= 2; continue;
        }

        if (w >= 0x80) {                /* Non ASCII char */
    7052:	287f      	cmp	r0, #127	; 0x7f
    7054:	f200 80e4 	bhi.w	7220 <follow_path+0x354>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
    while (*str && *str != chr) str++;
    7058:	282b      	cmp	r0, #43	; 0x2b
    705a:	f000 80f9 	beq.w	7250 <follow_path+0x384>
    705e:	497b      	ldr	r1, [pc, #492]	; (724c <follow_path+0x380>)
    7060:	e002      	b.n	7068 <follow_path+0x19c>
    7062:	4290      	cmp	r0, r2
    7064:	f000 80f4 	beq.w	7250 <follow_path+0x384>
    7068:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    706c:	2a00      	cmp	r2, #0
    706e:	d1f8      	bne.n	7062 <follow_path+0x196>
            dj->fn[i++] = (BYTE)(w >> 8);
        } else {                        /* Single byte char */
            if (!w || chk_chr("+,;=[]", w)) {   /* Replace illegal chars for SFN */
                w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
            } else {
                if (IsUpper(w)) {       /* ASCII large capital */
    7070:	f1a0 0241 	sub.w	r2, r0, #65	; 0x41
    7074:	b292      	uxth	r2, r2
    7076:	2a19      	cmp	r2, #25
    7078:	f200 8102 	bhi.w	7280 <follow_path+0x3b4>
                    b |= 2;
    707c:	f043 0302 	orr.w	r3, r3, #2
    7080:	b2c0      	uxtb	r0, r0
    7082:	e0e8      	b.n	7256 <follow_path+0x38a>

    b = i = 0; ni = 8;
    for (;;) {
        w = lfn[si++];                  /* Get an LFN char */
        if (!w) break;                  /* Break on end of the LFN */
        if (w == ' ' || (w == '.' && si != di)) {   /* Remove spaces and dots */
    7084:	42bc      	cmp	r4, r7
    7086:	f000 80a8 	beq.w	71da <follow_path+0x30e>
            cf |= NS_LOSS | NS_LFN; continue;
    708a:	f049 0903 	orr.w	r9, r9, #3
    708e:	463a      	mov	r2, r7
    7090:	f835 0012 	ldrh.w	r0, [r5, r2, lsl #1]
    7094:	e7d1      	b.n	703a <follow_path+0x16e>
        }

        if (i >= ni || si == di) {      /* Extension or end of SFN */
            if (ni == 11) {             /* Long extension */
    7096:	f1bb 0f0b 	cmp.w	fp, #11
    709a:	f000 80fc 	beq.w	7296 <follow_path+0x3ca>
                cf |= NS_LOSS | NS_LFN; break;
            }
            if (si != di) cf |= NS_LOSS | NS_LFN;   /* Out of 8.3 format */
    709e:	42bc      	cmp	r4, r7
    70a0:	f000 809e 	beq.w	71e0 <follow_path+0x314>
            if (si > di) break;         /* No extension */
    70a4:	42a7      	cmp	r7, r4

        if (i >= ni || si == di) {      /* Extension or end of SFN */
            if (ni == 11) {             /* Long extension */
                cf |= NS_LOSS | NS_LFN; break;
            }
            if (si != di) cf |= NS_LOSS | NS_LFN;   /* Out of 8.3 format */
    70a6:	f049 0903 	orr.w	r9, r9, #3
            if (si > di) break;         /* No extension */
    70aa:	f240 8099 	bls.w	71e0 <follow_path+0x314>
            }
        }
        dj->fn[i++] = (BYTE)w;
    }

    if (dj->fn[0] == DDE) dj->fn[0] = NDDE; /* If the first char collides with deleted mark, replace it with 0x05 */
    70ae:	69b1      	ldr	r1, [r6, #24]
    70b0:	780a      	ldrb	r2, [r1, #0]
    70b2:	2ae5      	cmp	r2, #229	; 0xe5
    70b4:	f000 80af 	beq.w	7216 <follow_path+0x34a>
    70b8:	461a      	mov	r2, r3

    if (ni == 8) b <<= 2;
    70ba:	f1bb 0f08 	cmp.w	fp, #8
    70be:	bf04      	itt	eq
    70c0:	009b      	lsleq	r3, r3, #2
    70c2:	b2da      	uxtbeq	r2, r3
    if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)   /* Create LFN entry when there are composite capitals */
    70c4:	f002 030c 	and.w	r3, r2, #12
    70c8:	2b0c      	cmp	r3, #12
    70ca:	f000 809f 	beq.w	720c <follow_path+0x340>
    70ce:	f002 0003 	and.w	r0, r2, #3
    70d2:	2803      	cmp	r0, #3
    70d4:	f000 809a 	beq.w	720c <follow_path+0x340>
        cf |= NS_LFN;
    if (!(cf & NS_LFN)) {                       /* When LFN is in 8.3 format without extended char, NT flags are created */
    70d8:	f019 0f02 	tst.w	r9, #2
    70dc:	d109      	bne.n	70f2 <follow_path+0x226>
        if ((b & 0x03) == 0x01) cf |= NS_EXT;   /* NT flag (Extension has only small capital) */
    70de:	f002 0203 	and.w	r2, r2, #3
    70e2:	2a01      	cmp	r2, #1
    70e4:	bf08      	it	eq
    70e6:	f049 0910 	orreq.w	r9, r9, #16
        if ((b & 0x0C) == 0x04) cf |= NS_BODY;  /* NT flag (Filename has only small capital) */
    70ea:	2b04      	cmp	r3, #4
    70ec:	bf08      	it	eq
    70ee:	f049 0908 	orreq.w	r9, r9, #8
    }

    dj->fn[NS] = cf;    /* SFN is created */
    70f2:	f881 900b 	strb.w	r9, [r1, #11]
    BYTE c, *dir;
#if _USE_LFN
    BYTE a, ord, sum;
#endif

    res = dir_sdi(dj, 0);           /* Rewind directory object */
    70f6:	4630      	mov	r0, r6
    70f8:	2100      	movs	r1, #0
    70fa:	f7ff faf5 	bl	66e8 <dir_sdi>
    if (res != FR_OK) return res;
    70fe:	2800      	cmp	r0, #0
    7100:	d149      	bne.n	7196 <follow_path+0x2ca>
    7102:	4630      	mov	r0, r6
    7104:	f7ff fd44 	bl	6b90 <dir_find.part.5>
    } else {                            /* Follow path */
        for (;;) {
            res = create_name(dj, &path);   /* Get a segment */
            if (res != FR_OK) break;
            res = dir_find(dj);             /* Find it */
            ns = *(dj->fn+NS);
    7108:	69b3      	ldr	r3, [r6, #24]
    710a:	7adb      	ldrb	r3, [r3, #11]
            if (res != FR_OK) {             /* Failed to find the object */
    710c:	2800      	cmp	r0, #0
    710e:	d144      	bne.n	719a <follow_path+0x2ce>
                } else {                            /* Could not find the object */
                    if (!(ns & NS_LAST)) res = FR_NO_PATH;
                }
                break;
            }
            if (ns & NS_LAST) break;            /* Last segment match. Function completed. */
    7110:	075a      	lsls	r2, r3, #29
    7112:	d44e      	bmi.n	71b2 <follow_path+0x2e6>
            dir = dj->dir;                      /* There is next segment. Follow the sub directory */
    7114:	6972      	ldr	r2, [r6, #20]
            if (!(dir[DIR_Attr] & AM_DIR)) {    /* Cannot follow because it is a file */
    7116:	7ad3      	ldrb	r3, [r2, #11]
    7118:	06db      	lsls	r3, r3, #27
    711a:	f140 80c4 	bpl.w	72a6 <follow_path+0x3da>
                res = FR_NO_PATH; break;
            }
            dj->sclust = LD_CLUST(dir);
    711e:	7d50      	ldrb	r0, [r2, #21]
    7120:	7d11      	ldrb	r1, [r2, #20]
    7122:	7ed3      	ldrb	r3, [r2, #27]
    7124:	7e92      	ldrb	r2, [r2, #26]
    7126:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
    712a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    712e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    7132:	60b3      	str	r3, [r6, #8]
    7134:	e6de      	b.n	6ef4 <follow_path+0x28>
    for (p = *path; *p == '/' || *p == '\\'; p++) ; /* Strip duplicated separator */
    lfn = dj->lfn;
    si = di = 0;
    for (;;) {
        w = p[si++];                    /* Get a character */
        if (w < ' ' || w == '/' || w == '\\') break;    /* Break on end of segment */
    7136:	2301      	movs	r3, #1
    const TCHAR *p;

    /* Create LFN in Unicode */
    for (p = *path; *p == '/' || *p == '\\'; p++) ; /* Strip duplicated separator */
    lfn = dj->lfn;
    si = di = 0;
    7138:	2400      	movs	r4, #0
        lfn[di++] = w;                  /* Store the Unicode char */
    }
    *path = &p[si];                     /* Return pointer to the next segment */
    cf = (w < ' ') ? NS_LAST : 0;       /* Set last segment flag if end of path */
#if _FS_RPATH
    if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
    713a:	2c01      	cmp	r4, #1
#endif
        if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
            return FR_INVALID_NAME;
        lfn[di++] = w;                  /* Store the Unicode char */
    }
    *path = &p[si];                     /* Return pointer to the next segment */
    713c:	4498      	add	r8, r3
    cf = (w < ' ') ? NS_LAST : 0;       /* Set last segment flag if end of path */
    713e:	f04f 0904 	mov.w	r9, #4
#endif
        if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
            return FR_INVALID_NAME;
        lfn[di++] = w;                  /* Store the Unicode char */
    }
    *path = &p[si];                     /* Return pointer to the next segment */
    7142:	f04f 0324 	mov.w	r3, #36	; 0x24
    cf = (w < ' ') ? NS_LAST : 0;       /* Set last segment flag if end of path */
#if _FS_RPATH
    if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
    7146:	f47f af36 	bne.w	6fb6 <follow_path+0xea>
    714a:	882a      	ldrh	r2, [r5, #0]
    714c:	2a2e      	cmp	r2, #46	; 0x2e
    714e:	f47f af37 	bne.w	6fc0 <follow_path+0xf4>
        (di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
        lfn[di] = 0;
        for (i = 0; i < 11; i++)
            dj->fn[i] = (i < di) ? '.' : ' ';
    7152:	69b1      	ldr	r1, [r6, #24]
    *path = &p[si];                     /* Return pointer to the next segment */
    cf = (w < ' ') ? NS_LAST : 0;       /* Set last segment flag if end of path */
#if _FS_RPATH
    if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
        (di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
        lfn[di] = 0;
    7154:	2000      	movs	r0, #0
    7156:	8068      	strh	r0, [r5, #2]
        for (i = 0; i < 11; i++)
            dj->fn[i] = (i < di) ? '.' : ' ';
    7158:	700a      	strb	r2, [r1, #0]
    715a:	69b2      	ldr	r2, [r6, #24]
    715c:	2120      	movs	r1, #32
    715e:	7051      	strb	r1, [r2, #1]
    7160:	69b1      	ldr	r1, [r6, #24]
    7162:	2220      	movs	r2, #32
    7164:	708a      	strb	r2, [r1, #2]
    7166:	69b1      	ldr	r1, [r6, #24]
    7168:	70ca      	strb	r2, [r1, #3]
    716a:	69b1      	ldr	r1, [r6, #24]
    716c:	710a      	strb	r2, [r1, #4]
    716e:	69b1      	ldr	r1, [r6, #24]
    7170:	714a      	strb	r2, [r1, #5]
    7172:	69b1      	ldr	r1, [r6, #24]
    7174:	718a      	strb	r2, [r1, #6]
    7176:	69b1      	ldr	r1, [r6, #24]
    7178:	71ca      	strb	r2, [r1, #7]
    717a:	69b1      	ldr	r1, [r6, #24]
    717c:	720a      	strb	r2, [r1, #8]
    717e:	69b1      	ldr	r1, [r6, #24]
    7180:	724a      	strb	r2, [r1, #9]
    7182:	69b1      	ldr	r1, [r6, #24]
    7184:	728a      	strb	r2, [r1, #10]
        dj->fn[i] = cf | NS_DOT;        /* This is a dot entry */
    7186:	69b2      	ldr	r2, [r6, #24]
    BYTE c, *dir;
#if _USE_LFN
    BYTE a, ord, sum;
#endif

    res = dir_sdi(dj, 0);           /* Rewind directory object */
    7188:	4630      	mov	r0, r6
    if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
        (di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
        lfn[di] = 0;
        for (i = 0; i < 11; i++)
            dj->fn[i] = (i < di) ? '.' : ' ';
        dj->fn[i] = cf | NS_DOT;        /* This is a dot entry */
    718a:	72d3      	strb	r3, [r2, #11]
    BYTE c, *dir;
#if _USE_LFN
    BYTE a, ord, sum;
#endif

    res = dir_sdi(dj, 0);           /* Rewind directory object */
    718c:	2100      	movs	r1, #0
    718e:	f7ff faab 	bl	66e8 <dir_sdi>
    if (res != FR_OK) return res;
    7192:	2800      	cmp	r0, #0
    7194:	d0b5      	beq.n	7102 <follow_path+0x236>
    } else {                            /* Follow path */
        for (;;) {
            res = create_name(dj, &path);   /* Get a segment */
            if (res != FR_OK) break;
            res = dir_find(dj);             /* Find it */
            ns = *(dj->fn+NS);
    7196:	69b3      	ldr	r3, [r6, #24]
    7198:	7adb      	ldrb	r3, [r3, #11]
            if (res != FR_OK) {             /* Failed to find the object */
                if (res != FR_NO_FILE) break;   /* Abort if any hard error occured */
    719a:	2804      	cmp	r0, #4
    719c:	f47f aeee 	bne.w	6f7c <follow_path+0xb0>
                /* Object not found */
                if (_FS_RPATH && (ns & NS_DOT)) {   /* If dot entry is not exit */
    71a0:	069c      	lsls	r4, r3, #26
    71a2:	f140 8082 	bpl.w	72aa <follow_path+0x3de>
                    dj->sclust = 0; dj->dir = 0;    /* It is the root dir */
    71a6:	2200      	movs	r2, #0
                    res = FR_OK;
                    if (!(ns & NS_LAST)) continue;
    71a8:	0759      	lsls	r1, r3, #29
            ns = *(dj->fn+NS);
            if (res != FR_OK) {             /* Failed to find the object */
                if (res != FR_NO_FILE) break;   /* Abort if any hard error occured */
                /* Object not found */
                if (_FS_RPATH && (ns & NS_DOT)) {   /* If dot entry is not exit */
                    dj->sclust = 0; dj->dir = 0;    /* It is the root dir */
    71aa:	60b2      	str	r2, [r6, #8]
    71ac:	6172      	str	r2, [r6, #20]
                    res = FR_OK;
                    if (!(ns & NS_LAST)) continue;
    71ae:	f57f aea1 	bpl.w	6ef4 <follow_path+0x28>
            if (res != FR_OK) {             /* Failed to find the object */
                if (res != FR_NO_FILE) break;   /* Abort if any hard error occured */
                /* Object not found */
                if (_FS_RPATH && (ns & NS_DOT)) {   /* If dot entry is not exit */
                    dj->sclust = 0; dj->dir = 0;    /* It is the root dir */
                    res = FR_OK;
    71b2:	2000      	movs	r0, #0
            dj->sclust = LD_CLUST(dir);
        }
    }

    return res;
}
    71b4:	b003      	add	sp, #12
    71b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }
    *path = &p[si];                     /* Return pointer to the next segment */
    cf = (w < ' ') ? NS_LAST : 0;       /* Set last segment flag if end of path */
#if _FS_RPATH
    if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
        (di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
    71ba:	886a      	ldrh	r2, [r5, #2]
    71bc:	2a2e      	cmp	r2, #46	; 0x2e
    71be:	f47f aeff 	bne.w	6fc0 <follow_path+0xf4>
    71c2:	882a      	ldrh	r2, [r5, #0]
    71c4:	2a2e      	cmp	r2, #46	; 0x2e
    71c6:	f47f aefb 	bne.w	6fc0 <follow_path+0xf4>
        lfn[di] = 0;
        for (i = 0; i < 11; i++)
            dj->fn[i] = (i < di) ? '.' : ' ';
    71ca:	69b1      	ldr	r1, [r6, #24]
    *path = &p[si];                     /* Return pointer to the next segment */
    cf = (w < ' ') ? NS_LAST : 0;       /* Set last segment flag if end of path */
#if _FS_RPATH
    if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
        (di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
        lfn[di] = 0;
    71cc:	2000      	movs	r0, #0
    71ce:	80a8      	strh	r0, [r5, #4]
        for (i = 0; i < 11; i++)
            dj->fn[i] = (i < di) ? '.' : ' ';
    71d0:	700a      	strb	r2, [r1, #0]
    71d2:	69b1      	ldr	r1, [r6, #24]
    71d4:	704a      	strb	r2, [r1, #1]
    71d6:	69b1      	ldr	r1, [r6, #24]
    71d8:	e7c3      	b.n	7162 <follow_path+0x296>
        if (w == ' ' || (w == '.' && si != di)) {   /* Remove spaces and dots */
            cf |= NS_LOSS | NS_LFN; continue;
        }

        if (i >= ni || si == di) {      /* Extension or end of SFN */
            if (ni == 11) {             /* Long extension */
    71da:	f1bb 0f0b 	cmp.w	fp, #11
    71de:	d05a      	beq.n	7296 <follow_path+0x3ca>
                cf |= NS_LOSS | NS_LFN; break;
            }
            if (si != di) cf |= NS_LOSS | NS_LFN;   /* Out of 8.3 format */
            if (si > di) break;         /* No extension */
            si = di; i = 8; ni = 11;    /* Enter extension section */
            b <<= 2; continue;
    71e0:	009b      	lsls	r3, r3, #2
    71e2:	b2db      	uxtb	r3, r3
    71e4:	4622      	mov	r2, r4
    71e6:	4627      	mov	r7, r4
            if (ni == 11) {             /* Long extension */
                cf |= NS_LOSS | NS_LFN; break;
            }
            if (si != di) cf |= NS_LOSS | NS_LFN;   /* Out of 8.3 format */
            if (si > di) break;         /* No extension */
            si = di; i = 8; ni = 11;    /* Enter extension section */
    71e8:	f04f 0b0b 	mov.w	fp, #11
    71ec:	f04f 0a08 	mov.w	sl, #8
    71f0:	e74e      	b.n	7090 <follow_path+0x1c4>
        path++;
    dj->sclust = 0;                     /* Start from the root dir */
#endif

    if ((UINT)*path < ' ') {            /* Nul path means the start directory itself */
        res = dir_sdi(dj, 0);
    71f2:	4630      	mov	r0, r6
    71f4:	2100      	movs	r1, #0
    71f6:	f7ff fa77 	bl	66e8 <dir_sdi>
        dj->dir = 0;
    71fa:	2300      	movs	r3, #0
    71fc:	6173      	str	r3, [r6, #20]
            dj->sclust = LD_CLUST(dir);
        }
    }

    return res;
}
    71fe:	b003      	add	sp, #12
    7200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BYTE *dir, ns;


#if _FS_RPATH
    if (*path == '/' || *path == '\\') { /* There is a heading separator */
        path++; dj->sclust = 0;     /* Strip it and start from the root dir */
    7204:	f108 0801 	add.w	r8, r8, #1
    7208:	2300      	movs	r3, #0
    720a:	e66d      	b.n	6ee8 <follow_path+0x1c>

    if (dj->fn[0] == DDE) dj->fn[0] = NDDE; /* If the first char collides with deleted mark, replace it with 0x05 */

    if (ni == 8) b <<= 2;
    if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)   /* Create LFN entry when there are composite capitals */
        cf |= NS_LFN;
    720c:	f049 0902 	orr.w	r9, r9, #2
    7210:	e762      	b.n	70d8 <follow_path+0x20c>
            }
        }
        dj->fn[i++] = (BYTE)w;
    }

    if (dj->fn[0] == DDE) dj->fn[0] = NDDE; /* If the first char collides with deleted mark, replace it with 0x05 */
    7212:	f04f 0b0b 	mov.w	fp, #11
    7216:	2205      	movs	r2, #5
    7218:	700a      	strb	r2, [r1, #0]
    721a:	69b1      	ldr	r1, [r6, #24]
    721c:	461a      	mov	r2, r3
    721e:	e74c      	b.n	70ba <follow_path+0x1ee>
    7220:	9301      	str	r3, [sp, #4]
        if (w >= 0x80) {                /* Non ASCII char */
#ifdef _EXCVT
            w = ff_convert(w, 0);       /* Unicode -> OEM code */
            if (w) w = excvt[w - 0x80]; /* Convert extended char to upper (SBCS) */
#else
            w = ff_convert(ff_wtoupper(w), 0);  /* Upper converted Unicode -> OEM code */
    7222:	f7fb fe8b 	bl	2f3c <ff_wtoupper>
    7226:	2100      	movs	r1, #0
    7228:	f7fb fe84 	bl	2f34 <ff_convert>
#endif
            cf |= NS_LFN;               /* Force create LFN entry */
        }

        if (_DF1S && w >= 0x100) {      /* Double byte char (always false on SBCS cfg) */
    722c:	28ff      	cmp	r0, #255	; 0xff
            w = ff_convert(w, 0);       /* Unicode -> OEM code */
            if (w) w = excvt[w - 0x80]; /* Convert extended char to upper (SBCS) */
#else
            w = ff_convert(ff_wtoupper(w), 0);  /* Upper converted Unicode -> OEM code */
#endif
            cf |= NS_LFN;               /* Force create LFN entry */
    722e:	f049 0e02 	orr.w	lr, r9, #2
        }

        if (_DF1S && w >= 0x100) {      /* Double byte char (always false on SBCS cfg) */
    7232:	9b01      	ldr	r3, [sp, #4]
    7234:	d93f      	bls.n	72b6 <follow_path+0x3ea>
            if (i >= ni - 1) {
    7236:	f10b 32ff 	add.w	r2, fp, #4294967295
    723a:	4592      	cmp	sl, r2
    723c:	db14      	blt.n	7268 <follow_path+0x39c>
                cf |= NS_LOSS | NS_LFN; i = ni; continue;
    723e:	f049 0903 	orr.w	r9, r9, #3
    7242:	463a      	mov	r2, r7
    7244:	46da      	mov	sl, fp
    7246:	e723      	b.n	7090 <follow_path+0x1c4>
    7248:	0000d090 	.word	0x0000d090
    724c:	0000d09c 	.word	0x0000d09c
            }
            dj->fn[i++] = (BYTE)(w >> 8);
        } else {                        /* Single byte char */
            if (!w || chk_chr("+,;=[]", w)) {   /* Replace illegal chars for SFN */
                w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    7250:	f049 0903 	orr.w	r9, r9, #3
    7254:	205f      	movs	r0, #95	; 0x5f
                        b |= 1; w -= 0x20;
                    }
                }
            }
        }
        dj->fn[i++] = (BYTE)w;
    7256:	69b2      	ldr	r2, [r6, #24]
    7258:	f10a 0101 	add.w	r1, sl, #1
    725c:	f802 000a 	strb.w	r0, [r2, sl]
    7260:	fa1f fa81 	uxth.w	sl, r1
    7264:	463a      	mov	r2, r7
    7266:	e713      	b.n	7090 <follow_path+0x1c4>

        if (_DF1S && w >= 0x100) {      /* Double byte char (always false on SBCS cfg) */
            if (i >= ni - 1) {
                cf |= NS_LOSS | NS_LFN; i = ni; continue;
            }
            dj->fn[i++] = (BYTE)(w >> 8);
    7268:	69b2      	ldr	r2, [r6, #24]
    726a:	ea4f 2c10 	mov.w	ip, r0, lsr #8
    726e:	f10a 0101 	add.w	r1, sl, #1
    7272:	f802 c00a 	strb.w	ip, [r2, sl]
            w = ff_convert(w, 0);       /* Unicode -> OEM code */
            if (w) w = excvt[w - 0x80]; /* Convert extended char to upper (SBCS) */
#else
            w = ff_convert(ff_wtoupper(w), 0);  /* Upper converted Unicode -> OEM code */
#endif
            cf |= NS_LFN;               /* Force create LFN entry */
    7276:	46f1      	mov	r9, lr

        if (_DF1S && w >= 0x100) {      /* Double byte char (always false on SBCS cfg) */
            if (i >= ni - 1) {
                cf |= NS_LOSS | NS_LFN; i = ni; continue;
            }
            dj->fn[i++] = (BYTE)(w >> 8);
    7278:	fa1f fa81 	uxth.w	sl, r1
    727c:	b2c0      	uxtb	r0, r0
    727e:	e7ea      	b.n	7256 <follow_path+0x38a>
                w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
            } else {
                if (IsUpper(w)) {       /* ASCII large capital */
                    b |= 2;
                } else {
                    if (IsLower(w)) {   /* ASCII small capital */
    7280:	f1a0 0261 	sub.w	r2, r0, #97	; 0x61
    7284:	b292      	uxth	r2, r2
    7286:	2a19      	cmp	r2, #25
                        b |= 1; w -= 0x20;
    7288:	bf97      	itett	ls
    728a:	3820      	subls	r0, #32
    728c:	b2c0      	uxtbhi	r0, r0
    728e:	b2c0      	uxtbls	r0, r0
    7290:	f043 0301 	orrls.w	r3, r3, #1
    7294:	e7df      	b.n	7256 <follow_path+0x38a>
            }
        }
        dj->fn[i++] = (BYTE)w;
    }

    if (dj->fn[0] == DDE) dj->fn[0] = NDDE; /* If the first char collides with deleted mark, replace it with 0x05 */
    7296:	69b1      	ldr	r1, [r6, #24]
    7298:	780a      	ldrb	r2, [r1, #0]
    729a:	2ae5      	cmp	r2, #229	; 0xe5
            cf |= NS_LOSS | NS_LFN; continue;
        }

        if (i >= ni || si == di) {      /* Extension or end of SFN */
            if (ni == 11) {             /* Long extension */
                cf |= NS_LOSS | NS_LFN; break;
    729c:	f049 0903 	orr.w	r9, r9, #3
            }
        }
        dj->fn[i++] = (BYTE)w;
    }

    if (dj->fn[0] == DDE) dj->fn[0] = NDDE; /* If the first char collides with deleted mark, replace it with 0x05 */
    72a0:	d0b7      	beq.n	7212 <follow_path+0x346>
    72a2:	461a      	mov	r2, r3
    72a4:	e70e      	b.n	70c4 <follow_path+0x1f8>
                break;
            }
            if (ns & NS_LAST) break;            /* Last segment match. Function completed. */
            dir = dj->dir;                      /* There is next segment. Follow the sub directory */
            if (!(dir[DIR_Attr] & AM_DIR)) {    /* Cannot follow because it is a file */
                res = FR_NO_PATH; break;
    72a6:	2005      	movs	r0, #5
    72a8:	e668      	b.n	6f7c <follow_path+0xb0>
                if (_FS_RPATH && (ns & NS_DOT)) {   /* If dot entry is not exit */
                    dj->sclust = 0; dj->dir = 0;    /* It is the root dir */
                    res = FR_OK;
                    if (!(ns & NS_LAST)) continue;
                } else {                            /* Could not find the object */
                    if (!(ns & NS_LAST)) res = FR_NO_PATH;
    72aa:	f013 0f04 	tst.w	r3, #4
    72ae:	bf14      	ite	ne
    72b0:	2004      	movne	r0, #4
    72b2:	2005      	moveq	r0, #5
    72b4:	e662      	b.n	6f7c <follow_path+0xb0>
            w = ff_convert(w, 0);       /* Unicode -> OEM code */
            if (w) w = excvt[w - 0x80]; /* Convert extended char to upper (SBCS) */
#else
            w = ff_convert(ff_wtoupper(w), 0);  /* Upper converted Unicode -> OEM code */
#endif
            cf |= NS_LFN;               /* Force create LFN entry */
    72b6:	46f1      	mov	r9, lr
            if (i >= ni - 1) {
                cf |= NS_LOSS | NS_LFN; i = ni; continue;
            }
            dj->fn[i++] = (BYTE)(w >> 8);
        } else {                        /* Single byte char */
            if (!w || chk_chr("+,;=[]", w)) {   /* Replace illegal chars for SFN */
    72b8:	2800      	cmp	r0, #0
    72ba:	d0c9      	beq.n	7250 <follow_path+0x384>
            w = ff_convert(w, 0);       /* Unicode -> OEM code */
            if (w) w = excvt[w - 0x80]; /* Convert extended char to upper (SBCS) */
#else
            w = ff_convert(ff_wtoupper(w), 0);  /* Upper converted Unicode -> OEM code */
#endif
            cf |= NS_LFN;               /* Force create LFN entry */
    72bc:	46f1      	mov	r9, lr
    72be:	e6cb      	b.n	7058 <follow_path+0x18c>

000072c0 <gen_numname>:
    BYTE *dst,          /* Pointer to generated SFN */
    const BYTE *src,    /* Pointer to source SFN to be modified */
    const WCHAR *lfn,   /* Pointer to LFN */
    WORD seq
)
{
    72c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    72c4:	ea40 0401 	orr.w	r4, r0, r1
    72c8:	07a4      	lsls	r4, r4, #30
    72ca:	b083      	sub	sp, #12
    72cc:	f040 810c 	bne.w	74e8 <gen_numname+0x228>
    72d0:	1d04      	adds	r4, r0, #4
    72d2:	1d0d      	adds	r5, r1, #4
    72d4:	42a8      	cmp	r0, r5
    72d6:	bf38      	it	cc
    72d8:	42a1      	cmpcc	r1, r4
    72da:	f0c0 8105 	bcc.w	74e8 <gen_numname+0x228>
        d += sizeof(int); s += sizeof(int);
        cnt -= sizeof(int);
    }
#endif
    while (cnt--)
        *d++ = *s++;
    72de:	680c      	ldr	r4, [r1, #0]
    72e0:	6004      	str	r4, [r0, #0]
    72e2:	684c      	ldr	r4, [r1, #4]
    72e4:	6044      	str	r4, [r0, #4]
    72e6:	7a0c      	ldrb	r4, [r1, #8]
    72e8:	7204      	strb	r4, [r0, #8]
    72ea:	7a4c      	ldrb	r4, [r1, #9]
    72ec:	7244      	strb	r4, [r0, #9]
    72ee:	7a89      	ldrb	r1, [r1, #10]
    72f0:	7281      	strb	r1, [r0, #10]
    72f2:	f8b2 e000 	ldrh.w	lr, [r2]
    BYTE *dst,          /* Pointer to generated SFN */
    const BYTE *src,    /* Pointer to source SFN to be modified */
    const WCHAR *lfn,   /* Pointer to LFN */
    WORD seq
)
{
    72f6:	4c85      	ldr	r4, [pc, #532]	; (750c <gen_numname+0x24c>)
void crc24_update(DWORD *crc, BYTE byte) {
    *crc = *crc ^ (byte << 16);
    for (int i = 0; i < 8; i++) {
        *crc = *crc << 1;
        if ((*crc & 0x1000000) != 0) {
            *crc = *crc ^ CRC24_POLY;
    72f8:	f8df a214 	ldr.w	sl, [pc, #532]	; 7510 <gen_numname+0x250>
#define CRC24_INIT 0x00B704CE
#define CRC24_POLY 0x01864CFB
#define CRC24_MASK 0x00FFFFFF

void crc24_update(DWORD *crc, BYTE byte) {
    *crc = *crc ^ (byte << 16);
    72fc:	ea4f 2b1e 	mov.w	fp, lr, lsr #8
    7300:	ea84 440b 	eor.w	r4, r4, fp, lsl #16
    for (int i = 0; i < 8; i++) {
        *crc = *crc << 1;
    7304:	0064      	lsls	r4, r4, #1
        if ((*crc & 0x1000000) != 0) {
            *crc = *crc ^ CRC24_POLY;
    7306:	4651      	mov	r1, sl
    7308:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
    730c:	46d1      	mov	r9, sl
    730e:	46d0      	mov	r8, sl
    7310:	46d4      	mov	ip, sl
    7312:	4657      	mov	r7, sl
    7314:	ea84 0a0a 	eor.w	sl, r4, sl
    7318:	bf18      	it	ne
    731a:	4654      	movne	r4, sl
#define CRC24_MASK 0x00FFFFFF

void crc24_update(DWORD *crc, BYTE byte) {
    *crc = *crc ^ (byte << 16);
    for (int i = 0; i < 8; i++) {
        *crc = *crc << 1;
    731c:	0064      	lsls	r4, r4, #1
    731e:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
        if ((*crc & 0x1000000) != 0) {
            *crc = *crc ^ CRC24_POLY;
    7322:	ea84 0909 	eor.w	r9, r4, r9
    7326:	bf18      	it	ne
    7328:	464c      	movne	r4, r9
#define CRC24_MASK 0x00FFFFFF

void crc24_update(DWORD *crc, BYTE byte) {
    *crc = *crc ^ (byte << 16);
    for (int i = 0; i < 8; i++) {
        *crc = *crc << 1;
    732a:	0064      	lsls	r4, r4, #1
    732c:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
        if ((*crc & 0x1000000) != 0) {
            *crc = *crc ^ CRC24_POLY;
    7330:	ea84 0808 	eor.w	r8, r4, r8
    7334:	bf18      	it	ne
    7336:	4644      	movne	r4, r8
#define CRC24_MASK 0x00FFFFFF

void crc24_update(DWORD *crc, BYTE byte) {
    *crc = *crc ^ (byte << 16);
    for (int i = 0; i < 8; i++) {
        *crc = *crc << 1;
    7338:	0064      	lsls	r4, r4, #1
    733a:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
        if ((*crc & 0x1000000) != 0) {
            *crc = *crc ^ CRC24_POLY;
    733e:	ea84 0c0c 	eor.w	ip, r4, ip
    7342:	bf18      	it	ne
    7344:	4664      	movne	r4, ip
#define CRC24_MASK 0x00FFFFFF

void crc24_update(DWORD *crc, BYTE byte) {
    *crc = *crc ^ (byte << 16);
    for (int i = 0; i < 8; i++) {
        *crc = *crc << 1;
    7346:	0064      	lsls	r4, r4, #1
    7348:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
        if ((*crc & 0x1000000) != 0) {
            *crc = *crc ^ CRC24_POLY;
    734c:	460e      	mov	r6, r1
    734e:	460d      	mov	r5, r1
    7350:	ea81 0104 	eor.w	r1, r1, r4
    7354:	bf08      	it	eq
    7356:	4621      	moveq	r1, r4
#define CRC24_MASK 0x00FFFFFF

void crc24_update(DWORD *crc, BYTE byte) {
    *crc = *crc ^ (byte << 16);
    for (int i = 0; i < 8; i++) {
        *crc = *crc << 1;
    7358:	0049      	lsls	r1, r1, #1
    735a:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
        if ((*crc & 0x1000000) != 0) {
            *crc = *crc ^ CRC24_POLY;
    735e:	ea87 0701 	eor.w	r7, r7, r1
    7362:	bf18      	it	ne
    7364:	4639      	movne	r1, r7
#define CRC24_MASK 0x00FFFFFF

void crc24_update(DWORD *crc, BYTE byte) {
    *crc = *crc ^ (byte << 16);
    for (int i = 0; i < 8; i++) {
        *crc = *crc << 1;
    7366:	0049      	lsls	r1, r1, #1
    7368:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
        if ((*crc & 0x1000000) != 0) {
            *crc = *crc ^ CRC24_POLY;
    736c:	ea86 0601 	eor.w	r6, r6, r1
    7370:	bf18      	it	ne
    7372:	4631      	movne	r1, r6
#define CRC24_MASK 0x00FFFFFF

void crc24_update(DWORD *crc, BYTE byte) {
    *crc = *crc ^ (byte << 16);
    for (int i = 0; i < 8; i++) {
        *crc = *crc << 1;
    7374:	0049      	lsls	r1, r1, #1
    7376:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
        if ((*crc & 0x1000000) != 0) {
            *crc = *crc ^ CRC24_POLY;
    737a:	ea85 0501 	eor.w	r5, r5, r1
    737e:	bf18      	it	ne
    7380:	4629      	movne	r1, r5
#define CRC24_INIT 0x00B704CE
#define CRC24_POLY 0x01864CFB
#define CRC24_MASK 0x00FFFFFF

void crc24_update(DWORD *crc, BYTE byte) {
    *crc = *crc ^ (byte << 16);
    7382:	fa5f fe8e 	uxtb.w	lr, lr
    for (int i = 0; i < 8; i++) {
        *crc = *crc << 1;
        if ((*crc & 0x1000000) != 0) {
            *crc = *crc ^ CRC24_POLY;
    7386:	f8df a188 	ldr.w	sl, [pc, #392]	; 7510 <gen_numname+0x250>
#define CRC24_INIT 0x00B704CE
#define CRC24_POLY 0x01864CFB
#define CRC24_MASK 0x00FFFFFF

void crc24_update(DWORD *crc, BYTE byte) {
    *crc = *crc ^ (byte << 16);
    738a:	ea81 410e 	eor.w	r1, r1, lr, lsl #16
    for (int i = 0; i < 8; i++) {
        *crc = *crc << 1;
    738e:	0049      	lsls	r1, r1, #1
        if ((*crc & 0x1000000) != 0) {
            *crc = *crc ^ CRC24_POLY;
    7390:	4656      	mov	r6, sl
    7392:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
    7396:	46d1      	mov	r9, sl
    7398:	46d0      	mov	r8, sl
    739a:	4654      	mov	r4, sl
    739c:	ea81 0a0a 	eor.w	sl, r1, sl
    73a0:	bf18      	it	ne
    73a2:	4651      	movne	r1, sl
#define CRC24_MASK 0x00FFFFFF

void crc24_update(DWORD *crc, BYTE byte) {
    *crc = *crc ^ (byte << 16);
    for (int i = 0; i < 8; i++) {
        *crc = *crc << 1;
    73a4:	0049      	lsls	r1, r1, #1
    73a6:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
        if ((*crc & 0x1000000) != 0) {
            *crc = *crc ^ CRC24_POLY;
    73aa:	ea81 0909 	eor.w	r9, r1, r9
    73ae:	bf18      	it	ne
    73b0:	4649      	movne	r1, r9
#define CRC24_MASK 0x00FFFFFF

void crc24_update(DWORD *crc, BYTE byte) {
    *crc = *crc ^ (byte << 16);
    for (int i = 0; i < 8; i++) {
        *crc = *crc << 1;
    73b2:	0049      	lsls	r1, r1, #1
    73b4:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
        if ((*crc & 0x1000000) != 0) {
            *crc = *crc ^ CRC24_POLY;
    73b8:	ea81 0808 	eor.w	r8, r1, r8
    73bc:	bf18      	it	ne
    73be:	4641      	movne	r1, r8
#define CRC24_MASK 0x00FFFFFF

void crc24_update(DWORD *crc, BYTE byte) {
    *crc = *crc ^ (byte << 16);
    for (int i = 0; i < 8; i++) {
        *crc = *crc << 1;
    73c0:	0049      	lsls	r1, r1, #1
    73c2:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
        if ((*crc & 0x1000000) != 0) {
            *crc = *crc ^ CRC24_POLY;
    73c6:	4637      	mov	r7, r6
    73c8:	4635      	mov	r5, r6
    73ca:	46b4      	mov	ip, r6
    73cc:	ea86 0601 	eor.w	r6, r6, r1
    73d0:	bf08      	it	eq
    73d2:	460e      	moveq	r6, r1
#define CRC24_MASK 0x00FFFFFF

void crc24_update(DWORD *crc, BYTE byte) {
    *crc = *crc ^ (byte << 16);
    for (int i = 0; i < 8; i++) {
        *crc = *crc << 1;
    73d4:	0076      	lsls	r6, r6, #1
    73d6:	f016 7f80 	tst.w	r6, #16777216	; 0x1000000
        if ((*crc & 0x1000000) != 0) {
            *crc = *crc ^ CRC24_POLY;
    73da:	ea84 0406 	eor.w	r4, r4, r6
    73de:	bf18      	it	ne
    73e0:	4626      	movne	r6, r4
#define CRC24_MASK 0x00FFFFFF

void crc24_update(DWORD *crc, BYTE byte) {
    *crc = *crc ^ (byte << 16);
    for (int i = 0; i < 8; i++) {
        *crc = *crc << 1;
    73e2:	0076      	lsls	r6, r6, #1
    73e4:	f016 7f80 	tst.w	r6, #16777216	; 0x1000000
        if ((*crc & 0x1000000) != 0) {
            *crc = *crc ^ CRC24_POLY;
    73e8:	ea87 0706 	eor.w	r7, r7, r6
    73ec:	bf18      	it	ne
    73ee:	463e      	movne	r6, r7
#define CRC24_MASK 0x00FFFFFF

void crc24_update(DWORD *crc, BYTE byte) {
    *crc = *crc ^ (byte << 16);
    for (int i = 0; i < 8; i++) {
        *crc = *crc << 1;
    73f0:	0076      	lsls	r6, r6, #1
    73f2:	f016 7f80 	tst.w	r6, #16777216	; 0x1000000
        if ((*crc & 0x1000000) != 0) {
            *crc = *crc ^ CRC24_POLY;
    73f6:	ea85 0506 	eor.w	r5, r5, r6
    73fa:	bf08      	it	eq
    73fc:	4635      	moveq	r5, r6
#define CRC24_MASK 0x00FFFFFF

void crc24_update(DWORD *crc, BYTE byte) {
    *crc = *crc ^ (byte << 16);
    for (int i = 0; i < 8; i++) {
        *crc = *crc << 1;
    73fe:	006c      	lsls	r4, r5, #1

    mem_cpy(dst, src, 11);

    DWORD crc = CRC24_INIT;

    do { crc24(&crc, *(lfn++)); } while (*lfn);
    7400:	f832 ef02 	ldrh.w	lr, [r2, #2]!
    7404:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
void crc24_update(DWORD *crc, BYTE byte) {
    *crc = *crc ^ (byte << 16);
    for (int i = 0; i < 8; i++) {
        *crc = *crc << 1;
        if ((*crc & 0x1000000) != 0) {
            *crc = *crc ^ CRC24_POLY;
    7408:	ea84 0c0c 	eor.w	ip, r4, ip
    740c:	bf18      	it	ne
    740e:	4664      	movne	r4, ip

    mem_cpy(dst, src, 11);

    DWORD crc = CRC24_INIT;

    do { crc24(&crc, *(lfn++)); } while (*lfn);
    7410:	f1be 0f00 	cmp.w	lr, #0
    7414:	f47f af70 	bne.w	72f8 <gen_numname+0x38>

    crc &= CRC24_MASK;
    7418:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000

    for (i = 7; i > 1; i--) {
        c = (crc % 16) + '0';
    741c:	f3c2 1603 	ubfx	r6, r2, #4, #4
    7420:	f3c2 2503 	ubfx	r5, r2, #8, #4
    7424:	f3c2 3103 	ubfx	r1, r2, #12, #4
    7428:	f3c2 4c03 	ubfx	ip, r2, #16, #4
    742c:	f004 040f 	and.w	r4, r4, #15
    7430:	0d12      	lsrs	r2, r2, #20
        crc /= 16;
    }

    ns[i--] = '~';

    c = (seq % 16) + '0';
    7432:	f003 030f 	and.w	r3, r3, #15
    do { crc24(&crc, *(lfn++)); } while (*lfn);

    crc &= CRC24_MASK;

    for (i = 7; i > 1; i--) {
        c = (crc % 16) + '0';
    7436:	f102 0730 	add.w	r7, r2, #48	; 0x30
    743a:	f106 0a30 	add.w	sl, r6, #48	; 0x30
    743e:	f105 0930 	add.w	r9, r5, #48	; 0x30
        if (c > '9') c += 7;
    7442:	3637      	adds	r6, #55	; 0x37
    7444:	3537      	adds	r5, #55	; 0x37
    do { crc24(&crc, *(lfn++)); } while (*lfn);

    crc &= CRC24_MASK;

    for (i = 7; i > 1; i--) {
        c = (crc % 16) + '0';
    7446:	f101 0830 	add.w	r8, r1, #48	; 0x30
    744a:	f10c 0e30 	add.w	lr, ip, #48	; 0x30
        if (c > '9') c += 7;
    744e:	3137      	adds	r1, #55	; 0x37
    7450:	f10c 0c37 	add.w	ip, ip, #55	; 0x37
    do { crc24(&crc, *(lfn++)); } while (*lfn);

    crc &= CRC24_MASK;

    for (i = 7; i > 1; i--) {
        c = (crc % 16) + '0';
    7454:	f104 0b30 	add.w	fp, r4, #48	; 0x30
        if (c > '9') c += 7;
    7458:	3237      	adds	r2, #55	; 0x37
    745a:	3437      	adds	r4, #55	; 0x37
    745c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
    7460:	bf88      	it	hi
    7462:	46b2      	movhi	sl, r6
    7464:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    7468:	bf88      	it	hi
    746a:	46a9      	movhi	r9, r5
    746c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
    7470:	bf88      	it	hi
    7472:	4688      	movhi	r8, r1
    7474:	f1be 0f39 	cmp.w	lr, #57	; 0x39
    7478:	bf88      	it	hi
    747a:	46e6      	movhi	lr, ip
        crc /= 16;
    }

    ns[i--] = '~';

    c = (seq % 16) + '0';
    747c:	f103 0130 	add.w	r1, r3, #48	; 0x30
    7480:	2f39      	cmp	r7, #57	; 0x39
    7482:	bf98      	it	ls
    7484:	463a      	movls	r2, r7
    7486:	f1bb 0f39 	cmp.w	fp, #57	; 0x39
    748a:	bf88      	it	hi
    748c:	46a3      	movhi	fp, r4
        if (c > '9') c += 7;
        ns[i] = c;
        crc /= 16;
    }

    ns[i--] = '~';
    748e:	247e      	movs	r4, #126	; 0x7e
    crc &= CRC24_MASK;

    for (i = 7; i > 1; i--) {
        c = (crc % 16) + '0';
        if (c > '9') c += 7;
        ns[i] = c;
    7490:	f88d e003 	strb.w	lr, [sp, #3]
    7494:	f88d 2002 	strb.w	r2, [sp, #2]
        crc /= 16;
    }

    ns[i--] = '~';
    7498:	f88d 4001 	strb.w	r4, [sp, #1]
    crc &= CRC24_MASK;

    for (i = 7; i > 1; i--) {
        c = (crc % 16) + '0';
        if (c > '9') c += 7;
        ns[i] = c;
    749c:	f88d a006 	strb.w	sl, [sp, #6]
    74a0:	f88d 9005 	strb.w	r9, [sp, #5]
    74a4:	f88d 8004 	strb.w	r8, [sp, #4]
    74a8:	f88d b007 	strb.w	fp, [sp, #7]
    }

    ns[i--] = '~';

    c = (seq % 16) + '0';
    if (c > '9') c += 7;
    74ac:	2939      	cmp	r1, #57	; 0x39
    74ae:	bf88      	it	hi
    74b0:	f103 0137 	addhi.w	r1, r3, #55	; 0x37
            if (j == i - 1) break;
            j++;
        }
    }
    do {
        dst[j++] = (i < 8) ? ns[i++] : ' ';
    74b4:	f89d e001 	ldrb.w	lr, [sp, #1]
    74b8:	f89d 7002 	ldrb.w	r7, [sp, #2]
    74bc:	f89d 6003 	ldrb.w	r6, [sp, #3]
    74c0:	f89d 5004 	ldrb.w	r5, [sp, #4]
    74c4:	f89d 4005 	ldrb.w	r4, [sp, #5]
    74c8:	f89d 2006 	ldrb.w	r2, [sp, #6]
    74cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    74d0:	7001      	strb	r1, [r0, #0]
    74d2:	f880 e001 	strb.w	lr, [r0, #1]
    74d6:	7087      	strb	r7, [r0, #2]
    74d8:	70c6      	strb	r6, [r0, #3]
    74da:	7105      	strb	r5, [r0, #4]
    74dc:	7144      	strb	r4, [r0, #5]
    74de:	7182      	strb	r2, [r0, #6]
    74e0:	71c3      	strb	r3, [r0, #7]
    } while (j < 8);
}
    74e2:	b003      	add	sp, #12
    74e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        d += sizeof(int); s += sizeof(int);
        cnt -= sizeof(int);
    }
#endif
    while (cnt--)
        *d++ = *s++;
    74e8:	780c      	ldrb	r4, [r1, #0]
    74ea:	7004      	strb	r4, [r0, #0]
    74ec:	784c      	ldrb	r4, [r1, #1]
    74ee:	7044      	strb	r4, [r0, #1]
    74f0:	788c      	ldrb	r4, [r1, #2]
    74f2:	7084      	strb	r4, [r0, #2]
    74f4:	78cc      	ldrb	r4, [r1, #3]
    74f6:	70c4      	strb	r4, [r0, #3]
    74f8:	790c      	ldrb	r4, [r1, #4]
    74fa:	7104      	strb	r4, [r0, #4]
    74fc:	794c      	ldrb	r4, [r1, #5]
    74fe:	7144      	strb	r4, [r0, #5]
    7500:	798c      	ldrb	r4, [r1, #6]
    7502:	7184      	strb	r4, [r0, #6]
    7504:	79cc      	ldrb	r4, [r1, #7]
    7506:	71c4      	strb	r4, [r0, #7]
    7508:	e6ed      	b.n	72e6 <gen_numname+0x26>
    750a:	bf00      	nop
    750c:	00b704ce 	.word	0x00b704ce
    7510:	01864cfb 	.word	0x01864cfb

00007514 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (  /* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
    DIR *dj             /* Target directory with object name to be created */
)
{
    7514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    WORD n, ne, is;
    BYTE sn[12], *fn, sum;
    WCHAR *lfn;


    fn = dj->fn; lfn = dj->lfn;
    7518:	6985      	ldr	r5, [r0, #24]
    751a:	69c7      	ldr	r7, [r0, #28]
    751c:	07ab      	lsls	r3, r5, #30
#if !_FS_READONLY
static
FRESULT dir_register (  /* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
    DIR *dj             /* Target directory with object name to be created */
)
{
    751e:	b087      	sub	sp, #28
    7520:	d166      	bne.n	75f0 <dir_register+0xdc>
    7522:	f10d 080c 	add.w	r8, sp, #12
    7526:	1d2b      	adds	r3, r5, #4
    7528:	aa04      	add	r2, sp, #16
    752a:	4295      	cmp	r5, r2
    752c:	bf38      	it	cc
    752e:	4598      	cmpcc	r8, r3
    7530:	d35e      	bcc.n	75f0 <dir_register+0xdc>
        d += sizeof(int); s += sizeof(int);
        cnt -= sizeof(int);
    }
#endif
    while (cnt--)
        *d++ = *s++;
    7532:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
    7536:	9103      	str	r1, [sp, #12]
    7538:	9204      	str	r2, [sp, #16]
    753a:	9305      	str	r3, [sp, #20]


    fn = dj->fn; lfn = dj->lfn;
    mem_cpy(sn, fn, 12);

    if (_FS_RPATH && (sn[NS] & NS_DOT))     /* Cannot create dot entry */
    753c:	f89d 2017 	ldrb.w	r2, [sp, #23]
    7540:	f002 0320 	and.w	r3, r2, #32
    7544:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    7548:	b11b      	cbz	r3, 7552 <dir_register+0x3e>
        return FR_INVALID_NAME;
    754a:	2006      	movs	r0, #6
            dj->fs->wflag = 1;
        }
    }

    return res;
}
    754c:	b007      	add	sp, #28
    754e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    mem_cpy(sn, fn, 12);

    if (_FS_RPATH && (sn[NS] & NS_DOT))     /* Cannot create dot entry */
        return FR_INVALID_NAME;

    if (sn[NS] & NS_LOSS) {         /* When LFN is out of 8.3 format, generate a numbered name */
    7552:	07d6      	lsls	r6, r2, #31
    7554:	4604      	mov	r4, r0
    7556:	d521      	bpl.n	759c <dir_register+0x88>
        fn[NS] = 0; dj->lfn = 0;            /* Find only SFN */
    7558:	72e9      	strb	r1, [r5, #11]
        for (n = 1; n < 16; n++) {
    755a:	2601      	movs	r6, #1

    if (_FS_RPATH && (sn[NS] & NS_DOT))     /* Cannot create dot entry */
        return FR_INVALID_NAME;

    if (sn[NS] & NS_LOSS) {         /* When LFN is out of 8.3 format, generate a numbered name */
        fn[NS] = 0; dj->lfn = 0;            /* Find only SFN */
    755c:	61c1      	str	r1, [r0, #28]
    755e:	f10d 080c 	add.w	r8, sp, #12
    7562:	e007      	b.n	7574 <dir_register+0x60>
    7564:	4620      	mov	r0, r4
    7566:	f7ff fb13 	bl	6b90 <dir_find.part.5>
        for (n = 1; n < 16; n++) {
    756a:	3601      	adds	r6, #1
    756c:	b2b6      	uxth	r6, r6
            gen_numname(fn, sn, lfn, n);    /* Generate a numbered name */
            res = dir_find(dj);             /* Check if the name collides with existing SFN */
            if (res != FR_OK) break;
    756e:	b968      	cbnz	r0, 758c <dir_register+0x78>
    if (_FS_RPATH && (sn[NS] & NS_DOT))     /* Cannot create dot entry */
        return FR_INVALID_NAME;

    if (sn[NS] & NS_LOSS) {         /* When LFN is out of 8.3 format, generate a numbered name */
        fn[NS] = 0; dj->lfn = 0;            /* Find only SFN */
        for (n = 1; n < 16; n++) {
    7570:	2e10      	cmp	r6, #16
    7572:	d0eb      	beq.n	754c <dir_register+0x38>
            gen_numname(fn, sn, lfn, n);    /* Generate a numbered name */
    7574:	4628      	mov	r0, r5
    7576:	4641      	mov	r1, r8
    7578:	463a      	mov	r2, r7
    757a:	4633      	mov	r3, r6
    757c:	f7ff fea0 	bl	72c0 <gen_numname>
    BYTE c, *dir;
#if _USE_LFN
    BYTE a, ord, sum;
#endif

    res = dir_sdi(dj, 0);           /* Rewind directory object */
    7580:	4620      	mov	r0, r4
    7582:	2100      	movs	r1, #0
    7584:	f7ff f8b0 	bl	66e8 <dir_sdi>
    if (res != FR_OK) return res;
    7588:	2800      	cmp	r0, #0
    758a:	d0eb      	beq.n	7564 <dir_register+0x50>
            gen_numname(fn, sn, lfn, n);    /* Generate a numbered name */
            res = dir_find(dj);             /* Check if the name collides with existing SFN */
            if (res != FR_OK) break;
        }
        if (n == 100) return FR_DENIED;     /* Abort if too many collisions */
        if (res != FR_NO_FILE) return res;  /* Abort if the result is other than 'not collided' */
    758c:	2804      	cmp	r0, #4
    758e:	d1dd      	bne.n	754c <dir_register+0x38>
        fn[NS] = sn[NS]; dj->lfn = lfn;
    7590:	f89d 3017 	ldrb.w	r3, [sp, #23]
    7594:	72eb      	strb	r3, [r5, #11]
    7596:	f89d 2017 	ldrb.w	r2, [sp, #23]
    759a:	61e7      	str	r7, [r4, #28]
    }

    if (sn[NS] & NS_LFN) {          /* When LFN is to be created, reserve an SFN + LFN entries. */
    759c:	0795      	lsls	r5, r2, #30
    759e:	f100 80ca 	bmi.w	7736 <dir_register+0x222>
        for (ne = 0; lfn[ne]; ne++) ;
        ne = (ne + 25) / 13;
    } else {                        /* Otherwise reserve only an SFN entry. */
        ne = 1;
    75a2:	f04f 0901 	mov.w	r9, #1
    }

    /* Reserve contiguous entries */
    res = dir_sdi(dj, 0);
    75a6:	4620      	mov	r0, r4
    75a8:	2100      	movs	r1, #0
    75aa:	f7ff f89d 	bl	66e8 <dir_sdi>
    if (res != FR_OK) return res;
    75ae:	2800      	cmp	r0, #0
    75b0:	d1cc      	bne.n	754c <dir_register+0x38>
    75b2:	6925      	ldr	r5, [r4, #16]
    75b4:	6826      	ldr	r6, [r4, #0]
    75b6:	9000      	str	r0, [sp, #0]
    75b8:	4607      	mov	r7, r0

    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    75ba:	46aa      	mov	sl, r5
)                   /* Move to zero only writes back dirty window */
{
    DWORD wsect;


    wsect = fs->winsect;
    75bc:	6b35      	ldr	r5, [r6, #48]	; 0x30
    if (wsect != sector) {  /* Changed current window */
    75be:	4555      	cmp	r5, sl
    75c0:	d005      	beq.n	75ce <dir_register+0xba>
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
    75c2:	7933      	ldrb	r3, [r6, #4]
    75c4:	2b00      	cmp	r3, #0
    75c6:	d13e      	bne.n	7646 <dir_register+0x132>
                    disk_write(fs->drv, fs->win, wsect, 1);
                }
            }
        }
#endif
        if (sector) {
    75c8:	f1ba 0f00 	cmp.w	sl, #0
    75cc:	d164      	bne.n	7698 <dir_register+0x184>
    if (res != FR_OK) return res;
    n = is = 0;
    do {
        res = move_window(dj->fs, dj->sect);
        if (res != FR_OK) break;
        c = *dj->dir;               /* Check the entry status */
    75ce:	6963      	ldr	r3, [r4, #20]
    75d0:	781b      	ldrb	r3, [r3, #0]
        if (c == DDE || c == 0) {   /* Is it a blank entry? */
    75d2:	2be5      	cmp	r3, #229	; 0xe5
    75d4:	d070      	beq.n	76b8 <dir_register+0x1a4>
    75d6:	2b00      	cmp	r3, #0
    75d8:	d06e      	beq.n	76b8 <dir_register+0x1a4>
            if (n == 0) is = dj->index; /* First index of the contiguous entry */
            if (++n == ne) break;   /* A contiguous entry that required count is found */
        } else {
            n = 0;                  /* Not a blank entry. Restart to search */
    75da:	2700      	movs	r7, #0
    DWORD clst;
    WORD i;


    stretch = stretch;      /* To suppress warning on read-only cfg. */
    i = dj->index + 1;
    75dc:	88e5      	ldrh	r5, [r4, #6]
    75de:	3501      	adds	r5, #1
    75e0:	b2ad      	uxth	r5, r5
    if (!i || !dj->sect)    /* Report EOT when index has reached 65535 */
    75e2:	2d00      	cmp	r5, #0
    75e4:	f040 80bc 	bne.w	7760 <dir_register+0x24c>
        return FR_NO_FILE;
    75e8:	2004      	movs	r0, #4
            dj->fs->wflag = 1;
        }
    }

    return res;
}
    75ea:	b007      	add	sp, #28
    75ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        d += sizeof(int); s += sizeof(int);
        cnt -= sizeof(int);
    }
#endif
    while (cnt--)
        *d++ = *s++;
    75f0:	782b      	ldrb	r3, [r5, #0]
    75f2:	f895 b001 	ldrb.w	fp, [r5, #1]
    75f6:	f895 a002 	ldrb.w	sl, [r5, #2]
    75fa:	f895 9003 	ldrb.w	r9, [r5, #3]
    75fe:	f895 8004 	ldrb.w	r8, [r5, #4]
    7602:	f895 c005 	ldrb.w	ip, [r5, #5]
    7606:	f895 e006 	ldrb.w	lr, [r5, #6]
    760a:	79ee      	ldrb	r6, [r5, #7]
    760c:	7a2c      	ldrb	r4, [r5, #8]
    760e:	7a69      	ldrb	r1, [r5, #9]
    7610:	7aaa      	ldrb	r2, [r5, #10]
    7612:	f88d 300c 	strb.w	r3, [sp, #12]
    7616:	7aeb      	ldrb	r3, [r5, #11]
    7618:	f88d b00d 	strb.w	fp, [sp, #13]
    761c:	f88d a00e 	strb.w	sl, [sp, #14]
    7620:	f88d 900f 	strb.w	r9, [sp, #15]
    7624:	f88d 8010 	strb.w	r8, [sp, #16]
    7628:	f88d c011 	strb.w	ip, [sp, #17]
    762c:	f88d e012 	strb.w	lr, [sp, #18]
    7630:	f88d 6013 	strb.w	r6, [sp, #19]
    7634:	f88d 4014 	strb.w	r4, [sp, #20]
    7638:	f88d 1015 	strb.w	r1, [sp, #21]
    763c:	f88d 2016 	strb.w	r2, [sp, #22]
    7640:	f88d 3017 	strb.w	r3, [sp, #23]
    7644:	e77a      	b.n	753c <dir_register+0x28>

    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    7646:	f106 0b34 	add.w	fp, r6, #52	; 0x34
    764a:	4659      	mov	r1, fp
    764c:	7870      	ldrb	r0, [r6, #1]
    764e:	462a      	mov	r2, r5
    7650:	2301      	movs	r3, #1
    7652:	f7fb fdf1 	bl	3238 <disk_write>
    7656:	2800      	cmp	r0, #0
    7658:	f040 80cf 	bne.w	77fa <dir_register+0x2e6>
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    765c:	6a33      	ldr	r3, [r6, #32]
    765e:	6a72      	ldr	r2, [r6, #36]	; 0x24
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
    7660:	7130      	strb	r0, [r6, #4]
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    7662:	441a      	add	r2, r3
    7664:	4295      	cmp	r5, r2
    7666:	d2af      	bcs.n	75c8 <dir_register+0xb4>
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    7668:	f896 8003 	ldrb.w	r8, [r6, #3]
    766c:	f1b8 0f01 	cmp.w	r8, #1
    7670:	d801      	bhi.n	7676 <dir_register+0x162>
    7672:	e7a9      	b.n	75c8 <dir_register+0xb4>
    7674:	6a33      	ldr	r3, [r6, #32]
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    7676:	7870      	ldrb	r0, [r6, #1]
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
                    wsect += fs->fsize;
    7678:	441d      	add	r5, r3
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    767a:	f108 38ff 	add.w	r8, r8, #4294967295
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    767e:	462a      	mov	r2, r5
    7680:	4659      	mov	r1, fp
    7682:	2301      	movs	r3, #1
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    7684:	fa5f f888 	uxtb.w	r8, r8
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    7688:	f7fb fdd6 	bl	3238 <disk_write>
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    768c:	f1b8 0f01 	cmp.w	r8, #1
    7690:	d1f0      	bne.n	7674 <dir_register+0x160>
                    disk_write(fs->drv, fs->win, wsect, 1);
                }
            }
        }
#endif
        if (sector) {
    7692:	f1ba 0f00 	cmp.w	sl, #0
    7696:	d09a      	beq.n	75ce <dir_register+0xba>
            if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    7698:	7870      	ldrb	r0, [r6, #1]
    769a:	f106 0134 	add.w	r1, r6, #52	; 0x34
    769e:	4652      	mov	r2, sl
    76a0:	2301      	movs	r3, #1
    76a2:	f7fb fd7b 	bl	319c <disk_read>
    76a6:	2800      	cmp	r0, #0
    76a8:	f040 80a7 	bne.w	77fa <dir_register+0x2e6>
    if (res != FR_OK) return res;
    n = is = 0;
    do {
        res = move_window(dj->fs, dj->sect);
        if (res != FR_OK) break;
        c = *dj->dir;               /* Check the entry status */
    76ac:	6963      	ldr	r3, [r4, #20]
        }
#endif
        if (sector) {
            if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->winsect = sector;
    76ae:	f8c6 a030 	str.w	sl, [r6, #48]	; 0x30
    if (res != FR_OK) return res;
    n = is = 0;
    do {
        res = move_window(dj->fs, dj->sect);
        if (res != FR_OK) break;
        c = *dj->dir;               /* Check the entry status */
    76b2:	781b      	ldrb	r3, [r3, #0]
        if (c == DDE || c == 0) {   /* Is it a blank entry? */
    76b4:	2be5      	cmp	r3, #229	; 0xe5
    76b6:	d18e      	bne.n	75d6 <dir_register+0xc2>
            if (n == 0) is = dj->index; /* First index of the contiguous entry */
    76b8:	b90f      	cbnz	r7, 76be <dir_register+0x1aa>
    76ba:	88e3      	ldrh	r3, [r4, #6]
    76bc:	9300      	str	r3, [sp, #0]
            if (++n == ne) break;   /* A contiguous entry that required count is found */
    76be:	3701      	adds	r7, #1
    76c0:	b2bf      	uxth	r7, r7
    76c2:	454f      	cmp	r7, r9
    76c4:	d18a      	bne.n	75dc <dir_register+0xc8>
            n = 0;                  /* Not a blank entry. Restart to search */
        }
        res = dir_next(dj, 1);      /* Next entry with table stretch */
    } while (res == FR_OK);

    if (res == FR_OK && ne > 1) {   /* Initialize LFN entry if needed */
    76c6:	2f01      	cmp	r7, #1
    76c8:	f040 80d4 	bne.w	7874 <dir_register+0x360>
        } while (res == FR_OK);
    }
#endif

    if (res == FR_OK) {     /* Initialize the SFN entry */
        res = move_window(dj->fs, dj->sect);
    76cc:	6825      	ldr	r5, [r4, #0]
    76ce:	f8d4 8010 	ldr.w	r8, [r4, #16]
)                   /* Move to zero only writes back dirty window */
{
    DWORD wsect;


    wsect = fs->winsect;
    76d2:	6b2e      	ldr	r6, [r5, #48]	; 0x30
    if (wsect != sector) {  /* Changed current window */
    76d4:	4546      	cmp	r6, r8
    76d6:	d007      	beq.n	76e8 <dir_register+0x1d4>
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
    76d8:	792b      	ldrb	r3, [r5, #4]
    76da:	2b00      	cmp	r3, #0
    76dc:	f040 80a8 	bne.w	7830 <dir_register+0x31c>
                    disk_write(fs->drv, fs->win, wsect, 1);
                }
            }
        }
#endif
        if (sector) {
    76e0:	f1b8 0f00 	cmp.w	r8, #0
    76e4:	f040 81be 	bne.w	7a64 <dir_register+0x550>
#endif

    if (res == FR_OK) {     /* Initialize the SFN entry */
        res = move_window(dj->fs, dj->sect);
        if (res == FR_OK) {
            dir = dj->dir;
    76e8:	6965      	ldr	r5, [r4, #20]
    76ea:	2220      	movs	r2, #32
    76ec:	2100      	movs	r1, #0
    76ee:	4628      	mov	r0, r5
    76f0:	f004 fbab 	bl	be4a <memset>
            mem_set(dir, 0, SZ_DIR);    /* Clean the entry */
            mem_cpy(dir, dj->fn, 11);   /* Put SFN */
    76f4:	69a3      	ldr	r3, [r4, #24]
    76f6:	ea45 0203 	orr.w	r2, r5, r3
    76fa:	0792      	lsls	r2, r2, #30
    76fc:	f040 81bf 	bne.w	7a7e <dir_register+0x56a>
    7700:	1d1a      	adds	r2, r3, #4
    7702:	1d29      	adds	r1, r5, #4
    7704:	428b      	cmp	r3, r1
    7706:	bf38      	it	cc
    7708:	4295      	cmpcc	r5, r2
    770a:	f0c0 81b8 	bcc.w	7a7e <dir_register+0x56a>
        d += sizeof(int); s += sizeof(int);
        cnt -= sizeof(int);
    }
#endif
    while (cnt--)
        *d++ = *s++;
    770e:	681a      	ldr	r2, [r3, #0]
    7710:	602a      	str	r2, [r5, #0]
    7712:	685a      	ldr	r2, [r3, #4]
    7714:	606a      	str	r2, [r5, #4]
    7716:	7a1a      	ldrb	r2, [r3, #8]
    7718:	722a      	strb	r2, [r5, #8]
    771a:	7a5a      	ldrb	r2, [r3, #9]
    771c:	726a      	strb	r2, [r5, #9]
    771e:	7a9b      	ldrb	r3, [r3, #10]
    7720:	72ab      	strb	r3, [r5, #10]
        if (res == FR_OK) {
            dir = dj->dir;
            mem_set(dir, 0, SZ_DIR);    /* Clean the entry */
            mem_cpy(dir, dj->fn, 11);   /* Put SFN */
#if _USE_LFN
            dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT); /* Put NT flag */
    7722:	69a3      	ldr	r3, [r4, #24]
    7724:	7adb      	ldrb	r3, [r3, #11]
    7726:	f003 0318 	and.w	r3, r3, #24
    772a:	732b      	strb	r3, [r5, #12]
#endif
            dj->fs->wflag = 1;
    772c:	6823      	ldr	r3, [r4, #0]
    772e:	2201      	movs	r2, #1
    7730:	711a      	strb	r2, [r3, #4]
    7732:	2000      	movs	r0, #0
    7734:	e70a      	b.n	754c <dir_register+0x38>
        if (res != FR_NO_FILE) return res;  /* Abort if the result is other than 'not collided' */
        fn[NS] = sn[NS]; dj->lfn = lfn;
    }

    if (sn[NS] & NS_LFN) {          /* When LFN is to be created, reserve an SFN + LFN entries. */
        for (ne = 0; lfn[ne]; ne++) ;
    7736:	883b      	ldrh	r3, [r7, #0]
    7738:	2b00      	cmp	r3, #0
    773a:	f43f af32 	beq.w	75a2 <dir_register+0x8e>
    773e:	2300      	movs	r3, #0
    7740:	3301      	adds	r3, #1
    7742:	b29b      	uxth	r3, r3
    7744:	f837 2013 	ldrh.w	r2, [r7, r3, lsl #1]
    7748:	2a00      	cmp	r2, #0
    774a:	d1f9      	bne.n	7740 <dir_register+0x22c>
    774c:	4ac2      	ldr	r2, [pc, #776]	; (7a58 <dir_register+0x544>)
    774e:	3319      	adds	r3, #25
    7750:	fb82 2903 	smull	r2, r9, r2, r3
    7754:	17db      	asrs	r3, r3, #31
    7756:	ebc3 09a9 	rsb	r9, r3, r9, asr #2
    775a:	fa1f f989 	uxth.w	r9, r9
    775e:	e722      	b.n	75a6 <dir_register+0x92>
    WORD i;


    stretch = stretch;      /* To suppress warning on read-only cfg. */
    i = dj->index + 1;
    if (!i || !dj->sect)    /* Report EOT when index has reached 65535 */
    7760:	f8d4 a010 	ldr.w	sl, [r4, #16]
    7764:	f1ba 0f00 	cmp.w	sl, #0
    7768:	f43f af3e 	beq.w	75e8 <dir_register+0xd4>
        return FR_NO_FILE;

    if (!(i % (SS(dj->fs) / SZ_DIR))) { /* Sector changed? */
    776c:	f015 0b0f 	ands.w	fp, r5, #15
    7770:	d045      	beq.n	77fe <dir_register+0x2ea>
    7772:	6826      	ldr	r6, [r4, #0]
                dj->sect = clust2sect(dj->fs, clst);
            }
        }
    }

    dj->index = i;
    7774:	80e5      	strh	r5, [r4, #6]
    dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    7776:	eb06 134b 	add.w	r3, r6, fp, lsl #5
    777a:	3334      	adds	r3, #52	; 0x34
    777c:	6163      	str	r3, [r4, #20]
    777e:	e71d      	b.n	75bc <dir_register+0xa8>
#if !_FS_READONLY
                    BYTE c;
                    if (!stretch) return FR_NO_FILE;            /* When do not stretch, report EOT */
                    clst = create_chain(dj->fs, dj->clust);     /* Stretch cluster chain */
                    if (clst == 0) return FR_DENIED;            /* No free cluster */
                    if (clst == 1) return FR_INT_ERR;
    7780:	2801      	cmp	r0, #1
    7782:	d04e      	beq.n	7822 <dir_register+0x30e>
                    if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    7784:	1c41      	adds	r1, r0, #1
    7786:	9001      	str	r0, [sp, #4]
    7788:	d037      	beq.n	77fa <dir_register+0x2e6>
                    /* Clean-up stretched table */
                    if (move_window(dj->fs, 0)) return FR_DISK_ERR; /* Flush active window */
    778a:	6820      	ldr	r0, [r4, #0]
    778c:	2100      	movs	r1, #0
    778e:	f7fe fac3 	bl	5d18 <move_window>
    7792:	4682      	mov	sl, r0
    7794:	2800      	cmp	r0, #0
    7796:	d130      	bne.n	77fa <dir_register+0x2e6>
    7798:	6820      	ldr	r0, [r4, #0]
    779a:	4651      	mov	r1, sl
    779c:	f44f 7200 	mov.w	r2, #512	; 0x200
    77a0:	3034      	adds	r0, #52	; 0x34
    77a2:	f004 fb52 	bl	be4a <memset>
                    mem_set(dj->fs->win, 0, SS(dj->fs));            /* Clear window buffer */
                    dj->fs->winsect = clust2sect(dj->fs, clst); /* Cluster start sector */
    77a6:	6826      	ldr	r6, [r4, #0]
DWORD clust2sect (  /* !=0: Sector number, 0: Failed - invalid cluster# */
    FATFS *fs,      /* File system object */
    DWORD clst      /* Cluster# to be converted */
)
{
    clst -= 2;
    77a8:	9b01      	ldr	r3, [sp, #4]
    if (clst >= (fs->n_fatent - 2)) return 0;       /* Invalid cluster# */
    77aa:	69f1      	ldr	r1, [r6, #28]
DWORD clust2sect (  /* !=0: Sector number, 0: Failed - invalid cluster# */
    FATFS *fs,      /* File system object */
    DWORD clst      /* Cluster# to be converted */
)
{
    clst -= 2;
    77ac:	1e9a      	subs	r2, r3, #2
    if (clst >= (fs->n_fatent - 2)) return 0;       /* Invalid cluster# */
    77ae:	f1a1 0e02 	sub.w	lr, r1, #2
    77b2:	4572      	cmp	r2, lr
    77b4:	f0c0 819b 	bcc.w	7aee <dir_register+0x5da>
    77b8:	78b1      	ldrb	r1, [r6, #2]
    77ba:	4650      	mov	r0, sl
                    if (clst == 1) return FR_INT_ERR;
                    if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
                    /* Clean-up stretched table */
                    if (move_window(dj->fs, 0)) return FR_DISK_ERR; /* Flush active window */
                    mem_set(dj->fs->win, 0, SS(dj->fs));            /* Clear window buffer */
                    dj->fs->winsect = clust2sect(dj->fs, clst); /* Cluster start sector */
    77bc:	6330      	str	r0, [r6, #48]	; 0x30
                    for (c = 0; c < dj->fs->csize; c++) {       /* Fill the new cluster with 0 */
    77be:	2900      	cmp	r1, #0
    77c0:	f000 81a3 	beq.w	7b0a <dir_register+0x5f6>
    77c4:	f04f 0a00 	mov.w	sl, #0
    77c8:	4698      	mov	r8, r3
    77ca:	e008      	b.n	77de <dir_register+0x2ca>
                        dj->fs->wflag = 1;
                        if (move_window(dj->fs, 0)) return FR_DISK_ERR;
                        dj->fs->winsect++;
    77cc:	6826      	ldr	r6, [r4, #0]
                    if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
                    /* Clean-up stretched table */
                    if (move_window(dj->fs, 0)) return FR_DISK_ERR; /* Flush active window */
                    mem_set(dj->fs->win, 0, SS(dj->fs));            /* Clear window buffer */
                    dj->fs->winsect = clust2sect(dj->fs, clst); /* Cluster start sector */
                    for (c = 0; c < dj->fs->csize; c++) {       /* Fill the new cluster with 0 */
    77ce:	9a01      	ldr	r2, [sp, #4]
                        dj->fs->wflag = 1;
                        if (move_window(dj->fs, 0)) return FR_DISK_ERR;
                        dj->fs->winsect++;
    77d0:	6b31      	ldr	r1, [r6, #48]	; 0x30
                    if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
                    /* Clean-up stretched table */
                    if (move_window(dj->fs, 0)) return FR_DISK_ERR; /* Flush active window */
                    mem_set(dj->fs->win, 0, SS(dj->fs));            /* Clear window buffer */
                    dj->fs->winsect = clust2sect(dj->fs, clst); /* Cluster start sector */
                    for (c = 0; c < dj->fs->csize; c++) {       /* Fill the new cluster with 0 */
    77d2:	78b3      	ldrb	r3, [r6, #2]
                        dj->fs->wflag = 1;
                        if (move_window(dj->fs, 0)) return FR_DISK_ERR;
                        dj->fs->winsect++;
    77d4:	1c48      	adds	r0, r1, #1
                    if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
                    /* Clean-up stretched table */
                    if (move_window(dj->fs, 0)) return FR_DISK_ERR; /* Flush active window */
                    mem_set(dj->fs->win, 0, SS(dj->fs));            /* Clear window buffer */
                    dj->fs->winsect = clust2sect(dj->fs, clst); /* Cluster start sector */
                    for (c = 0; c < dj->fs->csize; c++) {       /* Fill the new cluster with 0 */
    77d6:	4553      	cmp	r3, sl
                        dj->fs->wflag = 1;
                        if (move_window(dj->fs, 0)) return FR_DISK_ERR;
                        dj->fs->winsect++;
    77d8:	6330      	str	r0, [r6, #48]	; 0x30
                    if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
                    /* Clean-up stretched table */
                    if (move_window(dj->fs, 0)) return FR_DISK_ERR; /* Flush active window */
                    mem_set(dj->fs->win, 0, SS(dj->fs));            /* Clear window buffer */
                    dj->fs->winsect = clust2sect(dj->fs, clst); /* Cluster start sector */
                    for (c = 0; c < dj->fs->csize; c++) {       /* Fill the new cluster with 0 */
    77da:	f240 818d 	bls.w	7af8 <dir_register+0x5e4>
                        dj->fs->wflag = 1;
    77de:	f04f 0301 	mov.w	r3, #1
    77e2:	7133      	strb	r3, [r6, #4]
                        if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    77e4:	6820      	ldr	r0, [r4, #0]
    77e6:	9201      	str	r2, [sp, #4]
    77e8:	2100      	movs	r1, #0
    77ea:	f7fe fa95 	bl	5d18 <move_window>
                    if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
                    /* Clean-up stretched table */
                    if (move_window(dj->fs, 0)) return FR_DISK_ERR; /* Flush active window */
                    mem_set(dj->fs->win, 0, SS(dj->fs));            /* Clear window buffer */
                    dj->fs->winsect = clust2sect(dj->fs, clst); /* Cluster start sector */
                    for (c = 0; c < dj->fs->csize; c++) {       /* Fill the new cluster with 0 */
    77ee:	f10a 0a01 	add.w	sl, sl, #1
    77f2:	fa5f fa8a 	uxtb.w	sl, sl
                        dj->fs->wflag = 1;
                        if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    77f6:	2800      	cmp	r0, #0
    77f8:	d0e8      	beq.n	77cc <dir_register+0x2b8>
    77fa:	2001      	movs	r0, #1
    77fc:	e6a6      	b.n	754c <dir_register+0x38>
        return FR_NO_FILE;

    if (!(i % (SS(dj->fs) / SZ_DIR))) { /* Sector changed? */
        dj->sect++;                 /* Next sector */

        if (dj->clust == 0) {   /* Static table */
    77fe:	68e1      	ldr	r1, [r4, #12]
            if (i >= dj->fs->n_rootdir) /* Report EOT when end of table */
    7800:	6826      	ldr	r6, [r4, #0]
    i = dj->index + 1;
    if (!i || !dj->sect)    /* Report EOT when index has reached 65535 */
        return FR_NO_FILE;

    if (!(i % (SS(dj->fs) / SZ_DIR))) { /* Sector changed? */
        dj->sect++;                 /* Next sector */
    7802:	f10a 0a01 	add.w	sl, sl, #1
    7806:	f8c4 a010 	str.w	sl, [r4, #16]

        if (dj->clust == 0) {   /* Static table */
    780a:	b161      	cbz	r1, 7826 <dir_register+0x312>
            if (i >= dj->fs->n_rootdir) /* Report EOT when end of table */
                return FR_NO_FILE;
        }
        else {                  /* Dynamic table */
            if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) { /* Cluster changed? */
    780c:	78b3      	ldrb	r3, [r6, #2]
    780e:	3b01      	subs	r3, #1
    7810:	ea13 1315 	ands.w	r3, r3, r5, lsr #4
    7814:	d1ae      	bne.n	7774 <dir_register+0x260>
{
    UINT wc, bc;
    BYTE *p;


    if (clst < 2 || clst >= fs->n_fatent)   /* Chack range */
    7816:	2901      	cmp	r1, #1
    7818:	d903      	bls.n	7822 <dir_register+0x30e>
    781a:	69f3      	ldr	r3, [r6, #28]
    781c:	4299      	cmp	r1, r3
    781e:	f0c0 813f 	bcc.w	7aa0 <dir_register+0x58c>
                return FR_NO_FILE;
        }
        else {                  /* Dynamic table */
            if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) { /* Cluster changed? */
                clst = get_fat(dj->fs, dj->clust);              /* Get next cluster */
                if (clst <= 1) return FR_INT_ERR;
    7822:	2002      	movs	r0, #2
    7824:	e692      	b.n	754c <dir_register+0x38>

    if (!(i % (SS(dj->fs) / SZ_DIR))) { /* Sector changed? */
        dj->sect++;                 /* Next sector */

        if (dj->clust == 0) {   /* Static table */
            if (i >= dj->fs->n_rootdir) /* Report EOT when end of table */
    7826:	8933      	ldrh	r3, [r6, #8]
    7828:	42ab      	cmp	r3, r5
    782a:	f67f aedd 	bls.w	75e8 <dir_register+0xd4>
    782e:	e7a1      	b.n	7774 <dir_register+0x260>

    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    7830:	f105 0934 	add.w	r9, r5, #52	; 0x34
    7834:	4649      	mov	r1, r9
    7836:	7868      	ldrb	r0, [r5, #1]
    7838:	4632      	mov	r2, r6
    783a:	2301      	movs	r3, #1
    783c:	f7fb fcfc 	bl	3238 <disk_write>
    7840:	2800      	cmp	r0, #0
    7842:	d1da      	bne.n	77fa <dir_register+0x2e6>
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    7844:	6a2b      	ldr	r3, [r5, #32]
    7846:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
    7848:	7128      	strb	r0, [r5, #4]
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    784a:	441a      	add	r2, r3
    784c:	4296      	cmp	r6, r2
    784e:	f4bf af47 	bcs.w	76e0 <dir_register+0x1cc>
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    7852:	78ef      	ldrb	r7, [r5, #3]
    7854:	2f01      	cmp	r7, #1
    7856:	d801      	bhi.n	785c <dir_register+0x348>
    7858:	e742      	b.n	76e0 <dir_register+0x1cc>
    785a:	6a2b      	ldr	r3, [r5, #32]
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    785c:	7868      	ldrb	r0, [r5, #1]
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
                    wsect += fs->fsize;
    785e:	441e      	add	r6, r3
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    7860:	3f01      	subs	r7, #1
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    7862:	4632      	mov	r2, r6
    7864:	4649      	mov	r1, r9
    7866:	2301      	movs	r3, #1
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    7868:	b2ff      	uxtb	r7, r7
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    786a:	f7fb fce5 	bl	3238 <disk_write>
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    786e:	2f01      	cmp	r7, #1
    7870:	d1f3      	bne.n	785a <dir_register+0x346>
    7872:	e735      	b.n	76e0 <dir_register+0x1cc>
        }
        res = dir_next(dj, 1);      /* Next entry with table stretch */
    } while (res == FR_OK);

    if (res == FR_OK && ne > 1) {   /* Initialize LFN entry if needed */
        res = dir_sdi(dj, is);
    7874:	9900      	ldr	r1, [sp, #0]
    7876:	4620      	mov	r0, r4
    7878:	f7fe ff36 	bl	66e8 <dir_sdi>
        if (res == FR_OK) {
    787c:	2800      	cmp	r0, #0
    787e:	f47f ae65 	bne.w	754c <dir_register+0x38>
            sum = sum_sfn(dj->fn);  /* Sum of the SFN tied to the LFN */
    7882:	69a3      	ldr	r3, [r4, #24]
    7884:	4d75      	ldr	r5, [pc, #468]	; (7a5c <dir_register+0x548>)
)
{
    BYTE sum = 0;
    UINT n = 11;

    do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    7886:	f893 b000 	ldrb.w	fp, [r3]
    788a:	f893 9001 	ldrb.w	r9, [r3, #1]
    788e:	f893 c002 	ldrb.w	ip, [r3, #2]
    7892:	f893 8003 	ldrb.w	r8, [r3, #3]
    7896:	7918      	ldrb	r0, [r3, #4]
    7898:	795e      	ldrb	r6, [r3, #5]
    789a:	799a      	ldrb	r2, [r3, #6]
    789c:	79d9      	ldrb	r1, [r3, #7]
    789e:	f893 e008 	ldrb.w	lr, [r3, #8]
    78a2:	ea4f 1acb 	mov.w	sl, fp, lsl #7
    78a6:	ea4a 0a5b 	orr.w	sl, sl, fp, lsr #1
    78aa:	44ca      	add	sl, r9
    78ac:	f3ca 0946 	ubfx	r9, sl, #1, #7
    78b0:	ea49 19ca 	orr.w	r9, r9, sl, lsl #7
    78b4:	fa5c fc89 	uxtab	ip, ip, r9
    78b8:	f3cc 0946 	ubfx	r9, ip, #1, #7
    78bc:	ea49 1ccc 	orr.w	ip, r9, ip, lsl #7
    78c0:	fa58 f88c 	uxtab	r8, r8, ip
    78c4:	f3c8 0c46 	ubfx	ip, r8, #1, #7
    78c8:	ea4c 1cc8 	orr.w	ip, ip, r8, lsl #7
    78cc:	fa50 f08c 	uxtab	r0, r0, ip
    78d0:	f3c0 0c46 	ubfx	ip, r0, #1, #7
    78d4:	ea4c 10c0 	orr.w	r0, ip, r0, lsl #7
    78d8:	fa56 f680 	uxtab	r6, r6, r0
    78dc:	f3c6 0046 	ubfx	r0, r6, #1, #7
    78e0:	ea40 10c6 	orr.w	r0, r0, r6, lsl #7
    78e4:	fa52 f280 	uxtab	r2, r2, r0
    78e8:	f3c2 0046 	ubfx	r0, r2, #1, #7
    78ec:	ea40 12c2 	orr.w	r2, r0, r2, lsl #7
    78f0:	fa51 f182 	uxtab	r1, r1, r2
    78f4:	f3c1 0246 	ubfx	r2, r1, #1, #7
    78f8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    78fc:	fa5e f182 	uxtab	r1, lr, r2
    7900:	7a5e      	ldrb	r6, [r3, #9]
    7902:	7a98      	ldrb	r0, [r3, #10]
    7904:	f3c1 0246 	ubfx	r2, r1, #1, #7
    7908:	ea42 13c1 	orr.w	r3, r2, r1, lsl #7
    790c:	fa56 f383 	uxtab	r3, r6, r3
    7910:	f3c3 0246 	ubfx	r2, r3, #1, #7
    7914:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
    7918:	fa50 f383 	uxtab	r3, r0, r3

    if (res == FR_OK && ne > 1) {   /* Initialize LFN entry if needed */
        res = dir_sdi(dj, is);
        if (res == FR_OK) {
            sum = sum_sfn(dj->fn);  /* Sum of the SFN tied to the LFN */
            ne--;
    791c:	1e7e      	subs	r6, r7, #1
)
{
    BYTE sum = 0;
    UINT n = 11;

    do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    791e:	b2db      	uxtb	r3, r3

    if (res == FR_OK && ne > 1) {   /* Initialize LFN entry if needed */
        res = dir_sdi(dj, is);
        if (res == FR_OK) {
            sum = sum_sfn(dj->fn);  /* Sum of the SFN tied to the LFN */
            ne--;
    7920:	b2b6      	uxth	r6, r6
)
{
    BYTE sum = 0;
    UINT n = 11;

    do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    7922:	9300      	str	r3, [sp, #0]
        res = dir_sdi(dj, is);
        if (res == FR_OK) {
            sum = sum_sfn(dj->fn);  /* Sum of the SFN tied to the LFN */
            ne--;
            do {                    /* Store LFN entries in bottom first */
                res = move_window(dj->fs, dj->sect);
    7924:	6827      	ldr	r7, [r4, #0]
    7926:	f8d4 8010 	ldr.w	r8, [r4, #16]
)                   /* Move to zero only writes back dirty window */
{
    DWORD wsect;


    wsect = fs->winsect;
    792a:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
    if (wsect != sector) {  /* Changed current window */
    792e:	45c1      	cmp	r9, r8
    7930:	d005      	beq.n	793e <dir_register+0x42a>
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
    7932:	793b      	ldrb	r3, [r7, #4]
    7934:	2b00      	cmp	r3, #0
    7936:	d15a      	bne.n	79ee <dir_register+0x4da>
                    disk_write(fs->drv, fs->win, wsect, 1);
                }
            }
        }
#endif
        if (sector) {
    7938:	f1b8 0f00 	cmp.w	r8, #0
    793c:	d17e      	bne.n	7a3c <dir_register+0x528>
            sum = sum_sfn(dj->fn);  /* Sum of the SFN tied to the LFN */
            ne--;
            do {                    /* Store LFN entries in bottom first */
                res = move_window(dj->fs, dj->sect);
                if (res != FR_OK) break;
                fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    793e:	fa5f fb86 	uxtb.w	fp, r6
    7942:	f8d4 e014 	ldr.w	lr, [r4, #20]
{
    UINT i, s;
    WCHAR wc;


    dir[LDIR_Chksum] = sum;         /* Set check sum */
    7946:	f89d 1000 	ldrb.w	r1, [sp]
            sum = sum_sfn(dj->fn);  /* Sum of the SFN tied to the LFN */
            ne--;
            do {                    /* Store LFN entries in bottom first */
                res = move_window(dj->fs, dj->sect);
                if (res != FR_OK) break;
                fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    794a:	f8d4 901c 	ldr.w	r9, [r4, #28]
{
    UINT i, s;
    WCHAR wc;


    dir[LDIR_Chksum] = sum;         /* Set check sum */
    794e:	f88e 100d 	strb.w	r1, [lr, #13]
    dir[LDIR_Attr] = AM_LFN;        /* Set attribute. LFN entry */
    dir[LDIR_Type] = 0;
    ST_WORD(dir+LDIR_FstClusLO, 0);

    i = (ord - 1) * 13;             /* Get offset in the LFN buffer */
    7952:	f10b 33ff 	add.w	r3, fp, #4294967295
    7956:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    WCHAR wc;


    dir[LDIR_Chksum] = sum;         /* Set check sum */
    dir[LDIR_Attr] = AM_LFN;        /* Set attribute. LFN entry */
    dir[LDIR_Type] = 0;
    795a:	2100      	movs	r1, #0
    ST_WORD(dir+LDIR_FstClusLO, 0);

    i = (ord - 1) * 13;             /* Get offset in the LFN buffer */
    795c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    UINT i, s;
    WCHAR wc;


    dir[LDIR_Chksum] = sum;         /* Set check sum */
    dir[LDIR_Attr] = AM_LFN;        /* Set attribute. LFN entry */
    7960:	220f      	movs	r2, #15
    7962:	483f      	ldr	r0, [pc, #252]	; (7a60 <dir_register+0x54c>)
    7964:	f88e 200b 	strb.w	r2, [lr, #11]
    dir[LDIR_Type] = 0;
    ST_WORD(dir+LDIR_FstClusLO, 0);

    i = (ord - 1) * 13;             /* Get offset in the LFN buffer */
    7968:	b29b      	uxth	r3, r3
    WCHAR wc;


    dir[LDIR_Chksum] = sum;         /* Set check sum */
    dir[LDIR_Attr] = AM_LFN;        /* Set attribute. LFN entry */
    dir[LDIR_Type] = 0;
    796a:	f88e 100c 	strb.w	r1, [lr, #12]
    ST_WORD(dir+LDIR_FstClusLO, 0);
    796e:	f88e 101a 	strb.w	r1, [lr, #26]
    7972:	f88e 101b 	strb.w	r1, [lr, #27]

    i = (ord - 1) * 13;             /* Get offset in the LFN buffer */
    s = wc = 0;
    do {
        if (wc != 0xFFFF) wc = lfnbuf[i++]; /* Get an effective char */
    7976:	f64f 7cff 	movw	ip, #65535	; 0xffff
        ST_WORD(dir+LfnOfs[s], wc); /* Put it */
    797a:	f04f 0aff 	mov.w	sl, #255	; 0xff
    797e:	e00e      	b.n	799e <dir_register+0x48a>
    ST_WORD(dir+LDIR_FstClusLO, 0);

    i = (ord - 1) * 13;             /* Get offset in the LFN buffer */
    s = wc = 0;
    do {
        if (wc != 0xFFFF) wc = lfnbuf[i++]; /* Get an effective char */
    7980:	f839 1013 	ldrh.w	r1, [r9, r3, lsl #1]
        ST_WORD(dir+LfnOfs[s], wc); /* Put it */
    7984:	f80e 1002 	strb.w	r1, [lr, r2]
    7988:	4472      	add	r2, lr
    798a:	0a0b      	lsrs	r3, r1, #8
    ST_WORD(dir+LDIR_FstClusLO, 0);

    i = (ord - 1) * 13;             /* Get offset in the LFN buffer */
    s = wc = 0;
    do {
        if (wc != 0xFFFF) wc = lfnbuf[i++]; /* Get an effective char */
    798c:	b2bf      	uxth	r7, r7
        ST_WORD(dir+LfnOfs[s], wc); /* Put it */
    798e:	7053      	strb	r3, [r2, #1]
    ST_WORD(dir+LDIR_FstClusLO, 0);

    i = (ord - 1) * 13;             /* Get offset in the LFN buffer */
    s = wc = 0;
    do {
        if (wc != 0xFFFF) wc = lfnbuf[i++]; /* Get an effective char */
    7990:	463b      	mov	r3, r7
        ST_WORD(dir+LfnOfs[s], wc); /* Put it */
        if (!wc) wc = 0xFFFF;       /* Padding chars following last char */
    7992:	b909      	cbnz	r1, 7998 <dir_register+0x484>
    7994:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7998:	3001      	adds	r0, #1
    } while (++s < 13);
    799a:	42a8      	cmp	r0, r5
    799c:	d00d      	beq.n	79ba <dir_register+0x4a6>
    ST_WORD(dir+LDIR_FstClusLO, 0);

    i = (ord - 1) * 13;             /* Get offset in the LFN buffer */
    s = wc = 0;
    do {
        if (wc != 0xFFFF) wc = lfnbuf[i++]; /* Get an effective char */
    799e:	4561      	cmp	r1, ip
        ST_WORD(dir+LfnOfs[s], wc); /* Put it */
    79a0:	7802      	ldrb	r2, [r0, #0]
    ST_WORD(dir+LDIR_FstClusLO, 0);

    i = (ord - 1) * 13;             /* Get offset in the LFN buffer */
    s = wc = 0;
    do {
        if (wc != 0xFFFF) wc = lfnbuf[i++]; /* Get an effective char */
    79a2:	f103 0701 	add.w	r7, r3, #1
    79a6:	d1eb      	bne.n	7980 <dir_register+0x46c>
        ST_WORD(dir+LfnOfs[s], wc); /* Put it */
    79a8:	eb0e 0702 	add.w	r7, lr, r2
    79ac:	3001      	adds	r0, #1
        if (!wc) wc = 0xFFFF;       /* Padding chars following last char */
    } while (++s < 13);
    79ae:	42a8      	cmp	r0, r5

    i = (ord - 1) * 13;             /* Get offset in the LFN buffer */
    s = wc = 0;
    do {
        if (wc != 0xFFFF) wc = lfnbuf[i++]; /* Get an effective char */
        ST_WORD(dir+LfnOfs[s], wc); /* Put it */
    79b0:	f80e a002 	strb.w	sl, [lr, r2]
    79b4:	f887 a001 	strb.w	sl, [r7, #1]
        if (!wc) wc = 0xFFFF;       /* Padding chars following last char */
    } while (++s < 13);
    79b8:	d1f1      	bne.n	799e <dir_register+0x48a>
    if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE; /* Bottom LFN part is the start of LFN sequence */
    79ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
    79be:	4291      	cmp	r1, r2
    79c0:	d002      	beq.n	79c8 <dir_register+0x4b4>
    79c2:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
    79c6:	b90b      	cbnz	r3, 79cc <dir_register+0x4b8>
    79c8:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
    dir[LDIR_Ord] = ord;            /* Set the LFN order */
    79cc:	f88e b000 	strb.w	fp, [lr]
            ne--;
            do {                    /* Store LFN entries in bottom first */
                res = move_window(dj->fs, dj->sect);
                if (res != FR_OK) break;
                fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
                dj->fs->wflag = 1;
    79d0:	6823      	ldr	r3, [r4, #0]
    79d2:	f04f 0201 	mov.w	r2, #1
                res = dir_next(dj, 0);  /* Next entry */
    79d6:	4620      	mov	r0, r4
            ne--;
            do {                    /* Store LFN entries in bottom first */
                res = move_window(dj->fs, dj->sect);
                if (res != FR_OK) break;
                fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
                dj->fs->wflag = 1;
    79d8:	711a      	strb	r2, [r3, #4]
                res = dir_next(dj, 0);  /* Next entry */
    79da:	f7ff f895 	bl	6b08 <dir_next.constprop.11>
            } while (res == FR_OK && --ne);
    79de:	2800      	cmp	r0, #0
    79e0:	f47f adb4 	bne.w	754c <dir_register+0x38>
    79e4:	3e01      	subs	r6, #1
    79e6:	b2b6      	uxth	r6, r6
    79e8:	2e00      	cmp	r6, #0
    79ea:	d19b      	bne.n	7924 <dir_register+0x410>
    79ec:	e66e      	b.n	76cc <dir_register+0x1b8>

    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    79ee:	f107 0b34 	add.w	fp, r7, #52	; 0x34
    79f2:	4659      	mov	r1, fp
    79f4:	7878      	ldrb	r0, [r7, #1]
    79f6:	464a      	mov	r2, r9
    79f8:	2301      	movs	r3, #1
    79fa:	f7fb fc1d 	bl	3238 <disk_write>
    79fe:	2800      	cmp	r0, #0
    7a00:	f47f aefb 	bne.w	77fa <dir_register+0x2e6>
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    7a04:	6a3b      	ldr	r3, [r7, #32]
    7a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
    7a08:	7138      	strb	r0, [r7, #4]
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    7a0a:	441a      	add	r2, r3
    7a0c:	4591      	cmp	r9, r2
    7a0e:	d293      	bcs.n	7938 <dir_register+0x424>
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    7a10:	f897 a003 	ldrb.w	sl, [r7, #3]
    7a14:	f1ba 0f01 	cmp.w	sl, #1
    7a18:	d801      	bhi.n	7a1e <dir_register+0x50a>
    7a1a:	e78d      	b.n	7938 <dir_register+0x424>
    7a1c:	6a3b      	ldr	r3, [r7, #32]
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    7a1e:	7878      	ldrb	r0, [r7, #1]
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
                    wsect += fs->fsize;
    7a20:	4499      	add	r9, r3
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    7a22:	f10a 3aff 	add.w	sl, sl, #4294967295
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    7a26:	464a      	mov	r2, r9
    7a28:	4659      	mov	r1, fp
    7a2a:	2301      	movs	r3, #1
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    7a2c:	fa5f fa8a 	uxtb.w	sl, sl
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    7a30:	f7fb fc02 	bl	3238 <disk_write>
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    7a34:	f1ba 0f01 	cmp.w	sl, #1
    7a38:	d1f0      	bne.n	7a1c <dir_register+0x508>
    7a3a:	e77d      	b.n	7938 <dir_register+0x424>
                }
            }
        }
#endif
        if (sector) {
            if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    7a3c:	7878      	ldrb	r0, [r7, #1]
    7a3e:	f107 0134 	add.w	r1, r7, #52	; 0x34
    7a42:	4642      	mov	r2, r8
    7a44:	2301      	movs	r3, #1
    7a46:	f7fb fba9 	bl	319c <disk_read>
    7a4a:	2800      	cmp	r0, #0
    7a4c:	f47f aed5 	bne.w	77fa <dir_register+0x2e6>
                return FR_DISK_ERR;
            fs->winsect = sector;
    7a50:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
    7a54:	e773      	b.n	793e <dir_register+0x42a>
    7a56:	bf00      	nop
    7a58:	4ec4ec4f 	.word	0x4ec4ec4f
    7a5c:	0000d0e5 	.word	0x0000d0e5
    7a60:	0000d0d8 	.word	0x0000d0d8
                }
            }
        }
#endif
        if (sector) {
            if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    7a64:	7868      	ldrb	r0, [r5, #1]
    7a66:	f105 0134 	add.w	r1, r5, #52	; 0x34
    7a6a:	4642      	mov	r2, r8
    7a6c:	2301      	movs	r3, #1
    7a6e:	f7fb fb95 	bl	319c <disk_read>
    7a72:	2800      	cmp	r0, #0
    7a74:	f47f aec1 	bne.w	77fa <dir_register+0x2e6>
                return FR_DISK_ERR;
            fs->winsect = sector;
    7a78:	f8c5 8030 	str.w	r8, [r5, #48]	; 0x30
    7a7c:	e634      	b.n	76e8 <dir_register+0x1d4>
        d += sizeof(int); s += sizeof(int);
        cnt -= sizeof(int);
    }
#endif
    while (cnt--)
        *d++ = *s++;
    7a7e:	781a      	ldrb	r2, [r3, #0]
    7a80:	702a      	strb	r2, [r5, #0]
    7a82:	785a      	ldrb	r2, [r3, #1]
    7a84:	706a      	strb	r2, [r5, #1]
    7a86:	789a      	ldrb	r2, [r3, #2]
    7a88:	70aa      	strb	r2, [r5, #2]
    7a8a:	78da      	ldrb	r2, [r3, #3]
    7a8c:	70ea      	strb	r2, [r5, #3]
    7a8e:	791a      	ldrb	r2, [r3, #4]
    7a90:	712a      	strb	r2, [r5, #4]
    7a92:	795a      	ldrb	r2, [r3, #5]
    7a94:	716a      	strb	r2, [r5, #5]
    7a96:	799a      	ldrb	r2, [r3, #6]
    7a98:	71aa      	strb	r2, [r5, #6]
    7a9a:	79da      	ldrb	r2, [r3, #7]
    7a9c:	71ea      	strb	r2, [r5, #7]
    7a9e:	e63a      	b.n	7716 <dir_register+0x202>
    7aa0:	4630      	mov	r0, r6
    7aa2:	f7fe fcd9 	bl	6458 <get_fat.part.3>
                return FR_NO_FILE;
        }
        else {                  /* Dynamic table */
            if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) { /* Cluster changed? */
                clst = get_fat(dj->fs, dj->clust);              /* Get next cluster */
                if (clst <= 1) return FR_INT_ERR;
    7aa6:	2801      	cmp	r0, #1
    7aa8:	4603      	mov	r3, r0
    7aaa:	f67f aeba 	bls.w	7822 <dir_register+0x30e>
                if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    7aae:	3001      	adds	r0, #1
    7ab0:	f43f aea3 	beq.w	77fa <dir_register+0x2e6>
                if (clst >= dj->fs->n_fatent) {                 /* When it reached end of dynamic table */
    7ab4:	6826      	ldr	r6, [r4, #0]
    7ab6:	69f2      	ldr	r2, [r6, #28]
    7ab8:	4293      	cmp	r3, r2
    7aba:	d20f      	bcs.n	7adc <dir_register+0x5c8>
    7abc:	f1a2 0e02 	sub.w	lr, r2, #2
    7ac0:	1e9a      	subs	r2, r3, #2
    FATFS *fs,      /* File system object */
    DWORD clst      /* Cluster# to be converted */
)
{
    clst -= 2;
    if (clst >= (fs->n_fatent - 2)) return 0;       /* Invalid cluster# */
    7ac2:	4572      	cmp	r2, lr
                    dj->fs->winsect -= c;                       /* Rewind window address */
#else
                    return FR_NO_FILE;          /* Report EOT */
#endif
                }
                dj->clust = clst;               /* Initialize data for new cluster */
    7ac4:	60e3      	str	r3, [r4, #12]
    DWORD clst      /* Cluster# to be converted */
)
{
    clst -= 2;
    if (clst >= (fs->n_fatent - 2)) return 0;       /* Invalid cluster# */
    return clst * fs->csize + fs->database;
    7ac6:	bf3b      	ittet	cc
    7ac8:	f896 a002 	ldrbcc.w	sl, [r6, #2]
    7acc:	6af3      	ldrcc	r3, [r6, #44]	; 0x2c
    FATFS *fs,      /* File system object */
    DWORD clst      /* Cluster# to be converted */
)
{
    clst -= 2;
    if (clst >= (fs->n_fatent - 2)) return 0;       /* Invalid cluster# */
    7ace:	f04f 0a00 	movcs.w	sl, #0
    return clst * fs->csize + fs->database;
    7ad2:	fb0a 3a02 	mlacc	sl, sl, r2, r3
#else
                    return FR_NO_FILE;          /* Report EOT */
#endif
                }
                dj->clust = clst;               /* Initialize data for new cluster */
                dj->sect = clust2sect(dj->fs, clst);
    7ad6:	f8c4 a010 	str.w	sl, [r4, #16]
    7ada:	e64b      	b.n	7774 <dir_register+0x260>
                if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
                if (clst >= dj->fs->n_fatent) {                 /* When it reached end of dynamic table */
#if !_FS_READONLY
                    BYTE c;
                    if (!stretch) return FR_NO_FILE;            /* When do not stretch, report EOT */
                    clst = create_chain(dj->fs, dj->clust);     /* Stretch cluster chain */
    7adc:	4630      	mov	r0, r6
    7ade:	68e1      	ldr	r1, [r4, #12]
    7ae0:	f7fe fe56 	bl	6790 <create_chain>
                    if (clst == 0) return FR_DENIED;            /* No free cluster */
    7ae4:	2800      	cmp	r0, #0
    7ae6:	f47f ae4b 	bne.w	7780 <dir_register+0x26c>
    7aea:	2007      	movs	r0, #7
    7aec:	e52e      	b.n	754c <dir_register+0x38>
    DWORD clst      /* Cluster# to be converted */
)
{
    clst -= 2;
    if (clst >= (fs->n_fatent - 2)) return 0;       /* Invalid cluster# */
    return clst * fs->csize + fs->database;
    7aee:	78b1      	ldrb	r1, [r6, #2]
    7af0:	6af0      	ldr	r0, [r6, #44]	; 0x2c
    7af2:	fb01 0002 	mla	r0, r1, r2, r0
    7af6:	e661      	b.n	77bc <dir_register+0x2a8>
    7af8:	69f1      	ldr	r1, [r6, #28]
    7afa:	4643      	mov	r3, r8
    7afc:	46d4      	mov	ip, sl
    7afe:	f1a1 0e02 	sub.w	lr, r1, #2
                    for (c = 0; c < dj->fs->csize; c++) {       /* Fill the new cluster with 0 */
                        dj->fs->wflag = 1;
                        if (move_window(dj->fs, 0)) return FR_DISK_ERR;
                        dj->fs->winsect++;
                    }
                    dj->fs->winsect -= c;                       /* Rewind window address */
    7b02:	ebcc 0100 	rsb	r1, ip, r0
    7b06:	6331      	str	r1, [r6, #48]	; 0x30
    7b08:	e7db      	b.n	7ac2 <dir_register+0x5ae>
                    if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
                    /* Clean-up stretched table */
                    if (move_window(dj->fs, 0)) return FR_DISK_ERR; /* Flush active window */
                    mem_set(dj->fs->win, 0, SS(dj->fs));            /* Clear window buffer */
                    dj->fs->winsect = clust2sect(dj->fs, clst); /* Cluster start sector */
                    for (c = 0; c < dj->fs->csize; c++) {       /* Fill the new cluster with 0 */
    7b0a:	468c      	mov	ip, r1
    7b0c:	e7f9      	b.n	7b02 <dir_register+0x5ee>
    7b0e:	bf00      	nop

00007b10 <f_mount>:
)
{
    FATFS *rfs;


    if (vol >= _VOLUMES)        /* Check if the drive number is valid */
    7b10:	b108      	cbz	r0, 7b16 <f_mount+0x6>
        return FR_INVALID_DRIVE;
    7b12:	200b      	movs	r0, #11
    7b14:	4770      	bx	lr

FRESULT f_mount (
    BYTE vol,       /* Logical drive number to be mounted/unmounted */
    FATFS *fs       /* Pointer to new file system object (NULL for unmount)*/
)
{
    7b16:	b538      	push	{r3, r4, r5, lr}
    FATFS *rfs;


    if (vol >= _VOLUMES)        /* Check if the drive number is valid */
        return FR_INVALID_DRIVE;
    rfs = FatFs[vol];           /* Get current fs object */
    7b18:	4d08      	ldr	r5, [pc, #32]	; (7b3c <f_mount+0x2c>)
    7b1a:	682b      	ldr	r3, [r5, #0]
    7b1c:	460c      	mov	r4, r1

    if (rfs) {
    7b1e:	b103      	cbz	r3, 7b22 <f_mount+0x12>
        clear_lock(rfs);
#endif
#if _FS_REENTRANT               /* Discard sync object of the current volume */
        if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
        rfs->fs_type = 0;       /* Clear old fs object */
    7b20:	7018      	strb	r0, [r3, #0]
    }

    if (fs) {
    7b22:	b124      	cbz	r4, 7b2e <f_mount+0x1e>
        fs->fs_type = 0;        /* Clear new fs object */
    7b24:	2300      	movs	r3, #0
    7b26:	7023      	strb	r3, [r4, #0]
    }
    else /* Unmount, Added by Silicon Labs, Inc. */
    {
      disk_ioctl(0, CTRL_INVALIDATE, (void*)0);
    }
    FatFs[vol] = fs;            /* Register new fs object */
    7b28:	602c      	str	r4, [r5, #0]

    return FR_OK;
    7b2a:	2000      	movs	r0, #0
    7b2c:	bd38      	pop	{r3, r4, r5, pc}
        if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
    }
    else /* Unmount, Added by Silicon Labs, Inc. */
    {
      disk_ioctl(0, CTRL_INVALIDATE, (void*)0);
    7b2e:	4620      	mov	r0, r4
    7b30:	2108      	movs	r1, #8
    7b32:	4622      	mov	r2, r4
    7b34:	f7fb fbe2 	bl	32fc <disk_ioctl>
    7b38:	e7f6      	b.n	7b28 <f_mount+0x18>
    7b3a:	bf00      	nop
    7b3c:	200012d0 	.word	0x200012d0

00007b40 <f_open>:
FRESULT f_open (
    FIL *fp,            /* Pointer to the blank file object */
    const TCHAR *path,  /* Pointer to the file name */
    BYTE mode           /* Access mode and file open mode flags */
)
{
    7b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    DIR dj;
    BYTE *dir;
    DEF_NAMEBUF;


    fp->fs = 0;         /* Clear file object */
    7b44:	2300      	movs	r3, #0
    7b46:	6003      	str	r3, [r0, #0]
    WORD nrsv;
    const TCHAR *p = *path;
    FATFS *fs;

    /* Get logical drive number from the path name */
    vol = p[0] - '0';                   /* Is there a drive number? */
    7b48:	780b      	ldrb	r3, [r1, #0]
    7b4a:	3b30      	subs	r3, #48	; 0x30
    7b4c:	b29b      	uxth	r3, r3
    if (vol <= 9 && p[1] == ':') {      /* Found a drive number, get and strip it */
    7b4e:	2b09      	cmp	r3, #9
FRESULT f_open (
    FIL *fp,            /* Pointer to the blank file object */
    const TCHAR *path,  /* Pointer to the file name */
    BYTE mode           /* Access mode and file open mode flags */
)
{
    7b50:	b08f      	sub	sp, #60	; 0x3c
    7b52:	4605      	mov	r5, r0
    7b54:	460c      	mov	r4, r1
    7b56:	4616      	mov	r6, r2


    fp->fs = 0;         /* Clear file object */

#if !_FS_READONLY
    mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    7b58:	f002 071f 	and.w	r7, r2, #31
    const TCHAR *p = *path;
    FATFS *fs;

    /* Get logical drive number from the path name */
    vol = p[0] - '0';                   /* Is there a drive number? */
    if (vol <= 9 && p[1] == ':') {      /* Found a drive number, get and strip it */
    7b5c:	d802      	bhi.n	7b64 <f_open+0x24>
    7b5e:	784a      	ldrb	r2, [r1, #1]
    7b60:	2a3a      	cmp	r2, #58	; 0x3a
    7b62:	d035      	beq.n	7bd0 <f_open+0x90>
        p += 2; *path = p;              /* Return pointer to the path name */
    } else {                            /* No drive number is given */
#if _FS_RPATH
        vol = CurrVol;                  /* Use current drive */
    7b64:	4b74      	ldr	r3, [pc, #464]	; (7d38 <f_open+0x1f8>)
    7b66:	781b      	ldrb	r3, [r3, #0]
        vol = 0;                        /* Use drive 0 */
#endif
    }

    /* Check if the file system object is valid or not */
    if (vol >= _VOLUMES)                /* Is the drive number valid? */
    7b68:	b11b      	cbz	r3, 7b72 <f_open+0x32>
        return FR_INVALID_DRIVE;
    7b6a:	200b      	movs	r0, #11
#endif
        fp->fs = dj.fs; fp->id = dj.fs->id; /* Validate file object */
    }

    LEAVE_FF(dj.fs, res);
}
    7b6c:	b00f      	add	sp, #60	; 0x3c
    7b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }

    /* Check if the file system object is valid or not */
    if (vol >= _VOLUMES)                /* Is the drive number valid? */
        return FR_INVALID_DRIVE;
    *rfs = fs = FatFs[vol];             /* Return pointer to the corresponding file system object */
    7b72:	4b72      	ldr	r3, [pc, #456]	; (7d3c <f_open+0x1fc>)
    7b74:	f8d3 8000 	ldr.w	r8, [r3]
    7b78:	f8cd 8014 	str.w	r8, [sp, #20]
    if (!fs) return FR_NOT_ENABLED;     /* Is the file system object available? */
    7b7c:	f1b8 0f00 	cmp.w	r8, #0
    7b80:	d035      	beq.n	7bee <f_open+0xae>

    ENTER_FF(fs);                       /* Lock file system */

    if (fs->fs_type) {                  /* If the logical drive has been mounted */
    7b82:	f898 3000 	ldrb.w	r3, [r8]

    fp->fs = 0;         /* Clear file object */

#if !_FS_READONLY
    mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    7b86:	f006 091e 	and.w	r9, r6, #30
    *rfs = fs = FatFs[vol];             /* Return pointer to the corresponding file system object */
    if (!fs) return FR_NOT_ENABLED;     /* Is the file system object available? */

    ENTER_FF(fs);                       /* Lock file system */

    if (fs->fs_type) {                  /* If the logical drive has been mounted */
    7b8a:	b31b      	cbz	r3, 7bd4 <f_open+0x94>
        stat = disk_status(fs->drv);
    7b8c:	f898 0001 	ldrb.w	r0, [r8, #1]
    7b90:	f7fb fafc 	bl	318c <disk_status>
        if (!(stat & STA_NOINIT)) {     /* and the physical drive is kept initialized (has not been changed), */
    7b94:	07c3      	lsls	r3, r0, #31
    7b96:	d41d      	bmi.n	7bd4 <f_open+0x94>
            if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))    /* Check write protection if needed */
    7b98:	f1b9 0f00 	cmp.w	r9, #0
    7b9c:	d001      	beq.n	7ba2 <f_open+0x62>
    7b9e:	0740      	lsls	r0, r0, #29
    7ba0:	d42c      	bmi.n	7bfc <f_open+0xbc>
    mode &= FA_READ;
    res = chk_mounted(&path, &dj.fs, 0);
#endif
    INIT_BUF(dj);
    if (res == FR_OK)
        res = follow_path(&dj, path);   /* Follow the file path */
    7ba2:	4621      	mov	r1, r4
    res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
#else
    mode &= FA_READ;
    res = chk_mounted(&path, &dj.fs, 0);
#endif
    INIT_BUF(dj);
    7ba4:	4b66      	ldr	r3, [pc, #408]	; (7d40 <f_open+0x200>)
    7ba6:	930c      	str	r3, [sp, #48]	; 0x30
    7ba8:	aa02      	add	r2, sp, #8
    if (res == FR_OK)
        res = follow_path(&dj, path);   /* Follow the file path */
    7baa:	a805      	add	r0, sp, #20
    res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
#else
    mode &= FA_READ;
    res = chk_mounted(&path, &dj.fs, 0);
#endif
    INIT_BUF(dj);
    7bac:	920b      	str	r2, [sp, #44]	; 0x2c
    if (res == FR_OK)
        res = follow_path(&dj, path);   /* Follow the file path */
    7bae:	f7ff f98d 	bl	6ecc <follow_path>
    dir = dj.dir;
    7bb2:	9c0a      	ldr	r4, [sp, #40]	; 0x28

#if !_FS_READONLY   /* R/W configuration */
    if (res == FR_OK) {
    7bb4:	bb88      	cbnz	r0, 7c1a <f_open+0xda>
        if (!dir)   /* Current dir itself */
    7bb6:	2c00      	cmp	r4, #0
    7bb8:	d078      	beq.n	7cac <f_open+0x16c>
        else
            res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
    }
    /* Create or Open a file */
    if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    7bba:	f016 0f1c 	tst.w	r6, #28
    7bbe:	d05f      	beq.n	7c80 <f_open+0x140>
#endif
            mode |= FA_CREATE_ALWAYS;       /* File is created */
            dir = dj.dir;                   /* New entry */
        }
        else {                              /* Any object is already existing */
            if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {    /* Cannot overwrite it (R/O or DIR) */
    7bc0:	7ae3      	ldrb	r3, [r4, #11]
    7bc2:	f013 0f11 	tst.w	r3, #17
    7bc6:	d162      	bne.n	7c8e <f_open+0x14e>
                res = FR_DENIED;
            } else {
                if (mode & FA_CREATE_NEW)   /* Cannot create as new file */
    7bc8:	0773      	lsls	r3, r6, #29
    7bca:	d533      	bpl.n	7c34 <f_open+0xf4>
                    res = FR_EXIST;
    7bcc:	2008      	movs	r0, #8
    7bce:	e7cd      	b.n	7b6c <f_open+0x2c>
    FATFS *fs;

    /* Get logical drive number from the path name */
    vol = p[0] - '0';                   /* Is there a drive number? */
    if (vol <= 9 && p[1] == ':') {      /* Found a drive number, get and strip it */
        p += 2; *path = p;              /* Return pointer to the path name */
    7bd0:	3402      	adds	r4, #2
    7bd2:	e7c9      	b.n	7b68 <f_open+0x28>
    }

    /* The file system object is not valid. */
    /* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

    fs->fs_type = 0;                    /* Clear the file system object */
    7bd4:	2000      	movs	r0, #0
    7bd6:	f888 0000 	strb.w	r0, [r8]
    fs->drv = LD2PD(vol);               /* Bind the logical drive and a physical drive */
    7bda:	f888 0001 	strb.w	r0, [r8, #1]
    stat = disk_initialize(fs->drv);    /* Initialize low level disk I/O layer */
    7bde:	f7fb fa3b 	bl	3058 <disk_initialize>
    if (stat & STA_NOINIT)              /* Check if the initialization succeeded */
    7be2:	07c1      	lsls	r1, r0, #31
    7be4:	d505      	bpl.n	7bf2 <f_open+0xb2>
        return FR_NOT_READY;            /* Failed to initialize due to no media or hard error */
    7be6:	2003      	movs	r0, #3
#endif
        fp->fs = dj.fs; fp->id = dj.fs->id; /* Validate file object */
    }

    LEAVE_FF(dj.fs, res);
}
    7be8:	b00f      	add	sp, #60	; 0x3c
    7bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

    /* Check if the file system object is valid or not */
    if (vol >= _VOLUMES)                /* Is the drive number valid? */
        return FR_INVALID_DRIVE;
    *rfs = fs = FatFs[vol];             /* Return pointer to the corresponding file system object */
    if (!fs) return FR_NOT_ENABLED;     /* Is the file system object available? */
    7bee:	200c      	movs	r0, #12
    7bf0:	e7bc      	b.n	7b6c <f_open+0x2c>
    fs->fs_type = 0;                    /* Clear the file system object */
    fs->drv = LD2PD(vol);               /* Bind the logical drive and a physical drive */
    stat = disk_initialize(fs->drv);    /* Initialize low level disk I/O layer */
    if (stat & STA_NOINIT)              /* Check if the initialization succeeded */
        return FR_NOT_READY;            /* Failed to initialize due to no media or hard error */
    if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))    /* Check disk write protection if needed */
    7bf2:	f1b9 0f00 	cmp.w	r9, #0
    7bf6:	d003      	beq.n	7c00 <f_open+0xc0>
    7bf8:	0742      	lsls	r2, r0, #29
    7bfa:	d501      	bpl.n	7c00 <f_open+0xc0>

    if (fs->fs_type) {                  /* If the logical drive has been mounted */
        stat = disk_status(fs->drv);
        if (!(stat & STA_NOINIT)) {     /* and the physical drive is kept initialized (has not been changed), */
            if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))    /* Check write protection if needed */
                return FR_WRITE_PROTECTED;
    7bfc:	200a      	movs	r0, #10
    7bfe:	e7b5      	b.n	7b6c <f_open+0x2c>
BYTE check_fs ( /* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
    FATFS *fs,  /* File system object */
    DWORD sect  /* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK) /* Load boot record */
    7c00:	f108 0934 	add.w	r9, r8, #52	; 0x34
    7c04:	4649      	mov	r1, r9
    7c06:	f898 0001 	ldrb.w	r0, [r8, #1]
    7c0a:	2200      	movs	r2, #0
    7c0c:	2301      	movs	r3, #1
    7c0e:	f7fb fac5 	bl	319c <disk_read>
    7c12:	2800      	cmp	r0, #0
    7c14:	d07e      	beq.n	7d14 <f_open+0x1d4>
        if (tbl[4]) {                       /* Is the partition existing? */
            bsect = LD_DWORD(&tbl[8]);      /* Partition offset in LBA */
            fmt = check_fs(fs, bsect);      /* Check the partition */
        }
    }
    if (fmt == 3) return FR_DISK_ERR;
    7c16:	2001      	movs	r0, #1
    7c18:	e7a8      	b.n	7b6c <f_open+0x2c>
        else
            res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
    }
    /* Create or Open a file */
    if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    7c1a:	f016 0f1c 	tst.w	r6, #28
    7c1e:	d0a5      	beq.n	7b6c <f_open+0x2c>
        DWORD dw, cl;

        if (res != FR_OK) {                 /* No file, create new */
            if (res == FR_NO_FILE)          /* There is no file to open, create a new entry */
    7c20:	2804      	cmp	r0, #4
    7c22:	d1a3      	bne.n	7b6c <f_open+0x2c>
#if _FS_SHARE
                res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
                res = dir_register(&dj);
    7c24:	a805      	add	r0, sp, #20
    7c26:	f7ff fc75 	bl	7514 <dir_register>
#endif
            mode |= FA_CREATE_ALWAYS;       /* File is created */
    7c2a:	f047 0708 	orr.w	r7, r7, #8
    7c2e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
            } else {
                if (mode & FA_CREATE_NEW)   /* Cannot create as new file */
                    res = FR_EXIST;
            }
        }
        if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {    /* Truncate it if overwrite mode */
    7c30:	2800      	cmp	r0, #0
    7c32:	d19b      	bne.n	7b6c <f_open+0x2c>
    7c34:	073e      	lsls	r6, r7, #28
    7c36:	d43b      	bmi.n	7cb0 <f_open+0x170>
    7c38:	9e05      	ldr	r6, [sp, #20]
    7c3a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    }
#endif
    FREE_BUF();

    if (res == FR_OK) {
        fp->flag = mode;                    /* File access mode */
    7c3c:	71af      	strb	r7, [r5, #6]
        }
    }
    if (res == FR_OK) {
        if (mode & FA_CREATE_ALWAYS)            /* Set file change flag if created or overwritten */
            mode |= FA__WRITTEN;
        fp->dir_sect = dj.fs->winsect;          /* Pointer to the directory entry */
    7c3e:	61eb      	str	r3, [r5, #28]
        fp->dir_ptr = dir;
    7c40:	622c      	str	r4, [r5, #32]
#endif
    FREE_BUF();

    if (res == FR_OK) {
        fp->flag = mode;                    /* File access mode */
        fp->sclust = LD_CLUST(dir);         /* File start cluster */
    7c42:	7d60      	ldrb	r0, [r4, #21]
    7c44:	7ea2      	ldrb	r2, [r4, #26]
    7c46:	7d21      	ldrb	r1, [r4, #20]
    7c48:	7ee3      	ldrb	r3, [r4, #27]
        fp->fptr = 0;                       /* File pointer */
        fp->dsect = 0;
#if _USE_FASTSEEK
        fp->cltbl = 0;                      /* Normal seek mode */
#endif
        fp->fs = dj.fs; fp->id = dj.fs->id; /* Validate file object */
    7c4a:	88f7      	ldrh	r7, [r6, #6]
#endif
    FREE_BUF();

    if (res == FR_OK) {
        fp->flag = mode;                    /* File access mode */
        fp->sclust = LD_CLUST(dir);         /* File start cluster */
    7c4c:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
    7c50:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    7c54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    7c58:	612b      	str	r3, [r5, #16]
        fp->fsize = LD_DWORD(dir+DIR_FileSize); /* File size */
    7c5a:	7fa1      	ldrb	r1, [r4, #30]
    7c5c:	7fe3      	ldrb	r3, [r4, #31]
    7c5e:	7f22      	ldrb	r2, [r4, #28]
    7c60:	7f60      	ldrb	r0, [r4, #29]
        fp->fptr = 0;                       /* File pointer */
        fp->dsect = 0;
#if _USE_FASTSEEK
        fp->cltbl = 0;                      /* Normal seek mode */
#endif
        fp->fs = dj.fs; fp->id = dj.fs->id; /* Validate file object */
    7c62:	602e      	str	r6, [r5, #0]
    FREE_BUF();

    if (res == FR_OK) {
        fp->flag = mode;                    /* File access mode */
        fp->sclust = LD_CLUST(dir);         /* File start cluster */
        fp->fsize = LD_DWORD(dir+DIR_FileSize); /* File size */
    7c64:	0409      	lsls	r1, r1, #16
    7c66:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
    7c6a:	4313      	orrs	r3, r2
    7c6c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
        fp->fptr = 0;                       /* File pointer */
    7c70:	2000      	movs	r0, #0
    FREE_BUF();

    if (res == FR_OK) {
        fp->flag = mode;                    /* File access mode */
        fp->sclust = LD_CLUST(dir);         /* File start cluster */
        fp->fsize = LD_DWORD(dir+DIR_FileSize); /* File size */
    7c72:	60eb      	str	r3, [r5, #12]
        fp->fptr = 0;                       /* File pointer */
        fp->dsect = 0;
#if _USE_FASTSEEK
        fp->cltbl = 0;                      /* Normal seek mode */
#endif
        fp->fs = dj.fs; fp->id = dj.fs->id; /* Validate file object */
    7c74:	80af      	strh	r7, [r5, #4]

    if (res == FR_OK) {
        fp->flag = mode;                    /* File access mode */
        fp->sclust = LD_CLUST(dir);         /* File start cluster */
        fp->fsize = LD_DWORD(dir+DIR_FileSize); /* File size */
        fp->fptr = 0;                       /* File pointer */
    7c76:	60a8      	str	r0, [r5, #8]
        fp->dsect = 0;
    7c78:	61a8      	str	r0, [r5, #24]
#endif
        fp->fs = dj.fs; fp->id = dj.fs->id; /* Validate file object */
    }

    LEAVE_FF(dj.fs, res);
}
    7c7a:	b00f      	add	sp, #60	; 0x3c
    7c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            }
        }
    }
    else {  /* Open an existing file */
        if (res == FR_OK) {                     /* Follow succeeded */
            if (dir[DIR_Attr] & AM_DIR) {       /* It is a directory */
    7c80:	7ae3      	ldrb	r3, [r4, #11]
    7c82:	06d8      	lsls	r0, r3, #27
    7c84:	d507      	bpl.n	7c96 <f_open+0x156>
                res = FR_NO_FILE;
    7c86:	2004      	movs	r0, #4
#endif
        fp->fs = dj.fs; fp->id = dj.fs->id; /* Validate file object */
    }

    LEAVE_FF(dj.fs, res);
}
    7c88:	b00f      	add	sp, #60	; 0x3c
    7c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (res == FR_OK) {                     /* Follow succeeded */
            if (dir[DIR_Attr] & AM_DIR) {       /* It is a directory */
                res = FR_NO_FILE;
            } else {
                if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
                    res = FR_DENIED;
    7c8e:	2007      	movs	r0, #7
#endif
        fp->fs = dj.fs; fp->id = dj.fs->id; /* Validate file object */
    }

    LEAVE_FF(dj.fs, res);
}
    7c90:	b00f      	add	sp, #60	; 0x3c
    7c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else {  /* Open an existing file */
        if (res == FR_OK) {                     /* Follow succeeded */
            if (dir[DIR_Attr] & AM_DIR) {       /* It is a directory */
                res = FR_NO_FILE;
            } else {
                if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    7c96:	07b1      	lsls	r1, r6, #30
    7c98:	d501      	bpl.n	7c9e <f_open+0x15e>
    7c9a:	07da      	lsls	r2, r3, #31
    7c9c:	d4f7      	bmi.n	7c8e <f_open+0x14e>
                    res = FR_DENIED;
            }
        }
    }
    if (res == FR_OK) {
        if (mode & FA_CREATE_ALWAYS)            /* Set file change flag if created or overwritten */
    7c9e:	0733      	lsls	r3, r6, #28
    7ca0:	d5ca      	bpl.n	7c38 <f_open+0xf8>
    7ca2:	9e05      	ldr	r6, [sp, #20]
    7ca4:	6b33      	ldr	r3, [r6, #48]	; 0x30
            mode |= FA__WRITTEN;
    7ca6:	f047 0720 	orr.w	r7, r7, #32
    7caa:	e7c7      	b.n	7c3c <f_open+0xfc>
    dir = dj.dir;

#if !_FS_READONLY   /* R/W configuration */
    if (res == FR_OK) {
        if (!dir)   /* Current dir itself */
            res = FR_INVALID_NAME;
    7cac:	2006      	movs	r0, #6
    7cae:	e75d      	b.n	7b6c <f_open+0x2c>
                if (mode & FA_CREATE_NEW)   /* Cannot create as new file */
                    res = FR_EXIST;
            }
        }
        if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {    /* Truncate it if overwrite mode */
            dw = get_fattime();                 /* Created time */
    7cb0:	f7fb f86e 	bl	2d90 <get_fattime>
            ST_DWORD(dir+DIR_CrtTime, dw);
            dir[DIR_Attr] = 0;                  /* Reset attribute */
            ST_DWORD(dir+DIR_FileSize, 0);      /* size = 0 */
            cl = LD_CLUST(dir);                 /* Get start cluster */
    7cb4:	7d22      	ldrb	r2, [r4, #20]
    7cb6:	f894 9015 	ldrb.w	r9, [r4, #21]
    7cba:	7ee1      	ldrb	r1, [r4, #27]
    7cbc:	7ea3      	ldrb	r3, [r4, #26]
            ST_CLUST(dir, 0);                   /* cluster = 0 */
            dj.fs->wflag = 1;
    7cbe:	9e05      	ldr	r6, [sp, #20]
                    res = FR_EXIST;
            }
        }
        if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {    /* Truncate it if overwrite mode */
            dw = get_fattime();                 /* Created time */
            ST_DWORD(dir+DIR_CrtTime, dw);
    7cc0:	73a0      	strb	r0, [r4, #14]
            dir[DIR_Attr] = 0;                  /* Reset attribute */
            ST_DWORD(dir+DIR_FileSize, 0);      /* size = 0 */
            cl = LD_CLUST(dir);                 /* Get start cluster */
    7cc2:	ea42 2909 	orr.w	r9, r2, r9, lsl #8
    7cc6:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
            }
        }
        if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {    /* Truncate it if overwrite mode */
            dw = get_fattime();                 /* Created time */
            ST_DWORD(dir+DIR_CrtTime, dw);
            dir[DIR_Attr] = 0;                  /* Reset attribute */
    7cca:	2200      	movs	r2, #0
                    res = FR_EXIST;
            }
        }
        if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {    /* Truncate it if overwrite mode */
            dw = get_fattime();                 /* Created time */
            ST_DWORD(dir+DIR_CrtTime, dw);
    7ccc:	f3c0 2c07 	ubfx	ip, r0, #8, #8
    7cd0:	ea4f 4e10 	mov.w	lr, r0, lsr #16
            dir[DIR_Attr] = 0;                  /* Reset attribute */
            ST_DWORD(dir+DIR_FileSize, 0);      /* size = 0 */
            cl = LD_CLUST(dir);                 /* Get start cluster */
            ST_CLUST(dir, 0);                   /* cluster = 0 */
            dj.fs->wflag = 1;
    7cd4:	f04f 0a01 	mov.w	sl, #1
                    res = FR_EXIST;
            }
        }
        if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {    /* Truncate it if overwrite mode */
            dw = get_fattime();                 /* Created time */
            ST_DWORD(dir+DIR_CrtTime, dw);
    7cd8:	0e00      	lsrs	r0, r0, #24
            dir[DIR_Attr] = 0;                  /* Reset attribute */
            ST_DWORD(dir+DIR_FileSize, 0);      /* size = 0 */
            cl = LD_CLUST(dir);                 /* Get start cluster */
            ST_CLUST(dir, 0);                   /* cluster = 0 */
            dj.fs->wflag = 1;
            if (cl) {                           /* Remove the cluster chain if exist */
    7cda:	ea51 4909 	orrs.w	r9, r1, r9, lsl #16
                    res = FR_EXIST;
            }
        }
        if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {    /* Truncate it if overwrite mode */
            dw = get_fattime();                 /* Created time */
            ST_DWORD(dir+DIR_CrtTime, dw);
    7cde:	f884 c00f 	strb.w	ip, [r4, #15]
    7ce2:	f884 e010 	strb.w	lr, [r4, #16]
    7ce6:	7460      	strb	r0, [r4, #17]
            dir[DIR_Attr] = 0;                  /* Reset attribute */
    7ce8:	72e2      	strb	r2, [r4, #11]
            ST_DWORD(dir+DIR_FileSize, 0);      /* size = 0 */
    7cea:	7722      	strb	r2, [r4, #28]
    7cec:	7762      	strb	r2, [r4, #29]
    7cee:	77a2      	strb	r2, [r4, #30]
    7cf0:	77e2      	strb	r2, [r4, #31]
            cl = LD_CLUST(dir);                 /* Get start cluster */
            ST_CLUST(dir, 0);                   /* cluster = 0 */
    7cf2:	76a2      	strb	r2, [r4, #26]
    7cf4:	76e2      	strb	r2, [r4, #27]
    7cf6:	7522      	strb	r2, [r4, #20]
    7cf8:	7562      	strb	r2, [r4, #21]
            dj.fs->wflag = 1;
    7cfa:	f886 a004 	strb.w	sl, [r6, #4]
            if (cl) {                           /* Remove the cluster chain if exist */
    7cfe:	d0d1      	beq.n	7ca4 <f_open+0x164>
    DWORD nxt;
#if _USE_ERASE
    DWORD scl = clst, ecl = clst, resion[2];
#endif

    if (clst < 2 || clst >= fs->n_fatent) { /* Check range */
    7d00:	45d1      	cmp	r9, sl
            ST_DWORD(dir+DIR_FileSize, 0);      /* size = 0 */
            cl = LD_CLUST(dir);                 /* Get start cluster */
            ST_CLUST(dir, 0);                   /* cluster = 0 */
            dj.fs->wflag = 1;
            if (cl) {                           /* Remove the cluster chain if exist */
                dw = dj.fs->winsect;
    7d02:	f8d6 8030 	ldr.w	r8, [r6, #48]	; 0x30
    DWORD nxt;
#if _USE_ERASE
    DWORD scl = clst, ecl = clst, resion[2];
#endif

    if (clst < 2 || clst >= fs->n_fatent) { /* Check range */
    7d06:	d003      	beq.n	7d10 <f_open+0x1d0>
    7d08:	69f3      	ldr	r3, [r6, #28]
    7d0a:	4599      	cmp	r9, r3
    7d0c:	f0c0 80d7 	bcc.w	7ebe <f_open+0x37e>
    7d10:	2002      	movs	r0, #2
    7d12:	e72b      	b.n	7b6c <f_open+0x2c>
    DWORD sect  /* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK) /* Load boot record */
        return 3;
    if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)       /* Check record signature (always placed at offset 510 even if the sector size is >512) */
    7d14:	f898 a233 	ldrb.w	sl, [r8, #563]	; 0x233
    7d18:	f898 3232 	ldrb.w	r3, [r8, #562]	; 0x232
    7d1c:	4a09      	ldr	r2, [pc, #36]	; (7d44 <f_open+0x204>)
    7d1e:	ea43 2a0a 	orr.w	sl, r3, sl, lsl #8
    7d22:	fa0f fa8a 	sxth.w	sl, sl
    7d26:	4592      	cmp	sl, r2
    7d28:	f000 8116 	beq.w	7f58 <f_open+0x418>
        return 2;
    7d2c:	2002      	movs	r0, #2
#if _MAX_SS != 512                      /* Get disk sector size (variable sector size cfg only) */
    if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
        return FR_DISK_ERR;
#endif
    /* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
    fmt = check_fs(fs, bsect = 0);      /* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    7d2e:	f04f 0c00 	mov.w	ip, #0
            bsect = LD_DWORD(&tbl[8]);      /* Partition offset in LBA */
            fmt = check_fs(fs, bsect);      /* Check the partition */
        }
    }
    if (fmt == 3) return FR_DISK_ERR;
    if (fmt) return FR_NO_FILESYSTEM;       /* No FAT volume is found */
    7d32:	b148      	cbz	r0, 7d48 <f_open+0x208>
    7d34:	200d      	movs	r0, #13
    7d36:	e719      	b.n	7b6c <f_open+0x2c>
    7d38:	200010cc 	.word	0x200010cc
    7d3c:	200012d0 	.word	0x200012d0
    7d40:	200010d0 	.word	0x200010d0
    7d44:	ffffaa55 	.word	0xffffaa55

    /* An FAT volume is found. Following code initializes the file system object */

    if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))      /* (BPB_BytsPerSec must be equal to the physical sector size) */
    7d48:	f898 2040 	ldrb.w	r2, [r8, #64]	; 0x40
    7d4c:	f898 303f 	ldrb.w	r3, [r8, #63]	; 0x3f
    7d50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    7d58:	d1ec      	bne.n	7d34 <f_open+0x1f4>
        return FR_NO_FILESYSTEM;

    fasize = LD_WORD(fs->win+BPB_FATSz16);              /* Number of sectors per FAT */
    7d5a:	f898 104b 	ldrb.w	r1, [r8, #75]	; 0x4b
    7d5e:	f898 304a 	ldrb.w	r3, [r8, #74]	; 0x4a
    if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    7d62:	ea53 2301 	orrs.w	r3, r3, r1, lsl #8
    7d66:	f000 8173 	beq.w	8050 <f_open+0x510>
    /* An FAT volume is found. Following code initializes the file system object */

    if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))      /* (BPB_BytsPerSec must be equal to the physical sector size) */
        return FR_NO_FILESYSTEM;

    fasize = LD_WORD(fs->win+BPB_FATSz16);              /* Number of sectors per FAT */
    7d6a:	4619      	mov	r1, r3
    if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    fs->fsize = fasize;

    fs->n_fats = b = fs->win[BPB_NumFATs];              /* Number of FAT copies */
    7d6c:	f898 a044 	ldrb.w	sl, [r8, #68]	; 0x44
    if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))      /* (BPB_BytsPerSec must be equal to the physical sector size) */
        return FR_NO_FILESYSTEM;

    fasize = LD_WORD(fs->win+BPB_FATSz16);              /* Number of sectors per FAT */
    if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    fs->fsize = fasize;
    7d70:	f8c8 1020 	str.w	r1, [r8, #32]

    fs->n_fats = b = fs->win[BPB_NumFATs];              /* Number of FAT copies */
    if (b != 1 && b != 2) return FR_NO_FILESYSTEM;      /* (Must be 1 or 2) */
    7d74:	f10a 33ff 	add.w	r3, sl, #4294967295
    7d78:	2b01      	cmp	r3, #1

    fasize = LD_WORD(fs->win+BPB_FATSz16);              /* Number of sectors per FAT */
    if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    fs->fsize = fasize;

    fs->n_fats = b = fs->win[BPB_NumFATs];              /* Number of FAT copies */
    7d7a:	f888 a003 	strb.w	sl, [r8, #3]
    if (b != 1 && b != 2) return FR_NO_FILESYSTEM;      /* (Must be 1 or 2) */
    7d7e:	d8d9      	bhi.n	7d34 <f_open+0x1f4>
    fasize *= b;                                        /* Number of sectors for FAT area */

    fs->csize = b = fs->win[BPB_SecPerClus];            /* Number of sectors per cluster */
    7d80:	f898 3041 	ldrb.w	r3, [r8, #65]	; 0x41
    7d84:	f888 3002 	strb.w	r3, [r8, #2]
    if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;   /* (Must be power of 2) */
    7d88:	2b00      	cmp	r3, #0
    7d8a:	d0d3      	beq.n	7d34 <f_open+0x1f4>
    7d8c:	1e5a      	subs	r2, r3, #1
    7d8e:	421a      	tst	r2, r3
    7d90:	d1d0      	bne.n	7d34 <f_open+0x1f4>

    fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);    /* Number of root directory entries */
    7d92:	f898 e046 	ldrb.w	lr, [r8, #70]	; 0x46
    7d96:	f898 2045 	ldrb.w	r2, [r8, #69]	; 0x45
    7d9a:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
    if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM; /* (BPB_RootEntCnt must be sector aligned) */
    7d9e:	f01e 0f0f 	tst.w	lr, #15
    fasize *= b;                                        /* Number of sectors for FAT area */

    fs->csize = b = fs->win[BPB_SecPerClus];            /* Number of sectors per cluster */
    if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;   /* (Must be power of 2) */

    fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);    /* Number of root directory entries */
    7da2:	f8a8 e008 	strh.w	lr, [r8, #8]
    if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM; /* (BPB_RootEntCnt must be sector aligned) */
    7da6:	d1c5      	bne.n	7d34 <f_open+0x1f4>

    tsect = LD_WORD(fs->win+BPB_TotSec16);              /* Number of sectors on the volume */
    7da8:	f898 b048 	ldrb.w	fp, [r8, #72]	; 0x48
    7dac:	f898 2047 	ldrb.w	r2, [r8, #71]	; 0x47
    if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    7db0:	ea52 2b0b 	orrs.w	fp, r2, fp, lsl #8
    7db4:	d10d      	bne.n	7dd2 <f_open+0x292>
    7db6:	f898 2056 	ldrb.w	r2, [r8, #86]	; 0x56
    7dba:	f898 b057 	ldrb.w	fp, [r8, #87]	; 0x57
    7dbe:	f898 0054 	ldrb.w	r0, [r8, #84]	; 0x54
    7dc2:	0412      	lsls	r2, r2, #16
    7dc4:	ea42 620b 	orr.w	r2, r2, fp, lsl #24
    7dc8:	f898 b055 	ldrb.w	fp, [r8, #85]	; 0x55
    7dcc:	4302      	orrs	r2, r0
    7dce:	ea42 2b0b 	orr.w	fp, r2, fp, lsl #8

    nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);             /* Number of reserved sectors */
    7dd2:	f898 0043 	ldrb.w	r0, [r8, #67]	; 0x43
    7dd6:	f898 2042 	ldrb.w	r2, [r8, #66]	; 0x42
    if (!nrsv) return FR_NO_FILESYSTEM;                 /* (BPB_RsvdSecCnt must not be 0) */
    7dda:	ea52 2200 	orrs.w	r2, r2, r0, lsl #8
    7dde:	d0a9      	beq.n	7d34 <f_open+0x1f4>
    if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    fs->fsize = fasize;

    fs->n_fats = b = fs->win[BPB_NumFATs];              /* Number of FAT copies */
    if (b != 1 && b != 2) return FR_NO_FILESYSTEM;      /* (Must be 1 or 2) */
    fasize *= b;                                        /* Number of sectors for FAT area */
    7de0:	fb0a fa01 	mul.w	sl, sl, r1
    7de4:	eb02 101e 	add.w	r0, r2, lr, lsr #4

    nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);             /* Number of reserved sectors */
    if (!nrsv) return FR_NO_FILESYSTEM;                 /* (BPB_RsvdSecCnt must not be 0) */

    /* Determine the FAT sub type */
    sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR); /* RSV+FAT+DIR */
    7de8:	4450      	add	r0, sl
    if (tsect < sysect) return FR_NO_FILESYSTEM;        /* (Invalid volume size) */
    7dea:	4558      	cmp	r0, fp
    7dec:	d8a2      	bhi.n	7d34 <f_open+0x1f4>
    nclst = (tsect - sysect) / fs->csize;               /* Number of clusters */
    7dee:	ebc0 0b0b 	rsb	fp, r0, fp
    7df2:	fbbb f3f3 	udiv	r3, fp, r3
    if (!nclst) return FR_NO_FILESYSTEM;                /* (Invalid volume size) */
    7df6:	2b00      	cmp	r3, #0
    7df8:	d09c      	beq.n	7d34 <f_open+0x1f4>
    fmt = FS_FAT12;
    if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    7dfa:	f640 7bf5 	movw	fp, #4085	; 0xff5
    7dfe:	455b      	cmp	r3, fp
    7e00:	f240 8135 	bls.w	806e <f_open+0x52e>
    if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    7e04:	f64f 7bf5 	movw	fp, #65525	; 0xfff5
    7e08:	455b      	cmp	r3, fp
    7e0a:	f240 81a1 	bls.w	8150 <f_open+0x610>

    /* Boundaries and Limits */
    fs->n_fatent = nclst + 2;                           /* Number of FAT entries */
    7e0e:	3302      	adds	r3, #2
    fs->database = bsect + sysect;                      /* Data start sector */
    7e10:	4460      	add	r0, ip
    fs->fatbase = bsect + nrsv;                         /* FAT start sector */
    7e12:	4462      	add	r2, ip
    fmt = FS_FAT12;
    if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    if (nclst >= MIN_FAT32) fmt = FS_FAT32;

    /* Boundaries and Limits */
    fs->n_fatent = nclst + 2;                           /* Number of FAT entries */
    7e14:	f8c8 301c 	str.w	r3, [r8, #28]
    fs->database = bsect + sysect;                      /* Data start sector */
    7e18:	f8c8 002c 	str.w	r0, [r8, #44]	; 0x2c
    fs->fatbase = bsect + nrsv;                         /* FAT start sector */
    7e1c:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
    if (fmt == FS_FAT32) {
        if (fs->n_rootdir) return FR_NO_FILESYSTEM;     /* (BPB_RootEntCnt must be 0) */
    7e20:	f1be 0f00 	cmp.w	lr, #0
    7e24:	d186      	bne.n	7d34 <f_open+0x1f4>
        fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);   /* Root directory start cluster */
    7e26:	f898 0062 	ldrb.w	r0, [r8, #98]	; 0x62
    7e2a:	f898 b063 	ldrb.w	fp, [r8, #99]	; 0x63
    7e2e:	f898 2060 	ldrb.w	r2, [r8, #96]	; 0x60
    7e32:	f898 a061 	ldrb.w	sl, [r8, #97]	; 0x61
    7e36:	0400      	lsls	r0, r0, #16
    7e38:	ea40 600b 	orr.w	r0, r0, fp, lsl #24
        szbfat = fs->n_fatent * 4;                      /* (Required FAT size) */
    7e3c:	009b      	lsls	r3, r3, #2
    7e3e:	4302      	orrs	r2, r0
        if (!fs->n_rootdir) return FR_NO_FILESYSTEM;    /* (BPB_RootEntCnt must not be 0) */
        fs->dirbase = fs->fatbase + fasize;             /* Root directory start sector */
        szbfat = (fmt == FS_FAT16) ?                    /* (Required FAT size) */
            fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    }
    if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))   /* (BPB_FATSz must not be less than required) */
    7e40:	f203 10ff 	addw	r0, r3, #511	; 0x1ff
    7e44:	ebb1 2f50 	cmp.w	r1, r0, lsr #9
    fs->n_fatent = nclst + 2;                           /* Number of FAT entries */
    fs->database = bsect + sysect;                      /* Data start sector */
    fs->fatbase = bsect + nrsv;                         /* FAT start sector */
    if (fmt == FS_FAT32) {
        if (fs->n_rootdir) return FR_NO_FILESYSTEM;     /* (BPB_RootEntCnt must be 0) */
        fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);   /* Root directory start cluster */
    7e48:	ea42 230a 	orr.w	r3, r2, sl, lsl #8
    7e4c:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
        if (!fs->n_rootdir) return FR_NO_FILESYSTEM;    /* (BPB_RootEntCnt must not be 0) */
        fs->dirbase = fs->fatbase + fasize;             /* Root directory start sector */
        szbfat = (fmt == FS_FAT16) ?                    /* (Required FAT size) */
            fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    }
    if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))   /* (BPB_FATSz must not be less than required) */
    7e50:	f4ff af70 	bcc.w	7d34 <f_open+0x1f4>
    fs->last_clust = 0;

    /* Get fsinfo if available */
    if (fmt == FS_FAT32) {
        fs->fsi_flag = 0;
        fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    7e54:	f898 3064 	ldrb.w	r3, [r8, #100]	; 0x64
    7e58:	f898 2065 	ldrb.w	r2, [r8, #101]	; 0x65
        return FR_NO_FILESYSTEM;

#if !_FS_READONLY
    /* Initialize cluster allocation information */
    fs->free_clust = 0xFFFFFFFF;
    fs->last_clust = 0;
    7e5c:	f8c8 e00c 	str.w	lr, [r8, #12]

    /* Get fsinfo if available */
    if (fmt == FS_FAT32) {
        fs->fsi_flag = 0;
        fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    7e60:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    7e64:	4462      	add	r2, ip
    if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))   /* (BPB_FATSz must not be less than required) */
        return FR_NO_FILESYSTEM;

#if !_FS_READONLY
    /* Initialize cluster allocation information */
    fs->free_clust = 0xFFFFFFFF;
    7e66:	f04f 33ff 	mov.w	r3, #4294967295
    7e6a:	f8c8 3010 	str.w	r3, [r8, #16]
    fs->last_clust = 0;

    /* Get fsinfo if available */
    if (fmt == FS_FAT32) {
        fs->fsi_flag = 0;
    7e6e:	f888 e005 	strb.w	lr, [r8, #5]
        fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
        if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    7e72:	4649      	mov	r1, r9
    fs->last_clust = 0;

    /* Get fsinfo if available */
    if (fmt == FS_FAT32) {
        fs->fsi_flag = 0;
        fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    7e74:	f8c8 2014 	str.w	r2, [r8, #20]
        if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    7e78:	f898 0001 	ldrb.w	r0, [r8, #1]
    7e7c:	2301      	movs	r3, #1
    7e7e:	f7fb f98d 	bl	319c <disk_read>
    7e82:	b950      	cbnz	r0, 7e9a <f_open+0x35a>
            LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    7e84:	f898 1233 	ldrb.w	r1, [r8, #563]	; 0x233
    7e88:	f898 3232 	ldrb.w	r3, [r8, #562]	; 0x232

    /* Get fsinfo if available */
    if (fmt == FS_FAT32) {
        fs->fsi_flag = 0;
        fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
        if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    7e8c:	f64a 2255 	movw	r2, #43605	; 0xaa55
            LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    7e90:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

    /* Get fsinfo if available */
    if (fmt == FS_FAT32) {
        fs->fsi_flag = 0;
        fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
        if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    7e94:	4293      	cmp	r3, r2
    7e96:	f000 810f 	beq.w	80b8 <f_open+0x578>
            LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
            LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    7e9a:	2303      	movs	r3, #3
                fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
        }
    }
#endif
    fs->fs_type = fmt;      /* FAT sub-type */
    fs->id = ++Fsid;        /* File system mount ID */
    7e9c:	49bc      	ldr	r1, [pc, #752]	; (8190 <f_open+0x650>)
                fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
                fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
        }
    }
#endif
    fs->fs_type = fmt;      /* FAT sub-type */
    7e9e:	f888 3000 	strb.w	r3, [r8]
    fs->id = ++Fsid;        /* File system mount ID */
    7ea2:	880b      	ldrh	r3, [r1, #0]
    7ea4:	3301      	adds	r3, #1
    fs->winsect = 0;        /* Invalidate sector cache */
    7ea6:	2200      	movs	r2, #0
                fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
        }
    }
#endif
    fs->fs_type = fmt;      /* FAT sub-type */
    fs->id = ++Fsid;        /* File system mount ID */
    7ea8:	b29b      	uxth	r3, r3
    7eaa:	800b      	strh	r3, [r1, #0]
    7eac:	f8a8 3006 	strh.w	r3, [r8, #6]
    fs->winsect = 0;        /* Invalidate sector cache */
    7eb0:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
    fs->wflag = 0;
    7eb4:	f888 2004 	strb.w	r2, [r8, #4]
#if _FS_RPATH
    fs->cdir = 0;           /* Current directory (root dir) */
    7eb8:	f8c8 2018 	str.w	r2, [r8, #24]
    7ebc:	e671      	b.n	7ba2 <f_open+0x62>
    7ebe:	4630      	mov	r0, r6
    7ec0:	4649      	mov	r1, r9
    7ec2:	f7fe f951 	bl	6168 <remove_chain.part.6>
            ST_CLUST(dir, 0);                   /* cluster = 0 */
            dj.fs->wflag = 1;
            if (cl) {                           /* Remove the cluster chain if exist */
                dw = dj.fs->winsect;
                res = remove_chain(dj.fs, cl);
                if (res == FR_OK) {
    7ec6:	2800      	cmp	r0, #0
    7ec8:	f47f ae50 	bne.w	7b6c <f_open+0x2c>
                    dj.fs->last_clust = cl - 1; /* Reuse the cluster hole */
    7ecc:	9e05      	ldr	r6, [sp, #20]
)                   /* Move to zero only writes back dirty window */
{
    DWORD wsect;


    wsect = fs->winsect;
    7ece:	f8d6 b030 	ldr.w	fp, [r6, #48]	; 0x30
            dj.fs->wflag = 1;
            if (cl) {                           /* Remove the cluster chain if exist */
                dw = dj.fs->winsect;
                res = remove_chain(dj.fs, cl);
                if (res == FR_OK) {
                    dj.fs->last_clust = cl - 1; /* Reuse the cluster hole */
    7ed2:	f109 31ff 	add.w	r1, r9, #4294967295
{
    DWORD wsect;


    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
    7ed6:	45d8      	cmp	r8, fp
            dj.fs->wflag = 1;
            if (cl) {                           /* Remove the cluster chain if exist */
                dw = dj.fs->winsect;
                res = remove_chain(dj.fs, cl);
                if (res == FR_OK) {
                    dj.fs->last_clust = cl - 1; /* Reuse the cluster hole */
    7ed8:	60f1      	str	r1, [r6, #12]
{
    DWORD wsect;


    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
    7eda:	d03b      	beq.n	7f54 <f_open+0x414>
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
    7edc:	7933      	ldrb	r3, [r6, #4]
    7ede:	b993      	cbnz	r3, 7f06 <f_open+0x3c6>
                    disk_write(fs->drv, fs->win, wsect, 1);
                }
            }
        }
#endif
        if (sector) {
    7ee0:	f1b8 0f00 	cmp.w	r8, #0
    7ee4:	f43f aedd 	beq.w	7ca2 <f_open+0x162>
            if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    7ee8:	7870      	ldrb	r0, [r6, #1]
    7eea:	f106 0134 	add.w	r1, r6, #52	; 0x34
    7eee:	4642      	mov	r2, r8
    7ef0:	2301      	movs	r3, #1
    7ef2:	f7fb f953 	bl	319c <disk_read>
    7ef6:	2800      	cmp	r0, #0
    7ef8:	f47f ae8d 	bne.w	7c16 <f_open+0xd6>
                return FR_DISK_ERR;
            fs->winsect = sector;
    7efc:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
    7f00:	9e05      	ldr	r6, [sp, #20]
    7f02:	6b33      	ldr	r3, [r6, #48]	; 0x30
    7f04:	e6cf      	b.n	7ca6 <f_open+0x166>

    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    7f06:	f106 0934 	add.w	r9, r6, #52	; 0x34
    7f0a:	4653      	mov	r3, sl
    7f0c:	4649      	mov	r1, r9
    7f0e:	7870      	ldrb	r0, [r6, #1]
    7f10:	465a      	mov	r2, fp
    7f12:	f7fb f991 	bl	3238 <disk_write>
    7f16:	2800      	cmp	r0, #0
    7f18:	f47f ae7d 	bne.w	7c16 <f_open+0xd6>
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    7f1c:	6a33      	ldr	r3, [r6, #32]
    7f1e:	6a72      	ldr	r2, [r6, #36]	; 0x24
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
    7f20:	7130      	strb	r0, [r6, #4]
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    7f22:	441a      	add	r2, r3
    7f24:	4593      	cmp	fp, r2
    7f26:	d2db      	bcs.n	7ee0 <f_open+0x3a0>
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    7f28:	f896 a003 	ldrb.w	sl, [r6, #3]
    7f2c:	f1ba 0f01 	cmp.w	sl, #1
    7f30:	d801      	bhi.n	7f36 <f_open+0x3f6>
    7f32:	e7d5      	b.n	7ee0 <f_open+0x3a0>
    7f34:	6a33      	ldr	r3, [r6, #32]
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    7f36:	7870      	ldrb	r0, [r6, #1]
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
                    wsect += fs->fsize;
    7f38:	449b      	add	fp, r3
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    7f3a:	f10a 3aff 	add.w	sl, sl, #4294967295
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    7f3e:	465a      	mov	r2, fp
    7f40:	4649      	mov	r1, r9
    7f42:	2301      	movs	r3, #1
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    7f44:	fa5f fa8a 	uxtb.w	sl, sl
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    7f48:	f7fb f976 	bl	3238 <disk_write>
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    7f4c:	f1ba 0f01 	cmp.w	sl, #1
    7f50:	d1f0      	bne.n	7f34 <f_open+0x3f4>
    7f52:	e7c5      	b.n	7ee0 <f_open+0x3a0>
{
    DWORD wsect;


    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
    7f54:	4643      	mov	r3, r8
    7f56:	e6a6      	b.n	7ca6 <f_open+0x166>
    if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK) /* Load boot record */
        return 3;
    if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)       /* Check record signature (always placed at offset 510 even if the sector size is >512) */
        return 2;

    if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146) /* Check "FAT" string */
    7f58:	f898 106c 	ldrb.w	r1, [r8, #108]	; 0x6c
    7f5c:	f898 306d 	ldrb.w	r3, [r8, #109]	; 0x6d
    7f60:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    7f64:	f898 e06b 	ldrb.w	lr, [r8, #107]	; 0x6b
    7f68:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8198 <f_open+0x658>
    7f6c:	0409      	lsls	r1, r1, #16
    7f6e:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
    7f72:	4313      	orrs	r3, r2
    7f74:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
    7f78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    7f7c:	455b      	cmp	r3, fp
    7f7e:	f43f aed6 	beq.w	7d2e <f_open+0x1ee>
        return 0;
    if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    7f82:	f898 1088 	ldrb.w	r1, [r8, #136]	; 0x88
    7f86:	f898 3089 	ldrb.w	r3, [r8, #137]	; 0x89
    7f8a:	f898 2086 	ldrb.w	r2, [r8, #134]	; 0x86
    7f8e:	f898 e087 	ldrb.w	lr, [r8, #135]	; 0x87
    7f92:	0409      	lsls	r1, r1, #16
    7f94:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
    7f98:	4313      	orrs	r3, r2
    7f9a:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
    7f9e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    7fa2:	455b      	cmp	r3, fp
    7fa4:	f43f aec3 	beq.w	7d2e <f_open+0x1ee>
    if (fmt == 1) {                     /* Not an FAT-VBR, the physical drive can be partitioned */
        /* Check the partition listed in the partition table */
        pi = LD2PT(vol);
        if (pi) pi--;
        tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
        if (tbl[4]) {                       /* Is the partition existing? */
    7fa8:	f898 31f6 	ldrb.w	r3, [r8, #502]	; 0x1f6
    7fac:	2b00      	cmp	r3, #0
    7fae:	f43f aec1 	beq.w	7d34 <f_open+0x1f4>
            bsect = LD_DWORD(&tbl[8]);      /* Partition offset in LBA */
    7fb2:	f898 31fc 	ldrb.w	r3, [r8, #508]	; 0x1fc
    7fb6:	f898 11fd 	ldrb.w	r1, [r8, #509]	; 0x1fd
    7fba:	f898 c1fa 	ldrb.w	ip, [r8, #506]	; 0x1fa
    7fbe:	f898 21fb 	ldrb.w	r2, [r8, #507]	; 0x1fb
BYTE check_fs ( /* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
    FATFS *fs,  /* File system object */
    DWORD sect  /* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK) /* Load boot record */
    7fc2:	f898 0001 	ldrb.w	r0, [r8, #1]
        /* Check the partition listed in the partition table */
        pi = LD2PT(vol);
        if (pi) pi--;
        tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
        if (tbl[4]) {                       /* Is the partition existing? */
            bsect = LD_DWORD(&tbl[8]);      /* Partition offset in LBA */
    7fc6:	041b      	lsls	r3, r3, #16
    7fc8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    7fcc:	ea43 030c 	orr.w	r3, r3, ip
    7fd0:	ea43 2c02 	orr.w	ip, r3, r2, lsl #8
BYTE check_fs ( /* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
    FATFS *fs,  /* File system object */
    DWORD sect  /* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK) /* Load boot record */
    7fd4:	4662      	mov	r2, ip
    7fd6:	4649      	mov	r1, r9
    7fd8:	2301      	movs	r3, #1
    7fda:	f8cd c004 	str.w	ip, [sp, #4]
    7fde:	f7fb f8dd 	bl	319c <disk_read>
    7fe2:	f8dd c004 	ldr.w	ip, [sp, #4]
    7fe6:	2800      	cmp	r0, #0
    7fe8:	f47f ae15 	bne.w	7c16 <f_open+0xd6>
        return 3;
    if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)       /* Check record signature (always placed at offset 510 even if the sector size is >512) */
    7fec:	f898 2233 	ldrb.w	r2, [r8, #563]	; 0x233
    7ff0:	f898 3232 	ldrb.w	r3, [r8, #562]	; 0x232
    7ff4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7ff8:	b21b      	sxth	r3, r3
    7ffa:	4553      	cmp	r3, sl
    7ffc:	f47f ae9a 	bne.w	7d34 <f_open+0x1f4>
        return 2;

    if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146) /* Check "FAT" string */
    8000:	f898 106c 	ldrb.w	r1, [r8, #108]	; 0x6c
    8004:	f898 306d 	ldrb.w	r3, [r8, #109]	; 0x6d
    8008:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    800c:	f898 006b 	ldrb.w	r0, [r8, #107]	; 0x6b
    8010:	0409      	lsls	r1, r1, #16
    8012:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
    8016:	4313      	orrs	r3, r2
    8018:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    801c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    8020:	455b      	cmp	r3, fp
    8022:	f43f ae91 	beq.w	7d48 <f_open+0x208>
        return 0;
    if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    8026:	f898 2088 	ldrb.w	r2, [r8, #136]	; 0x88
    802a:	f898 1089 	ldrb.w	r1, [r8, #137]	; 0x89
    802e:	f898 3086 	ldrb.w	r3, [r8, #134]	; 0x86
    8032:	f898 0087 	ldrb.w	r0, [r8, #135]	; 0x87
    8036:	0412      	lsls	r2, r2, #16
    8038:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    803c:	4313      	orrs	r3, r2
    803e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    8042:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
        return 0;
    8046:	ebb0 000b 	subs.w	r0, r0, fp
    804a:	bf18      	it	ne
    804c:	2001      	movne	r0, #1
    804e:	e670      	b.n	7d32 <f_open+0x1f2>

    if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))      /* (BPB_BytsPerSec must be equal to the physical sector size) */
        return FR_NO_FILESYSTEM;

    fasize = LD_WORD(fs->win+BPB_FATSz16);              /* Number of sectors per FAT */
    if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    8050:	f898 305a 	ldrb.w	r3, [r8, #90]	; 0x5a
    8054:	f898 005b 	ldrb.w	r0, [r8, #91]	; 0x5b
    8058:	f898 2058 	ldrb.w	r2, [r8, #88]	; 0x58
    805c:	f898 1059 	ldrb.w	r1, [r8, #89]	; 0x59
    8060:	041b      	lsls	r3, r3, #16
    8062:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
    8066:	4313      	orrs	r3, r2
    8068:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    806c:	e67e      	b.n	7d6c <f_open+0x22c>
    fmt = FS_FAT12;
    if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    if (nclst >= MIN_FAT32) fmt = FS_FAT32;

    /* Boundaries and Limits */
    fs->n_fatent = nclst + 2;                           /* Number of FAT entries */
    806e:	3302      	adds	r3, #2
    fs->database = bsect + sysect;                      /* Data start sector */
    8070:	4460      	add	r0, ip
    fs->fatbase = bsect + nrsv;                         /* FAT start sector */
    8072:	4462      	add	r2, ip
    fmt = FS_FAT12;
    if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    if (nclst >= MIN_FAT32) fmt = FS_FAT32;

    /* Boundaries and Limits */
    fs->n_fatent = nclst + 2;                           /* Number of FAT entries */
    8074:	f8c8 301c 	str.w	r3, [r8, #28]
    fs->database = bsect + sysect;                      /* Data start sector */
    8078:	f8c8 002c 	str.w	r0, [r8, #44]	; 0x2c
    fs->fatbase = bsect + nrsv;                         /* FAT start sector */
    807c:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
    if (fmt == FS_FAT32) {
        if (fs->n_rootdir) return FR_NO_FILESYSTEM;     /* (BPB_RootEntCnt must be 0) */
        fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);   /* Root directory start cluster */
        szbfat = fs->n_fatent * 4;                      /* (Required FAT size) */
    } else {
        if (!fs->n_rootdir) return FR_NO_FILESYSTEM;    /* (BPB_RootEntCnt must not be 0) */
    8080:	f1be 0f00 	cmp.w	lr, #0
    8084:	f43f ae56 	beq.w	7d34 <f_open+0x1f4>
        fs->dirbase = fs->fatbase + fasize;             /* Root directory start sector */
        szbfat = (fmt == FS_FAT16) ?                    /* (Required FAT size) */
            fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    8088:	f003 0001 	and.w	r0, r3, #1
    808c:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
    8090:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    }
    if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))   /* (BPB_FATSz must not be less than required) */
    8094:	eb00 0353 	add.w	r3, r0, r3, lsr #1
        if (fs->n_rootdir) return FR_NO_FILESYSTEM;     /* (BPB_RootEntCnt must be 0) */
        fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);   /* Root directory start cluster */
        szbfat = fs->n_fatent * 4;                      /* (Required FAT size) */
    } else {
        if (!fs->n_rootdir) return FR_NO_FILESYSTEM;    /* (BPB_RootEntCnt must not be 0) */
        fs->dirbase = fs->fatbase + fasize;             /* Root directory start sector */
    8098:	4452      	add	r2, sl
        szbfat = (fmt == FS_FAT16) ?                    /* (Required FAT size) */
            fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    }
    if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))   /* (BPB_FATSz must not be less than required) */
    809a:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
        if (fs->n_rootdir) return FR_NO_FILESYSTEM;     /* (BPB_RootEntCnt must be 0) */
        fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);   /* Root directory start cluster */
        szbfat = fs->n_fatent * 4;                      /* (Required FAT size) */
    } else {
        if (!fs->n_rootdir) return FR_NO_FILESYSTEM;    /* (BPB_RootEntCnt must not be 0) */
        fs->dirbase = fs->fatbase + fasize;             /* Root directory start sector */
    809e:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
        szbfat = (fmt == FS_FAT16) ?                    /* (Required FAT size) */
            fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    }
    if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))   /* (BPB_FATSz must not be less than required) */
    80a2:	f4ff ae47 	bcc.w	7d34 <f_open+0x1f4>
        return FR_NO_FILESYSTEM;

#if !_FS_READONLY
    /* Initialize cluster allocation information */
    fs->free_clust = 0xFFFFFFFF;
    fs->last_clust = 0;
    80a6:	2300      	movs	r3, #0
    if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))   /* (BPB_FATSz must not be less than required) */
        return FR_NO_FILESYSTEM;

#if !_FS_READONLY
    /* Initialize cluster allocation information */
    fs->free_clust = 0xFFFFFFFF;
    80a8:	f04f 32ff 	mov.w	r2, #4294967295
    fs->last_clust = 0;
    80ac:	f8c8 300c 	str.w	r3, [r8, #12]
    if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))   /* (BPB_FATSz must not be less than required) */
        return FR_NO_FILESYSTEM;

#if !_FS_READONLY
    /* Initialize cluster allocation information */
    fs->free_clust = 0xFFFFFFFF;
    80b0:	f8c8 2010 	str.w	r2, [r8, #16]
    /* Determine the FAT sub type */
    sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR); /* RSV+FAT+DIR */
    if (tsect < sysect) return FR_NO_FILESYSTEM;        /* (Invalid volume size) */
    nclst = (tsect - sysect) / fs->csize;               /* Number of clusters */
    if (!nclst) return FR_NO_FILESYSTEM;                /* (Invalid volume size) */
    fmt = FS_FAT12;
    80b4:	2301      	movs	r3, #1
    80b6:	e6f1      	b.n	7e9c <f_open+0x35c>
    if (fmt == FS_FAT32) {
        fs->fsi_flag = 0;
        fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
        if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
            LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
            LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    80b8:	f898 1036 	ldrb.w	r1, [r8, #54]	; 0x36
    80bc:	f898 3037 	ldrb.w	r3, [r8, #55]	; 0x37
    80c0:	f898 2034 	ldrb.w	r2, [r8, #52]	; 0x34
    80c4:	f898 e035 	ldrb.w	lr, [r8, #53]	; 0x35
    /* Get fsinfo if available */
    if (fmt == FS_FAT32) {
        fs->fsi_flag = 0;
        fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
        if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
            LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    80c8:	4832      	ldr	r0, [pc, #200]	; (8194 <f_open+0x654>)
            LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    80ca:	0409      	lsls	r1, r1, #16
    80cc:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
    80d0:	4313      	orrs	r3, r2
    80d2:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
    /* Get fsinfo if available */
    if (fmt == FS_FAT32) {
        fs->fsi_flag = 0;
        fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
        if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
            LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    80d6:	4283      	cmp	r3, r0
    80d8:	f47f aedf 	bne.w	7e9a <f_open+0x35a>
            LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
            LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    80dc:	f898 121a 	ldrb.w	r1, [r8, #538]	; 0x21a
    80e0:	f898 321b 	ldrb.w	r3, [r8, #539]	; 0x21b
    80e4:	f898 2218 	ldrb.w	r2, [r8, #536]	; 0x218
    80e8:	f898 e219 	ldrb.w	lr, [r8, #537]	; 0x219
    80ec:	0409      	lsls	r1, r1, #16
    if (fmt == FS_FAT32) {
        fs->fsi_flag = 0;
        fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
        if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
            LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
            LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    80ee:	f100 50ff 	add.w	r0, r0, #534773760	; 0x1fe00000
            LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    80f2:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
    if (fmt == FS_FAT32) {
        fs->fsi_flag = 0;
        fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
        if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
            LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
            LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    80f6:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
    80fa:	4313      	orrs	r3, r2
    80fc:	3020      	adds	r0, #32
            LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    80fe:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
    if (fmt == FS_FAT32) {
        fs->fsi_flag = 0;
        fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
        if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
            LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
            LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    8102:	4283      	cmp	r3, r0
    8104:	f47f aec9 	bne.w	7e9a <f_open+0x35a>
            LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
                fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    8108:	f898 9222 	ldrb.w	r9, [r8, #546]	; 0x222
                fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    810c:	f898 021e 	ldrb.w	r0, [r8, #542]	; 0x21e
        fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
        if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
            LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
            LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
            LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
                fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    8110:	f898 a223 	ldrb.w	sl, [r8, #547]	; 0x223
                fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    8114:	f898 321f 	ldrb.w	r3, [r8, #543]	; 0x21f
    8118:	f898 221c 	ldrb.w	r2, [r8, #540]	; 0x21c
        fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
        if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
            LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
            LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
            LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
                fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    811c:	f898 1220 	ldrb.w	r1, [r8, #544]	; 0x220
    8120:	f898 c221 	ldrb.w	ip, [r8, #545]	; 0x221
                fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    8124:	f898 e21d 	ldrb.w	lr, [r8, #541]	; 0x21d
        fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
        if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
            LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
            LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
            LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
                fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    8128:	ea4f 4909 	mov.w	r9, r9, lsl #16
                fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    812c:	0400      	lsls	r0, r0, #16
        fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
        if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
            LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
            LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
            LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
                fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    812e:	ea49 690a 	orr.w	r9, r9, sl, lsl #24
                fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    8132:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
    8136:	4313      	orrs	r3, r2
    8138:	ea49 0101 	orr.w	r1, r9, r1
    813c:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
        fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
        if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
            LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
            LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
            LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
                fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    8140:	ea41 220c 	orr.w	r2, r1, ip, lsl #8
                fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    8144:	f8c8 3010 	str.w	r3, [r8, #16]
        fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
        if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
            LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
            LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
            LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
                fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    8148:	f8c8 200c 	str.w	r2, [r8, #12]
                fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    814c:	2303      	movs	r3, #3
    814e:	e6a5      	b.n	7e9c <f_open+0x35c>
    fmt = FS_FAT12;
    if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    if (nclst >= MIN_FAT32) fmt = FS_FAT32;

    /* Boundaries and Limits */
    fs->n_fatent = nclst + 2;                           /* Number of FAT entries */
    8150:	3302      	adds	r3, #2
    fs->database = bsect + sysect;                      /* Data start sector */
    8152:	4460      	add	r0, ip
    fs->fatbase = bsect + nrsv;                         /* FAT start sector */
    8154:	4462      	add	r2, ip
    fmt = FS_FAT12;
    if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    if (nclst >= MIN_FAT32) fmt = FS_FAT32;

    /* Boundaries and Limits */
    fs->n_fatent = nclst + 2;                           /* Number of FAT entries */
    8156:	f8c8 301c 	str.w	r3, [r8, #28]
    fs->database = bsect + sysect;                      /* Data start sector */
    815a:	f8c8 002c 	str.w	r0, [r8, #44]	; 0x2c
    fs->fatbase = bsect + nrsv;                         /* FAT start sector */
    815e:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
    if (fmt == FS_FAT32) {
        if (fs->n_rootdir) return FR_NO_FILESYSTEM;     /* (BPB_RootEntCnt must be 0) */
        fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);   /* Root directory start cluster */
        szbfat = fs->n_fatent * 4;                      /* (Required FAT size) */
    } else {
        if (!fs->n_rootdir) return FR_NO_FILESYSTEM;    /* (BPB_RootEntCnt must not be 0) */
    8162:	f1be 0f00 	cmp.w	lr, #0
    8166:	f43f ade5 	beq.w	7d34 <f_open+0x1f4>
        fs->dirbase = fs->fatbase + fasize;             /* Root directory start sector */
        szbfat = (fmt == FS_FAT16) ?                    /* (Required FAT size) */
            fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    816a:	005b      	lsls	r3, r3, #1
    }
    if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))   /* (BPB_FATSz must not be less than required) */
    816c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
        if (fs->n_rootdir) return FR_NO_FILESYSTEM;     /* (BPB_RootEntCnt must be 0) */
        fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);   /* Root directory start cluster */
        szbfat = fs->n_fatent * 4;                      /* (Required FAT size) */
    } else {
        if (!fs->n_rootdir) return FR_NO_FILESYSTEM;    /* (BPB_RootEntCnt must not be 0) */
        fs->dirbase = fs->fatbase + fasize;             /* Root directory start sector */
    8170:	4452      	add	r2, sl
        szbfat = (fmt == FS_FAT16) ?                    /* (Required FAT size) */
            fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    }
    if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))   /* (BPB_FATSz must not be less than required) */
    8172:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
        if (fs->n_rootdir) return FR_NO_FILESYSTEM;     /* (BPB_RootEntCnt must be 0) */
        fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);   /* Root directory start cluster */
        szbfat = fs->n_fatent * 4;                      /* (Required FAT size) */
    } else {
        if (!fs->n_rootdir) return FR_NO_FILESYSTEM;    /* (BPB_RootEntCnt must not be 0) */
        fs->dirbase = fs->fatbase + fasize;             /* Root directory start sector */
    8176:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
        szbfat = (fmt == FS_FAT16) ?                    /* (Required FAT size) */
            fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    }
    if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))   /* (BPB_FATSz must not be less than required) */
    817a:	f4ff addb 	bcc.w	7d34 <f_open+0x1f4>
        return FR_NO_FILESYSTEM;

#if !_FS_READONLY
    /* Initialize cluster allocation information */
    fs->free_clust = 0xFFFFFFFF;
    fs->last_clust = 0;
    817e:	2300      	movs	r3, #0
    if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))   /* (BPB_FATSz must not be less than required) */
        return FR_NO_FILESYSTEM;

#if !_FS_READONLY
    /* Initialize cluster allocation information */
    fs->free_clust = 0xFFFFFFFF;
    8180:	f04f 32ff 	mov.w	r2, #4294967295
    fs->last_clust = 0;
    8184:	f8c8 300c 	str.w	r3, [r8, #12]
    if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))   /* (BPB_FATSz must not be less than required) */
        return FR_NO_FILESYSTEM;

#if !_FS_READONLY
    /* Initialize cluster allocation information */
    fs->free_clust = 0xFFFFFFFF;
    8188:	f8c8 2010 	str.w	r2, [r8, #16]
    fs->last_clust = 0;
    818c:	2302      	movs	r3, #2
    818e:	e685      	b.n	7e9c <f_open+0x35c>
    8190:	200010ce 	.word	0x200010ce
    8194:	41615252 	.word	0x41615252
    8198:	00544146 	.word	0x00544146

0000819c <f_write>:
    FIL *fp,            /* Pointer to the file object */
    const void *buff,   /* Pointer to the data to be written */
    UINT btw,           /* Number of bytes to write */
    UINT *bw            /* Pointer to number of bytes written */
)
{
    819c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    81a0:	4605      	mov	r5, r0
    81a2:	469b      	mov	fp, r3
    UINT wcnt, cc;
    const BYTE *wbuff = buff;
    BYTE csect;


    *bw = 0;    /* Initialize byte counter */
    81a4:	2000      	movs	r0, #0

    res = validate(fp->fs, fp->id);         /* Check validity */
    81a6:	682b      	ldr	r3, [r5, #0]
    UINT wcnt, cc;
    const BYTE *wbuff = buff;
    BYTE csect;


    *bw = 0;    /* Initialize byte counter */
    81a8:	f8ab 0000 	strh.w	r0, [fp]
    FIL *fp,            /* Pointer to the file object */
    const void *buff,   /* Pointer to the data to be written */
    UINT btw,           /* Number of bytes to write */
    UINT *bw            /* Pointer to number of bytes written */
)
{
    81ac:	468a      	mov	sl, r1
    81ae:	b083      	sub	sp, #12
    BYTE csect;


    *bw = 0;    /* Initialize byte counter */

    res = validate(fp->fs, fp->id);         /* Check validity */
    81b0:	88a9      	ldrh	r1, [r5, #4]
FRESULT validate (  /* FR_OK(0): The object is valid, !=0: Invalid */
    FATFS *fs,      /* Pointer to the file system object */
    WORD id         /* Member id of the target object to be checked */
)
{
    if (!fs || !fs->fs_type || fs->id != id)
    81b2:	b113      	cbz	r3, 81ba <f_write+0x1e>
    81b4:	4691      	mov	r9, r2
    81b6:	781a      	ldrb	r2, [r3, #0]
    81b8:	b91a      	cbnz	r2, 81c2 <f_write+0x26>
        return FR_INVALID_OBJECT;
    81ba:	2009      	movs	r0, #9

    if (fp->fptr > fp->fsize) fp->fsize = fp->fptr; /* Update file size if needed */
    fp->flag |= FA__WRITTEN;                        /* Set file change flag */

    LEAVE_FF(fp->fs, FR_OK);
}
    81bc:	b003      	add	sp, #12
    81be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
FRESULT validate (  /* FR_OK(0): The object is valid, !=0: Invalid */
    FATFS *fs,      /* Pointer to the file system object */
    WORD id         /* Member id of the target object to be checked */
)
{
    if (!fs || !fs->fs_type || fs->id != id)
    81c2:	88da      	ldrh	r2, [r3, #6]
    81c4:	428a      	cmp	r2, r1
    81c6:	d1f8      	bne.n	81ba <f_write+0x1e>
        return FR_INVALID_OBJECT;

    ENTER_FF(fs);       /* Lock file system */

    if (disk_status(fs->drv) & STA_NOINIT)
    81c8:	7858      	ldrb	r0, [r3, #1]
    81ca:	f7fa ffdf 	bl	318c <disk_status>
    81ce:	07c3      	lsls	r3, r0, #31
    81d0:	d501      	bpl.n	81d6 <f_write+0x3a>
        return FR_NOT_READY;
    81d2:	2003      	movs	r0, #3
    81d4:	e7f2      	b.n	81bc <f_write+0x20>

    *bw = 0;    /* Initialize byte counter */

    res = validate(fp->fs, fp->id);         /* Check validity */
    if (res != FR_OK) LEAVE_FF(fp->fs, res);
    if (fp->flag & FA__ERROR)               /* Aborted file? */
    81d6:	79ab      	ldrb	r3, [r5, #6]
    81d8:	061a      	lsls	r2, r3, #24
    81da:	f100 8149 	bmi.w	8470 <f_write+0x2d4>
        LEAVE_FF(fp->fs, FR_INT_ERR);
    if (!(fp->flag & FA_WRITE))             /* Check access mode */
    81de:	079f      	lsls	r7, r3, #30
    81e0:	d403      	bmi.n	81ea <f_write+0x4e>
        LEAVE_FF(fp->fs, FR_DENIED);
    81e2:	2007      	movs	r0, #7

    if (fp->fptr > fp->fsize) fp->fsize = fp->fptr; /* Update file size if needed */
    fp->flag |= FA__WRITTEN;                        /* Set file change flag */

    LEAVE_FF(fp->fs, FR_OK);
}
    81e4:	b003      	add	sp, #12
    81e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (res != FR_OK) LEAVE_FF(fp->fs, res);
    if (fp->flag & FA__ERROR)               /* Aborted file? */
        LEAVE_FF(fp->fs, FR_INT_ERR);
    if (!(fp->flag & FA_WRITE))             /* Check access mode */
        LEAVE_FF(fp->fs, FR_DENIED);
    if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;  /* File size cannot reach 4GB */
    81ea:	68e9      	ldr	r1, [r5, #12]
    81ec:	68aa      	ldr	r2, [r5, #8]
    81ee:	eb19 0f01 	cmn.w	r9, r1
    81f2:	d307      	bcc.n	8204 <f_write+0x68>
        mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);  /* Fit partial sector */
        fp->flag |= FA__DIRTY;
#endif
    }

    if (fp->fptr > fp->fsize) fp->fsize = fp->fptr; /* Update file size if needed */
    81f4:	428a      	cmp	r2, r1
    fp->flag |= FA__WRITTEN;                        /* Set file change flag */
    81f6:	f043 0320 	orr.w	r3, r3, #32
        mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);  /* Fit partial sector */
        fp->flag |= FA__DIRTY;
#endif
    }

    if (fp->fptr > fp->fsize) fp->fsize = fp->fptr; /* Update file size if needed */
    81fa:	bf88      	it	hi
    81fc:	60ea      	strhi	r2, [r5, #12]
    fp->flag |= FA__WRITTEN;                        /* Set file change flag */
    81fe:	71ab      	strb	r3, [r5, #6]

    LEAVE_FF(fp->fs, FR_OK);
    8200:	2000      	movs	r0, #0
    8202:	e7db      	b.n	81bc <f_write+0x20>
        LEAVE_FF(fp->fs, FR_INT_ERR);
    if (!(fp->flag & FA_WRITE))             /* Check access mode */
        LEAVE_FF(fp->fs, FR_DENIED);
    if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;  /* File size cannot reach 4GB */

    for ( ;  btw;                           /* Repeat until all data written */
    8204:	f1b9 0f00 	cmp.w	r9, #0
    8208:	d0f4      	beq.n	81f4 <f_write+0x58>
                fp->fs->winsect = sect;
            }
#else
            if (fp->dsect != sect) {        /* Fill sector cache with file data */
                if (fp->fptr < fp->fsize &&
                    disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
    820a:	f105 0324 	add.w	r3, r5, #36	; 0x24
    820e:	9301      	str	r3, [sp, #4]
    8210:	464f      	mov	r7, r9
        LEAVE_FF(fp->fs, FR_DENIED);
    if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;  /* File size cannot reach 4GB */

    for ( ;  btw;                           /* Repeat until all data written */
        wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
        if ((fp->fptr % SS(fp->fs)) == 0) { /* On the sector boundary? */
    8212:	f3c2 0308 	ubfx	r3, r2, #0, #9
    8216:	2b00      	cmp	r3, #0
    8218:	f040 808f 	bne.w	833a <f_write+0x19e>
            csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));    /* Sector offset in the cluster */
    821c:	682b      	ldr	r3, [r5, #0]
    821e:	f893 8002 	ldrb.w	r8, [r3, #2]
    8222:	f108 38ff 	add.w	r8, r8, #4294967295
    8226:	ea08 2852 	and.w	r8, r8, r2, lsr #9
            if (!csect) {                   /* On the cluster boundary? */
    822a:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
    822e:	d10e      	bne.n	824e <f_write+0xb2>
                if (fp->fptr == 0) {        /* On the top of the file? */
    8230:	2a00      	cmp	r2, #0
    8232:	f040 80ec 	bne.w	840e <f_write+0x272>
                    clst = fp->sclust;      /* Follow from the origin */
    8236:	6928      	ldr	r0, [r5, #16]
                    if (clst == 0)          /* When no cluster is allocated, */
    8238:	2800      	cmp	r0, #0
    823a:	f000 80f3 	beq.w	8424 <f_write+0x288>
                    else
#endif
                        clst = create_chain(fp->fs, fp->clust); /* Follow or stretch cluster chain on the FAT */
                }
                if (clst == 0) break;       /* Could not allocate a new cluster (disk full) */
                if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    823e:	2801      	cmp	r0, #1
    8240:	f000 8110 	beq.w	8464 <f_write+0x2c8>
                if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    8244:	1c46      	adds	r6, r0, #1
    8246:	f000 80dc 	beq.w	8402 <f_write+0x266>
    824a:	682b      	ldr	r3, [r5, #0]
                fp->clust = clst;           /* Update current cluster */
    824c:	6168      	str	r0, [r5, #20]
            }
#if _FS_TINY
            if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0)) /* Write-back sector cache */
                ABORT(fp->fs, FR_DISK_ERR);
#else
            if (fp->flag & FA__DIRTY) {     /* Write-back sector cache */
    824e:	79a9      	ldrb	r1, [r5, #6]
    8250:	064c      	lsls	r4, r1, #25
    8252:	f100 80be 	bmi.w	83d2 <f_write+0x236>
DWORD clust2sect (  /* !=0: Sector number, 0: Failed - invalid cluster# */
    FATFS *fs,      /* File system object */
    DWORD clst      /* Cluster# to be converted */
)
{
    clst -= 2;
    8256:	696a      	ldr	r2, [r5, #20]
    if (clst >= (fs->n_fatent - 2)) return 0;       /* Invalid cluster# */
    8258:	69d8      	ldr	r0, [r3, #28]
DWORD clust2sect (  /* !=0: Sector number, 0: Failed - invalid cluster# */
    FATFS *fs,      /* File system object */
    DWORD clst      /* Cluster# to be converted */
)
{
    clst -= 2;
    825a:	f1a2 0902 	sub.w	r9, r2, #2
    if (clst >= (fs->n_fatent - 2)) return 0;       /* Invalid cluster# */
    825e:	3802      	subs	r0, #2
    8260:	4581      	cmp	r9, r0
    8262:	f080 80ef 	bcs.w	8444 <f_write+0x2a8>
    return clst * fs->csize + fs->database;
    8266:	789a      	ldrb	r2, [r3, #2]
    8268:	f8d3 c02c 	ldr.w	ip, [r3, #44]	; 0x2c
    826c:	fb09 f902 	mul.w	r9, r9, r2
                    ABORT(fp->fs, FR_DISK_ERR);
                fp->flag &= ~FA__DIRTY;
            }
#endif
            sect = clust2sect(fp->fs, fp->clust);   /* Get current sector */
            if (!sect) ABORT(fp->fs, FR_INT_ERR);
    8270:	eb19 060c 	adds.w	r6, r9, ip
    8274:	f000 80e6 	beq.w	8444 <f_write+0x2a8>
            sect += csect;
            cc = btw / SS(fp->fs);          /* When remaining bytes >= sector size, */
            if (cc) {                       /* Write maximum contiguous sectors directly */
    8278:	0a7c      	lsrs	r4, r7, #9
                fp->flag &= ~FA__DIRTY;
            }
#endif
            sect = clust2sect(fp->fs, fp->clust);   /* Get current sector */
            if (!sect) ABORT(fp->fs, FR_INT_ERR);
            sect += csect;
    827a:	4446      	add	r6, r8
            cc = btw / SS(fp->fs);          /* When remaining bytes >= sector size, */
            if (cc) {                       /* Write maximum contiguous sectors directly */
    827c:	d053      	beq.n	8326 <f_write+0x18a>
                if (csect + cc > fp->fs->csize) /* Clip at cluster boundary */
    827e:	eb08 0104 	add.w	r1, r8, r4
    8282:	4291      	cmp	r1, r2
                    cc = fp->fs->csize - csect;
    8284:	bfc4      	itt	gt
    8286:	ebc8 0202 	rsbgt	r2, r8, r2
    828a:	b294      	uxthgt	r4, r2
                if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    828c:	7858      	ldrb	r0, [r3, #1]
    828e:	f8cd c000 	str.w	ip, [sp]
    8292:	4651      	mov	r1, sl
    8294:	4632      	mov	r2, r6
    8296:	b2e3      	uxtb	r3, r4
    8298:	f7fa ffce 	bl	3238 <disk_write>
    829c:	f8dd c000 	ldr.w	ip, [sp]
    82a0:	2800      	cmp	r0, #0
    82a2:	f040 80ae 	bne.w	8402 <f_write+0x266>
                if (fp->fs->winsect - sect < cc) {  /* Refill sector cache if it gets invalidated by the direct write */
                    mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
                    fp->fs->wflag = 0;
                }
#else
                if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
    82a6:	69ab      	ldr	r3, [r5, #24]
    82a8:	1b9e      	subs	r6, r3, r6
    82aa:	42a6      	cmp	r6, r4
    82ac:	d228      	bcs.n	8300 <f_write+0x164>
    82ae:	ebcc 0103 	rsb	r1, ip, r3
    82b2:	ebc9 0101 	rsb	r1, r9, r1
    82b6:	ebc8 0101 	rsb	r1, r8, r1
    82ba:	9b01      	ldr	r3, [sp, #4]
    82bc:	0249      	lsls	r1, r1, #9
    82be:	eb0a 0201 	add.w	r2, sl, r1
    82c2:	ea42 0003 	orr.w	r0, r2, r3
    82c6:	0780      	lsls	r0, r0, #30
                    mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
    82c8:	eb0a 2346 	add.w	r3, sl, r6, lsl #9
    82cc:	f040 80bf 	bne.w	844e <f_write+0x2b2>
    82d0:	3104      	adds	r1, #4
    82d2:	9e01      	ldr	r6, [sp, #4]
    82d4:	4451      	add	r1, sl
    82d6:	f105 0028 	add.w	r0, r5, #40	; 0x28
    82da:	4282      	cmp	r2, r0
    82dc:	bf38      	it	cc
    82de:	428e      	cmpcc	r6, r1
    82e0:	f0c0 80b5 	bcc.w	844e <f_write+0x2b2>
    82e4:	3a04      	subs	r2, #4
    82e6:	f505 7009 	add.w	r0, r5, #548	; 0x224
    82ea:	4633      	mov	r3, r6
        d += sizeof(int); s += sizeof(int);
        cnt -= sizeof(int);
    }
#endif
    while (cnt--)
        *d++ = *s++;
    82ec:	f852 1f04 	ldr.w	r1, [r2, #4]!
    82f0:	f843 1b04 	str.w	r1, [r3], #4
    82f4:	4283      	cmp	r3, r0
    82f6:	d1f9      	bne.n	82ec <f_write+0x150>
                    fp->fs->wflag = 0;
                }
#else
                if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
                    mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
                    fp->flag &= ~FA__DIRTY;
    82f8:	79ab      	ldrb	r3, [r5, #6]
    82fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    82fe:	71ab      	strb	r3, [r5, #6]
                }
#endif
                wcnt = SS(fp->fs) * cc;     /* Number of bytes transferred */
    8300:	0263      	lsls	r3, r4, #9
    8302:	68aa      	ldr	r2, [r5, #8]
    8304:	b29b      	uxth	r3, r3
    if (!(fp->flag & FA_WRITE))             /* Check access mode */
        LEAVE_FF(fp->fs, FR_DENIED);
    if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;  /* File size cannot reach 4GB */

    for ( ;  btw;                           /* Repeat until all data written */
        wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    8306:	f8bb 1000 	ldrh.w	r1, [fp]
    830a:	1aff      	subs	r7, r7, r3
    830c:	441a      	add	r2, r3
    830e:	4419      	add	r1, r3
    8310:	b2bf      	uxth	r7, r7
    8312:	60aa      	str	r2, [r5, #8]
    8314:	449a      	add	sl, r3
    8316:	f8ab 1000 	strh.w	r1, [fp]
        LEAVE_FF(fp->fs, FR_INT_ERR);
    if (!(fp->flag & FA_WRITE))             /* Check access mode */
        LEAVE_FF(fp->fs, FR_DENIED);
    if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;  /* File size cannot reach 4GB */

    for ( ;  btw;                           /* Repeat until all data written */
    831a:	2f00      	cmp	r7, #0
    831c:	f47f af79 	bne.w	8212 <f_write+0x76>
    8320:	68e9      	ldr	r1, [r5, #12]
    8322:	79ab      	ldrb	r3, [r5, #6]
    8324:	e766      	b.n	81f4 <f_write+0x58>
            if (fp->fptr >= fp->fsize) {    /* Avoid silly cache filling at growing edge */
                if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
                fp->fs->winsect = sect;
            }
#else
            if (fp->dsect != sect) {        /* Fill sector cache with file data */
    8326:	69aa      	ldr	r2, [r5, #24]
    8328:	4296      	cmp	r6, r2
                if (fp->fptr < fp->fsize &&
    832a:	68aa      	ldr	r2, [r5, #8]
            if (fp->fptr >= fp->fsize) {    /* Avoid silly cache filling at growing edge */
                if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
                fp->fs->winsect = sect;
            }
#else
            if (fp->dsect != sect) {        /* Fill sector cache with file data */
    832c:	d002      	beq.n	8334 <f_write+0x198>
                if (fp->fptr < fp->fsize &&
    832e:	68e9      	ldr	r1, [r5, #12]
    8330:	428a      	cmp	r2, r1
    8332:	d37d      	bcc.n	8430 <f_write+0x294>
                    disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
                        ABORT(fp->fs, FR_DISK_ERR);
            }
#endif
            fp->dsect = sect;
    8334:	61ae      	str	r6, [r5, #24]
    8336:	f3c2 0308 	ubfx	r3, r2, #0, #9
        if (move_window(fp->fs, fp->dsect)) /* Move sector window */
            ABORT(fp->fs, FR_DISK_ERR);
        mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);  /* Fit partial sector */
        fp->fs->wflag = 1;
#else
        mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);  /* Fit partial sector */
    833a:	18ea      	adds	r2, r5, r3
                        ABORT(fp->fs, FR_DISK_ERR);
            }
#endif
            fp->dsect = sect;
        }
        wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    833c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
        if (move_window(fp->fs, fp->dsect)) /* Move sector window */
            ABORT(fp->fs, FR_DISK_ERR);
        mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);  /* Fit partial sector */
        fp->fs->wflag = 1;
#else
        mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);  /* Fit partial sector */
    8340:	3224      	adds	r2, #36	; 0x24
                        ABORT(fp->fs, FR_DISK_ERR);
            }
#endif
            fp->dsect = sect;
        }
        wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    8342:	b29b      	uxth	r3, r3
    8344:	ea4a 0102 	orr.w	r1, sl, r2
    8348:	42bb      	cmp	r3, r7
    834a:	f10a 0004 	add.w	r0, sl, #4
    834e:	bf28      	it	cs
    8350:	463b      	movcs	r3, r7
    8352:	1d16      	adds	r6, r2, #4
    8354:	f011 0f03 	tst.w	r1, #3
    8358:	bf0c      	ite	eq
    835a:	2401      	moveq	r4, #1
    835c:	2400      	movne	r4, #0
    835e:	45b2      	cmp	sl, r6
    8360:	bf38      	it	cc
    8362:	4282      	cmpcc	r2, r0
    8364:	bf2c      	ite	cs
    8366:	2001      	movcs	r0, #1
    8368:	2000      	movcc	r0, #0
        *(int*)d = *(int*)s;
        d += sizeof(int); s += sizeof(int);
        cnt -= sizeof(int);
    }
#endif
    while (cnt--)
    836a:	1e59      	subs	r1, r3, #1
    836c:	4204      	tst	r4, r0
    836e:	b289      	uxth	r1, r1
    8370:	d03c      	beq.n	83ec <f_write+0x250>
    8372:	2b09      	cmp	r3, #9
    8374:	d93a      	bls.n	83ec <f_write+0x250>
    8376:	1f18      	subs	r0, r3, #4
    8378:	f3c0 008d 	ubfx	r0, r0, #2, #14
    837c:	3001      	adds	r0, #1
    837e:	0084      	lsls	r4, r0, #2
    8380:	2902      	cmp	r1, #2
    8382:	b2a4      	uxth	r4, r4
    8384:	d923      	bls.n	83ce <f_write+0x232>
    8386:	f1aa 0c04 	sub.w	ip, sl, #4
    838a:	4696      	mov	lr, r2
    838c:	2600      	movs	r6, #0
    838e:	4681      	mov	r9, r0
    8390:	3601      	adds	r6, #1
    8392:	fa1f f886 	uxth.w	r8, r6
        *d++ = *s++;
    8396:	f85c 0f04 	ldr.w	r0, [ip, #4]!
    839a:	f84e 0b04 	str.w	r0, [lr], #4
    839e:	45c1      	cmp	r9, r8
    83a0:	d8f6      	bhi.n	8390 <f_write+0x1f4>
    83a2:	1b09      	subs	r1, r1, r4
    83a4:	42a3      	cmp	r3, r4
    83a6:	b289      	uxth	r1, r1
    83a8:	4422      	add	r2, r4
    83aa:	eb0a 0004 	add.w	r0, sl, r4
    83ae:	d008      	beq.n	83c2 <f_write+0x226>
    83b0:	7804      	ldrb	r4, [r0, #0]
    83b2:	7014      	strb	r4, [r2, #0]
        *(int*)d = *(int*)s;
        d += sizeof(int); s += sizeof(int);
        cnt -= sizeof(int);
    }
#endif
    while (cnt--)
    83b4:	b129      	cbz	r1, 83c2 <f_write+0x226>
        *d++ = *s++;
    83b6:	7844      	ldrb	r4, [r0, #1]
    83b8:	7054      	strb	r4, [r2, #1]
        *(int*)d = *(int*)s;
        d += sizeof(int); s += sizeof(int);
        cnt -= sizeof(int);
    }
#endif
    while (cnt--)
    83ba:	2901      	cmp	r1, #1
    83bc:	d001      	beq.n	83c2 <f_write+0x226>
        *d++ = *s++;
    83be:	7881      	ldrb	r1, [r0, #2]
    83c0:	7091      	strb	r1, [r2, #2]
            ABORT(fp->fs, FR_DISK_ERR);
        mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);  /* Fit partial sector */
        fp->fs->wflag = 1;
#else
        mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);  /* Fit partial sector */
        fp->flag |= FA__DIRTY;
    83c2:	79a9      	ldrb	r1, [r5, #6]
    83c4:	68aa      	ldr	r2, [r5, #8]
    83c6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    83ca:	71a9      	strb	r1, [r5, #6]
    83cc:	e79b      	b.n	8306 <f_write+0x16a>
        *(int*)d = *(int*)s;
        d += sizeof(int); s += sizeof(int);
        cnt -= sizeof(int);
    }
#endif
    while (cnt--)
    83ce:	4650      	mov	r0, sl
    83d0:	e7ee      	b.n	83b0 <f_write+0x214>
#if _FS_TINY
            if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0)) /* Write-back sector cache */
                ABORT(fp->fs, FR_DISK_ERR);
#else
            if (fp->flag & FA__DIRTY) {     /* Write-back sector cache */
                if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    83d2:	7858      	ldrb	r0, [r3, #1]
    83d4:	69aa      	ldr	r2, [r5, #24]
    83d6:	9901      	ldr	r1, [sp, #4]
    83d8:	2301      	movs	r3, #1
    83da:	f7fa ff2d 	bl	3238 <disk_write>
    83de:	b980      	cbnz	r0, 8402 <f_write+0x266>
                    ABORT(fp->fs, FR_DISK_ERR);
                fp->flag &= ~FA__DIRTY;
    83e0:	79a9      	ldrb	r1, [r5, #6]
    83e2:	682b      	ldr	r3, [r5, #0]
    83e4:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
    83e8:	71a9      	strb	r1, [r5, #6]
    83ea:	e734      	b.n	8256 <f_write+0xba>
    83ec:	3a01      	subs	r2, #1
    83ee:	4451      	add	r1, sl
    83f0:	f10a 30ff 	add.w	r0, sl, #4294967295
        d += sizeof(int); s += sizeof(int);
        cnt -= sizeof(int);
    }
#endif
    while (cnt--)
        *d++ = *s++;
    83f4:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    83f8:	f802 4f01 	strb.w	r4, [r2, #1]!
        *(int*)d = *(int*)s;
        d += sizeof(int); s += sizeof(int);
        cnt -= sizeof(int);
    }
#endif
    while (cnt--)
    83fc:	4288      	cmp	r0, r1
    83fe:	d1f9      	bne.n	83f4 <f_write+0x258>
    8400:	e7df      	b.n	83c2 <f_write+0x226>
            }
#else
            if (fp->dsect != sect) {        /* Fill sector cache with file data */
                if (fp->fptr < fp->fsize &&
                    disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
                        ABORT(fp->fs, FR_DISK_ERR);
    8402:	79ab      	ldrb	r3, [r5, #6]
    8404:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8408:	71ab      	strb	r3, [r5, #6]
    840a:	2001      	movs	r0, #1
    840c:	e6d6      	b.n	81bc <f_write+0x20>
#if _USE_FASTSEEK
                    if (fp->cltbl)
                        clst = clmt_clust(fp, fp->fptr);    /* Get cluster# from the CLMT */
                    else
#endif
                        clst = create_chain(fp->fs, fp->clust); /* Follow or stretch cluster chain on the FAT */
    840e:	4618      	mov	r0, r3
    8410:	6969      	ldr	r1, [r5, #20]
    8412:	f7fe f9bd 	bl	6790 <create_chain>
                }
                if (clst == 0) break;       /* Could not allocate a new cluster (disk full) */
    8416:	2800      	cmp	r0, #0
    8418:	f47f af11 	bne.w	823e <f_write+0xa2>
    841c:	68aa      	ldr	r2, [r5, #8]
    841e:	68e9      	ldr	r1, [r5, #12]
    8420:	79ab      	ldrb	r3, [r5, #6]
    8422:	e6e7      	b.n	81f4 <f_write+0x58>
            csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));    /* Sector offset in the cluster */
            if (!csect) {                   /* On the cluster boundary? */
                if (fp->fptr == 0) {        /* On the top of the file? */
                    clst = fp->sclust;      /* Follow from the origin */
                    if (clst == 0)          /* When no cluster is allocated, */
                        fp->sclust = clst = create_chain(fp->fs, 0);    /* Create a new cluster chain */
    8424:	4618      	mov	r0, r3
    8426:	4641      	mov	r1, r8
    8428:	f7fe f9b2 	bl	6790 <create_chain>
    842c:	6128      	str	r0, [r5, #16]
    842e:	e7f2      	b.n	8416 <f_write+0x27a>
                fp->fs->winsect = sect;
            }
#else
            if (fp->dsect != sect) {        /* Fill sector cache with file data */
                if (fp->fptr < fp->fsize &&
                    disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
    8430:	7858      	ldrb	r0, [r3, #1]
    8432:	9901      	ldr	r1, [sp, #4]
    8434:	4632      	mov	r2, r6
    8436:	2301      	movs	r3, #1
    8438:	f7fa feb0 	bl	319c <disk_read>
                if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
                fp->fs->winsect = sect;
            }
#else
            if (fp->dsect != sect) {        /* Fill sector cache with file data */
                if (fp->fptr < fp->fsize &&
    843c:	2800      	cmp	r0, #0
    843e:	d1e0      	bne.n	8402 <f_write+0x266>
    8440:	68aa      	ldr	r2, [r5, #8]
    8442:	e777      	b.n	8334 <f_write+0x198>
                    ABORT(fp->fs, FR_DISK_ERR);
                fp->flag &= ~FA__DIRTY;
            }
#endif
            sect = clust2sect(fp->fs, fp->clust);   /* Get current sector */
            if (!sect) ABORT(fp->fs, FR_INT_ERR);
    8444:	f061 017f 	orn	r1, r1, #127	; 0x7f
    8448:	71a9      	strb	r1, [r5, #6]
    844a:	2002      	movs	r0, #2
    844c:	e6b6      	b.n	81bc <f_write+0x20>
    844e:	f105 0223 	add.w	r2, r5, #35	; 0x23
    8452:	f503 7000 	add.w	r0, r3, #512	; 0x200
        d += sizeof(int); s += sizeof(int);
        cnt -= sizeof(int);
    }
#endif
    while (cnt--)
        *d++ = *s++;
    8456:	f813 1b01 	ldrb.w	r1, [r3], #1
    845a:	f802 1f01 	strb.w	r1, [r2, #1]!
        *(int*)d = *(int*)s;
        d += sizeof(int); s += sizeof(int);
        cnt -= sizeof(int);
    }
#endif
    while (cnt--)
    845e:	4283      	cmp	r3, r0
    8460:	d1f9      	bne.n	8456 <f_write+0x2ba>
    8462:	e749      	b.n	82f8 <f_write+0x15c>
                    else
#endif
                        clst = create_chain(fp->fs, fp->clust); /* Follow or stretch cluster chain on the FAT */
                }
                if (clst == 0) break;       /* Could not allocate a new cluster (disk full) */
                if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    8464:	79ab      	ldrb	r3, [r5, #6]
    8466:	f063 037f 	orn	r3, r3, #127	; 0x7f
    846a:	71ab      	strb	r3, [r5, #6]
    846c:	2002      	movs	r0, #2
    846e:	e6a5      	b.n	81bc <f_write+0x20>
    *bw = 0;    /* Initialize byte counter */

    res = validate(fp->fs, fp->id);         /* Check validity */
    if (res != FR_OK) LEAVE_FF(fp->fs, res);
    if (fp->flag & FA__ERROR)               /* Aborted file? */
        LEAVE_FF(fp->fs, FR_INT_ERR);
    8470:	2002      	movs	r0, #2
    8472:	e6a3      	b.n	81bc <f_write+0x20>

00008474 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
    FIL *fp     /* Pointer to the file object to be closed */
)
{
    8474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    FRESULT res;
    DWORD tim;
    BYTE *dir;


    res = validate(fp->fs, fp->id);     /* Check validity of the object */
    8478:	6803      	ldr	r3, [r0, #0]
    847a:	8881      	ldrh	r1, [r0, #4]
FRESULT validate (  /* FR_OK(0): The object is valid, !=0: Invalid */
    FATFS *fs,      /* Pointer to the file system object */
    WORD id         /* Member id of the target object to be checked */
)
{
    if (!fs || !fs->fs_type || fs->id != id)
    847c:	b10b      	cbz	r3, 8482 <f_close+0xe>
    847e:	781a      	ldrb	r2, [r3, #0]
    8480:	b912      	cbnz	r2, 8488 <f_close+0x14>
        return FR_INVALID_OBJECT;
    8482:	2009      	movs	r0, #9
    8484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
FRESULT validate (  /* FR_OK(0): The object is valid, !=0: Invalid */
    FATFS *fs,      /* Pointer to the file system object */
    WORD id         /* Member id of the target object to be checked */
)
{
    if (!fs || !fs->fs_type || fs->id != id)
    8488:	88da      	ldrh	r2, [r3, #6]
    848a:	428a      	cmp	r2, r1
    848c:	d1f9      	bne.n	8482 <f_close+0xe>
    848e:	4604      	mov	r4, r0
        return FR_INVALID_OBJECT;

    ENTER_FF(fs);       /* Lock file system */

    if (disk_status(fs->drv) & STA_NOINIT)
    8490:	7858      	ldrb	r0, [r3, #1]
    8492:	f7fa fe7b 	bl	318c <disk_status>
    8496:	07c0      	lsls	r0, r0, #31
    8498:	d502      	bpl.n	84a0 <f_close+0x2c>
        return FR_NOT_READY;
    849a:	2003      	movs	r0, #3
    849c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    BYTE *dir;


    res = validate(fp->fs, fp->id);     /* Check validity of the object */
    if (res == FR_OK) {
        if (fp->flag & FA__WRITTEN) {   /* Has the file been written? */
    84a0:	79a3      	ldrb	r3, [r4, #6]
    84a2:	069a      	lsls	r2, r3, #26
    84a4:	d403      	bmi.n	84ae <f_close+0x3a>
#else
        res = dec_lock(fp->lockid);
#endif
    }
#endif
    if (res == FR_OK) fp->fs = 0;   /* Discard file object */
    84a6:	2000      	movs	r0, #0
    84a8:	6020      	str	r0, [r4, #0]
    84aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

    res = validate(fp->fs, fp->id);     /* Check validity of the object */
    if (res == FR_OK) {
        if (fp->flag & FA__WRITTEN) {   /* Has the file been written? */
#if !_FS_TINY   /* Write-back dirty buffer */
            if (fp->flag & FA__DIRTY) {
    84ae:	0659      	lsls	r1, r3, #25
    84b0:	d50d      	bpl.n	84ce <f_close+0x5a>
                if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    84b2:	4621      	mov	r1, r4
    84b4:	69a2      	ldr	r2, [r4, #24]
    84b6:	f851 0b24 	ldr.w	r0, [r1], #36
    84ba:	2301      	movs	r3, #1
    84bc:	7840      	ldrb	r0, [r0, #1]
    84be:	f7fa febb 	bl	3238 <disk_write>
    84c2:	2800      	cmp	r0, #0
    84c4:	d15f      	bne.n	8586 <f_close+0x112>
                    LEAVE_FF(fp->fs, FR_DISK_ERR);
                fp->flag &= ~FA__DIRTY;
    84c6:	79a3      	ldrb	r3, [r4, #6]
    84c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    84cc:	71a3      	strb	r3, [r4, #6]
            }
#endif
            /* Update the directory entry */
            res = move_window(fp->fs, fp->dir_sect);
    84ce:	6825      	ldr	r5, [r4, #0]
    84d0:	f8d4 801c 	ldr.w	r8, [r4, #28]
)                   /* Move to zero only writes back dirty window */
{
    DWORD wsect;


    wsect = fs->winsect;
    84d4:	6b2e      	ldr	r6, [r5, #48]	; 0x30
    if (wsect != sector) {  /* Changed current window */
    84d6:	45b0      	cmp	r8, r6
    84d8:	d005      	beq.n	84e6 <f_close+0x72>
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
    84da:	792b      	ldrb	r3, [r5, #4]
    84dc:	2b00      	cmp	r3, #0
    84de:	d132      	bne.n	8546 <f_close+0xd2>
                    disk_write(fs->drv, fs->win, wsect, 1);
                }
            }
        }
#endif
        if (sector) {
    84e0:	f1b8 0f00 	cmp.w	r8, #0
    84e4:	d152      	bne.n	858c <f_close+0x118>
            }
#endif
            /* Update the directory entry */
            res = move_window(fp->fs, fp->dir_sect);
            if (res == FR_OK) {
                dir = fp->dir_ptr;
    84e6:	6a25      	ldr	r5, [r4, #32]
                dir[DIR_Attr] |= AM_ARC;                    /* Set archive bit */
    84e8:	7aeb      	ldrb	r3, [r5, #11]
    84ea:	f043 0320 	orr.w	r3, r3, #32
    84ee:	72eb      	strb	r3, [r5, #11]
                ST_DWORD(dir+DIR_FileSize, fp->fsize);      /* Update file size */
    84f0:	68e3      	ldr	r3, [r4, #12]
    84f2:	772b      	strb	r3, [r5, #28]
    84f4:	89a3      	ldrh	r3, [r4, #12]
    84f6:	0a1b      	lsrs	r3, r3, #8
    84f8:	776b      	strb	r3, [r5, #29]
    84fa:	89e3      	ldrh	r3, [r4, #14]
    84fc:	77ab      	strb	r3, [r5, #30]
    84fe:	7be3      	ldrb	r3, [r4, #15]
    8500:	77eb      	strb	r3, [r5, #31]
                ST_CLUST(dir, fp->sclust);                  /* Update start cluster */
    8502:	6923      	ldr	r3, [r4, #16]
    8504:	76ab      	strb	r3, [r5, #26]
    8506:	8a23      	ldrh	r3, [r4, #16]
    8508:	0a1b      	lsrs	r3, r3, #8
    850a:	76eb      	strb	r3, [r5, #27]
    850c:	8a63      	ldrh	r3, [r4, #18]
    850e:	752b      	strb	r3, [r5, #20]
    8510:	8a63      	ldrh	r3, [r4, #18]
    8512:	0a1b      	lsrs	r3, r3, #8
    8514:	756b      	strb	r3, [r5, #21]
                tim = get_fattime();                        /* Update updated time */
    8516:	f7fa fc3b 	bl	2d90 <get_fattime>
                ST_DWORD(dir+DIR_WrtTime, tim);
    851a:	f3c0 2107 	ubfx	r1, r0, #8, #8
    851e:	0c02      	lsrs	r2, r0, #16
    8520:	0e03      	lsrs	r3, r0, #24
    8522:	75e9      	strb	r1, [r5, #23]
    8524:	75a8      	strb	r0, [r5, #22]
    8526:	762a      	strb	r2, [r5, #24]
    8528:	766b      	strb	r3, [r5, #25]
                fp->flag &= ~FA__WRITTEN;
    852a:	79a3      	ldrb	r3, [r4, #6]
                fp->fs->wflag = 1;
    852c:	6822      	ldr	r2, [r4, #0]
                dir[DIR_Attr] |= AM_ARC;                    /* Set archive bit */
                ST_DWORD(dir+DIR_FileSize, fp->fsize);      /* Update file size */
                ST_CLUST(dir, fp->sclust);                  /* Update start cluster */
                tim = get_fattime();                        /* Update updated time */
                ST_DWORD(dir+DIR_WrtTime, tim);
                fp->flag &= ~FA__WRITTEN;
    852e:	f023 0320 	bic.w	r3, r3, #32
                fp->fs->wflag = 1;
    8532:	2101      	movs	r1, #1
                dir[DIR_Attr] |= AM_ARC;                    /* Set archive bit */
                ST_DWORD(dir+DIR_FileSize, fp->fsize);      /* Update file size */
                ST_CLUST(dir, fp->sclust);                  /* Update start cluster */
                tim = get_fattime();                        /* Update updated time */
                ST_DWORD(dir+DIR_WrtTime, tim);
                fp->flag &= ~FA__WRITTEN;
    8534:	71a3      	strb	r3, [r4, #6]
                fp->fs->wflag = 1;
    8536:	7111      	strb	r1, [r2, #4]
                res = sync(fp->fs);
    8538:	6820      	ldr	r0, [r4, #0]
    853a:	f7fd fc2b 	bl	5d94 <sync>
#else
        res = dec_lock(fp->lockid);
#endif
    }
#endif
    if (res == FR_OK) fp->fs = 0;   /* Discard file object */
    853e:	2800      	cmp	r0, #0
    8540:	d0b1      	beq.n	84a6 <f_close+0x32>
    8542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

    wsect = fs->winsect;
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    8546:	f105 0934 	add.w	r9, r5, #52	; 0x34
    854a:	4649      	mov	r1, r9
    854c:	7868      	ldrb	r0, [r5, #1]
    854e:	4632      	mov	r2, r6
    8550:	2301      	movs	r3, #1
    8552:	f7fa fe71 	bl	3238 <disk_write>
    8556:	b9b0      	cbnz	r0, 8586 <f_close+0x112>
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    8558:	6a2b      	ldr	r3, [r5, #32]
    855a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    if (wsect != sector) {  /* Changed current window */
#if !_FS_READONLY
        if (fs->wflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
    855c:	7128      	strb	r0, [r5, #4]
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
    855e:	441a      	add	r2, r3
    8560:	4296      	cmp	r6, r2
    8562:	d2bd      	bcs.n	84e0 <f_close+0x6c>
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    8564:	78ef      	ldrb	r7, [r5, #3]
    8566:	2f01      	cmp	r7, #1
    8568:	d801      	bhi.n	856e <f_close+0xfa>
    856a:	e7b9      	b.n	84e0 <f_close+0x6c>
    856c:	6a2b      	ldr	r3, [r5, #32]
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    856e:	7868      	ldrb	r0, [r5, #1]
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
                    wsect += fs->fsize;
    8570:	441e      	add	r6, r3
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    8572:	3f01      	subs	r7, #1
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    8574:	4632      	mov	r2, r6
    8576:	4649      	mov	r1, r9
    8578:	2301      	movs	r3, #1
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    857a:	b2ff      	uxtb	r7, r7
                    wsect += fs->fsize;
                    disk_write(fs->drv, fs->win, wsect, 1);
    857c:	f7fa fe5c 	bl	3238 <disk_write>
            if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
                return FR_DISK_ERR;
            fs->wflag = 0;
            if (wsect < (fs->fatbase + fs->fsize)) {    /* In FAT area */
                BYTE nf;
                for (nf = fs->n_fats; nf > 1; nf--) {   /* Reflect the change to all FAT copies */
    8580:	2f01      	cmp	r7, #1
    8582:	d1f3      	bne.n	856c <f_close+0xf8>
    8584:	e7ac      	b.n	84e0 <f_close+0x6c>
    if (res == FR_OK) {
        if (fp->flag & FA__WRITTEN) {   /* Has the file been written? */
#if !_FS_TINY   /* Write-back dirty buffer */
            if (fp->flag & FA__DIRTY) {
                if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
                    LEAVE_FF(fp->fs, FR_DISK_ERR);
    8586:	2001      	movs	r0, #1
    }
#endif
    if (res == FR_OK) fp->fs = 0;   /* Discard file object */
    return res;
#endif
}
    8588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                }
            }
        }
#endif
        if (sector) {
            if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    858c:	7868      	ldrb	r0, [r5, #1]
    858e:	f105 0134 	add.w	r1, r5, #52	; 0x34
    8592:	4642      	mov	r2, r8
    8594:	2301      	movs	r3, #1
    8596:	f7fa fe01 	bl	319c <disk_read>
    859a:	2800      	cmp	r0, #0
    859c:	d1f3      	bne.n	8586 <f_close+0x112>
                return FR_DISK_ERR;
            fs->winsect = sector;
    859e:	f8c5 8030 	str.w	r8, [r5, #48]	; 0x30
    85a2:	e7a0      	b.n	84e6 <f_close+0x72>

000085a4 <f_lseek>:
)
{
    FRESULT res;


    res = validate(fp->fs, fp->id);     /* Check validity of the object */
    85a4:	6803      	ldr	r3, [r0, #0]

FRESULT f_lseek (
    FIL *fp,        /* Pointer to the file object */
    DWORD ofs       /* File pointer from top of file */
)
{
    85a6:	b570      	push	{r4, r5, r6, lr}
    85a8:	460d      	mov	r5, r1
    85aa:	4604      	mov	r4, r0
    FRESULT res;


    res = validate(fp->fs, fp->id);     /* Check validity of the object */
    85ac:	8881      	ldrh	r1, [r0, #4]
FRESULT validate (  /* FR_OK(0): The object is valid, !=0: Invalid */
    FATFS *fs,      /* Pointer to the file system object */
    WORD id         /* Member id of the target object to be checked */
)
{
    if (!fs || !fs->fs_type || fs->id != id)
    85ae:	b10b      	cbz	r3, 85b4 <f_lseek+0x10>
    85b0:	781a      	ldrb	r2, [r3, #0]
    85b2:	b90a      	cbnz	r2, 85b8 <f_lseek+0x14>
        return FR_INVALID_OBJECT;
    85b4:	2009      	movs	r0, #9
    85b6:	bd70      	pop	{r4, r5, r6, pc}
FRESULT validate (  /* FR_OK(0): The object is valid, !=0: Invalid */
    FATFS *fs,      /* Pointer to the file system object */
    WORD id         /* Member id of the target object to be checked */
)
{
    if (!fs || !fs->fs_type || fs->id != id)
    85b8:	88da      	ldrh	r2, [r3, #6]
    85ba:	428a      	cmp	r2, r1
    85bc:	d1fa      	bne.n	85b4 <f_lseek+0x10>
        return FR_INVALID_OBJECT;

    ENTER_FF(fs);       /* Lock file system */

    if (disk_status(fs->drv) & STA_NOINIT)
    85be:	7858      	ldrb	r0, [r3, #1]
    85c0:	f7fa fde4 	bl	318c <disk_status>
    85c4:	07c6      	lsls	r6, r0, #31
    85c6:	d501      	bpl.n	85cc <f_lseek+0x28>
        return FR_NOT_READY;
    85c8:	2003      	movs	r0, #3
        }
#endif
    }

    LEAVE_FF(fp->fs, res);
}
    85ca:	bd70      	pop	{r4, r5, r6, pc}
    FRESULT res;


    res = validate(fp->fs, fp->id);     /* Check validity of the object */
    if (res != FR_OK) LEAVE_FF(fp->fs, res);
    if (fp->flag & FA__ERROR)           /* Check abort flag */
    85cc:	79a2      	ldrb	r2, [r4, #6]
    85ce:	0613      	lsls	r3, r2, #24
    85d0:	d45a      	bmi.n	8688 <f_lseek+0xe4>

    /* Normal Seek */
    {
        DWORD clst, bcs, nsect, ifptr;

        if (ofs > fp->fsize                 /* In read-only mode, clip offset with the file size */
    85d2:	68e3      	ldr	r3, [r4, #12]
    85d4:	42ab      	cmp	r3, r5
    85d6:	d203      	bcs.n	85e0 <f_lseek+0x3c>
#if !_FS_READONLY
             && !(fp->flag & FA_WRITE)
    85d8:	f012 0f02 	tst.w	r2, #2
    85dc:	bf08      	it	eq
    85de:	461d      	moveq	r5, r3
#endif
            ) ofs = fp->fsize;

        ifptr = fp->fptr;
        fp->fptr = nsect = 0;
    85e0:	2200      	movs	r2, #0
#if !_FS_READONLY
             && !(fp->flag & FA_WRITE)
#endif
            ) ofs = fp->fsize;

        ifptr = fp->fptr;
    85e2:	68a3      	ldr	r3, [r4, #8]
        fp->fptr = nsect = 0;
    85e4:	60a2      	str	r2, [r4, #8]
        if (ofs) {
    85e6:	2d00      	cmp	r5, #0
    85e8:	d037      	beq.n	865a <f_lseek+0xb6>
            bcs = (DWORD)fp->fs->csize * SS(fp->fs);    /* Cluster size (byte) */
    85ea:	6820      	ldr	r0, [r4, #0]
    85ec:	7886      	ldrb	r6, [r0, #2]
    85ee:	0276      	lsls	r6, r6, #9
            if (ifptr > 0 &&
    85f0:	2b00      	cmp	r3, #0
    85f2:	d034      	beq.n	865e <f_lseek+0xba>
                (ofs - 1) / bcs >= (ifptr - 1) / bcs) { /* When seek to same or following cluster, */
    85f4:	3b01      	subs	r3, #1
    85f6:	1e6a      	subs	r2, r5, #1
    85f8:	fbb3 f1f6 	udiv	r1, r3, r6
    85fc:	fbb2 f2f6 	udiv	r2, r2, r6

        ifptr = fp->fptr;
        fp->fptr = nsect = 0;
        if (ofs) {
            bcs = (DWORD)fp->fs->csize * SS(fp->fs);    /* Cluster size (byte) */
            if (ifptr > 0 &&
    8600:	428a      	cmp	r2, r1
    8602:	d32c      	bcc.n	865e <f_lseek+0xba>
                (ofs - 1) / bcs >= (ifptr - 1) / bcs) { /* When seek to same or following cluster, */
                fp->fptr = (ifptr - 1) & ~(bcs - 1);    /* start from the current cluster */
    8604:	4272      	negs	r2, r6
    8606:	4013      	ands	r3, r2
                ofs -= fp->fptr;
                clst = fp->clust;
    8608:	6961      	ldr	r1, [r4, #20]
        fp->fptr = nsect = 0;
        if (ofs) {
            bcs = (DWORD)fp->fs->csize * SS(fp->fs);    /* Cluster size (byte) */
            if (ifptr > 0 &&
                (ofs - 1) / bcs >= (ifptr - 1) / bcs) { /* When seek to same or following cluster, */
                fp->fptr = (ifptr - 1) & ~(bcs - 1);    /* start from the current cluster */
    860a:	60a3      	str	r3, [r4, #8]
                ofs -= fp->fptr;
    860c:	1aed      	subs	r5, r5, r3
                    fp->sclust = clst;
                }
#endif
                fp->clust = clst;
            }
            if (clst != 0) {
    860e:	2900      	cmp	r1, #0
    8610:	d12a      	bne.n	8668 <f_lseek+0xc4>
    8612:	68a3      	ldr	r3, [r4, #8]
             && !(fp->flag & FA_WRITE)
#endif
            ) ofs = fp->fsize;

        ifptr = fp->fptr;
        fp->fptr = nsect = 0;
    8614:	460d      	mov	r5, r1
                    if (!nsect) ABORT(fp->fs, FR_INT_ERR);
                    nsect += ofs / SS(fp->fs);
                }
            }
        }
        if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {  /* Fill sector cache if needed */
    8616:	f3c3 0208 	ubfx	r2, r3, #0, #9
    861a:	2a00      	cmp	r2, #0
    861c:	f000 8081 	beq.w	8722 <f_lseek+0x17e>
    8620:	69a2      	ldr	r2, [r4, #24]
    8622:	42aa      	cmp	r2, r5
    8624:	d07d      	beq.n	8722 <f_lseek+0x17e>
#if !_FS_TINY
#if !_FS_READONLY
            if (fp->flag & FA__DIRTY) {         /* Write-back dirty sector cache */
    8626:	79a3      	ldrb	r3, [r4, #6]
    8628:	0659      	lsls	r1, r3, #25
    862a:	d460      	bmi.n	86ee <f_lseek+0x14a>
    862c:	f104 0624 	add.w	r6, r4, #36	; 0x24
                if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
                    ABORT(fp->fs, FR_DISK_ERR);
                fp->flag &= ~FA__DIRTY;
            }
#endif
            if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)    /* Fill sector cache */
    8630:	6823      	ldr	r3, [r4, #0]
    8632:	4631      	mov	r1, r6
    8634:	7858      	ldrb	r0, [r3, #1]
    8636:	462a      	mov	r2, r5
    8638:	2301      	movs	r3, #1
    863a:	f7fa fdaf 	bl	319c <disk_read>
    863e:	2800      	cmp	r0, #0
    8640:	d14f      	bne.n	86e2 <f_lseek+0x13e>
    8642:	68a3      	ldr	r3, [r4, #8]
    8644:	68e2      	ldr	r2, [r4, #12]
                ABORT(fp->fs, FR_DISK_ERR);
#endif
            fp->dsect = nsect;
    8646:	61a5      	str	r5, [r4, #24]
        }
#if !_FS_READONLY
        if (fp->fptr > fp->fsize) {         /* Set file change flag if the file size is extended */
    8648:	4293      	cmp	r3, r2
    864a:	d906      	bls.n	865a <f_lseek+0xb6>
            fp->fsize = fp->fptr;
            fp->flag |= FA__WRITTEN;
    864c:	79a2      	ldrb	r2, [r4, #6]
#endif
            fp->dsect = nsect;
        }
#if !_FS_READONLY
        if (fp->fptr > fp->fsize) {         /* Set file change flag if the file size is extended */
            fp->fsize = fp->fptr;
    864e:	60e3      	str	r3, [r4, #12]
            fp->flag |= FA__WRITTEN;
    8650:	f042 0320 	orr.w	r3, r2, #32
    8654:	71a3      	strb	r3, [r4, #6]
    8656:	2000      	movs	r0, #0
    8658:	bd70      	pop	{r4, r5, r6, pc}
    865a:	2000      	movs	r0, #0
    865c:	bd70      	pop	{r4, r5, r6, pc}
                (ofs - 1) / bcs >= (ifptr - 1) / bcs) { /* When seek to same or following cluster, */
                fp->fptr = (ifptr - 1) & ~(bcs - 1);    /* start from the current cluster */
                ofs -= fp->fptr;
                clst = fp->clust;
            } else {                                    /* When seek to back cluster, */
                clst = fp->sclust;                      /* start from the first cluster */
    865e:	6921      	ldr	r1, [r4, #16]
#if !_FS_READONLY
                if (clst == 0) {                        /* If no cluster chain, create a new chain */
    8660:	2900      	cmp	r1, #0
    8662:	d055      	beq.n	8710 <f_lseek+0x16c>
                    if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
                    if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
                    fp->sclust = clst;
                }
#endif
                fp->clust = clst;
    8664:	6161      	str	r1, [r4, #20]
    8666:	e7d2      	b.n	860e <f_lseek+0x6a>
            }
            if (clst != 0) {
                while (ofs > bcs) {                     /* Cluster following loop */
    8668:	42b5      	cmp	r5, r6
    866a:	d95f      	bls.n	872c <f_lseek+0x188>
    866c:	6820      	ldr	r0, [r4, #0]
#if !_FS_READONLY
                    if (fp->flag & FA_WRITE) {          /* Check if in write mode or not */
    866e:	79a3      	ldrb	r3, [r4, #6]
    8670:	079a      	lsls	r2, r3, #30
                        clst = get_fat(fp->fs, clst);   /* Follow cluster chain if not in write mode */
                    if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
                    if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
                    fp->clust = clst;
                    fp->fptr += bcs;
                    ofs -= bcs;
    8672:	eba5 0506 	sub.w	r5, r5, r6
                fp->clust = clst;
            }
            if (clst != 0) {
                while (ofs > bcs) {                     /* Cluster following loop */
#if !_FS_READONLY
                    if (fp->flag & FA_WRITE) {          /* Check if in write mode or not */
    8676:	d409      	bmi.n	868c <f_lseek+0xe8>
{
    UINT wc, bc;
    BYTE *p;


    if (clst < 2 || clst >= fs->n_fatent)   /* Chack range */
    8678:	2901      	cmp	r1, #1
    867a:	d902      	bls.n	8682 <f_lseek+0xde>
    867c:	69c2      	ldr	r2, [r0, #28]
    867e:	428a      	cmp	r2, r1
    8680:	d82b      	bhi.n	86da <f_lseek+0x136>
                    ofs -= bcs;
                }
                fp->fptr += ofs;
                if (ofs % SS(fp->fs)) {
                    nsect = clust2sect(fp->fs, clst);   /* Current sector */
                    if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    8682:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8686:	71a3      	strb	r3, [r4, #6]
    8688:	2002      	movs	r0, #2
    868a:	bd70      	pop	{r4, r5, r6, pc}
            }
            if (clst != 0) {
                while (ofs > bcs) {                     /* Cluster following loop */
#if !_FS_READONLY
                    if (fp->flag & FA_WRITE) {          /* Check if in write mode or not */
                        clst = create_chain(fp->fs, clst);  /* Force stretch if in write mode */
    868c:	f7fe f880 	bl	6790 <create_chain>
                        if (clst == 0) {                /* When disk gets full, clip file size */
    8690:	4601      	mov	r1, r0
    8692:	2800      	cmp	r0, #0
    8694:	d049      	beq.n	872a <f_lseek+0x186>
                            ofs = bcs; break;
                        }
                    } else
#endif
                        clst = get_fat(fp->fs, clst);   /* Follow cluster chain if not in write mode */
                    if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    8696:	1c48      	adds	r0, r1, #1
    8698:	d023      	beq.n	86e2 <f_lseek+0x13e>
                    if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    869a:	2901      	cmp	r1, #1
    869c:	d936      	bls.n	870c <f_lseek+0x168>
    869e:	6820      	ldr	r0, [r4, #0]
    86a0:	69c3      	ldr	r3, [r0, #28]
    86a2:	4299      	cmp	r1, r3
    86a4:	d232      	bcs.n	870c <f_lseek+0x168>
                    fp->clust = clst;
                    fp->fptr += bcs;
    86a6:	68a3      	ldr	r3, [r4, #8]
                    } else
#endif
                        clst = get_fat(fp->fs, clst);   /* Follow cluster chain if not in write mode */
                    if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
                    if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
                    fp->clust = clst;
    86a8:	6161      	str	r1, [r4, #20]
                    fp->fptr += bcs;
    86aa:	4433      	add	r3, r6
                }
#endif
                fp->clust = clst;
            }
            if (clst != 0) {
                while (ofs > bcs) {                     /* Cluster following loop */
    86ac:	42ae      	cmp	r6, r5
#endif
                        clst = get_fat(fp->fs, clst);   /* Follow cluster chain if not in write mode */
                    if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
                    if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
                    fp->clust = clst;
                    fp->fptr += bcs;
    86ae:	60a3      	str	r3, [r4, #8]
                }
#endif
                fp->clust = clst;
            }
            if (clst != 0) {
                while (ofs > bcs) {                     /* Cluster following loop */
    86b0:	d3dd      	bcc.n	866e <f_lseek+0xca>
                    if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
                    fp->clust = clst;
                    fp->fptr += bcs;
                    ofs -= bcs;
                }
                fp->fptr += ofs;
    86b2:	442b      	add	r3, r5
                if (ofs % SS(fp->fs)) {
    86b4:	f3c5 0208 	ubfx	r2, r5, #0, #9
                    if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
                    fp->clust = clst;
                    fp->fptr += bcs;
                    ofs -= bcs;
                }
                fp->fptr += ofs;
    86b8:	60a3      	str	r3, [r4, #8]
                if (ofs % SS(fp->fs)) {
    86ba:	2a00      	cmp	r2, #0
    86bc:	d033      	beq.n	8726 <f_lseek+0x182>
                    nsect = clust2sect(fp->fs, clst);   /* Current sector */
    86be:	6820      	ldr	r0, [r4, #0]
    FATFS *fs,      /* File system object */
    DWORD clst      /* Cluster# to be converted */
)
{
    clst -= 2;
    if (clst >= (fs->n_fatent - 2)) return 0;       /* Invalid cluster# */
    86c0:	69c2      	ldr	r2, [r0, #28]
DWORD clust2sect (  /* !=0: Sector number, 0: Failed - invalid cluster# */
    FATFS *fs,      /* File system object */
    DWORD clst      /* Cluster# to be converted */
)
{
    clst -= 2;
    86c2:	3902      	subs	r1, #2
    if (clst >= (fs->n_fatent - 2)) return 0;       /* Invalid cluster# */
    86c4:	3a02      	subs	r2, #2
    86c6:	4291      	cmp	r1, r2
    86c8:	d220      	bcs.n	870c <f_lseek+0x168>
    return clst * fs->csize + fs->database;
    86ca:	7886      	ldrb	r6, [r0, #2]
    86cc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    86ce:	fb06 2101 	mla	r1, r6, r1, r2
                    ofs -= bcs;
                }
                fp->fptr += ofs;
                if (ofs % SS(fp->fs)) {
                    nsect = clust2sect(fp->fs, clst);   /* Current sector */
                    if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    86d2:	b1d9      	cbz	r1, 870c <f_lseek+0x168>
                    nsect += ofs / SS(fp->fs);
    86d4:	eb01 2555 	add.w	r5, r1, r5, lsr #9
    86d8:	e79d      	b.n	8616 <f_lseek+0x72>
    86da:	f7fd febd 	bl	6458 <get_fat.part.3>
    86de:	4601      	mov	r1, r0
    86e0:	e7d9      	b.n	8696 <f_lseek+0xf2>
                    ABORT(fp->fs, FR_DISK_ERR);
                fp->flag &= ~FA__DIRTY;
            }
#endif
            if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)    /* Fill sector cache */
                ABORT(fp->fs, FR_DISK_ERR);
    86e2:	79a3      	ldrb	r3, [r4, #6]
    86e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    86e8:	71a3      	strb	r3, [r4, #6]
    86ea:	2001      	movs	r0, #1
    86ec:	bd70      	pop	{r4, r5, r6, pc}
        }
        if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {  /* Fill sector cache if needed */
#if !_FS_TINY
#if !_FS_READONLY
            if (fp->flag & FA__DIRTY) {         /* Write-back dirty sector cache */
                if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    86ee:	6823      	ldr	r3, [r4, #0]
    86f0:	f104 0624 	add.w	r6, r4, #36	; 0x24
    86f4:	7858      	ldrb	r0, [r3, #1]
    86f6:	4631      	mov	r1, r6
    86f8:	2301      	movs	r3, #1
    86fa:	f7fa fd9d 	bl	3238 <disk_write>
                    ABORT(fp->fs, FR_DISK_ERR);
    86fe:	79a3      	ldrb	r3, [r4, #6]
        }
        if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {  /* Fill sector cache if needed */
#if !_FS_TINY
#if !_FS_READONLY
            if (fp->flag & FA__DIRTY) {         /* Write-back dirty sector cache */
                if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
    8700:	2800      	cmp	r0, #0
    8702:	d1ef      	bne.n	86e4 <f_lseek+0x140>
                    ABORT(fp->fs, FR_DISK_ERR);
                fp->flag &= ~FA__DIRTY;
    8704:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    8708:	71a3      	strb	r3, [r4, #6]
    870a:	e791      	b.n	8630 <f_lseek+0x8c>
                    ofs -= bcs;
                }
                fp->fptr += ofs;
                if (ofs % SS(fp->fs)) {
                    nsect = clust2sect(fp->fs, clst);   /* Current sector */
                    if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    870c:	79a3      	ldrb	r3, [r4, #6]
    870e:	e7b8      	b.n	8682 <f_lseek+0xde>
                clst = fp->clust;
            } else {                                    /* When seek to back cluster, */
                clst = fp->sclust;                      /* start from the first cluster */
#if !_FS_READONLY
                if (clst == 0) {                        /* If no cluster chain, create a new chain */
                    clst = create_chain(fp->fs, 0);
    8710:	f7fe f83e 	bl	6790 <create_chain>
                    if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    8714:	2801      	cmp	r0, #1
                clst = fp->clust;
            } else {                                    /* When seek to back cluster, */
                clst = fp->sclust;                      /* start from the first cluster */
#if !_FS_READONLY
                if (clst == 0) {                        /* If no cluster chain, create a new chain */
                    clst = create_chain(fp->fs, 0);
    8716:	4601      	mov	r1, r0
                    if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    8718:	d0f8      	beq.n	870c <f_lseek+0x168>
                    if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    871a:	3001      	adds	r0, #1
    871c:	d0e1      	beq.n	86e2 <f_lseek+0x13e>
                    fp->sclust = clst;
    871e:	6121      	str	r1, [r4, #16]
    8720:	e7a0      	b.n	8664 <f_lseek+0xc0>
    8722:	68e2      	ldr	r2, [r4, #12]
    8724:	e790      	b.n	8648 <f_lseek+0xa4>
             && !(fp->flag & FA_WRITE)
#endif
            ) ofs = fp->fsize;

        ifptr = fp->fptr;
        fp->fptr = nsect = 0;
    8726:	4615      	mov	r5, r2
    8728:	e775      	b.n	8616 <f_lseek+0x72>
            if (clst != 0) {
                while (ofs > bcs) {                     /* Cluster following loop */
#if !_FS_READONLY
                    if (fp->flag & FA_WRITE) {          /* Check if in write mode or not */
                        clst = create_chain(fp->fs, clst);  /* Force stretch if in write mode */
                        if (clst == 0) {                /* When disk gets full, clip file size */
    872a:	4635      	mov	r5, r6
    872c:	68a3      	ldr	r3, [r4, #8]
    872e:	e7c0      	b.n	86b2 <f_lseek+0x10e>

00008730 <wave_to_spectrogram>:
static float32_t filterbanks[FILTERBANKS_LENGTH] = FILTERBANKS;

/* Compute the a spectrogram of a wave
 * with fftLen samples per time window */

void wave_to_spectrogram(float32_t *fft_input, float32_t *fft_output, q15_t *wave, int32_t wave_length, float32_t *spectrogram, q7_t* output, float32_t *hamming, uint16_t fft_len){
    8730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8734:	ed2d 8b04 	vpush	{d8-d9}
    8738:	b099      	sub	sp, #100	; 0x64
    873a:	af00      	add	r7, sp, #0
    873c:	4605      	mov	r5, r0
    873e:	f8b7 40a4 	ldrh.w	r4, [r7, #164]	; 0xa4
    8742:	6139      	str	r1, [r7, #16]

  arm_rfft_fast_instance_f32 rfftInstance;
  arm_status status = arm_rfft_fast_init_f32(&rfftInstance, fft_len);
    8744:	f107 0048 	add.w	r0, r7, #72	; 0x48
    8748:	4621      	mov	r1, r4
static float32_t filterbanks[FILTERBANKS_LENGTH] = FILTERBANKS;

/* Compute the a spectrogram of a wave
 * with fftLen samples per time window */

void wave_to_spectrogram(float32_t *fft_input, float32_t *fft_output, q15_t *wave, int32_t wave_length, float32_t *spectrogram, q7_t* output, float32_t *hamming, uint16_t fft_len){
    874a:	461e      	mov	r6, r3
    874c:	60fa      	str	r2, [r7, #12]
    874e:	60bb      	str	r3, [r7, #8]
    8750:	607c      	str	r4, [r7, #4]

  arm_rfft_fast_instance_f32 rfftInstance;
  arm_status status = arm_rfft_fast_init_f32(&rfftInstance, fft_len);
    8752:	f000 fb69 	bl	8e28 <arm_rfft_fast_init_f32>
  /* Variables for the FFT */
  uint32_t output_buffer_offset = 0;
  uint16_t features_per_sample = MFCC_FILTERS/2 -1;
  uint16_t sample_start = 0;
  uint16_t sample_end = fft_len;
  uint16_t step_size = fft_len/2;
    8756:	0862      	lsrs	r2, r4, #1
  uint32_t freq_bins_num = fft_len/2;

	uint32_t start_time, end_time;
	uint16_t start_milliseconds, end_milliseconds;
	AudioMoth_getTime(&start_time, &start_milliseconds);
    8758:	f107 0030 	add.w	r0, r7, #48	; 0x30
    875c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
  /* Variables for the FFT */
  uint32_t output_buffer_offset = 0;
  uint16_t features_per_sample = MFCC_FILTERS/2 -1;
  uint16_t sample_start = 0;
  uint16_t sample_end = fft_len;
  uint16_t step_size = fft_len/2;
    8760:	61ba      	str	r2, [r7, #24]
  uint32_t freq_bins_num = fft_len/2;

	uint32_t start_time, end_time;
	uint16_t start_milliseconds, end_milliseconds;
	AudioMoth_getTime(&start_time, &start_milliseconds);
    8762:	f7fa fac5 	bl	2cf0 <AudioMoth_getTime>

  while(sample_end <= wave_length) {
    8766:	42a6      	cmp	r6, r4
    8768:	4622      	mov	r2, r4
    876a:	f2c0 811a 	blt.w	89a2 <wave_to_spectrogram+0x272>
    876e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    8772:	4c95      	ldr	r4, [pc, #596]	; (89c8 <wave_to_spectrogram+0x298>)
    8774:	623a      	str	r2, [r7, #32]
    8776:	f103 094c 	add.w	r9, r3, #76	; 0x4c
    877a:	2300      	movs	r3, #0
    877c:	61fb      	str	r3, [r7, #28]
    877e:	687e      	ldr	r6, [r7, #4]
    8780:	6a3a      	ldr	r2, [r7, #32]
    8782:	1b90      	subs	r0, r2, r6
	  /* Take the sample */

	  arm_q15_to_float(wave+sample_start, fft_input, fft_len);
    8784:	68fa      	ldr	r2, [r7, #12]
    8786:	b280      	uxth	r0, r0
    8788:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    878c:	4629      	mov	r1, r5
    878e:	4632      	mov	r2, r6
    8790:	f000 f986 	bl	8aa0 <arm_q15_to_float>

	  /* Apply the Hamming window */
	  arm_mult_f32(fft_input, hamming, fft_input, (uint32_t) fft_len);
    8794:	4633      	mov	r3, r6
    8796:	4628      	mov	r0, r5
    8798:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
    879c:	462a      	mov	r2, r5
    879e:	f001 f98f 	bl	9ac0 <arm_mult_f32>

	  /* Compute the FFT.
	   * fft_input and fft_output should not overlap */

	  arm_rfft_fast_f32(&rfftInstance, fft_input, fft_output, 0);
    87a2:	693e      	ldr	r6, [r7, #16]
    87a4:	f107 0048 	add.w	r0, r7, #72	; 0x48
    87a8:	4632      	mov	r2, r6
    87aa:	4629      	mov	r1, r5
    87ac:	2300      	movs	r3, #0
    87ae:	f000 fbbd 	bl	8f2c <arm_rfft_fast_f32>

	  arm_cmplx_mag_f32(fft_output, fft_input, freq_bins_num);
    87b2:	4630      	mov	r0, r6
    87b4:	4629      	mov	r1, r5
    87b6:	69ba      	ldr	r2, [r7, #24]
    87b8:	f001 f824 	bl	9804 <arm_cmplx_mag_f32>
    87bc:	f8c7 d014 	str.w	sp, [r7, #20]
	// the filterbanks array index
	uint16_t index = 0;
	float32_t energy = 0.0f;
	uint16_t start_index;
	uint16_t end_index;
	float32_t buffer[number_of_filters];
    87c0:	b0aa      	sub	sp, #168	; 0xa8
    87c2:	46ea      	mov	sl, sp
    87c4:	ae28      	add	r6, sp, #160	; 0xa0
    87c6:	46eb      	mov	fp, sp
 * e gives the end index for the fft bin
 * f1,f2,f3,.. are the filter values between s and e
*/
void calculate_MFCC(float32_t* mfcc_input, float32_t* filterbanks, float32_t* mfcc_output, const uint16_t number_of_filters){
	// the filterbanks array index
	uint16_t index = 0;
    87c8:	f04f 0800 	mov.w	r8, #0
	uint16_t start_index;
	uint16_t end_index;
	float32_t buffer[number_of_filters];

	for(uint16_t i =0; i< number_of_filters; i++){
		start_index = (uint16_t) filterbanks[index++];
    87cc:	f108 0301 	add.w	r3, r8, #1
		end_index = (uint16_t) filterbanks[index++];
    87d0:	b29b      	uxth	r3, r3
    87d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	uint16_t start_index;
	uint16_t end_index;
	float32_t buffer[number_of_filters];

	for(uint16_t i =0; i< number_of_filters; i++){
		start_index = (uint16_t) filterbanks[index++];
    87d6:	eb04 0288 	add.w	r2, r4, r8, lsl #2
		end_index = (uint16_t) filterbanks[index++];
    87da:	ed93 7a00 	vldr	s14, [r3]
	uint16_t start_index;
	uint16_t end_index;
	float32_t buffer[number_of_filters];

	for(uint16_t i =0; i< number_of_filters; i++){
		start_index = (uint16_t) filterbanks[index++];
    87de:	edd2 7a00 	vldr	s15, [r2]
		end_index = (uint16_t) filterbanks[index++];
    87e2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
	uint16_t start_index;
	uint16_t end_index;
	float32_t buffer[number_of_filters];

	for(uint16_t i =0; i< number_of_filters; i++){
		start_index = (uint16_t) filterbanks[index++];
    87e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		end_index = (uint16_t) filterbanks[index++];
		for(uint16_t j = start_index; j< end_index+1; j++){
    87ea:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
    87ee:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
	uint16_t start_index;
	uint16_t end_index;
	float32_t buffer[number_of_filters];

	for(uint16_t i =0; i< number_of_filters; i++){
		start_index = (uint16_t) filterbanks[index++];
    87f0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    87f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
		end_index = (uint16_t) filterbanks[index++];
    87f6:	f108 0202 	add.w	r2, r8, #2
		for(uint16_t j = start_index; j< end_index+1; j++){
    87fa:	4283      	cmp	r3, r0
	uint16_t end_index;
	float32_t buffer[number_of_filters];

	for(uint16_t i =0; i< number_of_filters; i++){
		start_index = (uint16_t) filterbanks[index++];
		end_index = (uint16_t) filterbanks[index++];
    87fc:	b292      	uxth	r2, r2
		for(uint16_t j = start_index; j< end_index+1; j++){
    87fe:	f300 80cc 	bgt.w	899a <wave_to_spectrogram+0x26a>
    8802:	eddf 6a72 	vldr	s13, [pc, #456]	; 89cc <wave_to_spectrogram+0x29c>
			energy += mfcc_input[j]*filterbanks[index++];
    8806:	eb05 0e83 	add.w	lr, r5, r3, lsl #2
    880a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
    880e:	ed9e 7a00 	vldr	s14, [lr]
    8812:	edd1 7a00 	vldr	s15, [r1]
	float32_t buffer[number_of_filters];

	for(uint16_t i =0; i< number_of_filters; i++){
		start_index = (uint16_t) filterbanks[index++];
		end_index = (uint16_t) filterbanks[index++];
		for(uint16_t j = start_index; j< end_index+1; j++){
    8816:	3301      	adds	r3, #1
			energy += mfcc_input[j]*filterbanks[index++];
    8818:	3201      	adds	r2, #1
    881a:	ee67 7a27 	vmul.f32	s15, s14, s15
	float32_t buffer[number_of_filters];

	for(uint16_t i =0; i< number_of_filters; i++){
		start_index = (uint16_t) filterbanks[index++];
		end_index = (uint16_t) filterbanks[index++];
		for(uint16_t j = start_index; j< end_index+1; j++){
    881e:	b29b      	uxth	r3, r3
			energy += mfcc_input[j]*filterbanks[index++];
    8820:	fa1f f882 	uxth.w	r8, r2
	float32_t buffer[number_of_filters];

	for(uint16_t i =0; i< number_of_filters; i++){
		start_index = (uint16_t) filterbanks[index++];
		end_index = (uint16_t) filterbanks[index++];
		for(uint16_t j = start_index; j< end_index+1; j++){
    8824:	4283      	cmp	r3, r0
			energy += mfcc_input[j]*filterbanks[index++];
    8826:	ee76 6aa7 	vadd.f32	s13, s13, s15
    882a:	4642      	mov	r2, r8
	float32_t buffer[number_of_filters];

	for(uint16_t i =0; i< number_of_filters; i++){
		start_index = (uint16_t) filterbanks[index++];
		end_index = (uint16_t) filterbanks[index++];
		for(uint16_t j = start_index; j< end_index+1; j++){
    882c:	ddeb      	ble.n	8806 <wave_to_spectrogram+0xd6>
			energy += mfcc_input[j]*filterbanks[index++];
		}
		if(energy == 0){
    882e:	eef5 6a40 	vcmp.f32	s13, #0.0
    8832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8836:	f000 80ad 	beq.w	8994 <wave_to_spectrogram+0x264>
    883a:	ee16 0a90 	vmov	r0, s13
    883e:	f002 fecb 	bl	b5d8 <__aeabi_f2d>
    8842:	ec41 0b10 	vmov	d0, r0, r1
			energy = 1e-6;
		}
		buffer[i] = log(energy);
    8846:	f001 fcd3 	bl	a1f0 <log>
    884a:	ec51 0b10 	vmov	r0, r1, d0
    884e:	f003 f9b1 	bl	bbb4 <__aeabi_d2f>
    8852:	f84b 0b04 	str.w	r0, [fp], #4
	float32_t energy = 0.0f;
	uint16_t start_index;
	uint16_t end_index;
	float32_t buffer[number_of_filters];

	for(uint16_t i =0; i< number_of_filters; i++){
    8856:	45b3      	cmp	fp, r6
    8858:	d1b8      	bne.n	87cc <wave_to_spectrogram+0x9c>
    885a:	f1a9 084c 	sub.w	r8, r9, #76	; 0x4c
    885e:	2601      	movs	r6, #1
	float32_t factor;
	for(uint16_t k = 1; k<length/2; k++){
		X_k = 0;
		factor = k*M_PI/length;
		for(uint16_t i = 0; i<length; i++){
			X_k += dct_input[i]*arm_cos_f32((i+0.5f)*factor);
    8860:	eef6 9a00 	vmov.f32	s19, #96	; 0x60
    8864:	627d      	str	r5, [r7, #36]	; 0x24
    8866:	46d3      	mov	fp, sl
void dct_ii(float32_t* dct_input, float32_t* dct_output, const uint16_t length){
	float32_t X_k = 0;
	float32_t factor;
	for(uint16_t k = 1; k<length/2; k++){
		X_k = 0;
		factor = k*M_PI/length;
    8868:	4630      	mov	r0, r6
    886a:	f002 fea3 	bl	b5b4 <__aeabi_i2d>
    886e:	a350      	add	r3, pc, #320	; (adr r3, 89b0 <wave_to_spectrogram+0x280>)
    8870:	e9d3 2300 	ldrd	r2, r3, [r3]
    8874:	f002 ff04 	bl	b680 <__aeabi_dmul>
    8878:	2200      	movs	r2, #0
    887a:	4b55      	ldr	r3, [pc, #340]	; (89d0 <wave_to_spectrogram+0x2a0>)

void dct_ii(float32_t* dct_input, float32_t* dct_output, const uint16_t length){
	float32_t X_k = 0;
	float32_t factor;
	for(uint16_t k = 1; k<length/2; k++){
		X_k = 0;
    887c:	eddf 8a53 	vldr	s17, [pc, #332]	; 89cc <wave_to_spectrogram+0x29c>
		factor = k*M_PI/length;
    8880:	f003 f828 	bl	b8d4 <__aeabi_ddiv>
    8884:	f003 f996 	bl	bbb4 <__aeabi_d2f>
    8888:	ee09 0a10 	vmov	s18, r0
    888c:	465d      	mov	r5, fp
    888e:	f04f 0a00 	mov.w	sl, #0
		for(uint16_t i = 0; i<length; i++){
			X_k += dct_input[i]*arm_cos_f32((i+0.5f)*factor);
    8892:	ee07 aa90 	vmov	s15, sl
    8896:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    889a:	ecb5 8a01 	vldmia	r5!, {s16}
    889e:	ee30 0a29 	vadd.f32	s0, s0, s19
    88a2:	f10a 0a01 	add.w	sl, sl, #1
    88a6:	ee29 0a00 	vmul.f32	s0, s18, s0
    88aa:	f001 f893 	bl	99d4 <arm_cos_f32>
    88ae:	ee28 0a00 	vmul.f32	s0, s16, s0
	float32_t X_k = 0;
	float32_t factor;
	for(uint16_t k = 1; k<length/2; k++){
		X_k = 0;
		factor = k*M_PI/length;
		for(uint16_t i = 0; i<length; i++){
    88b2:	f1ba 0f28 	cmp.w	sl, #40	; 0x28
			X_k += dct_input[i]*arm_cos_f32((i+0.5f)*factor);
    88b6:	ee78 8a80 	vadd.f32	s17, s17, s0
	float32_t X_k = 0;
	float32_t factor;
	for(uint16_t k = 1; k<length/2; k++){
		X_k = 0;
		factor = k*M_PI/length;
		for(uint16_t i = 0; i<length; i++){
    88ba:	d1ea      	bne.n	8892 <wave_to_spectrogram+0x162>
			X_k += dct_input[i]*arm_cos_f32((i+0.5f)*factor);
		}
		dct_output[k-1] = X_k*sqrt(2.0f/(float32_t) length);
    88bc:	ee18 0a90 	vmov	r0, s17
    88c0:	f002 fe8a 	bl	b5d8 <__aeabi_f2d>
    88c4:	a33c      	add	r3, pc, #240	; (adr r3, 89b8 <wave_to_spectrogram+0x288>)
    88c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    88ca:	f002 fed9 	bl	b680 <__aeabi_dmul>
    88ce:	f003 f971 	bl	bbb4 <__aeabi_d2f>
    88d2:	f848 0b04 	str.w	r0, [r8], #4
}

void dct_ii(float32_t* dct_input, float32_t* dct_output, const uint16_t length){
	float32_t X_k = 0;
	float32_t factor;
	for(uint16_t k = 1; k<length/2; k++){
    88d6:	45c8      	cmp	r8, r9
    88d8:	f106 0601 	add.w	r6, r6, #1
    88dc:	d1c4      	bne.n	8868 <wave_to_spectrogram+0x138>
	  calculate_MFCC(fft_input, filterbanks, spectrogram + output_buffer_offset, (uint16_t) MFCC_FILTERS);

	  /* Update the FFT time window */
	  output_buffer_offset += features_per_sample;
	  sample_start += step_size;
	  sample_end += step_size;
    88de:	6a3b      	ldr	r3, [r7, #32]
    88e0:	69ba      	ldr	r2, [r7, #24]
    88e2:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    88e4:	4413      	add	r3, r2
    88e6:	b29b      	uxth	r3, r3
    88e8:	623b      	str	r3, [r7, #32]
	  arm_cmplx_mag_f32(fft_output, fft_input, freq_bins_num);

	  calculate_MFCC(fft_input, filterbanks, spectrogram + output_buffer_offset, (uint16_t) MFCC_FILTERS);

	  /* Update the FFT time window */
	  output_buffer_offset += features_per_sample;
    88ea:	69fa      	ldr	r2, [r7, #28]
    88ec:	3213      	adds	r2, #19
    88ee:	61fa      	str	r2, [r7, #28]

	uint32_t start_time, end_time;
	uint16_t start_milliseconds, end_milliseconds;
	AudioMoth_getTime(&start_time, &start_milliseconds);

  while(sample_end <= wave_length) {
    88f0:	68ba      	ldr	r2, [r7, #8]
    88f2:	f8d7 d014 	ldr.w	sp, [r7, #20]
    88f6:	4293      	cmp	r3, r2
    88f8:	f109 094c 	add.w	r9, r9, #76	; 0x4c
    88fc:	f77f af3f 	ble.w	877e <wave_to_spectrogram+0x4e>
    8900:	69fc      	ldr	r4, [r7, #28]

  }

  float32_t max_elem, min_elem;
  uint32_t max_elem_index, min_elem_index;
  arm_max_f32(spectrogram, output_buffer_offset, &max_elem, &max_elem_index);
    8902:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
    8906:	4621      	mov	r1, r4
    8908:	f107 0238 	add.w	r2, r7, #56	; 0x38
    890c:	f107 0340 	add.w	r3, r7, #64	; 0x40
    8910:	f000 fa22 	bl	8d58 <arm_max_f32>
  arm_min_f32(spectrogram, output_buffer_offset, &min_elem, &min_elem_index);
    8914:	f107 0344 	add.w	r3, r7, #68	; 0x44
    8918:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
    891c:	4621      	mov	r1, r4
    891e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
    8922:	f000 f9b1 	bl	8c88 <arm_min_f32>

  float32_t abs_max = 1/min_elem;
    8926:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
  if(max_elem*max_elem >= min_elem*min_elem){
    892a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
	  abs_max = 1/max_elem;
  }

  arm_scale_f32(spectrogram, abs_max, spectrogram, output_buffer_offset);
    892e:	69fc      	ldr	r4, [r7, #28]
    8930:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
  uint32_t max_elem_index, min_elem_index;
  arm_max_f32(spectrogram, output_buffer_offset, &max_elem, &max_elem_index);
  arm_min_f32(spectrogram, output_buffer_offset, &min_elem, &min_elem_index);

  float32_t abs_max = 1/min_elem;
  if(max_elem*max_elem >= min_elem*min_elem){
    8934:	ee60 7a00 	vmul.f32	s15, s0, s0
    8938:	ee67 6a07 	vmul.f32	s13, s14, s14
	  abs_max = 1/max_elem;
  }

  arm_scale_f32(spectrogram, abs_max, spectrogram, output_buffer_offset);
    893c:	4601      	mov	r1, r0
  uint32_t max_elem_index, min_elem_index;
  arm_max_f32(spectrogram, output_buffer_offset, &max_elem, &max_elem_index);
  arm_min_f32(spectrogram, output_buffer_offset, &min_elem, &min_elem_index);

  float32_t abs_max = 1/min_elem;
  if(max_elem*max_elem >= min_elem*min_elem){
    893e:	eef4 6ae7 	vcmpe.f32	s13, s15
    8942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	  abs_max = 1/max_elem;
    8946:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
  float32_t max_elem, min_elem;
  uint32_t max_elem_index, min_elem_index;
  arm_max_f32(spectrogram, output_buffer_offset, &max_elem, &max_elem_index);
  arm_min_f32(spectrogram, output_buffer_offset, &min_elem, &min_elem_index);

  float32_t abs_max = 1/min_elem;
    894a:	bfb8      	it	lt
    894c:	ee87 0a80 	vdivlt.f32	s0, s15, s0
  if(max_elem*max_elem >= min_elem*min_elem){
	  abs_max = 1/max_elem;
  }

  arm_scale_f32(spectrogram, abs_max, spectrogram, output_buffer_offset);
    8950:	4622      	mov	r2, r4
  arm_max_f32(spectrogram, output_buffer_offset, &max_elem, &max_elem_index);
  arm_min_f32(spectrogram, output_buffer_offset, &min_elem, &min_elem_index);

  float32_t abs_max = 1/min_elem;
  if(max_elem*max_elem >= min_elem*min_elem){
	  abs_max = 1/max_elem;
    8952:	bfa8      	it	ge
    8954:	ee87 0a87 	vdivge.f32	s0, s15, s14
  }

  arm_scale_f32(spectrogram, abs_max, spectrogram, output_buffer_offset);
    8958:	f001 f87c 	bl	9a54 <arm_scale_f32>

  arm_float_to_q7(spectrogram, output, output_buffer_offset);
    895c:	4622      	mov	r2, r4
    895e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
    8962:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
    8966:	f000 f8eb 	bl	8b40 <arm_float_to_q7>

	AudioMoth_getTime(&end_time, &end_milliseconds);
    896a:	f107 012e 	add.w	r1, r7, #46	; 0x2e
    896e:	f107 0034 	add.w	r0, r7, #52	; 0x34
    8972:	f7fa f9bd 	bl	2cf0 <AudioMoth_getTime>
	printf("Elapsed FFT time is %d seconds %d ms\n", end_time-start_time, end_milliseconds-start_milliseconds);
    8976:	6b7c      	ldr	r4, [r7, #52]	; 0x34
    8978:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
    897a:	6b39      	ldr	r1, [r7, #48]	; 0x30
    897c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
    897e:	4815      	ldr	r0, [pc, #84]	; (89d4 <wave_to_spectrogram+0x2a4>)
    8980:	1a61      	subs	r1, r4, r1
    8982:	1ad2      	subs	r2, r2, r3
    8984:	f003 fb04 	bl	bf90 <iprintf>
}
    8988:	3764      	adds	r7, #100	; 0x64
    898a:	46bd      	mov	sp, r7
    898c:	ecbd 8b04 	vpop	{d8-d9}
    8990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		start_index = (uint16_t) filterbanks[index++];
		end_index = (uint16_t) filterbanks[index++];
		for(uint16_t j = start_index; j< end_index+1; j++){
			energy += mfcc_input[j]*filterbanks[index++];
		}
		if(energy == 0){
    8994:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 89c0 <wave_to_spectrogram+0x290>
    8998:	e755      	b.n	8846 <wave_to_spectrogram+0x116>
	uint16_t end_index;
	float32_t buffer[number_of_filters];

	for(uint16_t i =0; i< number_of_filters; i++){
		start_index = (uint16_t) filterbanks[index++];
		end_index = (uint16_t) filterbanks[index++];
    899a:	4690      	mov	r8, r2
		for(uint16_t j = start_index; j< end_index+1; j++){
    899c:	ed9f 0b08 	vldr	d0, [pc, #32]	; 89c0 <wave_to_spectrogram+0x290>
    89a0:	e751      	b.n	8846 <wave_to_spectrogram+0x116>

  arm_rfft_fast_instance_f32 rfftInstance;
  arm_status status = arm_rfft_fast_init_f32(&rfftInstance, fft_len);

  /* Variables for the FFT */
  uint32_t output_buffer_offset = 0;
    89a2:	2300      	movs	r3, #0
    89a4:	61fb      	str	r3, [r7, #28]
    89a6:	461c      	mov	r4, r3
    89a8:	e7ab      	b.n	8902 <wave_to_spectrogram+0x1d2>
    89aa:	bf00      	nop
    89ac:	f3af 8000 	nop.w
    89b0:	f01b866e 	.word	0xf01b866e
    89b4:	400921f9 	.word	0x400921f9
    89b8:	c953d292 	.word	0xc953d292
    89bc:	3fcc9f25 	.word	0x3fcc9f25
    89c0:	a0000000 	.word	0xa0000000
    89c4:	3eb0c6f7 	.word	0x3eb0c6f7
    89c8:	20000014 	.word	0x20000014
    89cc:	00000000 	.word	0x00000000
    89d0:	40440000 	.word	0x40440000
    89d4:	0000d0e8 	.word	0x0000d0e8

000089d8 <forward_propagate_q7_dnn>:

}

void forward_propagate_q7_dnn(q7_t *input ,q7_t *mid_buffer, q7_t *output, const q7_t *dense1_wt, const q7_t *dense1_bias,
		const q7_t *dense2_wt, const q7_t *dense2_bias, const q7_t *dense3_wt, const q7_t *dense3_bias,
		const q7_t *dense4_wt, const q7_t *dense4_bias){
    89d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    89dc:	b08b      	sub	sp, #44	; 0x2c

	//uint32_t start_time, end_time;
	//uint16_t start_milliseconds, end_milliseconds;
	//AudioMoth_getTime(&start_time, &start_milliseconds);

	arm_fully_connected_q7(input, dense1_wt, DENSE1_IN_DIM, DENSE1_OUT_DIM,
    89de:	2707      	movs	r7, #7
    89e0:	9700      	str	r7, [sp, #0]

}

void forward_propagate_q7_dnn(q7_t *input ,q7_t *mid_buffer, q7_t *output, const q7_t *dense1_wt, const q7_t *dense1_bias,
		const q7_t *dense2_wt, const q7_t *dense2_bias, const q7_t *dense3_wt, const q7_t *dense3_bias,
		const q7_t *dense4_wt, const q7_t *dense4_bias){
    89e2:	9f16      	ldr	r7, [sp, #88]	; 0x58
    89e4:	9706      	str	r7, [sp, #24]
    89e6:	9f17      	ldr	r7, [sp, #92]	; 0x5c

	//uint32_t start_time, end_time;
	//uint16_t start_milliseconds, end_milliseconds;
	//AudioMoth_getTime(&start_time, &start_milliseconds);

	arm_fully_connected_q7(input, dense1_wt, DENSE1_IN_DIM, DENSE1_OUT_DIM,
    89e8:	9103      	str	r1, [sp, #12]

}

void forward_propagate_q7_dnn(q7_t *input ,q7_t *mid_buffer, q7_t *output, const q7_t *dense1_wt, const q7_t *dense1_bias,
		const q7_t *dense2_wt, const q7_t *dense2_bias, const q7_t *dense3_wt, const q7_t *dense3_bias,
		const q7_t *dense4_wt, const q7_t *dense4_bias){
    89ea:	460c      	mov	r4, r1
	//helper_buffer will be used as a buffer to store the intermediate computations
	//buffer1 and buffer2 will contain intermediate results
	q7_t* buffer1 = mid_buffer;
	//buffer1 and buffer2 must have length len(dense_dim output)
	q7_t* buffer2 = buffer1 + DNN_BUFFER_SIZE;
	q15_t* helper_buffer = (q15_t*) (buffer2 + DNN_BUFFER_SIZE);
    89ec:	f101 0580 	add.w	r5, r1, #128	; 0x80

	//uint32_t start_time, end_time;
	//uint16_t start_milliseconds, end_milliseconds;
	//AudioMoth_getTime(&start_time, &start_milliseconds);

	arm_fully_connected_q7(input, dense1_wt, DENSE1_IN_DIM, DENSE1_OUT_DIM,
    89f0:	2609      	movs	r6, #9
    89f2:	4619      	mov	r1, r3

}

void forward_propagate_q7_dnn(q7_t *input ,q7_t *mid_buffer, q7_t *output, const q7_t *dense1_wt, const q7_t *dense1_bias,
		const q7_t *dense2_wt, const q7_t *dense2_bias, const q7_t *dense3_wt, const q7_t *dense3_bias,
		const q7_t *dense4_wt, const q7_t *dense4_bias){
    89f4:	9707      	str	r7, [sp, #28]

	//uint32_t start_time, end_time;
	//uint16_t start_milliseconds, end_milliseconds;
	//AudioMoth_getTime(&start_time, &start_milliseconds);

	arm_fully_connected_q7(input, dense1_wt, DENSE1_IN_DIM, DENSE1_OUT_DIM,
    89f6:	9b14      	ldr	r3, [sp, #80]	; 0x50

}

void forward_propagate_q7_dnn(q7_t *input ,q7_t *mid_buffer, q7_t *output, const q7_t *dense1_wt, const q7_t *dense1_bias,
		const q7_t *dense2_wt, const q7_t *dense2_bias, const q7_t *dense3_wt, const q7_t *dense3_bias,
		const q7_t *dense4_wt, const q7_t *dense4_bias){
    89f8:	9f18      	ldr	r7, [sp, #96]	; 0x60

	//uint32_t start_time, end_time;
	//uint16_t start_milliseconds, end_milliseconds;
	//AudioMoth_getTime(&start_time, &start_milliseconds);

	arm_fully_connected_q7(input, dense1_wt, DENSE1_IN_DIM, DENSE1_OUT_DIM,
    89fa:	9302      	str	r3, [sp, #8]

}

void forward_propagate_q7_dnn(q7_t *input ,q7_t *mid_buffer, q7_t *output, const q7_t *dense1_wt, const q7_t *dense1_bias,
		const q7_t *dense2_wt, const q7_t *dense2_bias, const q7_t *dense3_wt, const q7_t *dense3_bias,
		const q7_t *dense4_wt, const q7_t *dense4_bias){
    89fc:	4690      	mov	r8, r2

	//uint32_t start_time, end_time;
	//uint16_t start_milliseconds, end_milliseconds;
	//AudioMoth_getTime(&start_time, &start_milliseconds);

	arm_fully_connected_q7(input, dense1_wt, DENSE1_IN_DIM, DENSE1_OUT_DIM,
    89fe:	2340      	movs	r3, #64	; 0x40
    8a00:	f240 42ad 	movw	r2, #1197	; 0x4ad

}

void forward_propagate_q7_dnn(q7_t *input ,q7_t *mid_buffer, q7_t *output, const q7_t *dense1_wt, const q7_t *dense1_bias,
		const q7_t *dense2_wt, const q7_t *dense2_bias, const q7_t *dense3_wt, const q7_t *dense3_bias,
		const q7_t *dense4_wt, const q7_t *dense4_bias){
    8a04:	9708      	str	r7, [sp, #32]

	//uint32_t start_time, end_time;
	//uint16_t start_milliseconds, end_milliseconds;
	//AudioMoth_getTime(&start_time, &start_milliseconds);

	arm_fully_connected_q7(input, dense1_wt, DENSE1_IN_DIM, DENSE1_OUT_DIM,
    8a06:	9504      	str	r5, [sp, #16]

}

void forward_propagate_q7_dnn(q7_t *input ,q7_t *mid_buffer, q7_t *output, const q7_t *dense1_wt, const q7_t *dense1_bias,
		const q7_t *dense2_wt, const q7_t *dense2_bias, const q7_t *dense3_wt, const q7_t *dense3_bias,
		const q7_t *dense4_wt, const q7_t *dense4_bias){
    8a08:	9f1a      	ldr	r7, [sp, #104]	; 0x68

	//uint32_t start_time, end_time;
	//uint16_t start_milliseconds, end_milliseconds;
	//AudioMoth_getTime(&start_time, &start_milliseconds);

	arm_fully_connected_q7(input, dense1_wt, DENSE1_IN_DIM, DENSE1_OUT_DIM,
    8a0a:	9601      	str	r6, [sp, #4]

}

void forward_propagate_q7_dnn(q7_t *input ,q7_t *mid_buffer, q7_t *output, const q7_t *dense1_wt, const q7_t *dense1_bias,
		const q7_t *dense2_wt, const q7_t *dense2_bias, const q7_t *dense3_wt, const q7_t *dense3_bias,
		const q7_t *dense4_wt, const q7_t *dense4_bias){
    8a0c:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
    8a10:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
    8a14:	9709      	str	r7, [sp, #36]	; 0x24

	//uint32_t start_time, end_time;
	//uint16_t start_milliseconds, end_milliseconds;
	//AudioMoth_getTime(&start_time, &start_milliseconds);

	arm_fully_connected_q7(input, dense1_wt, DENSE1_IN_DIM, DENSE1_OUT_DIM,
    8a16:	f002 fc37 	bl	b288 <arm_fully_connected_q7>
				DENSE1_BIAS_LSHIFT, DENSE1_OUT_RSHIFT, dense1_bias, buffer1, helper_buffer);


	arm_relu_q7(buffer1, (uint16_t) DENSE1_OUT_DIM);
    8a1a:	4620      	mov	r0, r4
    8a1c:	2140      	movs	r1, #64	; 0x40
    8a1e:	f002 fc69 	bl	b2f4 <arm_relu_q7>

	//helper_buffer will be used as a buffer to store the intermediate computations
	//buffer1 and buffer2 will contain intermediate results
	q7_t* buffer1 = mid_buffer;
	//buffer1 and buffer2 must have length len(dense_dim output)
	q7_t* buffer2 = buffer1 + DNN_BUFFER_SIZE;
    8a22:	f104 0740 	add.w	r7, r4, #64	; 0x40
				DENSE1_BIAS_LSHIFT, DENSE1_OUT_RSHIFT, dense1_bias, buffer1, helper_buffer);


	arm_relu_q7(buffer1, (uint16_t) DENSE1_OUT_DIM);

	arm_fully_connected_q7(buffer1, dense2_wt, DENSE2_IN_DIM, DENSE2_OUT_DIM,
    8a26:	2240      	movs	r2, #64	; 0x40
    8a28:	9806      	ldr	r0, [sp, #24]
    8a2a:	9002      	str	r0, [sp, #8]
    8a2c:	f04f 0906 	mov.w	r9, #6
    8a30:	2305      	movs	r3, #5
    8a32:	4651      	mov	r1, sl
    8a34:	9703      	str	r7, [sp, #12]
    8a36:	e88d 0208 	stmia.w	sp, {r3, r9}
    8a3a:	9504      	str	r5, [sp, #16]
    8a3c:	4613      	mov	r3, r2
    8a3e:	4620      	mov	r0, r4
    8a40:	f002 fc22 	bl	b288 <arm_fully_connected_q7>
				DENSE2_BIAS_LSHIFT, DENSE2_OUT_RSHIFT, dense2_bias, buffer2, helper_buffer);


	arm_relu_q7(buffer2, (uint16_t) DENSE2_OUT_DIM);
    8a44:	4638      	mov	r0, r7
    8a46:	2140      	movs	r1, #64	; 0x40
    8a48:	f002 fc54 	bl	b2f4 <arm_relu_q7>

	arm_fully_connected_q7(buffer2, dense3_wt, DENSE3_IN_DIM, DENSE3_OUT_DIM,
    8a4c:	2240      	movs	r2, #64	; 0x40
    8a4e:	9b08      	ldr	r3, [sp, #32]
    8a50:	9302      	str	r3, [sp, #8]
    8a52:	9907      	ldr	r1, [sp, #28]
    8a54:	f8cd 9000 	str.w	r9, [sp]
    8a58:	4613      	mov	r3, r2
    8a5a:	9504      	str	r5, [sp, #16]
    8a5c:	4638      	mov	r0, r7
    8a5e:	9601      	str	r6, [sp, #4]
    8a60:	9403      	str	r4, [sp, #12]
    8a62:	f002 fc11 	bl	b288 <arm_fully_connected_q7>
				DENSE3_BIAS_LSHIFT, DENSE3_OUT_RSHIFT, dense3_bias, buffer1, helper_buffer);


	arm_relu_q7(buffer1, (uint16_t) DENSE3_OUT_DIM);
    8a66:	4620      	mov	r0, r4
    8a68:	2140      	movs	r1, #64	; 0x40
    8a6a:	f002 fc43 	bl	b2f4 <arm_relu_q7>

	arm_fully_connected_q7(buffer1, dense4_wt, DENSE4_IN_DIM, DENSE4_OUT_DIM,
    8a6e:	9f09      	ldr	r7, [sp, #36]	; 0x24
    8a70:	9504      	str	r5, [sp, #16]
    8a72:	2304      	movs	r3, #4
    8a74:	4659      	mov	r1, fp
    8a76:	9300      	str	r3, [sp, #0]
    8a78:	9601      	str	r6, [sp, #4]
    8a7a:	9702      	str	r7, [sp, #8]
    8a7c:	f8cd 800c 	str.w	r8, [sp, #12]
    8a80:	4620      	mov	r0, r4
    8a82:	2240      	movs	r2, #64	; 0x40
    8a84:	2301      	movs	r3, #1
    8a86:	f002 fbff 	bl	b288 <arm_fully_connected_q7>
				DENSE4_BIAS_LSHIFT, DENSE4_OUT_RSHIFT, dense4_bias, output, helper_buffer);

	printf("Output before sigmoid is %d\n", output[0]);
    8a8a:	f998 1000 	ldrsb.w	r1, [r8]
    8a8e:	4803      	ldr	r0, [pc, #12]	; (8a9c <forward_propagate_q7_dnn+0xc4>)
	//arm_nn_activations_direct_q7(output, DENSE4_OUT_DIM, 1, ARM_SIGMOID);

	//AudioMoth_getTime(&end_time, &end_milliseconds);
	//printf("Elapsed dnn time is %d seconds %d ms\n", end_time-start_time, end_milliseconds-start_milliseconds);

}
    8a90:	b00b      	add	sp, #44	; 0x2c
    8a92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	arm_relu_q7(buffer1, (uint16_t) DENSE3_OUT_DIM);

	arm_fully_connected_q7(buffer1, dense4_wt, DENSE4_IN_DIM, DENSE4_OUT_DIM,
				DENSE4_BIAS_LSHIFT, DENSE4_OUT_RSHIFT, dense4_bias, output, helper_buffer);

	printf("Output before sigmoid is %d\n", output[0]);
    8a96:	f003 ba7b 	b.w	bf90 <iprintf>
    8a9a:	bf00      	nop
    8a9c:	0000d1b0 	.word	0x0000d1b0

00008aa0 <arm_q15_to_float>:
    8aa0:	b570      	push	{r4, r5, r6, lr}
    8aa2:	0896      	lsrs	r6, r2, #2
    8aa4:	d038      	beq.n	8b18 <arm_q15_to_float+0x78>
    8aa6:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8b3c <arm_q15_to_float+0x9c>
    8aaa:	f101 0410 	add.w	r4, r1, #16
    8aae:	f100 0308 	add.w	r3, r0, #8
    8ab2:	4635      	mov	r5, r6
    8ab4:	f933 ec08 	ldrsh.w	lr, [r3, #-8]
    8ab8:	ee07 ea90 	vmov	s15, lr
    8abc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    8ac0:	3d01      	subs	r5, #1
    8ac2:	ee67 7a87 	vmul.f32	s15, s15, s14
    8ac6:	f103 0308 	add.w	r3, r3, #8
    8aca:	ed44 7a04 	vstr	s15, [r4, #-16]
    8ace:	f933 ec0e 	ldrsh.w	lr, [r3, #-14]
    8ad2:	ee07 ea90 	vmov	s15, lr
    8ad6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    8ada:	f104 0410 	add.w	r4, r4, #16
    8ade:	ee67 7a87 	vmul.f32	s15, s15, s14
    8ae2:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
    8ae6:	f933 ec0c 	ldrsh.w	lr, [r3, #-12]
    8aea:	ee07 ea90 	vmov	s15, lr
    8aee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    8af2:	ee67 7a87 	vmul.f32	s15, s15, s14
    8af6:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
    8afa:	f933 ec0a 	ldrsh.w	lr, [r3, #-10]
    8afe:	ee07 ea90 	vmov	s15, lr
    8b02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    8b06:	ee67 7a87 	vmul.f32	s15, s15, s14
    8b0a:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
    8b0e:	d1d1      	bne.n	8ab4 <arm_q15_to_float+0x14>
    8b10:	eb01 1106 	add.w	r1, r1, r6, lsl #4
    8b14:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
    8b18:	f012 0203 	ands.w	r2, r2, #3
    8b1c:	d00d      	beq.n	8b3a <arm_q15_to_float+0x9a>
    8b1e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8b3c <arm_q15_to_float+0x9c>
    8b22:	f930 3b02 	ldrsh.w	r3, [r0], #2
    8b26:	ee07 3a90 	vmov	s15, r3
    8b2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    8b2e:	3a01      	subs	r2, #1
    8b30:	ee67 7a87 	vmul.f32	s15, s15, s14
    8b34:	ece1 7a01 	vstmia	r1!, {s15}
    8b38:	d1f3      	bne.n	8b22 <arm_q15_to_float+0x82>
    8b3a:	bd70      	pop	{r4, r5, r6, pc}
    8b3c:	38000000 	.word	0x38000000

00008b40 <arm_float_to_q7>:
    8b40:	b4f0      	push	{r4, r5, r6, r7}
    8b42:	0897      	lsrs	r7, r2, #2
    8b44:	b082      	sub	sp, #8
    8b46:	d075      	beq.n	8c34 <arm_float_to_q7+0xf4>
    8b48:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 8c84 <arm_float_to_q7+0x144>
    8b4c:	f100 0410 	add.w	r4, r0, #16
    8b50:	1d0b      	adds	r3, r1, #4
    8b52:	463e      	mov	r6, r7
    8b54:	eef6 6a00 	vmov.f32	s13, #96	; 0x60
    8b58:	eebe 7a00 	vmov.f32	s14, #224	; 0xe0
    8b5c:	ed54 7a04 	vldr	s15, [r4, #-16]
    8b60:	ee67 7a86 	vmul.f32	s15, s15, s12
    8b64:	3410      	adds	r4, #16
    8b66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    8b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8b6e:	bfd4      	ite	le
    8b70:	eef0 5a47 	vmovle.f32	s11, s14
    8b74:	eef0 5a66 	vmovgt.f32	s11, s13
    8b78:	ee75 7aa7 	vadd.f32	s15, s11, s15
    8b7c:	3304      	adds	r3, #4
    8b7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    8b82:	edcd 7a01 	vstr	s15, [sp, #4]
    8b86:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
    8b8a:	f305 0507 	ssat	r5, #7, r5
    8b8e:	f803 5c08 	strb.w	r5, [r3, #-8]
    8b92:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
    8b96:	ee67 7a86 	vmul.f32	s15, s15, s12
    8b9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    8b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8ba2:	bfd4      	ite	le
    8ba4:	eef0 5a47 	vmovle.f32	s11, s14
    8ba8:	eef0 5a66 	vmovgt.f32	s11, s13
    8bac:	ee75 7aa7 	vadd.f32	s15, s11, s15
    8bb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    8bb4:	edcd 7a01 	vstr	s15, [sp, #4]
    8bb8:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
    8bbc:	f305 0507 	ssat	r5, #7, r5
    8bc0:	f803 5c07 	strb.w	r5, [r3, #-7]
    8bc4:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
    8bc8:	ee67 7a86 	vmul.f32	s15, s15, s12
    8bcc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    8bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8bd4:	bfd4      	ite	le
    8bd6:	eef0 5a47 	vmovle.f32	s11, s14
    8bda:	eef0 5a66 	vmovgt.f32	s11, s13
    8bde:	ee75 7aa7 	vadd.f32	s15, s11, s15
    8be2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    8be6:	edcd 7a01 	vstr	s15, [sp, #4]
    8bea:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
    8bee:	f305 0507 	ssat	r5, #7, r5
    8bf2:	f803 5c06 	strb.w	r5, [r3, #-6]
    8bf6:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
    8bfa:	ee67 7a86 	vmul.f32	s15, s15, s12
    8bfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    8c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8c06:	bfd4      	ite	le
    8c08:	eef0 5a47 	vmovle.f32	s11, s14
    8c0c:	eef0 5a66 	vmovgt.f32	s11, s13
    8c10:	ee75 7aa7 	vadd.f32	s15, s11, s15
    8c14:	3e01      	subs	r6, #1
    8c16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    8c1a:	edcd 7a01 	vstr	s15, [sp, #4]
    8c1e:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
    8c22:	f305 0507 	ssat	r5, #7, r5
    8c26:	f803 5c05 	strb.w	r5, [r3, #-5]
    8c2a:	d197      	bne.n	8b5c <arm_float_to_q7+0x1c>
    8c2c:	eb00 1007 	add.w	r0, r0, r7, lsl #4
    8c30:	eb01 0187 	add.w	r1, r1, r7, lsl #2
    8c34:	f012 0203 	ands.w	r2, r2, #3
    8c38:	d021      	beq.n	8c7e <arm_float_to_q7+0x13e>
    8c3a:	eddf 5a12 	vldr	s11, [pc, #72]	; 8c84 <arm_float_to_q7+0x144>
    8c3e:	440a      	add	r2, r1
    8c40:	eeb6 6a00 	vmov.f32	s12, #96	; 0x60
    8c44:	eefe 6a00 	vmov.f32	s13, #224	; 0xe0
    8c48:	ecf0 7a01 	vldmia	r0!, {s15}
    8c4c:	ee67 7aa5 	vmul.f32	s15, s15, s11
    8c50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    8c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8c58:	bfd4      	ite	le
    8c5a:	eeb0 7a66 	vmovle.f32	s14, s13
    8c5e:	eeb0 7a46 	vmovgt.f32	s14, s12
    8c62:	ee77 7a27 	vadd.f32	s15, s14, s15
    8c66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    8c6a:	edcd 7a01 	vstr	s15, [sp, #4]
    8c6e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
    8c72:	f303 0307 	ssat	r3, #7, r3
    8c76:	f801 3b01 	strb.w	r3, [r1], #1
    8c7a:	4291      	cmp	r1, r2
    8c7c:	d1e4      	bne.n	8c48 <arm_float_to_q7+0x108>
    8c7e:	b002      	add	sp, #8
    8c80:	bcf0      	pop	{r4, r5, r6, r7}
    8c82:	4770      	bx	lr
    8c84:	43000000 	.word	0x43000000

00008c88 <arm_min_f32>:
    8c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8c8c:	1e4f      	subs	r7, r1, #1
    8c8e:	ea5f 0897 	movs.w	r8, r7, lsr #2
    8c92:	f100 0e04 	add.w	lr, r0, #4
    8c96:	edd0 7a00 	vldr	s15, [r0]
    8c9a:	d058      	beq.n	8d4e <arm_min_f32+0xc6>
    8c9c:	3014      	adds	r0, #20
    8c9e:	46c4      	mov	ip, r8
    8ca0:	2604      	movs	r6, #4
    8ca2:	2400      	movs	r4, #0
    8ca4:	ed10 6a04 	vldr	s12, [r0, #-16]
    8ca8:	ed50 6a03 	vldr	s13, [r0, #-12]
    8cac:	ed10 7a02 	vldr	s14, [r0, #-8]
    8cb0:	ed50 5a01 	vldr	s11, [r0, #-4]
    8cb4:	eeb4 6ae7 	vcmpe.f32	s12, s15
    8cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8cbc:	bf48      	it	mi
    8cbe:	eef0 7a46 	vmovmi.f32	s15, s12
    8cc2:	f1a6 0503 	sub.w	r5, r6, #3
    8cc6:	eef4 7ae6 	vcmpe.f32	s15, s13
    8cca:	bf48      	it	mi
    8ccc:	462c      	movmi	r4, r5
    8cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8cd2:	bfc8      	it	gt
    8cd4:	eef0 7a66 	vmovgt.f32	s15, s13
    8cd8:	f1a6 0502 	sub.w	r5, r6, #2
    8cdc:	eef4 7ac7 	vcmpe.f32	s15, s14
    8ce0:	bfc8      	it	gt
    8ce2:	462c      	movgt	r4, r5
    8ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8ce8:	bfc8      	it	gt
    8cea:	eef0 7a47 	vmovgt.f32	s15, s14
    8cee:	f106 35ff 	add.w	r5, r6, #4294967295
    8cf2:	eef4 7ae5 	vcmpe.f32	s15, s11
    8cf6:	bfc8      	it	gt
    8cf8:	462c      	movgt	r4, r5
    8cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8cfe:	bfc8      	it	gt
    8d00:	4634      	movgt	r4, r6
    8d02:	bfc8      	it	gt
    8d04:	eef0 7a65 	vmovgt.f32	s15, s11
    8d08:	f1bc 0c01 	subs.w	ip, ip, #1
    8d0c:	f100 0010 	add.w	r0, r0, #16
    8d10:	f106 0604 	add.w	r6, r6, #4
    8d14:	d1c6      	bne.n	8ca4 <arm_min_f32+0x1c>
    8d16:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
    8d1a:	f017 0003 	ands.w	r0, r7, #3
    8d1e:	d018      	beq.n	8d52 <arm_min_f32+0xca>
    8d20:	1a08      	subs	r0, r1, r0
    8d22:	ecbe 7a01 	vldmia	lr!, {s14}
    8d26:	eeb4 7ae7 	vcmpe.f32	s14, s15
    8d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8d2e:	bf48      	it	mi
    8d30:	4604      	movmi	r4, r0
    8d32:	f100 0001 	add.w	r0, r0, #1
    8d36:	bf58      	it	pl
    8d38:	eeb0 7a67 	vmovpl.f32	s14, s15
    8d3c:	4281      	cmp	r1, r0
    8d3e:	eef0 7a47 	vmov.f32	s15, s14
    8d42:	d1ee      	bne.n	8d22 <arm_min_f32+0x9a>
    8d44:	ed82 7a00 	vstr	s14, [r2]
    8d48:	601c      	str	r4, [r3, #0]
    8d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8d4e:	4644      	mov	r4, r8
    8d50:	e7e3      	b.n	8d1a <arm_min_f32+0x92>
    8d52:	eeb0 7a67 	vmov.f32	s14, s15
    8d56:	e7f5      	b.n	8d44 <arm_min_f32+0xbc>

00008d58 <arm_max_f32>:
    8d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d5c:	1e4f      	subs	r7, r1, #1
    8d5e:	ea5f 0897 	movs.w	r8, r7, lsr #2
    8d62:	f100 0e04 	add.w	lr, r0, #4
    8d66:	edd0 7a00 	vldr	s15, [r0]
    8d6a:	d058      	beq.n	8e1e <arm_max_f32+0xc6>
    8d6c:	3014      	adds	r0, #20
    8d6e:	46c4      	mov	ip, r8
    8d70:	2604      	movs	r6, #4
    8d72:	2400      	movs	r4, #0
    8d74:	ed10 6a04 	vldr	s12, [r0, #-16]
    8d78:	ed50 6a03 	vldr	s13, [r0, #-12]
    8d7c:	ed10 7a02 	vldr	s14, [r0, #-8]
    8d80:	ed50 5a01 	vldr	s11, [r0, #-4]
    8d84:	eeb4 6ae7 	vcmpe.f32	s12, s15
    8d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8d8c:	bfc8      	it	gt
    8d8e:	eef0 7a46 	vmovgt.f32	s15, s12
    8d92:	f1a6 0503 	sub.w	r5, r6, #3
    8d96:	eef4 7ae6 	vcmpe.f32	s15, s13
    8d9a:	bfc8      	it	gt
    8d9c:	462c      	movgt	r4, r5
    8d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8da2:	bf48      	it	mi
    8da4:	eef0 7a66 	vmovmi.f32	s15, s13
    8da8:	f1a6 0502 	sub.w	r5, r6, #2
    8dac:	eef4 7ac7 	vcmpe.f32	s15, s14
    8db0:	bf48      	it	mi
    8db2:	462c      	movmi	r4, r5
    8db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8db8:	bf48      	it	mi
    8dba:	eef0 7a47 	vmovmi.f32	s15, s14
    8dbe:	f106 35ff 	add.w	r5, r6, #4294967295
    8dc2:	eef4 7ae5 	vcmpe.f32	s15, s11
    8dc6:	bf48      	it	mi
    8dc8:	462c      	movmi	r4, r5
    8dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8dce:	bf48      	it	mi
    8dd0:	4634      	movmi	r4, r6
    8dd2:	bf48      	it	mi
    8dd4:	eef0 7a65 	vmovmi.f32	s15, s11
    8dd8:	f1bc 0c01 	subs.w	ip, ip, #1
    8ddc:	f100 0010 	add.w	r0, r0, #16
    8de0:	f106 0604 	add.w	r6, r6, #4
    8de4:	d1c6      	bne.n	8d74 <arm_max_f32+0x1c>
    8de6:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
    8dea:	f017 0003 	ands.w	r0, r7, #3
    8dee:	d018      	beq.n	8e22 <arm_max_f32+0xca>
    8df0:	1a08      	subs	r0, r1, r0
    8df2:	ecbe 7a01 	vldmia	lr!, {s14}
    8df6:	eeb4 7ae7 	vcmpe.f32	s14, s15
    8dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8dfe:	bfc8      	it	gt
    8e00:	4604      	movgt	r4, r0
    8e02:	f100 0001 	add.w	r0, r0, #1
    8e06:	bfd8      	it	le
    8e08:	eeb0 7a67 	vmovle.f32	s14, s15
    8e0c:	4281      	cmp	r1, r0
    8e0e:	eef0 7a47 	vmov.f32	s15, s14
    8e12:	d1ee      	bne.n	8df2 <arm_max_f32+0x9a>
    8e14:	ed82 7a00 	vstr	s14, [r2]
    8e18:	601c      	str	r4, [r3, #0]
    8e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8e1e:	4644      	mov	r4, r8
    8e20:	e7e3      	b.n	8dea <arm_max_f32+0x92>
    8e22:	eeb0 7a67 	vmov.f32	s14, s15
    8e26:	e7f5      	b.n	8e14 <arm_max_f32+0xbc>

00008e28 <arm_rfft_fast_init_f32>:
    8e28:	084b      	lsrs	r3, r1, #1
    8e2a:	2b80      	cmp	r3, #128	; 0x80
    8e2c:	b410      	push	{r4}
    8e2e:	8201      	strh	r1, [r0, #16]
    8e30:	8003      	strh	r3, [r0, #0]
    8e32:	d046      	beq.n	8ec2 <arm_rfft_fast_init_f32+0x9a>
    8e34:	d916      	bls.n	8e64 <arm_rfft_fast_init_f32+0x3c>
    8e36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    8e3a:	d03c      	beq.n	8eb6 <arm_rfft_fast_init_f32+0x8e>
    8e3c:	d928      	bls.n	8e90 <arm_rfft_fast_init_f32+0x68>
    8e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    8e42:	d01f      	beq.n	8e84 <arm_rfft_fast_init_f32+0x5c>
    8e44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    8e48:	d112      	bne.n	8e70 <arm_rfft_fast_init_f32+0x48>
    8e4a:	4920      	ldr	r1, [pc, #128]	; (8ecc <arm_rfft_fast_init_f32+0xa4>)
    8e4c:	4a20      	ldr	r2, [pc, #128]	; (8ed0 <arm_rfft_fast_init_f32+0xa8>)
    8e4e:	4b21      	ldr	r3, [pc, #132]	; (8ed4 <arm_rfft_fast_init_f32+0xac>)
    8e50:	f44f 646e 	mov.w	r4, #3808	; 0xee0
    8e54:	8184      	strh	r4, [r0, #12]
    8e56:	6081      	str	r1, [r0, #8]
    8e58:	6042      	str	r2, [r0, #4]
    8e5a:	6143      	str	r3, [r0, #20]
    8e5c:	f85d 4b04 	ldr.w	r4, [sp], #4
    8e60:	2000      	movs	r0, #0
    8e62:	4770      	bx	lr
    8e64:	2b20      	cmp	r3, #32
    8e66:	d01c      	beq.n	8ea2 <arm_rfft_fast_init_f32+0x7a>
    8e68:	2b40      	cmp	r3, #64	; 0x40
    8e6a:	d006      	beq.n	8e7a <arm_rfft_fast_init_f32+0x52>
    8e6c:	2b10      	cmp	r3, #16
    8e6e:	d01d      	beq.n	8eac <arm_rfft_fast_init_f32+0x84>
    8e70:	f04f 30ff 	mov.w	r0, #4294967295
    8e74:	f85d 4b04 	ldr.w	r4, [sp], #4
    8e78:	4770      	bx	lr
    8e7a:	2438      	movs	r4, #56	; 0x38
    8e7c:	4916      	ldr	r1, [pc, #88]	; (8ed8 <arm_rfft_fast_init_f32+0xb0>)
    8e7e:	4a17      	ldr	r2, [pc, #92]	; (8edc <arm_rfft_fast_init_f32+0xb4>)
    8e80:	4b17      	ldr	r3, [pc, #92]	; (8ee0 <arm_rfft_fast_init_f32+0xb8>)
    8e82:	e7e7      	b.n	8e54 <arm_rfft_fast_init_f32+0x2c>
    8e84:	f44f 64e1 	mov.w	r4, #1800	; 0x708
    8e88:	4916      	ldr	r1, [pc, #88]	; (8ee4 <arm_rfft_fast_init_f32+0xbc>)
    8e8a:	4a17      	ldr	r2, [pc, #92]	; (8ee8 <arm_rfft_fast_init_f32+0xc0>)
    8e8c:	4b17      	ldr	r3, [pc, #92]	; (8eec <arm_rfft_fast_init_f32+0xc4>)
    8e8e:	e7e1      	b.n	8e54 <arm_rfft_fast_init_f32+0x2c>
    8e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    8e94:	d1ec      	bne.n	8e70 <arm_rfft_fast_init_f32+0x48>
    8e96:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
    8e9a:	4915      	ldr	r1, [pc, #84]	; (8ef0 <arm_rfft_fast_init_f32+0xc8>)
    8e9c:	4a15      	ldr	r2, [pc, #84]	; (8ef4 <arm_rfft_fast_init_f32+0xcc>)
    8e9e:	4b16      	ldr	r3, [pc, #88]	; (8ef8 <arm_rfft_fast_init_f32+0xd0>)
    8ea0:	e7d8      	b.n	8e54 <arm_rfft_fast_init_f32+0x2c>
    8ea2:	2430      	movs	r4, #48	; 0x30
    8ea4:	4915      	ldr	r1, [pc, #84]	; (8efc <arm_rfft_fast_init_f32+0xd4>)
    8ea6:	4a16      	ldr	r2, [pc, #88]	; (8f00 <arm_rfft_fast_init_f32+0xd8>)
    8ea8:	4b16      	ldr	r3, [pc, #88]	; (8f04 <arm_rfft_fast_init_f32+0xdc>)
    8eaa:	e7d3      	b.n	8e54 <arm_rfft_fast_init_f32+0x2c>
    8eac:	2414      	movs	r4, #20
    8eae:	4916      	ldr	r1, [pc, #88]	; (8f08 <arm_rfft_fast_init_f32+0xe0>)
    8eb0:	4a16      	ldr	r2, [pc, #88]	; (8f0c <arm_rfft_fast_init_f32+0xe4>)
    8eb2:	4b17      	ldr	r3, [pc, #92]	; (8f10 <arm_rfft_fast_init_f32+0xe8>)
    8eb4:	e7ce      	b.n	8e54 <arm_rfft_fast_init_f32+0x2c>
    8eb6:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
    8eba:	4916      	ldr	r1, [pc, #88]	; (8f14 <arm_rfft_fast_init_f32+0xec>)
    8ebc:	4a16      	ldr	r2, [pc, #88]	; (8f18 <arm_rfft_fast_init_f32+0xf0>)
    8ebe:	4b17      	ldr	r3, [pc, #92]	; (8f1c <arm_rfft_fast_init_f32+0xf4>)
    8ec0:	e7c8      	b.n	8e54 <arm_rfft_fast_init_f32+0x2c>
    8ec2:	24d0      	movs	r4, #208	; 0xd0
    8ec4:	4916      	ldr	r1, [pc, #88]	; (8f20 <arm_rfft_fast_init_f32+0xf8>)
    8ec6:	4a17      	ldr	r2, [pc, #92]	; (8f24 <arm_rfft_fast_init_f32+0xfc>)
    8ec8:	4b17      	ldr	r3, [pc, #92]	; (8f28 <arm_rfft_fast_init_f32+0x100>)
    8eca:	e7c3      	b.n	8e54 <arm_rfft_fast_init_f32+0x2c>
    8ecc:	0001c82c 	.word	0x0001c82c
    8ed0:	0000d220 	.word	0x0000d220
    8ed4:	00013390 	.word	0x00013390
    8ed8:	00011320 	.word	0x00011320
    8edc:	0001e5ec 	.word	0x0001e5ec
    8ee0:	00020adc 	.word	0x00020adc
    8ee4:	00019d10 	.word	0x00019d10
    8ee8:	00017c10 	.word	0x00017c10
    8eec:	00011390 	.word	0x00011390
    8ef0:	0002076c 	.word	0x0002076c
    8ef4:	00017390 	.word	0x00017390
    8ef8:	0001e7ec 	.word	0x0001e7ec
    8efc:	0001abc8 	.word	0x0001abc8
    8f00:	00019c10 	.word	0x00019c10
    8f04:	00011220 	.word	0x00011220
    8f08:	0001ab20 	.word	0x0001ab20
    8f0c:	00017b90 	.word	0x00017b90
    8f10:	0001ab48 	.word	0x0001ab48
    8f14:	0001efec 	.word	0x0001efec
    8f18:	0001b82c 	.word	0x0001b82c
    8f1c:	0001f36c 	.word	0x0001f36c
    8f20:	00020cdc 	.word	0x00020cdc
    8f24:	0001b42c 	.word	0x0001b42c
    8f28:	0002036c 	.word	0x0002036c

00008f2c <arm_rfft_fast_f32>:
    8f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f30:	8a06      	ldrh	r6, [r0, #16]
    8f32:	0876      	lsrs	r6, r6, #1
    8f34:	4607      	mov	r7, r0
    8f36:	4615      	mov	r5, r2
    8f38:	8006      	strh	r6, [r0, #0]
    8f3a:	460c      	mov	r4, r1
    8f3c:	2b00      	cmp	r3, #0
    8f3e:	d15c      	bne.n	8ffa <arm_rfft_fast_f32+0xce>
    8f40:	461a      	mov	r2, r3
    8f42:	2301      	movs	r3, #1
    8f44:	f000 fbe4 	bl	9710 <arm_cfft_f32>
    8f48:	edd4 7a00 	vldr	s15, [r4]
    8f4c:	ed94 7a01 	vldr	s14, [r4, #4]
    8f50:	883e      	ldrh	r6, [r7, #0]
    8f52:	6978      	ldr	r0, [r7, #20]
    8f54:	ee37 7a07 	vadd.f32	s14, s14, s14
    8f58:	ee77 7aa7 	vadd.f32	s15, s15, s15
    8f5c:	eeb6 3a00 	vmov.f32	s6, #96	; 0x60
    8f60:	ee77 6a87 	vadd.f32	s13, s15, s14
    8f64:	ee77 7ac7 	vsub.f32	s15, s15, s14
    8f68:	3e01      	subs	r6, #1
    8f6a:	ee26 7a83 	vmul.f32	s14, s13, s6
    8f6e:	ee67 7a83 	vmul.f32	s15, s15, s6
    8f72:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
    8f76:	ed85 7a00 	vstr	s14, [r5]
    8f7a:	edc5 7a01 	vstr	s15, [r5, #4]
    8f7e:	3010      	adds	r0, #16
    8f80:	f105 0210 	add.w	r2, r5, #16
    8f84:	3b08      	subs	r3, #8
    8f86:	f104 0110 	add.w	r1, r4, #16
    8f8a:	ed93 7a02 	vldr	s14, [r3, #8]
    8f8e:	ed51 6a02 	vldr	s13, [r1, #-8]
    8f92:	ed10 6a02 	vldr	s12, [r0, #-8]
    8f96:	edd3 3a03 	vldr	s7, [r3, #12]
    8f9a:	ed11 5a01 	vldr	s10, [r1, #-4]
    8f9e:	ed50 5a01 	vldr	s11, [r0, #-4]
    8fa2:	ee77 7a66 	vsub.f32	s15, s14, s13
    8fa6:	ee77 4a26 	vadd.f32	s9, s14, s13
    8faa:	ee33 4a85 	vadd.f32	s8, s7, s10
    8fae:	ee66 6a27 	vmul.f32	s13, s12, s15
    8fb2:	ee25 7aa7 	vmul.f32	s14, s11, s15
    8fb6:	ee35 5a63 	vsub.f32	s10, s10, s7
    8fba:	ee76 6aa4 	vadd.f32	s13, s13, s9
    8fbe:	ee77 7a05 	vadd.f32	s15, s14, s10
    8fc2:	ee26 6a04 	vmul.f32	s12, s12, s8
    8fc6:	ee65 5a84 	vmul.f32	s11, s11, s8
    8fca:	ee77 7ac6 	vsub.f32	s15, s15, s12
    8fce:	ee36 7aa5 	vadd.f32	s14, s13, s11
    8fd2:	ee67 7a83 	vmul.f32	s15, s15, s6
    8fd6:	ee27 7a03 	vmul.f32	s14, s14, s6
    8fda:	3e01      	subs	r6, #1
    8fdc:	ed02 7a02 	vstr	s14, [r2, #-8]
    8fe0:	ed42 7a01 	vstr	s15, [r2, #-4]
    8fe4:	f1a3 0308 	sub.w	r3, r3, #8
    8fe8:	f101 0108 	add.w	r1, r1, #8
    8fec:	f100 0008 	add.w	r0, r0, #8
    8ff0:	f102 0208 	add.w	r2, r2, #8
    8ff4:	d1c9      	bne.n	8f8a <arm_rfft_fast_f32+0x5e>
    8ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8ffa:	edd1 7a00 	vldr	s15, [r1]
    8ffe:	edd1 6a01 	vldr	s13, [r1, #4]
    9002:	6941      	ldr	r1, [r0, #20]
    9004:	ee37 7aa6 	vadd.f32	s14, s15, s13
    9008:	ee77 7ae6 	vsub.f32	s15, s15, s13
    900c:	eef6 3a00 	vmov.f32	s7, #96	; 0x60
    9010:	ee27 7a23 	vmul.f32	s14, s14, s7
    9014:	ee67 7aa3 	vmul.f32	s15, s15, s7
    9018:	3e01      	subs	r6, #1
    901a:	ed82 7a00 	vstr	s14, [r2]
    901e:	edc2 7a01 	vstr	s15, [r2, #4]
    9022:	00f0      	lsls	r0, r6, #3
    9024:	b3ee      	cbz	r6, 90a2 <arm_rfft_fast_f32+0x176>
    9026:	3808      	subs	r0, #8
    9028:	f101 0e10 	add.w	lr, r1, #16
    902c:	4420      	add	r0, r4
    902e:	f104 0110 	add.w	r1, r4, #16
    9032:	f102 0c10 	add.w	ip, r2, #16
    9036:	ed90 7a02 	vldr	s14, [r0, #8]
    903a:	ed51 6a02 	vldr	s13, [r1, #-8]
    903e:	ed1e 6a02 	vldr	s12, [lr, #-8]
    9042:	ed90 4a03 	vldr	s8, [r0, #12]
    9046:	ed11 5a01 	vldr	s10, [r1, #-4]
    904a:	ed5e 5a01 	vldr	s11, [lr, #-4]
    904e:	ee76 7ac7 	vsub.f32	s15, s13, s14
    9052:	ee74 4a05 	vadd.f32	s9, s8, s10
    9056:	ee26 3a27 	vmul.f32	s6, s12, s15
    905a:	ee77 6a26 	vadd.f32	s13, s14, s13
    905e:	ee35 5a44 	vsub.f32	s10, s10, s8
    9062:	ee25 7aa7 	vmul.f32	s14, s11, s15
    9066:	ee76 6ac3 	vsub.f32	s13, s13, s6
    906a:	ee77 7a05 	vadd.f32	s15, s14, s10
    906e:	ee26 6a24 	vmul.f32	s12, s12, s9
    9072:	ee65 5aa4 	vmul.f32	s11, s11, s9
    9076:	ee77 7ac6 	vsub.f32	s15, s15, s12
    907a:	ee36 7ae5 	vsub.f32	s14, s13, s11
    907e:	ee67 7aa3 	vmul.f32	s15, s15, s7
    9082:	ee27 7a23 	vmul.f32	s14, s14, s7
    9086:	3e01      	subs	r6, #1
    9088:	ed0c 7a02 	vstr	s14, [ip, #-8]
    908c:	ed4c 7a01 	vstr	s15, [ip, #-4]
    9090:	f1a0 0008 	sub.w	r0, r0, #8
    9094:	f101 0108 	add.w	r1, r1, #8
    9098:	f10e 0e08 	add.w	lr, lr, #8
    909c:	f10c 0c08 	add.w	ip, ip, #8
    90a0:	d1c9      	bne.n	9036 <arm_rfft_fast_f32+0x10a>
    90a2:	461a      	mov	r2, r3
    90a4:	4629      	mov	r1, r5
    90a6:	4638      	mov	r0, r7
    90a8:	2301      	movs	r3, #1
    90aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    90ae:	f000 bb2f 	b.w	9710 <arm_cfft_f32>
    90b2:	bf00      	nop

000090b4 <arm_cfft_radix8by2_f32>:
    90b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    90b8:	ed2d 8b08 	vpush	{d8-d11}
    90bc:	4607      	mov	r7, r0
    90be:	4608      	mov	r0, r1
    90c0:	f8b7 e000 	ldrh.w	lr, [r7]
    90c4:	687a      	ldr	r2, [r7, #4]
    90c6:	ea4f 015e 	mov.w	r1, lr, lsr #1
    90ca:	eb00 088e 	add.w	r8, r0, lr, lsl #2
    90ce:	ea5f 0ede 	movs.w	lr, lr, lsr #3
    90d2:	f000 80b0 	beq.w	9236 <arm_cfft_radix8by2_f32+0x182>
    90d6:	008b      	lsls	r3, r1, #2
    90d8:	3310      	adds	r3, #16
    90da:	18c6      	adds	r6, r0, r3
    90dc:	3210      	adds	r2, #16
    90de:	4443      	add	r3, r8
    90e0:	f100 0510 	add.w	r5, r0, #16
    90e4:	f108 0410 	add.w	r4, r8, #16
    90e8:	ed54 1a04 	vldr	s3, [r4, #-16]
    90ec:	ed54 6a03 	vldr	s13, [r4, #-12]
    90f0:	ed13 4a04 	vldr	s8, [r3, #-16]
    90f4:	ed53 3a03 	vldr	s7, [r3, #-12]
    90f8:	ed53 5a02 	vldr	s11, [r3, #-8]
    90fc:	ed13 5a01 	vldr	s10, [r3, #-4]
    9100:	ed14 0a02 	vldr	s0, [r4, #-8]
    9104:	ed54 7a01 	vldr	s15, [r4, #-4]
    9108:	ed16 2a04 	vldr	s4, [r6, #-16]
    910c:	ed56 2a03 	vldr	s5, [r6, #-12]
    9110:	ed15 6a03 	vldr	s12, [r5, #-12]
    9114:	ed15 7a01 	vldr	s14, [r5, #-4]
    9118:	ed15 3a04 	vldr	s6, [r5, #-16]
    911c:	ed56 0a02 	vldr	s1, [r6, #-8]
    9120:	ed16 1a01 	vldr	s2, [r6, #-4]
    9124:	ed55 4a02 	vldr	s9, [r5, #-8]
    9128:	ee73 ba21 	vadd.f32	s23, s6, s3
    912c:	ee36 ba26 	vadd.f32	s22, s12, s13
    9130:	ee37 aa27 	vadd.f32	s20, s14, s15
    9134:	ee72 9a04 	vadd.f32	s19, s4, s8
    9138:	ee32 9aa3 	vadd.f32	s18, s5, s7
    913c:	ee31 8a05 	vadd.f32	s16, s2, s10
    9140:	ee74 aa80 	vadd.f32	s21, s9, s0
    9144:	ee70 8aa5 	vadd.f32	s17, s1, s11
    9148:	ed45 ba04 	vstr	s23, [r5, #-16]
    914c:	ed05 ba03 	vstr	s22, [r5, #-12]
    9150:	ed45 aa02 	vstr	s21, [r5, #-8]
    9154:	ed05 aa01 	vstr	s20, [r5, #-4]
    9158:	ed06 8a01 	vstr	s16, [r6, #-4]
    915c:	ed46 9a04 	vstr	s19, [r6, #-16]
    9160:	ed06 9a03 	vstr	s18, [r6, #-12]
    9164:	ed46 8a02 	vstr	s17, [r6, #-8]
    9168:	ee76 6a66 	vsub.f32	s13, s12, s13
    916c:	ee73 3ae2 	vsub.f32	s7, s7, s5
    9170:	ed12 6a03 	vldr	s12, [r2, #-12]
    9174:	ed52 2a04 	vldr	s5, [r2, #-16]
    9178:	ee33 3a61 	vsub.f32	s6, s6, s3
    917c:	ee34 4a42 	vsub.f32	s8, s8, s4
    9180:	ee26 8a86 	vmul.f32	s16, s13, s12
    9184:	ee24 2a06 	vmul.f32	s4, s8, s12
    9188:	ee63 1a22 	vmul.f32	s3, s6, s5
    918c:	ee24 4a22 	vmul.f32	s8, s8, s5
    9190:	ee23 3a06 	vmul.f32	s6, s6, s12
    9194:	ee66 6aa2 	vmul.f32	s13, s13, s5
    9198:	ee23 6a86 	vmul.f32	s12, s7, s12
    919c:	ee63 3aa2 	vmul.f32	s7, s7, s5
    91a0:	ee36 6a04 	vadd.f32	s12, s12, s8
    91a4:	ee76 6ac3 	vsub.f32	s13, s13, s6
    91a8:	ee72 3a63 	vsub.f32	s7, s4, s7
    91ac:	ee71 2a88 	vadd.f32	s5, s3, s16
    91b0:	ed44 6a03 	vstr	s13, [r4, #-12]
    91b4:	ed44 2a04 	vstr	s5, [r4, #-16]
    91b8:	ed43 3a04 	vstr	s7, [r3, #-16]
    91bc:	ed03 6a03 	vstr	s12, [r3, #-12]
    91c0:	ee77 7a67 	vsub.f32	s15, s14, s15
    91c4:	ee75 6ae0 	vsub.f32	s13, s11, s1
    91c8:	ed12 7a01 	vldr	s14, [r2, #-4]
    91cc:	ed52 5a02 	vldr	s11, [r2, #-8]
    91d0:	ee35 6a41 	vsub.f32	s12, s10, s2
    91d4:	ee74 4ac0 	vsub.f32	s9, s9, s0
    91d8:	ee67 3a87 	vmul.f32	s7, s15, s14
    91dc:	ee26 5a87 	vmul.f32	s10, s13, s14
    91e0:	ee24 4aa5 	vmul.f32	s8, s9, s11
    91e4:	ee67 7aa5 	vmul.f32	s15, s15, s11
    91e8:	ee64 4a87 	vmul.f32	s9, s9, s14
    91ec:	ee66 6aa5 	vmul.f32	s13, s13, s11
    91f0:	ee26 7a07 	vmul.f32	s14, s12, s14
    91f4:	ee26 6a25 	vmul.f32	s12, s12, s11
    91f8:	ee77 7ae4 	vsub.f32	s15, s15, s9
    91fc:	ee74 5a23 	vadd.f32	s11, s8, s7
    9200:	ee35 6a46 	vsub.f32	s12, s10, s12
    9204:	ee37 7a26 	vadd.f32	s14, s14, s13
    9208:	f1be 0e01 	subs.w	lr, lr, #1
    920c:	ed44 5a02 	vstr	s11, [r4, #-8]
    9210:	f105 0510 	add.w	r5, r5, #16
    9214:	ed44 7a01 	vstr	s15, [r4, #-4]
    9218:	f106 0610 	add.w	r6, r6, #16
    921c:	ed03 6a02 	vstr	s12, [r3, #-8]
    9220:	ed03 7a01 	vstr	s14, [r3, #-4]
    9224:	f102 0210 	add.w	r2, r2, #16
    9228:	f104 0410 	add.w	r4, r4, #16
    922c:	f103 0310 	add.w	r3, r3, #16
    9230:	f47f af5a 	bne.w	90e8 <arm_cfft_radix8by2_f32+0x34>
    9234:	687a      	ldr	r2, [r7, #4]
    9236:	b28c      	uxth	r4, r1
    9238:	4621      	mov	r1, r4
    923a:	2302      	movs	r3, #2
    923c:	f000 fce6 	bl	9c0c <arm_radix8_butterfly_f32>
    9240:	ecbd 8b08 	vpop	{d8-d11}
    9244:	4621      	mov	r1, r4
    9246:	687a      	ldr	r2, [r7, #4]
    9248:	4640      	mov	r0, r8
    924a:	2302      	movs	r3, #2
    924c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9250:	f000 bcdc 	b.w	9c0c <arm_radix8_butterfly_f32>

00009254 <arm_cfft_radix8by4_f32>:
    9254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9258:	ed2d 8b0a 	vpush	{d8-d12}
    925c:	8802      	ldrh	r2, [r0, #0]
    925e:	ed91 6a00 	vldr	s12, [r1]
    9262:	b08f      	sub	sp, #60	; 0x3c
    9264:	460f      	mov	r7, r1
    9266:	0852      	lsrs	r2, r2, #1
    9268:	6841      	ldr	r1, [r0, #4]
    926a:	900c      	str	r0, [sp, #48]	; 0x30
    926c:	0093      	lsls	r3, r2, #2
    926e:	4638      	mov	r0, r7
    9270:	4418      	add	r0, r3
    9272:	4606      	mov	r6, r0
    9274:	9009      	str	r0, [sp, #36]	; 0x24
    9276:	4418      	add	r0, r3
    9278:	edd0 6a00 	vldr	s13, [r0]
    927c:	ed96 4a00 	vldr	s8, [r6]
    9280:	edd6 2a01 	vldr	s5, [r6, #4]
    9284:	edd0 7a01 	vldr	s15, [r0, #4]
    9288:	900a      	str	r0, [sp, #40]	; 0x28
    928a:	ee76 5a26 	vadd.f32	s11, s12, s13
    928e:	4604      	mov	r4, r0
    9290:	4625      	mov	r5, r4
    9292:	441c      	add	r4, r3
    9294:	edd4 4a00 	vldr	s9, [r4]
    9298:	ed97 7a01 	vldr	s14, [r7, #4]
    929c:	ed94 3a01 	vldr	s6, [r4, #4]
    92a0:	9401      	str	r4, [sp, #4]
    92a2:	ee35 5a84 	vadd.f32	s10, s11, s8
    92a6:	4630      	mov	r0, r6
    92a8:	ee35 5a24 	vadd.f32	s10, s10, s9
    92ac:	463e      	mov	r6, r7
    92ae:	ee15 ea10 	vmov	lr, s10
    92b2:	ee76 6a66 	vsub.f32	s13, s12, s13
    92b6:	f846 eb08 	str.w	lr, [r6], #8
    92ba:	ee37 6a27 	vadd.f32	s12, s14, s15
    92be:	ed90 5a01 	vldr	s10, [r0, #4]
    92c2:	9605      	str	r6, [sp, #20]
    92c4:	ee77 7a67 	vsub.f32	s15, s14, s15
    92c8:	9e01      	ldr	r6, [sp, #4]
    92ca:	9707      	str	r7, [sp, #28]
    92cc:	ee76 3aa2 	vadd.f32	s7, s13, s5
    92d0:	ed96 2a01 	vldr	s4, [r6, #4]
    92d4:	ee36 7a05 	vadd.f32	s14, s12, s10
    92d8:	ee75 5ac4 	vsub.f32	s11, s11, s8
    92dc:	ee37 5ac4 	vsub.f32	s10, s15, s8
    92e0:	ee77 7a84 	vadd.f32	s15, s15, s8
    92e4:	ee33 4ac3 	vsub.f32	s8, s7, s6
    92e8:	4604      	mov	r4, r0
    92ea:	46a3      	mov	fp, r4
    92ec:	ee37 7a02 	vadd.f32	s14, s14, s4
    92f0:	ee35 5a24 	vadd.f32	s10, s10, s9
    92f4:	ee14 8a10 	vmov	r8, s8
    92f8:	46a4      	mov	ip, r4
    92fa:	ee75 5ae4 	vsub.f32	s11, s11, s9
    92fe:	ed87 7a01 	vstr	s14, [r7, #4]
    9302:	f84b 8b08 	str.w	r8, [fp], #8
    9306:	f1ac 0704 	sub.w	r7, ip, #4
    930a:	ed8c 5a01 	vstr	s10, [ip, #4]
    930e:	f101 0c08 	add.w	ip, r1, #8
    9312:	462c      	mov	r4, r5
    9314:	f8cd c010 	str.w	ip, [sp, #16]
    9318:	ee15 ca90 	vmov	ip, s11
    931c:	ee36 6a62 	vsub.f32	s12, s12, s5
    9320:	f844 cb08 	str.w	ip, [r4], #8
    9324:	ee76 6ae2 	vsub.f32	s13, s13, s5
    9328:	ee36 6a43 	vsub.f32	s12, s12, s6
    932c:	9406      	str	r4, [sp, #24]
    932e:	ee76 6a83 	vadd.f32	s13, s13, s6
    9332:	f101 0410 	add.w	r4, r1, #16
    9336:	0852      	lsrs	r2, r2, #1
    9338:	9402      	str	r4, [sp, #8]
    933a:	ed85 6a01 	vstr	s12, [r5, #4]
    933e:	462c      	mov	r4, r5
    9340:	f101 0518 	add.w	r5, r1, #24
    9344:	920b      	str	r2, [sp, #44]	; 0x2c
    9346:	46b2      	mov	sl, r6
    9348:	9503      	str	r5, [sp, #12]
    934a:	ee77 7ae4 	vsub.f32	s15, s15, s9
    934e:	3a02      	subs	r2, #2
    9350:	ee16 5a90 	vmov	r5, s13
    9354:	46b6      	mov	lr, r6
    9356:	4630      	mov	r0, r6
    9358:	0852      	lsrs	r2, r2, #1
    935a:	f84a 5b08 	str.w	r5, [sl], #8
    935e:	f1a0 0604 	sub.w	r6, r0, #4
    9362:	edce 7a01 	vstr	s15, [lr, #4]
    9366:	9208      	str	r2, [sp, #32]
    9368:	f000 8130 	beq.w	95cc <arm_cfft_radix8by4_f32+0x378>
    936c:	4691      	mov	r9, r2
    936e:	9a07      	ldr	r2, [sp, #28]
    9370:	f8dd 8008 	ldr.w	r8, [sp, #8]
    9374:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
    9378:	3b08      	subs	r3, #8
    937a:	f102 0510 	add.w	r5, r2, #16
    937e:	f101 0c20 	add.w	ip, r1, #32
    9382:	f1a4 020c 	sub.w	r2, r4, #12
    9386:	f101 0e30 	add.w	lr, r1, #48	; 0x30
    938a:	4433      	add	r3, r6
    938c:	3410      	adds	r4, #16
    938e:	4650      	mov	r0, sl
    9390:	4659      	mov	r1, fp
    9392:	ed55 3a02 	vldr	s7, [r5, #-8]
    9396:	ed14 5a02 	vldr	s10, [r4, #-8]
    939a:	ed91 7a00 	vldr	s14, [r1]
    939e:	edd0 7a00 	vldr	s15, [r0]
    93a2:	ed54 5a01 	vldr	s11, [r4, #-4]
    93a6:	ed15 4a01 	vldr	s8, [r5, #-4]
    93aa:	edd0 6a01 	vldr	s13, [r0, #4]
    93ae:	ed91 6a01 	vldr	s12, [r1, #4]
    93b2:	ee33 8a85 	vadd.f32	s16, s7, s10
    93b6:	ee34 0a25 	vadd.f32	s0, s8, s11
    93ba:	ee78 4a07 	vadd.f32	s9, s16, s14
    93be:	ee74 5a65 	vsub.f32	s11, s8, s11
    93c2:	ee74 4aa7 	vadd.f32	s9, s9, s15
    93c6:	ee33 5ac5 	vsub.f32	s10, s7, s10
    93ca:	ed45 4a02 	vstr	s9, [r5, #-8]
    93ce:	edd1 4a01 	vldr	s9, [r1, #4]
    93d2:	ed90 4a01 	vldr	s8, [r0, #4]
    93d6:	ee70 4a24 	vadd.f32	s9, s0, s9
    93da:	ee75 aa06 	vadd.f32	s21, s10, s12
    93de:	ee74 4a84 	vadd.f32	s9, s9, s8
    93e2:	ee35 aac7 	vsub.f32	s20, s11, s14
    93e6:	ed45 4a01 	vstr	s9, [r5, #-4]
    93ea:	edd6 1a00 	vldr	s3, [r6]
    93ee:	edd7 0a00 	vldr	s1, [r7]
    93f2:	ed92 4a02 	vldr	s8, [r2, #8]
    93f6:	edd3 3a02 	vldr	s7, [r3, #8]
    93fa:	ed93 2a01 	vldr	s4, [r3, #4]
    93fe:	ed16 1a01 	vldr	s2, [r6, #-4]
    9402:	edd2 2a01 	vldr	s5, [r2, #4]
    9406:	ed57 9a01 	vldr	s19, [r7, #-4]
    940a:	ee70 4aa1 	vadd.f32	s9, s1, s3
    940e:	ee39 3a81 	vadd.f32	s6, s19, s2
    9412:	ee74 8a84 	vadd.f32	s17, s9, s8
    9416:	ee70 1ae1 	vsub.f32	s3, s1, s3
    941a:	ee78 8aa3 	vadd.f32	s17, s17, s7
    941e:	ee7a aae6 	vsub.f32	s21, s21, s13
    9422:	ee18 aa90 	vmov	sl, s17
    9426:	f847 a908 	str.w	sl, [r7], #-8
    942a:	edd2 8a01 	vldr	s17, [r2, #4]
    942e:	ed93 9a01 	vldr	s18, [r3, #4]
    9432:	ee73 8a28 	vadd.f32	s17, s6, s17
    9436:	ee3a aa27 	vadd.f32	s20, s20, s15
    943a:	ee78 8a89 	vadd.f32	s17, s17, s18
    943e:	ee74 0a63 	vsub.f32	s1, s8, s7
    9442:	edc7 8a01 	vstr	s17, [r7, #4]
    9446:	ed18 ba02 	vldr	s22, [r8, #-8]
    944a:	ed58 8a01 	vldr	s17, [r8, #-4]
    944e:	ee39 1ac1 	vsub.f32	s2, s19, s2
    9452:	ee6a ba28 	vmul.f32	s23, s20, s17
    9456:	ee2a ca8b 	vmul.f32	s24, s21, s22
    945a:	ee71 9ae2 	vsub.f32	s19, s3, s5
    945e:	ee31 9a20 	vadd.f32	s18, s2, s1
    9462:	ee79 9a82 	vadd.f32	s19, s19, s4
    9466:	ee3c ca2b 	vadd.f32	s24, s24, s23
    946a:	ee6a aaa8 	vmul.f32	s21, s21, s17
    946e:	ee69 baa8 	vmul.f32	s23, s19, s17
    9472:	ee2a aa0b 	vmul.f32	s20, s20, s22
    9476:	ee69 9a8b 	vmul.f32	s19, s19, s22
    947a:	ee69 8a28 	vmul.f32	s17, s18, s17
    947e:	ee29 ba0b 	vmul.f32	s22, s18, s22
    9482:	ee1c aa10 	vmov	sl, s24
    9486:	ee78 8aa9 	vadd.f32	s17, s17, s19
    948a:	f841 ab08 	str.w	sl, [r1], #8
    948e:	ee3a aa6a 	vsub.f32	s20, s20, s21
    9492:	ee3b bacb 	vsub.f32	s22, s23, s22
    9496:	ee34 4ac4 	vsub.f32	s8, s9, s8
    949a:	ee33 3a62 	vsub.f32	s6, s6, s5
    949e:	ed01 aa01 	vstr	s20, [r1, #-4]
    94a2:	edc2 8a01 	vstr	s17, [r2, #4]
    94a6:	ed82 ba02 	vstr	s22, [r2, #8]
    94aa:	ed5c 4a04 	vldr	s9, [ip, #-16]
    94ae:	ee74 3a63 	vsub.f32	s7, s8, s7
    94b2:	ee38 8a47 	vsub.f32	s16, s16, s14
    94b6:	ed1c 4a03 	vldr	s8, [ip, #-12]
    94ba:	ee30 0a46 	vsub.f32	s0, s0, s12
    94be:	ee33 3a42 	vsub.f32	s6, s6, s4
    94c2:	ee38 8a67 	vsub.f32	s16, s16, s15
    94c6:	ee30 0a66 	vsub.f32	s0, s0, s13
    94ca:	ee23 9ae4 	vnmul.f32	s18, s7, s9
    94ce:	ee63 8a04 	vmul.f32	s17, s6, s8
    94d2:	ee28 aa24 	vmul.f32	s20, s16, s9
    94d6:	ee60 9a04 	vmul.f32	s19, s0, s8
    94da:	ee28 8a04 	vmul.f32	s16, s16, s8
    94de:	ee20 0a24 	vmul.f32	s0, s0, s9
    94e2:	ee63 3a84 	vmul.f32	s7, s7, s8
    94e6:	ee39 4a68 	vsub.f32	s8, s18, s17
    94ea:	ee7a 9a29 	vadd.f32	s19, s20, s19
    94ee:	ee14 aa10 	vmov	sl, s8
    94f2:	ee30 0a48 	vsub.f32	s0, s0, s16
    94f6:	ee63 4a24 	vmul.f32	s9, s6, s9
    94fa:	ed44 9a02 	vstr	s19, [r4, #-8]
    94fe:	ee73 3ae4 	vsub.f32	s7, s7, s9
    9502:	ed04 0a01 	vstr	s0, [r4, #-4]
    9506:	f846 a908 	str.w	sl, [r6], #-8
    950a:	ee35 6a46 	vsub.f32	s12, s10, s12
    950e:	ee35 7a87 	vadd.f32	s14, s11, s14
    9512:	edc6 3a01 	vstr	s7, [r6, #4]
    9516:	ee76 6a26 	vadd.f32	s13, s12, s13
    951a:	ee77 7a67 	vsub.f32	s15, s14, s15
    951e:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
    9522:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
    9526:	ee67 5a86 	vmul.f32	s11, s15, s12
    952a:	ee26 5a87 	vmul.f32	s10, s13, s14
    952e:	ee72 2a62 	vsub.f32	s5, s4, s5
    9532:	ee30 1ac1 	vsub.f32	s2, s1, s2
    9536:	ee72 2ae1 	vsub.f32	s5, s5, s3
    953a:	ee75 5a25 	vadd.f32	s11, s10, s11
    953e:	ee62 0a86 	vmul.f32	s1, s5, s12
    9542:	ee66 6a86 	vmul.f32	s13, s13, s12
    9546:	ee67 7a87 	vmul.f32	s15, s15, s14
    954a:	ee21 6a06 	vmul.f32	s12, s2, s12
    954e:	ee62 2a87 	vmul.f32	s5, s5, s14
    9552:	ee21 1a07 	vmul.f32	s2, s2, s14
    9556:	ee15 aa90 	vmov	sl, s11
    955a:	ee77 7ae6 	vsub.f32	s15, s15, s13
    955e:	f840 ab08 	str.w	sl, [r0], #8
    9562:	ee30 1ac1 	vsub.f32	s2, s1, s2
    9566:	ee76 2a22 	vadd.f32	s5, s12, s5
    956a:	f1b9 0901 	subs.w	r9, r9, #1
    956e:	ed40 7a01 	vstr	s15, [r0, #-4]
    9572:	f105 0508 	add.w	r5, r5, #8
    9576:	ed83 1a02 	vstr	s2, [r3, #8]
    957a:	edc3 2a01 	vstr	s5, [r3, #4]
    957e:	f108 0808 	add.w	r8, r8, #8
    9582:	f1a2 0208 	sub.w	r2, r2, #8
    9586:	f10c 0c10 	add.w	ip, ip, #16
    958a:	f104 0408 	add.w	r4, r4, #8
    958e:	f10e 0e18 	add.w	lr, lr, #24
    9592:	f1a3 0308 	sub.w	r3, r3, #8
    9596:	f47f aefc 	bne.w	9392 <arm_cfft_radix8by4_f32+0x13e>
    959a:	9908      	ldr	r1, [sp, #32]
    959c:	9802      	ldr	r0, [sp, #8]
    959e:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
    95a2:	00cb      	lsls	r3, r1, #3
    95a4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    95a8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
    95ac:	9102      	str	r1, [sp, #8]
    95ae:	9905      	ldr	r1, [sp, #20]
    95b0:	4419      	add	r1, r3
    95b2:	9105      	str	r1, [sp, #20]
    95b4:	9904      	ldr	r1, [sp, #16]
    95b6:	4419      	add	r1, r3
    95b8:	9104      	str	r1, [sp, #16]
    95ba:	9906      	ldr	r1, [sp, #24]
    95bc:	449b      	add	fp, r3
    95be:	4419      	add	r1, r3
    95c0:	449a      	add	sl, r3
    95c2:	9b03      	ldr	r3, [sp, #12]
    95c4:	9106      	str	r1, [sp, #24]
    95c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    95ca:	9303      	str	r3, [sp, #12]
    95cc:	9a05      	ldr	r2, [sp, #20]
    95ce:	9806      	ldr	r0, [sp, #24]
    95d0:	ed92 4a00 	vldr	s8, [r2]
    95d4:	ed90 7a00 	vldr	s14, [r0]
    95d8:	ed9b 3a00 	vldr	s6, [fp]
    95dc:	edda 3a00 	vldr	s7, [sl]
    95e0:	edd2 4a01 	vldr	s9, [r2, #4]
    95e4:	edd0 6a01 	vldr	s13, [r0, #4]
    95e8:	ed9a 2a01 	vldr	s4, [sl, #4]
    95ec:	eddb 7a01 	vldr	s15, [fp, #4]
    95f0:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
    95f4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    95f6:	ee34 6a07 	vadd.f32	s12, s8, s14
    95fa:	ee74 5aa6 	vadd.f32	s11, s9, s13
    95fe:	ee36 5a03 	vadd.f32	s10, s12, s6
    9602:	ee74 6ae6 	vsub.f32	s13, s9, s13
    9606:	ee35 5a23 	vadd.f32	s10, s10, s7
    960a:	ee34 7a47 	vsub.f32	s14, s8, s14
    960e:	ed82 5a00 	vstr	s10, [r2]
    9612:	ed9b 5a01 	vldr	s10, [fp, #4]
    9616:	edda 4a01 	vldr	s9, [sl, #4]
    961a:	ee35 5a85 	vadd.f32	s10, s11, s10
    961e:	ee37 4a27 	vadd.f32	s8, s14, s15
    9622:	ee35 5a24 	vadd.f32	s10, s10, s9
    9626:	ee76 4ac3 	vsub.f32	s9, s13, s6
    962a:	ed82 5a01 	vstr	s10, [r2, #4]
    962e:	9a04      	ldr	r2, [sp, #16]
    9630:	ee34 5aa3 	vadd.f32	s10, s9, s7
    9634:	edd2 1a00 	vldr	s3, [r2]
    9638:	edd2 2a01 	vldr	s5, [r2, #4]
    963c:	9a02      	ldr	r2, [sp, #8]
    963e:	ee34 4a42 	vsub.f32	s8, s8, s4
    9642:	ee36 6a43 	vsub.f32	s12, s12, s6
    9646:	ee64 4a21 	vmul.f32	s9, s8, s3
    964a:	ee24 4a22 	vmul.f32	s8, s8, s5
    964e:	ee65 2a22 	vmul.f32	s5, s10, s5
    9652:	ee25 5a21 	vmul.f32	s10, s10, s3
    9656:	ee74 2aa2 	vadd.f32	s5, s9, s5
    965a:	ee35 5a44 	vsub.f32	s10, s10, s8
    965e:	ee75 5ae7 	vsub.f32	s11, s11, s15
    9662:	edcb 2a00 	vstr	s5, [fp]
    9666:	ed8b 5a01 	vstr	s10, [fp, #4]
    966a:	ed92 4a01 	vldr	s8, [r2, #4]
    966e:	ed92 5a00 	vldr	s10, [r2]
    9672:	9a03      	ldr	r2, [sp, #12]
    9674:	ee36 6a63 	vsub.f32	s12, s12, s7
    9678:	ee75 5ac2 	vsub.f32	s11, s11, s4
    967c:	ee66 4a05 	vmul.f32	s9, s12, s10
    9680:	ee25 5a85 	vmul.f32	s10, s11, s10
    9684:	ee26 6a04 	vmul.f32	s12, s12, s8
    9688:	ee65 5a84 	vmul.f32	s11, s11, s8
    968c:	ee35 6a46 	vsub.f32	s12, s10, s12
    9690:	ee74 5aa5 	vadd.f32	s11, s9, s11
    9694:	ee76 6a83 	vadd.f32	s13, s13, s6
    9698:	ee37 7a67 	vsub.f32	s14, s14, s15
    969c:	ed80 6a01 	vstr	s12, [r0, #4]
    96a0:	edc0 5a00 	vstr	s11, [r0]
    96a4:	edd2 5a01 	vldr	s11, [r2, #4]
    96a8:	9807      	ldr	r0, [sp, #28]
    96aa:	ee77 7a02 	vadd.f32	s15, s14, s4
    96ae:	ee36 7ae3 	vsub.f32	s14, s13, s7
    96b2:	edd2 6a00 	vldr	s13, [r2]
    96b6:	ee27 6aa6 	vmul.f32	s12, s15, s13
    96ba:	ee67 6a26 	vmul.f32	s13, s14, s13
    96be:	ee67 7aa5 	vmul.f32	s15, s15, s11
    96c2:	ee27 7a25 	vmul.f32	s14, s14, s11
    96c6:	ee76 7ae7 	vsub.f32	s15, s13, s15
    96ca:	ee36 7a07 	vadd.f32	s14, s12, s14
    96ce:	edca 7a01 	vstr	s15, [sl, #4]
    96d2:	ed8a 7a00 	vstr	s14, [sl]
    96d6:	6872      	ldr	r2, [r6, #4]
    96d8:	4621      	mov	r1, r4
    96da:	2304      	movs	r3, #4
    96dc:	f000 fa96 	bl	9c0c <arm_radix8_butterfly_f32>
    96e0:	9809      	ldr	r0, [sp, #36]	; 0x24
    96e2:	6872      	ldr	r2, [r6, #4]
    96e4:	4621      	mov	r1, r4
    96e6:	2304      	movs	r3, #4
    96e8:	f000 fa90 	bl	9c0c <arm_radix8_butterfly_f32>
    96ec:	980a      	ldr	r0, [sp, #40]	; 0x28
    96ee:	6872      	ldr	r2, [r6, #4]
    96f0:	4621      	mov	r1, r4
    96f2:	2304      	movs	r3, #4
    96f4:	f000 fa8a 	bl	9c0c <arm_radix8_butterfly_f32>
    96f8:	6872      	ldr	r2, [r6, #4]
    96fa:	9801      	ldr	r0, [sp, #4]
    96fc:	4621      	mov	r1, r4
    96fe:	2304      	movs	r3, #4
    9700:	b00f      	add	sp, #60	; 0x3c
    9702:	ecbd 8b0a 	vpop	{d8-d12}
    9706:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    970a:	f000 ba7f 	b.w	9c0c <arm_radix8_butterfly_f32>
    970e:	bf00      	nop

00009710 <arm_cfft_f32>:
    9710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9714:	2a01      	cmp	r2, #1
    9716:	4606      	mov	r6, r0
    9718:	4617      	mov	r7, r2
    971a:	460c      	mov	r4, r1
    971c:	4698      	mov	r8, r3
    971e:	8805      	ldrh	r5, [r0, #0]
    9720:	d054      	beq.n	97cc <arm_cfft_f32+0xbc>
    9722:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
    9726:	d04c      	beq.n	97c2 <arm_cfft_f32+0xb2>
    9728:	d916      	bls.n	9758 <arm_cfft_f32+0x48>
    972a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    972e:	d01a      	beq.n	9766 <arm_cfft_f32+0x56>
    9730:	d95c      	bls.n	97ec <arm_cfft_f32+0xdc>
    9732:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
    9736:	d044      	beq.n	97c2 <arm_cfft_f32+0xb2>
    9738:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    973c:	d105      	bne.n	974a <arm_cfft_f32+0x3a>
    973e:	2301      	movs	r3, #1
    9740:	6872      	ldr	r2, [r6, #4]
    9742:	4629      	mov	r1, r5
    9744:	4620      	mov	r0, r4
    9746:	f000 fa61 	bl	9c0c <arm_radix8_butterfly_f32>
    974a:	f1b8 0f00 	cmp.w	r8, #0
    974e:	d111      	bne.n	9774 <arm_cfft_f32+0x64>
    9750:	2f01      	cmp	r7, #1
    9752:	d016      	beq.n	9782 <arm_cfft_f32+0x72>
    9754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9758:	2d20      	cmp	r5, #32
    975a:	d032      	beq.n	97c2 <arm_cfft_f32+0xb2>
    975c:	d94a      	bls.n	97f4 <arm_cfft_f32+0xe4>
    975e:	2d40      	cmp	r5, #64	; 0x40
    9760:	d0ed      	beq.n	973e <arm_cfft_f32+0x2e>
    9762:	2d80      	cmp	r5, #128	; 0x80
    9764:	d1f1      	bne.n	974a <arm_cfft_f32+0x3a>
    9766:	4621      	mov	r1, r4
    9768:	4630      	mov	r0, r6
    976a:	f7ff fca3 	bl	90b4 <arm_cfft_radix8by2_f32>
    976e:	f1b8 0f00 	cmp.w	r8, #0
    9772:	d0ed      	beq.n	9750 <arm_cfft_f32+0x40>
    9774:	68b2      	ldr	r2, [r6, #8]
    9776:	89b1      	ldrh	r1, [r6, #12]
    9778:	4620      	mov	r0, r4
    977a:	f000 f9e7 	bl	9b4c <arm_bitreversal_32>
    977e:	2f01      	cmp	r7, #1
    9780:	d1e8      	bne.n	9754 <arm_cfft_f32+0x44>
    9782:	ee07 5a90 	vmov	s15, r5
    9786:	eef8 7a67 	vcvt.f32.u32	s15, s15
    978a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
    978e:	eec7 6a27 	vdiv.f32	s13, s14, s15
    9792:	2d00      	cmp	r5, #0
    9794:	d0de      	beq.n	9754 <arm_cfft_f32+0x44>
    9796:	f104 0108 	add.w	r1, r4, #8
    979a:	2300      	movs	r3, #0
    979c:	3301      	adds	r3, #1
    979e:	429d      	cmp	r5, r3
    97a0:	f101 0108 	add.w	r1, r1, #8
    97a4:	ed11 7a04 	vldr	s14, [r1, #-16]
    97a8:	ed51 7a03 	vldr	s15, [r1, #-12]
    97ac:	ee27 7a26 	vmul.f32	s14, s14, s13
    97b0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
    97b4:	ed01 7a04 	vstr	s14, [r1, #-16]
    97b8:	ed41 7a03 	vstr	s15, [r1, #-12]
    97bc:	d1ee      	bne.n	979c <arm_cfft_f32+0x8c>
    97be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    97c2:	4621      	mov	r1, r4
    97c4:	4630      	mov	r0, r6
    97c6:	f7ff fd45 	bl	9254 <arm_cfft_radix8by4_f32>
    97ca:	e7be      	b.n	974a <arm_cfft_f32+0x3a>
    97cc:	b1ad      	cbz	r5, 97fa <arm_cfft_f32+0xea>
    97ce:	f101 030c 	add.w	r3, r1, #12
    97d2:	2200      	movs	r2, #0
    97d4:	ed53 7a02 	vldr	s15, [r3, #-8]
    97d8:	3201      	adds	r2, #1
    97da:	eef1 7a67 	vneg.f32	s15, s15
    97de:	4295      	cmp	r5, r2
    97e0:	ed43 7a02 	vstr	s15, [r3, #-8]
    97e4:	f103 0308 	add.w	r3, r3, #8
    97e8:	d1f4      	bne.n	97d4 <arm_cfft_f32+0xc4>
    97ea:	e79a      	b.n	9722 <arm_cfft_f32+0x12>
    97ec:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    97f0:	d0a5      	beq.n	973e <arm_cfft_f32+0x2e>
    97f2:	e7aa      	b.n	974a <arm_cfft_f32+0x3a>
    97f4:	2d10      	cmp	r5, #16
    97f6:	d0b6      	beq.n	9766 <arm_cfft_f32+0x56>
    97f8:	e7a7      	b.n	974a <arm_cfft_f32+0x3a>
    97fa:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
    97fe:	d894      	bhi.n	972a <arm_cfft_f32+0x1a>
    9800:	e7aa      	b.n	9758 <arm_cfft_f32+0x48>
    9802:	bf00      	nop

00009804 <arm_cmplx_mag_f32>:
    9804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9808:	ea5f 0892 	movs.w	r8, r2, lsr #2
    980c:	b084      	sub	sp, #16
    980e:	d07f      	beq.n	9910 <arm_cmplx_mag_f32+0x10c>
    9810:	2700      	movs	r7, #0
    9812:	f100 0420 	add.w	r4, r0, #32
    9816:	f101 0510 	add.w	r5, r1, #16
    981a:	4646      	mov	r6, r8
    981c:	e05a      	b.n	98d4 <arm_cmplx_mag_f32+0xd0>
    981e:	eeb1 0ae7 	vsqrt.f32	s0, s15
    9822:	eeb4 0a40 	vcmp.f32	s0, s0
    9826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    982a:	f040 80a4 	bne.w	9976 <arm_cmplx_mag_f32+0x172>
    982e:	ed05 0a04 	vstr	s0, [r5, #-16]
    9832:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
    9836:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
    983a:	ee67 7aa7 	vmul.f32	s15, s15, s15
    983e:	ee20 0a00 	vmul.f32	s0, s0, s0
    9842:	ee77 7a80 	vadd.f32	s15, s15, s0
    9846:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    984a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    984e:	f2c0 808f 	blt.w	9970 <arm_cmplx_mag_f32+0x16c>
    9852:	eeb1 0ae7 	vsqrt.f32	s0, s15
    9856:	eeb4 0a40 	vcmp.f32	s0, s0
    985a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    985e:	f040 80af 	bne.w	99c0 <arm_cmplx_mag_f32+0x1bc>
    9862:	ed05 0a03 	vstr	s0, [r5, #-12]
    9866:	ed54 7a04 	vldr	s15, [r4, #-16]
    986a:	ed14 0a03 	vldr	s0, [r4, #-12]
    986e:	ee67 7aa7 	vmul.f32	s15, s15, s15
    9872:	ee20 0a00 	vmul.f32	s0, s0, s0
    9876:	ee77 7a80 	vadd.f32	s15, s15, s0
    987a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    987e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9882:	db72      	blt.n	996a <arm_cmplx_mag_f32+0x166>
    9884:	eeb1 0ae7 	vsqrt.f32	s0, s15
    9888:	eeb4 0a40 	vcmp.f32	s0, s0
    988c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9890:	f040 808c 	bne.w	99ac <arm_cmplx_mag_f32+0x1a8>
    9894:	ed05 0a02 	vstr	s0, [r5, #-8]
    9898:	ed54 7a02 	vldr	s15, [r4, #-8]
    989c:	ed14 0a01 	vldr	s0, [r4, #-4]
    98a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
    98a4:	ee20 0a00 	vmul.f32	s0, s0, s0
    98a8:	ee77 7a80 	vadd.f32	s15, s15, s0
    98ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    98b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    98b4:	db20      	blt.n	98f8 <arm_cmplx_mag_f32+0xf4>
    98b6:	eeb1 0ae7 	vsqrt.f32	s0, s15
    98ba:	eeb4 0a40 	vcmp.f32	s0, s0
    98be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    98c2:	d169      	bne.n	9998 <arm_cmplx_mag_f32+0x194>
    98c4:	3e01      	subs	r6, #1
    98c6:	ed05 0a01 	vstr	s0, [r5, #-4]
    98ca:	f104 0420 	add.w	r4, r4, #32
    98ce:	f105 0510 	add.w	r5, r5, #16
    98d2:	d019      	beq.n	9908 <arm_cmplx_mag_f32+0x104>
    98d4:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
    98d8:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
    98dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
    98e0:	ee20 0a00 	vmul.f32	s0, s0, s0
    98e4:	ee77 7a80 	vadd.f32	s15, s15, s0
    98e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    98ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    98f0:	da95      	bge.n	981e <arm_cmplx_mag_f32+0x1a>
    98f2:	f845 7c10 	str.w	r7, [r5, #-16]
    98f6:	e79c      	b.n	9832 <arm_cmplx_mag_f32+0x2e>
    98f8:	3e01      	subs	r6, #1
    98fa:	f845 7c04 	str.w	r7, [r5, #-4]
    98fe:	f104 0420 	add.w	r4, r4, #32
    9902:	f105 0510 	add.w	r5, r5, #16
    9906:	d1e5      	bne.n	98d4 <arm_cmplx_mag_f32+0xd0>
    9908:	eb00 1048 	add.w	r0, r0, r8, lsl #5
    990c:	eb01 1108 	add.w	r1, r1, r8, lsl #4
    9910:	f012 0503 	ands.w	r5, r2, #3
    9914:	d026      	beq.n	9964 <arm_cmplx_mag_f32+0x160>
    9916:	2600      	movs	r6, #0
    9918:	f100 0408 	add.w	r4, r0, #8
    991c:	e00c      	b.n	9938 <arm_cmplx_mag_f32+0x134>
    991e:	eeb1 0ae7 	vsqrt.f32	s0, s15
    9922:	eeb4 0a40 	vcmp.f32	s0, s0
    9926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    992a:	d12e      	bne.n	998a <arm_cmplx_mag_f32+0x186>
    992c:	3d01      	subs	r5, #1
    992e:	ed01 0a01 	vstr	s0, [r1, #-4]
    9932:	f104 0408 	add.w	r4, r4, #8
    9936:	d015      	beq.n	9964 <arm_cmplx_mag_f32+0x160>
    9938:	ed54 7a02 	vldr	s15, [r4, #-8]
    993c:	ed14 0a01 	vldr	s0, [r4, #-4]
    9940:	ee67 7aa7 	vmul.f32	s15, s15, s15
    9944:	ee20 0a00 	vmul.f32	s0, s0, s0
    9948:	3104      	adds	r1, #4
    994a:	ee77 7a80 	vadd.f32	s15, s15, s0
    994e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    9952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9956:	dae2      	bge.n	991e <arm_cmplx_mag_f32+0x11a>
    9958:	3d01      	subs	r5, #1
    995a:	f841 6c04 	str.w	r6, [r1, #-4]
    995e:	f104 0408 	add.w	r4, r4, #8
    9962:	d1e9      	bne.n	9938 <arm_cmplx_mag_f32+0x134>
    9964:	b004      	add	sp, #16
    9966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    996a:	f845 7c08 	str.w	r7, [r5, #-8]
    996e:	e793      	b.n	9898 <arm_cmplx_mag_f32+0x94>
    9970:	f845 7c0c 	str.w	r7, [r5, #-12]
    9974:	e777      	b.n	9866 <arm_cmplx_mag_f32+0x62>
    9976:	eeb0 0a67 	vmov.f32	s0, s15
    997a:	9203      	str	r2, [sp, #12]
    997c:	9102      	str	r1, [sp, #8]
    997e:	9001      	str	r0, [sp, #4]
    9980:	f000 fcbc 	bl	a2fc <sqrtf>
    9984:	a801      	add	r0, sp, #4
    9986:	c807      	ldmia	r0, {r0, r1, r2}
    9988:	e751      	b.n	982e <arm_cmplx_mag_f32+0x2a>
    998a:	eeb0 0a67 	vmov.f32	s0, s15
    998e:	9101      	str	r1, [sp, #4]
    9990:	f000 fcb4 	bl	a2fc <sqrtf>
    9994:	9901      	ldr	r1, [sp, #4]
    9996:	e7c9      	b.n	992c <arm_cmplx_mag_f32+0x128>
    9998:	eeb0 0a67 	vmov.f32	s0, s15
    999c:	9203      	str	r2, [sp, #12]
    999e:	9102      	str	r1, [sp, #8]
    99a0:	9001      	str	r0, [sp, #4]
    99a2:	f000 fcab 	bl	a2fc <sqrtf>
    99a6:	a801      	add	r0, sp, #4
    99a8:	c807      	ldmia	r0, {r0, r1, r2}
    99aa:	e78b      	b.n	98c4 <arm_cmplx_mag_f32+0xc0>
    99ac:	eeb0 0a67 	vmov.f32	s0, s15
    99b0:	9203      	str	r2, [sp, #12]
    99b2:	9102      	str	r1, [sp, #8]
    99b4:	9001      	str	r0, [sp, #4]
    99b6:	f000 fca1 	bl	a2fc <sqrtf>
    99ba:	a801      	add	r0, sp, #4
    99bc:	c807      	ldmia	r0, {r0, r1, r2}
    99be:	e769      	b.n	9894 <arm_cmplx_mag_f32+0x90>
    99c0:	eeb0 0a67 	vmov.f32	s0, s15
    99c4:	9203      	str	r2, [sp, #12]
    99c6:	9102      	str	r1, [sp, #8]
    99c8:	9001      	str	r0, [sp, #4]
    99ca:	f000 fc97 	bl	a2fc <sqrtf>
    99ce:	a801      	add	r0, sp, #4
    99d0:	c807      	ldmia	r0, {r0, r1, r2}
    99d2:	e746      	b.n	9862 <arm_cmplx_mag_f32+0x5e>

000099d4 <arm_cos_f32>:
    99d4:	eddf 7a1c 	vldr	s15, [pc, #112]	; 9a48 <arm_cos_f32+0x74>
    99d8:	ee20 0a27 	vmul.f32	s0, s0, s15
    99dc:	eef5 7a00 	vmov.f32	s15, #80	; 0x50
    99e0:	ee30 0a27 	vadd.f32	s0, s0, s15
    99e4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    99e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    99ec:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    99f0:	d504      	bpl.n	99fc <arm_cos_f32+0x28>
    99f2:	ee17 3a90 	vmov	r3, s15
    99f6:	3b01      	subs	r3, #1
    99f8:	ee07 3a90 	vmov	s15, r3
    99fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    9a00:	eddf 6a12 	vldr	s13, [pc, #72]	; 9a4c <arm_cos_f32+0x78>
    9a04:	4a12      	ldr	r2, [pc, #72]	; (9a50 <arm_cos_f32+0x7c>)
    9a06:	ee30 0a67 	vsub.f32	s0, s0, s15
    9a0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
    9a0e:	ee20 0a26 	vmul.f32	s0, s0, s13
    9a12:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    9a16:	ee17 3a90 	vmov	r3, s15
    9a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    9a1e:	ee07 3a90 	vmov	s15, r3
    9a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
    9a26:	eb02 0183 	add.w	r1, r2, r3, lsl #2
    9a2a:	ee70 7a67 	vsub.f32	s15, s0, s15
    9a2e:	edd1 6a01 	vldr	s13, [r1, #4]
    9a32:	ed91 0a00 	vldr	s0, [r1]
    9a36:	ee37 7a67 	vsub.f32	s14, s14, s15
    9a3a:	ee67 7aa6 	vmul.f32	s15, s15, s13
    9a3e:	ee27 0a00 	vmul.f32	s0, s14, s0
    9a42:	ee30 0a27 	vadd.f32	s0, s0, s15
    9a46:	4770      	bx	lr
    9a48:	3e22f983 	.word	0x3e22f983
    9a4c:	44000000 	.word	0x44000000
    9a50:	0001ac28 	.word	0x0001ac28

00009a54 <arm_scale_f32>:
    9a54:	b470      	push	{r4, r5, r6}
    9a56:	0896      	lsrs	r6, r2, #2
    9a58:	d025      	beq.n	9aa6 <arm_scale_f32+0x52>
    9a5a:	f100 0410 	add.w	r4, r0, #16
    9a5e:	f101 0310 	add.w	r3, r1, #16
    9a62:	4635      	mov	r5, r6
    9a64:	ed14 6a04 	vldr	s12, [r4, #-16]
    9a68:	ed54 6a03 	vldr	s13, [r4, #-12]
    9a6c:	ed14 7a02 	vldr	s14, [r4, #-8]
    9a70:	ed54 7a01 	vldr	s15, [r4, #-4]
    9a74:	ee26 6a00 	vmul.f32	s12, s12, s0
    9a78:	ee66 6a80 	vmul.f32	s13, s13, s0
    9a7c:	ee20 7a07 	vmul.f32	s14, s0, s14
    9a80:	ee60 7a27 	vmul.f32	s15, s0, s15
    9a84:	3d01      	subs	r5, #1
    9a86:	ed03 6a04 	vstr	s12, [r3, #-16]
    9a8a:	ed43 6a03 	vstr	s13, [r3, #-12]
    9a8e:	ed03 7a02 	vstr	s14, [r3, #-8]
    9a92:	ed43 7a01 	vstr	s15, [r3, #-4]
    9a96:	f104 0410 	add.w	r4, r4, #16
    9a9a:	f103 0310 	add.w	r3, r3, #16
    9a9e:	d1e1      	bne.n	9a64 <arm_scale_f32+0x10>
    9aa0:	0136      	lsls	r6, r6, #4
    9aa2:	4430      	add	r0, r6
    9aa4:	4431      	add	r1, r6
    9aa6:	f012 0203 	ands.w	r2, r2, #3
    9aaa:	d007      	beq.n	9abc <arm_scale_f32+0x68>
    9aac:	ecf0 7a01 	vldmia	r0!, {s15}
    9ab0:	ee67 7a80 	vmul.f32	s15, s15, s0
    9ab4:	3a01      	subs	r2, #1
    9ab6:	ece1 7a01 	vstmia	r1!, {s15}
    9aba:	d1f7      	bne.n	9aac <arm_scale_f32+0x58>
    9abc:	bc70      	pop	{r4, r5, r6}
    9abe:	4770      	bx	lr

00009ac0 <arm_mult_f32>:
    9ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ac2:	ea5f 0e93 	movs.w	lr, r3, lsr #2
    9ac6:	d033      	beq.n	9b30 <arm_mult_f32+0x70>
    9ac8:	f100 0610 	add.w	r6, r0, #16
    9acc:	f101 0510 	add.w	r5, r1, #16
    9ad0:	f102 0410 	add.w	r4, r2, #16
    9ad4:	4677      	mov	r7, lr
    9ad6:	ed16 6a04 	vldr	s12, [r6, #-16]
    9ada:	ed55 4a04 	vldr	s9, [r5, #-16]
    9ade:	ed56 6a02 	vldr	s13, [r6, #-8]
    9ae2:	ed15 5a02 	vldr	s10, [r5, #-8]
    9ae6:	ed16 7a03 	vldr	s14, [r6, #-12]
    9aea:	ed55 5a03 	vldr	s11, [r5, #-12]
    9aee:	ed56 7a01 	vldr	s15, [r6, #-4]
    9af2:	ee26 6a24 	vmul.f32	s12, s12, s9
    9af6:	ee66 6a85 	vmul.f32	s13, s13, s10
    9afa:	ed04 6a04 	vstr	s12, [r4, #-16]
    9afe:	ed15 6a01 	vldr	s12, [r5, #-4]
    9b02:	ed44 6a02 	vstr	s13, [r4, #-8]
    9b06:	ee27 7a25 	vmul.f32	s14, s14, s11
    9b0a:	ee67 7a86 	vmul.f32	s15, s15, s12
    9b0e:	3f01      	subs	r7, #1
    9b10:	ed04 7a03 	vstr	s14, [r4, #-12]
    9b14:	ed44 7a01 	vstr	s15, [r4, #-4]
    9b18:	f106 0610 	add.w	r6, r6, #16
    9b1c:	f105 0510 	add.w	r5, r5, #16
    9b20:	f104 0410 	add.w	r4, r4, #16
    9b24:	d1d7      	bne.n	9ad6 <arm_mult_f32+0x16>
    9b26:	ea4f 140e 	mov.w	r4, lr, lsl #4
    9b2a:	4420      	add	r0, r4
    9b2c:	4421      	add	r1, r4
    9b2e:	4422      	add	r2, r4
    9b30:	f013 0303 	ands.w	r3, r3, #3
    9b34:	d009      	beq.n	9b4a <arm_mult_f32+0x8a>
    9b36:	ecf0 7a01 	vldmia	r0!, {s15}
    9b3a:	ecb1 7a01 	vldmia	r1!, {s14}
    9b3e:	ee67 7a87 	vmul.f32	s15, s15, s14
    9b42:	3b01      	subs	r3, #1
    9b44:	ece2 7a01 	vstmia	r2!, {s15}
    9b48:	d1f5      	bne.n	9b36 <arm_mult_f32+0x76>
    9b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009b4c <arm_bitreversal_32>:
    9b4c:	1c4b      	adds	r3, r1, #1
    9b4e:	2b01      	cmp	r3, #1
    9b50:	bf98      	it	ls
    9b52:	4770      	bxls	lr
    9b54:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    9b58:	1c91      	adds	r1, r2, #2
    9b5a:	089b      	lsrs	r3, r3, #2

00009b5c <arm_bitreversal_32_0>:
    9b5c:	f8b1 8004 	ldrh.w	r8, [r1, #4]
    9b60:	f8b1 9002 	ldrh.w	r9, [r1, #2]
    9b64:	880a      	ldrh	r2, [r1, #0]
    9b66:	f831 cc02 	ldrh.w	ip, [r1, #-2]
    9b6a:	4480      	add	r8, r0
    9b6c:	4481      	add	r9, r0
    9b6e:	4402      	add	r2, r0
    9b70:	4484      	add	ip, r0
    9b72:	f8d9 7000 	ldr.w	r7, [r9]
    9b76:	f8d8 6000 	ldr.w	r6, [r8]
    9b7a:	6815      	ldr	r5, [r2, #0]
    9b7c:	f8dc 4000 	ldr.w	r4, [ip]
    9b80:	f8c9 6000 	str.w	r6, [r9]
    9b84:	f8c8 7000 	str.w	r7, [r8]
    9b88:	f8cc 5000 	str.w	r5, [ip]
    9b8c:	6014      	str	r4, [r2, #0]
    9b8e:	f8d9 7004 	ldr.w	r7, [r9, #4]
    9b92:	f8d8 6004 	ldr.w	r6, [r8, #4]
    9b96:	6855      	ldr	r5, [r2, #4]
    9b98:	f8dc 4004 	ldr.w	r4, [ip, #4]
    9b9c:	f8c9 6004 	str.w	r6, [r9, #4]
    9ba0:	f8c8 7004 	str.w	r7, [r8, #4]
    9ba4:	f8cc 5004 	str.w	r5, [ip, #4]
    9ba8:	6054      	str	r4, [r2, #4]
    9baa:	3108      	adds	r1, #8
    9bac:	3b01      	subs	r3, #1
    9bae:	d1d5      	bne.n	9b5c <arm_bitreversal_32_0>
    9bb0:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    9bb4:	4770      	bx	lr

00009bb6 <arm_bitreversal_16>:
    9bb6:	1c4b      	adds	r3, r1, #1
    9bb8:	2b01      	cmp	r3, #1
    9bba:	bf98      	it	ls
    9bbc:	4770      	bxls	lr
    9bbe:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    9bc2:	1c91      	adds	r1, r2, #2
    9bc4:	089b      	lsrs	r3, r3, #2

00009bc6 <arm_bitreversal_16_0>:
    9bc6:	f8b1 8004 	ldrh.w	r8, [r1, #4]
    9bca:	f8b1 9002 	ldrh.w	r9, [r1, #2]
    9bce:	880a      	ldrh	r2, [r1, #0]
    9bd0:	f831 cc02 	ldrh.w	ip, [r1, #-2]
    9bd4:	eb00 0858 	add.w	r8, r0, r8, lsr #1
    9bd8:	eb00 0959 	add.w	r9, r0, r9, lsr #1
    9bdc:	eb00 0252 	add.w	r2, r0, r2, lsr #1
    9be0:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
    9be4:	f8d9 7000 	ldr.w	r7, [r9]
    9be8:	f8d8 6000 	ldr.w	r6, [r8]
    9bec:	6815      	ldr	r5, [r2, #0]
    9bee:	f8dc 4000 	ldr.w	r4, [ip]
    9bf2:	f8c9 6000 	str.w	r6, [r9]
    9bf6:	f8c8 7000 	str.w	r7, [r8]
    9bfa:	f8cc 5000 	str.w	r5, [ip]
    9bfe:	6014      	str	r4, [r2, #0]
    9c00:	3108      	adds	r1, #8
    9c02:	3b01      	subs	r3, #1
    9c04:	d1df      	bne.n	9bc6 <arm_bitreversal_16_0>
    9c06:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    9c0a:	4770      	bx	lr

00009c0c <arm_radix8_butterfly_f32>:
    9c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9c10:	ed2d 8b10 	vpush	{d8-d15}
    9c14:	461c      	mov	r4, r3
    9c16:	b09d      	sub	sp, #116	; 0x74
    9c18:	4603      	mov	r3, r0
    9c1a:	3304      	adds	r3, #4
    9c1c:	ed9f bac4 	vldr	s22, [pc, #784]	; 9f30 <arm_radix8_butterfly_f32+0x324>
    9c20:	9019      	str	r0, [sp, #100]	; 0x64
    9c22:	921a      	str	r2, [sp, #104]	; 0x68
    9c24:	468b      	mov	fp, r1
    9c26:	931b      	str	r3, [sp, #108]	; 0x6c
    9c28:	468a      	mov	sl, r1
    9c2a:	46a1      	mov	r9, r4
    9c2c:	4607      	mov	r7, r0
    9c2e:	ea4f 03db 	mov.w	r3, fp, lsr #3
    9c32:	ea4f 0843 	mov.w	r8, r3, lsl #1
    9c36:	eb03 0508 	add.w	r5, r3, r8
    9c3a:	195c      	adds	r4, r3, r5
    9c3c:	00de      	lsls	r6, r3, #3
    9c3e:	191a      	adds	r2, r3, r4
    9c40:	9600      	str	r6, [sp, #0]
    9c42:	1898      	adds	r0, r3, r2
    9c44:	4619      	mov	r1, r3
    9c46:	9e00      	ldr	r6, [sp, #0]
    9c48:	9311      	str	r3, [sp, #68]	; 0x44
    9c4a:	4401      	add	r1, r0
    9c4c:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
    9c50:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
    9c54:	19be      	adds	r6, r7, r6
    9c56:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
    9c5a:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
    9c5e:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    9c62:	9f00      	ldr	r7, [sp, #0]
    9c64:	011b      	lsls	r3, r3, #4
    9c66:	eb06 0e07 	add.w	lr, r6, r7
    9c6a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
    9c6c:	9302      	str	r3, [sp, #8]
    9c6e:	3204      	adds	r2, #4
    9c70:	3104      	adds	r1, #4
    9c72:	ea4f 03cb 	mov.w	r3, fp, lsl #3
    9c76:	f04f 0c00 	mov.w	ip, #0
    9c7a:	edde 7a00 	vldr	s15, [lr]
    9c7e:	edd6 6a00 	vldr	s13, [r6]
    9c82:	ed95 2a00 	vldr	s4, [r5]
    9c86:	ed17 aa01 	vldr	s20, [r7, #-4]
    9c8a:	edd4 4a00 	vldr	s9, [r4]
    9c8e:	ed90 5a00 	vldr	s10, [r0]
    9c92:	ed12 7a01 	vldr	s14, [r2, #-4]
    9c96:	ed51 0a01 	vldr	s1, [r1, #-4]
    9c9a:	ee77 8a85 	vadd.f32	s17, s15, s10
    9c9e:	ee76 3a87 	vadd.f32	s7, s13, s14
    9ca2:	ee32 4a20 	vadd.f32	s8, s4, s1
    9ca6:	ee3a 3a24 	vadd.f32	s6, s20, s9
    9caa:	ee33 6a84 	vadd.f32	s12, s7, s8
    9cae:	ee73 5a28 	vadd.f32	s11, s6, s17
    9cb2:	ee36 7ac7 	vsub.f32	s14, s13, s14
    9cb6:	ee75 6a86 	vadd.f32	s13, s11, s12
    9cba:	ee75 5ac6 	vsub.f32	s11, s11, s12
    9cbe:	ed47 6a01 	vstr	s13, [r7, #-4]
    9cc2:	edc4 5a00 	vstr	s11, [r4]
    9cc6:	ed92 9a00 	vldr	s18, [r2]
    9cca:	ed95 1a01 	vldr	s2, [r5, #4]
    9cce:	edd6 5a01 	vldr	s11, [r6, #4]
    9cd2:	ed91 6a00 	vldr	s12, [r1]
    9cd6:	edd7 2a00 	vldr	s5, [r7]
    9cda:	edd4 1a01 	vldr	s3, [r4, #4]
    9cde:	edde 6a01 	vldr	s13, [lr, #4]
    9ce2:	edd0 9a01 	vldr	s19, [r0, #4]
    9ce6:	ee72 0a60 	vsub.f32	s1, s4, s1
    9cea:	ee71 aa46 	vsub.f32	s21, s2, s12
    9cee:	ee35 2ac9 	vsub.f32	s4, s11, s18
    9cf2:	ee37 0a60 	vsub.f32	s0, s14, s1
    9cf6:	ee32 8a2a 	vadd.f32	s16, s4, s21
    9cfa:	ee37 7a20 	vadd.f32	s14, s14, s1
    9cfe:	ee32 2a6a 	vsub.f32	s4, s4, s21
    9d02:	ee37 5ac5 	vsub.f32	s10, s15, s10
    9d06:	ee75 5a89 	vadd.f32	s11, s11, s18
    9d0a:	ee60 0a0b 	vmul.f32	s1, s0, s22
    9d0e:	ee7a 4a64 	vsub.f32	s9, s20, s9
    9d12:	ee31 6a06 	vadd.f32	s12, s2, s12
    9d16:	ee36 9aa9 	vadd.f32	s18, s13, s19
    9d1a:	ee32 1aa1 	vadd.f32	s2, s5, s3
    9d1e:	ee76 6ae9 	vsub.f32	s13, s13, s19
    9d22:	ee72 1ae1 	vsub.f32	s3, s5, s3
    9d26:	ee28 8a0b 	vmul.f32	s16, s16, s22
    9d2a:	ee62 2a0b 	vmul.f32	s5, s4, s22
    9d2e:	ee67 7a0b 	vmul.f32	s15, s14, s22
    9d32:	ee33 3a68 	vsub.f32	s6, s6, s17
    9d36:	ee36 0a88 	vadd.f32	s0, s13, s16
    9d3a:	ee75 8a86 	vadd.f32	s17, s11, s12
    9d3e:	ee36 7ac8 	vsub.f32	s14, s13, s16
    9d42:	ee33 4ac4 	vsub.f32	s8, s7, s8
    9d46:	ee74 6ae0 	vsub.f32	s13, s9, s1
    9d4a:	ee74 3aa0 	vadd.f32	s7, s9, s1
    9d4e:	ee35 6ac6 	vsub.f32	s12, s11, s12
    9d52:	ee75 4a27 	vadd.f32	s9, s10, s15
    9d56:	ee71 5a49 	vsub.f32	s11, s2, s18
    9d5a:	ee31 2a09 	vadd.f32	s4, s2, s18
    9d5e:	ee75 7a67 	vsub.f32	s15, s10, s15
    9d62:	ee31 1aa2 	vadd.f32	s2, s3, s5
    9d66:	ee71 2ae2 	vsub.f32	s5, s3, s5
    9d6a:	ee73 0a06 	vadd.f32	s1, s6, s12
    9d6e:	ee75 1ac4 	vsub.f32	s3, s11, s8
    9d72:	ee36 5a87 	vadd.f32	s10, s13, s14
    9d76:	ee32 8a28 	vadd.f32	s16, s4, s17
    9d7a:	ee33 6a46 	vsub.f32	s12, s6, s12
    9d7e:	ee34 4a25 	vadd.f32	s8, s8, s11
    9d82:	ee33 3a80 	vadd.f32	s6, s7, s0
    9d86:	ee36 7ac7 	vsub.f32	s14, s13, s14
    9d8a:	ee71 5a64 	vsub.f32	s11, s2, s9
    9d8e:	ee72 6ae7 	vsub.f32	s13, s5, s15
    9d92:	ee32 2a68 	vsub.f32	s4, s4, s17
    9d96:	ee73 3ac0 	vsub.f32	s7, s7, s0
    9d9a:	ee74 4a81 	vadd.f32	s9, s9, s2
    9d9e:	ee77 7aa2 	vadd.f32	s15, s15, s5
    9da2:	44dc      	add	ip, fp
    9da4:	45e2      	cmp	sl, ip
    9da6:	ed87 8a00 	vstr	s16, [r7]
    9daa:	ed84 2a01 	vstr	s4, [r4, #4]
    9dae:	441f      	add	r7, r3
    9db0:	edce 0a00 	vstr	s1, [lr]
    9db4:	441c      	add	r4, r3
    9db6:	ed80 6a00 	vstr	s12, [r0]
    9dba:	edce 1a01 	vstr	s3, [lr, #4]
    9dbe:	ed80 4a01 	vstr	s8, [r0, #4]
    9dc2:	449e      	add	lr, r3
    9dc4:	ed86 3a00 	vstr	s6, [r6]
    9dc8:	4418      	add	r0, r3
    9dca:	ed41 3a01 	vstr	s7, [r1, #-4]
    9dce:	ed02 5a01 	vstr	s10, [r2, #-4]
    9dd2:	ed85 7a00 	vstr	s14, [r5]
    9dd6:	edc6 5a01 	vstr	s11, [r6, #4]
    9dda:	edc1 4a00 	vstr	s9, [r1]
    9dde:	441e      	add	r6, r3
    9de0:	edc2 6a00 	vstr	s13, [r2]
    9de4:	4419      	add	r1, r3
    9de6:	edc5 7a01 	vstr	s15, [r5, #4]
    9dea:	441a      	add	r2, r3
    9dec:	441d      	add	r5, r3
    9dee:	f63f af44 	bhi.w	9c7a <arm_radix8_butterfly_f32+0x6e>
    9df2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    9df4:	2a07      	cmp	r2, #7
    9df6:	f240 81f5 	bls.w	a1e4 <arm_radix8_butterfly_f32+0x5d8>
    9dfa:	f108 0101 	add.w	r1, r8, #1
    9dfe:	188f      	adds	r7, r1, r2
    9e00:	eb09 0849 	add.w	r8, r9, r9, lsl #1
    9e04:	19d6      	adds	r6, r2, r7
    9e06:	eb08 0c09 	add.w	ip, r8, r9
    9e0a:	1994      	adds	r4, r2, r6
    9e0c:	eb0c 0e09 	add.w	lr, ip, r9
    9e10:	4610      	mov	r0, r2
    9e12:	9701      	str	r7, [sp, #4]
    9e14:	4420      	add	r0, r4
    9e16:	eb0e 0709 	add.w	r7, lr, r9
    9e1a:	1815      	adds	r5, r2, r0
    9e1c:	eb07 0209 	add.w	r2, r7, r9
    9e20:	9203      	str	r2, [sp, #12]
    9e22:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    9e24:	ea4f 01c9 	mov.w	r1, r9, lsl #3
    9e28:	9117      	str	r1, [sp, #92]	; 0x5c
    9e2a:	440a      	add	r2, r1
    9e2c:	9900      	ldr	r1, [sp, #0]
    9e2e:	3108      	adds	r1, #8
    9e30:	9100      	str	r1, [sp, #0]
    9e32:	9902      	ldr	r1, [sp, #8]
    9e34:	3108      	adds	r1, #8
    9e36:	9102      	str	r1, [sp, #8]
    9e38:	9919      	ldr	r1, [sp, #100]	; 0x64
    9e3a:	00ff      	lsls	r7, r7, #3
    9e3c:	9715      	str	r7, [sp, #84]	; 0x54
    9e3e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    9e42:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
    9e46:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    9e4a:	9f17      	ldr	r7, [sp, #92]	; 0x5c
    9e4c:	9903      	ldr	r1, [sp, #12]
    9e4e:	19d7      	adds	r7, r2, r7
    9e50:	00c9      	lsls	r1, r1, #3
    9e52:	9114      	str	r1, [sp, #80]	; 0x50
    9e54:	9710      	str	r7, [sp, #64]	; 0x40
    9e56:	9919      	ldr	r1, [sp, #100]	; 0x64
    9e58:	9f00      	ldr	r7, [sp, #0]
    9e5a:	19cf      	adds	r7, r1, r7
    9e5c:	970d      	str	r7, [sp, #52]	; 0x34
    9e5e:	9f02      	ldr	r7, [sp, #8]
    9e60:	19cf      	adds	r7, r1, r7
    9e62:	ea4f 0ece 	mov.w	lr, lr, lsl #3
    9e66:	970c      	str	r7, [sp, #48]	; 0x30
    9e68:	9f01      	ldr	r7, [sp, #4]
    9e6a:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
    9e6e:	3504      	adds	r5, #4
    9e70:	3004      	adds	r0, #4
    9e72:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
    9e76:	9508      	str	r5, [sp, #32]
    9e78:	9009      	str	r0, [sp, #36]	; 0x24
    9e7a:	9d16      	ldr	r5, [sp, #88]	; 0x58
    9e7c:	981a      	ldr	r0, [sp, #104]	; 0x68
    9e7e:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    9e82:	ea4f 08c8 	mov.w	r8, r8, lsl #3
    9e86:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
    9e8a:	9e14      	ldr	r6, [sp, #80]	; 0x50
    9e8c:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
    9e90:	1945      	adds	r5, r0, r5
    9e92:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    9e96:	460f      	mov	r7, r1
    9e98:	3404      	adds	r4, #4
    9e9a:	4641      	mov	r1, r8
    9e9c:	1841      	adds	r1, r0, r1
    9e9e:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
    9ea2:	940a      	str	r4, [sp, #40]	; 0x28
    9ea4:	eb00 0c06 	add.w	ip, r0, r6
    9ea8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    9eac:	9e15      	ldr	r6, [sp, #84]	; 0x54
    9eae:	9506      	str	r5, [sp, #24]
    9eb0:	9c12      	ldr	r4, [sp, #72]	; 0x48
    9eb2:	9105      	str	r1, [sp, #20]
    9eb4:	4639      	mov	r1, r7
    9eb6:	1905      	adds	r5, r0, r4
    9eb8:	3108      	adds	r1, #8
    9eba:	9c10      	ldr	r4, [sp, #64]	; 0x40
    9ebc:	9507      	str	r5, [sp, #28]
    9ebe:	910f      	str	r1, [sp, #60]	; 0x3c
    9ec0:	ea4f 1509 	mov.w	r5, r9, lsl #4
    9ec4:	2101      	movs	r1, #1
    9ec6:	eb00 0e06 	add.w	lr, r0, r6
    9eca:	9518      	str	r5, [sp, #96]	; 0x60
    9ecc:	9404      	str	r4, [sp, #16]
    9ece:	9103      	str	r1, [sp, #12]
    9ed0:	4620      	mov	r0, r4
    9ed2:	4689      	mov	r9, r1
    9ed4:	9e06      	ldr	r6, [sp, #24]
    9ed6:	ed90 fa00 	vldr	s30, [r0]
    9eda:	edd6 7a01 	vldr	s15, [r6, #4]
    9ede:	edd0 ba01 	vldr	s23, [r0, #4]
    9ee2:	edcd 7a00 	vstr	s15, [sp]
    9ee6:	a80d      	add	r0, sp, #52	; 0x34
    9ee8:	edde 7a01 	vldr	s15, [lr, #4]
    9eec:	9c05      	ldr	r4, [sp, #20]
    9eee:	9d07      	ldr	r5, [sp, #28]
    9ef0:	edd2 fa00 	vldr	s31, [r2]
    9ef4:	ed92 ca01 	vldr	s24, [r2, #4]
    9ef8:	edcd 7a01 	vstr	s15, [sp, #4]
    9efc:	c807      	ldmia	r0, {r0, r1, r2}
    9efe:	eddc 7a01 	vldr	s15, [ip, #4]
    9f02:	edd4 ea00 	vldr	s29, [r4]
    9f06:	ed95 ea00 	vldr	s28, [r5]
    9f0a:	edd6 da00 	vldr	s27, [r6]
    9f0e:	edd4 aa01 	vldr	s21, [r4, #4]
    9f12:	ed95 aa01 	vldr	s20, [r5, #4]
    9f16:	ed9e da00 	vldr	s26, [lr]
    9f1a:	eddc ca00 	vldr	s25, [ip]
    9f1e:	f8dd 8020 	ldr.w	r8, [sp, #32]
    9f22:	9f09      	ldr	r7, [sp, #36]	; 0x24
    9f24:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    9f26:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    9f28:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    9f2a:	edcd 7a02 	vstr	s15, [sp, #8]
    9f2e:	e001      	b.n	9f34 <arm_radix8_butterfly_f32+0x328>
    9f30:	3f3504f3 	.word	0x3f3504f3
    9f34:	ed16 6a01 	vldr	s12, [r6, #-4]
    9f38:	ed91 5a00 	vldr	s10, [r1]
    9f3c:	ed57 9a01 	vldr	s19, [r7, #-4]
    9f40:	edd5 7a00 	vldr	s15, [r5]
    9f44:	ed18 7a01 	vldr	s14, [r8, #-4]
    9f48:	edd2 3a00 	vldr	s7, [r2]
    9f4c:	ed94 3a00 	vldr	s6, [r4]
    9f50:	ed90 2a00 	vldr	s4, [r0]
    9f54:	ed92 0a01 	vldr	s0, [r2, #4]
    9f58:	ee33 8a85 	vadd.f32	s16, s7, s10
    9f5c:	ee32 1a06 	vadd.f32	s2, s4, s12
    9f60:	ee33 4a29 	vadd.f32	s8, s6, s19
    9f64:	ee77 4a87 	vadd.f32	s9, s15, s14
    9f68:	ee78 1a04 	vadd.f32	s3, s16, s8
    9f6c:	ee71 6a24 	vadd.f32	s13, s2, s9
    9f70:	ee32 2a46 	vsub.f32	s4, s4, s12
    9f74:	ee31 6aa6 	vadd.f32	s12, s3, s13
    9f78:	ee77 7ac7 	vsub.f32	s15, s15, s14
    9f7c:	ed82 6a00 	vstr	s12, [r2]
    9f80:	edd5 8a01 	vldr	s17, [r5, #4]
    9f84:	ed90 9a01 	vldr	s18, [r0, #4]
    9f88:	edd6 2a00 	vldr	s5, [r6]
    9f8c:	ed98 7a00 	vldr	s14, [r8]
    9f90:	edd4 0a01 	vldr	s1, [r4, #4]
    9f94:	ed91 6a01 	vldr	s12, [r1, #4]
    9f98:	edd7 5a00 	vldr	s11, [r7]
    9f9c:	ee73 3ac5 	vsub.f32	s7, s7, s10
    9fa0:	ee33 3a69 	vsub.f32	s6, s6, s19
    9fa4:	ee39 5a62 	vsub.f32	s10, s18, s5
    9fa8:	ee78 9ac7 	vsub.f32	s19, s17, s14
    9fac:	ee38 4a44 	vsub.f32	s8, s16, s8
    9fb0:	ee38 7a87 	vadd.f32	s14, s17, s14
    9fb4:	ee30 8aa5 	vadd.f32	s16, s1, s11
    9fb8:	ee79 2a22 	vadd.f32	s5, s18, s5
    9fbc:	ee75 8a69 	vsub.f32	s17, s10, s19
    9fc0:	ee32 9a27 	vadd.f32	s18, s4, s15
    9fc4:	ee35 5a29 	vadd.f32	s10, s10, s19
    9fc8:	ee72 7a67 	vsub.f32	s15, s4, s15
    9fcc:	ee30 2a06 	vadd.f32	s4, s0, s12
    9fd0:	ee69 9a0b 	vmul.f32	s19, s18, s22
    9fd4:	ee70 5ae5 	vsub.f32	s11, s1, s11
    9fd8:	ee32 9a08 	vadd.f32	s18, s4, s16
    9fdc:	ee68 8a8b 	vmul.f32	s17, s17, s22
    9fe0:	ee32 2a48 	vsub.f32	s4, s4, s16
    9fe4:	ee71 4a64 	vsub.f32	s9, s2, s9
    9fe8:	ee25 5a0b 	vmul.f32	s10, s10, s22
    9fec:	ee32 1a87 	vadd.f32	s2, s5, s14
    9ff0:	ee67 7a8b 	vmul.f32	s15, s15, s22
    9ff4:	ee72 2ac7 	vsub.f32	s5, s5, s14
    9ff8:	ee30 6a46 	vsub.f32	s12, s0, s12
    9ffc:	ee73 0a29 	vadd.f32	s1, s6, s19
    a000:	ee36 0a28 	vadd.f32	s0, s12, s17
    a004:	ee33 3a69 	vsub.f32	s6, s6, s19
    a008:	ee32 7a64 	vsub.f32	s14, s4, s9
    a00c:	ee73 9aa7 	vadd.f32	s19, s7, s15
    a010:	ee36 6a68 	vsub.f32	s12, s12, s17
    a014:	ee73 7ae7 	vsub.f32	s15, s7, s15
    a018:	ee75 8a85 	vadd.f32	s17, s11, s10
    a01c:	ee74 3a22 	vadd.f32	s7, s8, s5
    a020:	ee35 5ac5 	vsub.f32	s10, s11, s10
    a024:	ee71 6ae6 	vsub.f32	s13, s3, s13
    a028:	ee79 1a41 	vsub.f32	s3, s18, s2
    a02c:	ee39 8aa8 	vadd.f32	s16, s19, s17
    a030:	ee76 5a43 	vsub.f32	s11, s12, s6
    a034:	ee74 2a62 	vsub.f32	s5, s8, s5
    a038:	ee74 4a82 	vadd.f32	s9, s9, s4
    a03c:	ee30 4a60 	vsub.f32	s8, s0, s1
    a040:	ee79 8ae8 	vsub.f32	s17, s19, s17
    a044:	ee30 0a80 	vadd.f32	s0, s1, s0
    a048:	ee77 9a85 	vadd.f32	s19, s15, s10
    a04c:	ee33 6a06 	vadd.f32	s12, s6, s12
    a050:	ee77 7ac5 	vsub.f32	s15, s15, s10
    a054:	ee2e 2a21 	vmul.f32	s4, s28, s3
    a058:	ee2e 5a26 	vmul.f32	s10, s28, s13
    a05c:	ee6f 0a23 	vmul.f32	s1, s30, s7
    a060:	ee2a 3a21 	vmul.f32	s6, s20, s3
    a064:	ee39 1a01 	vadd.f32	s2, s18, s2
    a068:	ee6a 6a26 	vmul.f32	s13, s20, s13
    a06c:	ee2b 9a87 	vmul.f32	s18, s23, s14
    a070:	ee6b 3aa3 	vmul.f32	s7, s23, s7
    a074:	ee2f 7a07 	vmul.f32	s14, s30, s14
    a078:	ee6f 1a84 	vmul.f32	s3, s31, s8
    a07c:	ee35 3a03 	vadd.f32	s6, s10, s6
    a080:	ee72 6a66 	vsub.f32	s13, s4, s13
    a084:	ee2c 5a04 	vmul.f32	s10, s24, s8
    a088:	ee2f 2a88 	vmul.f32	s4, s31, s16
    a08c:	ed9d 4a02 	vldr	s8, [sp, #8]
    a090:	ed82 1a01 	vstr	s2, [r2, #4]
    a094:	ee77 3a63 	vsub.f32	s7, s14, s7
    a098:	ee2c 8a08 	vmul.f32	s16, s24, s16
    a09c:	ed9d 7a01 	vldr	s14, [sp, #4]
    a0a0:	ed81 3a00 	vstr	s6, [r1]
    a0a4:	ee30 9a89 	vadd.f32	s18, s1, s18
    a0a8:	ee32 2a05 	vadd.f32	s4, s4, s10
    a0ac:	ee6d 0a22 	vmul.f32	s1, s26, s5
    a0b0:	ee31 8ac8 	vsub.f32	s16, s3, s16
    a0b4:	ee67 2a22 	vmul.f32	s5, s14, s5
    a0b8:	ee64 1a00 	vmul.f32	s3, s8, s0
    a0bc:	ee27 7a24 	vmul.f32	s14, s14, s9
    a0c0:	ee2c 5aa8 	vmul.f32	s10, s25, s17
    a0c4:	ee6d 4a24 	vmul.f32	s9, s26, s9
    a0c8:	ee64 8a28 	vmul.f32	s17, s8, s17
    a0cc:	ed9d 4a00 	vldr	s8, [sp]
    a0d0:	edc1 6a01 	vstr	s13, [r1, #4]
    a0d4:	ee74 2ae2 	vsub.f32	s5, s9, s5
    a0d8:	ee6d 4aa9 	vmul.f32	s9, s27, s19
    a0dc:	ee64 9a29 	vmul.f32	s19, s8, s19
    a0e0:	ee24 4a25 	vmul.f32	s8, s8, s11
    a0e4:	ee30 7a87 	vadd.f32	s14, s1, s14
    a0e8:	ee74 4a84 	vadd.f32	s9, s9, s8
    a0ec:	ee6e 0aa7 	vmul.f32	s1, s29, s15
    a0f0:	ee2a 4a86 	vmul.f32	s8, s21, s12
    a0f4:	ee2c 0a80 	vmul.f32	s0, s25, s0
    a0f8:	ee6d 5aa5 	vmul.f32	s11, s27, s11
    a0fc:	ee6a 7aa7 	vmul.f32	s15, s21, s15
    a100:	ee2e 6a86 	vmul.f32	s12, s29, s12
    a104:	ee75 1a21 	vadd.f32	s3, s10, s3
    a108:	ee30 0a68 	vsub.f32	s0, s0, s17
    a10c:	ee75 9ae9 	vsub.f32	s19, s11, s19
    a110:	ee70 0a84 	vadd.f32	s1, s1, s8
    a114:	ee36 6a67 	vsub.f32	s12, s12, s15
    a118:	44d9      	add	r9, fp
    a11a:	45ca      	cmp	sl, r9
    a11c:	ed84 9a00 	vstr	s18, [r4]
    a120:	edc4 3a01 	vstr	s7, [r4, #4]
    a124:	441a      	add	r2, r3
    a126:	ed07 7a01 	vstr	s14, [r7, #-4]
    a12a:	edc7 2a00 	vstr	s5, [r7]
    a12e:	4419      	add	r1, r3
    a130:	ed80 2a00 	vstr	s4, [r0]
    a134:	ed80 8a01 	vstr	s16, [r0, #4]
    a138:	441c      	add	r4, r3
    a13a:	ed48 1a01 	vstr	s3, [r8, #-4]
    a13e:	ed88 0a00 	vstr	s0, [r8]
    a142:	441f      	add	r7, r3
    a144:	ed46 4a01 	vstr	s9, [r6, #-4]
    a148:	4418      	add	r0, r3
    a14a:	edc6 9a00 	vstr	s19, [r6]
    a14e:	4498      	add	r8, r3
    a150:	edc5 0a00 	vstr	s1, [r5]
    a154:	ed85 6a01 	vstr	s12, [r5, #4]
    a158:	441e      	add	r6, r3
    a15a:	441d      	add	r5, r3
    a15c:	f63f aeea 	bhi.w	9f34 <arm_radix8_butterfly_f32+0x328>
    a160:	9a03      	ldr	r2, [sp, #12]
    a162:	9818      	ldr	r0, [sp, #96]	; 0x60
    a164:	3201      	adds	r2, #1
    a166:	4611      	mov	r1, r2
    a168:	9203      	str	r2, [sp, #12]
    a16a:	9a04      	ldr	r2, [sp, #16]
    a16c:	4402      	add	r2, r0
    a16e:	9204      	str	r2, [sp, #16]
    a170:	9813      	ldr	r0, [sp, #76]	; 0x4c
    a172:	9a05      	ldr	r2, [sp, #20]
    a174:	4402      	add	r2, r0
    a176:	9205      	str	r2, [sp, #20]
    a178:	9812      	ldr	r0, [sp, #72]	; 0x48
    a17a:	9a07      	ldr	r2, [sp, #28]
    a17c:	4402      	add	r2, r0
    a17e:	9207      	str	r2, [sp, #28]
    a180:	9816      	ldr	r0, [sp, #88]	; 0x58
    a182:	9a06      	ldr	r2, [sp, #24]
    a184:	4402      	add	r2, r0
    a186:	9206      	str	r2, [sp, #24]
    a188:	9a15      	ldr	r2, [sp, #84]	; 0x54
    a18a:	4496      	add	lr, r2
    a18c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    a18e:	4494      	add	ip, r2
    a190:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a192:	3208      	adds	r2, #8
    a194:	920f      	str	r2, [sp, #60]	; 0x3c
    a196:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a198:	3208      	adds	r2, #8
    a19a:	920e      	str	r2, [sp, #56]	; 0x38
    a19c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    a19e:	3208      	adds	r2, #8
    a1a0:	920d      	str	r2, [sp, #52]	; 0x34
    a1a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a1a4:	3208      	adds	r2, #8
    a1a6:	920c      	str	r2, [sp, #48]	; 0x30
    a1a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a1aa:	3208      	adds	r2, #8
    a1ac:	920b      	str	r2, [sp, #44]	; 0x2c
    a1ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a1b0:	3208      	adds	r2, #8
    a1b2:	920a      	str	r2, [sp, #40]	; 0x28
    a1b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a1b6:	3208      	adds	r2, #8
    a1b8:	9209      	str	r2, [sp, #36]	; 0x24
    a1ba:	9a08      	ldr	r2, [sp, #32]
    a1bc:	3208      	adds	r2, #8
    a1be:	9208      	str	r2, [sp, #32]
    a1c0:	9c10      	ldr	r4, [sp, #64]	; 0x40
    a1c2:	9811      	ldr	r0, [sp, #68]	; 0x44
    a1c4:	4288      	cmp	r0, r1
    a1c6:	4622      	mov	r2, r4
    a1c8:	d007      	beq.n	a1da <arm_radix8_butterfly_f32+0x5ce>
    a1ca:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a1cc:	f8dd 900c 	ldr.w	r9, [sp, #12]
    a1d0:	4621      	mov	r1, r4
    a1d2:	4401      	add	r1, r0
    a1d4:	9110      	str	r1, [sp, #64]	; 0x40
    a1d6:	9804      	ldr	r0, [sp, #16]
    a1d8:	e67c      	b.n	9ed4 <arm_radix8_butterfly_f32+0x2c8>
    a1da:	4683      	mov	fp, r0
    a1dc:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
    a1e0:	9f19      	ldr	r7, [sp, #100]	; 0x64
    a1e2:	e524      	b.n	9c2e <arm_radix8_butterfly_f32+0x22>
    a1e4:	b01d      	add	sp, #116	; 0x74
    a1e6:	ecbd 8b10 	vpop	{d8-d15}
    a1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a1ee:	bf00      	nop

0000a1f0 <log>:
    a1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a1f2:	ed2d 8b04 	vpush	{d8-d9}
    a1f6:	eeb0 9a40 	vmov.f32	s18, s0
    a1fa:	eef0 9a60 	vmov.f32	s19, s1
    a1fe:	4c3a      	ldr	r4, [pc, #232]	; (a2e8 <log+0xf8>)
    a200:	b08b      	sub	sp, #44	; 0x2c
    a202:	f000 f8d9 	bl	a3b8 <__ieee754_log>
    a206:	f994 3000 	ldrsb.w	r3, [r4]
    a20a:	eeb0 8a40 	vmov.f32	s16, s0
    a20e:	eef0 8a60 	vmov.f32	s17, s1
    a212:	3301      	adds	r3, #1
    a214:	d00d      	beq.n	a232 <log+0x42>
    a216:	eeb0 0a49 	vmov.f32	s0, s18
    a21a:	eef0 0a69 	vmov.f32	s1, s19
    a21e:	f000 fb1d 	bl	a85c <__fpclassifyd>
    a222:	b130      	cbz	r0, a232 <log+0x42>
    a224:	ec51 0b19 	vmov	r0, r1, d9
    a228:	2200      	movs	r2, #0
    a22a:	2300      	movs	r3, #0
    a22c:	f001 fcb8 	bl	bba0 <__aeabi_dcmpgt>
    a230:	b138      	cbz	r0, a242 <log+0x52>
    a232:	eeb0 0a48 	vmov.f32	s0, s16
    a236:	eef0 0a68 	vmov.f32	s1, s17
    a23a:	b00b      	add	sp, #44	; 0x2c
    a23c:	ecbd 8b04 	vpop	{d8-d9}
    a240:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a242:	7824      	ldrb	r4, [r4, #0]
    a244:	4b29      	ldr	r3, [pc, #164]	; (a2ec <log+0xfc>)
    a246:	9008      	str	r0, [sp, #32]
    a248:	ed8d 9b02 	vstr	d9, [sp, #8]
    a24c:	ed8d 9b04 	vstr	d9, [sp, #16]
    a250:	9301      	str	r3, [sp, #4]
    a252:	b99c      	cbnz	r4, a27c <log+0x8c>
    a254:	4d26      	ldr	r5, [pc, #152]	; (a2f0 <log+0x100>)
    a256:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
    a25a:	ec51 0b19 	vmov	r0, r1, d9
    a25e:	2200      	movs	r2, #0
    a260:	2300      	movs	r3, #0
    a262:	e9cd 4506 	strd	r4, r5, [sp, #24]
    a266:	f001 fc73 	bl	bb50 <__aeabi_dcmpeq>
    a26a:	2800      	cmp	r0, #0
    a26c:	d134      	bne.n	a2d8 <log+0xe8>
    a26e:	2301      	movs	r3, #1
    a270:	9300      	str	r3, [sp, #0]
    a272:	4668      	mov	r0, sp
    a274:	f000 fb20 	bl	a8b8 <matherr>
    a278:	b998      	cbnz	r0, a2a2 <log+0xb2>
    a27a:	e00e      	b.n	a29a <log+0xaa>
    a27c:	4f1d      	ldr	r7, [pc, #116]	; (a2f4 <log+0x104>)
    a27e:	2600      	movs	r6, #0
    a280:	ec51 0b19 	vmov	r0, r1, d9
    a284:	2200      	movs	r2, #0
    a286:	2300      	movs	r3, #0
    a288:	e9cd 6706 	strd	r6, r7, [sp, #24]
    a28c:	f001 fc60 	bl	bb50 <__aeabi_dcmpeq>
    a290:	b9a0      	cbnz	r0, a2bc <log+0xcc>
    a292:	2301      	movs	r3, #1
    a294:	2c02      	cmp	r4, #2
    a296:	9300      	str	r3, [sp, #0]
    a298:	d1eb      	bne.n	a272 <log+0x82>
    a29a:	f001 fcdb 	bl	bc54 <__errno>
    a29e:	2321      	movs	r3, #33	; 0x21
    a2a0:	6003      	str	r3, [r0, #0]
    a2a2:	4815      	ldr	r0, [pc, #84]	; (a2f8 <log+0x108>)
    a2a4:	f000 fb0c 	bl	a8c0 <nan>
    a2a8:	ed8d 0b06 	vstr	d0, [sp, #24]
    a2ac:	9b08      	ldr	r3, [sp, #32]
    a2ae:	b9b3      	cbnz	r3, a2de <log+0xee>
    a2b0:	ed9d 0b06 	vldr	d0, [sp, #24]
    a2b4:	b00b      	add	sp, #44	; 0x2c
    a2b6:	ecbd 8b04 	vpop	{d8-d9}
    a2ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a2bc:	2302      	movs	r3, #2
    a2be:	429c      	cmp	r4, r3
    a2c0:	9300      	str	r3, [sp, #0]
    a2c2:	d004      	beq.n	a2ce <log+0xde>
    a2c4:	4668      	mov	r0, sp
    a2c6:	f000 faf7 	bl	a8b8 <matherr>
    a2ca:	2800      	cmp	r0, #0
    a2cc:	d1ee      	bne.n	a2ac <log+0xbc>
    a2ce:	f001 fcc1 	bl	bc54 <__errno>
    a2d2:	2322      	movs	r3, #34	; 0x22
    a2d4:	6003      	str	r3, [r0, #0]
    a2d6:	e7e9      	b.n	a2ac <log+0xbc>
    a2d8:	2302      	movs	r3, #2
    a2da:	9300      	str	r3, [sp, #0]
    a2dc:	e7f2      	b.n	a2c4 <log+0xd4>
    a2de:	f001 fcb9 	bl	bc54 <__errno>
    a2e2:	9b08      	ldr	r3, [sp, #32]
    a2e4:	6003      	str	r3, [r0, #0]
    a2e6:	e7e3      	b.n	a2b0 <log+0xc0>
    a2e8:	20000874 	.word	0x20000874
    a2ec:	00020e7c 	.word	0x00020e7c
    a2f0:	c7efffff 	.word	0xc7efffff
    a2f4:	fff00000 	.word	0xfff00000
    a2f8:	0000d1cc 	.word	0x0000d1cc

0000a2fc <sqrtf>:
    a2fc:	b510      	push	{r4, lr}
    a2fe:	ed2d 8b02 	vpush	{d8}
    a302:	4c2a      	ldr	r4, [pc, #168]	; (a3ac <sqrtf+0xb0>)
    a304:	b08a      	sub	sp, #40	; 0x28
    a306:	eef0 8a40 	vmov.f32	s17, s0
    a30a:	f000 fa55 	bl	a7b8 <__ieee754_sqrtf>
    a30e:	f994 3000 	ldrsb.w	r3, [r4]
    a312:	3301      	adds	r3, #1
    a314:	eeb0 8a40 	vmov.f32	s16, s0
    a318:	d009      	beq.n	a32e <sqrtf+0x32>
    a31a:	eeb0 0a68 	vmov.f32	s0, s17
    a31e:	f000 fad7 	bl	a8d0 <__fpclassifyf>
    a322:	b120      	cbz	r0, a32e <sqrtf+0x32>
    a324:	eef5 8ac0 	vcmpe.f32	s17, #0.0
    a328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a32c:	d405      	bmi.n	a33a <sqrtf+0x3e>
    a32e:	eeb0 0a48 	vmov.f32	s0, s16
    a332:	b00a      	add	sp, #40	; 0x28
    a334:	ecbd 8b02 	vpop	{d8}
    a338:	bd10      	pop	{r4, pc}
    a33a:	2301      	movs	r3, #1
    a33c:	4a1c      	ldr	r2, [pc, #112]	; (a3b0 <sqrtf+0xb4>)
    a33e:	9300      	str	r3, [sp, #0]
    a340:	ee18 0a90 	vmov	r0, s17
    a344:	2300      	movs	r3, #0
    a346:	9201      	str	r2, [sp, #4]
    a348:	9308      	str	r3, [sp, #32]
    a34a:	f001 f945 	bl	b5d8 <__aeabi_f2d>
    a34e:	7824      	ldrb	r4, [r4, #0]
    a350:	e9cd 0104 	strd	r0, r1, [sp, #16]
    a354:	e9cd 0102 	strd	r0, r1, [sp, #8]
    a358:	b99c      	cbnz	r4, a382 <sqrtf+0x86>
    a35a:	2200      	movs	r2, #0
    a35c:	2300      	movs	r3, #0
    a35e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    a362:	4668      	mov	r0, sp
    a364:	f000 faa8 	bl	a8b8 <matherr>
    a368:	b1a8      	cbz	r0, a396 <sqrtf+0x9a>
    a36a:	9b08      	ldr	r3, [sp, #32]
    a36c:	b9c3      	cbnz	r3, a3a0 <sqrtf+0xa4>
    a36e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    a372:	f001 fc1f 	bl	bbb4 <__aeabi_d2f>
    a376:	ee00 0a10 	vmov	s0, r0
    a37a:	b00a      	add	sp, #40	; 0x28
    a37c:	ecbd 8b02 	vpop	{d8}
    a380:	bd10      	pop	{r4, pc}
    a382:	2000      	movs	r0, #0
    a384:	2100      	movs	r1, #0
    a386:	4602      	mov	r2, r0
    a388:	460b      	mov	r3, r1
    a38a:	f001 faa3 	bl	b8d4 <__aeabi_ddiv>
    a38e:	2c02      	cmp	r4, #2
    a390:	e9cd 0106 	strd	r0, r1, [sp, #24]
    a394:	d1e5      	bne.n	a362 <sqrtf+0x66>
    a396:	f001 fc5d 	bl	bc54 <__errno>
    a39a:	2321      	movs	r3, #33	; 0x21
    a39c:	6003      	str	r3, [r0, #0]
    a39e:	e7e4      	b.n	a36a <sqrtf+0x6e>
    a3a0:	f001 fc58 	bl	bc54 <__errno>
    a3a4:	9b08      	ldr	r3, [sp, #32]
    a3a6:	6003      	str	r3, [r0, #0]
    a3a8:	e7e1      	b.n	a36e <sqrtf+0x72>
    a3aa:	bf00      	nop
    a3ac:	20000874 	.word	0x20000874
    a3b0:	00020e80 	.word	0x00020e80
    a3b4:	00000000 	.word	0x00000000

0000a3b8 <__ieee754_log>:
    a3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a3bc:	ec51 0b10 	vmov	r0, r1, d0
    a3c0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    a3c4:	b085      	sub	sp, #20
    a3c6:	460b      	mov	r3, r1
    a3c8:	da59      	bge.n	a47e <__ieee754_log+0xc6>
    a3ca:	ee10 2a10 	vmov	r2, s0
    a3ce:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    a3d2:	4322      	orrs	r2, r4
    a3d4:	f000 80f6 	beq.w	a5c4 <__ieee754_log+0x20c>
    a3d8:	2900      	cmp	r1, #0
    a3da:	f2c0 8179 	blt.w	a6d0 <__ieee754_log+0x318>
    a3de:	2200      	movs	r2, #0
    a3e0:	4bd9      	ldr	r3, [pc, #868]	; (a748 <__ieee754_log+0x390>)
    a3e2:	4cda      	ldr	r4, [pc, #872]	; (a74c <__ieee754_log+0x394>)
    a3e4:	f001 f94c 	bl	b680 <__aeabi_dmul>
    a3e8:	460b      	mov	r3, r1
    a3ea:	42a3      	cmp	r3, r4
    a3ec:	f06f 0235 	mvn.w	r2, #53	; 0x35
    a3f0:	dc4a      	bgt.n	a488 <__ieee754_log+0xd0>
    a3f2:	f3c3 0513 	ubfx	r5, r3, #0, #20
    a3f6:	f505 2415 	add.w	r4, r5, #610304	; 0x95000
    a3fa:	f604 7464 	addw	r4, r4, #3940	; 0xf64
    a3fe:	f404 1680 	and.w	r6, r4, #1048576	; 0x100000
    a402:	f086 547f 	eor.w	r4, r6, #1069547520	; 0x3fc00000
    a406:	151b      	asrs	r3, r3, #20
    a408:	f484 1440 	eor.w	r4, r4, #3145728	; 0x300000
    a40c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    a410:	ea44 0105 	orr.w	r1, r4, r5
    a414:	189c      	adds	r4, r3, r2
    a416:	2200      	movs	r2, #0
    a418:	4bcd      	ldr	r3, [pc, #820]	; (a750 <__ieee754_log+0x398>)
    a41a:	f000 ff7d 	bl	b318 <__aeabi_dsub>
    a41e:	1cab      	adds	r3, r5, #2
    a420:	f3c3 0313 	ubfx	r3, r3, #0, #20
    a424:	2b02      	cmp	r3, #2
    a426:	eb04 5416 	add.w	r4, r4, r6, lsr #20
    a42a:	4682      	mov	sl, r0
    a42c:	468b      	mov	fp, r1
    a42e:	f04f 0200 	mov.w	r2, #0
    a432:	dc32      	bgt.n	a49a <__ieee754_log+0xe2>
    a434:	2300      	movs	r3, #0
    a436:	f001 fb8b 	bl	bb50 <__aeabi_dcmpeq>
    a43a:	2800      	cmp	r0, #0
    a43c:	f000 80cd 	beq.w	a5da <__ieee754_log+0x222>
    a440:	2c00      	cmp	r4, #0
    a442:	f000 8151 	beq.w	a6e8 <__ieee754_log+0x330>
    a446:	4620      	mov	r0, r4
    a448:	f001 f8b4 	bl	b5b4 <__aeabi_i2d>
    a44c:	a3a8      	add	r3, pc, #672	; (adr r3, a6f0 <__ieee754_log+0x338>)
    a44e:	e9d3 2300 	ldrd	r2, r3, [r3]
    a452:	4606      	mov	r6, r0
    a454:	460f      	mov	r7, r1
    a456:	f001 f913 	bl	b680 <__aeabi_dmul>
    a45a:	a3a7      	add	r3, pc, #668	; (adr r3, a6f8 <__ieee754_log+0x340>)
    a45c:	e9d3 2300 	ldrd	r2, r3, [r3]
    a460:	4604      	mov	r4, r0
    a462:	460d      	mov	r5, r1
    a464:	4630      	mov	r0, r6
    a466:	4639      	mov	r1, r7
    a468:	f001 f90a 	bl	b680 <__aeabi_dmul>
    a46c:	4602      	mov	r2, r0
    a46e:	460b      	mov	r3, r1
    a470:	4620      	mov	r0, r4
    a472:	4629      	mov	r1, r5
    a474:	f000 ff52 	bl	b31c <__adddf3>
    a478:	ec41 0b10 	vmov	d0, r0, r1
    a47c:	e00a      	b.n	a494 <__ieee754_log+0xdc>
    a47e:	4cb3      	ldr	r4, [pc, #716]	; (a74c <__ieee754_log+0x394>)
    a480:	42a3      	cmp	r3, r4
    a482:	f04f 0200 	mov.w	r2, #0
    a486:	ddb4      	ble.n	a3f2 <__ieee754_log+0x3a>
    a488:	4602      	mov	r2, r0
    a48a:	460b      	mov	r3, r1
    a48c:	f000 ff46 	bl	b31c <__adddf3>
    a490:	ec41 0b10 	vmov	d0, r0, r1
    a494:	b005      	add	sp, #20
    a496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a49a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a49e:	f000 ff3d 	bl	b31c <__adddf3>
    a4a2:	4602      	mov	r2, r0
    a4a4:	460b      	mov	r3, r1
    a4a6:	4650      	mov	r0, sl
    a4a8:	4659      	mov	r1, fp
    a4aa:	f001 fa13 	bl	b8d4 <__aeabi_ddiv>
    a4ae:	4606      	mov	r6, r0
    a4b0:	460f      	mov	r7, r1
    a4b2:	4620      	mov	r0, r4
    a4b4:	e9cd 6700 	strd	r6, r7, [sp]
    a4b8:	f001 f87c 	bl	b5b4 <__aeabi_i2d>
    a4bc:	4632      	mov	r2, r6
    a4be:	e9cd 0102 	strd	r0, r1, [sp, #8]
    a4c2:	463b      	mov	r3, r7
    a4c4:	4630      	mov	r0, r6
    a4c6:	4639      	mov	r1, r7
    a4c8:	f001 f8da 	bl	b680 <__aeabi_dmul>
    a4cc:	4602      	mov	r2, r0
    a4ce:	460b      	mov	r3, r1
    a4d0:	4680      	mov	r8, r0
    a4d2:	4689      	mov	r9, r1
    a4d4:	f001 f8d4 	bl	b680 <__aeabi_dmul>
    a4d8:	a389      	add	r3, pc, #548	; (adr r3, a700 <__ieee754_log+0x348>)
    a4da:	e9d3 2300 	ldrd	r2, r3, [r3]
    a4de:	4606      	mov	r6, r0
    a4e0:	460f      	mov	r7, r1
    a4e2:	f001 f8cd 	bl	b680 <__aeabi_dmul>
    a4e6:	a388      	add	r3, pc, #544	; (adr r3, a708 <__ieee754_log+0x350>)
    a4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    a4ec:	f000 ff16 	bl	b31c <__adddf3>
    a4f0:	4632      	mov	r2, r6
    a4f2:	463b      	mov	r3, r7
    a4f4:	f001 f8c4 	bl	b680 <__aeabi_dmul>
    a4f8:	a385      	add	r3, pc, #532	; (adr r3, a710 <__ieee754_log+0x358>)
    a4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
    a4fe:	f000 ff0d 	bl	b31c <__adddf3>
    a502:	4632      	mov	r2, r6
    a504:	463b      	mov	r3, r7
    a506:	f001 f8bb 	bl	b680 <__aeabi_dmul>
    a50a:	a383      	add	r3, pc, #524	; (adr r3, a718 <__ieee754_log+0x360>)
    a50c:	e9d3 2300 	ldrd	r2, r3, [r3]
    a510:	f000 ff04 	bl	b31c <__adddf3>
    a514:	4642      	mov	r2, r8
    a516:	464b      	mov	r3, r9
    a518:	f001 f8b2 	bl	b680 <__aeabi_dmul>
    a51c:	a380      	add	r3, pc, #512	; (adr r3, a720 <__ieee754_log+0x368>)
    a51e:	e9d3 2300 	ldrd	r2, r3, [r3]
    a522:	4680      	mov	r8, r0
    a524:	4689      	mov	r9, r1
    a526:	4630      	mov	r0, r6
    a528:	4639      	mov	r1, r7
    a52a:	f001 f8a9 	bl	b680 <__aeabi_dmul>
    a52e:	a37e      	add	r3, pc, #504	; (adr r3, a728 <__ieee754_log+0x370>)
    a530:	e9d3 2300 	ldrd	r2, r3, [r3]
    a534:	f000 fef2 	bl	b31c <__adddf3>
    a538:	4632      	mov	r2, r6
    a53a:	463b      	mov	r3, r7
    a53c:	f001 f8a0 	bl	b680 <__aeabi_dmul>
    a540:	a37b      	add	r3, pc, #492	; (adr r3, a730 <__ieee754_log+0x378>)
    a542:	e9d3 2300 	ldrd	r2, r3, [r3]
    a546:	f000 fee9 	bl	b31c <__adddf3>
    a54a:	4632      	mov	r2, r6
    a54c:	463b      	mov	r3, r7
    a54e:	f001 f897 	bl	b680 <__aeabi_dmul>
    a552:	460b      	mov	r3, r1
    a554:	4602      	mov	r2, r0
    a556:	4649      	mov	r1, r9
    a558:	4640      	mov	r0, r8
    a55a:	f000 fedf 	bl	b31c <__adddf3>
    a55e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
    a562:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
    a566:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
    a56a:	3551      	adds	r5, #81	; 0x51
    a56c:	431d      	orrs	r5, r3
    a56e:	2d00      	cmp	r5, #0
    a570:	4606      	mov	r6, r0
    a572:	460f      	mov	r7, r1
    a574:	dd5a      	ble.n	a62c <__ieee754_log+0x274>
    a576:	2200      	movs	r2, #0
    a578:	4b76      	ldr	r3, [pc, #472]	; (a754 <__ieee754_log+0x39c>)
    a57a:	4650      	mov	r0, sl
    a57c:	4659      	mov	r1, fp
    a57e:	f001 f87f 	bl	b680 <__aeabi_dmul>
    a582:	4652      	mov	r2, sl
    a584:	465b      	mov	r3, fp
    a586:	f001 f87b 	bl	b680 <__aeabi_dmul>
    a58a:	4680      	mov	r8, r0
    a58c:	4689      	mov	r9, r1
    a58e:	2c00      	cmp	r4, #0
    a590:	d167      	bne.n	a662 <__ieee754_log+0x2aa>
    a592:	4632      	mov	r2, r6
    a594:	463b      	mov	r3, r7
    a596:	f000 fec1 	bl	b31c <__adddf3>
    a59a:	e9dd 2300 	ldrd	r2, r3, [sp]
    a59e:	f001 f86f 	bl	b680 <__aeabi_dmul>
    a5a2:	4602      	mov	r2, r0
    a5a4:	460b      	mov	r3, r1
    a5a6:	4640      	mov	r0, r8
    a5a8:	4649      	mov	r1, r9
    a5aa:	f000 feb5 	bl	b318 <__aeabi_dsub>
    a5ae:	4602      	mov	r2, r0
    a5b0:	460b      	mov	r3, r1
    a5b2:	4650      	mov	r0, sl
    a5b4:	4659      	mov	r1, fp
    a5b6:	f000 feaf 	bl	b318 <__aeabi_dsub>
    a5ba:	ec41 0b10 	vmov	d0, r0, r1
    a5be:	b005      	add	sp, #20
    a5c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a5c4:	2200      	movs	r2, #0
    a5c6:	2300      	movs	r3, #0
    a5c8:	2000      	movs	r0, #0
    a5ca:	4963      	ldr	r1, [pc, #396]	; (a758 <__ieee754_log+0x3a0>)
    a5cc:	f001 f982 	bl	b8d4 <__aeabi_ddiv>
    a5d0:	ec41 0b10 	vmov	d0, r0, r1
    a5d4:	b005      	add	sp, #20
    a5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a5da:	4652      	mov	r2, sl
    a5dc:	465b      	mov	r3, fp
    a5de:	4650      	mov	r0, sl
    a5e0:	4659      	mov	r1, fp
    a5e2:	f001 f84d 	bl	b680 <__aeabi_dmul>
    a5e6:	a354      	add	r3, pc, #336	; (adr r3, a738 <__ieee754_log+0x380>)
    a5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    a5ec:	4606      	mov	r6, r0
    a5ee:	460f      	mov	r7, r1
    a5f0:	4650      	mov	r0, sl
    a5f2:	4659      	mov	r1, fp
    a5f4:	f001 f844 	bl	b680 <__aeabi_dmul>
    a5f8:	4602      	mov	r2, r0
    a5fa:	460b      	mov	r3, r1
    a5fc:	2000      	movs	r0, #0
    a5fe:	4955      	ldr	r1, [pc, #340]	; (a754 <__ieee754_log+0x39c>)
    a600:	f000 fe8a 	bl	b318 <__aeabi_dsub>
    a604:	4602      	mov	r2, r0
    a606:	460b      	mov	r3, r1
    a608:	4630      	mov	r0, r6
    a60a:	4639      	mov	r1, r7
    a60c:	f001 f838 	bl	b680 <__aeabi_dmul>
    a610:	4606      	mov	r6, r0
    a612:	460f      	mov	r7, r1
    a614:	2c00      	cmp	r4, #0
    a616:	f040 80a1 	bne.w	a75c <__ieee754_log+0x3a4>
    a61a:	4650      	mov	r0, sl
    a61c:	4659      	mov	r1, fp
    a61e:	4632      	mov	r2, r6
    a620:	463b      	mov	r3, r7
    a622:	f000 fe79 	bl	b318 <__aeabi_dsub>
    a626:	ec41 0b10 	vmov	d0, r0, r1
    a62a:	e733      	b.n	a494 <__ieee754_log+0xdc>
    a62c:	2c00      	cmp	r4, #0
    a62e:	f000 80ad 	beq.w	a78c <__ieee754_log+0x3d4>
    a632:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
    a636:	a32e      	add	r3, pc, #184	; (adr r3, a6f0 <__ieee754_log+0x338>)
    a638:	e9d3 2300 	ldrd	r2, r3, [r3]
    a63c:	4640      	mov	r0, r8
    a63e:	4649      	mov	r1, r9
    a640:	f001 f81e 	bl	b680 <__aeabi_dmul>
    a644:	4632      	mov	r2, r6
    a646:	463b      	mov	r3, r7
    a648:	4604      	mov	r4, r0
    a64a:	460d      	mov	r5, r1
    a64c:	4650      	mov	r0, sl
    a64e:	4659      	mov	r1, fp
    a650:	f000 fe62 	bl	b318 <__aeabi_dsub>
    a654:	e9dd 2300 	ldrd	r2, r3, [sp]
    a658:	f001 f812 	bl	b680 <__aeabi_dmul>
    a65c:	4606      	mov	r6, r0
    a65e:	460f      	mov	r7, r1
    a660:	e088      	b.n	a774 <__ieee754_log+0x3bc>
    a662:	a323      	add	r3, pc, #140	; (adr r3, a6f0 <__ieee754_log+0x338>)
    a664:	e9d3 2300 	ldrd	r2, r3, [r3]
    a668:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    a66c:	f001 f808 	bl	b680 <__aeabi_dmul>
    a670:	4632      	mov	r2, r6
    a672:	463b      	mov	r3, r7
    a674:	4604      	mov	r4, r0
    a676:	460d      	mov	r5, r1
    a678:	4640      	mov	r0, r8
    a67a:	4649      	mov	r1, r9
    a67c:	f000 fe4e 	bl	b31c <__adddf3>
    a680:	e9dd 2300 	ldrd	r2, r3, [sp]
    a684:	f000 fffc 	bl	b680 <__aeabi_dmul>
    a688:	a31b      	add	r3, pc, #108	; (adr r3, a6f8 <__ieee754_log+0x340>)
    a68a:	e9d3 2300 	ldrd	r2, r3, [r3]
    a68e:	4606      	mov	r6, r0
    a690:	460f      	mov	r7, r1
    a692:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    a696:	f000 fff3 	bl	b680 <__aeabi_dmul>
    a69a:	4602      	mov	r2, r0
    a69c:	460b      	mov	r3, r1
    a69e:	4630      	mov	r0, r6
    a6a0:	4639      	mov	r1, r7
    a6a2:	f000 fe3b 	bl	b31c <__adddf3>
    a6a6:	4602      	mov	r2, r0
    a6a8:	460b      	mov	r3, r1
    a6aa:	4640      	mov	r0, r8
    a6ac:	4649      	mov	r1, r9
    a6ae:	f000 fe33 	bl	b318 <__aeabi_dsub>
    a6b2:	4652      	mov	r2, sl
    a6b4:	465b      	mov	r3, fp
    a6b6:	f000 fe2f 	bl	b318 <__aeabi_dsub>
    a6ba:	4602      	mov	r2, r0
    a6bc:	460b      	mov	r3, r1
    a6be:	4620      	mov	r0, r4
    a6c0:	4629      	mov	r1, r5
    a6c2:	f000 fe29 	bl	b318 <__aeabi_dsub>
    a6c6:	ec41 0b10 	vmov	d0, r0, r1
    a6ca:	b005      	add	sp, #20
    a6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a6d0:	ee10 2a10 	vmov	r2, s0
    a6d4:	460b      	mov	r3, r1
    a6d6:	f000 fe1f 	bl	b318 <__aeabi_dsub>
    a6da:	2200      	movs	r2, #0
    a6dc:	2300      	movs	r3, #0
    a6de:	f001 f8f9 	bl	b8d4 <__aeabi_ddiv>
    a6e2:	ec41 0b10 	vmov	d0, r0, r1
    a6e6:	e6d5      	b.n	a494 <__ieee754_log+0xdc>
    a6e8:	ed9f 0b15 	vldr	d0, [pc, #84]	; a740 <__ieee754_log+0x388>
    a6ec:	e6d2      	b.n	a494 <__ieee754_log+0xdc>
    a6ee:	bf00      	nop
    a6f0:	fee00000 	.word	0xfee00000
    a6f4:	3fe62e42 	.word	0x3fe62e42
    a6f8:	35793c76 	.word	0x35793c76
    a6fc:	3dea39ef 	.word	0x3dea39ef
    a700:	df3e5244 	.word	0xdf3e5244
    a704:	3fc2f112 	.word	0x3fc2f112
    a708:	96cb03de 	.word	0x96cb03de
    a70c:	3fc74664 	.word	0x3fc74664
    a710:	94229359 	.word	0x94229359
    a714:	3fd24924 	.word	0x3fd24924
    a718:	55555593 	.word	0x55555593
    a71c:	3fe55555 	.word	0x3fe55555
    a720:	d078c69f 	.word	0xd078c69f
    a724:	3fc39a09 	.word	0x3fc39a09
    a728:	1d8e78af 	.word	0x1d8e78af
    a72c:	3fcc71c5 	.word	0x3fcc71c5
    a730:	9997fa04 	.word	0x9997fa04
    a734:	3fd99999 	.word	0x3fd99999
    a738:	55555555 	.word	0x55555555
    a73c:	3fd55555 	.word	0x3fd55555
	...
    a748:	43500000 	.word	0x43500000
    a74c:	7fefffff 	.word	0x7fefffff
    a750:	3ff00000 	.word	0x3ff00000
    a754:	3fe00000 	.word	0x3fe00000
    a758:	c3500000 	.word	0xc3500000
    a75c:	4620      	mov	r0, r4
    a75e:	f000 ff29 	bl	b5b4 <__aeabi_i2d>
    a762:	a311      	add	r3, pc, #68	; (adr r3, a7a8 <__ieee754_log+0x3f0>)
    a764:	e9d3 2300 	ldrd	r2, r3, [r3]
    a768:	4680      	mov	r8, r0
    a76a:	4689      	mov	r9, r1
    a76c:	f000 ff88 	bl	b680 <__aeabi_dmul>
    a770:	4604      	mov	r4, r0
    a772:	460d      	mov	r5, r1
    a774:	a30e      	add	r3, pc, #56	; (adr r3, a7b0 <__ieee754_log+0x3f8>)
    a776:	e9d3 2300 	ldrd	r2, r3, [r3]
    a77a:	4640      	mov	r0, r8
    a77c:	4649      	mov	r1, r9
    a77e:	f000 ff7f 	bl	b680 <__aeabi_dmul>
    a782:	4602      	mov	r2, r0
    a784:	460b      	mov	r3, r1
    a786:	4630      	mov	r0, r6
    a788:	4639      	mov	r1, r7
    a78a:	e790      	b.n	a6ae <__ieee754_log+0x2f6>
    a78c:	4602      	mov	r2, r0
    a78e:	460b      	mov	r3, r1
    a790:	4650      	mov	r0, sl
    a792:	4659      	mov	r1, fp
    a794:	f000 fdc0 	bl	b318 <__aeabi_dsub>
    a798:	e9dd 2300 	ldrd	r2, r3, [sp]
    a79c:	f000 ff70 	bl	b680 <__aeabi_dmul>
    a7a0:	e705      	b.n	a5ae <__ieee754_log+0x1f6>
    a7a2:	bf00      	nop
    a7a4:	f3af 8000 	nop.w
    a7a8:	fee00000 	.word	0xfee00000
    a7ac:	3fe62e42 	.word	0x3fe62e42
    a7b0:	35793c76 	.word	0x35793c76
    a7b4:	3dea39ef 	.word	0x3dea39ef

0000a7b8 <__ieee754_sqrtf>:
    a7b8:	ee10 3a10 	vmov	r3, s0
    a7bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    a7c0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
    a7c4:	b470      	push	{r4, r5, r6}
    a7c6:	d230      	bcs.n	a82a <__ieee754_sqrtf+0x72>
    a7c8:	b36a      	cbz	r2, a826 <__ieee754_sqrtf+0x6e>
    a7ca:	2b00      	cmp	r3, #0
    a7cc:	db3d      	blt.n	a84a <__ieee754_sqrtf+0x92>
    a7ce:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    a7d2:	ea4f 51e3 	mov.w	r1, r3, asr #23
    a7d6:	d32c      	bcc.n	a832 <__ieee754_sqrtf+0x7a>
    a7d8:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
    a7dc:	f3c3 0316 	ubfx	r3, r3, #0, #23
    a7e0:	07d1      	lsls	r1, r2, #31
    a7e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    a7e6:	bf48      	it	mi
    a7e8:	005b      	lslmi	r3, r3, #1
    a7ea:	2400      	movs	r4, #0
    a7ec:	1056      	asrs	r6, r2, #1
    a7ee:	005b      	lsls	r3, r3, #1
    a7f0:	4625      	mov	r5, r4
    a7f2:	2119      	movs	r1, #25
    a7f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    a7f8:	18a8      	adds	r0, r5, r2
    a7fa:	4298      	cmp	r0, r3
    a7fc:	dc02      	bgt.n	a804 <__ieee754_sqrtf+0x4c>
    a7fe:	1a1b      	subs	r3, r3, r0
    a800:	1885      	adds	r5, r0, r2
    a802:	4414      	add	r4, r2
    a804:	3901      	subs	r1, #1
    a806:	ea4f 0343 	mov.w	r3, r3, lsl #1
    a80a:	ea4f 0252 	mov.w	r2, r2, lsr #1
    a80e:	d1f3      	bne.n	a7f8 <__ieee754_sqrtf+0x40>
    a810:	b113      	cbz	r3, a818 <__ieee754_sqrtf+0x60>
    a812:	f004 0301 	and.w	r3, r4, #1
    a816:	441c      	add	r4, r3
    a818:	1064      	asrs	r4, r4, #1
    a81a:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
    a81e:	eb04 53c6 	add.w	r3, r4, r6, lsl #23
    a822:	ee00 3a10 	vmov	s0, r3
    a826:	bc70      	pop	{r4, r5, r6}
    a828:	4770      	bx	lr
    a82a:	eea0 0a00 	vfma.f32	s0, s0, s0
    a82e:	bc70      	pop	{r4, r5, r6}
    a830:	4770      	bx	lr
    a832:	f413 0200 	ands.w	r2, r3, #8388608	; 0x800000
    a836:	d10d      	bne.n	a854 <__ieee754_sqrtf+0x9c>
    a838:	005b      	lsls	r3, r3, #1
    a83a:	0218      	lsls	r0, r3, #8
    a83c:	f102 0201 	add.w	r2, r2, #1
    a840:	d5fa      	bpl.n	a838 <__ieee754_sqrtf+0x80>
    a842:	f1c2 0201 	rsb	r2, r2, #1
    a846:	4411      	add	r1, r2
    a848:	e7c6      	b.n	a7d8 <__ieee754_sqrtf+0x20>
    a84a:	ee30 0a40 	vsub.f32	s0, s0, s0
    a84e:	ee80 0a00 	vdiv.f32	s0, s0, s0
    a852:	e7e8      	b.n	a826 <__ieee754_sqrtf+0x6e>
    a854:	2201      	movs	r2, #1
    a856:	4411      	add	r1, r2
    a858:	e7be      	b.n	a7d8 <__ieee754_sqrtf+0x20>
    a85a:	bf00      	nop

0000a85c <__fpclassifyd>:
    a85c:	ec53 2b10 	vmov	r2, r3, d0
    a860:	b410      	push	{r4}
    a862:	f033 4400 	bics.w	r4, r3, #2147483648	; 0x80000000
    a866:	d008      	beq.n	a87a <__fpclassifyd+0x1e>
    a868:	4911      	ldr	r1, [pc, #68]	; (a8b0 <__fpclassifyd+0x54>)
    a86a:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
    a86e:	4288      	cmp	r0, r1
    a870:	d808      	bhi.n	a884 <__fpclassifyd+0x28>
    a872:	2004      	movs	r0, #4
    a874:	f85d 4b04 	ldr.w	r4, [sp], #4
    a878:	4770      	bx	lr
    a87a:	b91a      	cbnz	r2, a884 <__fpclassifyd+0x28>
    a87c:	2002      	movs	r0, #2
    a87e:	f85d 4b04 	ldr.w	r4, [sp], #4
    a882:	4770      	bx	lr
    a884:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
    a888:	4909      	ldr	r1, [pc, #36]	; (a8b0 <__fpclassifyd+0x54>)
    a88a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
    a88e:	428b      	cmp	r3, r1
    a890:	d9ef      	bls.n	a872 <__fpclassifyd+0x16>
    a892:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    a896:	d201      	bcs.n	a89c <__fpclassifyd+0x40>
    a898:	2003      	movs	r0, #3
    a89a:	e7eb      	b.n	a874 <__fpclassifyd+0x18>
    a89c:	4b05      	ldr	r3, [pc, #20]	; (a8b4 <__fpclassifyd+0x58>)
    a89e:	429c      	cmp	r4, r3
    a8a0:	d001      	beq.n	a8a6 <__fpclassifyd+0x4a>
    a8a2:	2000      	movs	r0, #0
    a8a4:	e7e6      	b.n	a874 <__fpclassifyd+0x18>
    a8a6:	fab2 f082 	clz	r0, r2
    a8aa:	0940      	lsrs	r0, r0, #5
    a8ac:	e7e2      	b.n	a874 <__fpclassifyd+0x18>
    a8ae:	bf00      	nop
    a8b0:	7fdfffff 	.word	0x7fdfffff
    a8b4:	7ff00000 	.word	0x7ff00000

0000a8b8 <matherr>:
    a8b8:	2000      	movs	r0, #0
    a8ba:	4770      	bx	lr
    a8bc:	0000      	movs	r0, r0
	...

0000a8c0 <nan>:
    a8c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; a8c8 <nan+0x8>
    a8c4:	4770      	bx	lr
    a8c6:	bf00      	nop
    a8c8:	00000000 	.word	0x00000000
    a8cc:	7ff80000 	.word	0x7ff80000

0000a8d0 <__fpclassifyf>:
    a8d0:	ee10 3a10 	vmov	r3, s0
    a8d4:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
    a8d8:	d101      	bne.n	a8de <__fpclassifyf+0xe>
    a8da:	2002      	movs	r0, #2
    a8dc:	4770      	bx	lr
    a8de:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
    a8e2:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
    a8e6:	d201      	bcs.n	a8ec <__fpclassifyf+0x1c>
    a8e8:	2004      	movs	r0, #4
    a8ea:	4770      	bx	lr
    a8ec:	4b05      	ldr	r3, [pc, #20]	; (a904 <__fpclassifyf+0x34>)
    a8ee:	1e42      	subs	r2, r0, #1
    a8f0:	429a      	cmp	r2, r3
    a8f2:	d801      	bhi.n	a8f8 <__fpclassifyf+0x28>
    a8f4:	2003      	movs	r0, #3
    a8f6:	4770      	bx	lr
    a8f8:	f1a0 40ff 	sub.w	r0, r0, #2139095040	; 0x7f800000
    a8fc:	fab0 f080 	clz	r0, r0
    a900:	0940      	lsrs	r0, r0, #5
    a902:	4770      	bx	lr
    a904:	007ffffe 	.word	0x007ffffe

0000a908 <setHeaderComment>:
    wavHeader.data.size = 2 * numberOfSamples;
    wavHeader.riff.size = 2 * numberOfSamples + sizeof(wavHeader_t) - sizeof(chunk_t);

}

void setHeaderComment(uint32_t currentTime, int8_t timezone, uint8_t *serialNumber, uint32_t gain, AM_batteryState_t batteryState, bool batteryVoltageLow, bool switchPositionChanged) {
    a908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a90c:	b086      	sub	sp, #24
    a90e:	460d      	mov	r5, r1

    time_t rawtime = currentTime + timezone * SECONDS_IN_HOUR;
    a910:	f44f 6461 	mov.w	r4, #3600	; 0xe10
    a914:	a906      	add	r1, sp, #24
    a916:	fb04 0005 	mla	r0, r4, r5, r0
    a91a:	f841 0d04 	str.w	r0, [r1, #-4]!

    struct tm *time = gmtime(&rawtime);
    a91e:	4608      	mov	r0, r1
    wavHeader.data.size = 2 * numberOfSamples;
    wavHeader.riff.size = 2 * numberOfSamples + sizeof(wavHeader_t) - sizeof(chunk_t);

}

void setHeaderComment(uint32_t currentTime, int8_t timezone, uint8_t *serialNumber, uint32_t gain, AM_batteryState_t batteryState, bool batteryVoltageLow, bool switchPositionChanged) {
    a920:	4692      	mov	sl, r2
    a922:	4699      	mov	r9, r3
    a924:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
    a928:	f89d 703c 	ldrb.w	r7, [sp, #60]	; 0x3c
    a92c:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40

    time_t rawtime = currentTime + timezone * SECONDS_IN_HOUR;

    struct tm *time = gmtime(&rawtime);
    a930:	f001 f9aa 	bl	bc88 <gmtime>
    a934:	4604      	mov	r4, r0

    /* Format artist field */

    char *artist = wavHeader.iart.artist;

    sprintf(artist, "AudioMoth %08X%08X", (unsigned int)*((uint32_t*)serialNumber + 1), (unsigned int)*((uint32_t*)serialNumber));
    a936:	f8da 2004 	ldr.w	r2, [sl, #4]
    a93a:	f8da 3000 	ldr.w	r3, [sl]
    a93e:	4960      	ldr	r1, [pc, #384]	; (aac0 <setHeaderComment+0x1b8>)
    a940:	4860      	ldr	r0, [pc, #384]	; (aac4 <setHeaderComment+0x1bc>)
    a942:	f001 fb4d 	bl	bfe0 <siprintf>

    /* Format comment field */

    char *comment = wavHeader.icmt.comment;

    sprintf(comment, "Recorded at %02d:%02d:%02d %02d/%02d/%04d (UTC", time->tm_hour, time->tm_min, time->tm_sec, time->tm_mday, 1 + time->tm_mon, 1900 + time->tm_year);
    a946:	6821      	ldr	r1, [r4, #0]
    a948:	f8d4 c004 	ldr.w	ip, [r4, #4]
    a94c:	68a2      	ldr	r2, [r4, #8]
    a94e:	9100      	str	r1, [sp, #0]
    a950:	68e1      	ldr	r1, [r4, #12]
    a952:	9101      	str	r1, [sp, #4]
    a954:	6923      	ldr	r3, [r4, #16]
    a956:	485c      	ldr	r0, [pc, #368]	; (aac8 <setHeaderComment+0x1c0>)
    a958:	495c      	ldr	r1, [pc, #368]	; (aacc <setHeaderComment+0x1c4>)
    a95a:	f103 0e01 	add.w	lr, r3, #1
    a95e:	f8cd e008 	str.w	lr, [sp, #8]
    a962:	6964      	ldr	r4, [r4, #20]
    a964:	f204 746c 	addw	r4, r4, #1900	; 0x76c
    a968:	4663      	mov	r3, ip
    a96a:	9403      	str	r4, [sp, #12]
    a96c:	f001 fb38 	bl	bfe0 <siprintf>

    comment += 36;

    if (timezone < 0) sprintf(comment, "%d", timezone);
    a970:	2d00      	cmp	r5, #0
    a972:	f2c0 809f 	blt.w	aab4 <setHeaderComment+0x1ac>

    if (timezone > 0) sprintf(comment, "+%d", timezone);
    a976:	f000 8091 	beq.w	aa9c <setHeaderComment+0x194>
    a97a:	4855      	ldr	r0, [pc, #340]	; (aad0 <setHeaderComment+0x1c8>)
    a97c:	4955      	ldr	r1, [pc, #340]	; (aad4 <setHeaderComment+0x1cc>)
    a97e:	462a      	mov	r2, r5
    a980:	f001 fb2e 	bl	bfe0 <siprintf>

    if (timezone < 0 || timezone > 0) comment += 2;

    if (timezone < -9 || timezone > 9) comment += 1;
    a984:	3509      	adds	r5, #9
    a986:	4b54      	ldr	r3, [pc, #336]	; (aad8 <setHeaderComment+0x1d0>)
    a988:	b2ed      	uxtb	r5, r5
    a98a:	2d12      	cmp	r5, #18
    a98c:	bf94      	ite	ls
    a98e:	461d      	movls	r5, r3
    a990:	1c5d      	addhi	r5, r3, #1

    sprintf(comment, ") by %s at gain setting %d while battery state was ", artist, (unsigned int)gain);
    a992:	4952      	ldr	r1, [pc, #328]	; (aadc <setHeaderComment+0x1d4>)
    a994:	4a4b      	ldr	r2, [pc, #300]	; (aac4 <setHeaderComment+0x1bc>)
    a996:	464b      	mov	r3, r9
    a998:	4628      	mov	r0, r5
    a99a:	f001 fb21 	bl	bfe0 <siprintf>

    comment += 74;
    a99e:	f105 044a 	add.w	r4, r5, #74	; 0x4a

    if (batteryState == AM_BATTERY_LOW) {
    a9a2:	2e00      	cmp	r6, #0
    a9a4:	d07c      	beq.n	aaa0 <setHeaderComment+0x198>

        sprintf(comment, "less than 3.6V.");

        comment += 15;

    } else if (batteryState >= AM_BATTERY_FULL) {
    a9a6:	2e0e      	cmp	r6, #14
    a9a8:	d93f      	bls.n	aa2a <setHeaderComment+0x122>

        sprintf(comment, "greater than 4.9V.");
    a9aa:	4e4d      	ldr	r6, [pc, #308]	; (aae0 <setHeaderComment+0x1d8>)
    a9ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    a9ae:	f8b6 c000 	ldrh.w	ip, [r6]
    a9b2:	78b6      	ldrb	r6, [r6, #2]
    a9b4:	6020      	str	r0, [r4, #0]

        comment += 18;
    a9b6:	f105 0e5c 	add.w	lr, r5, #92	; 0x5c

        comment += 15;

    } else if (batteryState >= AM_BATTERY_FULL) {

        sprintf(comment, "greater than 4.9V.");
    a9ba:	6061      	str	r1, [r4, #4]
    a9bc:	60a2      	str	r2, [r4, #8]
    a9be:	60e3      	str	r3, [r4, #12]
    a9c0:	f8a4 c010 	strh.w	ip, [r4, #16]
    a9c4:	74a6      	strb	r6, [r4, #18]

        comment += 5;

    }

    if (batteryVoltageLow || switchPositionChanged) {
    a9c6:	2f00      	cmp	r7, #0
    a9c8:	d142      	bne.n	aa50 <setHeaderComment+0x148>
    a9ca:	f1b8 0f00 	cmp.w	r8, #0
    a9ce:	d029      	beq.n	aa24 <setHeaderComment+0x11c>

        sprintf(comment, " Recording cancelled before completion due to ");
    a9d0:	4e44      	ldr	r6, [pc, #272]	; (aae4 <setHeaderComment+0x1dc>)
    a9d2:	4674      	mov	r4, lr
    a9d4:	f106 0720 	add.w	r7, r6, #32
    a9d8:	4635      	mov	r5, r6
    a9da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a9dc:	42bd      	cmp	r5, r7
    a9de:	6020      	str	r0, [r4, #0]
    a9e0:	6061      	str	r1, [r4, #4]
    a9e2:	60a2      	str	r2, [r4, #8]
    a9e4:	60e3      	str	r3, [r4, #12]
    a9e6:	462e      	mov	r6, r5
    a9e8:	f104 0410 	add.w	r4, r4, #16
    a9ec:	d1f4      	bne.n	a9d8 <setHeaderComment+0xd0>
    a9ee:	ce07      	ldmia	r6!, {r0, r1, r2}

            sprintf(comment, "low battery voltage.");

        } else if (switchPositionChanged) {

            sprintf(comment, "change of switch position.");
    a9f0:	4d3d      	ldr	r5, [pc, #244]	; (aae8 <setHeaderComment+0x1e0>)

    }

    if (batteryVoltageLow || switchPositionChanged) {

        sprintf(comment, " Recording cancelled before completion due to ");
    a9f2:	6020      	str	r0, [r4, #0]
    a9f4:	6061      	str	r1, [r4, #4]
    a9f6:	60a2      	str	r2, [r4, #8]

            sprintf(comment, "low battery voltage.");

        } else if (switchPositionChanged) {

            sprintf(comment, "change of switch position.");
    a9f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}

    }

    if (batteryVoltageLow || switchPositionChanged) {

        sprintf(comment, " Recording cancelled before completion due to ");
    a9fa:	8836      	ldrh	r6, [r6, #0]
    a9fc:	81a6      	strh	r6, [r4, #12]

            sprintf(comment, "low battery voltage.");

        } else if (switchPositionChanged) {

            sprintf(comment, "change of switch position.");
    a9fe:	f8ce 002e 	str.w	r0, [lr, #46]	; 0x2e
    aa02:	f8ce 1032 	str.w	r1, [lr, #50]	; 0x32
    aa06:	cd03      	ldmia	r5!, {r0, r1}
    aa08:	882e      	ldrh	r6, [r5, #0]
    aa0a:	78ac      	ldrb	r4, [r5, #2]
    aa0c:	f8ce 2036 	str.w	r2, [lr, #54]	; 0x36
    aa10:	f8ce 303a 	str.w	r3, [lr, #58]	; 0x3a
    aa14:	f8ce 003e 	str.w	r0, [lr, #62]	; 0x3e
    aa18:	f8ce 1042 	str.w	r1, [lr, #66]	; 0x42
    aa1c:	f8ae 6046 	strh.w	r6, [lr, #70]	; 0x46
    aa20:	f88e 4048 	strb.w	r4, [lr, #72]	; 0x48

        }

    }

}
    aa24:	b006      	add	sp, #24
    aa26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

        comment += 18;

    } else {

        batteryState += 35;
    aa2a:	3623      	adds	r6, #35	; 0x23

        sprintf(comment, "%01d.%01dV.", batteryState / 10, batteryState % 10);
    aa2c:	4a2f      	ldr	r2, [pc, #188]	; (aaec <setHeaderComment+0x1e4>)
    aa2e:	4930      	ldr	r1, [pc, #192]	; (aaf0 <setHeaderComment+0x1e8>)

        comment += 18;

    } else {

        batteryState += 35;
    aa30:	b2f6      	uxtb	r6, r6

        sprintf(comment, "%01d.%01dV.", batteryState / 10, batteryState % 10);
    aa32:	fba2 3206 	umull	r3, r2, r2, r6
    aa36:	08d2      	lsrs	r2, r2, #3
    aa38:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    aa3c:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
    aa40:	4620      	mov	r0, r4
    aa42:	b2db      	uxtb	r3, r3
    aa44:	f001 facc 	bl	bfe0 <siprintf>

        comment += 5;
    aa48:	f105 0e4f 	add.w	lr, r5, #79	; 0x4f

    }

    if (batteryVoltageLow || switchPositionChanged) {
    aa4c:	2f00      	cmp	r7, #0
    aa4e:	d0bc      	beq.n	a9ca <setHeaderComment+0xc2>

        sprintf(comment, " Recording cancelled before completion due to ");
    aa50:	4e24      	ldr	r6, [pc, #144]	; (aae4 <setHeaderComment+0x1dc>)
    aa52:	4674      	mov	r4, lr
    aa54:	f106 0720 	add.w	r7, r6, #32
    aa58:	4635      	mov	r5, r6
    aa5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    aa5c:	42bd      	cmp	r5, r7
    aa5e:	6020      	str	r0, [r4, #0]
    aa60:	6061      	str	r1, [r4, #4]
    aa62:	60a2      	str	r2, [r4, #8]
    aa64:	60e3      	str	r3, [r4, #12]
    aa66:	462e      	mov	r6, r5
    aa68:	f104 0410 	add.w	r4, r4, #16
    aa6c:	d1f4      	bne.n	aa58 <setHeaderComment+0x150>
    aa6e:	ce07      	ldmia	r6!, {r0, r1, r2}

        comment += 46;

        if (batteryVoltageLow) {

            sprintf(comment, "low battery voltage.");
    aa70:	4d20      	ldr	r5, [pc, #128]	; (aaf4 <setHeaderComment+0x1ec>)

    }

    if (batteryVoltageLow || switchPositionChanged) {

        sprintf(comment, " Recording cancelled before completion due to ");
    aa72:	6020      	str	r0, [r4, #0]
    aa74:	6061      	str	r1, [r4, #4]
    aa76:	60a2      	str	r2, [r4, #8]

        comment += 46;

        if (batteryVoltageLow) {

            sprintf(comment, "low battery voltage.");
    aa78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}

    }

    if (batteryVoltageLow || switchPositionChanged) {

        sprintf(comment, " Recording cancelled before completion due to ");
    aa7a:	8836      	ldrh	r6, [r6, #0]
    aa7c:	81a6      	strh	r6, [r4, #12]

        comment += 46;

        if (batteryVoltageLow) {

            sprintf(comment, "low battery voltage.");
    aa7e:	f8ce 002e 	str.w	r0, [lr, #46]	; 0x2e
    aa82:	792e      	ldrb	r6, [r5, #4]
    aa84:	6828      	ldr	r0, [r5, #0]
    aa86:	f8ce 1032 	str.w	r1, [lr, #50]	; 0x32
    aa8a:	f8ce 2036 	str.w	r2, [lr, #54]	; 0x36
    aa8e:	f8ce 303a 	str.w	r3, [lr, #58]	; 0x3a
    aa92:	f8ce 003e 	str.w	r0, [lr, #62]	; 0x3e
    aa96:	f88e 6042 	strb.w	r6, [lr, #66]	; 0x42
    aa9a:	e7c3      	b.n	aa24 <setHeaderComment+0x11c>

    char *comment = wavHeader.icmt.comment;

    sprintf(comment, "Recorded at %02d:%02d:%02d %02d/%02d/%04d (UTC", time->tm_hour, time->tm_min, time->tm_sec, time->tm_mday, 1 + time->tm_mon, 1900 + time->tm_year);

    comment += 36;
    aa9c:	4d0c      	ldr	r5, [pc, #48]	; (aad0 <setHeaderComment+0x1c8>)
    aa9e:	e778      	b.n	a992 <setHeaderComment+0x8a>

    comment += 74;

    if (batteryState == AM_BATTERY_LOW) {

        sprintf(comment, "less than 3.6V.");
    aaa0:	4e15      	ldr	r6, [pc, #84]	; (aaf8 <setHeaderComment+0x1f0>)
    aaa2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}

        comment += 15;
    aaa4:	f105 0e59 	add.w	lr, r5, #89	; 0x59

    comment += 74;

    if (batteryState == AM_BATTERY_LOW) {

        sprintf(comment, "less than 3.6V.");
    aaa8:	f8c5 004a 	str.w	r0, [r5, #74]	; 0x4a
    aaac:	6061      	str	r1, [r4, #4]
    aaae:	60a2      	str	r2, [r4, #8]
    aab0:	60e3      	str	r3, [r4, #12]
    aab2:	e788      	b.n	a9c6 <setHeaderComment+0xbe>

    sprintf(comment, "Recorded at %02d:%02d:%02d %02d/%02d/%04d (UTC", time->tm_hour, time->tm_min, time->tm_sec, time->tm_mday, 1 + time->tm_mon, 1900 + time->tm_year);

    comment += 36;

    if (timezone < 0) sprintf(comment, "%d", timezone);
    aab4:	4911      	ldr	r1, [pc, #68]	; (aafc <setHeaderComment+0x1f4>)
    aab6:	4806      	ldr	r0, [pc, #24]	; (aad0 <setHeaderComment+0x1c8>)
    aab8:	462a      	mov	r2, r5
    aaba:	f001 fa91 	bl	bfe0 <siprintf>
    aabe:	e761      	b.n	a984 <setHeaderComment+0x7c>
    aac0:	00021ecc 	.word	0x00021ecc
    aac4:	200009f0 	.word	0x200009f0
    aac8:	200008e8 	.word	0x200008e8
    aacc:	00021ee0 	.word	0x00021ee0
    aad0:	2000090c 	.word	0x2000090c
    aad4:	00021f14 	.word	0x00021f14
    aad8:	2000090e 	.word	0x2000090e
    aadc:	00021f18 	.word	0x00021f18
    aae0:	00021f5c 	.word	0x00021f5c
    aae4:	00021f7c 	.word	0x00021f7c
    aae8:	00021fc4 	.word	0x00021fc4
    aaec:	cccccccd 	.word	0xcccccccd
    aaf0:	00021f70 	.word	0x00021f70
    aaf4:	00021fac 	.word	0x00021fac
    aaf8:	00021f4c 	.word	0x00021f4c
    aafc:	00021f10 	.word	0x00021f10

0000ab00 <makeRecording.constprop.1>:

}

/* Save recording to SD card */

static AM_recordingState_t makeRecording(uint32_t currentTime, uint32_t recordDuration, bool enableLED, AM_batteryState_t batteryState) {
    ab00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab04:	ed2d 8b02 	vpush	{d8}
    ab08:	f5ad 5d48 	sub.w	sp, sp, #12800	; 0x3200
    ab0c:	b081      	sub	sp, #4
    readBuffer = 0;

    writeBufferIndex = 0;

	q7_t* mid_buffer = (q7_t*) AM_EXTERNAL_SRAM_START_ADDRESS;
    read_buffers[0] = (q15_t*) (mid_buffer + DNN_TOTAL_BUFFER_SIZE);
    ab0e:	4dc0      	ldr	r5, [pc, #768]	; (ae10 <makeRecording.constprop.1+0x310>)
    ab10:	4ec0      	ldr	r6, [pc, #768]	; (ae14 <makeRecording.constprop.1+0x314>)

}

/* Save recording to SD card */

static AM_recordingState_t makeRecording(uint32_t currentTime, uint32_t recordDuration, bool enableLED, AM_batteryState_t batteryState) {
    ab12:	920c      	str	r2, [sp, #48]	; 0x30

    /* Initialise buffers */

    writeBuffer = 0;
    ab14:	4ac0      	ldr	r2, [pc, #768]	; (ae18 <makeRecording.constprop.1+0x318>)
    readBuffer = 0;

    writeBufferIndex = 0;
    ab16:	4fc1      	ldr	r7, [pc, #772]	; (ae1c <makeRecording.constprop.1+0x31c>)

	q7_t* mid_buffer = (q7_t*) AM_EXTERNAL_SRAM_START_ADDRESS;
    read_buffers[0] = (q15_t*) (mid_buffer + DNN_TOTAL_BUFFER_SIZE);
    ab18:	602e      	str	r6, [r5, #0]
static AM_recordingState_t makeRecording(uint32_t currentTime, uint32_t recordDuration, bool enableLED, AM_batteryState_t batteryState) {

    /* Initialise buffers */

    writeBuffer = 0;
    readBuffer = 0;
    ab1a:	f8df 934c 	ldr.w	r9, [pc, #844]	; ae68 <makeRecording.constprop.1+0x368>
	q7_t* mid_buffer = (q7_t*) AM_EXTERNAL_SRAM_START_ADDRESS;
    read_buffers[0] = (q15_t*) (mid_buffer + DNN_TOTAL_BUFFER_SIZE);
    write_buffers[0] = read_buffers[0] + NUMBER_OF_OVERLAP_SAMPLES;

    for (int i = 1; i < NUMBER_OF_BUFFERS; i += 1) {
        read_buffers[i] = read_buffers[i - 1] + NUMBER_OF_SAMPLES_IN_BUFFER;
    ab1e:	4bc0      	ldr	r3, [pc, #768]	; (ae20 <makeRecording.constprop.1+0x320>)

}

/* Save recording to SD card */

static AM_recordingState_t makeRecording(uint32_t currentTime, uint32_t recordDuration, bool enableLED, AM_batteryState_t batteryState) {
    ab20:	900b      	str	r0, [sp, #44]	; 0x2c

    /* Initialise buffers */

    writeBuffer = 0;
    ab22:	2600      	movs	r6, #0
    ab24:	6016      	str	r6, [r2, #0]
	q7_t* mid_buffer = (q7_t*) AM_EXTERNAL_SRAM_START_ADDRESS;
    read_buffers[0] = (q15_t*) (mid_buffer + DNN_TOTAL_BUFFER_SIZE);
    write_buffers[0] = read_buffers[0] + NUMBER_OF_OVERLAP_SAMPLES;

    for (int i = 1; i < NUMBER_OF_BUFFERS; i += 1) {
        read_buffers[i] = read_buffers[i - 1] + NUMBER_OF_SAMPLES_IN_BUFFER;
    ab26:	48bf      	ldr	r0, [pc, #764]	; (ae24 <makeRecording.constprop.1+0x324>)
    ab28:	4abf      	ldr	r2, [pc, #764]	; (ae28 <makeRecording.constprop.1+0x328>)

    writeBufferIndex = 0;

	q7_t* mid_buffer = (q7_t*) AM_EXTERNAL_SRAM_START_ADDRESS;
    read_buffers[0] = (q15_t*) (mid_buffer + DNN_TOTAL_BUFFER_SIZE);
    write_buffers[0] = read_buffers[0] + NUMBER_OF_OVERLAP_SAMPLES;
    ab2a:	4cc0      	ldr	r4, [pc, #768]	; (ae2c <makeRecording.constprop.1+0x32c>)
static AM_recordingState_t makeRecording(uint32_t currentTime, uint32_t recordDuration, bool enableLED, AM_batteryState_t batteryState) {

    /* Initialise buffers */

    writeBuffer = 0;
    readBuffer = 0;
    ab2c:	f8c9 6000 	str.w	r6, [r9]

    writeBufferIndex = 0;
    ab30:	603e      	str	r6, [r7, #0]
	q7_t* mid_buffer = (q7_t*) AM_EXTERNAL_SRAM_START_ADDRESS;
    read_buffers[0] = (q15_t*) (mid_buffer + DNN_TOTAL_BUFFER_SIZE);
    write_buffers[0] = read_buffers[0] + NUMBER_OF_OVERLAP_SAMPLES;

    for (int i = 1; i < NUMBER_OF_BUFFERS; i += 1) {
        read_buffers[i] = read_buffers[i - 1] + NUMBER_OF_SAMPLES_IN_BUFFER;
    ab32:	4fbf      	ldr	r7, [pc, #764]	; (ae30 <makeRecording.constprop.1+0x330>)
    ab34:	60eb      	str	r3, [r5, #12]
    ab36:	6128      	str	r0, [r5, #16]
    ab38:	f503 3380 	add.w	r3, r3, #65536	; 0x10000

    writeBufferIndex = 0;

	q7_t* mid_buffer = (q7_t*) AM_EXTERNAL_SRAM_START_ADDRESS;
    read_buffers[0] = (q15_t*) (mid_buffer + DNN_TOTAL_BUFFER_SIZE);
    write_buffers[0] = read_buffers[0] + NUMBER_OF_OVERLAP_SAMPLES;
    ab3c:	f5a0 407e 	sub.w	r0, r0, #65024	; 0xfe00

    for (int i = 1; i < NUMBER_OF_BUFFERS; i += 1) {
        read_buffers[i] = read_buffers[i - 1] + NUMBER_OF_SAMPLES_IN_BUFFER;
    ab40:	616a      	str	r2, [r5, #20]
        write_buffers[i] = read_buffers[i] + NUMBER_OF_OVERLAP_SAMPLES;
    ab42:	f5a2 427e 	sub.w	r2, r2, #65024	; 0xfe00
	q7_t* mid_buffer = (q7_t*) AM_EXTERNAL_SRAM_START_ADDRESS;
    read_buffers[0] = (q15_t*) (mid_buffer + DNN_TOTAL_BUFFER_SIZE);
    write_buffers[0] = read_buffers[0] + NUMBER_OF_OVERLAP_SAMPLES;

    for (int i = 1; i < NUMBER_OF_BUFFERS; i += 1) {
        read_buffers[i] = read_buffers[i - 1] + NUMBER_OF_SAMPLES_IN_BUFFER;
    ab46:	61af      	str	r7, [r5, #24]
    ab48:	61eb      	str	r3, [r5, #28]
        write_buffers[i] = read_buffers[i] + NUMBER_OF_OVERLAP_SAMPLES;
    ab4a:	f5a7 477e 	sub.w	r7, r7, #65024	; 0xfe00
    ab4e:	f5a3 437e 	sub.w	r3, r3, #65024	; 0xfe00

    writeBufferIndex = 0;

	q7_t* mid_buffer = (q7_t*) AM_EXTERNAL_SRAM_START_ADDRESS;
    read_buffers[0] = (q15_t*) (mid_buffer + DNN_TOTAL_BUFFER_SIZE);
    write_buffers[0] = read_buffers[0] + NUMBER_OF_OVERLAP_SAMPLES;
    ab52:	6020      	str	r0, [r4, #0]

    for (int i = 1; i < NUMBER_OF_BUFFERS; i += 1) {
        read_buffers[i] = read_buffers[i - 1] + NUMBER_OF_SAMPLES_IN_BUFFER;
        write_buffers[i] = read_buffers[i] + NUMBER_OF_OVERLAP_SAMPLES;
    ab54:	6062      	str	r2, [r4, #4]
    ab56:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
    ab5a:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
	q7_t* mid_buffer = (q7_t*) AM_EXTERNAL_SRAM_START_ADDRESS;
    read_buffers[0] = (q15_t*) (mid_buffer + DNN_TOTAL_BUFFER_SIZE);
    write_buffers[0] = read_buffers[0] + NUMBER_OF_OVERLAP_SAMPLES;

    for (int i = 1; i < NUMBER_OF_BUFFERS; i += 1) {
        read_buffers[i] = read_buffers[i - 1] + NUMBER_OF_SAMPLES_IN_BUFFER;
    ab5e:	f8df c30c 	ldr.w	ip, [pc, #780]	; ae6c <makeRecording.constprop.1+0x36c>
    ab62:	f8df e30c 	ldr.w	lr, [pc, #780]	; ae70 <makeRecording.constprop.1+0x370>
        write_buffers[i] = read_buffers[i] + NUMBER_OF_OVERLAP_SAMPLES;
    ab66:	60a7      	str	r7, [r4, #8]
    ab68:	60e3      	str	r3, [r4, #12]
    ab6a:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
    ab6e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    ab72:	6120      	str	r0, [r4, #16]
    ab74:	6162      	str	r2, [r4, #20]

}

/* Save recording to SD card */

static AM_recordingState_t makeRecording(uint32_t currentTime, uint32_t recordDuration, bool enableLED, AM_batteryState_t batteryState) {
    ab76:	468b      	mov	fp, r1
    for (int i = 1; i < NUMBER_OF_BUFFERS; i += 1) {
        read_buffers[i] = read_buffers[i - 1] + NUMBER_OF_SAMPLES_IN_BUFFER;
        write_buffers[i] = read_buffers[i] + NUMBER_OF_OVERLAP_SAMPLES;
    }

    float32_t fft_input[FFT_LENGTH] = {};
    ab78:	f44f 6200 	mov.w	r2, #2048	; 0x800
    ab7c:	4631      	mov	r1, r6
    ab7e:	f20d 704c 	addw	r0, sp, #1868	; 0x74c
	q7_t* mid_buffer = (q7_t*) AM_EXTERNAL_SRAM_START_ADDRESS;
    read_buffers[0] = (q15_t*) (mid_buffer + DNN_TOTAL_BUFFER_SIZE);
    write_buffers[0] = read_buffers[0] + NUMBER_OF_OVERLAP_SAMPLES;

    for (int i = 1; i < NUMBER_OF_BUFFERS; i += 1) {
        read_buffers[i] = read_buffers[i - 1] + NUMBER_OF_SAMPLES_IN_BUFFER;
    ab82:	f8c5 c004 	str.w	ip, [r5, #4]
    ab86:	f8c5 e008 	str.w	lr, [r5, #8]
        write_buffers[i] = read_buffers[i] + NUMBER_OF_OVERLAP_SAMPLES;
    ab8a:	61a7      	str	r7, [r4, #24]
    ab8c:	61e3      	str	r3, [r4, #28]
    }

    float32_t fft_input[FFT_LENGTH] = {};
    ab8e:	f001 f95c 	bl	be4a <memset>
	float32_t fft_output[FFT_LENGTH] = {};
    ab92:	4631      	mov	r1, r6
    ab94:	f60d 704c 	addw	r0, sp, #3916	; 0xf4c
    ab98:	f44f 6200 	mov.w	r2, #2048	; 0x800
    ab9c:	f001 f955 	bl	be4a <memset>
    aba0:	f50d 57ba 	add.w	r7, sp, #5952	; 0x1740
	float32_t hamming[FFT_LENGTH];
	for(int i = 0; i < fft_length; i++){
	  hamming[i] = 0.54f - 0.46f*(arm_cos_f32(2*M_PI*i/(fft_length-1)));
    aba4:	eddf 8aa3 	vldr	s17, [pc, #652]	; ae34 <makeRecording.constprop.1+0x334>
    aba8:	ed9f 8aa3 	vldr	s16, [pc, #652]	; ae38 <makeRecording.constprop.1+0x338>
    abac:	370c      	adds	r7, #12
    abae:	4630      	mov	r0, r6
    abb0:	f000 fd00 	bl	b5b4 <__aeabi_i2d>
    abb4:	a392      	add	r3, pc, #584	; (adr r3, ae00 <makeRecording.constprop.1+0x300>)
    abb6:	e9d3 2300 	ldrd	r2, r3, [r3]
    abba:	f000 fd61 	bl	b680 <__aeabi_dmul>
    abbe:	a392      	add	r3, pc, #584	; (adr r3, ae08 <makeRecording.constprop.1+0x308>)
    abc0:	e9d3 2300 	ldrd	r2, r3, [r3]
    abc4:	f000 fe86 	bl	b8d4 <__aeabi_ddiv>
    abc8:	f000 fff4 	bl	bbb4 <__aeabi_d2f>
    abcc:	ee00 0a10 	vmov	s0, r0
    abd0:	f7fe ff00 	bl	99d4 <arm_cos_f32>
    abd4:	ee20 0a28 	vmul.f32	s0, s0, s17
    }

    float32_t fft_input[FFT_LENGTH] = {};
	float32_t fft_output[FFT_LENGTH] = {};
	float32_t hamming[FFT_LENGTH];
	for(int i = 0; i < fft_length; i++){
    abd8:	3601      	adds	r6, #1
	  hamming[i] = 0.54f - 0.46f*(arm_cos_f32(2*M_PI*i/(fft_length-1)));
    abda:	ee38 0a40 	vsub.f32	s0, s16, s0
    }

    float32_t fft_input[FFT_LENGTH] = {};
	float32_t fft_output[FFT_LENGTH] = {};
	float32_t hamming[FFT_LENGTH];
	for(int i = 0; i < fft_length; i++){
    abde:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
	  hamming[i] = 0.54f - 0.46f*(arm_cos_f32(2*M_PI*i/(fft_length-1)));
    abe2:	eca7 0a01 	vstmia	r7!, {s0}
    }

    float32_t fft_input[FFT_LENGTH] = {};
	float32_t fft_output[FFT_LENGTH] = {};
	float32_t hamming[FFT_LENGTH];
	for(int i = 0; i < fft_length; i++){
    abe6:	d1e2      	bne.n	abae <makeRecording.constprop.1+0xae>

    /* Calculate the bits to shift */

    bitsToShift = 0;

    uint16_t oversampling = configSettings->oversampleRate * configSettings->sampleRateDivider;
    abe8:	f8df a254 	ldr.w	sl, [pc, #596]	; ae40 <makeRecording.constprop.1+0x340>
	float32_t spectrogram_buffer[NN_INPUT_SIZE];
	q7_t feature_map[NN_INPUT_SIZE];

    /* Calculate the bits to shift */

    bitsToShift = 0;
    abec:	4893      	ldr	r0, [pc, #588]	; (ae3c <makeRecording.constprop.1+0x33c>)

    uint16_t oversampling = configSettings->oversampleRate * configSettings->sampleRateDivider;
    abee:	f8da 1000 	ldr.w	r1, [sl]
    abf2:	7b0e      	ldrb	r6, [r1, #12]
    abf4:	79cb      	ldrb	r3, [r1, #7]
    abf6:	fb03 f306 	mul.w	r3, r3, r6
	float32_t spectrogram_buffer[NN_INPUT_SIZE];
	q7_t feature_map[NN_INPUT_SIZE];

    /* Calculate the bits to shift */

    bitsToShift = 0;
    abfa:	2200      	movs	r2, #0

    uint16_t oversampling = configSettings->oversampleRate * configSettings->sampleRateDivider;

    while (oversampling > 16) {
    abfc:	2b10      	cmp	r3, #16
	float32_t spectrogram_buffer[NN_INPUT_SIZE];
	q7_t feature_map[NN_INPUT_SIZE];

    /* Calculate the bits to shift */

    bitsToShift = 0;
    abfe:	7002      	strb	r2, [r0, #0]

    uint16_t oversampling = configSettings->oversampleRate * configSettings->sampleRateDivider;

    while (oversampling > 16) {
    ac00:	d90a      	bls.n	ac18 <makeRecording.constprop.1+0x118>
    ac02:	27ff      	movs	r7, #255	; 0xff
        oversampling >>= 1;
    ac04:	f3c3 034f 	ubfx	r3, r3, #1, #16
    ac08:	f107 3eff 	add.w	lr, r7, #4294967295

    bitsToShift = 0;

    uint16_t oversampling = configSettings->oversampleRate * configSettings->sampleRateDivider;

    while (oversampling > 16) {
    ac0c:	2b10      	cmp	r3, #16
        oversampling >>= 1;
        bitsToShift -= 1;
    ac0e:	b2fa      	uxtb	r2, r7
    ac10:	fa5f f78e 	uxtb.w	r7, lr

    bitsToShift = 0;

    uint16_t oversampling = configSettings->oversampleRate * configSettings->sampleRateDivider;

    while (oversampling > 16) {
    ac14:	d8f6      	bhi.n	ac04 <makeRecording.constprop.1+0x104>
    ac16:	7002      	strb	r2, [r0, #0]
        oversampling >>= 1;
        bitsToShift -= 1;
    }

    while (oversampling < 16) {
    ac18:	2b10      	cmp	r3, #16
    ac1a:	d006      	beq.n	ac2a <makeRecording.constprop.1+0x12a>
        oversampling <<= 1;
    ac1c:	005b      	lsls	r3, r3, #1
    ac1e:	b29b      	uxth	r3, r3
    ac20:	3201      	adds	r2, #1
    while (oversampling > 16) {
        oversampling >>= 1;
        bitsToShift -= 1;
    }

    while (oversampling < 16) {
    ac22:	2b0f      	cmp	r3, #15
    ac24:	b2d2      	uxtb	r2, r2
    ac26:	d9f9      	bls.n	ac1c <makeRecording.constprop.1+0x11c>
    ac28:	7002      	strb	r2, [r0, #0]

    uint32_t numberOfSamples = configSettings->sampleRate / configSettings->sampleRateDivider * recordDuration;

    /* Enable the battery monitor */

    if (configSettings->enableBatteryCheck) {
    ac2a:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28

    /* Calculate recording parameters */

    uint32_t numberOfSamplesInHeader = sizeof(wavHeader) >> 1;

    uint32_t numberOfSamples = configSettings->sampleRate / configSettings->sampleRateDivider * recordDuration;
    ac2e:	f8d1 8008 	ldr.w	r8, [r1, #8]

    /* Enable the battery monitor */

    if (configSettings->enableBatteryCheck) {
    ac32:	2b00      	cmp	r3, #0
    ac34:	d16f      	bne.n	ad16 <makeRecording.constprop.1+0x216>

    }

    /* Initialise microphone for recording */

    AudioMoth_enableExternalSRAM();
    ac36:	f7f7 fe63 	bl	2900 <AudioMoth_enableExternalSRAM>

    AudioMoth_enableMicrophone(configSettings->gain, configSettings->clockDivider, configSettings->acquisitionCycles, configSettings->oversampleRate);
    ac3a:	f8da 3000 	ldr.w	r3, [sl]
    ac3e:	4f80      	ldr	r7, [pc, #512]	; (ae40 <makeRecording.constprop.1+0x340>)
    ac40:	7918      	ldrb	r0, [r3, #4]
    ac42:	7959      	ldrb	r1, [r3, #5]
    ac44:	799a      	ldrb	r2, [r3, #6]
    ac46:	79db      	ldrb	r3, [r3, #7]
    ac48:	f7f7 fd4a 	bl	26e0 <AudioMoth_enableMicrophone>

    AudioMoth_initialiseDirectMemoryAccess(primaryBuffer, secondaryBuffer, NUMBER_OF_SAMPLES_IN_DMA_TRANSFER);
    ac4c:	497d      	ldr	r1, [pc, #500]	; (ae44 <makeRecording.constprop.1+0x344>)
    ac4e:	487e      	ldr	r0, [pc, #504]	; (ae48 <makeRecording.constprop.1+0x348>)
    ac50:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ac54:	f7f7 fce2 	bl	261c <AudioMoth_initialiseDirectMemoryAccess>

    AudioMoth_startMicrophoneSamples(configSettings->sampleRate);
    ac58:	f8da 3000 	ldr.w	r3, [sl]
    ac5c:	6898      	ldr	r0, [r3, #8]
    ac5e:	f7f7 fcb5 	bl	25cc <AudioMoth_startMicrophoneSamples>

    /* Initialise file system and open a new file */
   
    if (enableLED) {

        AudioMoth_setRedLED(true);
    ac62:	2001      	movs	r0, #1
    ac64:	f7f8 f8f0 	bl	2e48 <AudioMoth_setRedLED>

    }

    RETURN_ON_ERROR(AudioMoth_enableFileSystem());
    ac68:	f7f8 f90a 	bl	2e80 <AudioMoth_enableFileSystem>
    ac6c:	683b      	ldr	r3, [r7, #0]
    ac6e:	2800      	cmp	r0, #0
    ac70:	d157      	bne.n	ad22 <makeRecording.constprop.1+0x222>
    RETURN_ON_ERROR(AudioMoth_openFile(resultsFileName));

    for(int i =0; i<analysisIndex; i++){
    	char res[RESULT_LENGTH];
    	sprintf(res, "%04d,", results[i]);
    	RETURN_ON_ERROR(AudioMoth_writeToFile(res, RESULT_LENGTH));
    ac72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    ac76:	2b00      	cmp	r3, #0
    ac78:	d14a      	bne.n	ad10 <makeRecording.constprop.1+0x210>
    ac7a:	2001      	movs	r0, #1
    ac7c:	f7f8 f8ea 	bl	2e54 <AudioMoth_setBothLED>
    ac80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    ac84:	f7f7 ff2c 	bl	2ae0 <AudioMoth_delay>
    ac88:	2000      	movs	r0, #0
    ac8a:	f7f8 f8e3 	bl	2e54 <AudioMoth_setBothLED>
    ac8e:	2002      	movs	r0, #2

    if (switchPositionChanged) return SWITCH_CHANGED;

    return RECORDING_OKAY;

}
    ac90:	f50d 5d48 	add.w	sp, sp, #12800	; 0x3200
    ac94:	b001      	add	sp, #4
    ac96:	ecbd 8b02 	vpop	{d8}
    ac9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

        AudioMoth_sleep();

    }

    if (configSettings->enableBatteryCheck ) {
    ac9e:	f8da 3000 	ldr.w	r3, [sl]
    aca2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    aca6:	2b00      	cmp	r3, #0
    aca8:	f040 81b4 	bne.w	b014 <makeRecording.constprop.1+0x514>

    }

    /* Initialise the WAV header */

    samplesWritten = MAX(numberOfSamplesInHeader, samplesWritten);
    acac:	4643      	mov	r3, r8
    acae:	2bb4      	cmp	r3, #180	; 0xb4
    acb0:	bf38      	it	cc
    acb2:	23b4      	movcc	r3, #180	; 0xb4

    setHeaderDetails(configSettings->sampleRate / configSettings->sampleRateDivider, samplesWritten - numberOfSamplesInHeader);
    acb4:	f8da 2000 	ldr.w	r2, [sl]
    .data = {.id = "data", .size = 0}
};

void setHeaderDetails(uint32_t sampleRate, uint32_t numberOfSamples) {

    wavHeader.wavFormat.samplesPerSecond = sampleRate;
    acb8:	4d64      	ldr	r5, [pc, #400]	; (ae4c <makeRecording.constprop.1+0x34c>)

    /* Initialise the WAV header */

    samplesWritten = MAX(numberOfSamplesInHeader, samplesWritten);

    setHeaderDetails(configSettings->sampleRate / configSettings->sampleRateDivider, samplesWritten - numberOfSamplesInHeader);
    acba:	6891      	ldr	r1, [r2, #8]
    acbc:	7b10      	ldrb	r0, [r2, #12]
    acbe:	fbb1 f1f0 	udiv	r1, r1, r0
    acc2:	3bb4      	subs	r3, #180	; 0xb4

void setHeaderDetails(uint32_t sampleRate, uint32_t numberOfSamples) {

    wavHeader.wavFormat.samplesPerSecond = sampleRate;
    wavHeader.wavFormat.bytesPerSecond = 2 * sampleRate;
    wavHeader.data.size = 2 * numberOfSamples;
    acc4:	005b      	lsls	r3, r3, #1
    wavHeader.riff.size = 2 * numberOfSamples + sizeof(wavHeader_t) - sizeof(chunk_t);
    acc6:	f503 74b0 	add.w	r4, r3, #352	; 0x160
};

void setHeaderDetails(uint32_t sampleRate, uint32_t numberOfSamples) {

    wavHeader.wavFormat.samplesPerSecond = sampleRate;
    wavHeader.wavFormat.bytesPerSecond = 2 * sampleRate;
    acca:	0048      	lsls	r0, r1, #1
    wavHeader.data.size = 2 * numberOfSamples;
    wavHeader.riff.size = 2 * numberOfSamples + sizeof(wavHeader_t) - sizeof(chunk_t);
    accc:	606c      	str	r4, [r5, #4]
    .data = {.id = "data", .size = 0}
};

void setHeaderDetails(uint32_t sampleRate, uint32_t numberOfSamples) {

    wavHeader.wavFormat.samplesPerSecond = sampleRate;
    acce:	61a9      	str	r1, [r5, #24]
    wavHeader.wavFormat.bytesPerSecond = 2 * sampleRate;
    acd0:	61e8      	str	r0, [r5, #28]
    wavHeader.data.size = 2 * numberOfSamples;
    acd2:	f8c5 3164 	str.w	r3, [r5, #356]	; 0x164

    samplesWritten = MAX(numberOfSamplesInHeader, samplesWritten);

    setHeaderDetails(configSettings->sampleRate / configSettings->sampleRateDivider, samplesWritten - numberOfSamplesInHeader);

    setHeaderComment(currentTime, configSettings->timezone, (uint8_t*)AM_UNIQUE_ID_START_ADDRESS, configSettings->gain, batteryState, batteryVoltageLow, switchPositionChanged);
    acd6:	7913      	ldrb	r3, [r2, #4]
    acd8:	f992 1027 	ldrsb.w	r1, [r2, #39]	; 0x27
    acdc:	4a5c      	ldr	r2, [pc, #368]	; (ae50 <makeRecording.constprop.1+0x350>)
    acde:	980c      	ldr	r0, [sp, #48]	; 0x30
    ace0:	7812      	ldrb	r2, [r2, #0]
    ace2:	9202      	str	r2, [sp, #8]
    ace4:	2400      	movs	r4, #0
    ace6:	9000      	str	r0, [sp, #0]
    ace8:	4a5a      	ldr	r2, [pc, #360]	; (ae54 <makeRecording.constprop.1+0x354>)
    acea:	980b      	ldr	r0, [sp, #44]	; 0x2c
    acec:	9401      	str	r4, [sp, #4]
    acee:	f7ff fe0b 	bl	a908 <setHeaderComment>

    /* Write the header */

    AudioMoth_setRedLED(true);
    acf2:	2001      	movs	r0, #1
    acf4:	f7f8 f8a8 	bl	2e48 <AudioMoth_setRedLED>

    RETURN_ON_ERROR(AudioMoth_seekInFile(0));
    acf8:	4620      	mov	r0, r4

    /* Initialise the WAV header */

    samplesWritten = MAX(numberOfSamplesInHeader, samplesWritten);

    setHeaderDetails(configSettings->sampleRate / configSettings->sampleRateDivider, samplesWritten - numberOfSamplesInHeader);
    acfa:	4e51      	ldr	r6, [pc, #324]	; (ae40 <makeRecording.constprop.1+0x340>)

    /* Write the header */

    AudioMoth_setRedLED(true);

    RETURN_ON_ERROR(AudioMoth_seekInFile(0));
    acfc:	f7f8 f8ee 	bl	2edc <AudioMoth_seekInFile>
    ad00:	2800      	cmp	r0, #0
    ad02:	f040 818a 	bne.w	b01a <makeRecording.constprop.1+0x51a>

    RETURN_ON_ERROR(AudioMoth_closeFile());

    /* Write the results */

    RETURN_ON_ERROR(AudioMoth_openFile(resultsFileName));
    ad06:	6833      	ldr	r3, [r6, #0]
    ad08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    ad0c:	2b00      	cmp	r3, #0
    ad0e:	d0b4      	beq.n	ac7a <makeRecording.constprop.1+0x17a>

    for(int i =0; i<analysisIndex; i++){
    	char res[RESULT_LENGTH];
    	sprintf(res, "%04d,", results[i]);
    	RETURN_ON_ERROR(AudioMoth_writeToFile(res, RESULT_LENGTH));
    ad10:	f7f7 ff94 	bl	2c3c <AudioMoth_disableBatteryMonitor>
    ad14:	e7b1      	b.n	ac7a <makeRecording.constprop.1+0x17a>

    /* Enable the battery monitor */

    if (configSettings->enableBatteryCheck) {

        AudioMoth_enableBatteryMonitor();
    ad16:	f7f7 ff61 	bl	2bdc <AudioMoth_enableBatteryMonitor>

        AudioMoth_setBatteryMonitorThreshold(AM_BATTERY_LOW);
    ad1a:	2000      	movs	r0, #0
    ad1c:	f7f7 ff6a 	bl	2bf4 <AudioMoth_setBatteryMonitorThreshold>
    ad20:	e789      	b.n	ac36 <makeRecording.constprop.1+0x136>

    RETURN_ON_ERROR(AudioMoth_enableFileSystem());

    /* Open a file with the current local time as the name */

    time_t rawtime = currentTime + configSettings->timezone * SECONDS_IN_HOUR;
    ad22:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ad24:	f993 3027 	ldrsb.w	r3, [r3, #39]	; 0x27
    ad28:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    ad2c:	fb02 1303 	mla	r3, r2, r3, r1

    struct tm *time = gmtime(&rawtime);
    ad30:	a80e      	add	r0, sp, #56	; 0x38

    RETURN_ON_ERROR(AudioMoth_enableFileSystem());

    /* Open a file with the current local time as the name */

    time_t rawtime = currentTime + configSettings->timezone * SECONDS_IN_HOUR;
    ad32:	930e      	str	r3, [sp, #56]	; 0x38

    struct tm *time = gmtime(&rawtime);
    ad34:	f000 ffa8 	bl	bc88 <gmtime>
    ad38:	4684      	mov	ip, r0

    sprintf(fileName, "%04d%02d%02d_%02d%02d%02d.WAV", 1900 + time->tm_year, time->tm_mon + 1, time->tm_mday, time->tm_hour, time->tm_min, time->tm_sec);
    ad3a:	68c0      	ldr	r0, [r0, #12]
    ad3c:	f8dc 2014 	ldr.w	r2, [ip, #20]
    ad40:	f8dc 3010 	ldr.w	r3, [ip, #16]
    ad44:	9000      	str	r0, [sp, #0]
    ad46:	f8dc 0008 	ldr.w	r0, [ip, #8]
    ad4a:	9001      	str	r0, [sp, #4]
    ad4c:	f8dc 0004 	ldr.w	r0, [ip, #4]
    ad50:	9002      	str	r0, [sp, #8]
    ad52:	f8dc 0000 	ldr.w	r0, [ip]
    ad56:	4940      	ldr	r1, [pc, #256]	; (ae58 <makeRecording.constprop.1+0x358>)
    ad58:	9003      	str	r0, [sp, #12]
    ad5a:	f202 726c 	addw	r2, r2, #1900	; 0x76c
    ad5e:	3301      	adds	r3, #1
    ad60:	483e      	ldr	r0, [pc, #248]	; (ae5c <makeRecording.constprop.1+0x35c>)
    ad62:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    ad66:	f001 f93b 	bl	bfe0 <siprintf>
    sprintf(resultsFileName, "%04d%02d%02d_%02d%02d%02d.TXT", 1900 + time->tm_year, time->tm_mon + 1, time->tm_mday, time->tm_hour, time->tm_min, time->tm_sec);
    ad6a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    ad6e:	483c      	ldr	r0, [pc, #240]	; (ae60 <makeRecording.constprop.1+0x360>)
    ad70:	f8dc 100c 	ldr.w	r1, [ip, #12]
    ad74:	f8dc 2014 	ldr.w	r2, [ip, #20]
    ad78:	f8dc 3010 	ldr.w	r3, [ip, #16]
    ad7c:	9100      	str	r1, [sp, #0]
    ad7e:	f8dc 1008 	ldr.w	r1, [ip, #8]
    ad82:	9101      	str	r1, [sp, #4]
    ad84:	f8dc 1004 	ldr.w	r1, [ip, #4]
    ad88:	9102      	str	r1, [sp, #8]
    ad8a:	f8dc 1000 	ldr.w	r1, [ip]
    ad8e:	9103      	str	r1, [sp, #12]
    ad90:	f202 726c 	addw	r2, r2, #1900	; 0x76c
    ad94:	3301      	adds	r3, #1
    ad96:	4933      	ldr	r1, [pc, #204]	; (ae64 <makeRecording.constprop.1+0x364>)
    ad98:	f001 f922 	bl	bfe0 <siprintf>

    RETURN_ON_ERROR(AudioMoth_openFile(fileName));
    ad9c:	482f      	ldr	r0, [pc, #188]	; (ae5c <makeRecording.constprop.1+0x35c>)
    ad9e:	f7f8 f891 	bl	2ec4 <AudioMoth_openFile>
    ada2:	b930      	cbnz	r0, adb2 <makeRecording.constprop.1+0x2b2>
    ada4:	683b      	ldr	r3, [r7, #0]
    ada6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    adaa:	2b00      	cmp	r3, #0
    adac:	f43f af65 	beq.w	ac7a <makeRecording.constprop.1+0x17a>
    adb0:	e7ae      	b.n	ad10 <makeRecording.constprop.1+0x210>

    if (enableLED) {

        AudioMoth_setRedLED(false);
    adb2:	2000      	movs	r0, #0
    adb4:	f7f8 f848 	bl	2e48 <AudioMoth_setRedLED>

    /* Calculate recording parameters */

    uint32_t numberOfSamplesInHeader = sizeof(wavHeader) >> 1;

    uint32_t numberOfSamples = configSettings->sampleRate / configSettings->sampleRateDivider * recordDuration;
    adb8:	fbb8 f6f6 	udiv	r6, r8, r6

    }

    /* Termination conditions */

    switchPositionChanged = false;
    adbc:	4a24      	ldr	r2, [pc, #144]	; (ae50 <makeRecording.constprop.1+0x350>)
    adbe:	2300      	movs	r3, #0
    adc0:	7013      	strb	r3, [r2, #0]

    /* Calculate recording parameters */

    uint32_t numberOfSamplesInHeader = sizeof(wavHeader) >> 1;

    uint32_t numberOfSamples = configSettings->sampleRate / configSettings->sampleRateDivider * recordDuration;
    adc2:	fb06 f20b 	mul.w	r2, r6, fp

    uint32_t samplesWritten = 0;

    uint32_t buffersProcessed = 0;

    uint32_t analysisIndex = 0;
    adc6:	469b      	mov	fp, r3

    readBuffer = writeBuffer;
    adc8:	4b13      	ldr	r3, [pc, #76]	; (ae18 <makeRecording.constprop.1+0x318>)
    adca:	681b      	ldr	r3, [r3, #0]
    adcc:	f8c9 3000 	str.w	r3, [r9]

    while (samplesWritten < numberOfSamples + numberOfSamplesInHeader && !switchPositionChanged && !batteryVoltageLow) {
    add0:	f102 03b4 	add.w	r3, r2, #180	; 0xb4
    add4:	9309      	str	r3, [sp, #36]	; 0x24

    /* Main record loop */

    uint32_t samplesWritten = 0;

    uint32_t buffersProcessed = 0;
    add6:	465f      	mov	r7, fp

    bool batteryVoltageLow = false;

    /* Main record loop */

    uint32_t samplesWritten = 0;
    add8:	46d8      	mov	r8, fp

    uint32_t analysisIndex = 0;

    readBuffer = writeBuffer;

    while (samplesWritten < numberOfSamples + numberOfSamplesInHeader && !switchPositionChanged && !batteryVoltageLow) {
    adda:	9b09      	ldr	r3, [sp, #36]	; 0x24
    addc:	4543      	cmp	r3, r8
    adde:	f67f af5e 	bls.w	ac9e <makeRecording.constprop.1+0x19e>
    ade2:	4b1b      	ldr	r3, [pc, #108]	; (ae50 <makeRecording.constprop.1+0x350>)
    ade4:	781b      	ldrb	r3, [r3, #0]
    ade6:	2b00      	cmp	r3, #0
    ade8:	f47f af59 	bne.w	ac9e <makeRecording.constprop.1+0x19e>

        while (readBuffer != writeBuffer && samplesWritten < numberOfSamples + numberOfSamplesInHeader && !switchPositionChanged && !batteryVoltageLow) {
    adec:	4b0a      	ldr	r3, [pc, #40]	; (ae18 <makeRecording.constprop.1+0x318>)
    adee:	f8d9 2000 	ldr.w	r2, [r9]
    adf2:	681b      	ldr	r3, [r3, #0]
    adf4:	429a      	cmp	r2, r3
    adf6:	d17d      	bne.n	aef4 <makeRecording.constprop.1+0x3f4>
    adf8:	e0fb      	b.n	aff2 <makeRecording.constprop.1+0x4f2>
    adfa:	bf00      	nop
    adfc:	f3af 8000 	nop.w
    ae00:	f01b866e 	.word	0xf01b866e
    ae04:	401921f9 	.word	0x401921f9
    ae08:	00000000 	.word	0x00000000
    ae0c:	407ff000 	.word	0x407ff000
    ae10:	200012d4 	.word	0x200012d4
    ae14:	800009da 	.word	0x800009da
    ae18:	20001b24 	.word	0x20001b24
    ae1c:	20002334 	.word	0x20002334
    ae20:	8000c9da 	.word	0x8000c9da
    ae24:	800109da 	.word	0x800109da
    ae28:	800149da 	.word	0x800149da
    ae2c:	20002338 	.word	0x20002338
    ae30:	800189da 	.word	0x800189da
    ae34:	3eeb851f 	.word	0x3eeb851f
    ae38:	3f0a3d71 	.word	0x3f0a3d71
    ae3c:	2000130c 	.word	0x2000130c
    ae40:	200008a8 	.word	0x200008a8
    ae44:	20001b34 	.word	0x20001b34
    ae48:	20001324 	.word	0x20001324
    ae4c:	200008b0 	.word	0x200008b0
    ae50:	20001b30 	.word	0x20001b30
    ae54:	0fe081f0 	.word	0x0fe081f0
    ae58:	00021fe0 	.word	0x00021fe0
    ae5c:	200012f8 	.word	0x200012f8
    ae60:	20001310 	.word	0x20001310
    ae64:	00022000 	.word	0x00022000
    ae68:	20001b2c 	.word	0x20001b2c
    ae6c:	800049da 	.word	0x800049da
    ae70:	800089da 	.word	0x800089da
            //printf("address of write buffer %d is %p \n", readBuffer, write_buffers[readBuffer]);

            /* Analyze sample */

			if(buffersProcessed < NUMBER_OF_BUFFERS_TO_SKIP){
				wave_to_spectrogram(fft_input, fft_output, read_buffers[readBuffer]+NUMBER_OF_OVERLAP_SAMPLES, (int32_t) NUMBER_OF_SAMPLES_IN_BUFFER, spectrogram_buffer, feature_map, hamming, (uint16_t) FFT_LENGTH);
    ae74:	f50d 51fa 	add.w	r1, sp, #8000	; 0x1f40
    ae78:	f8d9 3000 	ldr.w	r3, [r9]
    ae7c:	310c      	adds	r1, #12
    ae7e:	9100      	str	r1, [sp, #0]
    ae80:	a9a7      	add	r1, sp, #668	; 0x29c
    ae82:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    ae86:	9101      	str	r1, [sp, #4]
    ae88:	f50d 51ba 	add.w	r1, sp, #5952	; 0x1740
    ae8c:	310c      	adds	r1, #12
    ae8e:	9102      	str	r1, [sp, #8]
    ae90:	9203      	str	r2, [sp, #12]
    ae92:	f20d 704c 	addw	r0, sp, #1868	; 0x74c
    ae96:	f503 7200 	add.w	r2, r3, #512	; 0x200
    ae9a:	f60d 714c 	addw	r1, sp, #3916	; 0xf4c
    ae9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    aea2:	f7fd fc45 	bl	8730 <wave_to_spectrogram>

            }

            /* Write the appropriate number of bytes to the SD card */

            uint32_t numberOfSamplesToWrite = 0;
    aea6:	46bc      	mov	ip, r7
					AudioMoth_delay(500);

					AudioMoth_setGreenLED(false);
				}
			}
			if(readBuffer == NUMBER_OF_BUFFERS-1){
    aea8:	f8d9 3000 	ldr.w	r3, [r9]
				memcpy(read_buffers[0], read_buffers[readBuffer]+NUMBER_OF_SAMPLES_IN_BUFFER, NUMBER_OF_OVERLAP_SAMPLES*2);
			}

            /* Write the recording to the SD card*/

            RETURN_ON_ERROR(AudioMoth_writeToFile(write_buffers[readBuffer], 2 * numberOfSamplesToWrite));
    aeac:	4e72      	ldr	r6, [pc, #456]	; (b078 <makeRecording.constprop.1+0x578>)
					AudioMoth_delay(500);

					AudioMoth_setGreenLED(false);
				}
			}
			if(readBuffer == NUMBER_OF_BUFFERS-1){
    aeae:	2b07      	cmp	r3, #7

            /* Increment buffer counters */

            readBuffer = (readBuffer + 1) & (NUMBER_OF_BUFFERS - 1);

            samplesWritten += numberOfSamplesToWrite;
    aeb0:	44e0      	add	r8, ip

            buffersProcessed += 1;
    aeb2:	f107 0701 	add.w	r7, r7, #1
					AudioMoth_delay(500);

					AudioMoth_setGreenLED(false);
				}
			}
			if(readBuffer == NUMBER_OF_BUFFERS-1){
    aeb6:	f000 808d 	beq.w	afd4 <makeRecording.constprop.1+0x4d4>
				memcpy(read_buffers[0], read_buffers[readBuffer]+NUMBER_OF_SAMPLES_IN_BUFFER, NUMBER_OF_OVERLAP_SAMPLES*2);
			}

            /* Write the recording to the SD card*/

            RETURN_ON_ERROR(AudioMoth_writeToFile(write_buffers[readBuffer], 2 * numberOfSamplesToWrite));
    aeba:	f8d9 3000 	ldr.w	r3, [r9]
    aebe:	ea4f 014c 	mov.w	r1, ip, lsl #1
    aec2:	b289      	uxth	r1, r1
    aec4:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    aec8:	f7f8 f814 	bl	2ef4 <AudioMoth_writeToFile>
    aecc:	2800      	cmp	r0, #0
    aece:	f000 8098 	beq.w	b002 <makeRecording.constprop.1+0x502>

            /* Increment buffer counters */

            readBuffer = (readBuffer + 1) & (NUMBER_OF_BUFFERS - 1);
    aed2:	6833      	ldr	r3, [r6, #0]
    aed4:	3301      	adds	r3, #1
    aed6:	f003 0307 	and.w	r3, r3, #7

            buffersProcessed += 1;

            /* Clear LED */

            AudioMoth_setRedLED(false);
    aeda:	2000      	movs	r0, #0

            RETURN_ON_ERROR(AudioMoth_writeToFile(write_buffers[readBuffer], 2 * numberOfSamplesToWrite));

            /* Increment buffer counters */

            readBuffer = (readBuffer + 1) & (NUMBER_OF_BUFFERS - 1);
    aedc:	6033      	str	r3, [r6, #0]

            buffersProcessed += 1;

            /* Clear LED */

            AudioMoth_setRedLED(false);
    aede:	f7f7 ffb3 	bl	2e48 <AudioMoth_setRedLED>

    readBuffer = writeBuffer;

    while (samplesWritten < numberOfSamples + numberOfSamplesInHeader && !switchPositionChanged && !batteryVoltageLow) {

        while (readBuffer != writeBuffer && samplesWritten < numberOfSamples + numberOfSamplesInHeader && !switchPositionChanged && !batteryVoltageLow) {
    aee2:	4b66      	ldr	r3, [pc, #408]	; (b07c <makeRecording.constprop.1+0x57c>)
    aee4:	6832      	ldr	r2, [r6, #0]
    aee6:	681b      	ldr	r3, [r3, #0]
    aee8:	429a      	cmp	r2, r3
    aeea:	f000 8082 	beq.w	aff2 <makeRecording.constprop.1+0x4f2>
    aeee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    aef0:	4543      	cmp	r3, r8
    aef2:	d97e      	bls.n	aff2 <makeRecording.constprop.1+0x4f2>
    aef4:	4b62      	ldr	r3, [pc, #392]	; (b080 <makeRecording.constprop.1+0x580>)
    aef6:	781b      	ldrb	r3, [r3, #0]
    aef8:	2b00      	cmp	r3, #0
    aefa:	d17a      	bne.n	aff2 <makeRecording.constprop.1+0x4f2>

            uint32_t numberOfSamplesToWrite = 0;

            if (buffersProcessed >= NUMBER_OF_BUFFERS_TO_SKIP) {

                numberOfSamplesToWrite = MIN(numberOfSamples + numberOfSamplesInHeader - samplesWritten, NUMBER_OF_SAMPLES_IN_BUFFER);
    aefc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    aefe:	ebc8 0c03 	rsb	ip, r8, r3
    af02:	f5bc 5f00 	cmp.w	ip, #8192	; 0x2000
    af06:	bf28      	it	cs
    af08:	f44f 5c00 	movcs.w	ip, #8192	; 0x2000

            /* Light LED during SD card write if appropriate */

            if (enableLED) {

                AudioMoth_setRedLED(true);
    af0c:	2001      	movs	r0, #1

            uint32_t numberOfSamplesToWrite = 0;

            if (buffersProcessed >= NUMBER_OF_BUFFERS_TO_SKIP) {

                numberOfSamplesToWrite = MIN(numberOfSamples + numberOfSamplesInHeader - samplesWritten, NUMBER_OF_SAMPLES_IN_BUFFER);
    af0e:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    af12:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34

            /* Light LED during SD card write if appropriate */

            if (enableLED) {

                AudioMoth_setRedLED(true);
    af16:	f7f7 ff97 	bl	2e48 <AudioMoth_setRedLED>

			if(buffersProcessed < NUMBER_OF_BUFFERS_TO_SKIP){
				wave_to_spectrogram(fft_input, fft_output, read_buffers[readBuffer]+NUMBER_OF_OVERLAP_SAMPLES, (int32_t) NUMBER_OF_SAMPLES_IN_BUFFER, spectrogram_buffer, feature_map, hamming, (uint16_t) FFT_LENGTH);
			}
			else {
				wave_to_spectrogram(fft_input, fft_output, read_buffers[readBuffer], (int32_t) NUMBER_OF_SAMPLES_IN_BUFFER + NUMBER_OF_OVERLAP_SAMPLES, spectrogram_buffer, feature_map + NN_INPUT_TO_COPY_LEN, hamming, (uint16_t) FFT_LENGTH);
    af1a:	f20d 4ee9 	addw	lr, sp, #1257	; 0x4e9
    af1e:	f20d 704c 	addw	r0, sp, #1868	; 0x74c
    af22:	f60d 714c 	addw	r1, sp, #3916	; 0xf4c
    af26:	f44f 5304 	mov.w	r3, #8448	; 0x2100
            //printf("address of write buffer %d is %p \n", readBuffer, write_buffers[readBuffer]);

            /* Analyze sample */

			if(buffersProcessed < NUMBER_OF_BUFFERS_TO_SKIP){
				wave_to_spectrogram(fft_input, fft_output, read_buffers[readBuffer]+NUMBER_OF_OVERLAP_SAMPLES, (int32_t) NUMBER_OF_SAMPLES_IN_BUFFER, spectrogram_buffer, feature_map, hamming, (uint16_t) FFT_LENGTH);
    af2a:	f44f 7200 	mov.w	r2, #512	; 0x200

            /* Write the appropriate number of bytes to the SD card */

            uint32_t numberOfSamplesToWrite = 0;

            if (buffersProcessed >= NUMBER_OF_BUFFERS_TO_SKIP) {
    af2e:	2f00      	cmp	r7, #0
    af30:	d0a0      	beq.n	ae74 <makeRecording.constprop.1+0x374>

			if(buffersProcessed < NUMBER_OF_BUFFERS_TO_SKIP){
				wave_to_spectrogram(fft_input, fft_output, read_buffers[readBuffer]+NUMBER_OF_OVERLAP_SAMPLES, (int32_t) NUMBER_OF_SAMPLES_IN_BUFFER, spectrogram_buffer, feature_map, hamming, (uint16_t) FFT_LENGTH);
			}
			else {
				wave_to_spectrogram(fft_input, fft_output, read_buffers[readBuffer], (int32_t) NUMBER_OF_SAMPLES_IN_BUFFER + NUMBER_OF_OVERLAP_SAMPLES, spectrogram_buffer, feature_map + NN_INPUT_TO_COPY_LEN, hamming, (uint16_t) FFT_LENGTH);
    af32:	f50d 56fa 	add.w	r6, sp, #8000	; 0x1f40
    af36:	360c      	adds	r6, #12
    af38:	9600      	str	r6, [sp, #0]
    af3a:	f8d9 2000 	ldr.w	r2, [r9]
    af3e:	f50d 56ba 	add.w	r6, sp, #5952	; 0x1740
    af42:	360c      	adds	r6, #12
    af44:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    af48:	9602      	str	r6, [sp, #8]
    af4a:	f44f 7600 	mov.w	r6, #512	; 0x200
    af4e:	f8cd e004 	str.w	lr, [sp, #4]
    af52:	9603      	str	r6, [sp, #12]
    af54:	f7fd fbec 	bl	8730 <wave_to_spectrogram>
				forward_propagate_q7_dnn(feature_map, mid_buffer, (results+analysisIndex), dense1_wt, dense1_bias,
    af58:	f8df e14c 	ldr.w	lr, [pc, #332]	; b0a8 <makeRecording.constprop.1+0x5a8>
    af5c:	4b49      	ldr	r3, [pc, #292]	; (b084 <makeRecording.constprop.1+0x584>)
    af5e:	f8df c14c 	ldr.w	ip, [pc, #332]	; b0ac <makeRecording.constprop.1+0x5ac>
    af62:	4849      	ldr	r0, [pc, #292]	; (b088 <makeRecording.constprop.1+0x588>)
    af64:	4949      	ldr	r1, [pc, #292]	; (b08c <makeRecording.constprop.1+0x58c>)
    af66:	4a4a      	ldr	r2, [pc, #296]	; (b090 <makeRecording.constprop.1+0x590>)
    af68:	4e4a      	ldr	r6, [pc, #296]	; (b094 <makeRecording.constprop.1+0x594>)
    af6a:	f8cd c018 	str.w	ip, [sp, #24]
    af6e:	e88d 4008 	stmia.w	sp, {r3, lr}
    af72:	ab11      	add	r3, sp, #68	; 0x44
    af74:	9003      	str	r0, [sp, #12]
    af76:	9104      	str	r1, [sp, #16]
    af78:	9205      	str	r2, [sp, #20]
    af7a:	a8a7      	add	r0, sp, #668	; 0x29c
    af7c:	eb03 020b 	add.w	r2, r3, fp
    af80:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    af84:	4b44      	ldr	r3, [pc, #272]	; (b098 <makeRecording.constprop.1+0x598>)
    af86:	9602      	str	r6, [sp, #8]
    af88:	f7fd fd26 	bl	89d8 <forward_propagate_q7_dnn>
						dense2_wt, dense2_bias, dense3_wt, dense3_bias, dense4_wt, dense4_bias);
				memcpy(feature_map, feature_map+NN_INPUT_TO_WRITE_LEN, NN_INPUT_TO_COPY_LEN);
    af8c:	f20d 41fc 	addw	r1, sp, #1276	; 0x4fc
    af90:	f240 224d 	movw	r2, #589	; 0x24d
    af94:	a8a7      	add	r0, sp, #668	; 0x29c
    af96:	f000 ff4d 	bl	be34 <memcpy>

				analysisIndex++;
    af9a:	f10b 0b01 	add.w	fp, fp, #1
				printf("Output is %d\n", results[analysisIndex]);
    af9e:	ab11      	add	r3, sp, #68	; 0x44
    afa0:	483e      	ldr	r0, [pc, #248]	; (b09c <makeRecording.constprop.1+0x59c>)
    afa2:	f913 100b 	ldrsb.w	r1, [r3, fp]
    afa6:	f000 fff3 	bl	bf90 <iprintf>
				if(results[analysisIndex] > 60){
    afaa:	ab11      	add	r3, sp, #68	; 0x44
    afac:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    afb0:	f913 300b 	ldrsb.w	r3, [r3, fp]
    afb4:	2b3c      	cmp	r3, #60	; 0x3c
    afb6:	f77f af77 	ble.w	aea8 <makeRecording.constprop.1+0x3a8>
					AudioMoth_setGreenLED(true);
    afba:	2001      	movs	r0, #1
    afbc:	f7f7 ff5a 	bl	2e74 <AudioMoth_setGreenLED>

					AudioMoth_delay(500);
    afc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    afc4:	f7f7 fd8c 	bl	2ae0 <AudioMoth_delay>

					AudioMoth_setGreenLED(false);
    afc8:	2000      	movs	r0, #0
    afca:	f7f7 ff53 	bl	2e74 <AudioMoth_setGreenLED>
    afce:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    afd2:	e769      	b.n	aea8 <makeRecording.constprop.1+0x3a8>
				}
			}
			if(readBuffer == NUMBER_OF_BUFFERS-1){
				memcpy(read_buffers[0], read_buffers[readBuffer]+NUMBER_OF_SAMPLES_IN_BUFFER, NUMBER_OF_OVERLAP_SAMPLES*2);
    afd4:	6833      	ldr	r3, [r6, #0]
    afd6:	6828      	ldr	r0, [r5, #0]
    afd8:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
    afdc:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    afe0:	f44f 7200 	mov.w	r2, #512	; 0x200
    afe4:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
    afe8:	f000 ff24 	bl	be34 <memcpy>
    afec:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    aff0:	e763      	b.n	aeba <makeRecording.constprop.1+0x3ba>

        }

        /* Enable the battery monitor */

        if (configSettings->enableBatteryCheck) {
    aff2:	f8da 3000 	ldr.w	r3, [sl]
    aff6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    affa:	b92b      	cbnz	r3, b008 <makeRecording.constprop.1+0x508>

        }

        /* Sleep until next DMA transfer is complete */

        AudioMoth_sleep();
    affc:	f7f7 fde4 	bl	2bc8 <AudioMoth_sleep>
    b000:	e6eb      	b.n	adda <makeRecording.constprop.1+0x2da>
    RETURN_ON_ERROR(AudioMoth_openFile(resultsFileName));

    for(int i =0; i<analysisIndex; i++){
    	char res[RESULT_LENGTH];
    	sprintf(res, "%04d,", results[i]);
    	RETURN_ON_ERROR(AudioMoth_writeToFile(res, RESULT_LENGTH));
    b002:	f8da 3000 	ldr.w	r3, [sl]
    b006:	e634      	b.n	ac72 <makeRecording.constprop.1+0x172>

        /* Enable the battery monitor */

        if (configSettings->enableBatteryCheck) {

            AudioMoth_enableBatteryMonitor();
    b008:	f7f7 fde8 	bl	2bdc <AudioMoth_enableBatteryMonitor>

            AudioMoth_setBatteryMonitorThreshold(AM_BATTERY_LOW);
    b00c:	2000      	movs	r0, #0
    b00e:	f7f7 fdf1 	bl	2bf4 <AudioMoth_setBatteryMonitorThreshold>
    b012:	e7f3      	b.n	affc <makeRecording.constprop.1+0x4fc>

    }

    if (configSettings->enableBatteryCheck ) {

        AudioMoth_disableBatteryMonitor();
    b014:	f7f7 fe12 	bl	2c3c <AudioMoth_disableBatteryMonitor>
    b018:	e648      	b.n	acac <makeRecording.constprop.1+0x1ac>

    AudioMoth_setRedLED(true);

    RETURN_ON_ERROR(AudioMoth_seekInFile(0));

    RETURN_ON_ERROR(AudioMoth_writeToFile(&wavHeader, sizeof(wavHeader)));
    b01a:	4628      	mov	r0, r5
    b01c:	f44f 71b4 	mov.w	r1, #360	; 0x168
    b020:	f7f7 ff68 	bl	2ef4 <AudioMoth_writeToFile>
    b024:	2800      	cmp	r0, #0
    b026:	f43f ae6e 	beq.w	ad06 <makeRecording.constprop.1+0x206>

    /* Close the file */

    RETURN_ON_ERROR(AudioMoth_closeFile());
    b02a:	f7f7 ff79 	bl	2f20 <AudioMoth_closeFile>
    b02e:	2800      	cmp	r0, #0
    b030:	f43f ae69 	beq.w	ad06 <makeRecording.constprop.1+0x206>

    /* Write the results */

    RETURN_ON_ERROR(AudioMoth_openFile(resultsFileName));
    b034:	481a      	ldr	r0, [pc, #104]	; (b0a0 <makeRecording.constprop.1+0x5a0>)
    b036:	f7f7 ff45 	bl	2ec4 <AudioMoth_openFile>
    b03a:	2800      	cmp	r0, #0
    b03c:	f43f ae63 	beq.w	ad06 <makeRecording.constprop.1+0x206>

    for(int i =0; i<analysisIndex; i++){
    	char res[RESULT_LENGTH];
    	sprintf(res, "%04d,", results[i]);
    b040:	ad0f      	add	r5, sp, #60	; 0x3c

    /* Write the results */

    RETURN_ON_ERROR(AudioMoth_openFile(resultsFileName));

    for(int i =0; i<analysisIndex; i++){
    b042:	455c      	cmp	r4, fp
    	char res[RESULT_LENGTH];
    	sprintf(res, "%04d,", results[i]);
    b044:	ab11      	add	r3, sp, #68	; 0x44
    b046:	4917      	ldr	r1, [pc, #92]	; (b0a4 <makeRecording.constprop.1+0x5a4>)
    b048:	4628      	mov	r0, r5

    /* Write the results */

    RETURN_ON_ERROR(AudioMoth_openFile(resultsFileName));

    for(int i =0; i<analysisIndex; i++){
    b04a:	d00a      	beq.n	b062 <makeRecording.constprop.1+0x562>
    	char res[RESULT_LENGTH];
    	sprintf(res, "%04d,", results[i]);
    b04c:	571a      	ldrsb	r2, [r3, r4]
    b04e:	f000 ffc7 	bl	bfe0 <siprintf>
    	RETURN_ON_ERROR(AudioMoth_writeToFile(res, RESULT_LENGTH));
    b052:	4628      	mov	r0, r5
    b054:	2105      	movs	r1, #5
    b056:	f7f7 ff4d 	bl	2ef4 <AudioMoth_writeToFile>
    b05a:	2800      	cmp	r0, #0
    b05c:	d0d1      	beq.n	b002 <makeRecording.constprop.1+0x502>

    /* Write the results */

    RETURN_ON_ERROR(AudioMoth_openFile(resultsFileName));

    for(int i =0; i<analysisIndex; i++){
    b05e:	3401      	adds	r4, #1
    b060:	e7ef      	b.n	b042 <makeRecording.constprop.1+0x542>
    	char res[RESULT_LENGTH];
    	sprintf(res, "%04d,", results[i]);
    	RETURN_ON_ERROR(AudioMoth_writeToFile(res, RESULT_LENGTH));
    }

    RETURN_ON_ERROR(AudioMoth_closeFile());
    b062:	f7f7 ff5d 	bl	2f20 <AudioMoth_closeFile>
    b066:	2800      	cmp	r0, #0
    b068:	d0cb      	beq.n	b002 <makeRecording.constprop.1+0x502>

    if (enableLED) {

        AudioMoth_setRedLED(false);
    b06a:	2000      	movs	r0, #0
    b06c:	f7f7 feec 	bl	2e48 <AudioMoth_setRedLED>

    /* Return with state */

    if (batteryVoltageLow) return BATTERY_CHECK;

    if (switchPositionChanged) return SWITCH_CHANGED;
    b070:	4b03      	ldr	r3, [pc, #12]	; (b080 <makeRecording.constprop.1+0x580>)
    b072:	7818      	ldrb	r0, [r3, #0]
    b074:	b2c0      	uxtb	r0, r0
    b076:	e60b      	b.n	ac90 <makeRecording.constprop.1+0x190>
    b078:	20001b2c 	.word	0x20001b2c
    b07c:	20001b24 	.word	0x20001b24
    b080:	20001b30 	.word	0x20001b30
    b084:	00022038 	.word	0x00022038
    b088:	00034bf8 	.word	0x00034bf8
    b08c:	00022078 	.word	0x00022078
    b090:	00021e8c 	.word	0x00021e8c
    b094:	00035bf8 	.word	0x00035bf8
    b098:	000220b8 	.word	0x000220b8
    b09c:	00022020 	.word	0x00022020
    b0a0:	20001310 	.word	0x20001310
    b0a4:	00022030 	.word	0x00022030
    b0a8:	00020e8c 	.word	0x00020e8c
    b0ac:	00020e88 	.word	0x00020e88

0000b0b0 <main>:
static void scheduleRecording(uint32_t currentTime, uint32_t *timeOfNextRecording, uint32_t *durationOfNextRecording);
static AM_recordingState_t makeRecording(uint32_t currentTime, uint32_t recordDuration, bool enableLED, AM_batteryState_t batteryState);

/* Main function */

int main(void) {
    b0b0:	b5f0      	push	{r4, r5, r6, r7, lr}

    AudioMoth_initialise();

    AudioMoth_setupSWOForPrint();

	memcpy(configSettings, &defaultConfigSettings, sizeof(configSettings_t));
    b0b2:	4f19      	ldr	r7, [pc, #100]	; (b118 <main+0x68>)
    b0b4:	4e19      	ldr	r6, [pc, #100]	; (b11c <main+0x6c>)
static void scheduleRecording(uint32_t currentTime, uint32_t *timeOfNextRecording, uint32_t *durationOfNextRecording);
static AM_recordingState_t makeRecording(uint32_t currentTime, uint32_t recordDuration, bool enableLED, AM_batteryState_t batteryState);

/* Main function */

int main(void) {
    b0b6:	b083      	sub	sp, #12

    /* Initialise device */

    AudioMoth_initialise();
    b0b8:	f7f7 f97c 	bl	23b4 <AudioMoth_initialise>

    AudioMoth_setupSWOForPrint();
    b0bc:	f7f7 ff68 	bl	2f90 <AudioMoth_setupSWOForPrint>

	memcpy(configSettings, &defaultConfigSettings, sizeof(configSettings_t));
    b0c0:	683d      	ldr	r5, [r7, #0]
    b0c2:	f106 0e20 	add.w	lr, r6, #32
    b0c6:	4634      	mov	r4, r6
    b0c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    b0ca:	4574      	cmp	r4, lr
    b0cc:	6028      	str	r0, [r5, #0]
    b0ce:	6069      	str	r1, [r5, #4]
    b0d0:	60aa      	str	r2, [r5, #8]
    b0d2:	60eb      	str	r3, [r5, #12]
    b0d4:	4626      	mov	r6, r4
    b0d6:	f105 0510 	add.w	r5, r5, #16
    b0da:	d1f4      	bne.n	b0c6 <main+0x16>
    b0dc:	ce03      	ldmia	r6!, {r0, r1}
    b0de:	6028      	str	r0, [r5, #0]
    b0e0:	6069      	str	r1, [r5, #4]
    b0e2:	8833      	ldrh	r3, [r6, #0]
    b0e4:	812b      	strh	r3, [r5, #8]

    uint32_t currentTime;

    AudioMoth_getTime(&currentTime, NULL);
    b0e6:	a801      	add	r0, sp, #4
    b0e8:	2100      	movs	r1, #0
    b0ea:	f7f7 fe01 	bl	2cf0 <AudioMoth_getTime>

    *timeOfNextRecording = currentTime;
    b0ee:	4b0c      	ldr	r3, [pc, #48]	; (b120 <main+0x70>)

    *durationOfNextRecording = configSettings->recordDuration;
    b0f0:	4c0c      	ldr	r4, [pc, #48]	; (b124 <main+0x74>)

    uint32_t currentTime;

    AudioMoth_getTime(&currentTime, NULL);

    *timeOfNextRecording = currentTime;
    b0f2:	681b      	ldr	r3, [r3, #0]

    *durationOfNextRecording = configSettings->recordDuration;
    b0f4:	683a      	ldr	r2, [r7, #0]

    uint32_t currentTime;

    AudioMoth_getTime(&currentTime, NULL);

    *timeOfNextRecording = currentTime;
    b0f6:	9901      	ldr	r1, [sp, #4]
    b0f8:	6019      	str	r1, [r3, #0]

    *durationOfNextRecording = configSettings->recordDuration;
    b0fa:	6823      	ldr	r3, [r4, #0]
    b0fc:	f8b2 200f 	ldrh.w	r2, [r2, #15]
    b100:	601a      	str	r2, [r3, #0]

	/* Make recording is battery check is disabled or enabled and okay */

	AM_recordingState_t recordingState = RECORDING_OKAY;

	AM_batteryState_t batteryState = AudioMoth_getBatteryState();
    b102:	f7f7 fdad 	bl	2c60 <AudioMoth_getBatteryState>

	recordingState = makeRecording(currentTime, *durationOfNextRecording, enableLED, batteryState);
    b106:	6823      	ldr	r3, [r4, #0]

	/* Make recording is battery check is disabled or enabled and okay */

	AM_recordingState_t recordingState = RECORDING_OKAY;

	AM_batteryState_t batteryState = AudioMoth_getBatteryState();
    b108:	4602      	mov	r2, r0

	recordingState = makeRecording(currentTime, *durationOfNextRecording, enableLED, batteryState);
    b10a:	6819      	ldr	r1, [r3, #0]
    b10c:	9801      	ldr	r0, [sp, #4]
    b10e:	f7ff fcf7 	bl	ab00 <makeRecording.constprop.1>

//    while(1){
//    	printf("Stuff\n");
//    }

}
    b112:	2000      	movs	r0, #0
    b114:	b003      	add	sp, #12
    b116:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b118:	200008a8 	.word	0x200008a8
    b11c:	2000087c 	.word	0x2000087c
    b120:	20000878 	.word	0x20000878
    b124:	200008ac 	.word	0x200008ac

0000b128 <AudioMoth_timezoneRequested>:

/* Time zone handler */

inline void AudioMoth_timezoneRequested(int8_t *timezone) {

    *timezone = configSettings->timezone;
    b128:	4b02      	ldr	r3, [pc, #8]	; (b134 <AudioMoth_timezoneRequested+0xc>)
    b12a:	681b      	ldr	r3, [r3, #0]
    b12c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
    b130:	7003      	strb	r3, [r0, #0]
    b132:	4770      	bx	lr
    b134:	200008a8 	.word	0x200008a8

0000b138 <AudioMoth_handleSwitchInterrupt>:

/* AudioMoth interrupt handlers */

inline void AudioMoth_handleSwitchInterrupt() {

    switchPositionChanged = true;
    b138:	4b01      	ldr	r3, [pc, #4]	; (b140 <AudioMoth_handleSwitchInterrupt+0x8>)
    b13a:	2201      	movs	r2, #1
    b13c:	701a      	strb	r2, [r3, #0]
    b13e:	4770      	bx	lr
    b140:	20001b30 	.word	0x20001b30

0000b144 <AudioMoth_handleMicrophoneInterrupt>:

}

inline void AudioMoth_handleMicrophoneInterrupt(int16_t sample) { }
    b144:	4770      	bx	lr
    b146:	bf00      	nop

0000b148 <AudioMoth_handleDirectMemoryAccessInterrupt>:

inline void AudioMoth_handleDirectMemoryAccessInterrupt(bool isPrimaryBuffer, int16_t **nextBuffer) {
    b148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    if (isPrimaryBuffer) source = primaryBuffer;

    /* Update the current buffer index and write buffer */

    filter(source, write_buffers[writeBuffer] + writeBufferIndex, configSettings->sampleRateDivider, NUMBER_OF_SAMPLES_IN_DMA_TRANSFER);
    b14c:	4b44      	ldr	r3, [pc, #272]	; (b260 <AudioMoth_handleDirectMemoryAccessInterrupt+0x118>)
    b14e:	4c45      	ldr	r4, [pc, #276]	; (b264 <AudioMoth_handleDirectMemoryAccessInterrupt+0x11c>)
    b150:	6819      	ldr	r1, [r3, #0]
    b152:	4b45      	ldr	r3, [pc, #276]	; (b268 <AudioMoth_handleDirectMemoryAccessInterrupt+0x120>)
    b154:	4a45      	ldr	r2, [pc, #276]	; (b26c <AudioMoth_handleDirectMemoryAccessInterrupt+0x124>)
    b156:	681b      	ldr	r3, [r3, #0]
    b158:	f8df a128 	ldr.w	sl, [pc, #296]	; b284 <AudioMoth_handleDirectMemoryAccessInterrupt+0x13c>
    b15c:	7824      	ldrb	r4, [r4, #0]
    b15e:	4f44      	ldr	r7, [pc, #272]	; (b270 <AudioMoth_handleDirectMemoryAccessInterrupt+0x128>)
    b160:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    b164:	f8da 6000 	ldr.w	r6, [sl]

inline void AudioMoth_handleDirectMemoryAccessInterrupt(bool isPrimaryBuffer, int16_t **nextBuffer) {

    int16_t *source = secondaryBuffer;

    if (isPrimaryBuffer) source = primaryBuffer;
    b168:	4a42      	ldr	r2, [pc, #264]	; (b274 <AudioMoth_handleDirectMemoryAccessInterrupt+0x12c>)
    b16a:	edd7 7a00 	vldr	s15, [r7]
    b16e:	4f42      	ldr	r7, [pc, #264]	; (b278 <AudioMoth_handleDirectMemoryAccessInterrupt+0x130>)

        if (bitsToShift > 0) sample <<= bitsToShift;

        if (bitsToShift < 0) sample >>= -bitsToShift;

        scaledPreviousFilterOutput = (int32_t)(DC_BLOCKING_FACTOR * previousFilterOutput);
    b170:	ed9f 7a42 	vldr	s14, [pc, #264]	; b27c <AudioMoth_handleDirectMemoryAccessInterrupt+0x134>
    b174:	f8d7 e000 	ldr.w	lr, [r7]

}

inline void AudioMoth_handleMicrophoneInterrupt(int16_t sample) { }

inline void AudioMoth_handleDirectMemoryAccessInterrupt(bool isPrimaryBuffer, int16_t **nextBuffer) {
    b178:	b085      	sub	sp, #20

    if (isPrimaryBuffer) source = primaryBuffer;

    /* Update the current buffer index and write buffer */

    filter(source, write_buffers[writeBuffer] + writeBufferIndex, configSettings->sampleRateDivider, NUMBER_OF_SAMPLES_IN_DMA_TRANSFER);
    b17a:	461d      	mov	r5, r3
    b17c:	9303      	str	r3, [sp, #12]
    b17e:	fa4f fc84 	sxtb.w	ip, r4

inline void AudioMoth_handleDirectMemoryAccessInterrupt(bool isPrimaryBuffer, int16_t **nextBuffer) {

    int16_t *source = secondaryBuffer;

    if (isPrimaryBuffer) source = primaryBuffer;
    b182:	4b3f      	ldr	r3, [pc, #252]	; (b280 <AudioMoth_handleDirectMemoryAccessInterrupt+0x138>)

    /* Update the current buffer index and write buffer */

    filter(source, write_buffers[writeBuffer] + writeBufferIndex, configSettings->sampleRateDivider, NUMBER_OF_SAMPLES_IN_DMA_TRANSFER);
    b184:	7b2d      	ldrb	r5, [r5, #12]
    b186:	9401      	str	r4, [sp, #4]
    b188:	f04f 0802 	mov.w	r8, #2
    b18c:	eb01 0646 	add.w	r6, r1, r6, lsl #1

        }

        if (bitsToShift > 0) sample <<= bitsToShift;

        if (bitsToShift < 0) sample >>= -bitsToShift;
    b190:	f1cc 0100 	rsb	r1, ip, #0
    b194:	9102      	str	r1, [sp, #8]
    b196:	2800      	cmp	r0, #0
    b198:	bf0c      	ite	eq
    b19a:	4610      	moveq	r0, r2
    b19c:	4618      	movne	r0, r3
    b19e:	46c1      	mov	r9, r8
    int32_t filteredOutput;
    int32_t scaledPreviousFilterOutput;

    int index = 0;

    for (int i = 0; i < size; i += sampleRateDivider) {
    b1a0:	2700      	movs	r7, #0

        filteredOutput = sample - previousSample + scaledPreviousFilterOutput;

        if (filteredOutput > INT16_MAX) {

            dest[index++] = INT16_MAX;
    b1a2:	f647 7bff 	movw	fp, #32767	; 0x7fff

    for (int i = 0; i < size; i += sampleRateDivider) {

        int32_t sample = 0;

        for (int j = 0; j < sampleRateDivider; j += 1) {
    b1a6:	2d00      	cmp	r5, #0
    b1a8:	d057      	beq.n	b25a <AudioMoth_handleDirectMemoryAccessInterrupt+0x112>
    b1aa:	fb19 0405 	smlabb	r4, r9, r5, r0
    b1ae:	4603      	mov	r3, r0
    b1b0:	2200      	movs	r2, #0

            sample += (int32_t)source[i + j];
    b1b2:	f933 1b02 	ldrsh.w	r1, [r3], #2

    for (int i = 0; i < size; i += sampleRateDivider) {

        int32_t sample = 0;

        for (int j = 0; j < sampleRateDivider; j += 1) {
    b1b6:	42a3      	cmp	r3, r4

            sample += (int32_t)source[i + j];
    b1b8:	440a      	add	r2, r1

    for (int i = 0; i < size; i += sampleRateDivider) {

        int32_t sample = 0;

        for (int j = 0; j < sampleRateDivider; j += 1) {
    b1ba:	d1fa      	bne.n	b1b2 <AudioMoth_handleDirectMemoryAccessInterrupt+0x6a>

            sample += (int32_t)source[i + j];

        }

        if (bitsToShift > 0) sample <<= bitsToShift;
    b1bc:	f1bc 0f00 	cmp.w	ip, #0
    b1c0:	dd45      	ble.n	b24e <AudioMoth_handleDirectMemoryAccessInterrupt+0x106>
    b1c2:	fa02 f20c 	lsl.w	r2, r2, ip

        if (bitsToShift < 0) sample >>= -bitsToShift;

        scaledPreviousFilterOutput = (int32_t)(DC_BLOCKING_FACTOR * previousFilterOutput);
    b1c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15

        filteredOutput = sample - previousSample + scaledPreviousFilterOutput;
    b1ca:	ebce 0102 	rsb	r1, lr, r2

        if (bitsToShift > 0) sample <<= bitsToShift;

        if (bitsToShift < 0) sample >>= -bitsToShift;

        scaledPreviousFilterOutput = (int32_t)(DC_BLOCKING_FACTOR * previousFilterOutput);
    b1ce:	ee67 7a87 	vmul.f32	s15, s15, s14
    b1d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    b1d6:	ee17 3a90 	vmov	r3, s15

        filteredOutput = sample - previousSample + scaledPreviousFilterOutput;
    b1da:	440b      	add	r3, r1

        if (filteredOutput > INT16_MAX) {
    b1dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    b1e0:	db2d      	blt.n	b23e <AudioMoth_handleDirectMemoryAccessInterrupt+0xf6>

            dest[index++] = INT16_MAX;
    b1e2:	f8a6 b000 	strh.w	fp, [r6]
    int32_t filteredOutput;
    int32_t scaledPreviousFilterOutput;

    int index = 0;

    for (int i = 0; i < size; i += sampleRateDivider) {
    b1e6:	442f      	add	r7, r5
    b1e8:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    b1ec:	f106 0602 	add.w	r6, r6, #2
    b1f0:	fb18 0005 	smlabb	r0, r8, r5, r0

        if (bitsToShift < 0) sample >>= -bitsToShift;

        scaledPreviousFilterOutput = (int32_t)(DC_BLOCKING_FACTOR * previousFilterOutput);

        filteredOutput = sample - previousSample + scaledPreviousFilterOutput;
    b1f4:	ee07 3a90 	vmov	s15, r3
    b1f8:	4696      	mov	lr, r2
    int32_t filteredOutput;
    int32_t scaledPreviousFilterOutput;

    int index = 0;

    for (int i = 0; i < size; i += sampleRateDivider) {
    b1fa:	dbd4      	blt.n	b1a6 <AudioMoth_handleDirectMemoryAccessInterrupt+0x5e>

    /* Update the current buffer index and write buffer */

    filter(source, write_buffers[writeBuffer] + writeBufferIndex, configSettings->sampleRateDivider, NUMBER_OF_SAMPLES_IN_DMA_TRANSFER);

    writeBufferIndex += NUMBER_OF_SAMPLES_IN_DMA_TRANSFER / configSettings->sampleRateDivider;
    b1fc:	f8da 1000 	ldr.w	r1, [sl]
    b200:	9803      	ldr	r0, [sp, #12]
    b202:	4c1b      	ldr	r4, [pc, #108]	; (b270 <AudioMoth_handleDirectMemoryAccessInterrupt+0x128>)
    b204:	7b00      	ldrb	r0, [r0, #12]
    b206:	6023      	str	r3, [r4, #0]
    b208:	f44f 6380 	mov.w	r3, #1024	; 0x400
    b20c:	fb93 f3f0 	sdiv	r3, r3, r0
    b210:	440b      	add	r3, r1
    b212:	f8ca 3000 	str.w	r3, [sl]

    if (writeBufferIndex == NUMBER_OF_SAMPLES_IN_BUFFER) {
    b216:	f8da 3000 	ldr.w	r3, [sl]
    b21a:	4917      	ldr	r1, [pc, #92]	; (b278 <AudioMoth_handleDirectMemoryAccessInterrupt+0x130>)
    b21c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    b220:	600a      	str	r2, [r1, #0]

    /* Update the current buffer index and write buffer */

    filter(source, write_buffers[writeBuffer] + writeBufferIndex, configSettings->sampleRateDivider, NUMBER_OF_SAMPLES_IN_DMA_TRANSFER);

    writeBufferIndex += NUMBER_OF_SAMPLES_IN_DMA_TRANSFER / configSettings->sampleRateDivider;
    b222:	4a18      	ldr	r2, [pc, #96]	; (b284 <AudioMoth_handleDirectMemoryAccessInterrupt+0x13c>)

    if (writeBufferIndex == NUMBER_OF_SAMPLES_IN_BUFFER) {
    b224:	d108      	bne.n	b238 <AudioMoth_handleDirectMemoryAccessInterrupt+0xf0>

        writeBufferIndex = 0;
    b226:	2300      	movs	r3, #0
    b228:	6013      	str	r3, [r2, #0]

        writeBuffer = (writeBuffer + 1) & (NUMBER_OF_BUFFERS - 1);
    b22a:	4b0d      	ldr	r3, [pc, #52]	; (b260 <AudioMoth_handleDirectMemoryAccessInterrupt+0x118>)
    b22c:	4a0c      	ldr	r2, [pc, #48]	; (b260 <AudioMoth_handleDirectMemoryAccessInterrupt+0x118>)
    b22e:	681b      	ldr	r3, [r3, #0]
    b230:	3301      	adds	r3, #1
    b232:	f003 0307 	and.w	r3, r3, #7
    b236:	6013      	str	r3, [r2, #0]

    }

}
    b238:	b005      	add	sp, #20
    b23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

        if (filteredOutput > INT16_MAX) {

            dest[index++] = INT16_MAX;

        } else if (filteredOutput < INT16_MIN) {
    b23e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000

            dest[index++] = INT16_MIN;
    b242:	bfba      	itte	lt
    b244:	f248 0100 	movwlt	r1, #32768	; 0x8000
    b248:	8031      	strhlt	r1, [r6, #0]

        } else {

            dest[index++] = (int16_t)filteredOutput;
    b24a:	8033      	strhge	r3, [r6, #0]
    b24c:	e7cb      	b.n	b1e6 <AudioMoth_handleDirectMemoryAccessInterrupt+0x9e>

        }

        if (bitsToShift > 0) sample <<= bitsToShift;

        if (bitsToShift < 0) sample >>= -bitsToShift;
    b24e:	9b01      	ldr	r3, [sp, #4]
    b250:	2b00      	cmp	r3, #0
    b252:	d0b8      	beq.n	b1c6 <AudioMoth_handleDirectMemoryAccessInterrupt+0x7e>
    b254:	9b02      	ldr	r3, [sp, #8]
    b256:	411a      	asrs	r2, r3
    b258:	e7b5      	b.n	b1c6 <AudioMoth_handleDirectMemoryAccessInterrupt+0x7e>

    for (int i = 0; i < size; i += sampleRateDivider) {

        int32_t sample = 0;

        for (int j = 0; j < sampleRateDivider; j += 1) {
    b25a:	462a      	mov	r2, r5
    b25c:	e7ae      	b.n	b1bc <AudioMoth_handleDirectMemoryAccessInterrupt+0x74>
    b25e:	bf00      	nop
    b260:	20001b24 	.word	0x20001b24
    b264:	2000130c 	.word	0x2000130c
    b268:	200008a8 	.word	0x200008a8
    b26c:	20002338 	.word	0x20002338
    b270:	20001b28 	.word	0x20001b28
    b274:	20001b34 	.word	0x20001b34
    b278:	200012f4 	.word	0x200012f4
    b27c:	3f7eb852 	.word	0x3f7eb852
    b280:	20001324 	.word	0x20001324
    b284:	20002334 	.word	0x20002334

0000b288 <arm_fully_connected_q7>:
                       const q7_t * pM,
                       const uint16_t dim_vec,
                       const uint16_t num_of_rows,
                       const uint16_t bias_shift,
                       const uint16_t out_shift, const q7_t * bias, q7_t * pOut, q15_t * vec_buffer)
{
    b288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b28c:	b083      	sub	sp, #12
    b28e:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
    b292:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
    b296:	9c0f      	ldr	r4, [sp, #60]	; 0x3c

#else
    int       i, j;

    /* Run the following code as reference implementation for Cortex-M0 and Cortex-M3 */
    for (i = 0; i < num_of_rows; i++)
    b298:	b33b      	cbz	r3, b2ea <arm_fully_connected_q7+0x62>
    b29a:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    b29e:	f109 35ff 	add.w	r5, r9, #4294967295
    b2a2:	f04f 0b01 	mov.w	fp, #1
    b2a6:	4463      	add	r3, ip
    b2a8:	f104 38ff 	add.w	r8, r4, #4294967295
    b2ac:	fa0b fb05 	lsl.w	fp, fp, r5
    b2b0:	9301      	str	r3, [sp, #4]
    b2b2:	eb00 0e02 	add.w	lr, r0, r2
    {
        int       ip_out = ((q31_t)(bias[i]) << bias_shift) + NN_ROUND(out_shift);
    b2b6:	f91c 4b01 	ldrsb.w	r4, [ip], #1
    b2ba:	fa04 f40a 	lsl.w	r4, r4, sl
    b2be:	445c      	add	r4, fp
        for (j = 0; j < dim_vec; j++)
    b2c0:	b14a      	cbz	r2, b2d6 <arm_fully_connected_q7+0x4e>
    b2c2:	4603      	mov	r3, r0
    b2c4:	460d      	mov	r5, r1
        {
            ip_out += pV[j] * pM[i * dim_vec + j];
    b2c6:	f913 7b01 	ldrsb.w	r7, [r3], #1
    b2ca:	f915 6b01 	ldrsb.w	r6, [r5], #1

    /* Run the following code as reference implementation for Cortex-M0 and Cortex-M3 */
    for (i = 0; i < num_of_rows; i++)
    {
        int       ip_out = ((q31_t)(bias[i]) << bias_shift) + NN_ROUND(out_shift);
        for (j = 0; j < dim_vec; j++)
    b2ce:	4573      	cmp	r3, lr
        {
            ip_out += pV[j] * pM[i * dim_vec + j];
    b2d0:	fb17 4406 	smlabb	r4, r7, r6, r4

    /* Run the following code as reference implementation for Cortex-M0 and Cortex-M3 */
    for (i = 0; i < num_of_rows; i++)
    {
        int       ip_out = ((q31_t)(bias[i]) << bias_shift) + NN_ROUND(out_shift);
        for (j = 0; j < dim_vec; j++)
    b2d4:	d1f7      	bne.n	b2c6 <arm_fully_connected_q7+0x3e>

#else
    int       i, j;

    /* Run the following code as reference implementation for Cortex-M0 and Cortex-M3 */
    for (i = 0; i < num_of_rows; i++)
    b2d6:	9b01      	ldr	r3, [sp, #4]
    b2d8:	459c      	cmp	ip, r3
        int       ip_out = ((q31_t)(bias[i]) << bias_shift) + NN_ROUND(out_shift);
        for (j = 0; j < dim_vec; j++)
        {
            ip_out += pV[j] * pM[i * dim_vec + j];
        }
        pOut[i] = (q7_t) __SSAT((ip_out >> out_shift), 8);
    b2da:	fa44 f409 	asr.w	r4, r4, r9
    b2de:	4411      	add	r1, r2
    b2e0:	f304 0407 	ssat	r4, #7, r4
    b2e4:	f808 4f01 	strb.w	r4, [r8, #1]!

#else
    int       i, j;

    /* Run the following code as reference implementation for Cortex-M0 and Cortex-M3 */
    for (i = 0; i < num_of_rows; i++)
    b2e8:	d1e5      	bne.n	b2b6 <arm_fully_connected_q7+0x2e>
#endif                          /* ARM_MATH_DSP */

    /* Return to ARM_MATH_SUCCESS */
    return (ARM_MATH_SUCCESS);

}
    b2ea:	2000      	movs	r0, #0
    b2ec:	b003      	add	sp, #12
    b2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b2f2:	bf00      	nop

0000b2f4 <arm_relu_q7>:
#else
    /* Run the following code as reference implementation for Cortex-M0 and Cortex-M3 */

    uint16_t  i;

    for (i = 0; i < size; i++)
    b2f4:	b159      	cbz	r1, b30e <arm_relu_q7+0x1a>
    b2f6:	3901      	subs	r1, #1
    b2f8:	fa10 f181 	uxtah	r1, r0, r1
    {
        if (data[i] < 0)
            data[i] = 0;
    b2fc:	2200      	movs	r2, #0
    b2fe:	3801      	subs	r0, #1

    uint16_t  i;

    for (i = 0; i < size; i++)
    {
        if (data[i] < 0)
    b300:	f910 3f01 	ldrsb.w	r3, [r0, #1]!
    b304:	2b00      	cmp	r3, #0
            data[i] = 0;
    b306:	bfb8      	it	lt
    b308:	7002      	strblt	r2, [r0, #0]
#else
    /* Run the following code as reference implementation for Cortex-M0 and Cortex-M3 */

    uint16_t  i;

    for (i = 0; i < size; i++)
    b30a:	4288      	cmp	r0, r1
    b30c:	d1f8      	bne.n	b300 <arm_relu_q7+0xc>
    b30e:	4770      	bx	lr

0000b310 <__aeabi_drsub>:
    b310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    b314:	e002      	b.n	b31c <__adddf3>
    b316:	bf00      	nop

0000b318 <__aeabi_dsub>:
    b318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000b31c <__adddf3>:
    b31c:	b530      	push	{r4, r5, lr}
    b31e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    b322:	ea4f 0543 	mov.w	r5, r3, lsl #1
    b326:	ea94 0f05 	teq	r4, r5
    b32a:	bf08      	it	eq
    b32c:	ea90 0f02 	teqeq	r0, r2
    b330:	bf1f      	itttt	ne
    b332:	ea54 0c00 	orrsne.w	ip, r4, r0
    b336:	ea55 0c02 	orrsne.w	ip, r5, r2
    b33a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    b33e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    b342:	f000 80e2 	beq.w	b50a <__adddf3+0x1ee>
    b346:	ea4f 5454 	mov.w	r4, r4, lsr #21
    b34a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    b34e:	bfb8      	it	lt
    b350:	426d      	neglt	r5, r5
    b352:	dd0c      	ble.n	b36e <__adddf3+0x52>
    b354:	442c      	add	r4, r5
    b356:	ea80 0202 	eor.w	r2, r0, r2
    b35a:	ea81 0303 	eor.w	r3, r1, r3
    b35e:	ea82 0000 	eor.w	r0, r2, r0
    b362:	ea83 0101 	eor.w	r1, r3, r1
    b366:	ea80 0202 	eor.w	r2, r0, r2
    b36a:	ea81 0303 	eor.w	r3, r1, r3
    b36e:	2d36      	cmp	r5, #54	; 0x36
    b370:	bf88      	it	hi
    b372:	bd30      	pophi	{r4, r5, pc}
    b374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    b378:	ea4f 3101 	mov.w	r1, r1, lsl #12
    b37c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    b380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    b384:	d002      	beq.n	b38c <__adddf3+0x70>
    b386:	4240      	negs	r0, r0
    b388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    b38c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    b390:	ea4f 3303 	mov.w	r3, r3, lsl #12
    b394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    b398:	d002      	beq.n	b3a0 <__adddf3+0x84>
    b39a:	4252      	negs	r2, r2
    b39c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    b3a0:	ea94 0f05 	teq	r4, r5
    b3a4:	f000 80a7 	beq.w	b4f6 <__adddf3+0x1da>
    b3a8:	f1a4 0401 	sub.w	r4, r4, #1
    b3ac:	f1d5 0e20 	rsbs	lr, r5, #32
    b3b0:	db0d      	blt.n	b3ce <__adddf3+0xb2>
    b3b2:	fa02 fc0e 	lsl.w	ip, r2, lr
    b3b6:	fa22 f205 	lsr.w	r2, r2, r5
    b3ba:	1880      	adds	r0, r0, r2
    b3bc:	f141 0100 	adc.w	r1, r1, #0
    b3c0:	fa03 f20e 	lsl.w	r2, r3, lr
    b3c4:	1880      	adds	r0, r0, r2
    b3c6:	fa43 f305 	asr.w	r3, r3, r5
    b3ca:	4159      	adcs	r1, r3
    b3cc:	e00e      	b.n	b3ec <__adddf3+0xd0>
    b3ce:	f1a5 0520 	sub.w	r5, r5, #32
    b3d2:	f10e 0e20 	add.w	lr, lr, #32
    b3d6:	2a01      	cmp	r2, #1
    b3d8:	fa03 fc0e 	lsl.w	ip, r3, lr
    b3dc:	bf28      	it	cs
    b3de:	f04c 0c02 	orrcs.w	ip, ip, #2
    b3e2:	fa43 f305 	asr.w	r3, r3, r5
    b3e6:	18c0      	adds	r0, r0, r3
    b3e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    b3ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b3f0:	d507      	bpl.n	b402 <__adddf3+0xe6>
    b3f2:	f04f 0e00 	mov.w	lr, #0
    b3f6:	f1dc 0c00 	rsbs	ip, ip, #0
    b3fa:	eb7e 0000 	sbcs.w	r0, lr, r0
    b3fe:	eb6e 0101 	sbc.w	r1, lr, r1
    b402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    b406:	d31b      	bcc.n	b440 <__adddf3+0x124>
    b408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    b40c:	d30c      	bcc.n	b428 <__adddf3+0x10c>
    b40e:	0849      	lsrs	r1, r1, #1
    b410:	ea5f 0030 	movs.w	r0, r0, rrx
    b414:	ea4f 0c3c 	mov.w	ip, ip, rrx
    b418:	f104 0401 	add.w	r4, r4, #1
    b41c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    b420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    b424:	f080 809a 	bcs.w	b55c <__adddf3+0x240>
    b428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    b42c:	bf08      	it	eq
    b42e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    b432:	f150 0000 	adcs.w	r0, r0, #0
    b436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b43a:	ea41 0105 	orr.w	r1, r1, r5
    b43e:	bd30      	pop	{r4, r5, pc}
    b440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    b444:	4140      	adcs	r0, r0
    b446:	eb41 0101 	adc.w	r1, r1, r1
    b44a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b44e:	f1a4 0401 	sub.w	r4, r4, #1
    b452:	d1e9      	bne.n	b428 <__adddf3+0x10c>
    b454:	f091 0f00 	teq	r1, #0
    b458:	bf04      	itt	eq
    b45a:	4601      	moveq	r1, r0
    b45c:	2000      	moveq	r0, #0
    b45e:	fab1 f381 	clz	r3, r1
    b462:	bf08      	it	eq
    b464:	3320      	addeq	r3, #32
    b466:	f1a3 030b 	sub.w	r3, r3, #11
    b46a:	f1b3 0220 	subs.w	r2, r3, #32
    b46e:	da0c      	bge.n	b48a <__adddf3+0x16e>
    b470:	320c      	adds	r2, #12
    b472:	dd08      	ble.n	b486 <__adddf3+0x16a>
    b474:	f102 0c14 	add.w	ip, r2, #20
    b478:	f1c2 020c 	rsb	r2, r2, #12
    b47c:	fa01 f00c 	lsl.w	r0, r1, ip
    b480:	fa21 f102 	lsr.w	r1, r1, r2
    b484:	e00c      	b.n	b4a0 <__adddf3+0x184>
    b486:	f102 0214 	add.w	r2, r2, #20
    b48a:	bfd8      	it	le
    b48c:	f1c2 0c20 	rsble	ip, r2, #32
    b490:	fa01 f102 	lsl.w	r1, r1, r2
    b494:	fa20 fc0c 	lsr.w	ip, r0, ip
    b498:	bfdc      	itt	le
    b49a:	ea41 010c 	orrle.w	r1, r1, ip
    b49e:	4090      	lslle	r0, r2
    b4a0:	1ae4      	subs	r4, r4, r3
    b4a2:	bfa2      	ittt	ge
    b4a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    b4a8:	4329      	orrge	r1, r5
    b4aa:	bd30      	popge	{r4, r5, pc}
    b4ac:	ea6f 0404 	mvn.w	r4, r4
    b4b0:	3c1f      	subs	r4, #31
    b4b2:	da1c      	bge.n	b4ee <__adddf3+0x1d2>
    b4b4:	340c      	adds	r4, #12
    b4b6:	dc0e      	bgt.n	b4d6 <__adddf3+0x1ba>
    b4b8:	f104 0414 	add.w	r4, r4, #20
    b4bc:	f1c4 0220 	rsb	r2, r4, #32
    b4c0:	fa20 f004 	lsr.w	r0, r0, r4
    b4c4:	fa01 f302 	lsl.w	r3, r1, r2
    b4c8:	ea40 0003 	orr.w	r0, r0, r3
    b4cc:	fa21 f304 	lsr.w	r3, r1, r4
    b4d0:	ea45 0103 	orr.w	r1, r5, r3
    b4d4:	bd30      	pop	{r4, r5, pc}
    b4d6:	f1c4 040c 	rsb	r4, r4, #12
    b4da:	f1c4 0220 	rsb	r2, r4, #32
    b4de:	fa20 f002 	lsr.w	r0, r0, r2
    b4e2:	fa01 f304 	lsl.w	r3, r1, r4
    b4e6:	ea40 0003 	orr.w	r0, r0, r3
    b4ea:	4629      	mov	r1, r5
    b4ec:	bd30      	pop	{r4, r5, pc}
    b4ee:	fa21 f004 	lsr.w	r0, r1, r4
    b4f2:	4629      	mov	r1, r5
    b4f4:	bd30      	pop	{r4, r5, pc}
    b4f6:	f094 0f00 	teq	r4, #0
    b4fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    b4fe:	bf06      	itte	eq
    b500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    b504:	3401      	addeq	r4, #1
    b506:	3d01      	subne	r5, #1
    b508:	e74e      	b.n	b3a8 <__adddf3+0x8c>
    b50a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    b50e:	bf18      	it	ne
    b510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    b514:	d029      	beq.n	b56a <__adddf3+0x24e>
    b516:	ea94 0f05 	teq	r4, r5
    b51a:	bf08      	it	eq
    b51c:	ea90 0f02 	teqeq	r0, r2
    b520:	d005      	beq.n	b52e <__adddf3+0x212>
    b522:	ea54 0c00 	orrs.w	ip, r4, r0
    b526:	bf04      	itt	eq
    b528:	4619      	moveq	r1, r3
    b52a:	4610      	moveq	r0, r2
    b52c:	bd30      	pop	{r4, r5, pc}
    b52e:	ea91 0f03 	teq	r1, r3
    b532:	bf1e      	ittt	ne
    b534:	2100      	movne	r1, #0
    b536:	2000      	movne	r0, #0
    b538:	bd30      	popne	{r4, r5, pc}
    b53a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    b53e:	d105      	bne.n	b54c <__adddf3+0x230>
    b540:	0040      	lsls	r0, r0, #1
    b542:	4149      	adcs	r1, r1
    b544:	bf28      	it	cs
    b546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    b54a:	bd30      	pop	{r4, r5, pc}
    b54c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    b550:	bf3c      	itt	cc
    b552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    b556:	bd30      	popcc	{r4, r5, pc}
    b558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b55c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    b560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    b564:	f04f 0000 	mov.w	r0, #0
    b568:	bd30      	pop	{r4, r5, pc}
    b56a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    b56e:	bf1a      	itte	ne
    b570:	4619      	movne	r1, r3
    b572:	4610      	movne	r0, r2
    b574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    b578:	bf1c      	itt	ne
    b57a:	460b      	movne	r3, r1
    b57c:	4602      	movne	r2, r0
    b57e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    b582:	bf06      	itte	eq
    b584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    b588:	ea91 0f03 	teqeq	r1, r3
    b58c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    b590:	bd30      	pop	{r4, r5, pc}
    b592:	bf00      	nop

0000b594 <__aeabi_ui2d>:
    b594:	f090 0f00 	teq	r0, #0
    b598:	bf04      	itt	eq
    b59a:	2100      	moveq	r1, #0
    b59c:	4770      	bxeq	lr
    b59e:	b530      	push	{r4, r5, lr}
    b5a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b5a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b5a8:	f04f 0500 	mov.w	r5, #0
    b5ac:	f04f 0100 	mov.w	r1, #0
    b5b0:	e750      	b.n	b454 <__adddf3+0x138>
    b5b2:	bf00      	nop

0000b5b4 <__aeabi_i2d>:
    b5b4:	f090 0f00 	teq	r0, #0
    b5b8:	bf04      	itt	eq
    b5ba:	2100      	moveq	r1, #0
    b5bc:	4770      	bxeq	lr
    b5be:	b530      	push	{r4, r5, lr}
    b5c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b5c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b5c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    b5cc:	bf48      	it	mi
    b5ce:	4240      	negmi	r0, r0
    b5d0:	f04f 0100 	mov.w	r1, #0
    b5d4:	e73e      	b.n	b454 <__adddf3+0x138>
    b5d6:	bf00      	nop

0000b5d8 <__aeabi_f2d>:
    b5d8:	0042      	lsls	r2, r0, #1
    b5da:	ea4f 01e2 	mov.w	r1, r2, asr #3
    b5de:	ea4f 0131 	mov.w	r1, r1, rrx
    b5e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
    b5e6:	bf1f      	itttt	ne
    b5e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    b5ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    b5f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    b5f4:	4770      	bxne	lr
    b5f6:	f092 0f00 	teq	r2, #0
    b5fa:	bf14      	ite	ne
    b5fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    b600:	4770      	bxeq	lr
    b602:	b530      	push	{r4, r5, lr}
    b604:	f44f 7460 	mov.w	r4, #896	; 0x380
    b608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b60c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    b610:	e720      	b.n	b454 <__adddf3+0x138>
    b612:	bf00      	nop

0000b614 <__aeabi_ul2d>:
    b614:	ea50 0201 	orrs.w	r2, r0, r1
    b618:	bf08      	it	eq
    b61a:	4770      	bxeq	lr
    b61c:	b530      	push	{r4, r5, lr}
    b61e:	f04f 0500 	mov.w	r5, #0
    b622:	e00a      	b.n	b63a <__aeabi_l2d+0x16>

0000b624 <__aeabi_l2d>:
    b624:	ea50 0201 	orrs.w	r2, r0, r1
    b628:	bf08      	it	eq
    b62a:	4770      	bxeq	lr
    b62c:	b530      	push	{r4, r5, lr}
    b62e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    b632:	d502      	bpl.n	b63a <__aeabi_l2d+0x16>
    b634:	4240      	negs	r0, r0
    b636:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    b63a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b63e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b642:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    b646:	f43f aedc 	beq.w	b402 <__adddf3+0xe6>
    b64a:	f04f 0203 	mov.w	r2, #3
    b64e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    b652:	bf18      	it	ne
    b654:	3203      	addne	r2, #3
    b656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    b65a:	bf18      	it	ne
    b65c:	3203      	addne	r2, #3
    b65e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    b662:	f1c2 0320 	rsb	r3, r2, #32
    b666:	fa00 fc03 	lsl.w	ip, r0, r3
    b66a:	fa20 f002 	lsr.w	r0, r0, r2
    b66e:	fa01 fe03 	lsl.w	lr, r1, r3
    b672:	ea40 000e 	orr.w	r0, r0, lr
    b676:	fa21 f102 	lsr.w	r1, r1, r2
    b67a:	4414      	add	r4, r2
    b67c:	e6c1      	b.n	b402 <__adddf3+0xe6>
    b67e:	bf00      	nop

0000b680 <__aeabi_dmul>:
    b680:	b570      	push	{r4, r5, r6, lr}
    b682:	f04f 0cff 	mov.w	ip, #255	; 0xff
    b686:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    b68a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    b68e:	bf1d      	ittte	ne
    b690:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    b694:	ea94 0f0c 	teqne	r4, ip
    b698:	ea95 0f0c 	teqne	r5, ip
    b69c:	f000 f8de 	bleq	b85c <__aeabi_dmul+0x1dc>
    b6a0:	442c      	add	r4, r5
    b6a2:	ea81 0603 	eor.w	r6, r1, r3
    b6a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    b6aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    b6ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    b6b2:	bf18      	it	ne
    b6b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    b6b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b6bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    b6c0:	d038      	beq.n	b734 <__aeabi_dmul+0xb4>
    b6c2:	fba0 ce02 	umull	ip, lr, r0, r2
    b6c6:	f04f 0500 	mov.w	r5, #0
    b6ca:	fbe1 e502 	umlal	lr, r5, r1, r2
    b6ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    b6d2:	fbe0 e503 	umlal	lr, r5, r0, r3
    b6d6:	f04f 0600 	mov.w	r6, #0
    b6da:	fbe1 5603 	umlal	r5, r6, r1, r3
    b6de:	f09c 0f00 	teq	ip, #0
    b6e2:	bf18      	it	ne
    b6e4:	f04e 0e01 	orrne.w	lr, lr, #1
    b6e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    b6ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    b6f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    b6f4:	d204      	bcs.n	b700 <__aeabi_dmul+0x80>
    b6f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    b6fa:	416d      	adcs	r5, r5
    b6fc:	eb46 0606 	adc.w	r6, r6, r6
    b700:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    b704:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    b708:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    b70c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    b710:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    b714:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    b718:	bf88      	it	hi
    b71a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    b71e:	d81e      	bhi.n	b75e <__aeabi_dmul+0xde>
    b720:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    b724:	bf08      	it	eq
    b726:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    b72a:	f150 0000 	adcs.w	r0, r0, #0
    b72e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b732:	bd70      	pop	{r4, r5, r6, pc}
    b734:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    b738:	ea46 0101 	orr.w	r1, r6, r1
    b73c:	ea40 0002 	orr.w	r0, r0, r2
    b740:	ea81 0103 	eor.w	r1, r1, r3
    b744:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    b748:	bfc2      	ittt	gt
    b74a:	ebd4 050c 	rsbsgt	r5, r4, ip
    b74e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    b752:	bd70      	popgt	{r4, r5, r6, pc}
    b754:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b758:	f04f 0e00 	mov.w	lr, #0
    b75c:	3c01      	subs	r4, #1
    b75e:	f300 80ab 	bgt.w	b8b8 <__aeabi_dmul+0x238>
    b762:	f114 0f36 	cmn.w	r4, #54	; 0x36
    b766:	bfde      	ittt	le
    b768:	2000      	movle	r0, #0
    b76a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    b76e:	bd70      	pople	{r4, r5, r6, pc}
    b770:	f1c4 0400 	rsb	r4, r4, #0
    b774:	3c20      	subs	r4, #32
    b776:	da35      	bge.n	b7e4 <__aeabi_dmul+0x164>
    b778:	340c      	adds	r4, #12
    b77a:	dc1b      	bgt.n	b7b4 <__aeabi_dmul+0x134>
    b77c:	f104 0414 	add.w	r4, r4, #20
    b780:	f1c4 0520 	rsb	r5, r4, #32
    b784:	fa00 f305 	lsl.w	r3, r0, r5
    b788:	fa20 f004 	lsr.w	r0, r0, r4
    b78c:	fa01 f205 	lsl.w	r2, r1, r5
    b790:	ea40 0002 	orr.w	r0, r0, r2
    b794:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    b798:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    b79c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    b7a0:	fa21 f604 	lsr.w	r6, r1, r4
    b7a4:	eb42 0106 	adc.w	r1, r2, r6
    b7a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    b7ac:	bf08      	it	eq
    b7ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    b7b2:	bd70      	pop	{r4, r5, r6, pc}
    b7b4:	f1c4 040c 	rsb	r4, r4, #12
    b7b8:	f1c4 0520 	rsb	r5, r4, #32
    b7bc:	fa00 f304 	lsl.w	r3, r0, r4
    b7c0:	fa20 f005 	lsr.w	r0, r0, r5
    b7c4:	fa01 f204 	lsl.w	r2, r1, r4
    b7c8:	ea40 0002 	orr.w	r0, r0, r2
    b7cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b7d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    b7d4:	f141 0100 	adc.w	r1, r1, #0
    b7d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    b7dc:	bf08      	it	eq
    b7de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    b7e2:	bd70      	pop	{r4, r5, r6, pc}
    b7e4:	f1c4 0520 	rsb	r5, r4, #32
    b7e8:	fa00 f205 	lsl.w	r2, r0, r5
    b7ec:	ea4e 0e02 	orr.w	lr, lr, r2
    b7f0:	fa20 f304 	lsr.w	r3, r0, r4
    b7f4:	fa01 f205 	lsl.w	r2, r1, r5
    b7f8:	ea43 0302 	orr.w	r3, r3, r2
    b7fc:	fa21 f004 	lsr.w	r0, r1, r4
    b800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b804:	fa21 f204 	lsr.w	r2, r1, r4
    b808:	ea20 0002 	bic.w	r0, r0, r2
    b80c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    b810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    b814:	bf08      	it	eq
    b816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    b81a:	bd70      	pop	{r4, r5, r6, pc}
    b81c:	f094 0f00 	teq	r4, #0
    b820:	d10f      	bne.n	b842 <__aeabi_dmul+0x1c2>
    b822:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    b826:	0040      	lsls	r0, r0, #1
    b828:	eb41 0101 	adc.w	r1, r1, r1
    b82c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b830:	bf08      	it	eq
    b832:	3c01      	subeq	r4, #1
    b834:	d0f7      	beq.n	b826 <__aeabi_dmul+0x1a6>
    b836:	ea41 0106 	orr.w	r1, r1, r6
    b83a:	f095 0f00 	teq	r5, #0
    b83e:	bf18      	it	ne
    b840:	4770      	bxne	lr
    b842:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    b846:	0052      	lsls	r2, r2, #1
    b848:	eb43 0303 	adc.w	r3, r3, r3
    b84c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    b850:	bf08      	it	eq
    b852:	3d01      	subeq	r5, #1
    b854:	d0f7      	beq.n	b846 <__aeabi_dmul+0x1c6>
    b856:	ea43 0306 	orr.w	r3, r3, r6
    b85a:	4770      	bx	lr
    b85c:	ea94 0f0c 	teq	r4, ip
    b860:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    b864:	bf18      	it	ne
    b866:	ea95 0f0c 	teqne	r5, ip
    b86a:	d00c      	beq.n	b886 <__aeabi_dmul+0x206>
    b86c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b870:	bf18      	it	ne
    b872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b876:	d1d1      	bne.n	b81c <__aeabi_dmul+0x19c>
    b878:	ea81 0103 	eor.w	r1, r1, r3
    b87c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b880:	f04f 0000 	mov.w	r0, #0
    b884:	bd70      	pop	{r4, r5, r6, pc}
    b886:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b88a:	bf06      	itte	eq
    b88c:	4610      	moveq	r0, r2
    b88e:	4619      	moveq	r1, r3
    b890:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b894:	d019      	beq.n	b8ca <__aeabi_dmul+0x24a>
    b896:	ea94 0f0c 	teq	r4, ip
    b89a:	d102      	bne.n	b8a2 <__aeabi_dmul+0x222>
    b89c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    b8a0:	d113      	bne.n	b8ca <__aeabi_dmul+0x24a>
    b8a2:	ea95 0f0c 	teq	r5, ip
    b8a6:	d105      	bne.n	b8b4 <__aeabi_dmul+0x234>
    b8a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    b8ac:	bf1c      	itt	ne
    b8ae:	4610      	movne	r0, r2
    b8b0:	4619      	movne	r1, r3
    b8b2:	d10a      	bne.n	b8ca <__aeabi_dmul+0x24a>
    b8b4:	ea81 0103 	eor.w	r1, r1, r3
    b8b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b8bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    b8c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    b8c4:	f04f 0000 	mov.w	r0, #0
    b8c8:	bd70      	pop	{r4, r5, r6, pc}
    b8ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    b8ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    b8d2:	bd70      	pop	{r4, r5, r6, pc}

0000b8d4 <__aeabi_ddiv>:
    b8d4:	b570      	push	{r4, r5, r6, lr}
    b8d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
    b8da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    b8de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    b8e2:	bf1d      	ittte	ne
    b8e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    b8e8:	ea94 0f0c 	teqne	r4, ip
    b8ec:	ea95 0f0c 	teqne	r5, ip
    b8f0:	f000 f8a7 	bleq	ba42 <__aeabi_ddiv+0x16e>
    b8f4:	eba4 0405 	sub.w	r4, r4, r5
    b8f8:	ea81 0e03 	eor.w	lr, r1, r3
    b8fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    b900:	ea4f 3101 	mov.w	r1, r1, lsl #12
    b904:	f000 8088 	beq.w	ba18 <__aeabi_ddiv+0x144>
    b908:	ea4f 3303 	mov.w	r3, r3, lsl #12
    b90c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    b910:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    b914:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    b918:	ea4f 2202 	mov.w	r2, r2, lsl #8
    b91c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    b920:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    b924:	ea4f 2600 	mov.w	r6, r0, lsl #8
    b928:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    b92c:	429d      	cmp	r5, r3
    b92e:	bf08      	it	eq
    b930:	4296      	cmpeq	r6, r2
    b932:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    b936:	f504 7440 	add.w	r4, r4, #768	; 0x300
    b93a:	d202      	bcs.n	b942 <__aeabi_ddiv+0x6e>
    b93c:	085b      	lsrs	r3, r3, #1
    b93e:	ea4f 0232 	mov.w	r2, r2, rrx
    b942:	1ab6      	subs	r6, r6, r2
    b944:	eb65 0503 	sbc.w	r5, r5, r3
    b948:	085b      	lsrs	r3, r3, #1
    b94a:	ea4f 0232 	mov.w	r2, r2, rrx
    b94e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    b952:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    b956:	ebb6 0e02 	subs.w	lr, r6, r2
    b95a:	eb75 0e03 	sbcs.w	lr, r5, r3
    b95e:	bf22      	ittt	cs
    b960:	1ab6      	subcs	r6, r6, r2
    b962:	4675      	movcs	r5, lr
    b964:	ea40 000c 	orrcs.w	r0, r0, ip
    b968:	085b      	lsrs	r3, r3, #1
    b96a:	ea4f 0232 	mov.w	r2, r2, rrx
    b96e:	ebb6 0e02 	subs.w	lr, r6, r2
    b972:	eb75 0e03 	sbcs.w	lr, r5, r3
    b976:	bf22      	ittt	cs
    b978:	1ab6      	subcs	r6, r6, r2
    b97a:	4675      	movcs	r5, lr
    b97c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    b980:	085b      	lsrs	r3, r3, #1
    b982:	ea4f 0232 	mov.w	r2, r2, rrx
    b986:	ebb6 0e02 	subs.w	lr, r6, r2
    b98a:	eb75 0e03 	sbcs.w	lr, r5, r3
    b98e:	bf22      	ittt	cs
    b990:	1ab6      	subcs	r6, r6, r2
    b992:	4675      	movcs	r5, lr
    b994:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    b998:	085b      	lsrs	r3, r3, #1
    b99a:	ea4f 0232 	mov.w	r2, r2, rrx
    b99e:	ebb6 0e02 	subs.w	lr, r6, r2
    b9a2:	eb75 0e03 	sbcs.w	lr, r5, r3
    b9a6:	bf22      	ittt	cs
    b9a8:	1ab6      	subcs	r6, r6, r2
    b9aa:	4675      	movcs	r5, lr
    b9ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    b9b0:	ea55 0e06 	orrs.w	lr, r5, r6
    b9b4:	d018      	beq.n	b9e8 <__aeabi_ddiv+0x114>
    b9b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
    b9ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    b9be:	ea4f 1606 	mov.w	r6, r6, lsl #4
    b9c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    b9c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    b9ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    b9ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    b9d2:	d1c0      	bne.n	b956 <__aeabi_ddiv+0x82>
    b9d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b9d8:	d10b      	bne.n	b9f2 <__aeabi_ddiv+0x11e>
    b9da:	ea41 0100 	orr.w	r1, r1, r0
    b9de:	f04f 0000 	mov.w	r0, #0
    b9e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    b9e6:	e7b6      	b.n	b956 <__aeabi_ddiv+0x82>
    b9e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b9ec:	bf04      	itt	eq
    b9ee:	4301      	orreq	r1, r0
    b9f0:	2000      	moveq	r0, #0
    b9f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    b9f6:	bf88      	it	hi
    b9f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    b9fc:	f63f aeaf 	bhi.w	b75e <__aeabi_dmul+0xde>
    ba00:	ebb5 0c03 	subs.w	ip, r5, r3
    ba04:	bf04      	itt	eq
    ba06:	ebb6 0c02 	subseq.w	ip, r6, r2
    ba0a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    ba0e:	f150 0000 	adcs.w	r0, r0, #0
    ba12:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    ba16:	bd70      	pop	{r4, r5, r6, pc}
    ba18:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    ba1c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    ba20:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    ba24:	bfc2      	ittt	gt
    ba26:	ebd4 050c 	rsbsgt	r5, r4, ip
    ba2a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    ba2e:	bd70      	popgt	{r4, r5, r6, pc}
    ba30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    ba34:	f04f 0e00 	mov.w	lr, #0
    ba38:	3c01      	subs	r4, #1
    ba3a:	e690      	b.n	b75e <__aeabi_dmul+0xde>
    ba3c:	ea45 0e06 	orr.w	lr, r5, r6
    ba40:	e68d      	b.n	b75e <__aeabi_dmul+0xde>
    ba42:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    ba46:	ea94 0f0c 	teq	r4, ip
    ba4a:	bf08      	it	eq
    ba4c:	ea95 0f0c 	teqeq	r5, ip
    ba50:	f43f af3b 	beq.w	b8ca <__aeabi_dmul+0x24a>
    ba54:	ea94 0f0c 	teq	r4, ip
    ba58:	d10a      	bne.n	ba70 <__aeabi_ddiv+0x19c>
    ba5a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    ba5e:	f47f af34 	bne.w	b8ca <__aeabi_dmul+0x24a>
    ba62:	ea95 0f0c 	teq	r5, ip
    ba66:	f47f af25 	bne.w	b8b4 <__aeabi_dmul+0x234>
    ba6a:	4610      	mov	r0, r2
    ba6c:	4619      	mov	r1, r3
    ba6e:	e72c      	b.n	b8ca <__aeabi_dmul+0x24a>
    ba70:	ea95 0f0c 	teq	r5, ip
    ba74:	d106      	bne.n	ba84 <__aeabi_ddiv+0x1b0>
    ba76:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    ba7a:	f43f aefd 	beq.w	b878 <__aeabi_dmul+0x1f8>
    ba7e:	4610      	mov	r0, r2
    ba80:	4619      	mov	r1, r3
    ba82:	e722      	b.n	b8ca <__aeabi_dmul+0x24a>
    ba84:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    ba88:	bf18      	it	ne
    ba8a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    ba8e:	f47f aec5 	bne.w	b81c <__aeabi_dmul+0x19c>
    ba92:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    ba96:	f47f af0d 	bne.w	b8b4 <__aeabi_dmul+0x234>
    ba9a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    ba9e:	f47f aeeb 	bne.w	b878 <__aeabi_dmul+0x1f8>
    baa2:	e712      	b.n	b8ca <__aeabi_dmul+0x24a>

0000baa4 <__gedf2>:
    baa4:	f04f 3cff 	mov.w	ip, #4294967295
    baa8:	e006      	b.n	bab8 <__cmpdf2+0x4>
    baaa:	bf00      	nop

0000baac <__ledf2>:
    baac:	f04f 0c01 	mov.w	ip, #1
    bab0:	e002      	b.n	bab8 <__cmpdf2+0x4>
    bab2:	bf00      	nop

0000bab4 <__cmpdf2>:
    bab4:	f04f 0c01 	mov.w	ip, #1
    bab8:	f84d cd04 	str.w	ip, [sp, #-4]!
    babc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    bac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    bac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    bac8:	bf18      	it	ne
    baca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    bace:	d01b      	beq.n	bb08 <__cmpdf2+0x54>
    bad0:	b001      	add	sp, #4
    bad2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    bad6:	bf0c      	ite	eq
    bad8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    badc:	ea91 0f03 	teqne	r1, r3
    bae0:	bf02      	ittt	eq
    bae2:	ea90 0f02 	teqeq	r0, r2
    bae6:	2000      	moveq	r0, #0
    bae8:	4770      	bxeq	lr
    baea:	f110 0f00 	cmn.w	r0, #0
    baee:	ea91 0f03 	teq	r1, r3
    baf2:	bf58      	it	pl
    baf4:	4299      	cmppl	r1, r3
    baf6:	bf08      	it	eq
    baf8:	4290      	cmpeq	r0, r2
    bafa:	bf2c      	ite	cs
    bafc:	17d8      	asrcs	r0, r3, #31
    bafe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    bb02:	f040 0001 	orr.w	r0, r0, #1
    bb06:	4770      	bx	lr
    bb08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    bb0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    bb10:	d102      	bne.n	bb18 <__cmpdf2+0x64>
    bb12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    bb16:	d107      	bne.n	bb28 <__cmpdf2+0x74>
    bb18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    bb1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    bb20:	d1d6      	bne.n	bad0 <__cmpdf2+0x1c>
    bb22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    bb26:	d0d3      	beq.n	bad0 <__cmpdf2+0x1c>
    bb28:	f85d 0b04 	ldr.w	r0, [sp], #4
    bb2c:	4770      	bx	lr
    bb2e:	bf00      	nop

0000bb30 <__aeabi_cdrcmple>:
    bb30:	4684      	mov	ip, r0
    bb32:	4610      	mov	r0, r2
    bb34:	4662      	mov	r2, ip
    bb36:	468c      	mov	ip, r1
    bb38:	4619      	mov	r1, r3
    bb3a:	4663      	mov	r3, ip
    bb3c:	e000      	b.n	bb40 <__aeabi_cdcmpeq>
    bb3e:	bf00      	nop

0000bb40 <__aeabi_cdcmpeq>:
    bb40:	b501      	push	{r0, lr}
    bb42:	f7ff ffb7 	bl	bab4 <__cmpdf2>
    bb46:	2800      	cmp	r0, #0
    bb48:	bf48      	it	mi
    bb4a:	f110 0f00 	cmnmi.w	r0, #0
    bb4e:	bd01      	pop	{r0, pc}

0000bb50 <__aeabi_dcmpeq>:
    bb50:	f84d ed08 	str.w	lr, [sp, #-8]!
    bb54:	f7ff fff4 	bl	bb40 <__aeabi_cdcmpeq>
    bb58:	bf0c      	ite	eq
    bb5a:	2001      	moveq	r0, #1
    bb5c:	2000      	movne	r0, #0
    bb5e:	f85d fb08 	ldr.w	pc, [sp], #8
    bb62:	bf00      	nop

0000bb64 <__aeabi_dcmplt>:
    bb64:	f84d ed08 	str.w	lr, [sp, #-8]!
    bb68:	f7ff ffea 	bl	bb40 <__aeabi_cdcmpeq>
    bb6c:	bf34      	ite	cc
    bb6e:	2001      	movcc	r0, #1
    bb70:	2000      	movcs	r0, #0
    bb72:	f85d fb08 	ldr.w	pc, [sp], #8
    bb76:	bf00      	nop

0000bb78 <__aeabi_dcmple>:
    bb78:	f84d ed08 	str.w	lr, [sp, #-8]!
    bb7c:	f7ff ffe0 	bl	bb40 <__aeabi_cdcmpeq>
    bb80:	bf94      	ite	ls
    bb82:	2001      	movls	r0, #1
    bb84:	2000      	movhi	r0, #0
    bb86:	f85d fb08 	ldr.w	pc, [sp], #8
    bb8a:	bf00      	nop

0000bb8c <__aeabi_dcmpge>:
    bb8c:	f84d ed08 	str.w	lr, [sp, #-8]!
    bb90:	f7ff ffce 	bl	bb30 <__aeabi_cdrcmple>
    bb94:	bf94      	ite	ls
    bb96:	2001      	movls	r0, #1
    bb98:	2000      	movhi	r0, #0
    bb9a:	f85d fb08 	ldr.w	pc, [sp], #8
    bb9e:	bf00      	nop

0000bba0 <__aeabi_dcmpgt>:
    bba0:	f84d ed08 	str.w	lr, [sp, #-8]!
    bba4:	f7ff ffc4 	bl	bb30 <__aeabi_cdrcmple>
    bba8:	bf34      	ite	cc
    bbaa:	2001      	movcc	r0, #1
    bbac:	2000      	movcs	r0, #0
    bbae:	f85d fb08 	ldr.w	pc, [sp], #8
    bbb2:	bf00      	nop

0000bbb4 <__aeabi_d2f>:
    bbb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
    bbb8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    bbbc:	bf24      	itt	cs
    bbbe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    bbc2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    bbc6:	d90d      	bls.n	bbe4 <__aeabi_d2f+0x30>
    bbc8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    bbcc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    bbd0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    bbd4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    bbd8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    bbdc:	bf08      	it	eq
    bbde:	f020 0001 	biceq.w	r0, r0, #1
    bbe2:	4770      	bx	lr
    bbe4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    bbe8:	d121      	bne.n	bc2e <__aeabi_d2f+0x7a>
    bbea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    bbee:	bfbc      	itt	lt
    bbf0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    bbf4:	4770      	bxlt	lr
    bbf6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    bbfa:	ea4f 5252 	mov.w	r2, r2, lsr #21
    bbfe:	f1c2 0218 	rsb	r2, r2, #24
    bc02:	f1c2 0c20 	rsb	ip, r2, #32
    bc06:	fa10 f30c 	lsls.w	r3, r0, ip
    bc0a:	fa20 f002 	lsr.w	r0, r0, r2
    bc0e:	bf18      	it	ne
    bc10:	f040 0001 	orrne.w	r0, r0, #1
    bc14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    bc18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    bc1c:	fa03 fc0c 	lsl.w	ip, r3, ip
    bc20:	ea40 000c 	orr.w	r0, r0, ip
    bc24:	fa23 f302 	lsr.w	r3, r3, r2
    bc28:	ea4f 0343 	mov.w	r3, r3, lsl #1
    bc2c:	e7cc      	b.n	bbc8 <__aeabi_d2f+0x14>
    bc2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
    bc32:	d107      	bne.n	bc44 <__aeabi_d2f+0x90>
    bc34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    bc38:	bf1e      	ittt	ne
    bc3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    bc3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    bc42:	4770      	bxne	lr
    bc44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    bc48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    bc4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    bc50:	4770      	bx	lr
    bc52:	bf00      	nop

0000bc54 <__errno>:
    bc54:	4b01      	ldr	r3, [pc, #4]	; (bc5c <__errno+0x8>)
    bc56:	6818      	ldr	r0, [r3, #0]
    bc58:	4770      	bx	lr
    bc5a:	bf00      	nop
    bc5c:	20000a78 	.word	0x20000a78

0000bc60 <exit>:
    bc60:	b508      	push	{r3, lr}
    bc62:	4b07      	ldr	r3, [pc, #28]	; (bc80 <exit+0x20>)
    bc64:	4604      	mov	r4, r0
    bc66:	b113      	cbz	r3, bc6e <exit+0xe>
    bc68:	2100      	movs	r1, #0
    bc6a:	f3af 8000 	nop.w
    bc6e:	4b05      	ldr	r3, [pc, #20]	; (bc84 <exit+0x24>)
    bc70:	6818      	ldr	r0, [r3, #0]
    bc72:	6a83      	ldr	r3, [r0, #40]	; 0x28
    bc74:	b103      	cbz	r3, bc78 <exit+0x18>
    bc76:	4798      	blx	r3
    bc78:	4620      	mov	r0, r4
    bc7a:	f001 f9a7 	bl	cfcc <_exit>
    bc7e:	bf00      	nop
    bc80:	00000000 	.word	0x00000000
    bc84:	00035c3c 	.word	0x00035c3c

0000bc88 <gmtime>:
    bc88:	b538      	push	{r3, r4, r5, lr}
    bc8a:	4b07      	ldr	r3, [pc, #28]	; (bca8 <gmtime+0x20>)
    bc8c:	681c      	ldr	r4, [r3, #0]
    bc8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    bc90:	4605      	mov	r5, r0
    bc92:	b91b      	cbnz	r3, bc9c <gmtime+0x14>
    bc94:	2024      	movs	r0, #36	; 0x24
    bc96:	f000 f8c5 	bl	be24 <malloc>
    bc9a:	63e0      	str	r0, [r4, #60]	; 0x3c
    bc9c:	4628      	mov	r0, r5
    bc9e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    bca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    bca4:	f000 b802 	b.w	bcac <gmtime_r>
    bca8:	20000a78 	.word	0x20000a78

0000bcac <gmtime_r>:
    bcac:	6800      	ldr	r0, [r0, #0]
    bcae:	4a46      	ldr	r2, [pc, #280]	; (bdc8 <gmtime_r+0x11c>)
    bcb0:	fb90 f3f2 	sdiv	r3, r0, r2
    bcb4:	fb02 0013 	mls	r0, r2, r3, r0
    bcb8:	2800      	cmp	r0, #0
    bcba:	bfb8      	it	lt
    bcbc:	f500 30a8 	addlt.w	r0, r0, #86016	; 0x15000
    bcc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    bcc2:	bfb8      	it	lt
    bcc4:	f500 70c0 	addlt.w	r0, r0, #384	; 0x180
    bcc8:	f44f 6461 	mov.w	r4, #3600	; 0xe10
    bccc:	f503 232f 	add.w	r3, r3, #716800	; 0xaf000
    bcd0:	fb90 f2f4 	sdiv	r2, r0, r4
    bcd4:	fb04 0012 	mls	r0, r4, r2, r0
    bcd8:	f04f 043c 	mov.w	r4, #60	; 0x3c
    bcdc:	bfac      	ite	ge
    bcde:	f603 236c 	addwge	r3, r3, #2668	; 0xa6c
    bce2:	f603 236b 	addwlt	r3, r3, #2667	; 0xa6b
    bce6:	608a      	str	r2, [r1, #8]
    bce8:	fb90 f2f4 	sdiv	r2, r0, r4
    bcec:	fb04 0012 	mls	r0, r4, r2, r0
    bcf0:	604a      	str	r2, [r1, #4]
    bcf2:	6008      	str	r0, [r1, #0]
    bcf4:	2207      	movs	r2, #7
    bcf6:	1cd8      	adds	r0, r3, #3
    bcf8:	fb90 f2f2 	sdiv	r2, r0, r2
    bcfc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    bd00:	1a82      	subs	r2, r0, r2
    bd02:	618a      	str	r2, [r1, #24]
    bd04:	4a31      	ldr	r2, [pc, #196]	; (bdcc <gmtime_r+0x120>)
    bd06:	4e32      	ldr	r6, [pc, #200]	; (bdd0 <gmtime_r+0x124>)
    bd08:	fb93 f6f6 	sdiv	r6, r3, r6
    bd0c:	fb02 3206 	mla	r2, r2, r6, r3
    bd10:	f648 64ac 	movw	r4, #36524	; 0x8eac
    bd14:	fbb2 f4f4 	udiv	r4, r2, r4
    bd18:	18a5      	adds	r5, r4, r2
    bd1a:	f240 50b4 	movw	r0, #1460	; 0x5b4
    bd1e:	fbb2 f0f0 	udiv	r0, r2, r0
    bd22:	1a2c      	subs	r4, r5, r0
    bd24:	4b2b      	ldr	r3, [pc, #172]	; (bdd4 <gmtime_r+0x128>)
    bd26:	fbb2 f3f3 	udiv	r3, r2, r3
    bd2a:	f04f 0e64 	mov.w	lr, #100	; 0x64
    bd2e:	1ae0      	subs	r0, r4, r3
    bd30:	f240 146d 	movw	r4, #365	; 0x16d
    bd34:	fbb0 f3f4 	udiv	r3, r0, r4
    bd38:	fbb3 f7fe 	udiv	r7, r3, lr
    bd3c:	443a      	add	r2, r7
    bd3e:	fb04 2213 	mls	r2, r4, r3, r2
    bd42:	eba2 0293 	sub.w	r2, r2, r3, lsr #2
    bd46:	2099      	movs	r0, #153	; 0x99
    bd48:	eb02 0582 	add.w	r5, r2, r2, lsl #2
    bd4c:	3502      	adds	r5, #2
    bd4e:	f102 0c01 	add.w	ip, r2, #1
    bd52:	fbb5 f5f0 	udiv	r5, r5, r0
    bd56:	2d0a      	cmp	r5, #10
    bd58:	fb00 f005 	mul.w	r0, r0, r5
    bd5c:	f100 0402 	add.w	r4, r0, #2
    bd60:	f04f 0005 	mov.w	r0, #5
    bd64:	fbb4 f0f0 	udiv	r0, r4, r0
    bd68:	ebc0 040c 	rsb	r4, r0, ip
    bd6c:	bf34      	ite	cc
    bd6e:	2002      	movcc	r0, #2
    bd70:	f06f 0009 	mvncs.w	r0, #9
    bd74:	4405      	add	r5, r0
    bd76:	f44f 70c8 	mov.w	r0, #400	; 0x190
    bd7a:	fb00 3606 	mla	r6, r0, r6, r3
    bd7e:	2d01      	cmp	r5, #1
    bd80:	bf98      	it	ls
    bd82:	3601      	addls	r6, #1
    bd84:	f5b2 7f99 	cmp.w	r2, #306	; 0x132
    bd88:	d302      	bcc.n	bd90 <gmtime_r+0xe4>
    bd8a:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
    bd8e:	e011      	b.n	bdb4 <gmtime_r+0x108>
    bd90:	0798      	lsls	r0, r3, #30
    bd92:	d102      	bne.n	bd9a <gmtime_r+0xee>
    bd94:	fb0e 3717 	mls	r7, lr, r7, r3
    bd98:	b94f      	cbnz	r7, bdae <gmtime_r+0x102>
    bd9a:	f44f 77c8 	mov.w	r7, #400	; 0x190
    bd9e:	fbb3 f0f7 	udiv	r0, r3, r7
    bda2:	fb07 3310 	mls	r3, r7, r0, r3
    bda6:	fab3 f383 	clz	r3, r3
    bdaa:	095b      	lsrs	r3, r3, #5
    bdac:	e000      	b.n	bdb0 <gmtime_r+0x104>
    bdae:	2301      	movs	r3, #1
    bdb0:	323b      	adds	r2, #59	; 0x3b
    bdb2:	441a      	add	r2, r3
    bdb4:	f2a6 766c 	subw	r6, r6, #1900	; 0x76c
    bdb8:	2300      	movs	r3, #0
    bdba:	61ca      	str	r2, [r1, #28]
    bdbc:	614e      	str	r6, [r1, #20]
    bdbe:	610d      	str	r5, [r1, #16]
    bdc0:	60cc      	str	r4, [r1, #12]
    bdc2:	620b      	str	r3, [r1, #32]
    bdc4:	4608      	mov	r0, r1
    bdc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bdc8:	00015180 	.word	0x00015180
    bdcc:	fffdc54f 	.word	0xfffdc54f
    bdd0:	00023ab1 	.word	0x00023ab1
    bdd4:	00023ab0 	.word	0x00023ab0

0000bdd8 <__libc_init_array>:
    bdd8:	b570      	push	{r4, r5, r6, lr}
    bdda:	4b0e      	ldr	r3, [pc, #56]	; (be14 <__libc_init_array+0x3c>)
    bddc:	4c0e      	ldr	r4, [pc, #56]	; (be18 <__libc_init_array+0x40>)
    bdde:	1ae4      	subs	r4, r4, r3
    bde0:	10a4      	asrs	r4, r4, #2
    bde2:	2500      	movs	r5, #0
    bde4:	461e      	mov	r6, r3
    bde6:	42a5      	cmp	r5, r4
    bde8:	d004      	beq.n	bdf4 <__libc_init_array+0x1c>
    bdea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    bdee:	4798      	blx	r3
    bdf0:	3501      	adds	r5, #1
    bdf2:	e7f8      	b.n	bde6 <__libc_init_array+0xe>
    bdf4:	f001 f8ec 	bl	cfd0 <_init>
    bdf8:	4c08      	ldr	r4, [pc, #32]	; (be1c <__libc_init_array+0x44>)
    bdfa:	4b09      	ldr	r3, [pc, #36]	; (be20 <__libc_init_array+0x48>)
    bdfc:	1ae4      	subs	r4, r4, r3
    bdfe:	10a4      	asrs	r4, r4, #2
    be00:	2500      	movs	r5, #0
    be02:	461e      	mov	r6, r3
    be04:	42a5      	cmp	r5, r4
    be06:	d004      	beq.n	be12 <__libc_init_array+0x3a>
    be08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    be0c:	4798      	blx	r3
    be0e:	3501      	adds	r5, #1
    be10:	e7f8      	b.n	be04 <__libc_init_array+0x2c>
    be12:	bd70      	pop	{r4, r5, r6, pc}
    be14:	20000a7c 	.word	0x20000a7c
    be18:	20000a7c 	.word	0x20000a7c
    be1c:	20000a80 	.word	0x20000a80
    be20:	20000a7c 	.word	0x20000a7c

0000be24 <malloc>:
    be24:	4b02      	ldr	r3, [pc, #8]	; (be30 <malloc+0xc>)
    be26:	4601      	mov	r1, r0
    be28:	6818      	ldr	r0, [r3, #0]
    be2a:	f000 b85b 	b.w	bee4 <_malloc_r>
    be2e:	bf00      	nop
    be30:	20000a78 	.word	0x20000a78

0000be34 <memcpy>:
    be34:	b510      	push	{r4, lr}
    be36:	1e43      	subs	r3, r0, #1
    be38:	440a      	add	r2, r1
    be3a:	4291      	cmp	r1, r2
    be3c:	d004      	beq.n	be48 <memcpy+0x14>
    be3e:	f811 4b01 	ldrb.w	r4, [r1], #1
    be42:	f803 4f01 	strb.w	r4, [r3, #1]!
    be46:	e7f8      	b.n	be3a <memcpy+0x6>
    be48:	bd10      	pop	{r4, pc}

0000be4a <memset>:
    be4a:	4402      	add	r2, r0
    be4c:	4603      	mov	r3, r0
    be4e:	4293      	cmp	r3, r2
    be50:	d002      	beq.n	be58 <memset+0xe>
    be52:	f803 1b01 	strb.w	r1, [r3], #1
    be56:	e7fa      	b.n	be4e <memset+0x4>
    be58:	4770      	bx	lr
	...

0000be5c <_free_r>:
    be5c:	b530      	push	{r4, r5, lr}
    be5e:	2900      	cmp	r1, #0
    be60:	d03d      	beq.n	bede <_free_r+0x82>
    be62:	f851 2c04 	ldr.w	r2, [r1, #-4]
    be66:	1f0b      	subs	r3, r1, #4
    be68:	491d      	ldr	r1, [pc, #116]	; (bee0 <_free_r+0x84>)
    be6a:	2a00      	cmp	r2, #0
    be6c:	bfb8      	it	lt
    be6e:	189b      	addlt	r3, r3, r2
    be70:	680a      	ldr	r2, [r1, #0]
    be72:	460c      	mov	r4, r1
    be74:	b912      	cbnz	r2, be7c <_free_r+0x20>
    be76:	605a      	str	r2, [r3, #4]
    be78:	600b      	str	r3, [r1, #0]
    be7a:	bd30      	pop	{r4, r5, pc}
    be7c:	4293      	cmp	r3, r2
    be7e:	d20d      	bcs.n	be9c <_free_r+0x40>
    be80:	6819      	ldr	r1, [r3, #0]
    be82:	1858      	adds	r0, r3, r1
    be84:	4290      	cmp	r0, r2
    be86:	bf01      	itttt	eq
    be88:	585a      	ldreq	r2, [r3, r1]
    be8a:	1852      	addeq	r2, r2, r1
    be8c:	601a      	streq	r2, [r3, #0]
    be8e:	6842      	ldreq	r2, [r0, #4]
    be90:	605a      	str	r2, [r3, #4]
    be92:	6023      	str	r3, [r4, #0]
    be94:	bd30      	pop	{r4, r5, pc}
    be96:	4299      	cmp	r1, r3
    be98:	d803      	bhi.n	bea2 <_free_r+0x46>
    be9a:	460a      	mov	r2, r1
    be9c:	6851      	ldr	r1, [r2, #4]
    be9e:	2900      	cmp	r1, #0
    bea0:	d1f9      	bne.n	be96 <_free_r+0x3a>
    bea2:	6814      	ldr	r4, [r2, #0]
    bea4:	1915      	adds	r5, r2, r4
    bea6:	429d      	cmp	r5, r3
    bea8:	d10a      	bne.n	bec0 <_free_r+0x64>
    beaa:	681b      	ldr	r3, [r3, #0]
    beac:	4423      	add	r3, r4
    beae:	18d0      	adds	r0, r2, r3
    beb0:	4288      	cmp	r0, r1
    beb2:	6013      	str	r3, [r2, #0]
    beb4:	d113      	bne.n	bede <_free_r+0x82>
    beb6:	6808      	ldr	r0, [r1, #0]
    beb8:	4403      	add	r3, r0
    beba:	6013      	str	r3, [r2, #0]
    bebc:	684b      	ldr	r3, [r1, #4]
    bebe:	e00d      	b.n	bedc <_free_r+0x80>
    bec0:	d902      	bls.n	bec8 <_free_r+0x6c>
    bec2:	230c      	movs	r3, #12
    bec4:	6003      	str	r3, [r0, #0]
    bec6:	bd30      	pop	{r4, r5, pc}
    bec8:	681c      	ldr	r4, [r3, #0]
    beca:	1918      	adds	r0, r3, r4
    becc:	4288      	cmp	r0, r1
    bece:	bf04      	itt	eq
    bed0:	6808      	ldreq	r0, [r1, #0]
    bed2:	6849      	ldreq	r1, [r1, #4]
    bed4:	6059      	str	r1, [r3, #4]
    bed6:	bf04      	itt	eq
    bed8:	1900      	addeq	r0, r0, r4
    beda:	6018      	streq	r0, [r3, #0]
    bedc:	6053      	str	r3, [r2, #4]
    bede:	bd30      	pop	{r4, r5, pc}
    bee0:	2000235c 	.word	0x2000235c

0000bee4 <_malloc_r>:
    bee4:	b570      	push	{r4, r5, r6, lr}
    bee6:	1ccc      	adds	r4, r1, #3
    bee8:	f024 0403 	bic.w	r4, r4, #3
    beec:	3408      	adds	r4, #8
    beee:	2c0c      	cmp	r4, #12
    bef0:	bf38      	it	cc
    bef2:	240c      	movcc	r4, #12
    bef4:	2c00      	cmp	r4, #0
    bef6:	4606      	mov	r6, r0
    bef8:	da03      	bge.n	bf02 <_malloc_r+0x1e>
    befa:	230c      	movs	r3, #12
    befc:	6033      	str	r3, [r6, #0]
    befe:	2000      	movs	r0, #0
    bf00:	bd70      	pop	{r4, r5, r6, pc}
    bf02:	428c      	cmp	r4, r1
    bf04:	d3f9      	bcc.n	befa <_malloc_r+0x16>
    bf06:	4a20      	ldr	r2, [pc, #128]	; (bf88 <_malloc_r+0xa4>)
    bf08:	6813      	ldr	r3, [r2, #0]
    bf0a:	4610      	mov	r0, r2
    bf0c:	4619      	mov	r1, r3
    bf0e:	b1a1      	cbz	r1, bf3a <_malloc_r+0x56>
    bf10:	680a      	ldr	r2, [r1, #0]
    bf12:	1b12      	subs	r2, r2, r4
    bf14:	d40e      	bmi.n	bf34 <_malloc_r+0x50>
    bf16:	2a0b      	cmp	r2, #11
    bf18:	d903      	bls.n	bf22 <_malloc_r+0x3e>
    bf1a:	600a      	str	r2, [r1, #0]
    bf1c:	188b      	adds	r3, r1, r2
    bf1e:	508c      	str	r4, [r1, r2]
    bf20:	e01f      	b.n	bf62 <_malloc_r+0x7e>
    bf22:	428b      	cmp	r3, r1
    bf24:	bf0d      	iteet	eq
    bf26:	685a      	ldreq	r2, [r3, #4]
    bf28:	684a      	ldrne	r2, [r1, #4]
    bf2a:	605a      	strne	r2, [r3, #4]
    bf2c:	6002      	streq	r2, [r0, #0]
    bf2e:	bf18      	it	ne
    bf30:	460b      	movne	r3, r1
    bf32:	e016      	b.n	bf62 <_malloc_r+0x7e>
    bf34:	460b      	mov	r3, r1
    bf36:	6849      	ldr	r1, [r1, #4]
    bf38:	e7e9      	b.n	bf0e <_malloc_r+0x2a>
    bf3a:	4d14      	ldr	r5, [pc, #80]	; (bf8c <_malloc_r+0xa8>)
    bf3c:	682b      	ldr	r3, [r5, #0]
    bf3e:	b91b      	cbnz	r3, bf48 <_malloc_r+0x64>
    bf40:	4630      	mov	r0, r6
    bf42:	f000 f83d 	bl	bfc0 <_sbrk_r>
    bf46:	6028      	str	r0, [r5, #0]
    bf48:	4630      	mov	r0, r6
    bf4a:	4621      	mov	r1, r4
    bf4c:	f000 f838 	bl	bfc0 <_sbrk_r>
    bf50:	1c42      	adds	r2, r0, #1
    bf52:	4603      	mov	r3, r0
    bf54:	d0d1      	beq.n	befa <_malloc_r+0x16>
    bf56:	1cc5      	adds	r5, r0, #3
    bf58:	f025 0503 	bic.w	r5, r5, #3
    bf5c:	4285      	cmp	r5, r0
    bf5e:	d10a      	bne.n	bf76 <_malloc_r+0x92>
    bf60:	601c      	str	r4, [r3, #0]
    bf62:	f103 000b 	add.w	r0, r3, #11
    bf66:	1d1a      	adds	r2, r3, #4
    bf68:	f020 0007 	bic.w	r0, r0, #7
    bf6c:	1a82      	subs	r2, r0, r2
    bf6e:	d00a      	beq.n	bf86 <_malloc_r+0xa2>
    bf70:	4251      	negs	r1, r2
    bf72:	5099      	str	r1, [r3, r2]
    bf74:	bd70      	pop	{r4, r5, r6, pc}
    bf76:	4630      	mov	r0, r6
    bf78:	1ae9      	subs	r1, r5, r3
    bf7a:	f000 f821 	bl	bfc0 <_sbrk_r>
    bf7e:	3001      	adds	r0, #1
    bf80:	d0bb      	beq.n	befa <_malloc_r+0x16>
    bf82:	462b      	mov	r3, r5
    bf84:	e7ec      	b.n	bf60 <_malloc_r+0x7c>
    bf86:	bd70      	pop	{r4, r5, r6, pc}
    bf88:	2000235c 	.word	0x2000235c
    bf8c:	20002358 	.word	0x20002358

0000bf90 <iprintf>:
    bf90:	b40f      	push	{r0, r1, r2, r3}
    bf92:	4b0a      	ldr	r3, [pc, #40]	; (bfbc <iprintf+0x2c>)
    bf94:	b513      	push	{r0, r1, r4, lr}
    bf96:	681c      	ldr	r4, [r3, #0]
    bf98:	b124      	cbz	r4, bfa4 <iprintf+0x14>
    bf9a:	69a3      	ldr	r3, [r4, #24]
    bf9c:	b913      	cbnz	r3, bfa4 <iprintf+0x14>
    bf9e:	4620      	mov	r0, r4
    bfa0:	f000 f9f0 	bl	c384 <__sinit>
    bfa4:	ab05      	add	r3, sp, #20
    bfa6:	4620      	mov	r0, r4
    bfa8:	68a1      	ldr	r1, [r4, #8]
    bfaa:	9a04      	ldr	r2, [sp, #16]
    bfac:	9301      	str	r3, [sp, #4]
    bfae:	f000 fc33 	bl	c818 <_vfiprintf_r>
    bfb2:	b002      	add	sp, #8
    bfb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bfb8:	b004      	add	sp, #16
    bfba:	4770      	bx	lr
    bfbc:	20000a78 	.word	0x20000a78

0000bfc0 <_sbrk_r>:
    bfc0:	b538      	push	{r3, r4, r5, lr}
    bfc2:	4c06      	ldr	r4, [pc, #24]	; (bfdc <_sbrk_r+0x1c>)
    bfc4:	2300      	movs	r3, #0
    bfc6:	4605      	mov	r5, r0
    bfc8:	4608      	mov	r0, r1
    bfca:	6023      	str	r3, [r4, #0]
    bfcc:	f000 fff0 	bl	cfb0 <_sbrk>
    bfd0:	1c43      	adds	r3, r0, #1
    bfd2:	d102      	bne.n	bfda <_sbrk_r+0x1a>
    bfd4:	6823      	ldr	r3, [r4, #0]
    bfd6:	b103      	cbz	r3, bfda <_sbrk_r+0x1a>
    bfd8:	602b      	str	r3, [r5, #0]
    bfda:	bd38      	pop	{r3, r4, r5, pc}
    bfdc:	20002600 	.word	0x20002600

0000bfe0 <siprintf>:
    bfe0:	b40e      	push	{r1, r2, r3}
    bfe2:	b500      	push	{lr}
    bfe4:	b09c      	sub	sp, #112	; 0x70
    bfe6:	f44f 7102 	mov.w	r1, #520	; 0x208
    bfea:	f8ad 1014 	strh.w	r1, [sp, #20]
    bfee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    bff2:	9104      	str	r1, [sp, #16]
    bff4:	9107      	str	r1, [sp, #28]
    bff6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    bffa:	ab1d      	add	r3, sp, #116	; 0x74
    bffc:	f8ad 1016 	strh.w	r1, [sp, #22]
    c000:	4908      	ldr	r1, [pc, #32]	; (c024 <siprintf+0x44>)
    c002:	f853 2b04 	ldr.w	r2, [r3], #4
    c006:	9002      	str	r0, [sp, #8]
    c008:	9006      	str	r0, [sp, #24]
    c00a:	6808      	ldr	r0, [r1, #0]
    c00c:	9301      	str	r3, [sp, #4]
    c00e:	a902      	add	r1, sp, #8
    c010:	f000 fae8 	bl	c5e4 <_svfiprintf_r>
    c014:	9b02      	ldr	r3, [sp, #8]
    c016:	2200      	movs	r2, #0
    c018:	701a      	strb	r2, [r3, #0]
    c01a:	b01c      	add	sp, #112	; 0x70
    c01c:	f85d eb04 	ldr.w	lr, [sp], #4
    c020:	b003      	add	sp, #12
    c022:	4770      	bx	lr
    c024:	20000a78 	.word	0x20000a78

0000c028 <__swbuf_r>:
    c028:	b570      	push	{r4, r5, r6, lr}
    c02a:	460d      	mov	r5, r1
    c02c:	4614      	mov	r4, r2
    c02e:	4606      	mov	r6, r0
    c030:	b118      	cbz	r0, c03a <__swbuf_r+0x12>
    c032:	6983      	ldr	r3, [r0, #24]
    c034:	b90b      	cbnz	r3, c03a <__swbuf_r+0x12>
    c036:	f000 f9a5 	bl	c384 <__sinit>
    c03a:	4b22      	ldr	r3, [pc, #136]	; (c0c4 <__swbuf_r+0x9c>)
    c03c:	429c      	cmp	r4, r3
    c03e:	d101      	bne.n	c044 <__swbuf_r+0x1c>
    c040:	6874      	ldr	r4, [r6, #4]
    c042:	e008      	b.n	c056 <__swbuf_r+0x2e>
    c044:	4b20      	ldr	r3, [pc, #128]	; (c0c8 <__swbuf_r+0xa0>)
    c046:	429c      	cmp	r4, r3
    c048:	d101      	bne.n	c04e <__swbuf_r+0x26>
    c04a:	68b4      	ldr	r4, [r6, #8]
    c04c:	e003      	b.n	c056 <__swbuf_r+0x2e>
    c04e:	4b1f      	ldr	r3, [pc, #124]	; (c0cc <__swbuf_r+0xa4>)
    c050:	429c      	cmp	r4, r3
    c052:	bf08      	it	eq
    c054:	68f4      	ldreq	r4, [r6, #12]
    c056:	69a3      	ldr	r3, [r4, #24]
    c058:	60a3      	str	r3, [r4, #8]
    c05a:	89a3      	ldrh	r3, [r4, #12]
    c05c:	071a      	lsls	r2, r3, #28
    c05e:	d509      	bpl.n	c074 <__swbuf_r+0x4c>
    c060:	6923      	ldr	r3, [r4, #16]
    c062:	b13b      	cbz	r3, c074 <__swbuf_r+0x4c>
    c064:	6823      	ldr	r3, [r4, #0]
    c066:	6920      	ldr	r0, [r4, #16]
    c068:	1a18      	subs	r0, r3, r0
    c06a:	6963      	ldr	r3, [r4, #20]
    c06c:	4298      	cmp	r0, r3
    c06e:	b2ed      	uxtb	r5, r5
    c070:	db0f      	blt.n	c092 <__swbuf_r+0x6a>
    c072:	e008      	b.n	c086 <__swbuf_r+0x5e>
    c074:	4630      	mov	r0, r6
    c076:	4621      	mov	r1, r4
    c078:	f000 f82a 	bl	c0d0 <__swsetup_r>
    c07c:	2800      	cmp	r0, #0
    c07e:	d0f1      	beq.n	c064 <__swbuf_r+0x3c>
    c080:	f04f 30ff 	mov.w	r0, #4294967295
    c084:	bd70      	pop	{r4, r5, r6, pc}
    c086:	4630      	mov	r0, r6
    c088:	4621      	mov	r1, r4
    c08a:	f000 f911 	bl	c2b0 <_fflush_r>
    c08e:	2800      	cmp	r0, #0
    c090:	d1f6      	bne.n	c080 <__swbuf_r+0x58>
    c092:	68a3      	ldr	r3, [r4, #8]
    c094:	3b01      	subs	r3, #1
    c096:	60a3      	str	r3, [r4, #8]
    c098:	6823      	ldr	r3, [r4, #0]
    c09a:	1c5a      	adds	r2, r3, #1
    c09c:	6022      	str	r2, [r4, #0]
    c09e:	701d      	strb	r5, [r3, #0]
    c0a0:	6963      	ldr	r3, [r4, #20]
    c0a2:	3001      	adds	r0, #1
    c0a4:	4298      	cmp	r0, r3
    c0a6:	d004      	beq.n	c0b2 <__swbuf_r+0x8a>
    c0a8:	89a3      	ldrh	r3, [r4, #12]
    c0aa:	07db      	lsls	r3, r3, #31
    c0ac:	d507      	bpl.n	c0be <__swbuf_r+0x96>
    c0ae:	2d0a      	cmp	r5, #10
    c0b0:	d105      	bne.n	c0be <__swbuf_r+0x96>
    c0b2:	4630      	mov	r0, r6
    c0b4:	4621      	mov	r1, r4
    c0b6:	f000 f8fb 	bl	c2b0 <_fflush_r>
    c0ba:	2800      	cmp	r0, #0
    c0bc:	d1e0      	bne.n	c080 <__swbuf_r+0x58>
    c0be:	4628      	mov	r0, r5
    c0c0:	bd70      	pop	{r4, r5, r6, pc}
    c0c2:	bf00      	nop
    c0c4:	00035c40 	.word	0x00035c40
    c0c8:	00035c60 	.word	0x00035c60
    c0cc:	00035c80 	.word	0x00035c80

0000c0d0 <__swsetup_r>:
    c0d0:	4b31      	ldr	r3, [pc, #196]	; (c198 <__swsetup_r+0xc8>)
    c0d2:	b570      	push	{r4, r5, r6, lr}
    c0d4:	681d      	ldr	r5, [r3, #0]
    c0d6:	4606      	mov	r6, r0
    c0d8:	460c      	mov	r4, r1
    c0da:	b125      	cbz	r5, c0e6 <__swsetup_r+0x16>
    c0dc:	69ab      	ldr	r3, [r5, #24]
    c0de:	b913      	cbnz	r3, c0e6 <__swsetup_r+0x16>
    c0e0:	4628      	mov	r0, r5
    c0e2:	f000 f94f 	bl	c384 <__sinit>
    c0e6:	4b2d      	ldr	r3, [pc, #180]	; (c19c <__swsetup_r+0xcc>)
    c0e8:	429c      	cmp	r4, r3
    c0ea:	d101      	bne.n	c0f0 <__swsetup_r+0x20>
    c0ec:	686c      	ldr	r4, [r5, #4]
    c0ee:	e008      	b.n	c102 <__swsetup_r+0x32>
    c0f0:	4b2b      	ldr	r3, [pc, #172]	; (c1a0 <__swsetup_r+0xd0>)
    c0f2:	429c      	cmp	r4, r3
    c0f4:	d101      	bne.n	c0fa <__swsetup_r+0x2a>
    c0f6:	68ac      	ldr	r4, [r5, #8]
    c0f8:	e003      	b.n	c102 <__swsetup_r+0x32>
    c0fa:	4b2a      	ldr	r3, [pc, #168]	; (c1a4 <__swsetup_r+0xd4>)
    c0fc:	429c      	cmp	r4, r3
    c0fe:	bf08      	it	eq
    c100:	68ec      	ldreq	r4, [r5, #12]
    c102:	89a3      	ldrh	r3, [r4, #12]
    c104:	b29a      	uxth	r2, r3
    c106:	0711      	lsls	r1, r2, #28
    c108:	d41d      	bmi.n	c146 <__swsetup_r+0x76>
    c10a:	06d5      	lsls	r5, r2, #27
    c10c:	d402      	bmi.n	c114 <__swsetup_r+0x44>
    c10e:	2209      	movs	r2, #9
    c110:	6032      	str	r2, [r6, #0]
    c112:	e038      	b.n	c186 <__swsetup_r+0xb6>
    c114:	0750      	lsls	r0, r2, #29
    c116:	d512      	bpl.n	c13e <__swsetup_r+0x6e>
    c118:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c11a:	b141      	cbz	r1, c12e <__swsetup_r+0x5e>
    c11c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    c120:	4299      	cmp	r1, r3
    c122:	d002      	beq.n	c12a <__swsetup_r+0x5a>
    c124:	4630      	mov	r0, r6
    c126:	f7ff fe99 	bl	be5c <_free_r>
    c12a:	2300      	movs	r3, #0
    c12c:	6363      	str	r3, [r4, #52]	; 0x34
    c12e:	89a3      	ldrh	r3, [r4, #12]
    c130:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    c134:	81a3      	strh	r3, [r4, #12]
    c136:	2300      	movs	r3, #0
    c138:	6063      	str	r3, [r4, #4]
    c13a:	6923      	ldr	r3, [r4, #16]
    c13c:	6023      	str	r3, [r4, #0]
    c13e:	89a3      	ldrh	r3, [r4, #12]
    c140:	f043 0308 	orr.w	r3, r3, #8
    c144:	81a3      	strh	r3, [r4, #12]
    c146:	6923      	ldr	r3, [r4, #16]
    c148:	b94b      	cbnz	r3, c15e <__swsetup_r+0x8e>
    c14a:	89a3      	ldrh	r3, [r4, #12]
    c14c:	f403 7320 	and.w	r3, r3, #640	; 0x280
    c150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    c154:	d003      	beq.n	c15e <__swsetup_r+0x8e>
    c156:	4630      	mov	r0, r6
    c158:	4621      	mov	r1, r4
    c15a:	f000 f99b 	bl	c494 <__smakebuf_r>
    c15e:	89a3      	ldrh	r3, [r4, #12]
    c160:	f013 0201 	ands.w	r2, r3, #1
    c164:	d005      	beq.n	c172 <__swsetup_r+0xa2>
    c166:	2200      	movs	r2, #0
    c168:	60a2      	str	r2, [r4, #8]
    c16a:	6962      	ldr	r2, [r4, #20]
    c16c:	4252      	negs	r2, r2
    c16e:	61a2      	str	r2, [r4, #24]
    c170:	e003      	b.n	c17a <__swsetup_r+0xaa>
    c172:	0799      	lsls	r1, r3, #30
    c174:	bf58      	it	pl
    c176:	6962      	ldrpl	r2, [r4, #20]
    c178:	60a2      	str	r2, [r4, #8]
    c17a:	6922      	ldr	r2, [r4, #16]
    c17c:	b94a      	cbnz	r2, c192 <__swsetup_r+0xc2>
    c17e:	f003 0080 	and.w	r0, r3, #128	; 0x80
    c182:	b280      	uxth	r0, r0
    c184:	b130      	cbz	r0, c194 <__swsetup_r+0xc4>
    c186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c18a:	81a3      	strh	r3, [r4, #12]
    c18c:	f04f 30ff 	mov.w	r0, #4294967295
    c190:	bd70      	pop	{r4, r5, r6, pc}
    c192:	2000      	movs	r0, #0
    c194:	bd70      	pop	{r4, r5, r6, pc}
    c196:	bf00      	nop
    c198:	20000a78 	.word	0x20000a78
    c19c:	00035c40 	.word	0x00035c40
    c1a0:	00035c60 	.word	0x00035c60
    c1a4:	00035c80 	.word	0x00035c80

0000c1a8 <__sflush_r>:
    c1a8:	898a      	ldrh	r2, [r1, #12]
    c1aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c1ae:	4605      	mov	r5, r0
    c1b0:	0710      	lsls	r0, r2, #28
    c1b2:	460c      	mov	r4, r1
    c1b4:	d457      	bmi.n	c266 <__sflush_r+0xbe>
    c1b6:	684b      	ldr	r3, [r1, #4]
    c1b8:	2b00      	cmp	r3, #0
    c1ba:	dc02      	bgt.n	c1c2 <__sflush_r+0x1a>
    c1bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    c1be:	2b00      	cmp	r3, #0
    c1c0:	dd18      	ble.n	c1f4 <__sflush_r+0x4c>
    c1c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    c1c4:	b1b6      	cbz	r6, c1f4 <__sflush_r+0x4c>
    c1c6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
    c1ca:	2300      	movs	r3, #0
    c1cc:	b292      	uxth	r2, r2
    c1ce:	682f      	ldr	r7, [r5, #0]
    c1d0:	602b      	str	r3, [r5, #0]
    c1d2:	b10a      	cbz	r2, c1d8 <__sflush_r+0x30>
    c1d4:	6d62      	ldr	r2, [r4, #84]	; 0x54
    c1d6:	e010      	b.n	c1fa <__sflush_r+0x52>
    c1d8:	6a21      	ldr	r1, [r4, #32]
    c1da:	4628      	mov	r0, r5
    c1dc:	2301      	movs	r3, #1
    c1de:	47b0      	blx	r6
    c1e0:	1c41      	adds	r1, r0, #1
    c1e2:	4602      	mov	r2, r0
    c1e4:	d109      	bne.n	c1fa <__sflush_r+0x52>
    c1e6:	682b      	ldr	r3, [r5, #0]
    c1e8:	b13b      	cbz	r3, c1fa <__sflush_r+0x52>
    c1ea:	2b1d      	cmp	r3, #29
    c1ec:	d001      	beq.n	c1f2 <__sflush_r+0x4a>
    c1ee:	2b16      	cmp	r3, #22
    c1f0:	d147      	bne.n	c282 <__sflush_r+0xda>
    c1f2:	602f      	str	r7, [r5, #0]
    c1f4:	2000      	movs	r0, #0
    c1f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c1fa:	89a3      	ldrh	r3, [r4, #12]
    c1fc:	075b      	lsls	r3, r3, #29
    c1fe:	d505      	bpl.n	c20c <__sflush_r+0x64>
    c200:	6863      	ldr	r3, [r4, #4]
    c202:	1ad2      	subs	r2, r2, r3
    c204:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c206:	b10b      	cbz	r3, c20c <__sflush_r+0x64>
    c208:	6c23      	ldr	r3, [r4, #64]	; 0x40
    c20a:	1ad2      	subs	r2, r2, r3
    c20c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    c20e:	6a21      	ldr	r1, [r4, #32]
    c210:	2300      	movs	r3, #0
    c212:	4628      	mov	r0, r5
    c214:	47b0      	blx	r6
    c216:	1c46      	adds	r6, r0, #1
    c218:	89a3      	ldrh	r3, [r4, #12]
    c21a:	d105      	bne.n	c228 <__sflush_r+0x80>
    c21c:	682a      	ldr	r2, [r5, #0]
    c21e:	b11a      	cbz	r2, c228 <__sflush_r+0x80>
    c220:	2a1d      	cmp	r2, #29
    c222:	d001      	beq.n	c228 <__sflush_r+0x80>
    c224:	2a16      	cmp	r2, #22
    c226:	d119      	bne.n	c25c <__sflush_r+0xb4>
    c228:	2200      	movs	r2, #0
    c22a:	6062      	str	r2, [r4, #4]
    c22c:	04d9      	lsls	r1, r3, #19
    c22e:	6922      	ldr	r2, [r4, #16]
    c230:	6022      	str	r2, [r4, #0]
    c232:	d504      	bpl.n	c23e <__sflush_r+0x96>
    c234:	1c42      	adds	r2, r0, #1
    c236:	d101      	bne.n	c23c <__sflush_r+0x94>
    c238:	682b      	ldr	r3, [r5, #0]
    c23a:	b903      	cbnz	r3, c23e <__sflush_r+0x96>
    c23c:	6560      	str	r0, [r4, #84]	; 0x54
    c23e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c240:	602f      	str	r7, [r5, #0]
    c242:	2900      	cmp	r1, #0
    c244:	d0d6      	beq.n	c1f4 <__sflush_r+0x4c>
    c246:	f104 0344 	add.w	r3, r4, #68	; 0x44
    c24a:	4299      	cmp	r1, r3
    c24c:	d002      	beq.n	c254 <__sflush_r+0xac>
    c24e:	4628      	mov	r0, r5
    c250:	f7ff fe04 	bl	be5c <_free_r>
    c254:	2000      	movs	r0, #0
    c256:	6360      	str	r0, [r4, #52]	; 0x34
    c258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c25c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c260:	81a3      	strh	r3, [r4, #12]
    c262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c266:	690f      	ldr	r7, [r1, #16]
    c268:	2f00      	cmp	r7, #0
    c26a:	d0c3      	beq.n	c1f4 <__sflush_r+0x4c>
    c26c:	0793      	lsls	r3, r2, #30
    c26e:	680e      	ldr	r6, [r1, #0]
    c270:	bf08      	it	eq
    c272:	694b      	ldreq	r3, [r1, #20]
    c274:	600f      	str	r7, [r1, #0]
    c276:	bf18      	it	ne
    c278:	2300      	movne	r3, #0
    c27a:	ebc7 0806 	rsb	r8, r7, r6
    c27e:	608b      	str	r3, [r1, #8]
    c280:	e012      	b.n	c2a8 <__sflush_r+0x100>
    c282:	89a3      	ldrh	r3, [r4, #12]
    c284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c288:	81a3      	strh	r3, [r4, #12]
    c28a:	f04f 30ff 	mov.w	r0, #4294967295
    c28e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c292:	4628      	mov	r0, r5
    c294:	6a21      	ldr	r1, [r4, #32]
    c296:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    c298:	463a      	mov	r2, r7
    c29a:	4643      	mov	r3, r8
    c29c:	47b0      	blx	r6
    c29e:	2800      	cmp	r0, #0
    c2a0:	ddef      	ble.n	c282 <__sflush_r+0xda>
    c2a2:	4407      	add	r7, r0
    c2a4:	ebc0 0808 	rsb	r8, r0, r8
    c2a8:	f1b8 0f00 	cmp.w	r8, #0
    c2ac:	dcf1      	bgt.n	c292 <__sflush_r+0xea>
    c2ae:	e7a1      	b.n	c1f4 <__sflush_r+0x4c>

0000c2b0 <_fflush_r>:
    c2b0:	b538      	push	{r3, r4, r5, lr}
    c2b2:	690b      	ldr	r3, [r1, #16]
    c2b4:	4605      	mov	r5, r0
    c2b6:	460c      	mov	r4, r1
    c2b8:	b1db      	cbz	r3, c2f2 <_fflush_r+0x42>
    c2ba:	b118      	cbz	r0, c2c4 <_fflush_r+0x14>
    c2bc:	6983      	ldr	r3, [r0, #24]
    c2be:	b90b      	cbnz	r3, c2c4 <_fflush_r+0x14>
    c2c0:	f000 f860 	bl	c384 <__sinit>
    c2c4:	4b0c      	ldr	r3, [pc, #48]	; (c2f8 <_fflush_r+0x48>)
    c2c6:	429c      	cmp	r4, r3
    c2c8:	d101      	bne.n	c2ce <_fflush_r+0x1e>
    c2ca:	686c      	ldr	r4, [r5, #4]
    c2cc:	e008      	b.n	c2e0 <_fflush_r+0x30>
    c2ce:	4b0b      	ldr	r3, [pc, #44]	; (c2fc <_fflush_r+0x4c>)
    c2d0:	429c      	cmp	r4, r3
    c2d2:	d101      	bne.n	c2d8 <_fflush_r+0x28>
    c2d4:	68ac      	ldr	r4, [r5, #8]
    c2d6:	e003      	b.n	c2e0 <_fflush_r+0x30>
    c2d8:	4b09      	ldr	r3, [pc, #36]	; (c300 <_fflush_r+0x50>)
    c2da:	429c      	cmp	r4, r3
    c2dc:	bf08      	it	eq
    c2de:	68ec      	ldreq	r4, [r5, #12]
    c2e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    c2e4:	b12b      	cbz	r3, c2f2 <_fflush_r+0x42>
    c2e6:	4628      	mov	r0, r5
    c2e8:	4621      	mov	r1, r4
    c2ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c2ee:	f7ff bf5b 	b.w	c1a8 <__sflush_r>
    c2f2:	2000      	movs	r0, #0
    c2f4:	bd38      	pop	{r3, r4, r5, pc}
    c2f6:	bf00      	nop
    c2f8:	00035c40 	.word	0x00035c40
    c2fc:	00035c60 	.word	0x00035c60
    c300:	00035c80 	.word	0x00035c80

0000c304 <_cleanup_r>:
    c304:	4901      	ldr	r1, [pc, #4]	; (c30c <_cleanup_r+0x8>)
    c306:	f000 b8a7 	b.w	c458 <_fwalk_reent>
    c30a:	bf00      	nop
    c30c:	0000c2b1 	.word	0x0000c2b1

0000c310 <std.isra.0>:
    c310:	2300      	movs	r3, #0
    c312:	b510      	push	{r4, lr}
    c314:	4604      	mov	r4, r0
    c316:	6003      	str	r3, [r0, #0]
    c318:	6043      	str	r3, [r0, #4]
    c31a:	6083      	str	r3, [r0, #8]
    c31c:	8181      	strh	r1, [r0, #12]
    c31e:	6643      	str	r3, [r0, #100]	; 0x64
    c320:	81c2      	strh	r2, [r0, #14]
    c322:	6103      	str	r3, [r0, #16]
    c324:	6143      	str	r3, [r0, #20]
    c326:	6183      	str	r3, [r0, #24]
    c328:	4619      	mov	r1, r3
    c32a:	305c      	adds	r0, #92	; 0x5c
    c32c:	2208      	movs	r2, #8
    c32e:	f7ff fd8c 	bl	be4a <memset>
    c332:	4b05      	ldr	r3, [pc, #20]	; (c348 <std.isra.0+0x38>)
    c334:	6263      	str	r3, [r4, #36]	; 0x24
    c336:	4b05      	ldr	r3, [pc, #20]	; (c34c <std.isra.0+0x3c>)
    c338:	62a3      	str	r3, [r4, #40]	; 0x28
    c33a:	4b05      	ldr	r3, [pc, #20]	; (c350 <std.isra.0+0x40>)
    c33c:	62e3      	str	r3, [r4, #44]	; 0x2c
    c33e:	4b05      	ldr	r3, [pc, #20]	; (c354 <std.isra.0+0x44>)
    c340:	6224      	str	r4, [r4, #32]
    c342:	6323      	str	r3, [r4, #48]	; 0x30
    c344:	bd10      	pop	{r4, pc}
    c346:	bf00      	nop
    c348:	0000cd55 	.word	0x0000cd55
    c34c:	0000cd77 	.word	0x0000cd77
    c350:	0000cdaf 	.word	0x0000cdaf
    c354:	0000cdd3 	.word	0x0000cdd3

0000c358 <__sfmoreglue>:
    c358:	b570      	push	{r4, r5, r6, lr}
    c35a:	2368      	movs	r3, #104	; 0x68
    c35c:	1e4d      	subs	r5, r1, #1
    c35e:	435d      	muls	r5, r3
    c360:	460e      	mov	r6, r1
    c362:	f105 0174 	add.w	r1, r5, #116	; 0x74
    c366:	f7ff fdbd 	bl	bee4 <_malloc_r>
    c36a:	4604      	mov	r4, r0
    c36c:	b140      	cbz	r0, c380 <__sfmoreglue+0x28>
    c36e:	2100      	movs	r1, #0
    c370:	e880 0042 	stmia.w	r0, {r1, r6}
    c374:	300c      	adds	r0, #12
    c376:	60a0      	str	r0, [r4, #8]
    c378:	f105 0268 	add.w	r2, r5, #104	; 0x68
    c37c:	f7ff fd65 	bl	be4a <memset>
    c380:	4620      	mov	r0, r4
    c382:	bd70      	pop	{r4, r5, r6, pc}

0000c384 <__sinit>:
    c384:	6983      	ldr	r3, [r0, #24]
    c386:	b510      	push	{r4, lr}
    c388:	4604      	mov	r4, r0
    c38a:	bb33      	cbnz	r3, c3da <__sinit+0x56>
    c38c:	6483      	str	r3, [r0, #72]	; 0x48
    c38e:	64c3      	str	r3, [r0, #76]	; 0x4c
    c390:	6503      	str	r3, [r0, #80]	; 0x50
    c392:	4b12      	ldr	r3, [pc, #72]	; (c3dc <__sinit+0x58>)
    c394:	4a12      	ldr	r2, [pc, #72]	; (c3e0 <__sinit+0x5c>)
    c396:	681b      	ldr	r3, [r3, #0]
    c398:	6282      	str	r2, [r0, #40]	; 0x28
    c39a:	4298      	cmp	r0, r3
    c39c:	bf04      	itt	eq
    c39e:	2301      	moveq	r3, #1
    c3a0:	6183      	streq	r3, [r0, #24]
    c3a2:	f000 f81f 	bl	c3e4 <__sfp>
    c3a6:	6060      	str	r0, [r4, #4]
    c3a8:	4620      	mov	r0, r4
    c3aa:	f000 f81b 	bl	c3e4 <__sfp>
    c3ae:	60a0      	str	r0, [r4, #8]
    c3b0:	4620      	mov	r0, r4
    c3b2:	f000 f817 	bl	c3e4 <__sfp>
    c3b6:	2104      	movs	r1, #4
    c3b8:	60e0      	str	r0, [r4, #12]
    c3ba:	2200      	movs	r2, #0
    c3bc:	6860      	ldr	r0, [r4, #4]
    c3be:	f7ff ffa7 	bl	c310 <std.isra.0>
    c3c2:	68a0      	ldr	r0, [r4, #8]
    c3c4:	2109      	movs	r1, #9
    c3c6:	2201      	movs	r2, #1
    c3c8:	f7ff ffa2 	bl	c310 <std.isra.0>
    c3cc:	68e0      	ldr	r0, [r4, #12]
    c3ce:	2112      	movs	r1, #18
    c3d0:	2202      	movs	r2, #2
    c3d2:	f7ff ff9d 	bl	c310 <std.isra.0>
    c3d6:	2301      	movs	r3, #1
    c3d8:	61a3      	str	r3, [r4, #24]
    c3da:	bd10      	pop	{r4, pc}
    c3dc:	00035c3c 	.word	0x00035c3c
    c3e0:	0000c305 	.word	0x0000c305

0000c3e4 <__sfp>:
    c3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c3e6:	4b1b      	ldr	r3, [pc, #108]	; (c454 <__sfp+0x70>)
    c3e8:	681e      	ldr	r6, [r3, #0]
    c3ea:	69b3      	ldr	r3, [r6, #24]
    c3ec:	4607      	mov	r7, r0
    c3ee:	b913      	cbnz	r3, c3f6 <__sfp+0x12>
    c3f0:	4630      	mov	r0, r6
    c3f2:	f7ff ffc7 	bl	c384 <__sinit>
    c3f6:	3648      	adds	r6, #72	; 0x48
    c3f8:	68b4      	ldr	r4, [r6, #8]
    c3fa:	6873      	ldr	r3, [r6, #4]
    c3fc:	3b01      	subs	r3, #1
    c3fe:	d404      	bmi.n	c40a <__sfp+0x26>
    c400:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    c404:	b175      	cbz	r5, c424 <__sfp+0x40>
    c406:	3468      	adds	r4, #104	; 0x68
    c408:	e7f8      	b.n	c3fc <__sfp+0x18>
    c40a:	6833      	ldr	r3, [r6, #0]
    c40c:	b92b      	cbnz	r3, c41a <__sfp+0x36>
    c40e:	4638      	mov	r0, r7
    c410:	2104      	movs	r1, #4
    c412:	f7ff ffa1 	bl	c358 <__sfmoreglue>
    c416:	6030      	str	r0, [r6, #0]
    c418:	b108      	cbz	r0, c41e <__sfp+0x3a>
    c41a:	6836      	ldr	r6, [r6, #0]
    c41c:	e7ec      	b.n	c3f8 <__sfp+0x14>
    c41e:	230c      	movs	r3, #12
    c420:	603b      	str	r3, [r7, #0]
    c422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c424:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c428:	81e3      	strh	r3, [r4, #14]
    c42a:	2301      	movs	r3, #1
    c42c:	81a3      	strh	r3, [r4, #12]
    c42e:	6665      	str	r5, [r4, #100]	; 0x64
    c430:	6025      	str	r5, [r4, #0]
    c432:	60a5      	str	r5, [r4, #8]
    c434:	6065      	str	r5, [r4, #4]
    c436:	6125      	str	r5, [r4, #16]
    c438:	6165      	str	r5, [r4, #20]
    c43a:	61a5      	str	r5, [r4, #24]
    c43c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    c440:	4629      	mov	r1, r5
    c442:	2208      	movs	r2, #8
    c444:	f7ff fd01 	bl	be4a <memset>
    c448:	6365      	str	r5, [r4, #52]	; 0x34
    c44a:	63a5      	str	r5, [r4, #56]	; 0x38
    c44c:	64a5      	str	r5, [r4, #72]	; 0x48
    c44e:	64e5      	str	r5, [r4, #76]	; 0x4c
    c450:	4620      	mov	r0, r4
    c452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c454:	00035c3c 	.word	0x00035c3c

0000c458 <_fwalk_reent>:
    c458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c45c:	4680      	mov	r8, r0
    c45e:	4689      	mov	r9, r1
    c460:	f100 0448 	add.w	r4, r0, #72	; 0x48
    c464:	2600      	movs	r6, #0
    c466:	b194      	cbz	r4, c48e <_fwalk_reent+0x36>
    c468:	68a5      	ldr	r5, [r4, #8]
    c46a:	6867      	ldr	r7, [r4, #4]
    c46c:	3f01      	subs	r7, #1
    c46e:	d40c      	bmi.n	c48a <_fwalk_reent+0x32>
    c470:	89ab      	ldrh	r3, [r5, #12]
    c472:	2b01      	cmp	r3, #1
    c474:	d907      	bls.n	c486 <_fwalk_reent+0x2e>
    c476:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    c47a:	3301      	adds	r3, #1
    c47c:	d003      	beq.n	c486 <_fwalk_reent+0x2e>
    c47e:	4640      	mov	r0, r8
    c480:	4629      	mov	r1, r5
    c482:	47c8      	blx	r9
    c484:	4306      	orrs	r6, r0
    c486:	3568      	adds	r5, #104	; 0x68
    c488:	e7f0      	b.n	c46c <_fwalk_reent+0x14>
    c48a:	6824      	ldr	r4, [r4, #0]
    c48c:	e7eb      	b.n	c466 <_fwalk_reent+0xe>
    c48e:	4630      	mov	r0, r6
    c490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000c494 <__smakebuf_r>:
    c494:	b5f0      	push	{r4, r5, r6, r7, lr}
    c496:	898b      	ldrh	r3, [r1, #12]
    c498:	079d      	lsls	r5, r3, #30
    c49a:	b091      	sub	sp, #68	; 0x44
    c49c:	4606      	mov	r6, r0
    c49e:	460c      	mov	r4, r1
    c4a0:	d426      	bmi.n	c4f0 <__smakebuf_r+0x5c>
    c4a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    c4a6:	2900      	cmp	r1, #0
    c4a8:	da09      	bge.n	c4be <__smakebuf_r+0x2a>
    c4aa:	89a3      	ldrh	r3, [r4, #12]
    c4ac:	f013 0f80 	tst.w	r3, #128	; 0x80
    c4b0:	f04f 0500 	mov.w	r5, #0
    c4b4:	bf14      	ite	ne
    c4b6:	2740      	movne	r7, #64	; 0x40
    c4b8:	f44f 6780 	moveq.w	r7, #1024	; 0x400
    c4bc:	e00d      	b.n	c4da <__smakebuf_r+0x46>
    c4be:	aa01      	add	r2, sp, #4
    c4c0:	f000 fcae 	bl	ce20 <_fstat_r>
    c4c4:	2800      	cmp	r0, #0
    c4c6:	dbf0      	blt.n	c4aa <__smakebuf_r+0x16>
    c4c8:	9d02      	ldr	r5, [sp, #8]
    c4ca:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
    c4ce:	f5a5 5100 	sub.w	r1, r5, #8192	; 0x2000
    c4d2:	424d      	negs	r5, r1
    c4d4:	414d      	adcs	r5, r1
    c4d6:	f44f 6780 	mov.w	r7, #1024	; 0x400
    c4da:	4630      	mov	r0, r6
    c4dc:	4639      	mov	r1, r7
    c4de:	f7ff fd01 	bl	bee4 <_malloc_r>
    c4e2:	b960      	cbnz	r0, c4fe <__smakebuf_r+0x6a>
    c4e4:	89a3      	ldrh	r3, [r4, #12]
    c4e6:	059a      	lsls	r2, r3, #22
    c4e8:	d41d      	bmi.n	c526 <__smakebuf_r+0x92>
    c4ea:	f043 0302 	orr.w	r3, r3, #2
    c4ee:	81a3      	strh	r3, [r4, #12]
    c4f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
    c4f4:	6023      	str	r3, [r4, #0]
    c4f6:	6123      	str	r3, [r4, #16]
    c4f8:	2301      	movs	r3, #1
    c4fa:	6163      	str	r3, [r4, #20]
    c4fc:	e013      	b.n	c526 <__smakebuf_r+0x92>
    c4fe:	4b0b      	ldr	r3, [pc, #44]	; (c52c <__smakebuf_r+0x98>)
    c500:	62b3      	str	r3, [r6, #40]	; 0x28
    c502:	89a3      	ldrh	r3, [r4, #12]
    c504:	6020      	str	r0, [r4, #0]
    c506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c50a:	81a3      	strh	r3, [r4, #12]
    c50c:	6120      	str	r0, [r4, #16]
    c50e:	6167      	str	r7, [r4, #20]
    c510:	b14d      	cbz	r5, c526 <__smakebuf_r+0x92>
    c512:	4630      	mov	r0, r6
    c514:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    c518:	f000 fc94 	bl	ce44 <_isatty_r>
    c51c:	b118      	cbz	r0, c526 <__smakebuf_r+0x92>
    c51e:	89a3      	ldrh	r3, [r4, #12]
    c520:	f043 0301 	orr.w	r3, r3, #1
    c524:	81a3      	strh	r3, [r4, #12]
    c526:	b011      	add	sp, #68	; 0x44
    c528:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c52a:	bf00      	nop
    c52c:	0000c305 	.word	0x0000c305

0000c530 <__ssputs_r>:
    c530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c534:	688e      	ldr	r6, [r1, #8]
    c536:	42b3      	cmp	r3, r6
    c538:	4682      	mov	sl, r0
    c53a:	460c      	mov	r4, r1
    c53c:	4690      	mov	r8, r2
    c53e:	4699      	mov	r9, r3
    c540:	d340      	bcc.n	c5c4 <__ssputs_r+0x94>
    c542:	898a      	ldrh	r2, [r1, #12]
    c544:	f412 6f90 	tst.w	r2, #1152	; 0x480
    c548:	d03a      	beq.n	c5c0 <__ssputs_r+0x90>
    c54a:	6825      	ldr	r5, [r4, #0]
    c54c:	6909      	ldr	r1, [r1, #16]
    c54e:	1a6f      	subs	r7, r5, r1
    c550:	6965      	ldr	r5, [r4, #20]
    c552:	2302      	movs	r3, #2
    c554:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    c558:	fb95 f5f3 	sdiv	r5, r5, r3
    c55c:	1c7b      	adds	r3, r7, #1
    c55e:	444b      	add	r3, r9
    c560:	429d      	cmp	r5, r3
    c562:	bf38      	it	cc
    c564:	461d      	movcc	r5, r3
    c566:	0553      	lsls	r3, r2, #21
    c568:	d50f      	bpl.n	c58a <__ssputs_r+0x5a>
    c56a:	4629      	mov	r1, r5
    c56c:	f7ff fcba 	bl	bee4 <_malloc_r>
    c570:	4606      	mov	r6, r0
    c572:	b198      	cbz	r0, c59c <__ssputs_r+0x6c>
    c574:	6921      	ldr	r1, [r4, #16]
    c576:	463a      	mov	r2, r7
    c578:	f7ff fc5c 	bl	be34 <memcpy>
    c57c:	89a3      	ldrh	r3, [r4, #12]
    c57e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    c582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c586:	81a3      	strh	r3, [r4, #12]
    c588:	e013      	b.n	c5b2 <__ssputs_r+0x82>
    c58a:	462a      	mov	r2, r5
    c58c:	f000 fca6 	bl	cedc <_realloc_r>
    c590:	4606      	mov	r6, r0
    c592:	b970      	cbnz	r0, c5b2 <__ssputs_r+0x82>
    c594:	4650      	mov	r0, sl
    c596:	6921      	ldr	r1, [r4, #16]
    c598:	f7ff fc60 	bl	be5c <_free_r>
    c59c:	230c      	movs	r3, #12
    c59e:	f8ca 3000 	str.w	r3, [sl]
    c5a2:	89a3      	ldrh	r3, [r4, #12]
    c5a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c5a8:	81a3      	strh	r3, [r4, #12]
    c5aa:	f04f 30ff 	mov.w	r0, #4294967295
    c5ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c5b2:	6126      	str	r6, [r4, #16]
    c5b4:	6165      	str	r5, [r4, #20]
    c5b6:	443e      	add	r6, r7
    c5b8:	1bed      	subs	r5, r5, r7
    c5ba:	6026      	str	r6, [r4, #0]
    c5bc:	60a5      	str	r5, [r4, #8]
    c5be:	464e      	mov	r6, r9
    c5c0:	45b1      	cmp	r9, r6
    c5c2:	d200      	bcs.n	c5c6 <__ssputs_r+0x96>
    c5c4:	464e      	mov	r6, r9
    c5c6:	4632      	mov	r2, r6
    c5c8:	6820      	ldr	r0, [r4, #0]
    c5ca:	4641      	mov	r1, r8
    c5cc:	f000 fc6b 	bl	cea6 <memmove>
    c5d0:	68a3      	ldr	r3, [r4, #8]
    c5d2:	1b9b      	subs	r3, r3, r6
    c5d4:	60a3      	str	r3, [r4, #8]
    c5d6:	6823      	ldr	r3, [r4, #0]
    c5d8:	441e      	add	r6, r3
    c5da:	6026      	str	r6, [r4, #0]
    c5dc:	2000      	movs	r0, #0
    c5de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0000c5e4 <_svfiprintf_r>:
    c5e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c5e8:	b09d      	sub	sp, #116	; 0x74
    c5ea:	4606      	mov	r6, r0
    c5ec:	9303      	str	r3, [sp, #12]
    c5ee:	898b      	ldrh	r3, [r1, #12]
    c5f0:	061c      	lsls	r4, r3, #24
    c5f2:	460d      	mov	r5, r1
    c5f4:	4690      	mov	r8, r2
    c5f6:	d50c      	bpl.n	c612 <_svfiprintf_r+0x2e>
    c5f8:	690b      	ldr	r3, [r1, #16]
    c5fa:	b953      	cbnz	r3, c612 <_svfiprintf_r+0x2e>
    c5fc:	2140      	movs	r1, #64	; 0x40
    c5fe:	f7ff fc71 	bl	bee4 <_malloc_r>
    c602:	6028      	str	r0, [r5, #0]
    c604:	6128      	str	r0, [r5, #16]
    c606:	b910      	cbnz	r0, c60e <_svfiprintf_r+0x2a>
    c608:	230c      	movs	r3, #12
    c60a:	6033      	str	r3, [r6, #0]
    c60c:	e0cc      	b.n	c7a8 <_svfiprintf_r+0x1c4>
    c60e:	2340      	movs	r3, #64	; 0x40
    c610:	616b      	str	r3, [r5, #20]
    c612:	2300      	movs	r3, #0
    c614:	9309      	str	r3, [sp, #36]	; 0x24
    c616:	2320      	movs	r3, #32
    c618:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    c61c:	2330      	movs	r3, #48	; 0x30
    c61e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    c622:	4643      	mov	r3, r8
    c624:	461c      	mov	r4, r3
    c626:	f813 2b01 	ldrb.w	r2, [r3], #1
    c62a:	b91a      	cbnz	r2, c634 <_svfiprintf_r+0x50>
    c62c:	ebb4 0908 	subs.w	r9, r4, r8
    c630:	d00f      	beq.n	c652 <_svfiprintf_r+0x6e>
    c632:	e002      	b.n	c63a <_svfiprintf_r+0x56>
    c634:	2a25      	cmp	r2, #37	; 0x25
    c636:	d1f5      	bne.n	c624 <_svfiprintf_r+0x40>
    c638:	e7f8      	b.n	c62c <_svfiprintf_r+0x48>
    c63a:	4630      	mov	r0, r6
    c63c:	4629      	mov	r1, r5
    c63e:	4642      	mov	r2, r8
    c640:	464b      	mov	r3, r9
    c642:	f7ff ff75 	bl	c530 <__ssputs_r>
    c646:	3001      	adds	r0, #1
    c648:	f000 80a9 	beq.w	c79e <_svfiprintf_r+0x1ba>
    c64c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c64e:	444b      	add	r3, r9
    c650:	9309      	str	r3, [sp, #36]	; 0x24
    c652:	7823      	ldrb	r3, [r4, #0]
    c654:	2b00      	cmp	r3, #0
    c656:	f000 80a2 	beq.w	c79e <_svfiprintf_r+0x1ba>
    c65a:	2300      	movs	r3, #0
    c65c:	f04f 32ff 	mov.w	r2, #4294967295
    c660:	9304      	str	r3, [sp, #16]
    c662:	9307      	str	r3, [sp, #28]
    c664:	9205      	str	r2, [sp, #20]
    c666:	9306      	str	r3, [sp, #24]
    c668:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    c66c:	931a      	str	r3, [sp, #104]	; 0x68
    c66e:	f104 0801 	add.w	r8, r4, #1
    c672:	4644      	mov	r4, r8
    c674:	f8df 9148 	ldr.w	r9, [pc, #328]	; c7c0 <_svfiprintf_r+0x1dc>
    c678:	7821      	ldrb	r1, [r4, #0]
    c67a:	4648      	mov	r0, r9
    c67c:	2205      	movs	r2, #5
    c67e:	f000 fc03 	bl	ce88 <memchr>
    c682:	f108 0801 	add.w	r8, r8, #1
    c686:	9b04      	ldr	r3, [sp, #16]
    c688:	b130      	cbz	r0, c698 <_svfiprintf_r+0xb4>
    c68a:	ebc9 0000 	rsb	r0, r9, r0
    c68e:	2201      	movs	r2, #1
    c690:	4082      	lsls	r2, r0
    c692:	4313      	orrs	r3, r2
    c694:	9304      	str	r3, [sp, #16]
    c696:	e7ec      	b.n	c672 <_svfiprintf_r+0x8e>
    c698:	06d8      	lsls	r0, r3, #27
    c69a:	bf44      	itt	mi
    c69c:	2220      	movmi	r2, #32
    c69e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    c6a2:	0719      	lsls	r1, r3, #28
    c6a4:	bf44      	itt	mi
    c6a6:	222b      	movmi	r2, #43	; 0x2b
    c6a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    c6ac:	7822      	ldrb	r2, [r4, #0]
    c6ae:	2a2a      	cmp	r2, #42	; 0x2a
    c6b0:	d002      	beq.n	c6b8 <_svfiprintf_r+0xd4>
    c6b2:	9907      	ldr	r1, [sp, #28]
    c6b4:	4623      	mov	r3, r4
    c6b6:	e00e      	b.n	c6d6 <_svfiprintf_r+0xf2>
    c6b8:	9a03      	ldr	r2, [sp, #12]
    c6ba:	1d11      	adds	r1, r2, #4
    c6bc:	6812      	ldr	r2, [r2, #0]
    c6be:	9103      	str	r1, [sp, #12]
    c6c0:	2a00      	cmp	r2, #0
    c6c2:	bfbb      	ittet	lt
    c6c4:	4252      	neglt	r2, r2
    c6c6:	f043 0302 	orrlt.w	r3, r3, #2
    c6ca:	9207      	strge	r2, [sp, #28]
    c6cc:	9207      	strlt	r2, [sp, #28]
    c6ce:	bfb8      	it	lt
    c6d0:	9304      	strlt	r3, [sp, #16]
    c6d2:	3401      	adds	r4, #1
    c6d4:	e00a      	b.n	c6ec <_svfiprintf_r+0x108>
    c6d6:	461c      	mov	r4, r3
    c6d8:	3301      	adds	r3, #1
    c6da:	7822      	ldrb	r2, [r4, #0]
    c6dc:	3a30      	subs	r2, #48	; 0x30
    c6de:	2a09      	cmp	r2, #9
    c6e0:	d803      	bhi.n	c6ea <_svfiprintf_r+0x106>
    c6e2:	200a      	movs	r0, #10
    c6e4:	fb00 2101 	mla	r1, r0, r1, r2
    c6e8:	e7f5      	b.n	c6d6 <_svfiprintf_r+0xf2>
    c6ea:	9107      	str	r1, [sp, #28]
    c6ec:	7823      	ldrb	r3, [r4, #0]
    c6ee:	2b2e      	cmp	r3, #46	; 0x2e
    c6f0:	d11a      	bne.n	c728 <_svfiprintf_r+0x144>
    c6f2:	7863      	ldrb	r3, [r4, #1]
    c6f4:	2b2a      	cmp	r3, #42	; 0x2a
    c6f6:	d10a      	bne.n	c70e <_svfiprintf_r+0x12a>
    c6f8:	9b03      	ldr	r3, [sp, #12]
    c6fa:	1d1a      	adds	r2, r3, #4
    c6fc:	681b      	ldr	r3, [r3, #0]
    c6fe:	9203      	str	r2, [sp, #12]
    c700:	2b00      	cmp	r3, #0
    c702:	bfb8      	it	lt
    c704:	f04f 33ff 	movlt.w	r3, #4294967295
    c708:	3402      	adds	r4, #2
    c70a:	9305      	str	r3, [sp, #20]
    c70c:	e00c      	b.n	c728 <_svfiprintf_r+0x144>
    c70e:	1c61      	adds	r1, r4, #1
    c710:	2200      	movs	r2, #0
    c712:	460c      	mov	r4, r1
    c714:	3101      	adds	r1, #1
    c716:	7823      	ldrb	r3, [r4, #0]
    c718:	3b30      	subs	r3, #48	; 0x30
    c71a:	2b09      	cmp	r3, #9
    c71c:	d803      	bhi.n	c726 <_svfiprintf_r+0x142>
    c71e:	200a      	movs	r0, #10
    c720:	fb00 3202 	mla	r2, r0, r2, r3
    c724:	e7f5      	b.n	c712 <_svfiprintf_r+0x12e>
    c726:	9205      	str	r2, [sp, #20]
    c728:	f8df 8098 	ldr.w	r8, [pc, #152]	; c7c4 <_svfiprintf_r+0x1e0>
    c72c:	7821      	ldrb	r1, [r4, #0]
    c72e:	4640      	mov	r0, r8
    c730:	2203      	movs	r2, #3
    c732:	f000 fba9 	bl	ce88 <memchr>
    c736:	b138      	cbz	r0, c748 <_svfiprintf_r+0x164>
    c738:	9a04      	ldr	r2, [sp, #16]
    c73a:	ebc8 0000 	rsb	r0, r8, r0
    c73e:	2340      	movs	r3, #64	; 0x40
    c740:	4083      	lsls	r3, r0
    c742:	4313      	orrs	r3, r2
    c744:	9304      	str	r3, [sp, #16]
    c746:	3401      	adds	r4, #1
    c748:	7821      	ldrb	r1, [r4, #0]
    c74a:	481a      	ldr	r0, [pc, #104]	; (c7b4 <_svfiprintf_r+0x1d0>)
    c74c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    c750:	2206      	movs	r2, #6
    c752:	f104 0801 	add.w	r8, r4, #1
    c756:	f000 fb97 	bl	ce88 <memchr>
    c75a:	b188      	cbz	r0, c780 <_svfiprintf_r+0x19c>
    c75c:	4b16      	ldr	r3, [pc, #88]	; (c7b8 <_svfiprintf_r+0x1d4>)
    c75e:	b933      	cbnz	r3, c76e <_svfiprintf_r+0x18a>
    c760:	9b03      	ldr	r3, [sp, #12]
    c762:	3307      	adds	r3, #7
    c764:	f023 0307 	bic.w	r3, r3, #7
    c768:	3308      	adds	r3, #8
    c76a:	9303      	str	r3, [sp, #12]
    c76c:	e013      	b.n	c796 <_svfiprintf_r+0x1b2>
    c76e:	ab03      	add	r3, sp, #12
    c770:	9300      	str	r3, [sp, #0]
    c772:	4630      	mov	r0, r6
    c774:	a904      	add	r1, sp, #16
    c776:	462a      	mov	r2, r5
    c778:	4b10      	ldr	r3, [pc, #64]	; (c7bc <_svfiprintf_r+0x1d8>)
    c77a:	f3af 8000 	nop.w
    c77e:	e007      	b.n	c790 <_svfiprintf_r+0x1ac>
    c780:	ab03      	add	r3, sp, #12
    c782:	9300      	str	r3, [sp, #0]
    c784:	4630      	mov	r0, r6
    c786:	a904      	add	r1, sp, #16
    c788:	462a      	mov	r2, r5
    c78a:	4b0c      	ldr	r3, [pc, #48]	; (c7bc <_svfiprintf_r+0x1d8>)
    c78c:	f000 f9c2 	bl	cb14 <_printf_i>
    c790:	1c42      	adds	r2, r0, #1
    c792:	4607      	mov	r7, r0
    c794:	d003      	beq.n	c79e <_svfiprintf_r+0x1ba>
    c796:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c798:	443b      	add	r3, r7
    c79a:	9309      	str	r3, [sp, #36]	; 0x24
    c79c:	e741      	b.n	c622 <_svfiprintf_r+0x3e>
    c79e:	89ab      	ldrh	r3, [r5, #12]
    c7a0:	065b      	lsls	r3, r3, #25
    c7a2:	d401      	bmi.n	c7a8 <_svfiprintf_r+0x1c4>
    c7a4:	9809      	ldr	r0, [sp, #36]	; 0x24
    c7a6:	e001      	b.n	c7ac <_svfiprintf_r+0x1c8>
    c7a8:	f04f 30ff 	mov.w	r0, #4294967295
    c7ac:	b01d      	add	sp, #116	; 0x74
    c7ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c7b2:	bf00      	nop
    c7b4:	00035caa 	.word	0x00035caa
    c7b8:	00000000 	.word	0x00000000
    c7bc:	0000c531 	.word	0x0000c531
    c7c0:	00035ca0 	.word	0x00035ca0
    c7c4:	00035ca6 	.word	0x00035ca6

0000c7c8 <__sfputc_r>:
    c7c8:	6893      	ldr	r3, [r2, #8]
    c7ca:	3b01      	subs	r3, #1
    c7cc:	2b00      	cmp	r3, #0
    c7ce:	b510      	push	{r4, lr}
    c7d0:	6093      	str	r3, [r2, #8]
    c7d2:	da09      	bge.n	c7e8 <__sfputc_r+0x20>
    c7d4:	6994      	ldr	r4, [r2, #24]
    c7d6:	42a3      	cmp	r3, r4
    c7d8:	db02      	blt.n	c7e0 <__sfputc_r+0x18>
    c7da:	b2cb      	uxtb	r3, r1
    c7dc:	2b0a      	cmp	r3, #10
    c7de:	d103      	bne.n	c7e8 <__sfputc_r+0x20>
    c7e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c7e4:	f7ff bc20 	b.w	c028 <__swbuf_r>
    c7e8:	6813      	ldr	r3, [r2, #0]
    c7ea:	1c58      	adds	r0, r3, #1
    c7ec:	6010      	str	r0, [r2, #0]
    c7ee:	7019      	strb	r1, [r3, #0]
    c7f0:	b2c8      	uxtb	r0, r1
    c7f2:	bd10      	pop	{r4, pc}

0000c7f4 <__sfputs_r>:
    c7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c7f6:	4606      	mov	r6, r0
    c7f8:	460f      	mov	r7, r1
    c7fa:	4614      	mov	r4, r2
    c7fc:	18d5      	adds	r5, r2, r3
    c7fe:	42ac      	cmp	r4, r5
    c800:	d008      	beq.n	c814 <__sfputs_r+0x20>
    c802:	4630      	mov	r0, r6
    c804:	f814 1b01 	ldrb.w	r1, [r4], #1
    c808:	463a      	mov	r2, r7
    c80a:	f7ff ffdd 	bl	c7c8 <__sfputc_r>
    c80e:	1c43      	adds	r3, r0, #1
    c810:	d1f5      	bne.n	c7fe <__sfputs_r+0xa>
    c812:	e000      	b.n	c816 <__sfputs_r+0x22>
    c814:	2000      	movs	r0, #0
    c816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000c818 <_vfiprintf_r>:
    c818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c81c:	b09d      	sub	sp, #116	; 0x74
    c81e:	460d      	mov	r5, r1
    c820:	4690      	mov	r8, r2
    c822:	9303      	str	r3, [sp, #12]
    c824:	4606      	mov	r6, r0
    c826:	b118      	cbz	r0, c830 <_vfiprintf_r+0x18>
    c828:	6983      	ldr	r3, [r0, #24]
    c82a:	b90b      	cbnz	r3, c830 <_vfiprintf_r+0x18>
    c82c:	f7ff fdaa 	bl	c384 <__sinit>
    c830:	4b75      	ldr	r3, [pc, #468]	; (ca08 <_vfiprintf_r+0x1f0>)
    c832:	429d      	cmp	r5, r3
    c834:	d101      	bne.n	c83a <_vfiprintf_r+0x22>
    c836:	6875      	ldr	r5, [r6, #4]
    c838:	e008      	b.n	c84c <_vfiprintf_r+0x34>
    c83a:	4b74      	ldr	r3, [pc, #464]	; (ca0c <_vfiprintf_r+0x1f4>)
    c83c:	429d      	cmp	r5, r3
    c83e:	d101      	bne.n	c844 <_vfiprintf_r+0x2c>
    c840:	68b5      	ldr	r5, [r6, #8]
    c842:	e003      	b.n	c84c <_vfiprintf_r+0x34>
    c844:	4b72      	ldr	r3, [pc, #456]	; (ca10 <_vfiprintf_r+0x1f8>)
    c846:	429d      	cmp	r5, r3
    c848:	bf08      	it	eq
    c84a:	68f5      	ldreq	r5, [r6, #12]
    c84c:	89ab      	ldrh	r3, [r5, #12]
    c84e:	071c      	lsls	r4, r3, #28
    c850:	d50a      	bpl.n	c868 <_vfiprintf_r+0x50>
    c852:	692b      	ldr	r3, [r5, #16]
    c854:	b143      	cbz	r3, c868 <_vfiprintf_r+0x50>
    c856:	2300      	movs	r3, #0
    c858:	9309      	str	r3, [sp, #36]	; 0x24
    c85a:	2320      	movs	r3, #32
    c85c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    c860:	2330      	movs	r3, #48	; 0x30
    c862:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    c866:	e041      	b.n	c8ec <_vfiprintf_r+0xd4>
    c868:	4630      	mov	r0, r6
    c86a:	4629      	mov	r1, r5
    c86c:	f7ff fc30 	bl	c0d0 <__swsetup_r>
    c870:	2800      	cmp	r0, #0
    c872:	d0f0      	beq.n	c856 <_vfiprintf_r+0x3e>
    c874:	f04f 30ff 	mov.w	r0, #4294967295
    c878:	e0c2      	b.n	ca00 <_vfiprintf_r+0x1e8>
    c87a:	9a03      	ldr	r2, [sp, #12]
    c87c:	1d11      	adds	r1, r2, #4
    c87e:	6812      	ldr	r2, [r2, #0]
    c880:	9103      	str	r1, [sp, #12]
    c882:	2a00      	cmp	r2, #0
    c884:	bfbb      	ittet	lt
    c886:	4252      	neglt	r2, r2
    c888:	f043 0302 	orrlt.w	r3, r3, #2
    c88c:	9207      	strge	r2, [sp, #28]
    c88e:	9207      	strlt	r2, [sp, #28]
    c890:	bfb8      	it	lt
    c892:	9304      	strlt	r3, [sp, #16]
    c894:	3401      	adds	r4, #1
    c896:	7823      	ldrb	r3, [r4, #0]
    c898:	2b2e      	cmp	r3, #46	; 0x2e
    c89a:	d07b      	beq.n	c994 <_vfiprintf_r+0x17c>
    c89c:	f8df 8180 	ldr.w	r8, [pc, #384]	; ca20 <_vfiprintf_r+0x208>
    c8a0:	7821      	ldrb	r1, [r4, #0]
    c8a2:	4640      	mov	r0, r8
    c8a4:	2203      	movs	r2, #3
    c8a6:	f000 faef 	bl	ce88 <memchr>
    c8aa:	b138      	cbz	r0, c8bc <_vfiprintf_r+0xa4>
    c8ac:	9a04      	ldr	r2, [sp, #16]
    c8ae:	ebc8 0000 	rsb	r0, r8, r0
    c8b2:	2340      	movs	r3, #64	; 0x40
    c8b4:	4083      	lsls	r3, r0
    c8b6:	4313      	orrs	r3, r2
    c8b8:	9304      	str	r3, [sp, #16]
    c8ba:	3401      	adds	r4, #1
    c8bc:	7821      	ldrb	r1, [r4, #0]
    c8be:	4855      	ldr	r0, [pc, #340]	; (ca14 <_vfiprintf_r+0x1fc>)
    c8c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    c8c4:	2206      	movs	r2, #6
    c8c6:	f104 0801 	add.w	r8, r4, #1
    c8ca:	f000 fadd 	bl	ce88 <memchr>
    c8ce:	2800      	cmp	r0, #0
    c8d0:	f000 8085 	beq.w	c9de <_vfiprintf_r+0x1c6>
    c8d4:	4b50      	ldr	r3, [pc, #320]	; (ca18 <_vfiprintf_r+0x200>)
    c8d6:	2b00      	cmp	r3, #0
    c8d8:	d178      	bne.n	c9cc <_vfiprintf_r+0x1b4>
    c8da:	9b03      	ldr	r3, [sp, #12]
    c8dc:	3307      	adds	r3, #7
    c8de:	f023 0307 	bic.w	r3, r3, #7
    c8e2:	3308      	adds	r3, #8
    c8e4:	9303      	str	r3, [sp, #12]
    c8e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c8e8:	443b      	add	r3, r7
    c8ea:	9309      	str	r3, [sp, #36]	; 0x24
    c8ec:	4643      	mov	r3, r8
    c8ee:	461c      	mov	r4, r3
    c8f0:	f813 2b01 	ldrb.w	r2, [r3], #1
    c8f4:	b91a      	cbnz	r2, c8fe <_vfiprintf_r+0xe6>
    c8f6:	ebb4 0908 	subs.w	r9, r4, r8
    c8fa:	d00e      	beq.n	c91a <_vfiprintf_r+0x102>
    c8fc:	e002      	b.n	c904 <_vfiprintf_r+0xec>
    c8fe:	2a25      	cmp	r2, #37	; 0x25
    c900:	d1f5      	bne.n	c8ee <_vfiprintf_r+0xd6>
    c902:	e7f8      	b.n	c8f6 <_vfiprintf_r+0xde>
    c904:	4630      	mov	r0, r6
    c906:	4629      	mov	r1, r5
    c908:	4642      	mov	r2, r8
    c90a:	464b      	mov	r3, r9
    c90c:	f7ff ff72 	bl	c7f4 <__sfputs_r>
    c910:	3001      	adds	r0, #1
    c912:	d070      	beq.n	c9f6 <_vfiprintf_r+0x1de>
    c914:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c916:	444b      	add	r3, r9
    c918:	9309      	str	r3, [sp, #36]	; 0x24
    c91a:	7823      	ldrb	r3, [r4, #0]
    c91c:	2b00      	cmp	r3, #0
    c91e:	d06a      	beq.n	c9f6 <_vfiprintf_r+0x1de>
    c920:	2300      	movs	r3, #0
    c922:	f04f 32ff 	mov.w	r2, #4294967295
    c926:	9304      	str	r3, [sp, #16]
    c928:	9307      	str	r3, [sp, #28]
    c92a:	9205      	str	r2, [sp, #20]
    c92c:	9306      	str	r3, [sp, #24]
    c92e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    c932:	931a      	str	r3, [sp, #104]	; 0x68
    c934:	f104 0801 	add.w	r8, r4, #1
    c938:	4644      	mov	r4, r8
    c93a:	f8df 90e8 	ldr.w	r9, [pc, #232]	; ca24 <_vfiprintf_r+0x20c>
    c93e:	7821      	ldrb	r1, [r4, #0]
    c940:	4648      	mov	r0, r9
    c942:	2205      	movs	r2, #5
    c944:	f000 faa0 	bl	ce88 <memchr>
    c948:	f108 0801 	add.w	r8, r8, #1
    c94c:	9b04      	ldr	r3, [sp, #16]
    c94e:	b130      	cbz	r0, c95e <_vfiprintf_r+0x146>
    c950:	ebc9 0000 	rsb	r0, r9, r0
    c954:	2201      	movs	r2, #1
    c956:	4082      	lsls	r2, r0
    c958:	4313      	orrs	r3, r2
    c95a:	9304      	str	r3, [sp, #16]
    c95c:	e7ec      	b.n	c938 <_vfiprintf_r+0x120>
    c95e:	06d8      	lsls	r0, r3, #27
    c960:	bf44      	itt	mi
    c962:	2220      	movmi	r2, #32
    c964:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    c968:	0719      	lsls	r1, r3, #28
    c96a:	bf44      	itt	mi
    c96c:	222b      	movmi	r2, #43	; 0x2b
    c96e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    c972:	7822      	ldrb	r2, [r4, #0]
    c974:	2a2a      	cmp	r2, #42	; 0x2a
    c976:	d080      	beq.n	c87a <_vfiprintf_r+0x62>
    c978:	9907      	ldr	r1, [sp, #28]
    c97a:	4623      	mov	r3, r4
    c97c:	461c      	mov	r4, r3
    c97e:	3301      	adds	r3, #1
    c980:	7822      	ldrb	r2, [r4, #0]
    c982:	3a30      	subs	r2, #48	; 0x30
    c984:	2a09      	cmp	r2, #9
    c986:	d803      	bhi.n	c990 <_vfiprintf_r+0x178>
    c988:	200a      	movs	r0, #10
    c98a:	fb00 2101 	mla	r1, r0, r1, r2
    c98e:	e7f5      	b.n	c97c <_vfiprintf_r+0x164>
    c990:	9107      	str	r1, [sp, #28]
    c992:	e780      	b.n	c896 <_vfiprintf_r+0x7e>
    c994:	7863      	ldrb	r3, [r4, #1]
    c996:	2b2a      	cmp	r3, #42	; 0x2a
    c998:	d10a      	bne.n	c9b0 <_vfiprintf_r+0x198>
    c99a:	9b03      	ldr	r3, [sp, #12]
    c99c:	1d1a      	adds	r2, r3, #4
    c99e:	681b      	ldr	r3, [r3, #0]
    c9a0:	9203      	str	r2, [sp, #12]
    c9a2:	2b00      	cmp	r3, #0
    c9a4:	bfb8      	it	lt
    c9a6:	f04f 33ff 	movlt.w	r3, #4294967295
    c9aa:	3402      	adds	r4, #2
    c9ac:	9305      	str	r3, [sp, #20]
    c9ae:	e775      	b.n	c89c <_vfiprintf_r+0x84>
    c9b0:	1c61      	adds	r1, r4, #1
    c9b2:	2200      	movs	r2, #0
    c9b4:	460c      	mov	r4, r1
    c9b6:	3101      	adds	r1, #1
    c9b8:	7823      	ldrb	r3, [r4, #0]
    c9ba:	3b30      	subs	r3, #48	; 0x30
    c9bc:	2b09      	cmp	r3, #9
    c9be:	d803      	bhi.n	c9c8 <_vfiprintf_r+0x1b0>
    c9c0:	200a      	movs	r0, #10
    c9c2:	fb00 3202 	mla	r2, r0, r2, r3
    c9c6:	e7f5      	b.n	c9b4 <_vfiprintf_r+0x19c>
    c9c8:	9205      	str	r2, [sp, #20]
    c9ca:	e767      	b.n	c89c <_vfiprintf_r+0x84>
    c9cc:	ab03      	add	r3, sp, #12
    c9ce:	9300      	str	r3, [sp, #0]
    c9d0:	4630      	mov	r0, r6
    c9d2:	a904      	add	r1, sp, #16
    c9d4:	462a      	mov	r2, r5
    c9d6:	4b11      	ldr	r3, [pc, #68]	; (ca1c <_vfiprintf_r+0x204>)
    c9d8:	f3af 8000 	nop.w
    c9dc:	e007      	b.n	c9ee <_vfiprintf_r+0x1d6>
    c9de:	ab03      	add	r3, sp, #12
    c9e0:	9300      	str	r3, [sp, #0]
    c9e2:	4630      	mov	r0, r6
    c9e4:	a904      	add	r1, sp, #16
    c9e6:	462a      	mov	r2, r5
    c9e8:	4b0c      	ldr	r3, [pc, #48]	; (ca1c <_vfiprintf_r+0x204>)
    c9ea:	f000 f893 	bl	cb14 <_printf_i>
    c9ee:	1c42      	adds	r2, r0, #1
    c9f0:	4607      	mov	r7, r0
    c9f2:	f47f af78 	bne.w	c8e6 <_vfiprintf_r+0xce>
    c9f6:	89ab      	ldrh	r3, [r5, #12]
    c9f8:	065b      	lsls	r3, r3, #25
    c9fa:	f53f af3b 	bmi.w	c874 <_vfiprintf_r+0x5c>
    c9fe:	9809      	ldr	r0, [sp, #36]	; 0x24
    ca00:	b01d      	add	sp, #116	; 0x74
    ca02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ca06:	bf00      	nop
    ca08:	00035c40 	.word	0x00035c40
    ca0c:	00035c60 	.word	0x00035c60
    ca10:	00035c80 	.word	0x00035c80
    ca14:	00035caa 	.word	0x00035caa
    ca18:	00000000 	.word	0x00000000
    ca1c:	0000c7f5 	.word	0x0000c7f5
    ca20:	00035ca6 	.word	0x00035ca6
    ca24:	00035ca0 	.word	0x00035ca0

0000ca28 <_printf_common>:
    ca28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ca2c:	4691      	mov	r9, r2
    ca2e:	461f      	mov	r7, r3
    ca30:	688a      	ldr	r2, [r1, #8]
    ca32:	690b      	ldr	r3, [r1, #16]
    ca34:	f8dd 8020 	ldr.w	r8, [sp, #32]
    ca38:	4293      	cmp	r3, r2
    ca3a:	bfb8      	it	lt
    ca3c:	4613      	movlt	r3, r2
    ca3e:	f8c9 3000 	str.w	r3, [r9]
    ca42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    ca46:	4606      	mov	r6, r0
    ca48:	460c      	mov	r4, r1
    ca4a:	b112      	cbz	r2, ca52 <_printf_common+0x2a>
    ca4c:	3301      	adds	r3, #1
    ca4e:	f8c9 3000 	str.w	r3, [r9]
    ca52:	6823      	ldr	r3, [r4, #0]
    ca54:	0699      	lsls	r1, r3, #26
    ca56:	bf42      	ittt	mi
    ca58:	f8d9 3000 	ldrmi.w	r3, [r9]
    ca5c:	3302      	addmi	r3, #2
    ca5e:	f8c9 3000 	strmi.w	r3, [r9]
    ca62:	6825      	ldr	r5, [r4, #0]
    ca64:	f015 0506 	ands.w	r5, r5, #6
    ca68:	d01c      	beq.n	caa4 <_printf_common+0x7c>
    ca6a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    ca6e:	6822      	ldr	r2, [r4, #0]
    ca70:	3300      	adds	r3, #0
    ca72:	bf18      	it	ne
    ca74:	2301      	movne	r3, #1
    ca76:	0692      	lsls	r2, r2, #26
    ca78:	d51f      	bpl.n	caba <_printf_common+0x92>
    ca7a:	18e1      	adds	r1, r4, r3
    ca7c:	1c5a      	adds	r2, r3, #1
    ca7e:	2030      	movs	r0, #48	; 0x30
    ca80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    ca84:	4422      	add	r2, r4
    ca86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    ca8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    ca8e:	3302      	adds	r3, #2
    ca90:	e013      	b.n	caba <_printf_common+0x92>
    ca92:	4630      	mov	r0, r6
    ca94:	4639      	mov	r1, r7
    ca96:	f104 0219 	add.w	r2, r4, #25
    ca9a:	2301      	movs	r3, #1
    ca9c:	47c0      	blx	r8
    ca9e:	3001      	adds	r0, #1
    caa0:	d007      	beq.n	cab2 <_printf_common+0x8a>
    caa2:	3501      	adds	r5, #1
    caa4:	68e3      	ldr	r3, [r4, #12]
    caa6:	f8d9 2000 	ldr.w	r2, [r9]
    caaa:	1a9b      	subs	r3, r3, r2
    caac:	429d      	cmp	r5, r3
    caae:	dbf0      	blt.n	ca92 <_printf_common+0x6a>
    cab0:	e7db      	b.n	ca6a <_printf_common+0x42>
    cab2:	f04f 30ff 	mov.w	r0, #4294967295
    cab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    caba:	4630      	mov	r0, r6
    cabc:	4639      	mov	r1, r7
    cabe:	f104 0243 	add.w	r2, r4, #67	; 0x43
    cac2:	47c0      	blx	r8
    cac4:	3001      	adds	r0, #1
    cac6:	d0f4      	beq.n	cab2 <_printf_common+0x8a>
    cac8:	6822      	ldr	r2, [r4, #0]
    caca:	f8d9 5000 	ldr.w	r5, [r9]
    cace:	68e3      	ldr	r3, [r4, #12]
    cad0:	f002 0206 	and.w	r2, r2, #6
    cad4:	2a04      	cmp	r2, #4
    cad6:	bf08      	it	eq
    cad8:	1b5d      	subeq	r5, r3, r5
    cada:	6922      	ldr	r2, [r4, #16]
    cadc:	68a3      	ldr	r3, [r4, #8]
    cade:	bf0c      	ite	eq
    cae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    cae4:	2500      	movne	r5, #0
    cae6:	4293      	cmp	r3, r2
    cae8:	bfc4      	itt	gt
    caea:	1a9b      	subgt	r3, r3, r2
    caec:	18ed      	addgt	r5, r5, r3
    caee:	f04f 0900 	mov.w	r9, #0
    caf2:	45a9      	cmp	r9, r5
    caf4:	da0a      	bge.n	cb0c <_printf_common+0xe4>
    caf6:	4630      	mov	r0, r6
    caf8:	4639      	mov	r1, r7
    cafa:	f104 021a 	add.w	r2, r4, #26
    cafe:	2301      	movs	r3, #1
    cb00:	47c0      	blx	r8
    cb02:	3001      	adds	r0, #1
    cb04:	d0d5      	beq.n	cab2 <_printf_common+0x8a>
    cb06:	f109 0901 	add.w	r9, r9, #1
    cb0a:	e7f2      	b.n	caf2 <_printf_common+0xca>
    cb0c:	2000      	movs	r0, #0
    cb0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0000cb14 <_printf_i>:
    cb14:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    cb18:	460c      	mov	r4, r1
    cb1a:	4617      	mov	r7, r2
    cb1c:	7e22      	ldrb	r2, [r4, #24]
    cb1e:	2a6e      	cmp	r2, #110	; 0x6e
    cb20:	4698      	mov	r8, r3
    cb22:	4606      	mov	r6, r0
    cb24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cb26:	f101 0143 	add.w	r1, r1, #67	; 0x43
    cb2a:	f000 80af 	beq.w	cc8c <_printf_i+0x178>
    cb2e:	d812      	bhi.n	cb56 <_printf_i+0x42>
    cb30:	2a63      	cmp	r2, #99	; 0x63
    cb32:	d023      	beq.n	cb7c <_printf_i+0x68>
    cb34:	d80a      	bhi.n	cb4c <_printf_i+0x38>
    cb36:	2a00      	cmp	r2, #0
    cb38:	f000 80bc 	beq.w	ccb4 <_printf_i+0x1a0>
    cb3c:	2a58      	cmp	r2, #88	; 0x58
    cb3e:	f040 80cb 	bne.w	ccd8 <_printf_i+0x1c4>
    cb42:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    cb46:	f8df e204 	ldr.w	lr, [pc, #516]	; cd4c <_printf_i+0x238>
    cb4a:	e057      	b.n	cbfc <_printf_i+0xe8>
    cb4c:	2a64      	cmp	r2, #100	; 0x64
    cb4e:	d01e      	beq.n	cb8e <_printf_i+0x7a>
    cb50:	2a69      	cmp	r2, #105	; 0x69
    cb52:	d01c      	beq.n	cb8e <_printf_i+0x7a>
    cb54:	e0c0      	b.n	ccd8 <_printf_i+0x1c4>
    cb56:	2a73      	cmp	r2, #115	; 0x73
    cb58:	f000 80b0 	beq.w	ccbc <_printf_i+0x1a8>
    cb5c:	d809      	bhi.n	cb72 <_printf_i+0x5e>
    cb5e:	2a6f      	cmp	r2, #111	; 0x6f
    cb60:	d02e      	beq.n	cbc0 <_printf_i+0xac>
    cb62:	2a70      	cmp	r2, #112	; 0x70
    cb64:	f040 80b8 	bne.w	ccd8 <_printf_i+0x1c4>
    cb68:	6822      	ldr	r2, [r4, #0]
    cb6a:	f042 0220 	orr.w	r2, r2, #32
    cb6e:	6022      	str	r2, [r4, #0]
    cb70:	e03f      	b.n	cbf2 <_printf_i+0xde>
    cb72:	2a75      	cmp	r2, #117	; 0x75
    cb74:	d024      	beq.n	cbc0 <_printf_i+0xac>
    cb76:	2a78      	cmp	r2, #120	; 0x78
    cb78:	d03b      	beq.n	cbf2 <_printf_i+0xde>
    cb7a:	e0ad      	b.n	ccd8 <_printf_i+0x1c4>
    cb7c:	681a      	ldr	r2, [r3, #0]
    cb7e:	1d11      	adds	r1, r2, #4
    cb80:	6019      	str	r1, [r3, #0]
    cb82:	6813      	ldr	r3, [r2, #0]
    cb84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    cb88:	f104 0542 	add.w	r5, r4, #66	; 0x42
    cb8c:	e0a8      	b.n	cce0 <_printf_i+0x1cc>
    cb8e:	6820      	ldr	r0, [r4, #0]
    cb90:	681a      	ldr	r2, [r3, #0]
    cb92:	f010 0f80 	tst.w	r0, #128	; 0x80
    cb96:	d002      	beq.n	cb9e <_printf_i+0x8a>
    cb98:	1d10      	adds	r0, r2, #4
    cb9a:	6018      	str	r0, [r3, #0]
    cb9c:	e008      	b.n	cbb0 <_printf_i+0x9c>
    cb9e:	f010 0f40 	tst.w	r0, #64	; 0x40
    cba2:	f102 0004 	add.w	r0, r2, #4
    cba6:	6018      	str	r0, [r3, #0]
    cba8:	d002      	beq.n	cbb0 <_printf_i+0x9c>
    cbaa:	f9b2 3000 	ldrsh.w	r3, [r2]
    cbae:	e000      	b.n	cbb2 <_printf_i+0x9e>
    cbb0:	6813      	ldr	r3, [r2, #0]
    cbb2:	2b00      	cmp	r3, #0
    cbb4:	da3e      	bge.n	cc34 <_printf_i+0x120>
    cbb6:	222d      	movs	r2, #45	; 0x2d
    cbb8:	425b      	negs	r3, r3
    cbba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    cbbe:	e039      	b.n	cc34 <_printf_i+0x120>
    cbc0:	6820      	ldr	r0, [r4, #0]
    cbc2:	681a      	ldr	r2, [r3, #0]
    cbc4:	f010 0f80 	tst.w	r0, #128	; 0x80
    cbc8:	d002      	beq.n	cbd0 <_printf_i+0xbc>
    cbca:	1d10      	adds	r0, r2, #4
    cbcc:	6018      	str	r0, [r3, #0]
    cbce:	e007      	b.n	cbe0 <_printf_i+0xcc>
    cbd0:	f010 0f40 	tst.w	r0, #64	; 0x40
    cbd4:	f102 0004 	add.w	r0, r2, #4
    cbd8:	6018      	str	r0, [r3, #0]
    cbda:	d001      	beq.n	cbe0 <_printf_i+0xcc>
    cbdc:	8813      	ldrh	r3, [r2, #0]
    cbde:	e000      	b.n	cbe2 <_printf_i+0xce>
    cbe0:	6813      	ldr	r3, [r2, #0]
    cbe2:	7e22      	ldrb	r2, [r4, #24]
    cbe4:	f8df e164 	ldr.w	lr, [pc, #356]	; cd4c <_printf_i+0x238>
    cbe8:	2a6f      	cmp	r2, #111	; 0x6f
    cbea:	bf0c      	ite	eq
    cbec:	2208      	moveq	r2, #8
    cbee:	220a      	movne	r2, #10
    cbf0:	e01c      	b.n	cc2c <_printf_i+0x118>
    cbf2:	2278      	movs	r2, #120	; 0x78
    cbf4:	f8df e158 	ldr.w	lr, [pc, #344]	; cd50 <_printf_i+0x23c>
    cbf8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    cbfc:	6822      	ldr	r2, [r4, #0]
    cbfe:	6818      	ldr	r0, [r3, #0]
    cc00:	f012 0f80 	tst.w	r2, #128	; 0x80
    cc04:	f100 0504 	add.w	r5, r0, #4
    cc08:	601d      	str	r5, [r3, #0]
    cc0a:	d103      	bne.n	cc14 <_printf_i+0x100>
    cc0c:	0655      	lsls	r5, r2, #25
    cc0e:	d501      	bpl.n	cc14 <_printf_i+0x100>
    cc10:	8803      	ldrh	r3, [r0, #0]
    cc12:	e000      	b.n	cc16 <_printf_i+0x102>
    cc14:	6803      	ldr	r3, [r0, #0]
    cc16:	07d0      	lsls	r0, r2, #31
    cc18:	bf44      	itt	mi
    cc1a:	f042 0220 	orrmi.w	r2, r2, #32
    cc1e:	6022      	strmi	r2, [r4, #0]
    cc20:	b91b      	cbnz	r3, cc2a <_printf_i+0x116>
    cc22:	6822      	ldr	r2, [r4, #0]
    cc24:	f022 0220 	bic.w	r2, r2, #32
    cc28:	6022      	str	r2, [r4, #0]
    cc2a:	2210      	movs	r2, #16
    cc2c:	2000      	movs	r0, #0
    cc2e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    cc32:	e002      	b.n	cc3a <_printf_i+0x126>
    cc34:	f8df e114 	ldr.w	lr, [pc, #276]	; cd4c <_printf_i+0x238>
    cc38:	220a      	movs	r2, #10
    cc3a:	6865      	ldr	r5, [r4, #4]
    cc3c:	60a5      	str	r5, [r4, #8]
    cc3e:	2d00      	cmp	r5, #0
    cc40:	bfa2      	ittt	ge
    cc42:	6820      	ldrge	r0, [r4, #0]
    cc44:	f020 0004 	bicge.w	r0, r0, #4
    cc48:	6020      	strge	r0, [r4, #0]
    cc4a:	b903      	cbnz	r3, cc4e <_printf_i+0x13a>
    cc4c:	b165      	cbz	r5, cc68 <_printf_i+0x154>
    cc4e:	460d      	mov	r5, r1
    cc50:	fbb3 f0f2 	udiv	r0, r3, r2
    cc54:	fb02 3310 	mls	r3, r2, r0, r3
    cc58:	f81e 3003 	ldrb.w	r3, [lr, r3]
    cc5c:	f805 3d01 	strb.w	r3, [r5, #-1]!
    cc60:	4603      	mov	r3, r0
    cc62:	2800      	cmp	r0, #0
    cc64:	d1f4      	bne.n	cc50 <_printf_i+0x13c>
    cc66:	e000      	b.n	cc6a <_printf_i+0x156>
    cc68:	460d      	mov	r5, r1
    cc6a:	2a08      	cmp	r2, #8
    cc6c:	d10b      	bne.n	cc86 <_printf_i+0x172>
    cc6e:	6823      	ldr	r3, [r4, #0]
    cc70:	07da      	lsls	r2, r3, #31
    cc72:	d508      	bpl.n	cc86 <_printf_i+0x172>
    cc74:	6923      	ldr	r3, [r4, #16]
    cc76:	6862      	ldr	r2, [r4, #4]
    cc78:	429a      	cmp	r2, r3
    cc7a:	bfde      	ittt	le
    cc7c:	2330      	movle	r3, #48	; 0x30
    cc7e:	f805 3c01 	strble.w	r3, [r5, #-1]
    cc82:	f105 35ff 	addle.w	r5, r5, #4294967295
    cc86:	1b49      	subs	r1, r1, r5
    cc88:	6121      	str	r1, [r4, #16]
    cc8a:	e02e      	b.n	ccea <_printf_i+0x1d6>
    cc8c:	6825      	ldr	r5, [r4, #0]
    cc8e:	681a      	ldr	r2, [r3, #0]
    cc90:	6960      	ldr	r0, [r4, #20]
    cc92:	f015 0f80 	tst.w	r5, #128	; 0x80
    cc96:	d003      	beq.n	cca0 <_printf_i+0x18c>
    cc98:	1d15      	adds	r5, r2, #4
    cc9a:	601d      	str	r5, [r3, #0]
    cc9c:	6813      	ldr	r3, [r2, #0]
    cc9e:	e008      	b.n	ccb2 <_printf_i+0x19e>
    cca0:	f015 0f40 	tst.w	r5, #64	; 0x40
    cca4:	f102 0504 	add.w	r5, r2, #4
    cca8:	601d      	str	r5, [r3, #0]
    ccaa:	6813      	ldr	r3, [r2, #0]
    ccac:	d001      	beq.n	ccb2 <_printf_i+0x19e>
    ccae:	8018      	strh	r0, [r3, #0]
    ccb0:	e000      	b.n	ccb4 <_printf_i+0x1a0>
    ccb2:	6018      	str	r0, [r3, #0]
    ccb4:	2300      	movs	r3, #0
    ccb6:	6123      	str	r3, [r4, #16]
    ccb8:	460d      	mov	r5, r1
    ccba:	e016      	b.n	ccea <_printf_i+0x1d6>
    ccbc:	681a      	ldr	r2, [r3, #0]
    ccbe:	1d11      	adds	r1, r2, #4
    ccc0:	6019      	str	r1, [r3, #0]
    ccc2:	6815      	ldr	r5, [r2, #0]
    ccc4:	6862      	ldr	r2, [r4, #4]
    ccc6:	4628      	mov	r0, r5
    ccc8:	2100      	movs	r1, #0
    ccca:	f000 f8dd 	bl	ce88 <memchr>
    ccce:	b108      	cbz	r0, ccd4 <_printf_i+0x1c0>
    ccd0:	1b40      	subs	r0, r0, r5
    ccd2:	6060      	str	r0, [r4, #4]
    ccd4:	6863      	ldr	r3, [r4, #4]
    ccd6:	e004      	b.n	cce2 <_printf_i+0x1ce>
    ccd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
    ccdc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    cce0:	2301      	movs	r3, #1
    cce2:	6123      	str	r3, [r4, #16]
    cce4:	2300      	movs	r3, #0
    cce6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    ccea:	f8cd 8000 	str.w	r8, [sp]
    ccee:	4630      	mov	r0, r6
    ccf0:	4621      	mov	r1, r4
    ccf2:	aa03      	add	r2, sp, #12
    ccf4:	463b      	mov	r3, r7
    ccf6:	f7ff fe97 	bl	ca28 <_printf_common>
    ccfa:	3001      	adds	r0, #1
    ccfc:	d102      	bne.n	cd04 <_printf_i+0x1f0>
    ccfe:	f04f 30ff 	mov.w	r0, #4294967295
    cd02:	e01f      	b.n	cd44 <_printf_i+0x230>
    cd04:	4630      	mov	r0, r6
    cd06:	4639      	mov	r1, r7
    cd08:	462a      	mov	r2, r5
    cd0a:	6923      	ldr	r3, [r4, #16]
    cd0c:	47c0      	blx	r8
    cd0e:	3001      	adds	r0, #1
    cd10:	d0f5      	beq.n	ccfe <_printf_i+0x1ea>
    cd12:	6823      	ldr	r3, [r4, #0]
    cd14:	079b      	lsls	r3, r3, #30
    cd16:	d405      	bmi.n	cd24 <_printf_i+0x210>
    cd18:	68e0      	ldr	r0, [r4, #12]
    cd1a:	9b03      	ldr	r3, [sp, #12]
    cd1c:	4298      	cmp	r0, r3
    cd1e:	bfb8      	it	lt
    cd20:	4618      	movlt	r0, r3
    cd22:	e00f      	b.n	cd44 <_printf_i+0x230>
    cd24:	2500      	movs	r5, #0
    cd26:	68e3      	ldr	r3, [r4, #12]
    cd28:	9a03      	ldr	r2, [sp, #12]
    cd2a:	1a9b      	subs	r3, r3, r2
    cd2c:	429d      	cmp	r5, r3
    cd2e:	daf3      	bge.n	cd18 <_printf_i+0x204>
    cd30:	4630      	mov	r0, r6
    cd32:	4639      	mov	r1, r7
    cd34:	f104 0219 	add.w	r2, r4, #25
    cd38:	2301      	movs	r3, #1
    cd3a:	47c0      	blx	r8
    cd3c:	3001      	adds	r0, #1
    cd3e:	d0de      	beq.n	ccfe <_printf_i+0x1ea>
    cd40:	3501      	adds	r5, #1
    cd42:	e7f0      	b.n	cd26 <_printf_i+0x212>
    cd44:	b004      	add	sp, #16
    cd46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cd4a:	bf00      	nop
    cd4c:	00035cb1 	.word	0x00035cb1
    cd50:	00035cc2 	.word	0x00035cc2

0000cd54 <__sread>:
    cd54:	b510      	push	{r4, lr}
    cd56:	460c      	mov	r4, r1
    cd58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    cd5c:	f000 f8e4 	bl	cf28 <_read_r>
    cd60:	2800      	cmp	r0, #0
    cd62:	bfab      	itete	ge
    cd64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    cd66:	89a3      	ldrhlt	r3, [r4, #12]
    cd68:	181b      	addge	r3, r3, r0
    cd6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    cd6e:	bfac      	ite	ge
    cd70:	6563      	strge	r3, [r4, #84]	; 0x54
    cd72:	81a3      	strhlt	r3, [r4, #12]
    cd74:	bd10      	pop	{r4, pc}

0000cd76 <__swrite>:
    cd76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cd7a:	461d      	mov	r5, r3
    cd7c:	898b      	ldrh	r3, [r1, #12]
    cd7e:	05db      	lsls	r3, r3, #23
    cd80:	4607      	mov	r7, r0
    cd82:	460c      	mov	r4, r1
    cd84:	4616      	mov	r6, r2
    cd86:	d505      	bpl.n	cd94 <__swrite+0x1e>
    cd88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    cd8c:	2200      	movs	r2, #0
    cd8e:	2302      	movs	r3, #2
    cd90:	f000 f868 	bl	ce64 <_lseek_r>
    cd94:	89a3      	ldrh	r3, [r4, #12]
    cd96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    cd9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    cd9e:	81a3      	strh	r3, [r4, #12]
    cda0:	4638      	mov	r0, r7
    cda2:	4632      	mov	r2, r6
    cda4:	462b      	mov	r3, r5
    cda6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cdaa:	f000 b817 	b.w	cddc <_write_r>

0000cdae <__sseek>:
    cdae:	b510      	push	{r4, lr}
    cdb0:	460c      	mov	r4, r1
    cdb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    cdb6:	f000 f855 	bl	ce64 <_lseek_r>
    cdba:	1c43      	adds	r3, r0, #1
    cdbc:	89a3      	ldrh	r3, [r4, #12]
    cdbe:	bf15      	itete	ne
    cdc0:	6560      	strne	r0, [r4, #84]	; 0x54
    cdc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    cdc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    cdca:	81a3      	strheq	r3, [r4, #12]
    cdcc:	bf18      	it	ne
    cdce:	81a3      	strhne	r3, [r4, #12]
    cdd0:	bd10      	pop	{r4, pc}

0000cdd2 <__sclose>:
    cdd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    cdd6:	f000 b813 	b.w	ce00 <_close_r>
	...

0000cddc <_write_r>:
    cddc:	b538      	push	{r3, r4, r5, lr}
    cdde:	4c07      	ldr	r4, [pc, #28]	; (cdfc <_write_r+0x20>)
    cde0:	4605      	mov	r5, r0
    cde2:	2000      	movs	r0, #0
    cde4:	6020      	str	r0, [r4, #0]
    cde6:	4608      	mov	r0, r1
    cde8:	4611      	mov	r1, r2
    cdea:	461a      	mov	r2, r3
    cdec:	f7f6 f8b2 	bl	2f54 <_write>
    cdf0:	1c43      	adds	r3, r0, #1
    cdf2:	d102      	bne.n	cdfa <_write_r+0x1e>
    cdf4:	6823      	ldr	r3, [r4, #0]
    cdf6:	b103      	cbz	r3, cdfa <_write_r+0x1e>
    cdf8:	602b      	str	r3, [r5, #0]
    cdfa:	bd38      	pop	{r3, r4, r5, pc}
    cdfc:	20002600 	.word	0x20002600

0000ce00 <_close_r>:
    ce00:	b538      	push	{r3, r4, r5, lr}
    ce02:	4c06      	ldr	r4, [pc, #24]	; (ce1c <_close_r+0x1c>)
    ce04:	2300      	movs	r3, #0
    ce06:	4605      	mov	r5, r0
    ce08:	4608      	mov	r0, r1
    ce0a:	6023      	str	r3, [r4, #0]
    ce0c:	f000 f8a8 	bl	cf60 <_close>
    ce10:	1c43      	adds	r3, r0, #1
    ce12:	d102      	bne.n	ce1a <_close_r+0x1a>
    ce14:	6823      	ldr	r3, [r4, #0]
    ce16:	b103      	cbz	r3, ce1a <_close_r+0x1a>
    ce18:	602b      	str	r3, [r5, #0]
    ce1a:	bd38      	pop	{r3, r4, r5, pc}
    ce1c:	20002600 	.word	0x20002600

0000ce20 <_fstat_r>:
    ce20:	b538      	push	{r3, r4, r5, lr}
    ce22:	4c07      	ldr	r4, [pc, #28]	; (ce40 <_fstat_r+0x20>)
    ce24:	2300      	movs	r3, #0
    ce26:	4605      	mov	r5, r0
    ce28:	4608      	mov	r0, r1
    ce2a:	4611      	mov	r1, r2
    ce2c:	6023      	str	r3, [r4, #0]
    ce2e:	f000 f89f 	bl	cf70 <_fstat>
    ce32:	1c43      	adds	r3, r0, #1
    ce34:	d102      	bne.n	ce3c <_fstat_r+0x1c>
    ce36:	6823      	ldr	r3, [r4, #0]
    ce38:	b103      	cbz	r3, ce3c <_fstat_r+0x1c>
    ce3a:	602b      	str	r3, [r5, #0]
    ce3c:	bd38      	pop	{r3, r4, r5, pc}
    ce3e:	bf00      	nop
    ce40:	20002600 	.word	0x20002600

0000ce44 <_isatty_r>:
    ce44:	b538      	push	{r3, r4, r5, lr}
    ce46:	4c06      	ldr	r4, [pc, #24]	; (ce60 <_isatty_r+0x1c>)
    ce48:	2300      	movs	r3, #0
    ce4a:	4605      	mov	r5, r0
    ce4c:	4608      	mov	r0, r1
    ce4e:	6023      	str	r3, [r4, #0]
    ce50:	f000 f896 	bl	cf80 <_isatty>
    ce54:	1c43      	adds	r3, r0, #1
    ce56:	d102      	bne.n	ce5e <_isatty_r+0x1a>
    ce58:	6823      	ldr	r3, [r4, #0]
    ce5a:	b103      	cbz	r3, ce5e <_isatty_r+0x1a>
    ce5c:	602b      	str	r3, [r5, #0]
    ce5e:	bd38      	pop	{r3, r4, r5, pc}
    ce60:	20002600 	.word	0x20002600

0000ce64 <_lseek_r>:
    ce64:	b538      	push	{r3, r4, r5, lr}
    ce66:	4c07      	ldr	r4, [pc, #28]	; (ce84 <_lseek_r+0x20>)
    ce68:	4605      	mov	r5, r0
    ce6a:	2000      	movs	r0, #0
    ce6c:	6020      	str	r0, [r4, #0]
    ce6e:	4608      	mov	r0, r1
    ce70:	4611      	mov	r1, r2
    ce72:	461a      	mov	r2, r3
    ce74:	f000 f88c 	bl	cf90 <_lseek>
    ce78:	1c43      	adds	r3, r0, #1
    ce7a:	d102      	bne.n	ce82 <_lseek_r+0x1e>
    ce7c:	6823      	ldr	r3, [r4, #0]
    ce7e:	b103      	cbz	r3, ce82 <_lseek_r+0x1e>
    ce80:	602b      	str	r3, [r5, #0]
    ce82:	bd38      	pop	{r3, r4, r5, pc}
    ce84:	20002600 	.word	0x20002600

0000ce88 <memchr>:
    ce88:	b510      	push	{r4, lr}
    ce8a:	b2c9      	uxtb	r1, r1
    ce8c:	4402      	add	r2, r0
    ce8e:	4290      	cmp	r0, r2
    ce90:	4603      	mov	r3, r0
    ce92:	d006      	beq.n	cea2 <memchr+0x1a>
    ce94:	781c      	ldrb	r4, [r3, #0]
    ce96:	428c      	cmp	r4, r1
    ce98:	f100 0001 	add.w	r0, r0, #1
    ce9c:	d1f7      	bne.n	ce8e <memchr+0x6>
    ce9e:	4618      	mov	r0, r3
    cea0:	bd10      	pop	{r4, pc}
    cea2:	2000      	movs	r0, #0
    cea4:	bd10      	pop	{r4, pc}

0000cea6 <memmove>:
    cea6:	4281      	cmp	r1, r0
    cea8:	b510      	push	{r4, lr}
    ceaa:	eb01 0302 	add.w	r3, r1, r2
    ceae:	d301      	bcc.n	ceb4 <memmove+0xe>
    ceb0:	1e42      	subs	r2, r0, #1
    ceb2:	e00b      	b.n	cecc <memmove+0x26>
    ceb4:	4298      	cmp	r0, r3
    ceb6:	d2fb      	bcs.n	ceb0 <memmove+0xa>
    ceb8:	1881      	adds	r1, r0, r2
    ceba:	1ad2      	subs	r2, r2, r3
    cebc:	42d3      	cmn	r3, r2
    cebe:	d004      	beq.n	ceca <memmove+0x24>
    cec0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    cec4:	f801 4d01 	strb.w	r4, [r1, #-1]!
    cec8:	e7f8      	b.n	cebc <memmove+0x16>
    ceca:	bd10      	pop	{r4, pc}
    cecc:	4299      	cmp	r1, r3
    cece:	d004      	beq.n	ceda <memmove+0x34>
    ced0:	f811 4b01 	ldrb.w	r4, [r1], #1
    ced4:	f802 4f01 	strb.w	r4, [r2, #1]!
    ced8:	e7f8      	b.n	cecc <memmove+0x26>
    ceda:	bd10      	pop	{r4, pc}

0000cedc <_realloc_r>:
    cedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cede:	4607      	mov	r7, r0
    cee0:	4615      	mov	r5, r2
    cee2:	460e      	mov	r6, r1
    cee4:	b921      	cbnz	r1, cef0 <_realloc_r+0x14>
    cee6:	4611      	mov	r1, r2
    cee8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ceec:	f7fe bffa 	b.w	bee4 <_malloc_r>
    cef0:	b91a      	cbnz	r2, cefa <_realloc_r+0x1e>
    cef2:	f7fe ffb3 	bl	be5c <_free_r>
    cef6:	4628      	mov	r0, r5
    cef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cefa:	f000 f827 	bl	cf4c <_malloc_usable_size_r>
    cefe:	42a8      	cmp	r0, r5
    cf00:	d20e      	bcs.n	cf20 <_realloc_r+0x44>
    cf02:	4638      	mov	r0, r7
    cf04:	4629      	mov	r1, r5
    cf06:	f7fe ffed 	bl	bee4 <_malloc_r>
    cf0a:	4604      	mov	r4, r0
    cf0c:	b150      	cbz	r0, cf24 <_realloc_r+0x48>
    cf0e:	4631      	mov	r1, r6
    cf10:	462a      	mov	r2, r5
    cf12:	f7fe ff8f 	bl	be34 <memcpy>
    cf16:	4638      	mov	r0, r7
    cf18:	4631      	mov	r1, r6
    cf1a:	f7fe ff9f 	bl	be5c <_free_r>
    cf1e:	e001      	b.n	cf24 <_realloc_r+0x48>
    cf20:	4630      	mov	r0, r6
    cf22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cf24:	4620      	mov	r0, r4
    cf26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000cf28 <_read_r>:
    cf28:	b538      	push	{r3, r4, r5, lr}
    cf2a:	4c07      	ldr	r4, [pc, #28]	; (cf48 <_read_r+0x20>)
    cf2c:	4605      	mov	r5, r0
    cf2e:	2000      	movs	r0, #0
    cf30:	6020      	str	r0, [r4, #0]
    cf32:	4608      	mov	r0, r1
    cf34:	4611      	mov	r1, r2
    cf36:	461a      	mov	r2, r3
    cf38:	f000 f832 	bl	cfa0 <_read>
    cf3c:	1c43      	adds	r3, r0, #1
    cf3e:	d102      	bne.n	cf46 <_read_r+0x1e>
    cf40:	6823      	ldr	r3, [r4, #0]
    cf42:	b103      	cbz	r3, cf46 <_read_r+0x1e>
    cf44:	602b      	str	r3, [r5, #0]
    cf46:	bd38      	pop	{r3, r4, r5, pc}
    cf48:	20002600 	.word	0x20002600

0000cf4c <_malloc_usable_size_r>:
    cf4c:	f851 0c04 	ldr.w	r0, [r1, #-4]
    cf50:	2800      	cmp	r0, #0
    cf52:	bfbe      	ittt	lt
    cf54:	1809      	addlt	r1, r1, r0
    cf56:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
    cf5a:	18c0      	addlt	r0, r0, r3
    cf5c:	3804      	subs	r0, #4
    cf5e:	4770      	bx	lr

0000cf60 <_close>:
    cf60:	4b02      	ldr	r3, [pc, #8]	; (cf6c <_close+0xc>)
    cf62:	2258      	movs	r2, #88	; 0x58
    cf64:	601a      	str	r2, [r3, #0]
    cf66:	f04f 30ff 	mov.w	r0, #4294967295
    cf6a:	4770      	bx	lr
    cf6c:	20002600 	.word	0x20002600

0000cf70 <_fstat>:
    cf70:	4b02      	ldr	r3, [pc, #8]	; (cf7c <_fstat+0xc>)
    cf72:	2258      	movs	r2, #88	; 0x58
    cf74:	601a      	str	r2, [r3, #0]
    cf76:	f04f 30ff 	mov.w	r0, #4294967295
    cf7a:	4770      	bx	lr
    cf7c:	20002600 	.word	0x20002600

0000cf80 <_isatty>:
    cf80:	4b02      	ldr	r3, [pc, #8]	; (cf8c <_isatty+0xc>)
    cf82:	2258      	movs	r2, #88	; 0x58
    cf84:	601a      	str	r2, [r3, #0]
    cf86:	2000      	movs	r0, #0
    cf88:	4770      	bx	lr
    cf8a:	bf00      	nop
    cf8c:	20002600 	.word	0x20002600

0000cf90 <_lseek>:
    cf90:	4b02      	ldr	r3, [pc, #8]	; (cf9c <_lseek+0xc>)
    cf92:	2258      	movs	r2, #88	; 0x58
    cf94:	601a      	str	r2, [r3, #0]
    cf96:	f04f 30ff 	mov.w	r0, #4294967295
    cf9a:	4770      	bx	lr
    cf9c:	20002600 	.word	0x20002600

0000cfa0 <_read>:
    cfa0:	4b02      	ldr	r3, [pc, #8]	; (cfac <_read+0xc>)
    cfa2:	2258      	movs	r2, #88	; 0x58
    cfa4:	601a      	str	r2, [r3, #0]
    cfa6:	f04f 30ff 	mov.w	r0, #4294967295
    cfaa:	4770      	bx	lr
    cfac:	20002600 	.word	0x20002600

0000cfb0 <_sbrk>:
    cfb0:	4a04      	ldr	r2, [pc, #16]	; (cfc4 <_sbrk+0x14>)
    cfb2:	4905      	ldr	r1, [pc, #20]	; (cfc8 <_sbrk+0x18>)
    cfb4:	6813      	ldr	r3, [r2, #0]
    cfb6:	2b00      	cmp	r3, #0
    cfb8:	bf08      	it	eq
    cfba:	460b      	moveq	r3, r1
    cfbc:	4418      	add	r0, r3
    cfbe:	6010      	str	r0, [r2, #0]
    cfc0:	4618      	mov	r0, r3
    cfc2:	4770      	bx	lr
    cfc4:	20002360 	.word	0x20002360
    cfc8:	20002608 	.word	0x20002608

0000cfcc <_exit>:
    cfcc:	e7fe      	b.n	cfcc <_exit>
    cfce:	bf00      	nop

0000cfd0 <_init>:
    cfd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cfd2:	bf00      	nop
    cfd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    cfd6:	bc08      	pop	{r3}
    cfd8:	469e      	mov	lr, r3
    cfda:	4770      	bx	lr

0000cfdc <_fini>:
    cfdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cfde:	bf00      	nop
    cfe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    cfe2:	bc08      	pop	{r3}
    cfe4:	469e      	mov	lr, r3
    cfe6:	4770      	bx	lr
    cfe8:	00000000 	.word	0x00000000
    cfec:	00000007 	.word	0x00000007
    cff0:	05070000 	.word	0x05070000
    cff4:	00000000 	.word	0x00000000
    cff8:	0000003d 	.word	0x0000003d
    cffc:	00000001 	.word	0x00000001
    d000:	01000000 	.word	0x01000000
    d004:	00000001 	.word	0x00000001
    d008:	00000101 	.word	0x00000101
    d00c:	00003000 	.word	0x00003000
    d010:	00000001 	.word	0x00000001
    d014:	00000000 	.word	0x00000000
    d018:	00000001 	.word	0x00000001
    d01c:	00000001 	.word	0x00000001
    d020:	00000000 	.word	0x00000000
    d024:	0000000f 	.word	0x0000000f
    d028:	00000220 	.word	0x00000220
    d02c:	00400000 	.word	0x00400000
    d030:	10000000 	.word	0x10000000
    d034:	00000200 	.word	0x00000200
    d038:	00000000 	.word	0x00000000
    d03c:	00000007 	.word	0x00000007
    d040:	00000001 	.word	0x00000001
    d044:	00000101 	.word	0x00000101
    d048:	00000001 	.word	0x00000001
    d04c:	00000000 	.word	0x00000000
    d050:	00000220 	.word	0x00000220
    d054:	00400000 	.word	0x00400000
    d058:	10000000 	.word	0x10000000
    d05c:	00000200 	.word	0x00000200
    d060:	00004000 	.word	0x00004000
    d064:	00000007 	.word	0x00000007
    d068:	00000001 	.word	0x00000001
    d06c:	00000101 	.word	0x00000101
    d070:	00000001 	.word	0x00000001
    d074:	00000000 	.word	0x00000000
    d078:	00000005 	.word	0x00000005
    d07c:	00000000 	.word	0x00000000
    d080:	000f4240 	.word	0x000f4240
    d084:	00000105 	.word	0x00000105
	...
    d090:	3c3a2a22 	.word	0x3c3a2a22
    d094:	7f7c3f3e 	.word	0x7f7c3f3e
    d098:	00000000 	.word	0x00000000
    d09c:	3d3b2c2b 	.word	0x3d3b2c2b
    d0a0:	00005d5b 	.word	0x00005d5b
    d0a4:	4e204f4e 	.word	0x4e204f4e
    d0a8:	20454d41 	.word	0x20454d41
    d0ac:	46202020 	.word	0x46202020
    d0b0:	32335441 	.word	0x32335441
    d0b4:	00202020 	.word	0x00202020
    d0b8:	4e204f4e 	.word	0x4e204f4e
    d0bc:	20454d41 	.word	0x20454d41
    d0c0:	46202020 	.word	0x46202020
    d0c4:	20205441 	.word	0x20205441
    d0c8:	00202020 	.word	0x00202020
    d0cc:	4d90feeb 	.word	0x4d90feeb
    d0d0:	534f4453 	.word	0x534f4453
    d0d4:	00302e35 	.word	0x00302e35

0000d0d8 <LfnOfs>:
    d0d8:	07050301 12100e09 1c181614 0000001e     ................
    d0e8:	70616c45 20646573 20544646 656d6974     Elapsed FFT time
    d0f8:	20736920 73206425 6e6f6365 25207364      is %d seconds %
    d108:	736d2064 0000000a 70616c45 20646573     d ms....Elapsed 
    d118:	766e6f63 69742031 6920656d 64252073     conv1 time is %d
    d128:	63657320 73646e6f 20642520 000a736d      seconds %d ms..
    d138:	70616c45 20646573 7078616d 206c6f6f     Elapsed maxpool 
    d148:	656d6974 20736920 73206425 6e6f6365     time is %d secon
    d158:	25207364 736d2064 0000000a 70616c45     ds %d ms....Elap
    d168:	20646573 766e6f63 69742032 6920656d     sed conv2 time i
    d178:	64252073 63657320 73646e6f 20642520     s %d seconds %d 
    d188:	000a736d 70616c45 20646573 656d6974     ms..Elapsed time
    d198:	20736920 73206425 6e6f6365 25207364      is %d seconds %
    d1a8:	736d2064 0000000a 7074754f 62207475     d ms....Output b
    d1b8:	726f6665 69732065 696f6d67 73692064     efore sigmoid is
    d1c8:	0a642520 00000000 70616c45 20646573      %d.....Elapsed 
    d1d8:	74706564 69742068 6920656d 64252073     depth time is %d
    d1e8:	63657320 73646e6f 20642520 000a736d      seconds %d ms..
    d1f8:	70616c45 20646573 6e696f70 69742074     Elapsed point ti
    d208:	6920656d 64252073 63657320 73646e6f     me is %d seconds
    d218:	20642520 000a736d                        %d ms..

0000d220 <twiddleCoef_2048>:
    d220:	3f800000 00000000 3f7fffb1 3b490fc7     ...?.......?..I;
    d230:	3f7ffec4 3bc90f89 3f7ffd39 3c16cb59     ...?...;9..?Y..<
    d240:	3f7ffb11 3c490e90 3f7ff84a 3c7b514b     ...?..I<J..?KQ{<
    d250:	3f7ff4e6 3c96c9b6 3f7ff0e3 3cafea69     ...?...<...?i..<
    d260:	3f7fec43 3cc90ab0 3f7fe705 3ce22a7b     C..?...<...?{*.<
    d270:	3f7fe129 3cfb49b9 3f7fdaaf 3d0a342f     )..?.I.<...?/4.=
    d280:	3f7fd398 3d16c32c 3f7fcbe2 3d2351cc     ...?,..=...?.Q#=
    d290:	3f7fc38f 3d2fe007 3f7fba9e 3d3c6dd5     ...?../=...?.m<=
    d2a0:	3f7fb10f 3d48fb2f 3f7fa6e3 3d55880e     ...?/.H=...?..U=
    d2b0:	3f7f9c18 3d621468 3f7f90b1 3d6ea038     ...?h.b=...?8.n=
    d2c0:	3f7f84ab 3d7b2b74 3f7f7808 3d83db0a     ...?t+{=.x.?...=
    d2d0:	3f7f6ac7 3d8a200a 3f7f5ce9 3d9064b4     .j.?. .=.\.?.d.=
    d2e0:	3f7f4e6d 3d96a905 3f7f3f54 3d9cecf9     mN.?...=T?.?...=
    d2f0:	3f7f2f9d 3da3308c 3f7f1f49 3da973ba     ./.?.0.=I..?.s.=
    d300:	3f7f0e58 3dafb680 3f7efcc9 3db5f8da     X..?...=..~?...=
    d310:	3f7eea9d 3dbc3ac3 3f7ed7d4 3dc27c39     ..~?.:.=..~?9|.=
    d320:	3f7ec46d 3dc8bd36 3f7eb069 3dcefdb7     m.~?6..=i.~?...=
    d330:	3f7e9bc9 3dd53db9 3f7e868b 3ddb7d37     ..~?.=.=..~?7}.=
    d340:	3f7e70b0 3de1bc2e 3f7e5a38 3de7fa9a     .p~?...=8Z~?...=
    d350:	3f7e4323 3dee3876 3f7e2b72 3df475c0     #C~?v8.=r+~?.u.=
    d360:	3f7e1324 3dfab273 3f7dfa38 3e007745     $.~?s..=8.}?Ew.>
    d370:	3f7de0b1 3e039502 3f7dc68c 3e06b26e     ..}?...>..}?n..>
    d380:	3f7dabcc 3e09cf86 3f7d906e 3e0cec4a     ..}?...>n.}?J..>
    d390:	3f7d7474 3e1008b7 3f7d57de 3e1324ca     tt}?...>.W}?.$.>
    d3a0:	3f7d3aac 3e164083 3f7d1cdd 3e195be0     .:}?.@.>..}?.[.>
    d3b0:	3f7cfe73 3e1c76de 3f7cdf6c 3e1f917b     s.|?.v.>l.|?{..>
    d3c0:	3f7cbfc9 3e22abb6 3f7c9f8a 3e25c58c     ..|?..">..|?..%>
    d3d0:	3f7c7eb0 3e28defc 3f7c5d3a 3e2bf804     .~|?..(>:]|?..+>
    d3e0:	3f7c3b28 3e2f10a2 3f7c187a 3e3228d4     (;|?../>z.|?.(2>
    d3f0:	3f7bf531 3e354098 3f7bd14d 3e3857ec     1.{?.@5>M.{?.W8>
    d400:	3f7baccd 3e3b6ecf 3f7b87b2 3e3e853e     ..{?.n;>..{?>.>>
    d410:	3f7b61fc 3e419b37 3f7b3bab 3e44b0b9     .a{?7.A>.;{?..D>
    d420:	3f7b14be 3e47c5c2 3f7aed37 3e4ada4f     ..{?..G>7.z?O.J>
    d430:	3f7ac516 3e4dee60 3f7a9c59 3e5101f1     ..z?`.M>Y.z?..Q>
    d440:	3f7a7302 3e541501 3f7a4910 3e57278f     .sz?..T>.Iz?.'W>
    d450:	3f7a1e84 3e5a3997 3f79f35e 3e5d4b1a     ..z?.9Z>^.y?.K]>
    d460:	3f79c79d 3e605c13 3f799b43 3e636c83     ..y?.\`>C.y?.lc>
    d470:	3f796e4e 3e667c66 3f7940c0 3e698bba     Nny?f|f>.@y?..i>
    d480:	3f791298 3e6c9a7f 3f78e3d6 3e6fa8b2     ..y?..l>..x?..o>
    d490:	3f78b47b 3e72b651 3f788486 3e75c35a     {.x?Q.r>..x?Z.u>
    d4a0:	3f7853f8 3e78cfcc 3f7822d1 3e7bdba4     .Sx?..x>."x?..{>
    d4b0:	3f77f110 3e7ee6e1 3f77beb7 3e80f8c0     ..w?..~>..w?...>
    d4c0:	3f778bc5 3e827dc0 3f77583a 3e840270     ..w?.}.>:Xw?p..>
    d4d0:	3f772417 3e8586ce 3f76ef5b 3e870ada     .$w?...>[.v?...>
    d4e0:	3f76ba07 3e888e93 3f76841b 3e8a11f8     ..v?...>..v?...>
    d4f0:	3f764d97 3e8b9507 3f76167a 3e8d17c0     .Mv?...>z.v?...>
    d500:	3f75dec6 3e8e9a22 3f75a67b 3e901c2c     ..u?"..>{.u?,..>
    d510:	3f756d97 3e919ddd 3f75341d 3e931f35     .mu?...>.4u?5..>
    d520:	3f74fa0b 3e94a031 3f74bf62 3e9620d2     ..t?1..>b.t?. .>
    d530:	3f748422 3e97a117 3f74484b 3e9920fe     ".t?...>KHt?. .>
    d540:	3f740bdd 3e9aa086 3f73ced9 3e9c1faf     ..t?...>..s?...>
    d550:	3f73913f 3e9d9e78 3f73530e 3e9f1cdf     ?.s?x..>.Ss?...>
    d560:	3f731447 3ea09ae5 3f72d4eb 3ea21887     G.s?...>..r?...>
    d570:	3f7294f8 3ea395c5 3f725470 3ea5129f     ..r?...>pTr?...>
    d580:	3f721352 3ea68f12 3f71d19f 3ea80b1f     R.r?...>..q?...>
    d590:	3f718f57 3ea986c4 3f714c7a 3eab0201     W.q?...>zLq?...>
    d5a0:	3f710908 3eac7cd4 3f70c502 3eadf73c     ..q?.|.>..p?<..>
    d5b0:	3f708066 3eaf713a 3f703b37 3eb0eacb     f.p?:q.>7;p?...>
    d5c0:	3f6ff573 3eb263ef 3f6faf1b 3eb3dca5     s.o?.c.>..o?...>
    d5d0:	3f6f6830 3eb554ec 3f6f20b0 3eb6ccc3     0ho?.T.>. o?...>
    d5e0:	3f6ed89e 3eb8442a 3f6e8ff8 3eb9bb1e     ..n?*D.>..n?...>
    d5f0:	3f6e46be 3ebb31a0 3f6dfcf2 3ebca7af     .Fn?.1.>..m?...>
    d600:	3f6db293 3ebe1d4a 3f6d67a1 3ebf926f     ..m?J..>.gm?o..>
    d610:	3f6d1c1d 3ec1071e 3f6cd007 3ec27b55     ..m?...>..l?U{.>
    d620:	3f6c835e 3ec3ef15 3f6c3624 3ec5625c     ^.l?...>$6l?\b.>
    d630:	3f6be858 3ec6d529 3f6b99fb 3ec8477c     X.k?)..>..k?|G.>
    d640:	3f6b4b0c 3ec9b953 3f6afb8c 3ecb2aae     .Kk?S..>..j?.*.>
    d650:	3f6aab7b 3ecc9b8b 3f6a5ad9 3ece0bea     {.j?...>.Zj?...>
    d660:	3f6a09a7 3ecf7bca 3f69b7e4 3ed0eb2a     ..j?.{.>..i?*..>
    d670:	3f696591 3ed25a09 3f6912ae 3ed3c867     .ei?.Z.>..i?g..>
    d680:	3f68bf3c 3ed53641 3f686b39 3ed6a399     <.h?A6.>9kh?...>
    d690:	3f6816a8 3ed8106b 3f67c187 3ed97cb9     ..h?k..>..g?.|.>
    d6a0:	3f676bd8 3edae880 3f671599 3edc53c1     .kg?...>..g?.S.>
    d6b0:	3f66becc 3eddbe79 3f666771 3edf28a9     ..f?y..>qgf?.(.>
    d6c0:	3f660f88 3ee0924f 3f65b710 3ee1fb6a     ..f?O..>..e?j..>
    d6d0:	3f655e0b 3ee363fa 3f650479 3ee4cbfe     .^e?.c.>y.e?...>
    d6e0:	3f64aa59 3ee63375 3f644fac 3ee79a5d     Y.d?u3.>.Od?]..>
    d6f0:	3f63f473 3ee900b7 3f6398ac 3eea6681     s.c?...>..c?.f.>
    d700:	3f633c5a 3eebcbbb 3f62df7b 3eed3063     Z<c?...>{.b?c0.>
    d710:	3f628210 3eee9479 3f62241a 3eeff7fb     ..b?y..>.$b?...>
    d720:	3f61c598 3ef15aea 3f61668a 3ef2bd43     ..a?.Z.>.fa?C..>
    d730:	3f6106f2 3ef41f07 3f60a6cf 3ef58035     ..a?...>..`?5..>
    d740:	3f604621 3ef6e0cb 3f5fe4e9 3ef840c8     !F`?...>.._?.@.>
    d750:	3f5f8327 3ef9a02d 3f5f20db 3efafef7     '._?-..>. _?...>
    d760:	3f5ebe05 3efc5d27 3f5e5aa6 3efdbabb     ..^?'].>.Z^?...>
    d770:	3f5df6be 3eff17b2 3f5d924d 3f003a06     ..]?...>M.]?.:.?
    d780:	3f5d2d53 3f00e7e4 3f5cc7d1 3f019573     S-]?...?..\?s..?
    d790:	3f5c61c7 3f0242b1 3f5bfb34 3f02ef9f     .a\?.B.?4.[?...?
    d7a0:	3f5b941a 3f039c3d 3f5b2c79 3f044889     ..[?=..?y,[?.H.?
    d7b0:	3f5ac450 3f04f484 3f5a5ba0 3f05a02c     P.Z?...?.[Z?,..?
    d7c0:	3f59f26a 3f064b82 3f5988ad 3f06f686     j.Y?.K.?..Y?...?
    d7d0:	3f591e6a 3f07a136 3f58b3a1 3f084b92     j.Y?6..?..X?.K.?
    d7e0:	3f584853 3f08f59b 3f57dc7f 3f099f4e     SHX?...?..W?N..?
    d7f0:	3f577026 3f0a48ad 3f570348 3f0af1b7     &pW?.H.?H.W?...?
    d800:	3f5695e5 3f0b9a6b 3f5627fe 3f0c42c9     ..V?k..?.'V?.B.?
    d810:	3f55b993 3f0cead0 3f554aa4 3f0d9281     ..U?...?.JU?...?
    d820:	3f54db31 3f0e39da 3f546b3b 3f0ee0db     1.T?.9.?;kT?...?
    d830:	3f53fac3 3f0f8784 3f5389c7 3f102dd5     ..S?...?..S?.-.?
    d840:	3f531849 3f10d3cd 3f52a649 3f11796b     I.S?...?I.R?ky.?
    d850:	3f5233c6 3f121eb0 3f51c0c2 3f12c39a     .3R?...?..Q?...?
    d860:	3f514d3d 3f13682a 3f50d937 3f140c5f     =MQ?*h.?7.P?_..?
    d870:	3f5064af 3f14b039 3f4fefa8 3f1553b7     .dP?9..?..O?.S.?
    d880:	3f4f7a1f 3f15f6d9 3f4f0417 3f16999f     .zO?...?..O?...?
    d890:	3f4e8d90 3f173c07 3f4e1689 3f17de12     ..N?.<.?..N?...?
    d8a0:	3f4d9f02 3f187fc0 3f4d26fd 3f19210f     ..M?...?.&M?.!.?
    d8b0:	3f4cae79 3f19c200 3f4c3578 3f1a6293     y.L?...?x5L?.b.?
    d8c0:	3f4bbbf8 3f1b02c6 3f4b41fa 3f1ba299     ..K?...?.AK?...?
    d8d0:	3f4ac77f 3f1c420c 3f4a4c87 3f1ce11f     ..J?.B.?.LJ?...?
    d8e0:	3f49d112 3f1d7fd1 3f495521 3f1e1e22     ..I?...?!UI?"..?
    d8f0:	3f48d8b3 3f1ebc12 3f485bca 3f1f599f     ..H?...?.[H?.Y.?
    d900:	3f47de65 3f1ff6cb 3f476085 3f209393     e.G?...?.`G?.. ?
    d910:	3f46e22a 3f212ff9 3f466354 3f21cbfb     *.F?./!?TcF?..!?
    d920:	3f45e403 3f226799 3f456439 3f2302d3     ..E?.g"?9dE?..#?
    d930:	3f44e3f5 3f239da9 3f446337 3f24381a     ..D?..#?7cD?.8$?
    d940:	3f43e200 3f24d225 3f436051 3f256bcb     ..C?%.$?Q`C?.k%?
    d950:	3f42de29 3f26050a 3f425b89 3f269de3     ).B?..&?.[B?..&?
    d960:	3f41d870 3f273656 3f4154e1 3f27ce61     p.A?V6'?.TA?a.'?
    d970:	3f40d0da 3f286605 3f404c5c 3f28fd41     ..@?.f(?\L@?A.(?
    d980:	3f3fc767 3f299415 3f3f41fc 3f2a2a80     g.??..)?.A??.**?
    d990:	3f3ebc1b 3f2ac082 3f3e35c5 3f2b561b     ..>?..*?.5>?.V+?
    d9a0:	3f3daef9 3f2beb4a 3f3d27b8 3f2c800f     ..=?J.+?.'=?..,?
    d9b0:	3f3ca003 3f2d1469 3f3c17d9 3f2da859     ..<?i.-?..<?Y.-?
    d9c0:	3f3b8f3b 3f2e3bde 3f3b0629 3f2ecef7     ;.;?.;.?).;?...?
    d9d0:	3f3a7ca4 3f2f61a5 3f39f2ac 3f2ff3e6     .|:?.a/?..9?../?
    d9e0:	3f396842 3f3085bb 3f38dd65 3f311722     Bh9?..0?e.8?".1?
    d9f0:	3f385216 3f31a81d 3f37c655 3f3238aa     .R8?..1?U.7?.82?
    da00:	3f373a23 3f32c8c9 3f36ad7f 3f33587a     #:7?..2?..6?zX3?
    da10:	3f36206c 3f33e7bc 3f3592e7 3f34768f     l 6?..3?..5?.v4?
    da20:	3f3504f3 3f3504f3 3f34768f 3f3592e7     ..5?..5?.v4?..5?
    da30:	3f33e7bc 3f36206c 3f33587a 3f36ad7f     ..3?l 6?zX3?..6?
    da40:	3f32c8c9 3f373a23 3f3238aa 3f37c655     ..2?#:7?.82?U.7?
    da50:	3f31a81d 3f385216 3f311722 3f38dd65     ..1?.R8?".1?e.8?
    da60:	3f3085bb 3f396842 3f2ff3e6 3f39f2ac     ..0?Bh9?../?..9?
    da70:	3f2f61a5 3f3a7ca4 3f2ecef7 3f3b0629     .a/?.|:?...?).;?
    da80:	3f2e3bde 3f3b8f3b 3f2da859 3f3c17d9     .;.?;.;?Y.-?..<?
    da90:	3f2d1469 3f3ca003 3f2c800f 3f3d27b8     i.-?..<?..,?.'=?
    daa0:	3f2beb4a 3f3daef9 3f2b561b 3f3e35c5     J.+?..=?.V+?.5>?
    dab0:	3f2ac082 3f3ebc1b 3f2a2a80 3f3f41fc     ..*?..>?.**?.A??
    dac0:	3f299415 3f3fc767 3f28fd41 3f404c5c     ..)?g.??A.(?\L@?
    dad0:	3f286605 3f40d0da 3f27ce61 3f4154e1     .f(?..@?a.'?.TA?
    dae0:	3f273656 3f41d870 3f269de3 3f425b89     V6'?p.A?..&?.[B?
    daf0:	3f26050a 3f42de29 3f256bcb 3f436051     ..&?).B?.k%?Q`C?
    db00:	3f24d225 3f43e200 3f24381a 3f446337     %.$?..C?.8$?7cD?
    db10:	3f239da9 3f44e3f5 3f2302d3 3f456439     ..#?..D?..#?9dE?
    db20:	3f226799 3f45e403 3f21cbfb 3f466354     .g"?..E?..!?TcF?
    db30:	3f212ff9 3f46e22a 3f209393 3f476085     ./!?*.F?.. ?.`G?
    db40:	3f1ff6cb 3f47de65 3f1f599f 3f485bca     ...?e.G?.Y.?.[H?
    db50:	3f1ebc12 3f48d8b3 3f1e1e22 3f495521     ...?..H?"..?!UI?
    db60:	3f1d7fd1 3f49d112 3f1ce11f 3f4a4c87     ...?..I?...?.LJ?
    db70:	3f1c420c 3f4ac77f 3f1ba299 3f4b41fa     .B.?..J?...?.AK?
    db80:	3f1b02c6 3f4bbbf8 3f1a6293 3f4c3578     ...?..K?.b.?x5L?
    db90:	3f19c200 3f4cae79 3f19210f 3f4d26fd     ...?y.L?.!.?.&M?
    dba0:	3f187fc0 3f4d9f02 3f17de12 3f4e1689     ...?..M?...?..N?
    dbb0:	3f173c07 3f4e8d90 3f16999f 3f4f0417     .<.?..N?...?..O?
    dbc0:	3f15f6d9 3f4f7a1f 3f1553b7 3f4fefa8     ...?.zO?.S.?..O?
    dbd0:	3f14b039 3f5064af 3f140c5f 3f50d937     9..?.dP?_..?7.P?
    dbe0:	3f13682a 3f514d3d 3f12c39a 3f51c0c2     *h.?=MQ?...?..Q?
    dbf0:	3f121eb0 3f5233c6 3f11796b 3f52a649     ...?.3R?ky.?I.R?
    dc00:	3f10d3cd 3f531849 3f102dd5 3f5389c7     ...?I.S?.-.?..S?
    dc10:	3f0f8784 3f53fac3 3f0ee0db 3f546b3b     ...?..S?...?;kT?
    dc20:	3f0e39da 3f54db31 3f0d9281 3f554aa4     .9.?1.T?...?.JU?
    dc30:	3f0cead0 3f55b993 3f0c42c9 3f5627fe     ...?..U?.B.?.'V?
    dc40:	3f0b9a6b 3f5695e5 3f0af1b7 3f570348     k..?..V?...?H.W?
    dc50:	3f0a48ad 3f577026 3f099f4e 3f57dc7f     .H.?&pW?N..?..W?
    dc60:	3f08f59b 3f584853 3f084b92 3f58b3a1     ...?SHX?.K.?..X?
    dc70:	3f07a136 3f591e6a 3f06f686 3f5988ad     6..?j.Y?...?..Y?
    dc80:	3f064b82 3f59f26a 3f05a02c 3f5a5ba0     .K.?j.Y?,..?.[Z?
    dc90:	3f04f484 3f5ac450 3f044889 3f5b2c79     ...?P.Z?.H.?y,[?
    dca0:	3f039c3d 3f5b941a 3f02ef9f 3f5bfb34     =..?..[?...?4.[?
    dcb0:	3f0242b1 3f5c61c7 3f019573 3f5cc7d1     .B.?.a\?s..?..\?
    dcc0:	3f00e7e4 3f5d2d53 3f003a06 3f5d924d     ...?S-]?.:.?M.]?
    dcd0:	3eff17b2 3f5df6be 3efdbabb 3f5e5aa6     ...>..]?...>.Z^?
    dce0:	3efc5d27 3f5ebe05 3efafef7 3f5f20db     '].>..^?...>. _?
    dcf0:	3ef9a02d 3f5f8327 3ef840c8 3f5fe4e9     -..>'._?.@.>.._?
    dd00:	3ef6e0cb 3f604621 3ef58035 3f60a6cf     ...>!F`?5..>..`?
    dd10:	3ef41f07 3f6106f2 3ef2bd43 3f61668a     ...>..a?C..>.fa?
    dd20:	3ef15aea 3f61c598 3eeff7fb 3f62241a     .Z.>..a?...>.$b?
    dd30:	3eee9479 3f628210 3eed3063 3f62df7b     y..>..b?c0.>{.b?
    dd40:	3eebcbbb 3f633c5a 3eea6681 3f6398ac     ...>Z<c?.f.>..c?
    dd50:	3ee900b7 3f63f473 3ee79a5d 3f644fac     ...>s.c?]..>.Od?
    dd60:	3ee63375 3f64aa59 3ee4cbfe 3f650479     u3.>Y.d?...>y.e?
    dd70:	3ee363fa 3f655e0b 3ee1fb6a 3f65b710     .c.>.^e?j..>..e?
    dd80:	3ee0924f 3f660f88 3edf28a9 3f666771     O..>..f?.(.>qgf?
    dd90:	3eddbe79 3f66becc 3edc53c1 3f671599     y..>..f?.S.>..g?
    dda0:	3edae880 3f676bd8 3ed97cb9 3f67c187     ...>.kg?.|.>..g?
    ddb0:	3ed8106b 3f6816a8 3ed6a399 3f686b39     k..>..h?...>9kh?
    ddc0:	3ed53641 3f68bf3c 3ed3c867 3f6912ae     A6.><.h?g..>..i?
    ddd0:	3ed25a09 3f696591 3ed0eb2a 3f69b7e4     .Z.>.ei?*..>..i?
    dde0:	3ecf7bca 3f6a09a7 3ece0bea 3f6a5ad9     .{.>..j?...>.Zj?
    ddf0:	3ecc9b8b 3f6aab7b 3ecb2aae 3f6afb8c     ...>{.j?.*.>..j?
    de00:	3ec9b953 3f6b4b0c 3ec8477c 3f6b99fb     S..>.Kk?|G.>..k?
    de10:	3ec6d529 3f6be858 3ec5625c 3f6c3624     )..>X.k?\b.>$6l?
    de20:	3ec3ef15 3f6c835e 3ec27b55 3f6cd007     ...>^.l?U{.>..l?
    de30:	3ec1071e 3f6d1c1d 3ebf926f 3f6d67a1     ...>..m?o..>.gm?
    de40:	3ebe1d4a 3f6db293 3ebca7af 3f6dfcf2     J..>..m?...>..m?
    de50:	3ebb31a0 3f6e46be 3eb9bb1e 3f6e8ff8     .1.>.Fn?...>..n?
    de60:	3eb8442a 3f6ed89e 3eb6ccc3 3f6f20b0     *D.>..n?...>. o?
    de70:	3eb554ec 3f6f6830 3eb3dca5 3f6faf1b     .T.>0ho?...>..o?
    de80:	3eb263ef 3f6ff573 3eb0eacb 3f703b37     .c.>s.o?...>7;p?
    de90:	3eaf713a 3f708066 3eadf73c 3f70c502     :q.>f.p?<..>..p?
    dea0:	3eac7cd4 3f710908 3eab0201 3f714c7a     .|.>..q?...>zLq?
    deb0:	3ea986c4 3f718f57 3ea80b1f 3f71d19f     ...>W.q?...>..q?
    dec0:	3ea68f12 3f721352 3ea5129f 3f725470     ...>R.r?...>pTr?
    ded0:	3ea395c5 3f7294f8 3ea21887 3f72d4eb     ...>..r?...>..r?
    dee0:	3ea09ae5 3f731447 3e9f1cdf 3f73530e     ...>G.s?...>.Ss?
    def0:	3e9d9e78 3f73913f 3e9c1faf 3f73ced9     x..>?.s?...>..s?
    df00:	3e9aa086 3f740bdd 3e9920fe 3f74484b     ...>..t?. .>KHt?
    df10:	3e97a117 3f748422 3e9620d2 3f74bf62     ...>".t?. .>b.t?
    df20:	3e94a031 3f74fa0b 3e931f35 3f75341d     1..>..t?5..>.4u?
    df30:	3e919ddd 3f756d97 3e901c2c 3f75a67b     ...>.mu?,..>{.u?
    df40:	3e8e9a22 3f75dec6 3e8d17c0 3f76167a     "..>..u?...>z.v?
    df50:	3e8b9507 3f764d97 3e8a11f8 3f76841b     ...>.Mv?...>..v?
    df60:	3e888e93 3f76ba07 3e870ada 3f76ef5b     ...>..v?...>[.v?
    df70:	3e8586ce 3f772417 3e840270 3f77583a     ...>.$w?p..>:Xw?
    df80:	3e827dc0 3f778bc5 3e80f8c0 3f77beb7     .}.>..w?...>..w?
    df90:	3e7ee6e1 3f77f110 3e7bdba4 3f7822d1     ..~>..w?..{>."x?
    dfa0:	3e78cfcc 3f7853f8 3e75c35a 3f788486     ..x>.Sx?Z.u>..x?
    dfb0:	3e72b651 3f78b47b 3e6fa8b2 3f78e3d6     Q.r>{.x?..o>..x?
    dfc0:	3e6c9a7f 3f791298 3e698bba 3f7940c0     ..l>..y?..i>.@y?
    dfd0:	3e667c66 3f796e4e 3e636c83 3f799b43     f|f>Nny?.lc>C.y?
    dfe0:	3e605c13 3f79c79d 3e5d4b1a 3f79f35e     .\`>..y?.K]>^.y?
    dff0:	3e5a3997 3f7a1e84 3e57278f 3f7a4910     .9Z>..z?.'W>.Iz?
    e000:	3e541501 3f7a7302 3e5101f1 3f7a9c59     ..T>.sz?..Q>Y.z?
    e010:	3e4dee60 3f7ac516 3e4ada4f 3f7aed37     `.M>..z?O.J>7.z?
    e020:	3e47c5c2 3f7b14be 3e44b0b9 3f7b3bab     ..G>..{?..D>.;{?
    e030:	3e419b37 3f7b61fc 3e3e853e 3f7b87b2     7.A>.a{?>.>>..{?
    e040:	3e3b6ecf 3f7baccd 3e3857ec 3f7bd14d     .n;>..{?.W8>M.{?
    e050:	3e354098 3f7bf531 3e3228d4 3f7c187a     .@5>1.{?.(2>z.|?
    e060:	3e2f10a2 3f7c3b28 3e2bf804 3f7c5d3a     ../>(;|?..+>:]|?
    e070:	3e28defc 3f7c7eb0 3e25c58c 3f7c9f8a     ..(>.~|?..%>..|?
    e080:	3e22abb6 3f7cbfc9 3e1f917b 3f7cdf6c     ..">..|?{..>l.|?
    e090:	3e1c76de 3f7cfe73 3e195be0 3f7d1cdd     .v.>s.|?.[.>..}?
    e0a0:	3e164083 3f7d3aac 3e1324ca 3f7d57de     .@.>.:}?.$.>.W}?
    e0b0:	3e1008b7 3f7d7474 3e0cec4a 3f7d906e     ...>tt}?J..>n.}?
    e0c0:	3e09cf86 3f7dabcc 3e06b26e 3f7dc68c     ...>..}?n..>..}?
    e0d0:	3e039502 3f7de0b1 3e007745 3f7dfa38     ...>..}?Ew.>8.}?
    e0e0:	3dfab273 3f7e1324 3df475c0 3f7e2b72     s..=$.~?.u.=r+~?
    e0f0:	3dee3876 3f7e4323 3de7fa9a 3f7e5a38     v8.=#C~?...=8Z~?
    e100:	3de1bc2e 3f7e70b0 3ddb7d37 3f7e868b     ...=.p~?7}.=..~?
    e110:	3dd53db9 3f7e9bc9 3dcefdb7 3f7eb069     .=.=..~?...=i.~?
    e120:	3dc8bd36 3f7ec46d 3dc27c39 3f7ed7d4     6..=m.~?9|.=..~?
    e130:	3dbc3ac3 3f7eea9d 3db5f8da 3f7efcc9     .:.=..~?...=..~?
    e140:	3dafb680 3f7f0e58 3da973ba 3f7f1f49     ...=X..?.s.=I..?
    e150:	3da3308c 3f7f2f9d 3d9cecf9 3f7f3f54     .0.=./.?...=T?.?
    e160:	3d96a905 3f7f4e6d 3d9064b4 3f7f5ce9     ...=mN.?.d.=.\.?
    e170:	3d8a200a 3f7f6ac7 3d83db0a 3f7f7808     . .=.j.?...=.x.?
    e180:	3d7b2b74 3f7f84ab 3d6ea038 3f7f90b1     t+{=...?8.n=...?
    e190:	3d621468 3f7f9c18 3d55880e 3f7fa6e3     h.b=...?..U=...?
    e1a0:	3d48fb2f 3f7fb10f 3d3c6dd5 3f7fba9e     /.H=...?.m<=...?
    e1b0:	3d2fe007 3f7fc38f 3d2351cc 3f7fcbe2     ../=...?.Q#=...?
    e1c0:	3d16c32c 3f7fd398 3d0a342f 3f7fdaaf     ,..=...?/4.=...?
    e1d0:	3cfb49b9 3f7fe129 3ce22a7b 3f7fe705     .I.<)..?{*.<...?
    e1e0:	3cc90ab0 3f7fec43 3cafea69 3f7ff0e3     ...<C..?i..<...?
    e1f0:	3c96c9b6 3f7ff4e6 3c7b514b 3f7ff84a     ...<...?KQ{<J..?
    e200:	3c490e90 3f7ffb11 3c16cb59 3f7ffd39     ..I<...?Y..<9..?
    e210:	3bc90f89 3f7ffec4 3b490fc7 3f7fffb1     ...;...?..I;...?
    e220:	00000000 3f800000 bb490fc7 3f7fffb1     .......?..I....?
    e230:	bbc90f89 3f7ffec4 bc16cb59 3f7ffd39     .......?Y...9..?
    e240:	bc490e90 3f7ffb11 bc7b514b 3f7ff84a     ..I....?KQ{.J..?
    e250:	bc96c9b6 3f7ff4e6 bcafea69 3f7ff0e3     .......?i......?
    e260:	bcc90ab0 3f7fec43 bce22a7b 3f7fe705     ....C..?{*.....?
    e270:	bcfb49b9 3f7fe129 bd0a342f 3f7fdaaf     .I..)..?/4.....?
    e280:	bd16c32c 3f7fd398 bd2351cc 3f7fcbe2     ,......?.Q#....?
    e290:	bd2fe007 3f7fc38f bd3c6dd5 3f7fba9e     ../....?.m<....?
    e2a0:	bd48fb2f 3f7fb10f bd55880e 3f7fa6e3     /.H....?..U....?
    e2b0:	bd621468 3f7f9c18 bd6ea038 3f7f90b1     h.b....?8.n....?
    e2c0:	bd7b2b74 3f7f84ab bd83db0a 3f7f7808     t+{....?.....x.?
    e2d0:	bd8a200a 3f7f6ac7 bd9064b4 3f7f5ce9     . ...j.?.d...\.?
    e2e0:	bd96a905 3f7f4e6d bd9cecf9 3f7f3f54     ....mN.?....T?.?
    e2f0:	bda3308c 3f7f2f9d bda973ba 3f7f1f49     .0.../.?.s..I..?
    e300:	bdafb680 3f7f0e58 bdb5f8da 3f7efcc9     ....X..?......~?
    e310:	bdbc3ac3 3f7eea9d bdc27c39 3f7ed7d4     .:....~?9|....~?
    e320:	bdc8bd36 3f7ec46d bdcefdb7 3f7eb069     6...m.~?....i.~?
    e330:	bdd53db9 3f7e9bc9 bddb7d37 3f7e868b     .=....~?7}....~?
    e340:	bde1bc2e 3f7e70b0 bde7fa9a 3f7e5a38     .....p~?....8Z~?
    e350:	bdee3876 3f7e4323 bdf475c0 3f7e2b72     v8..#C~?.u..r+~?
    e360:	bdfab273 3f7e1324 be007745 3f7dfa38     s...$.~?Ew..8.}?
    e370:	be039502 3f7de0b1 be06b26e 3f7dc68c     ......}?n.....}?
    e380:	be09cf86 3f7dabcc be0cec4a 3f7d906e     ......}?J...n.}?
    e390:	be1008b7 3f7d7474 be1324ca 3f7d57de     ....tt}?.$...W}?
    e3a0:	be164083 3f7d3aac be195be0 3f7d1cdd     .@...:}?.[....}?
    e3b0:	be1c76de 3f7cfe73 be1f917b 3f7cdf6c     .v..s.|?{...l.|?
    e3c0:	be22abb6 3f7cbfc9 be25c58c 3f7c9f8a     .."...|?..%...|?
    e3d0:	be28defc 3f7c7eb0 be2bf804 3f7c5d3a     ..(..~|?..+.:]|?
    e3e0:	be2f10a2 3f7c3b28 be3228d4 3f7c187a     ../.(;|?.(2.z.|?
    e3f0:	be354098 3f7bf531 be3857ec 3f7bd14d     .@5.1.{?.W8.M.{?
    e400:	be3b6ecf 3f7baccd be3e853e 3f7b87b2     .n;...{?>.>...{?
    e410:	be419b37 3f7b61fc be44b0b9 3f7b3bab     7.A..a{?..D..;{?
    e420:	be47c5c2 3f7b14be be4ada4f 3f7aed37     ..G...{?O.J.7.z?
    e430:	be4dee60 3f7ac516 be5101f1 3f7a9c59     `.M...z?..Q.Y.z?
    e440:	be541501 3f7a7302 be57278f 3f7a4910     ..T..sz?.'W..Iz?
    e450:	be5a3997 3f7a1e84 be5d4b1a 3f79f35e     .9Z...z?.K].^.y?
    e460:	be605c13 3f79c79d be636c83 3f799b43     .\`...y?.lc.C.y?
    e470:	be667c66 3f796e4e be698bba 3f7940c0     f|f.Nny?..i..@y?
    e480:	be6c9a7f 3f791298 be6fa8b2 3f78e3d6     ..l...y?..o...x?
    e490:	be72b651 3f78b47b be75c35a 3f788486     Q.r.{.x?Z.u...x?
    e4a0:	be78cfcc 3f7853f8 be7bdba4 3f7822d1     ..x..Sx?..{.."x?
    e4b0:	be7ee6e1 3f77f110 be80f8c0 3f77beb7     ..~...w?......w?
    e4c0:	be827dc0 3f778bc5 be840270 3f77583a     .}....w?p...:Xw?
    e4d0:	be8586ce 3f772417 be870ada 3f76ef5b     .....$w?....[.v?
    e4e0:	be888e93 3f76ba07 be8a11f8 3f76841b     ......v?......v?
    e4f0:	be8b9507 3f764d97 be8d17c0 3f76167a     .....Mv?....z.v?
    e500:	be8e9a22 3f75dec6 be901c2c 3f75a67b     ".....u?,...{.u?
    e510:	be919ddd 3f756d97 be931f35 3f75341d     .....mu?5....4u?
    e520:	be94a031 3f74fa0b be9620d2 3f74bf62     1.....t?. ..b.t?
    e530:	be97a117 3f748422 be9920fe 3f74484b     ....".t?. ..KHt?
    e540:	be9aa086 3f740bdd be9c1faf 3f73ced9     ......t?......s?
    e550:	be9d9e78 3f73913f be9f1cdf 3f73530e     x...?.s?.....Ss?
    e560:	bea09ae5 3f731447 bea21887 3f72d4eb     ....G.s?......r?
    e570:	bea395c5 3f7294f8 bea5129f 3f725470     ......r?....pTr?
    e580:	bea68f12 3f721352 bea80b1f 3f71d19f     ....R.r?......q?
    e590:	bea986c4 3f718f57 beab0201 3f714c7a     ....W.q?....zLq?
    e5a0:	beac7cd4 3f710908 beadf73c 3f70c502     .|....q?<.....p?
    e5b0:	beaf713a 3f708066 beb0eacb 3f703b37     :q..f.p?....7;p?
    e5c0:	beb263ef 3f6ff573 beb3dca5 3f6faf1b     .c..s.o?......o?
    e5d0:	beb554ec 3f6f6830 beb6ccc3 3f6f20b0     .T..0ho?..... o?
    e5e0:	beb8442a 3f6ed89e beb9bb1e 3f6e8ff8     *D....n?......n?
    e5f0:	bebb31a0 3f6e46be bebca7af 3f6dfcf2     .1...Fn?......m?
    e600:	bebe1d4a 3f6db293 bebf926f 3f6d67a1     J.....m?o....gm?
    e610:	bec1071e 3f6d1c1d bec27b55 3f6cd007     ......m?U{....l?
    e620:	bec3ef15 3f6c835e bec5625c 3f6c3624     ....^.l?\b..$6l?
    e630:	bec6d529 3f6be858 bec8477c 3f6b99fb     )...X.k?|G....k?
    e640:	bec9b953 3f6b4b0c becb2aae 3f6afb8c     S....Kk?.*....j?
    e650:	becc9b8b 3f6aab7b bece0bea 3f6a5ad9     ....{.j?.....Zj?
    e660:	becf7bca 3f6a09a7 bed0eb2a 3f69b7e4     .{....j?*.....i?
    e670:	bed25a09 3f696591 bed3c867 3f6912ae     .Z...ei?g.....i?
    e680:	bed53641 3f68bf3c bed6a399 3f686b39     A6..<.h?....9kh?
    e690:	bed8106b 3f6816a8 bed97cb9 3f67c187     k.....h?.|....g?
    e6a0:	bedae880 3f676bd8 bedc53c1 3f671599     .....kg?.S....g?
    e6b0:	beddbe79 3f66becc bedf28a9 3f666771     y.....f?.(..qgf?
    e6c0:	bee0924f 3f660f88 bee1fb6a 3f65b710     O.....f?j.....e?
    e6d0:	bee363fa 3f655e0b bee4cbfe 3f650479     .c...^e?....y.e?
    e6e0:	bee63375 3f64aa59 bee79a5d 3f644fac     u3..Y.d?]....Od?
    e6f0:	bee900b7 3f63f473 beea6681 3f6398ac     ....s.c?.f....c?
    e700:	beebcbbb 3f633c5a beed3063 3f62df7b     ....Z<c?c0..{.b?
    e710:	beee9479 3f628210 beeff7fb 3f62241a     y.....b?.....$b?
    e720:	bef15aea 3f61c598 bef2bd43 3f61668a     .Z....a?C....fa?
    e730:	bef41f07 3f6106f2 bef58035 3f60a6cf     ......a?5.....`?
    e740:	bef6e0cb 3f604621 bef840c8 3f5fe4e9     ....!F`?.@...._?
    e750:	bef9a02d 3f5f8327 befafef7 3f5f20db     -...'._?..... _?
    e760:	befc5d27 3f5ebe05 befdbabb 3f5e5aa6     ']....^?.....Z^?
    e770:	beff17b2 3f5df6be bf003a06 3f5d924d     ......]?.:..M.]?
    e780:	bf00e7e4 3f5d2d53 bf019573 3f5cc7d1     ....S-]?s.....\?
    e790:	bf0242b1 3f5c61c7 bf02ef9f 3f5bfb34     .B...a\?....4.[?
    e7a0:	bf039c3d 3f5b941a bf044889 3f5b2c79     =.....[?.H..y,[?
    e7b0:	bf04f484 3f5ac450 bf05a02c 3f5a5ba0     ....P.Z?,....[Z?
    e7c0:	bf064b82 3f59f26a bf06f686 3f5988ad     .K..j.Y?......Y?
    e7d0:	bf07a136 3f591e6a bf084b92 3f58b3a1     6...j.Y?.K....X?
    e7e0:	bf08f59b 3f584853 bf099f4e 3f57dc7f     ....SHX?N.....W?
    e7f0:	bf0a48ad 3f577026 bf0af1b7 3f570348     .H..&pW?....H.W?
    e800:	bf0b9a6b 3f5695e5 bf0c42c9 3f5627fe     k.....V?.B...'V?
    e810:	bf0cead0 3f55b993 bf0d9281 3f554aa4     ......U?.....JU?
    e820:	bf0e39da 3f54db31 bf0ee0db 3f546b3b     .9..1.T?....;kT?
    e830:	bf0f8784 3f53fac3 bf102dd5 3f5389c7     ......S?.-....S?
    e840:	bf10d3cd 3f531849 bf11796b 3f52a649     ....I.S?ky..I.R?
    e850:	bf121eb0 3f5233c6 bf12c39a 3f51c0c2     .....3R?......Q?
    e860:	bf13682a 3f514d3d bf140c5f 3f50d937     *h..=MQ?_...7.P?
    e870:	bf14b039 3f5064af bf1553b7 3f4fefa8     9....dP?.S....O?
    e880:	bf15f6d9 3f4f7a1f bf16999f 3f4f0417     .....zO?......O?
    e890:	bf173c07 3f4e8d90 bf17de12 3f4e1689     .<....N?......N?
    e8a0:	bf187fc0 3f4d9f02 bf19210f 3f4d26fd     ......M?.!...&M?
    e8b0:	bf19c200 3f4cae79 bf1a6293 3f4c3578     ....y.L?.b..x5L?
    e8c0:	bf1b02c6 3f4bbbf8 bf1ba299 3f4b41fa     ......K?.....AK?
    e8d0:	bf1c420c 3f4ac77f bf1ce11f 3f4a4c87     .B....J?.....LJ?
    e8e0:	bf1d7fd1 3f49d112 bf1e1e22 3f495521     ......I?"...!UI?
    e8f0:	bf1ebc12 3f48d8b3 bf1f599f 3f485bca     ......H?.Y...[H?
    e900:	bf1ff6cb 3f47de65 bf209393 3f476085     ....e.G?.. ..`G?
    e910:	bf212ff9 3f46e22a bf21cbfb 3f466354     ./!.*.F?..!.TcF?
    e920:	bf226799 3f45e403 bf2302d3 3f456439     .g"...E?..#.9dE?
    e930:	bf239da9 3f44e3f5 bf24381a 3f446337     ..#...D?.8$.7cD?
    e940:	bf24d225 3f43e200 bf256bcb 3f436051     %.$...C?.k%.Q`C?
    e950:	bf26050a 3f42de29 bf269de3 3f425b89     ..&.).B?..&..[B?
    e960:	bf273656 3f41d870 bf27ce61 3f4154e1     V6'.p.A?a.'..TA?
    e970:	bf286605 3f40d0da bf28fd41 3f404c5c     .f(...@?A.(.\L@?
    e980:	bf299415 3f3fc767 bf2a2a80 3f3f41fc     ..).g.??.**..A??
    e990:	bf2ac082 3f3ebc1b bf2b561b 3f3e35c5     ..*...>?.V+..5>?
    e9a0:	bf2beb4a 3f3daef9 bf2c800f 3f3d27b8     J.+...=?..,..'=?
    e9b0:	bf2d1469 3f3ca003 bf2da859 3f3c17d9     i.-...<?Y.-...<?
    e9c0:	bf2e3bde 3f3b8f3b bf2ecef7 3f3b0629     .;..;.;?....).;?
    e9d0:	bf2f61a5 3f3a7ca4 bf2ff3e6 3f39f2ac     .a/..|:?../...9?
    e9e0:	bf3085bb 3f396842 bf311722 3f38dd65     ..0.Bh9?".1.e.8?
    e9f0:	bf31a81d 3f385216 bf3238aa 3f37c655     ..1..R8?.82.U.7?
    ea00:	bf32c8c9 3f373a23 bf33587a 3f36ad7f     ..2.#:7?zX3...6?
    ea10:	bf33e7bc 3f36206c bf34768f 3f3592e7     ..3.l 6?.v4...5?
    ea20:	bf3504f3 3f3504f3 bf3592e7 3f34768f     ..5...5?..5..v4?
    ea30:	bf36206c 3f33e7bc bf36ad7f 3f33587a     l 6...3?..6.zX3?
    ea40:	bf373a23 3f32c8c9 bf37c655 3f3238aa     #:7...2?U.7..82?
    ea50:	bf385216 3f31a81d bf38dd65 3f311722     .R8...1?e.8.".1?
    ea60:	bf396842 3f3085bb bf39f2ac 3f2ff3e6     Bh9...0?..9.../?
    ea70:	bf3a7ca4 3f2f61a5 bf3b0629 3f2ecef7     .|:..a/?).;....?
    ea80:	bf3b8f3b 3f2e3bde bf3c17d9 3f2da859     ;.;..;.?..<.Y.-?
    ea90:	bf3ca003 3f2d1469 bf3d27b8 3f2c800f     ..<.i.-?.'=...,?
    eaa0:	bf3daef9 3f2beb4a bf3e35c5 3f2b561b     ..=.J.+?.5>..V+?
    eab0:	bf3ebc1b 3f2ac082 bf3f41fc 3f2a2a80     ..>...*?.A?..**?
    eac0:	bf3fc767 3f299415 bf404c5c 3f28fd41     g.?...)?\L@.A.(?
    ead0:	bf40d0da 3f286605 bf4154e1 3f27ce61     ..@..f(?.TA.a.'?
    eae0:	bf41d870 3f273656 bf425b89 3f269de3     p.A.V6'?.[B...&?
    eaf0:	bf42de29 3f26050a bf436051 3f256bcb     ).B...&?Q`C..k%?
    eb00:	bf43e200 3f24d225 bf446337 3f24381a     ..C.%.$?7cD..8$?
    eb10:	bf44e3f5 3f239da9 bf456439 3f2302d3     ..D...#?9dE...#?
    eb20:	bf45e403 3f226799 bf466354 3f21cbfb     ..E..g"?TcF...!?
    eb30:	bf46e22a 3f212ff9 bf476085 3f209393     *.F../!?.`G... ?
    eb40:	bf47de65 3f1ff6cb bf485bca 3f1f599f     e.G....?.[H..Y.?
    eb50:	bf48d8b3 3f1ebc12 bf495521 3f1e1e22     ..H....?!UI."..?
    eb60:	bf49d112 3f1d7fd1 bf4a4c87 3f1ce11f     ..I....?.LJ....?
    eb70:	bf4ac77f 3f1c420c bf4b41fa 3f1ba299     ..J..B.?.AK....?
    eb80:	bf4bbbf8 3f1b02c6 bf4c3578 3f1a6293     ..K....?x5L..b.?
    eb90:	bf4cae79 3f19c200 bf4d26fd 3f19210f     y.L....?.&M..!.?
    eba0:	bf4d9f02 3f187fc0 bf4e1689 3f17de12     ..M....?..N....?
    ebb0:	bf4e8d90 3f173c07 bf4f0417 3f16999f     ..N..<.?..O....?
    ebc0:	bf4f7a1f 3f15f6d9 bf4fefa8 3f1553b7     .zO....?..O..S.?
    ebd0:	bf5064af 3f14b039 bf50d937 3f140c5f     .dP.9..?7.P._..?
    ebe0:	bf514d3d 3f13682a bf51c0c2 3f12c39a     =MQ.*h.?..Q....?
    ebf0:	bf5233c6 3f121eb0 bf52a649 3f11796b     .3R....?I.R.ky.?
    ec00:	bf531849 3f10d3cd bf5389c7 3f102dd5     I.S....?..S..-.?
    ec10:	bf53fac3 3f0f8784 bf546b3b 3f0ee0db     ..S....?;kT....?
    ec20:	bf54db31 3f0e39da bf554aa4 3f0d9281     1.T..9.?.JU....?
    ec30:	bf55b993 3f0cead0 bf5627fe 3f0c42c9     ..U....?.'V..B.?
    ec40:	bf5695e5 3f0b9a6b bf570348 3f0af1b7     ..V.k..?H.W....?
    ec50:	bf577026 3f0a48ad bf57dc7f 3f099f4e     &pW..H.?..W.N..?
    ec60:	bf584853 3f08f59b bf58b3a1 3f084b92     SHX....?..X..K.?
    ec70:	bf591e6a 3f07a136 bf5988ad 3f06f686     j.Y.6..?..Y....?
    ec80:	bf59f26a 3f064b82 bf5a5ba0 3f05a02c     j.Y..K.?.[Z.,..?
    ec90:	bf5ac450 3f04f484 bf5b2c79 3f044889     P.Z....?y,[..H.?
    eca0:	bf5b941a 3f039c3d bf5bfb34 3f02ef9f     ..[.=..?4.[....?
    ecb0:	bf5c61c7 3f0242b1 bf5cc7d1 3f019573     .a\..B.?..\.s..?
    ecc0:	bf5d2d53 3f00e7e4 bf5d924d 3f003a06     S-]....?M.]..:.?
    ecd0:	bf5df6be 3eff17b2 bf5e5aa6 3efdbabb     ..]....>.Z^....>
    ece0:	bf5ebe05 3efc5d27 bf5f20db 3efafef7     ..^.'].>. _....>
    ecf0:	bf5f8327 3ef9a02d bf5fe4e9 3ef840c8     '._.-..>.._..@.>
    ed00:	bf604621 3ef6e0cb bf60a6cf 3ef58035     !F`....>..`.5..>
    ed10:	bf6106f2 3ef41f07 bf61668a 3ef2bd43     ..a....>.fa.C..>
    ed20:	bf61c598 3ef15aea bf62241a 3eeff7fb     ..a..Z.>.$b....>
    ed30:	bf628210 3eee9479 bf62df7b 3eed3063     ..b.y..>{.b.c0.>
    ed40:	bf633c5a 3eebcbbb bf6398ac 3eea6681     Z<c....>..c..f.>
    ed50:	bf63f473 3ee900b7 bf644fac 3ee79a5d     s.c....>.Od.]..>
    ed60:	bf64aa59 3ee63375 bf650479 3ee4cbfe     Y.d.u3.>y.e....>
    ed70:	bf655e0b 3ee363fa bf65b710 3ee1fb6a     .^e..c.>..e.j..>
    ed80:	bf660f88 3ee0924f bf666771 3edf28a9     ..f.O..>qgf..(.>
    ed90:	bf66becc 3eddbe79 bf671599 3edc53c1     ..f.y..>..g..S.>
    eda0:	bf676bd8 3edae880 bf67c187 3ed97cb9     .kg....>..g..|.>
    edb0:	bf6816a8 3ed8106b bf686b39 3ed6a399     ..h.k..>9kh....>
    edc0:	bf68bf3c 3ed53641 bf6912ae 3ed3c867     <.h.A6.>..i.g..>
    edd0:	bf696591 3ed25a09 bf69b7e4 3ed0eb2a     .ei..Z.>..i.*..>
    ede0:	bf6a09a7 3ecf7bca bf6a5ad9 3ece0bea     ..j..{.>.Zj....>
    edf0:	bf6aab7b 3ecc9b8b bf6afb8c 3ecb2aae     {.j....>..j..*.>
    ee00:	bf6b4b0c 3ec9b953 bf6b99fb 3ec8477c     .Kk.S..>..k.|G.>
    ee10:	bf6be858 3ec6d529 bf6c3624 3ec5625c     X.k.)..>$6l.\b.>
    ee20:	bf6c835e 3ec3ef15 bf6cd007 3ec27b55     ^.l....>..l.U{.>
    ee30:	bf6d1c1d 3ec1071e bf6d67a1 3ebf926f     ..m....>.gm.o..>
    ee40:	bf6db293 3ebe1d4a bf6dfcf2 3ebca7af     ..m.J..>..m....>
    ee50:	bf6e46be 3ebb31a0 bf6e8ff8 3eb9bb1e     .Fn..1.>..n....>
    ee60:	bf6ed89e 3eb8442a bf6f20b0 3eb6ccc3     ..n.*D.>. o....>
    ee70:	bf6f6830 3eb554ec bf6faf1b 3eb3dca5     0ho..T.>..o....>
    ee80:	bf6ff573 3eb263ef bf703b37 3eb0eacb     s.o..c.>7;p....>
    ee90:	bf708066 3eaf713a bf70c502 3eadf73c     f.p.:q.>..p.<..>
    eea0:	bf710908 3eac7cd4 bf714c7a 3eab0201     ..q..|.>zLq....>
    eeb0:	bf718f57 3ea986c4 bf71d19f 3ea80b1f     W.q....>..q....>
    eec0:	bf721352 3ea68f12 bf725470 3ea5129f     R.r....>pTr....>
    eed0:	bf7294f8 3ea395c5 bf72d4eb 3ea21887     ..r....>..r....>
    eee0:	bf731447 3ea09ae5 bf73530e 3e9f1cdf     G.s....>.Ss....>
    eef0:	bf73913f 3e9d9e78 bf73ced9 3e9c1faf     ?.s.x..>..s....>
    ef00:	bf740bdd 3e9aa086 bf74484b 3e9920fe     ..t....>KHt.. .>
    ef10:	bf748422 3e97a117 bf74bf62 3e9620d2     ".t....>b.t.. .>
    ef20:	bf74fa0b 3e94a031 bf75341d 3e931f35     ..t.1..>.4u.5..>
    ef30:	bf756d97 3e919ddd bf75a67b 3e901c2c     .mu....>{.u.,..>
    ef40:	bf75dec6 3e8e9a22 bf76167a 3e8d17c0     ..u."..>z.v....>
    ef50:	bf764d97 3e8b9507 bf76841b 3e8a11f8     .Mv....>..v....>
    ef60:	bf76ba07 3e888e93 bf76ef5b 3e870ada     ..v....>[.v....>
    ef70:	bf772417 3e8586ce bf77583a 3e840270     .$w....>:Xw.p..>
    ef80:	bf778bc5 3e827dc0 bf77beb7 3e80f8c0     ..w..}.>..w....>
    ef90:	bf77f110 3e7ee6e1 bf7822d1 3e7bdba4     ..w...~>."x...{>
    efa0:	bf7853f8 3e78cfcc bf788486 3e75c35a     .Sx...x>..x.Z.u>
    efb0:	bf78b47b 3e72b651 bf78e3d6 3e6fa8b2     {.x.Q.r>..x...o>
    efc0:	bf791298 3e6c9a7f bf7940c0 3e698bba     ..y...l>.@y...i>
    efd0:	bf796e4e 3e667c66 bf799b43 3e636c83     Nny.f|f>C.y..lc>
    efe0:	bf79c79d 3e605c13 bf79f35e 3e5d4b1a     ..y..\`>^.y..K]>
    eff0:	bf7a1e84 3e5a3997 bf7a4910 3e57278f     ..z..9Z>.Iz..'W>
    f000:	bf7a7302 3e541501 bf7a9c59 3e5101f1     .sz...T>Y.z...Q>
    f010:	bf7ac516 3e4dee60 bf7aed37 3e4ada4f     ..z.`.M>7.z.O.J>
    f020:	bf7b14be 3e47c5c2 bf7b3bab 3e44b0b9     ..{...G>.;{...D>
    f030:	bf7b61fc 3e419b37 bf7b87b2 3e3e853e     .a{.7.A>..{.>.>>
    f040:	bf7baccd 3e3b6ecf bf7bd14d 3e3857ec     ..{..n;>M.{..W8>
    f050:	bf7bf531 3e354098 bf7c187a 3e3228d4     1.{..@5>z.|..(2>
    f060:	bf7c3b28 3e2f10a2 bf7c5d3a 3e2bf804     (;|.../>:]|...+>
    f070:	bf7c7eb0 3e28defc bf7c9f8a 3e25c58c     .~|...(>..|...%>
    f080:	bf7cbfc9 3e22abb6 bf7cdf6c 3e1f917b     ..|...">l.|.{..>
    f090:	bf7cfe73 3e1c76de bf7d1cdd 3e195be0     s.|..v.>..}..[.>
    f0a0:	bf7d3aac 3e164083 bf7d57de 3e1324ca     .:}..@.>.W}..$.>
    f0b0:	bf7d7474 3e1008b7 bf7d906e 3e0cec4a     tt}....>n.}.J..>
    f0c0:	bf7dabcc 3e09cf86 bf7dc68c 3e06b26e     ..}....>..}.n..>
    f0d0:	bf7de0b1 3e039502 bf7dfa38 3e007745     ..}....>8.}.Ew.>
    f0e0:	bf7e1324 3dfab273 bf7e2b72 3df475c0     $.~.s..=r+~..u.=
    f0f0:	bf7e4323 3dee3876 bf7e5a38 3de7fa9a     #C~.v8.=8Z~....=
    f100:	bf7e70b0 3de1bc2e bf7e868b 3ddb7d37     .p~....=..~.7}.=
    f110:	bf7e9bc9 3dd53db9 bf7eb069 3dcefdb7     ..~..=.=i.~....=
    f120:	bf7ec46d 3dc8bd36 bf7ed7d4 3dc27c39     m.~.6..=..~.9|.=
    f130:	bf7eea9d 3dbc3ac3 bf7efcc9 3db5f8da     ..~..:.=..~....=
    f140:	bf7f0e58 3dafb680 bf7f1f49 3da973ba     X......=I....s.=
    f150:	bf7f2f9d 3da3308c bf7f3f54 3d9cecf9     ./...0.=T?.....=
    f160:	bf7f4e6d 3d96a905 bf7f5ce9 3d9064b4     mN.....=.\...d.=
    f170:	bf7f6ac7 3d8a200a bf7f7808 3d83db0a     .j... .=.x.....=
    f180:	bf7f84ab 3d7b2b74 bf7f90b1 3d6ea038     ....t+{=....8.n=
    f190:	bf7f9c18 3d621468 bf7fa6e3 3d55880e     ....h.b=......U=
    f1a0:	bf7fb10f 3d48fb2f bf7fba9e 3d3c6dd5     ..../.H=.....m<=
    f1b0:	bf7fc38f 3d2fe007 bf7fcbe2 3d2351cc     ....../=.....Q#=
    f1c0:	bf7fd398 3d16c32c bf7fdaaf 3d0a342f     ....,..=..../4.=
    f1d0:	bf7fe129 3cfb49b9 bf7fe705 3ce22a7b     )....I.<....{*.<
    f1e0:	bf7fec43 3cc90ab0 bf7ff0e3 3cafea69     C......<....i..<
    f1f0:	bf7ff4e6 3c96c9b6 bf7ff84a 3c7b514b     .......<J...KQ{<
    f200:	bf7ffb11 3c490e90 bf7ffd39 3c16cb59     ......I<9...Y..<
    f210:	bf7ffec4 3bc90f89 bf7fffb1 3b490fc7     .......;......I;
    f220:	bf800000 00000000 bf7fffb1 bb490fc7     ..............I.
    f230:	bf7ffec4 bbc90f89 bf7ffd39 bc16cb59     ........9...Y...
    f240:	bf7ffb11 bc490e90 bf7ff84a bc7b514b     ......I.J...KQ{.
    f250:	bf7ff4e6 bc96c9b6 bf7ff0e3 bcafea69     ............i...
    f260:	bf7fec43 bcc90ab0 bf7fe705 bce22a7b     C...........{*..
    f270:	bf7fe129 bcfb49b9 bf7fdaaf bd0a342f     )....I....../4..
    f280:	bf7fd398 bd16c32c bf7fcbe2 bd2351cc     ....,........Q#.
    f290:	bf7fc38f bd2fe007 bf7fba9e bd3c6dd5     ....../......m<.
    f2a0:	bf7fb10f bd48fb2f bf7fa6e3 bd55880e     ..../.H.......U.
    f2b0:	bf7f9c18 bd621468 bf7f90b1 bd6ea038     ....h.b.....8.n.
    f2c0:	bf7f84ab bd7b2b74 bf7f7808 bd83db0a     ....t+{..x......
    f2d0:	bf7f6ac7 bd8a200a bf7f5ce9 bd9064b4     .j... ...\...d..
    f2e0:	bf7f4e6d bd96a905 bf7f3f54 bd9cecf9     mN......T?......
    f2f0:	bf7f2f9d bda3308c bf7f1f49 bda973ba     ./...0..I....s..
    f300:	bf7f0e58 bdafb680 bf7efcc9 bdb5f8da     X.........~.....
    f310:	bf7eea9d bdbc3ac3 bf7ed7d4 bdc27c39     ..~..:....~.9|..
    f320:	bf7ec46d bdc8bd36 bf7eb069 bdcefdb7     m.~.6...i.~.....
    f330:	bf7e9bc9 bdd53db9 bf7e868b bddb7d37     ..~..=....~.7}..
    f340:	bf7e70b0 bde1bc2e bf7e5a38 bde7fa9a     .p~.....8Z~.....
    f350:	bf7e4323 bdee3876 bf7e2b72 bdf475c0     #C~.v8..r+~..u..
    f360:	bf7e1324 bdfab273 bf7dfa38 be007745     $.~.s...8.}.Ew..
    f370:	bf7de0b1 be039502 bf7dc68c be06b26e     ..}.......}.n...
    f380:	bf7dabcc be09cf86 bf7d906e be0cec4a     ..}.....n.}.J...
    f390:	bf7d7474 be1008b7 bf7d57de be1324ca     tt}......W}..$..
    f3a0:	bf7d3aac be164083 bf7d1cdd be195be0     .:}..@....}..[..
    f3b0:	bf7cfe73 be1c76de bf7cdf6c be1f917b     s.|..v..l.|.{...
    f3c0:	bf7cbfc9 be22abb6 bf7c9f8a be25c58c     ..|..."...|...%.
    f3d0:	bf7c7eb0 be28defc bf7c5d3a be2bf804     .~|...(.:]|...+.
    f3e0:	bf7c3b28 be2f10a2 bf7c187a be3228d4     (;|.../.z.|..(2.
    f3f0:	bf7bf531 be354098 bf7bd14d be3857ec     1.{..@5.M.{..W8.
    f400:	bf7baccd be3b6ecf bf7b87b2 be3e853e     ..{..n;...{.>.>.
    f410:	bf7b61fc be419b37 bf7b3bab be44b0b9     .a{.7.A..;{...D.
    f420:	bf7b14be be47c5c2 bf7aed37 be4ada4f     ..{...G.7.z.O.J.
    f430:	bf7ac516 be4dee60 bf7a9c59 be5101f1     ..z.`.M.Y.z...Q.
    f440:	bf7a7302 be541501 bf7a4910 be57278f     .sz...T..Iz..'W.
    f450:	bf7a1e84 be5a3997 bf79f35e be5d4b1a     ..z..9Z.^.y..K].
    f460:	bf79c79d be605c13 bf799b43 be636c83     ..y..\`.C.y..lc.
    f470:	bf796e4e be667c66 bf7940c0 be698bba     Nny.f|f..@y...i.
    f480:	bf791298 be6c9a7f bf78e3d6 be6fa8b2     ..y...l...x...o.
    f490:	bf78b47b be72b651 bf788486 be75c35a     {.x.Q.r...x.Z.u.
    f4a0:	bf7853f8 be78cfcc bf7822d1 be7bdba4     .Sx...x.."x...{.
    f4b0:	bf77f110 be7ee6e1 bf77beb7 be80f8c0     ..w...~...w.....
    f4c0:	bf778bc5 be827dc0 bf77583a be840270     ..w..}..:Xw.p...
    f4d0:	bf772417 be8586ce bf76ef5b be870ada     .$w.....[.v.....
    f4e0:	bf76ba07 be888e93 bf76841b be8a11f8     ..v.......v.....
    f4f0:	bf764d97 be8b9507 bf76167a be8d17c0     .Mv.....z.v.....
    f500:	bf75dec6 be8e9a22 bf75a67b be901c2c     ..u."...{.u.,...
    f510:	bf756d97 be919ddd bf75341d be931f35     .mu......4u.5...
    f520:	bf74fa0b be94a031 bf74bf62 be9620d2     ..t.1...b.t.. ..
    f530:	bf748422 be97a117 bf74484b be9920fe     ".t.....KHt.. ..
    f540:	bf740bdd be9aa086 bf73ced9 be9c1faf     ..t.......s.....
    f550:	bf73913f be9d9e78 bf73530e be9f1cdf     ?.s.x....Ss.....
    f560:	bf731447 bea09ae5 bf72d4eb bea21887     G.s.......r.....
    f570:	bf7294f8 bea395c5 bf725470 bea5129f     ..r.....pTr.....
    f580:	bf721352 bea68f12 bf71d19f bea80b1f     R.r.......q.....
    f590:	bf718f57 bea986c4 bf714c7a beab0201     W.q.....zLq.....
    f5a0:	bf710908 beac7cd4 bf70c502 beadf73c     ..q..|....p.<...
    f5b0:	bf708066 beaf713a bf703b37 beb0eacb     f.p.:q..7;p.....
    f5c0:	bf6ff573 beb263ef bf6faf1b beb3dca5     s.o..c....o.....
    f5d0:	bf6f6830 beb554ec bf6f20b0 beb6ccc3     0ho..T... o.....
    f5e0:	bf6ed89e beb8442a bf6e8ff8 beb9bb1e     ..n.*D....n.....
    f5f0:	bf6e46be bebb31a0 bf6dfcf2 bebca7af     .Fn..1....m.....
    f600:	bf6db293 bebe1d4a bf6d67a1 bebf926f     ..m.J....gm.o...
    f610:	bf6d1c1d bec1071e bf6cd007 bec27b55     ..m.......l.U{..
    f620:	bf6c835e bec3ef15 bf6c3624 bec5625c     ^.l.....$6l.\b..
    f630:	bf6be858 bec6d529 bf6b99fb bec8477c     X.k.).....k.|G..
    f640:	bf6b4b0c bec9b953 bf6afb8c becb2aae     .Kk.S.....j..*..
    f650:	bf6aab7b becc9b8b bf6a5ad9 bece0bea     {.j......Zj.....
    f660:	bf6a09a7 becf7bca bf69b7e4 bed0eb2a     ..j..{....i.*...
    f670:	bf696591 bed25a09 bf6912ae bed3c867     .ei..Z....i.g...
    f680:	bf68bf3c bed53641 bf686b39 bed6a399     <.h.A6..9kh.....
    f690:	bf6816a8 bed8106b bf67c187 bed97cb9     ..h.k.....g..|..
    f6a0:	bf676bd8 bedae880 bf671599 bedc53c1     .kg.......g..S..
    f6b0:	bf66becc beddbe79 bf666771 bedf28a9     ..f.y...qgf..(..
    f6c0:	bf660f88 bee0924f bf65b710 bee1fb6a     ..f.O.....e.j...
    f6d0:	bf655e0b bee363fa bf650479 bee4cbfe     .^e..c..y.e.....
    f6e0:	bf64aa59 bee63375 bf644fac bee79a5d     Y.d.u3...Od.]...
    f6f0:	bf63f473 bee900b7 bf6398ac beea6681     s.c.......c..f..
    f700:	bf633c5a beebcbbb bf62df7b beed3063     Z<c.....{.b.c0..
    f710:	bf628210 beee9479 bf62241a beeff7fb     ..b.y....$b.....
    f720:	bf61c598 bef15aea bf61668a bef2bd43     ..a..Z...fa.C...
    f730:	bf6106f2 bef41f07 bf60a6cf bef58035     ..a.......`.5...
    f740:	bf604621 bef6e0cb bf5fe4e9 bef840c8     !F`......._..@..
    f750:	bf5f8327 bef9a02d bf5f20db befafef7     '._.-.... _.....
    f760:	bf5ebe05 befc5d27 bf5e5aa6 befdbabb     ..^.']...Z^.....
    f770:	bf5df6be beff17b2 bf5d924d bf003a06     ..].....M.]..:..
    f780:	bf5d2d53 bf00e7e4 bf5cc7d1 bf019573     S-].......\.s...
    f790:	bf5c61c7 bf0242b1 bf5bfb34 bf02ef9f     .a\..B..4.[.....
    f7a0:	bf5b941a bf039c3d bf5b2c79 bf044889     ..[.=...y,[..H..
    f7b0:	bf5ac450 bf04f484 bf5a5ba0 bf05a02c     P.Z......[Z.,...
    f7c0:	bf59f26a bf064b82 bf5988ad bf06f686     j.Y..K....Y.....
    f7d0:	bf591e6a bf07a136 bf58b3a1 bf084b92     j.Y.6.....X..K..
    f7e0:	bf584853 bf08f59b bf57dc7f bf099f4e     SHX.......W.N...
    f7f0:	bf577026 bf0a48ad bf570348 bf0af1b7     &pW..H..H.W.....
    f800:	bf5695e5 bf0b9a6b bf5627fe bf0c42c9     ..V.k....'V..B..
    f810:	bf55b993 bf0cead0 bf554aa4 bf0d9281     ..U......JU.....
    f820:	bf54db31 bf0e39da bf546b3b bf0ee0db     1.T..9..;kT.....
    f830:	bf53fac3 bf0f8784 bf5389c7 bf102dd5     ..S.......S..-..
    f840:	bf531849 bf10d3cd bf52a649 bf11796b     I.S.....I.R.ky..
    f850:	bf5233c6 bf121eb0 bf51c0c2 bf12c39a     .3R.......Q.....
    f860:	bf514d3d bf13682a bf50d937 bf140c5f     =MQ.*h..7.P._...
    f870:	bf5064af bf14b039 bf4fefa8 bf1553b7     .dP.9.....O..S..
    f880:	bf4f7a1f bf15f6d9 bf4f0417 bf16999f     .zO.......O.....
    f890:	bf4e8d90 bf173c07 bf4e1689 bf17de12     ..N..<....N.....
    f8a0:	bf4d9f02 bf187fc0 bf4d26fd bf19210f     ..M......&M..!..
    f8b0:	bf4cae79 bf19c200 bf4c3578 bf1a6293     y.L.....x5L..b..
    f8c0:	bf4bbbf8 bf1b02c6 bf4b41fa bf1ba299     ..K......AK.....
    f8d0:	bf4ac77f bf1c420c bf4a4c87 bf1ce11f     ..J..B...LJ.....
    f8e0:	bf49d112 bf1d7fd1 bf495521 bf1e1e22     ..I.....!UI."...
    f8f0:	bf48d8b3 bf1ebc12 bf485bca bf1f599f     ..H......[H..Y..
    f900:	bf47de65 bf1ff6cb bf476085 bf209393     e.G......`G... .
    f910:	bf46e22a bf212ff9 bf466354 bf21cbfb     *.F../!.TcF...!.
    f920:	bf45e403 bf226799 bf456439 bf2302d3     ..E..g".9dE...#.
    f930:	bf44e3f5 bf239da9 bf446337 bf24381a     ..D...#.7cD..8$.
    f940:	bf43e200 bf24d225 bf436051 bf256bcb     ..C.%.$.Q`C..k%.
    f950:	bf42de29 bf26050a bf425b89 bf269de3     ).B...&..[B...&.
    f960:	bf41d870 bf273656 bf4154e1 bf27ce61     p.A.V6'..TA.a.'.
    f970:	bf40d0da bf286605 bf404c5c bf28fd41     ..@..f(.\L@.A.(.
    f980:	bf3fc767 bf299415 bf3f41fc bf2a2a80     g.?...)..A?..**.
    f990:	bf3ebc1b bf2ac082 bf3e35c5 bf2b561b     ..>...*..5>..V+.
    f9a0:	bf3daef9 bf2beb4a bf3d27b8 bf2c800f     ..=.J.+..'=...,.
    f9b0:	bf3ca003 bf2d1469 bf3c17d9 bf2da859     ..<.i.-...<.Y.-.
    f9c0:	bf3b8f3b bf2e3bde bf3b0629 bf2ecef7     ;.;..;..).;.....
    f9d0:	bf3a7ca4 bf2f61a5 bf39f2ac bf2ff3e6     .|:..a/...9.../.
    f9e0:	bf396842 bf3085bb bf38dd65 bf311722     Bh9...0.e.8.".1.
    f9f0:	bf385216 bf31a81d bf37c655 bf3238aa     .R8...1.U.7..82.
    fa00:	bf373a23 bf32c8c9 bf36ad7f bf33587a     #:7...2...6.zX3.
    fa10:	bf36206c bf33e7bc bf3592e7 bf34768f     l 6...3...5..v4.
    fa20:	bf3504f3 bf3504f3 bf34768f bf3592e7     ..5...5..v4...5.
    fa30:	bf33e7bc bf36206c bf33587a bf36ad7f     ..3.l 6.zX3...6.
    fa40:	bf32c8c9 bf373a23 bf3238aa bf37c655     ..2.#:7..82.U.7.
    fa50:	bf31a81d bf385216 bf311722 bf38dd65     ..1..R8.".1.e.8.
    fa60:	bf3085bb bf396842 bf2ff3e6 bf39f2ac     ..0.Bh9.../...9.
    fa70:	bf2f61a5 bf3a7ca4 bf2ecef7 bf3b0629     .a/..|:.....).;.
    fa80:	bf2e3bde bf3b8f3b bf2da859 bf3c17d9     .;..;.;.Y.-...<.
    fa90:	bf2d1469 bf3ca003 bf2c800f bf3d27b8     i.-...<...,..'=.
    faa0:	bf2beb4a bf3daef9 bf2b561b bf3e35c5     J.+...=..V+..5>.
    fab0:	bf2ac082 bf3ebc1b bf2a2a80 bf3f41fc     ..*...>..**..A?.
    fac0:	bf299415 bf3fc767 bf28fd41 bf404c5c     ..).g.?.A.(.\L@.
    fad0:	bf286605 bf40d0da bf27ce61 bf4154e1     .f(...@.a.'..TA.
    fae0:	bf273656 bf41d870 bf269de3 bf425b89     V6'.p.A...&..[B.
    faf0:	bf26050a bf42de29 bf256bcb bf436051     ..&.).B..k%.Q`C.
    fb00:	bf24d225 bf43e200 bf24381a bf446337     %.$...C..8$.7cD.
    fb10:	bf239da9 bf44e3f5 bf2302d3 bf456439     ..#...D...#.9dE.
    fb20:	bf226799 bf45e403 bf21cbfb bf466354     .g"...E...!.TcF.
    fb30:	bf212ff9 bf46e22a bf209393 bf476085     ./!.*.F... ..`G.
    fb40:	bf1ff6cb bf47de65 bf1f599f bf485bca     ....e.G..Y...[H.
    fb50:	bf1ebc12 bf48d8b3 bf1e1e22 bf495521     ......H."...!UI.
    fb60:	bf1d7fd1 bf49d112 bf1ce11f bf4a4c87     ......I......LJ.
    fb70:	bf1c420c bf4ac77f bf1ba299 bf4b41fa     .B....J......AK.
    fb80:	bf1b02c6 bf4bbbf8 bf1a6293 bf4c3578     ......K..b..x5L.
    fb90:	bf19c200 bf4cae79 bf19210f bf4d26fd     ....y.L..!...&M.
    fba0:	bf187fc0 bf4d9f02 bf17de12 bf4e1689     ......M.......N.
    fbb0:	bf173c07 bf4e8d90 bf16999f bf4f0417     .<....N.......O.
    fbc0:	bf15f6d9 bf4f7a1f bf1553b7 bf4fefa8     .....zO..S....O.
    fbd0:	bf14b039 bf5064af bf140c5f bf50d937     9....dP._...7.P.
    fbe0:	bf13682a bf514d3d bf12c39a bf51c0c2     *h..=MQ.......Q.
    fbf0:	bf121eb0 bf5233c6 bf11796b bf52a649     .....3R.ky..I.R.
    fc00:	bf10d3cd bf531849 bf102dd5 bf5389c7     ....I.S..-....S.
    fc10:	bf0f8784 bf53fac3 bf0ee0db bf546b3b     ......S.....;kT.
    fc20:	bf0e39da bf54db31 bf0d9281 bf554aa4     .9..1.T......JU.
    fc30:	bf0cead0 bf55b993 bf0c42c9 bf5627fe     ......U..B...'V.
    fc40:	bf0b9a6b bf5695e5 bf0af1b7 bf570348     k.....V.....H.W.
    fc50:	bf0a48ad bf577026 bf099f4e bf57dc7f     .H..&pW.N.....W.
    fc60:	bf08f59b bf584853 bf084b92 bf58b3a1     ....SHX..K....X.
    fc70:	bf07a136 bf591e6a bf06f686 bf5988ad     6...j.Y.......Y.
    fc80:	bf064b82 bf59f26a bf05a02c bf5a5ba0     .K..j.Y.,....[Z.
    fc90:	bf04f484 bf5ac450 bf044889 bf5b2c79     ....P.Z..H..y,[.
    fca0:	bf039c3d bf5b941a bf02ef9f bf5bfb34     =.....[.....4.[.
    fcb0:	bf0242b1 bf5c61c7 bf019573 bf5cc7d1     .B...a\.s.....\.
    fcc0:	bf00e7e4 bf5d2d53 bf003a06 bf5d924d     ....S-]..:..M.].
    fcd0:	beff17b2 bf5df6be befdbabb bf5e5aa6     ......]......Z^.
    fce0:	befc5d27 bf5ebe05 befafef7 bf5f20db     ']....^...... _.
    fcf0:	bef9a02d bf5f8327 bef840c8 bf5fe4e9     -...'._..@...._.
    fd00:	bef6e0cb bf604621 bef58035 bf60a6cf     ....!F`.5.....`.
    fd10:	bef41f07 bf6106f2 bef2bd43 bf61668a     ......a.C....fa.
    fd20:	bef15aea bf61c598 beeff7fb bf62241a     .Z....a......$b.
    fd30:	beee9479 bf628210 beed3063 bf62df7b     y.....b.c0..{.b.
    fd40:	beebcbbb bf633c5a beea6681 bf6398ac     ....Z<c..f....c.
    fd50:	bee900b7 bf63f473 bee79a5d bf644fac     ....s.c.]....Od.
    fd60:	bee63375 bf64aa59 bee4cbfe bf650479     u3..Y.d.....y.e.
    fd70:	bee363fa bf655e0b bee1fb6a bf65b710     .c...^e.j.....e.
    fd80:	bee0924f bf660f88 bedf28a9 bf666771     O.....f..(..qgf.
    fd90:	beddbe79 bf66becc bedc53c1 bf671599     y.....f..S....g.
    fda0:	bedae880 bf676bd8 bed97cb9 bf67c187     .....kg..|....g.
    fdb0:	bed8106b bf6816a8 bed6a399 bf686b39     k.....h.....9kh.
    fdc0:	bed53641 bf68bf3c bed3c867 bf6912ae     A6..<.h.g.....i.
    fdd0:	bed25a09 bf696591 bed0eb2a bf69b7e4     .Z...ei.*.....i.
    fde0:	becf7bca bf6a09a7 bece0bea bf6a5ad9     .{....j......Zj.
    fdf0:	becc9b8b bf6aab7b becb2aae bf6afb8c     ....{.j..*....j.
    fe00:	bec9b953 bf6b4b0c bec8477c bf6b99fb     S....Kk.|G....k.
    fe10:	bec6d529 bf6be858 bec5625c bf6c3624     )...X.k.\b..$6l.
    fe20:	bec3ef15 bf6c835e bec27b55 bf6cd007     ....^.l.U{....l.
    fe30:	bec1071e bf6d1c1d bebf926f bf6d67a1     ......m.o....gm.
    fe40:	bebe1d4a bf6db293 bebca7af bf6dfcf2     J.....m.......m.
    fe50:	bebb31a0 bf6e46be beb9bb1e bf6e8ff8     .1...Fn.......n.
    fe60:	beb8442a bf6ed89e beb6ccc3 bf6f20b0     *D....n...... o.
    fe70:	beb554ec bf6f6830 beb3dca5 bf6faf1b     .T..0ho.......o.
    fe80:	beb263ef bf6ff573 beb0eacb bf703b37     .c..s.o.....7;p.
    fe90:	beaf713a bf708066 beadf73c bf70c502     :q..f.p.<.....p.
    fea0:	beac7cd4 bf710908 beab0201 bf714c7a     .|....q.....zLq.
    feb0:	bea986c4 bf718f57 bea80b1f bf71d19f     ....W.q.......q.
    fec0:	bea68f12 bf721352 bea5129f bf725470     ....R.r.....pTr.
    fed0:	bea395c5 bf7294f8 bea21887 bf72d4eb     ......r.......r.
    fee0:	bea09ae5 bf731447 be9f1cdf bf73530e     ....G.s......Ss.
    fef0:	be9d9e78 bf73913f be9c1faf bf73ced9     x...?.s.......s.
    ff00:	be9aa086 bf740bdd be9920fe bf74484b     ......t.. ..KHt.
    ff10:	be97a117 bf748422 be9620d2 bf74bf62     ....".t.. ..b.t.
    ff20:	be94a031 bf74fa0b be931f35 bf75341d     1.....t.5....4u.
    ff30:	be919ddd bf756d97 be901c2c bf75a67b     .....mu.,...{.u.
    ff40:	be8e9a22 bf75dec6 be8d17c0 bf76167a     ".....u.....z.v.
    ff50:	be8b9507 bf764d97 be8a11f8 bf76841b     .....Mv.......v.
    ff60:	be888e93 bf76ba07 be870ada bf76ef5b     ......v.....[.v.
    ff70:	be8586ce bf772417 be840270 bf77583a     .....$w.p...:Xw.
    ff80:	be827dc0 bf778bc5 be80f8c0 bf77beb7     .}....w.......w.
    ff90:	be7ee6e1 bf77f110 be7bdba4 bf7822d1     ..~...w...{.."x.
    ffa0:	be78cfcc bf7853f8 be75c35a bf788486     ..x..Sx.Z.u...x.
    ffb0:	be72b651 bf78b47b be6fa8b2 bf78e3d6     Q.r.{.x...o...x.
    ffc0:	be6c9a7f bf791298 be698bba bf7940c0     ..l...y...i..@y.
    ffd0:	be667c66 bf796e4e be636c83 bf799b43     f|f.Nny..lc.C.y.
    ffe0:	be605c13 bf79c79d be5d4b1a bf79f35e     .\`...y..K].^.y.
    fff0:	be5a3997 bf7a1e84 be57278f bf7a4910     .9Z...z..'W..Iz.
   10000:	be541501 bf7a7302 be5101f1 bf7a9c59     ..T..sz...Q.Y.z.
   10010:	be4dee60 bf7ac516 be4ada4f bf7aed37     `.M...z.O.J.7.z.
   10020:	be47c5c2 bf7b14be be44b0b9 bf7b3bab     ..G...{...D..;{.
   10030:	be419b37 bf7b61fc be3e853e bf7b87b2     7.A..a{.>.>...{.
   10040:	be3b6ecf bf7baccd be3857ec bf7bd14d     .n;...{..W8.M.{.
   10050:	be354098 bf7bf531 be3228d4 bf7c187a     .@5.1.{..(2.z.|.
   10060:	be2f10a2 bf7c3b28 be2bf804 bf7c5d3a     ../.(;|...+.:]|.
   10070:	be28defc bf7c7eb0 be25c58c bf7c9f8a     ..(..~|...%...|.
   10080:	be22abb6 bf7cbfc9 be1f917b bf7cdf6c     .."...|.{...l.|.
   10090:	be1c76de bf7cfe73 be195be0 bf7d1cdd     .v..s.|..[....}.
   100a0:	be164083 bf7d3aac be1324ca bf7d57de     .@...:}..$...W}.
   100b0:	be1008b7 bf7d7474 be0cec4a bf7d906e     ....tt}.J...n.}.
   100c0:	be09cf86 bf7dabcc be06b26e bf7dc68c     ......}.n.....}.
   100d0:	be039502 bf7de0b1 be007745 bf7dfa38     ......}.Ew..8.}.
   100e0:	bdfab273 bf7e1324 bdf475c0 bf7e2b72     s...$.~..u..r+~.
   100f0:	bdee3876 bf7e4323 bde7fa9a bf7e5a38     v8..#C~.....8Z~.
   10100:	bde1bc2e bf7e70b0 bddb7d37 bf7e868b     .....p~.7}....~.
   10110:	bdd53db9 bf7e9bc9 bdcefdb7 bf7eb069     .=....~.....i.~.
   10120:	bdc8bd36 bf7ec46d bdc27c39 bf7ed7d4     6...m.~.9|....~.
   10130:	bdbc3ac3 bf7eea9d bdb5f8da bf7efcc9     .:....~.......~.
   10140:	bdafb680 bf7f0e58 bda973ba bf7f1f49     ....X....s..I...
   10150:	bda3308c bf7f2f9d bd9cecf9 bf7f3f54     .0.../......T?..
   10160:	bd96a905 bf7f4e6d bd9064b4 bf7f5ce9     ....mN...d...\..
   10170:	bd8a200a bf7f6ac7 bd83db0a bf7f7808     . ...j.......x..
   10180:	bd7b2b74 bf7f84ab bd6ea038 bf7f90b1     t+{.....8.n.....
   10190:	bd621468 bf7f9c18 bd55880e bf7fa6e3     h.b.......U.....
   101a0:	bd48fb2f bf7fb10f bd3c6dd5 bf7fba9e     /.H......m<.....
   101b0:	bd2fe007 bf7fc38f bd2351cc bf7fcbe2     ../......Q#.....
   101c0:	bd16c32c bf7fd398 bd0a342f bf7fdaaf     ,......./4......
   101d0:	bcfb49b9 bf7fe129 bce22a7b bf7fe705     .I..)...{*......
   101e0:	bcc90ab0 bf7fec43 bcafea69 bf7ff0e3     ....C...i.......
   101f0:	bc96c9b6 bf7ff4e6 bc7b514b bf7ff84a     ........KQ{.J...
   10200:	bc490e90 bf7ffb11 bc16cb59 bf7ffd39     ..I.....Y...9...
   10210:	bbc90f89 bf7ffec4 bb490fc7 bf7fffb1     ..........I.....
   10220:	80000000 bf800000 3b490fc7 bf7fffb1     ..........I;....
   10230:	3bc90f89 bf7ffec4 3c16cb59 bf7ffd39     ...;....Y..<9...
   10240:	3c490e90 bf7ffb11 3c7b514b bf7ff84a     ..I<....KQ{<J...
   10250:	3c96c9b6 bf7ff4e6 3cafea69 bf7ff0e3     ...<....i..<....
   10260:	3cc90ab0 bf7fec43 3ce22a7b bf7fe705     ...<C...{*.<....
   10270:	3cfb49b9 bf7fe129 3d0a342f bf7fdaaf     .I.<).../4.=....
   10280:	3d16c32c bf7fd398 3d2351cc bf7fcbe2     ,..=.....Q#=....
   10290:	3d2fe007 bf7fc38f 3d3c6dd5 bf7fba9e     ../=.....m<=....
   102a0:	3d48fb2f bf7fb10f 3d55880e bf7fa6e3     /.H=......U=....
   102b0:	3d621468 bf7f9c18 3d6ea038 bf7f90b1     h.b=....8.n=....
   102c0:	3d7b2b74 bf7f84ab 3d83db0a bf7f7808     t+{=.......=.x..
   102d0:	3d8a200a bf7f6ac7 3d9064b4 bf7f5ce9     . .=.j...d.=.\..
   102e0:	3d96a905 bf7f4e6d 3d9cecf9 bf7f3f54     ...=mN.....=T?..
   102f0:	3da3308c bf7f2f9d 3da973ba bf7f1f49     .0.=./...s.=I...
   10300:	3dafb680 bf7f0e58 3db5f8da bf7efcc9     ...=X......=..~.
   10310:	3dbc3ac3 bf7eea9d 3dc27c39 bf7ed7d4     .:.=..~.9|.=..~.
   10320:	3dc8bd36 bf7ec46d 3dcefdb7 bf7eb069     6..=m.~....=i.~.
   10330:	3dd53db9 bf7e9bc9 3ddb7d37 bf7e868b     .=.=..~.7}.=..~.
   10340:	3de1bc2e bf7e70b0 3de7fa9a bf7e5a38     ...=.p~....=8Z~.
   10350:	3dee3876 bf7e4323 3df475c0 bf7e2b72     v8.=#C~..u.=r+~.
   10360:	3dfab273 bf7e1324 3e007745 bf7dfa38     s..=$.~.Ew.>8.}.
   10370:	3e039502 bf7de0b1 3e06b26e bf7dc68c     ...>..}.n..>..}.
   10380:	3e09cf86 bf7dabcc 3e0cec4a bf7d906e     ...>..}.J..>n.}.
   10390:	3e1008b7 bf7d7474 3e1324ca bf7d57de     ...>tt}..$.>.W}.
   103a0:	3e164083 bf7d3aac 3e195be0 bf7d1cdd     .@.>.:}..[.>..}.
   103b0:	3e1c76de bf7cfe73 3e1f917b bf7cdf6c     .v.>s.|.{..>l.|.
   103c0:	3e22abb6 bf7cbfc9 3e25c58c bf7c9f8a     ..">..|...%>..|.
   103d0:	3e28defc bf7c7eb0 3e2bf804 bf7c5d3a     ..(>.~|...+>:]|.
   103e0:	3e2f10a2 bf7c3b28 3e3228d4 bf7c187a     ../>(;|..(2>z.|.
   103f0:	3e354098 bf7bf531 3e3857ec bf7bd14d     .@5>1.{..W8>M.{.
   10400:	3e3b6ecf bf7baccd 3e3e853e bf7b87b2     .n;>..{.>.>>..{.
   10410:	3e419b37 bf7b61fc 3e44b0b9 bf7b3bab     7.A>.a{...D>.;{.
   10420:	3e47c5c2 bf7b14be 3e4ada4f bf7aed37     ..G>..{.O.J>7.z.
   10430:	3e4dee60 bf7ac516 3e5101f1 bf7a9c59     `.M>..z...Q>Y.z.
   10440:	3e541501 bf7a7302 3e57278f bf7a4910     ..T>.sz..'W>.Iz.
   10450:	3e5a3997 bf7a1e84 3e5d4b1a bf79f35e     .9Z>..z..K]>^.y.
   10460:	3e605c13 bf79c79d 3e636c83 bf799b43     .\`>..y..lc>C.y.
   10470:	3e667c66 bf796e4e 3e698bba bf7940c0     f|f>Nny...i>.@y.
   10480:	3e6c9a7f bf791298 3e6fa8b2 bf78e3d6     ..l>..y...o>..x.
   10490:	3e72b651 bf78b47b 3e75c35a bf788486     Q.r>{.x.Z.u>..x.
   104a0:	3e78cfcc bf7853f8 3e7bdba4 bf7822d1     ..x>.Sx...{>."x.
   104b0:	3e7ee6e1 bf77f110 3e80f8c0 bf77beb7     ..~>..w....>..w.
   104c0:	3e827dc0 bf778bc5 3e840270 bf77583a     .}.>..w.p..>:Xw.
   104d0:	3e8586ce bf772417 3e870ada bf76ef5b     ...>.$w....>[.v.
   104e0:	3e888e93 bf76ba07 3e8a11f8 bf76841b     ...>..v....>..v.
   104f0:	3e8b9507 bf764d97 3e8d17c0 bf76167a     ...>.Mv....>z.v.
   10500:	3e8e9a22 bf75dec6 3e901c2c bf75a67b     "..>..u.,..>{.u.
   10510:	3e919ddd bf756d97 3e931f35 bf75341d     ...>.mu.5..>.4u.
   10520:	3e94a031 bf74fa0b 3e9620d2 bf74bf62     1..>..t.. .>b.t.
   10530:	3e97a117 bf748422 3e9920fe bf74484b     ...>".t.. .>KHt.
   10540:	3e9aa086 bf740bdd 3e9c1faf bf73ced9     ...>..t....>..s.
   10550:	3e9d9e78 bf73913f 3e9f1cdf bf73530e     x..>?.s....>.Ss.
   10560:	3ea09ae5 bf731447 3ea21887 bf72d4eb     ...>G.s....>..r.
   10570:	3ea395c5 bf7294f8 3ea5129f bf725470     ...>..r....>pTr.
   10580:	3ea68f12 bf721352 3ea80b1f bf71d19f     ...>R.r....>..q.
   10590:	3ea986c4 bf718f57 3eab0201 bf714c7a     ...>W.q....>zLq.
   105a0:	3eac7cd4 bf710908 3eadf73c bf70c502     .|.>..q.<..>..p.
   105b0:	3eaf713a bf708066 3eb0eacb bf703b37     :q.>f.p....>7;p.
   105c0:	3eb263ef bf6ff573 3eb3dca5 bf6faf1b     .c.>s.o....>..o.
   105d0:	3eb554ec bf6f6830 3eb6ccc3 bf6f20b0     .T.>0ho....>. o.
   105e0:	3eb8442a bf6ed89e 3eb9bb1e bf6e8ff8     *D.>..n....>..n.
   105f0:	3ebb31a0 bf6e46be 3ebca7af bf6dfcf2     .1.>.Fn....>..m.
   10600:	3ebe1d4a bf6db293 3ebf926f bf6d67a1     J..>..m.o..>.gm.
   10610:	3ec1071e bf6d1c1d 3ec27b55 bf6cd007     ...>..m.U{.>..l.
   10620:	3ec3ef15 bf6c835e 3ec5625c bf6c3624     ...>^.l.\b.>$6l.
   10630:	3ec6d529 bf6be858 3ec8477c bf6b99fb     )..>X.k.|G.>..k.
   10640:	3ec9b953 bf6b4b0c 3ecb2aae bf6afb8c     S..>.Kk..*.>..j.
   10650:	3ecc9b8b bf6aab7b 3ece0bea bf6a5ad9     ...>{.j....>.Zj.
   10660:	3ecf7bca bf6a09a7 3ed0eb2a bf69b7e4     .{.>..j.*..>..i.
   10670:	3ed25a09 bf696591 3ed3c867 bf6912ae     .Z.>.ei.g..>..i.
   10680:	3ed53641 bf68bf3c 3ed6a399 bf686b39     A6.><.h....>9kh.
   10690:	3ed8106b bf6816a8 3ed97cb9 bf67c187     k..>..h..|.>..g.
   106a0:	3edae880 bf676bd8 3edc53c1 bf671599     ...>.kg..S.>..g.
   106b0:	3eddbe79 bf66becc 3edf28a9 bf666771     y..>..f..(.>qgf.
   106c0:	3ee0924f bf660f88 3ee1fb6a bf65b710     O..>..f.j..>..e.
   106d0:	3ee363fa bf655e0b 3ee4cbfe bf650479     .c.>.^e....>y.e.
   106e0:	3ee63375 bf64aa59 3ee79a5d bf644fac     u3.>Y.d.]..>.Od.
   106f0:	3ee900b7 bf63f473 3eea6681 bf6398ac     ...>s.c..f.>..c.
   10700:	3eebcbbb bf633c5a 3eed3063 bf62df7b     ...>Z<c.c0.>{.b.
   10710:	3eee9479 bf628210 3eeff7fb bf62241a     y..>..b....>.$b.
   10720:	3ef15aea bf61c598 3ef2bd43 bf61668a     .Z.>..a.C..>.fa.
   10730:	3ef41f07 bf6106f2 3ef58035 bf60a6cf     ...>..a.5..>..`.
   10740:	3ef6e0cb bf604621 3ef840c8 bf5fe4e9     ...>!F`..@.>.._.
   10750:	3ef9a02d bf5f8327 3efafef7 bf5f20db     -..>'._....>. _.
   10760:	3efc5d27 bf5ebe05 3efdbabb bf5e5aa6     '].>..^....>.Z^.
   10770:	3eff17b2 bf5df6be 3f003a06 bf5d924d     ...>..]..:.?M.].
   10780:	3f00e7e4 bf5d2d53 3f019573 bf5cc7d1     ...?S-].s..?..\.
   10790:	3f0242b1 bf5c61c7 3f02ef9f bf5bfb34     .B.?.a\....?4.[.
   107a0:	3f039c3d bf5b941a 3f044889 bf5b2c79     =..?..[..H.?y,[.
   107b0:	3f04f484 bf5ac450 3f05a02c bf5a5ba0     ...?P.Z.,..?.[Z.
   107c0:	3f064b82 bf59f26a 3f06f686 bf5988ad     .K.?j.Y....?..Y.
   107d0:	3f07a136 bf591e6a 3f084b92 bf58b3a1     6..?j.Y..K.?..X.
   107e0:	3f08f59b bf584853 3f099f4e bf57dc7f     ...?SHX.N..?..W.
   107f0:	3f0a48ad bf577026 3f0af1b7 bf570348     .H.?&pW....?H.W.
   10800:	3f0b9a6b bf5695e5 3f0c42c9 bf5627fe     k..?..V..B.?.'V.
   10810:	3f0cead0 bf55b993 3f0d9281 bf554aa4     ...?..U....?.JU.
   10820:	3f0e39da bf54db31 3f0ee0db bf546b3b     .9.?1.T....?;kT.
   10830:	3f0f8784 bf53fac3 3f102dd5 bf5389c7     ...?..S..-.?..S.
   10840:	3f10d3cd bf531849 3f11796b bf52a649     ...?I.S.ky.?I.R.
   10850:	3f121eb0 bf5233c6 3f12c39a bf51c0c2     ...?.3R....?..Q.
   10860:	3f13682a bf514d3d 3f140c5f bf50d937     *h.?=MQ._..?7.P.
   10870:	3f14b039 bf5064af 3f1553b7 bf4fefa8     9..?.dP..S.?..O.
   10880:	3f15f6d9 bf4f7a1f 3f16999f bf4f0417     ...?.zO....?..O.
   10890:	3f173c07 bf4e8d90 3f17de12 bf4e1689     .<.?..N....?..N.
   108a0:	3f187fc0 bf4d9f02 3f19210f bf4d26fd     ...?..M..!.?.&M.
   108b0:	3f19c200 bf4cae79 3f1a6293 bf4c3578     ...?y.L..b.?x5L.
   108c0:	3f1b02c6 bf4bbbf8 3f1ba299 bf4b41fa     ...?..K....?.AK.
   108d0:	3f1c420c bf4ac77f 3f1ce11f bf4a4c87     .B.?..J....?.LJ.
   108e0:	3f1d7fd1 bf49d112 3f1e1e22 bf495521     ...?..I."..?!UI.
   108f0:	3f1ebc12 bf48d8b3 3f1f599f bf485bca     ...?..H..Y.?.[H.
   10900:	3f1ff6cb bf47de65 3f209393 bf476085     ...?e.G... ?.`G.
   10910:	3f212ff9 bf46e22a 3f21cbfb bf466354     ./!?*.F...!?TcF.
   10920:	3f226799 bf45e403 3f2302d3 bf456439     .g"?..E...#?9dE.
   10930:	3f239da9 bf44e3f5 3f24381a bf446337     ..#?..D..8$?7cD.
   10940:	3f24d225 bf43e200 3f256bcb bf436051     %.$?..C..k%?Q`C.
   10950:	3f26050a bf42de29 3f269de3 bf425b89     ..&?).B...&?.[B.
   10960:	3f273656 bf41d870 3f27ce61 bf4154e1     V6'?p.A.a.'?.TA.
   10970:	3f286605 bf40d0da 3f28fd41 bf404c5c     .f(?..@.A.(?\L@.
   10980:	3f299415 bf3fc767 3f2a2a80 bf3f41fc     ..)?g.?..**?.A?.
   10990:	3f2ac082 bf3ebc1b 3f2b561b bf3e35c5     ..*?..>..V+?.5>.
   109a0:	3f2beb4a bf3daef9 3f2c800f bf3d27b8     J.+?..=...,?.'=.
   109b0:	3f2d1469 bf3ca003 3f2da859 bf3c17d9     i.-?..<.Y.-?..<.
   109c0:	3f2e3bde bf3b8f3b 3f2ecef7 bf3b0629     .;.?;.;....?).;.
   109d0:	3f2f61a5 bf3a7ca4 3f2ff3e6 bf39f2ac     .a/?.|:.../?..9.
   109e0:	3f3085bb bf396842 3f311722 bf38dd65     ..0?Bh9.".1?e.8.
   109f0:	3f31a81d bf385216 3f3238aa bf37c655     ..1?.R8..82?U.7.
   10a00:	3f32c8c9 bf373a23 3f33587a bf36ad7f     ..2?#:7.zX3?..6.
   10a10:	3f33e7bc bf36206c 3f34768f bf3592e7     ..3?l 6..v4?..5.
   10a20:	3f3504f3 bf3504f3 3f3592e7 bf34768f     ..5?..5...5?.v4.
   10a30:	3f36206c bf33e7bc 3f36ad7f bf33587a     l 6?..3...6?zX3.
   10a40:	3f373a23 bf32c8c9 3f37c655 bf3238aa     #:7?..2.U.7?.82.
   10a50:	3f385216 bf31a81d 3f38dd65 bf311722     .R8?..1.e.8?".1.
   10a60:	3f396842 bf3085bb 3f39f2ac bf2ff3e6     Bh9?..0...9?../.
   10a70:	3f3a7ca4 bf2f61a5 3f3b0629 bf2ecef7     .|:?.a/.).;?....
   10a80:	3f3b8f3b bf2e3bde 3f3c17d9 bf2da859     ;.;?.;....<?Y.-.
   10a90:	3f3ca003 bf2d1469 3f3d27b8 bf2c800f     ..<?i.-..'=?..,.
   10aa0:	3f3daef9 bf2beb4a 3f3e35c5 bf2b561b     ..=?J.+..5>?.V+.
   10ab0:	3f3ebc1b bf2ac082 3f3f41fc bf2a2a80     ..>?..*..A??.**.
   10ac0:	3f3fc767 bf299415 3f404c5c bf28fd41     g.??..).\L@?A.(.
   10ad0:	3f40d0da bf286605 3f4154e1 bf27ce61     ..@?.f(..TA?a.'.
   10ae0:	3f41d870 bf273656 3f425b89 bf269de3     p.A?V6'..[B?..&.
   10af0:	3f42de29 bf26050a 3f436051 bf256bcb     ).B?..&.Q`C?.k%.
   10b00:	3f43e200 bf24d225 3f446337 bf24381a     ..C?%.$.7cD?.8$.
   10b10:	3f44e3f5 bf239da9 3f456439 bf2302d3     ..D?..#.9dE?..#.
   10b20:	3f45e403 bf226799 3f466354 bf21cbfb     ..E?.g".TcF?..!.
   10b30:	3f46e22a bf212ff9 3f476085 bf209393     *.F?./!..`G?.. .
   10b40:	3f47de65 bf1ff6cb 3f485bca bf1f599f     e.G?.....[H?.Y..
   10b50:	3f48d8b3 bf1ebc12 3f495521 bf1e1e22     ..H?....!UI?"...
   10b60:	3f49d112 bf1d7fd1 3f4a4c87 bf1ce11f     ..I?.....LJ?....
   10b70:	3f4ac77f bf1c420c 3f4b41fa bf1ba299     ..J?.B...AK?....
   10b80:	3f4bbbf8 bf1b02c6 3f4c3578 bf1a6293     ..K?....x5L?.b..
   10b90:	3f4cae79 bf19c200 3f4d26fd bf19210f     y.L?.....&M?.!..
   10ba0:	3f4d9f02 bf187fc0 3f4e1689 bf17de12     ..M?......N?....
   10bb0:	3f4e8d90 bf173c07 3f4f0417 bf16999f     ..N?.<....O?....
   10bc0:	3f4f7a1f bf15f6d9 3f4fefa8 bf1553b7     .zO?......O?.S..
   10bd0:	3f5064af bf14b039 3f50d937 bf140c5f     .dP?9...7.P?_...
   10be0:	3f514d3d bf13682a 3f51c0c2 bf12c39a     =MQ?*h....Q?....
   10bf0:	3f5233c6 bf121eb0 3f52a649 bf11796b     .3R?....I.R?ky..
   10c00:	3f531849 bf10d3cd 3f5389c7 bf102dd5     I.S?......S?.-..
   10c10:	3f53fac3 bf0f8784 3f546b3b bf0ee0db     ..S?....;kT?....
   10c20:	3f54db31 bf0e39da 3f554aa4 bf0d9281     1.T?.9...JU?....
   10c30:	3f55b993 bf0cead0 3f5627fe bf0c42c9     ..U?.....'V?.B..
   10c40:	3f5695e5 bf0b9a6b 3f570348 bf0af1b7     ..V?k...H.W?....
   10c50:	3f577026 bf0a48ad 3f57dc7f bf099f4e     &pW?.H....W?N...
   10c60:	3f584853 bf08f59b 3f58b3a1 bf084b92     SHX?......X?.K..
   10c70:	3f591e6a bf07a136 3f5988ad bf06f686     j.Y?6.....Y?....
   10c80:	3f59f26a bf064b82 3f5a5ba0 bf05a02c     j.Y?.K...[Z?,...
   10c90:	3f5ac450 bf04f484 3f5b2c79 bf044889     P.Z?....y,[?.H..
   10ca0:	3f5b941a bf039c3d 3f5bfb34 bf02ef9f     ..[?=...4.[?....
   10cb0:	3f5c61c7 bf0242b1 3f5cc7d1 bf019573     .a\?.B....\?s...
   10cc0:	3f5d2d53 bf00e7e4 3f5d924d bf003a06     S-]?....M.]?.:..
   10cd0:	3f5df6be beff17b2 3f5e5aa6 befdbabb     ..]?.....Z^?....
   10ce0:	3f5ebe05 befc5d27 3f5f20db befafef7     ..^?']... _?....
   10cf0:	3f5f8327 bef9a02d 3f5fe4e9 bef840c8     '._?-....._?.@..
   10d00:	3f604621 bef6e0cb 3f60a6cf bef58035     !F`?......`?5...
   10d10:	3f6106f2 bef41f07 3f61668a bef2bd43     ..a?.....fa?C...
   10d20:	3f61c598 bef15aea 3f62241a beeff7fb     ..a?.Z...$b?....
   10d30:	3f628210 beee9479 3f62df7b beed3063     ..b?y...{.b?c0..
   10d40:	3f633c5a beebcbbb 3f6398ac beea6681     Z<c?......c?.f..
   10d50:	3f63f473 bee900b7 3f644fac bee79a5d     s.c?.....Od?]...
   10d60:	3f64aa59 bee63375 3f650479 bee4cbfe     Y.d?u3..y.e?....
   10d70:	3f655e0b bee363fa 3f65b710 bee1fb6a     .^e?.c....e?j...
   10d80:	3f660f88 bee0924f 3f666771 bedf28a9     ..f?O...qgf?.(..
   10d90:	3f66becc beddbe79 3f671599 bedc53c1     ..f?y.....g?.S..
   10da0:	3f676bd8 bedae880 3f67c187 bed97cb9     .kg?......g?.|..
   10db0:	3f6816a8 bed8106b 3f686b39 bed6a399     ..h?k...9kh?....
   10dc0:	3f68bf3c bed53641 3f6912ae bed3c867     <.h?A6....i?g...
   10dd0:	3f696591 bed25a09 3f69b7e4 bed0eb2a     .ei?.Z....i?*...
   10de0:	3f6a09a7 becf7bca 3f6a5ad9 bece0bea     ..j?.{...Zj?....
   10df0:	3f6aab7b becc9b8b 3f6afb8c becb2aae     {.j?......j?.*..
   10e00:	3f6b4b0c bec9b953 3f6b99fb bec8477c     .Kk?S.....k?|G..
   10e10:	3f6be858 bec6d529 3f6c3624 bec5625c     X.k?)...$6l?\b..
   10e20:	3f6c835e bec3ef15 3f6cd007 bec27b55     ^.l?......l?U{..
   10e30:	3f6d1c1d bec1071e 3f6d67a1 bebf926f     ..m?.....gm?o...
   10e40:	3f6db293 bebe1d4a 3f6dfcf2 bebca7af     ..m?J.....m?....
   10e50:	3f6e46be bebb31a0 3f6e8ff8 beb9bb1e     .Fn?.1....n?....
   10e60:	3f6ed89e beb8442a 3f6f20b0 beb6ccc3     ..n?*D... o?....
   10e70:	3f6f6830 beb554ec 3f6faf1b beb3dca5     0ho?.T....o?....
   10e80:	3f6ff573 beb263ef 3f703b37 beb0eacb     s.o?.c..7;p?....
   10e90:	3f708066 beaf713a 3f70c502 beadf73c     f.p?:q....p?<...
   10ea0:	3f710908 beac7cd4 3f714c7a beab0201     ..q?.|..zLq?....
   10eb0:	3f718f57 bea986c4 3f71d19f bea80b1f     W.q?......q?....
   10ec0:	3f721352 bea68f12 3f725470 bea5129f     R.r?....pTr?....
   10ed0:	3f7294f8 bea395c5 3f72d4eb bea21887     ..r?......r?....
   10ee0:	3f731447 bea09ae5 3f73530e be9f1cdf     G.s?.....Ss?....
   10ef0:	3f73913f be9d9e78 3f73ced9 be9c1faf     ?.s?x.....s?....
   10f00:	3f740bdd be9aa086 3f74484b be9920fe     ..t?....KHt?. ..
   10f10:	3f748422 be97a117 3f74bf62 be9620d2     ".t?....b.t?. ..
   10f20:	3f74fa0b be94a031 3f75341d be931f35     ..t?1....4u?5...
   10f30:	3f756d97 be919ddd 3f75a67b be901c2c     .mu?....{.u?,...
   10f40:	3f75dec6 be8e9a22 3f76167a be8d17c0     ..u?"...z.v?....
   10f50:	3f764d97 be8b9507 3f76841b be8a11f8     .Mv?......v?....
   10f60:	3f76ba07 be888e93 3f76ef5b be870ada     ..v?....[.v?....
   10f70:	3f772417 be8586ce 3f77583a be840270     .$w?....:Xw?p...
   10f80:	3f778bc5 be827dc0 3f77beb7 be80f8c0     ..w?.}....w?....
   10f90:	3f77f110 be7ee6e1 3f7822d1 be7bdba4     ..w?..~.."x?..{.
   10fa0:	3f7853f8 be78cfcc 3f788486 be75c35a     .Sx?..x...x?Z.u.
   10fb0:	3f78b47b be72b651 3f78e3d6 be6fa8b2     {.x?Q.r...x?..o.
   10fc0:	3f791298 be6c9a7f 3f7940c0 be698bba     ..y?..l..@y?..i.
   10fd0:	3f796e4e be667c66 3f799b43 be636c83     Nny?f|f.C.y?.lc.
   10fe0:	3f79c79d be605c13 3f79f35e be5d4b1a     ..y?.\`.^.y?.K].
   10ff0:	3f7a1e84 be5a3997 3f7a4910 be57278f     ..z?.9Z..Iz?.'W.
   11000:	3f7a7302 be541501 3f7a9c59 be5101f1     .sz?..T.Y.z?..Q.
   11010:	3f7ac516 be4dee60 3f7aed37 be4ada4f     ..z?`.M.7.z?O.J.
   11020:	3f7b14be be47c5c2 3f7b3bab be44b0b9     ..{?..G..;{?..D.
   11030:	3f7b61fc be419b37 3f7b87b2 be3e853e     .a{?7.A...{?>.>.
   11040:	3f7baccd be3b6ecf 3f7bd14d be3857ec     ..{?.n;.M.{?.W8.
   11050:	3f7bf531 be354098 3f7c187a be3228d4     1.{?.@5.z.|?.(2.
   11060:	3f7c3b28 be2f10a2 3f7c5d3a be2bf804     (;|?../.:]|?..+.
   11070:	3f7c7eb0 be28defc 3f7c9f8a be25c58c     .~|?..(...|?..%.
   11080:	3f7cbfc9 be22abb6 3f7cdf6c be1f917b     ..|?..".l.|?{...
   11090:	3f7cfe73 be1c76de 3f7d1cdd be195be0     s.|?.v....}?.[..
   110a0:	3f7d3aac be164083 3f7d57de be1324ca     .:}?.@...W}?.$..
   110b0:	3f7d7474 be1008b7 3f7d906e be0cec4a     tt}?....n.}?J...
   110c0:	3f7dabcc be09cf86 3f7dc68c be06b26e     ..}?......}?n...
   110d0:	3f7de0b1 be039502 3f7dfa38 be007745     ..}?....8.}?Ew..
   110e0:	3f7e1324 bdfab273 3f7e2b72 bdf475c0     $.~?s...r+~?.u..
   110f0:	3f7e4323 bdee3876 3f7e5a38 bde7fa9a     #C~?v8..8Z~?....
   11100:	3f7e70b0 bde1bc2e 3f7e868b bddb7d37     .p~?......~?7}..
   11110:	3f7e9bc9 bdd53db9 3f7eb069 bdcefdb7     ..~?.=..i.~?....
   11120:	3f7ec46d bdc8bd36 3f7ed7d4 bdc27c39     m.~?6.....~?9|..
   11130:	3f7eea9d bdbc3ac3 3f7efcc9 bdb5f8da     ..~?.:....~?....
   11140:	3f7f0e58 bdafb680 3f7f1f49 bda973ba     X..?....I..?.s..
   11150:	3f7f2f9d bda3308c 3f7f3f54 bd9cecf9     ./.?.0..T?.?....
   11160:	3f7f4e6d bd96a905 3f7f5ce9 bd9064b4     mN.?.....\.?.d..
   11170:	3f7f6ac7 bd8a200a 3f7f7808 bd83db0a     .j.?. ...x.?....
   11180:	3f7f84ab bd7b2b74 3f7f90b1 bd6ea038     ...?t+{....?8.n.
   11190:	3f7f9c18 bd621468 3f7fa6e3 bd55880e     ...?h.b....?..U.
   111a0:	3f7fb10f bd48fb2f 3f7fba9e bd3c6dd5     ...?/.H....?.m<.
   111b0:	3f7fc38f bd2fe007 3f7fcbe2 bd2351cc     ...?../....?.Q#.
   111c0:	3f7fd398 bd16c32c 3f7fdaaf bd0a342f     ...?,......?/4..
   111d0:	3f7fe129 bcfb49b9 3f7fe705 bce22a7b     )..?.I.....?{*..
   111e0:	3f7fec43 bcc90ab0 3f7ff0e3 bcafea69     C..?.......?i...
   111f0:	3f7ff4e6 bc96c9b6 3f7ff84a bc7b514b     ...?....J..?KQ{.
   11200:	3f7ffb11 bc490e90 3f7ffd39 bc16cb59     ...?..I.9..?Y...
   11210:	3f7ffec4 bbc90f89 3f7fffb1 bb490fc7     ...?.......?..I.

00011220 <twiddleCoef_rfft_64>:
   11220:	00000000 3f800000 3dc8bd36 3f7ec46d     .......?6..=m.~?
   11230:	3e47c5c2 3f7b14be 3e94a031 3f74fa0b     ..G>..{?1..>..t?
   11240:	3ec3ef15 3f6c835e 3ef15aea 3f61c598     ...>^.l?.Z.>..a?
   11250:	3f0e39da 3f54db31 3f226799 3f45e403     .9.?1.T?.g"?..E?
   11260:	3f3504f3 3f3504f3 3f45e403 3f226799     ..5?..5?..E?.g"?
   11270:	3f54db31 3f0e39da 3f61c598 3ef15aea     1.T?.9.?..a?.Z.>
   11280:	3f6c835e 3ec3ef15 3f74fa0b 3e94a031     ^.l?...>..t?1..>
   11290:	3f7b14be 3e47c5c2 3f7ec46d 3dc8bd36     ..{?..G>m.~?6..=
   112a0:	3f800000 00000000 3f7ec46d bdc8bd36     ...?....m.~?6...
   112b0:	3f7b14be be47c5c2 3f74fa0b be94a031     ..{?..G...t?1...
   112c0:	3f6c835e bec3ef15 3f61c598 bef15aea     ^.l?......a?.Z..
   112d0:	3f54db31 bf0e39da 3f45e403 bf226799     1.T?.9....E?.g".
   112e0:	3f3504f3 bf3504f3 3f226799 bf45e403     ..5?..5..g"?..E.
   112f0:	3f0e39da bf54db31 3ef15aea bf61c598     .9.?1.T..Z.>..a.
   11300:	3ec3ef15 bf6c835e 3e94a031 bf74fa0b     ...>^.l.1..>..t.
   11310:	3e47c5c2 bf7b14be 3dc8bd36 bf7ec46d     ..G>..{.6..=m.~.

00011320 <armBitRevIndexTable64>:
   11320:	00400008 00800010 00c00018 01000020     ..@......... ...
   11330:	01400028 01800030 01c00038 00880050     (.@.0...8...P...
   11340:	00c80058 01080060 01480068 01880070     X...`...h.H.p...
   11350:	01c80078 00d00098 011000a0 015000a8     x.............P.
   11360:	019000b0 01d000b8 011800e0 015800e8     ..............X.
   11370:	019800f0 01d800f8 01600128 01a00130     ........(.`.0...
   11380:	01e00138 01a80170 01e80178 01f001b8     8...p...x.......

00011390 <twiddleCoef_rfft_2048>:
   11390:	00000000 3f800000 3b490fc7 3f7fffb1     .......?..I;...?
   113a0:	3bc90f89 3f7ffec4 3c16cb59 3f7ffd39     ...;...?Y..<9..?
   113b0:	3c490e90 3f7ffb11 3c7b514b 3f7ff84a     ..I<...?KQ{<J..?
   113c0:	3c96c9b6 3f7ff4e6 3cafea69 3f7ff0e3     ...<...?i..<...?
   113d0:	3cc90ab0 3f7fec43 3ce22a7b 3f7fe705     ...<C..?{*.<...?
   113e0:	3cfb49b9 3f7fe129 3d0a342f 3f7fdaaf     .I.<)..?/4.=...?
   113f0:	3d16c32c 3f7fd398 3d2351cc 3f7fcbe2     ,..=...?.Q#=...?
   11400:	3d2fe007 3f7fc38f 3d3c6dd5 3f7fba9e     ../=...?.m<=...?
   11410:	3d48fb2f 3f7fb10f 3d55880e 3f7fa6e3     /.H=...?..U=...?
   11420:	3d621468 3f7f9c18 3d6ea038 3f7f90b1     h.b=...?8.n=...?
   11430:	3d7b2b74 3f7f84ab 3d83db0a 3f7f7808     t+{=...?...=.x.?
   11440:	3d8a200a 3f7f6ac7 3d9064b4 3f7f5ce9     . .=.j.?.d.=.\.?
   11450:	3d96a905 3f7f4e6d 3d9cecf9 3f7f3f54     ...=mN.?...=T?.?
   11460:	3da3308c 3f7f2f9d 3da973ba 3f7f1f49     .0.=./.?.s.=I..?
   11470:	3dafb680 3f7f0e58 3db5f8da 3f7efcc9     ...=X..?...=..~?
   11480:	3dbc3ac3 3f7eea9d 3dc27c39 3f7ed7d4     .:.=..~?9|.=..~?
   11490:	3dc8bd36 3f7ec46d 3dcefdb7 3f7eb069     6..=m.~?...=i.~?
   114a0:	3dd53db9 3f7e9bc9 3ddb7d37 3f7e868b     .=.=..~?7}.=..~?
   114b0:	3de1bc2e 3f7e70b0 3de7fa9a 3f7e5a38     ...=.p~?...=8Z~?
   114c0:	3dee3876 3f7e4323 3df475c0 3f7e2b72     v8.=#C~?.u.=r+~?
   114d0:	3dfab273 3f7e1324 3e007745 3f7dfa38     s..=$.~?Ew.>8.}?
   114e0:	3e039502 3f7de0b1 3e06b26e 3f7dc68c     ...>..}?n..>..}?
   114f0:	3e09cf86 3f7dabcc 3e0cec4a 3f7d906e     ...>..}?J..>n.}?
   11500:	3e1008b7 3f7d7474 3e1324ca 3f7d57de     ...>tt}?.$.>.W}?
   11510:	3e164083 3f7d3aac 3e195be0 3f7d1cdd     .@.>.:}?.[.>..}?
   11520:	3e1c76de 3f7cfe73 3e1f917b 3f7cdf6c     .v.>s.|?{..>l.|?
   11530:	3e22abb6 3f7cbfc9 3e25c58c 3f7c9f8a     ..">..|?..%>..|?
   11540:	3e28defc 3f7c7eb0 3e2bf804 3f7c5d3a     ..(>.~|?..+>:]|?
   11550:	3e2f10a2 3f7c3b28 3e3228d4 3f7c187a     ../>(;|?.(2>z.|?
   11560:	3e354098 3f7bf531 3e3857ec 3f7bd14d     .@5>1.{?.W8>M.{?
   11570:	3e3b6ecf 3f7baccd 3e3e853e 3f7b87b2     .n;>..{?>.>>..{?
   11580:	3e419b37 3f7b61fc 3e44b0b9 3f7b3bab     7.A>.a{?..D>.;{?
   11590:	3e47c5c2 3f7b14be 3e4ada4f 3f7aed37     ..G>..{?O.J>7.z?
   115a0:	3e4dee60 3f7ac516 3e5101f1 3f7a9c59     `.M>..z?..Q>Y.z?
   115b0:	3e541501 3f7a7302 3e57278f 3f7a4910     ..T>.sz?.'W>.Iz?
   115c0:	3e5a3997 3f7a1e84 3e5d4b1a 3f79f35e     .9Z>..z?.K]>^.y?
   115d0:	3e605c13 3f79c79d 3e636c83 3f799b43     .\`>..y?.lc>C.y?
   115e0:	3e667c66 3f796e4e 3e698bba 3f7940c0     f|f>Nny?..i>.@y?
   115f0:	3e6c9a7f 3f791298 3e6fa8b2 3f78e3d6     ..l>..y?..o>..x?
   11600:	3e72b651 3f78b47b 3e75c35a 3f788486     Q.r>{.x?Z.u>..x?
   11610:	3e78cfcc 3f7853f8 3e7bdba4 3f7822d1     ..x>.Sx?..{>."x?
   11620:	3e7ee6e1 3f77f110 3e80f8c0 3f77beb7     ..~>..w?...>..w?
   11630:	3e827dc0 3f778bc5 3e840270 3f77583a     .}.>..w?p..>:Xw?
   11640:	3e8586ce 3f772417 3e870ada 3f76ef5b     ...>.$w?...>[.v?
   11650:	3e888e93 3f76ba07 3e8a11f8 3f76841b     ...>..v?...>..v?
   11660:	3e8b9507 3f764d97 3e8d17c0 3f76167a     ...>.Mv?...>z.v?
   11670:	3e8e9a22 3f75dec6 3e901c2c 3f75a67b     "..>..u?,..>{.u?
   11680:	3e919ddd 3f756d97 3e931f35 3f75341d     ...>.mu?5..>.4u?
   11690:	3e94a031 3f74fa0b 3e9620d2 3f74bf62     1..>..t?. .>b.t?
   116a0:	3e97a117 3f748422 3e9920fe 3f74484b     ...>".t?. .>KHt?
   116b0:	3e9aa086 3f740bdd 3e9c1faf 3f73ced9     ...>..t?...>..s?
   116c0:	3e9d9e78 3f73913f 3e9f1cdf 3f73530e     x..>?.s?...>.Ss?
   116d0:	3ea09ae5 3f731447 3ea21887 3f72d4eb     ...>G.s?...>..r?
   116e0:	3ea395c5 3f7294f8 3ea5129f 3f725470     ...>..r?...>pTr?
   116f0:	3ea68f12 3f721352 3ea80b1f 3f71d19f     ...>R.r?...>..q?
   11700:	3ea986c4 3f718f57 3eab0201 3f714c7a     ...>W.q?...>zLq?
   11710:	3eac7cd4 3f710908 3eadf73c 3f70c502     .|.>..q?<..>..p?
   11720:	3eaf713a 3f708066 3eb0eacb 3f703b37     :q.>f.p?...>7;p?
   11730:	3eb263ef 3f6ff573 3eb3dca5 3f6faf1b     .c.>s.o?...>..o?
   11740:	3eb554ec 3f6f6830 3eb6ccc3 3f6f20b0     .T.>0ho?...>. o?
   11750:	3eb8442a 3f6ed89e 3eb9bb1e 3f6e8ff8     *D.>..n?...>..n?
   11760:	3ebb31a0 3f6e46be 3ebca7af 3f6dfcf2     .1.>.Fn?...>..m?
   11770:	3ebe1d4a 3f6db293 3ebf926f 3f6d67a1     J..>..m?o..>.gm?
   11780:	3ec1071e 3f6d1c1d 3ec27b55 3f6cd007     ...>..m?U{.>..l?
   11790:	3ec3ef15 3f6c835e 3ec5625c 3f6c3624     ...>^.l?\b.>$6l?
   117a0:	3ec6d529 3f6be858 3ec8477c 3f6b99fb     )..>X.k?|G.>..k?
   117b0:	3ec9b953 3f6b4b0c 3ecb2aae 3f6afb8c     S..>.Kk?.*.>..j?
   117c0:	3ecc9b8b 3f6aab7b 3ece0bea 3f6a5ad9     ...>{.j?...>.Zj?
   117d0:	3ecf7bca 3f6a09a7 3ed0eb2a 3f69b7e4     .{.>..j?*..>..i?
   117e0:	3ed25a09 3f696591 3ed3c867 3f6912ae     .Z.>.ei?g..>..i?
   117f0:	3ed53641 3f68bf3c 3ed6a399 3f686b39     A6.><.h?...>9kh?
   11800:	3ed8106b 3f6816a8 3ed97cb9 3f67c187     k..>..h?.|.>..g?
   11810:	3edae880 3f676bd8 3edc53c1 3f671599     ...>.kg?.S.>..g?
   11820:	3eddbe79 3f66becc 3edf28a9 3f666771     y..>..f?.(.>qgf?
   11830:	3ee0924f 3f660f88 3ee1fb6a 3f65b710     O..>..f?j..>..e?
   11840:	3ee363fa 3f655e0b 3ee4cbfe 3f650479     .c.>.^e?...>y.e?
   11850:	3ee63375 3f64aa59 3ee79a5d 3f644fac     u3.>Y.d?]..>.Od?
   11860:	3ee900b7 3f63f473 3eea6681 3f6398ac     ...>s.c?.f.>..c?
   11870:	3eebcbbb 3f633c5a 3eed3063 3f62df7b     ...>Z<c?c0.>{.b?
   11880:	3eee9479 3f628210 3eeff7fb 3f62241a     y..>..b?...>.$b?
   11890:	3ef15aea 3f61c598 3ef2bd43 3f61668a     .Z.>..a?C..>.fa?
   118a0:	3ef41f07 3f6106f2 3ef58035 3f60a6cf     ...>..a?5..>..`?
   118b0:	3ef6e0cb 3f604621 3ef840c8 3f5fe4e9     ...>!F`?.@.>.._?
   118c0:	3ef9a02d 3f5f8327 3efafef7 3f5f20db     -..>'._?...>. _?
   118d0:	3efc5d27 3f5ebe05 3efdbabb 3f5e5aa6     '].>..^?...>.Z^?
   118e0:	3eff17b2 3f5df6be 3f003a06 3f5d924d     ...>..]?.:.?M.]?
   118f0:	3f00e7e4 3f5d2d53 3f019573 3f5cc7d1     ...?S-]?s..?..\?
   11900:	3f0242b1 3f5c61c7 3f02ef9f 3f5bfb34     .B.?.a\?...?4.[?
   11910:	3f039c3d 3f5b941a 3f044889 3f5b2c79     =..?..[?.H.?y,[?
   11920:	3f04f484 3f5ac450 3f05a02c 3f5a5ba0     ...?P.Z?,..?.[Z?
   11930:	3f064b82 3f59f26a 3f06f686 3f5988ad     .K.?j.Y?...?..Y?
   11940:	3f07a136 3f591e6a 3f084b92 3f58b3a1     6..?j.Y?.K.?..X?
   11950:	3f08f59b 3f584853 3f099f4e 3f57dc7f     ...?SHX?N..?..W?
   11960:	3f0a48ad 3f577026 3f0af1b7 3f570348     .H.?&pW?...?H.W?
   11970:	3f0b9a6b 3f5695e5 3f0c42c9 3f5627fe     k..?..V?.B.?.'V?
   11980:	3f0cead0 3f55b993 3f0d9281 3f554aa4     ...?..U?...?.JU?
   11990:	3f0e39da 3f54db31 3f0ee0db 3f546b3b     .9.?1.T?...?;kT?
   119a0:	3f0f8784 3f53fac3 3f102dd5 3f5389c7     ...?..S?.-.?..S?
   119b0:	3f10d3cd 3f531849 3f11796b 3f52a649     ...?I.S?ky.?I.R?
   119c0:	3f121eb0 3f5233c6 3f12c39a 3f51c0c2     ...?.3R?...?..Q?
   119d0:	3f13682a 3f514d3d 3f140c5f 3f50d937     *h.?=MQ?_..?7.P?
   119e0:	3f14b039 3f5064af 3f1553b7 3f4fefa8     9..?.dP?.S.?..O?
   119f0:	3f15f6d9 3f4f7a1f 3f16999f 3f4f0417     ...?.zO?...?..O?
   11a00:	3f173c07 3f4e8d90 3f17de12 3f4e1689     .<.?..N?...?..N?
   11a10:	3f187fc0 3f4d9f02 3f19210f 3f4d26fd     ...?..M?.!.?.&M?
   11a20:	3f19c200 3f4cae79 3f1a6293 3f4c3578     ...?y.L?.b.?x5L?
   11a30:	3f1b02c6 3f4bbbf8 3f1ba299 3f4b41fa     ...?..K?...?.AK?
   11a40:	3f1c420c 3f4ac77f 3f1ce11f 3f4a4c87     .B.?..J?...?.LJ?
   11a50:	3f1d7fd1 3f49d112 3f1e1e22 3f495521     ...?..I?"..?!UI?
   11a60:	3f1ebc12 3f48d8b3 3f1f599f 3f485bca     ...?..H?.Y.?.[H?
   11a70:	3f1ff6cb 3f47de65 3f209393 3f476085     ...?e.G?.. ?.`G?
   11a80:	3f212ff9 3f46e22a 3f21cbfb 3f466354     ./!?*.F?..!?TcF?
   11a90:	3f226799 3f45e403 3f2302d3 3f456439     .g"?..E?..#?9dE?
   11aa0:	3f239da9 3f44e3f5 3f24381a 3f446337     ..#?..D?.8$?7cD?
   11ab0:	3f24d225 3f43e200 3f256bcb 3f436051     %.$?..C?.k%?Q`C?
   11ac0:	3f26050a 3f42de29 3f269de3 3f425b89     ..&?).B?..&?.[B?
   11ad0:	3f273656 3f41d870 3f27ce61 3f4154e1     V6'?p.A?a.'?.TA?
   11ae0:	3f286605 3f40d0da 3f28fd41 3f404c5c     .f(?..@?A.(?\L@?
   11af0:	3f299415 3f3fc767 3f2a2a80 3f3f41fc     ..)?g.??.**?.A??
   11b00:	3f2ac082 3f3ebc1b 3f2b561b 3f3e35c5     ..*?..>?.V+?.5>?
   11b10:	3f2beb4a 3f3daef9 3f2c800f 3f3d27b8     J.+?..=?..,?.'=?
   11b20:	3f2d1469 3f3ca003 3f2da859 3f3c17d9     i.-?..<?Y.-?..<?
   11b30:	3f2e3bde 3f3b8f3b 3f2ecef7 3f3b0629     .;.?;.;?...?).;?
   11b40:	3f2f61a5 3f3a7ca4 3f2ff3e6 3f39f2ac     .a/?.|:?../?..9?
   11b50:	3f3085bb 3f396842 3f311722 3f38dd65     ..0?Bh9?".1?e.8?
   11b60:	3f31a81d 3f385216 3f3238aa 3f37c655     ..1?.R8?.82?U.7?
   11b70:	3f32c8c9 3f373a23 3f33587a 3f36ad7f     ..2?#:7?zX3?..6?
   11b80:	3f33e7bc 3f36206c 3f34768f 3f3592e7     ..3?l 6?.v4?..5?
   11b90:	3f3504f3 3f3504f3 3f3592e7 3f34768f     ..5?..5?..5?.v4?
   11ba0:	3f36206c 3f33e7bc 3f36ad7f 3f33587a     l 6?..3?..6?zX3?
   11bb0:	3f373a23 3f32c8c9 3f37c655 3f3238aa     #:7?..2?U.7?.82?
   11bc0:	3f385216 3f31a81d 3f38dd65 3f311722     .R8?..1?e.8?".1?
   11bd0:	3f396842 3f3085bb 3f39f2ac 3f2ff3e6     Bh9?..0?..9?../?
   11be0:	3f3a7ca4 3f2f61a5 3f3b0629 3f2ecef7     .|:?.a/?).;?...?
   11bf0:	3f3b8f3b 3f2e3bde 3f3c17d9 3f2da859     ;.;?.;.?..<?Y.-?
   11c00:	3f3ca003 3f2d1469 3f3d27b8 3f2c800f     ..<?i.-?.'=?..,?
   11c10:	3f3daef9 3f2beb4a 3f3e35c5 3f2b561b     ..=?J.+?.5>?.V+?
   11c20:	3f3ebc1b 3f2ac082 3f3f41fc 3f2a2a80     ..>?..*?.A??.**?
   11c30:	3f3fc767 3f299415 3f404c5c 3f28fd41     g.??..)?\L@?A.(?
   11c40:	3f40d0da 3f286605 3f4154e1 3f27ce61     ..@?.f(?.TA?a.'?
   11c50:	3f41d870 3f273656 3f425b89 3f269de3     p.A?V6'?.[B?..&?
   11c60:	3f42de29 3f26050a 3f436051 3f256bcb     ).B?..&?Q`C?.k%?
   11c70:	3f43e200 3f24d225 3f446337 3f24381a     ..C?%.$?7cD?.8$?
   11c80:	3f44e3f5 3f239da9 3f456439 3f2302d3     ..D?..#?9dE?..#?
   11c90:	3f45e403 3f226799 3f466354 3f21cbfb     ..E?.g"?TcF?..!?
   11ca0:	3f46e22a 3f212ff9 3f476085 3f209393     *.F?./!?.`G?.. ?
   11cb0:	3f47de65 3f1ff6cb 3f485bca 3f1f599f     e.G?...?.[H?.Y.?
   11cc0:	3f48d8b3 3f1ebc12 3f495521 3f1e1e22     ..H?...?!UI?"..?
   11cd0:	3f49d112 3f1d7fd1 3f4a4c87 3f1ce11f     ..I?...?.LJ?...?
   11ce0:	3f4ac77f 3f1c420c 3f4b41fa 3f1ba299     ..J?.B.?.AK?...?
   11cf0:	3f4bbbf8 3f1b02c6 3f4c3578 3f1a6293     ..K?...?x5L?.b.?
   11d00:	3f4cae79 3f19c200 3f4d26fd 3f19210f     y.L?...?.&M?.!.?
   11d10:	3f4d9f02 3f187fc0 3f4e1689 3f17de12     ..M?...?..N?...?
   11d20:	3f4e8d90 3f173c07 3f4f0417 3f16999f     ..N?.<.?..O?...?
   11d30:	3f4f7a1f 3f15f6d9 3f4fefa8 3f1553b7     .zO?...?..O?.S.?
   11d40:	3f5064af 3f14b039 3f50d937 3f140c5f     .dP?9..?7.P?_..?
   11d50:	3f514d3d 3f13682a 3f51c0c2 3f12c39a     =MQ?*h.?..Q?...?
   11d60:	3f5233c6 3f121eb0 3f52a649 3f11796b     .3R?...?I.R?ky.?
   11d70:	3f531849 3f10d3cd 3f5389c7 3f102dd5     I.S?...?..S?.-.?
   11d80:	3f53fac3 3f0f8784 3f546b3b 3f0ee0db     ..S?...?;kT?...?
   11d90:	3f54db31 3f0e39da 3f554aa4 3f0d9281     1.T?.9.?.JU?...?
   11da0:	3f55b993 3f0cead0 3f5627fe 3f0c42c9     ..U?...?.'V?.B.?
   11db0:	3f5695e5 3f0b9a6b 3f570348 3f0af1b7     ..V?k..?H.W?...?
   11dc0:	3f577026 3f0a48ad 3f57dc7f 3f099f4e     &pW?.H.?..W?N..?
   11dd0:	3f584853 3f08f59b 3f58b3a1 3f084b92     SHX?...?..X?.K.?
   11de0:	3f591e6a 3f07a136 3f5988ad 3f06f686     j.Y?6..?..Y?...?
   11df0:	3f59f26a 3f064b82 3f5a5ba0 3f05a02c     j.Y?.K.?.[Z?,..?
   11e00:	3f5ac450 3f04f484 3f5b2c79 3f044889     P.Z?...?y,[?.H.?
   11e10:	3f5b941a 3f039c3d 3f5bfb34 3f02ef9f     ..[?=..?4.[?...?
   11e20:	3f5c61c7 3f0242b1 3f5cc7d1 3f019573     .a\?.B.?..\?s..?
   11e30:	3f5d2d53 3f00e7e4 3f5d924d 3f003a06     S-]?...?M.]?.:.?
   11e40:	3f5df6be 3eff17b2 3f5e5aa6 3efdbabb     ..]?...>.Z^?...>
   11e50:	3f5ebe05 3efc5d27 3f5f20db 3efafef7     ..^?'].>. _?...>
   11e60:	3f5f8327 3ef9a02d 3f5fe4e9 3ef840c8     '._?-..>.._?.@.>
   11e70:	3f604621 3ef6e0cb 3f60a6cf 3ef58035     !F`?...>..`?5..>
   11e80:	3f6106f2 3ef41f07 3f61668a 3ef2bd43     ..a?...>.fa?C..>
   11e90:	3f61c598 3ef15aea 3f62241a 3eeff7fb     ..a?.Z.>.$b?...>
   11ea0:	3f628210 3eee9479 3f62df7b 3eed3063     ..b?y..>{.b?c0.>
   11eb0:	3f633c5a 3eebcbbb 3f6398ac 3eea6681     Z<c?...>..c?.f.>
   11ec0:	3f63f473 3ee900b7 3f644fac 3ee79a5d     s.c?...>.Od?]..>
   11ed0:	3f64aa59 3ee63375 3f650479 3ee4cbfe     Y.d?u3.>y.e?...>
   11ee0:	3f655e0b 3ee363fa 3f65b710 3ee1fb6a     .^e?.c.>..e?j..>
   11ef0:	3f660f88 3ee0924f 3f666771 3edf28a9     ..f?O..>qgf?.(.>
   11f00:	3f66becc 3eddbe79 3f671599 3edc53c1     ..f?y..>..g?.S.>
   11f10:	3f676bd8 3edae880 3f67c187 3ed97cb9     .kg?...>..g?.|.>
   11f20:	3f6816a8 3ed8106b 3f686b39 3ed6a399     ..h?k..>9kh?...>
   11f30:	3f68bf3c 3ed53641 3f6912ae 3ed3c867     <.h?A6.>..i?g..>
   11f40:	3f696591 3ed25a09 3f69b7e4 3ed0eb2a     .ei?.Z.>..i?*..>
   11f50:	3f6a09a7 3ecf7bca 3f6a5ad9 3ece0bea     ..j?.{.>.Zj?...>
   11f60:	3f6aab7b 3ecc9b8b 3f6afb8c 3ecb2aae     {.j?...>..j?.*.>
   11f70:	3f6b4b0c 3ec9b953 3f6b99fb 3ec8477c     .Kk?S..>..k?|G.>
   11f80:	3f6be858 3ec6d529 3f6c3624 3ec5625c     X.k?)..>$6l?\b.>
   11f90:	3f6c835e 3ec3ef15 3f6cd007 3ec27b55     ^.l?...>..l?U{.>
   11fa0:	3f6d1c1d 3ec1071e 3f6d67a1 3ebf926f     ..m?...>.gm?o..>
   11fb0:	3f6db293 3ebe1d4a 3f6dfcf2 3ebca7af     ..m?J..>..m?...>
   11fc0:	3f6e46be 3ebb31a0 3f6e8ff8 3eb9bb1e     .Fn?.1.>..n?...>
   11fd0:	3f6ed89e 3eb8442a 3f6f20b0 3eb6ccc3     ..n?*D.>. o?...>
   11fe0:	3f6f6830 3eb554ec 3f6faf1b 3eb3dca5     0ho?.T.>..o?...>
   11ff0:	3f6ff573 3eb263ef 3f703b37 3eb0eacb     s.o?.c.>7;p?...>
   12000:	3f708066 3eaf713a 3f70c502 3eadf73c     f.p?:q.>..p?<..>
   12010:	3f710908 3eac7cd4 3f714c7a 3eab0201     ..q?.|.>zLq?...>
   12020:	3f718f57 3ea986c4 3f71d19f 3ea80b1f     W.q?...>..q?...>
   12030:	3f721352 3ea68f12 3f725470 3ea5129f     R.r?...>pTr?...>
   12040:	3f7294f8 3ea395c5 3f72d4eb 3ea21887     ..r?...>..r?...>
   12050:	3f731447 3ea09ae5 3f73530e 3e9f1cdf     G.s?...>.Ss?...>
   12060:	3f73913f 3e9d9e78 3f73ced9 3e9c1faf     ?.s?x..>..s?...>
   12070:	3f740bdd 3e9aa086 3f74484b 3e9920fe     ..t?...>KHt?. .>
   12080:	3f748422 3e97a117 3f74bf62 3e9620d2     ".t?...>b.t?. .>
   12090:	3f74fa0b 3e94a031 3f75341d 3e931f35     ..t?1..>.4u?5..>
   120a0:	3f756d97 3e919ddd 3f75a67b 3e901c2c     .mu?...>{.u?,..>
   120b0:	3f75dec6 3e8e9a22 3f76167a 3e8d17c0     ..u?"..>z.v?...>
   120c0:	3f764d97 3e8b9507 3f76841b 3e8a11f8     .Mv?...>..v?...>
   120d0:	3f76ba07 3e888e93 3f76ef5b 3e870ada     ..v?...>[.v?...>
   120e0:	3f772417 3e8586ce 3f77583a 3e840270     .$w?...>:Xw?p..>
   120f0:	3f778bc5 3e827dc0 3f77beb7 3e80f8c0     ..w?.}.>..w?...>
   12100:	3f77f110 3e7ee6e1 3f7822d1 3e7bdba4     ..w?..~>."x?..{>
   12110:	3f7853f8 3e78cfcc 3f788486 3e75c35a     .Sx?..x>..x?Z.u>
   12120:	3f78b47b 3e72b651 3f78e3d6 3e6fa8b2     {.x?Q.r>..x?..o>
   12130:	3f791298 3e6c9a7f 3f7940c0 3e698bba     ..y?..l>.@y?..i>
   12140:	3f796e4e 3e667c66 3f799b43 3e636c83     Nny?f|f>C.y?.lc>
   12150:	3f79c79d 3e605c13 3f79f35e 3e5d4b1a     ..y?.\`>^.y?.K]>
   12160:	3f7a1e84 3e5a3997 3f7a4910 3e57278f     ..z?.9Z>.Iz?.'W>
   12170:	3f7a7302 3e541501 3f7a9c59 3e5101f1     .sz?..T>Y.z?..Q>
   12180:	3f7ac516 3e4dee60 3f7aed37 3e4ada4f     ..z?`.M>7.z?O.J>
   12190:	3f7b14be 3e47c5c2 3f7b3bab 3e44b0b9     ..{?..G>.;{?..D>
   121a0:	3f7b61fc 3e419b37 3f7b87b2 3e3e853e     .a{?7.A>..{?>.>>
   121b0:	3f7baccd 3e3b6ecf 3f7bd14d 3e3857ec     ..{?.n;>M.{?.W8>
   121c0:	3f7bf531 3e354098 3f7c187a 3e3228d4     1.{?.@5>z.|?.(2>
   121d0:	3f7c3b28 3e2f10a2 3f7c5d3a 3e2bf804     (;|?../>:]|?..+>
   121e0:	3f7c7eb0 3e28defc 3f7c9f8a 3e25c58c     .~|?..(>..|?..%>
   121f0:	3f7cbfc9 3e22abb6 3f7cdf6c 3e1f917b     ..|?..">l.|?{..>
   12200:	3f7cfe73 3e1c76de 3f7d1cdd 3e195be0     s.|?.v.>..}?.[.>
   12210:	3f7d3aac 3e164083 3f7d57de 3e1324ca     .:}?.@.>.W}?.$.>
   12220:	3f7d7474 3e1008b7 3f7d906e 3e0cec4a     tt}?...>n.}?J..>
   12230:	3f7dabcc 3e09cf86 3f7dc68c 3e06b26e     ..}?...>..}?n..>
   12240:	3f7de0b1 3e039502 3f7dfa38 3e007745     ..}?...>8.}?Ew.>
   12250:	3f7e1324 3dfab273 3f7e2b72 3df475c0     $.~?s..=r+~?.u.=
   12260:	3f7e4323 3dee3876 3f7e5a38 3de7fa9a     #C~?v8.=8Z~?...=
   12270:	3f7e70b0 3de1bc2e 3f7e868b 3ddb7d37     .p~?...=..~?7}.=
   12280:	3f7e9bc9 3dd53db9 3f7eb069 3dcefdb7     ..~?.=.=i.~?...=
   12290:	3f7ec46d 3dc8bd36 3f7ed7d4 3dc27c39     m.~?6..=..~?9|.=
   122a0:	3f7eea9d 3dbc3ac3 3f7efcc9 3db5f8da     ..~?.:.=..~?...=
   122b0:	3f7f0e58 3dafb680 3f7f1f49 3da973ba     X..?...=I..?.s.=
   122c0:	3f7f2f9d 3da3308c 3f7f3f54 3d9cecf9     ./.?.0.=T?.?...=
   122d0:	3f7f4e6d 3d96a905 3f7f5ce9 3d9064b4     mN.?...=.\.?.d.=
   122e0:	3f7f6ac7 3d8a200a 3f7f7808 3d83db0a     .j.?. .=.x.?...=
   122f0:	3f7f84ab 3d7b2b74 3f7f90b1 3d6ea038     ...?t+{=...?8.n=
   12300:	3f7f9c18 3d621468 3f7fa6e3 3d55880e     ...?h.b=...?..U=
   12310:	3f7fb10f 3d48fb2f 3f7fba9e 3d3c6dd5     ...?/.H=...?.m<=
   12320:	3f7fc38f 3d2fe007 3f7fcbe2 3d2351cc     ...?../=...?.Q#=
   12330:	3f7fd398 3d16c32c 3f7fdaaf 3d0a342f     ...?,..=...?/4.=
   12340:	3f7fe129 3cfb49b9 3f7fe705 3ce22a7b     )..?.I.<...?{*.<
   12350:	3f7fec43 3cc90ab0 3f7ff0e3 3cafea69     C..?...<...?i..<
   12360:	3f7ff4e6 3c96c9b6 3f7ff84a 3c7b514b     ...?...<J..?KQ{<
   12370:	3f7ffb11 3c490e90 3f7ffd39 3c16cb59     ...?..I<9..?Y..<
   12380:	3f7ffec4 3bc90f89 3f7fffb1 3b490fc7     ...?...;...?..I;
   12390:	3f800000 00000000 3f7fffb1 bb490fc7     ...?.......?..I.
   123a0:	3f7ffec4 bbc90f89 3f7ffd39 bc16cb59     ...?....9..?Y...
   123b0:	3f7ffb11 bc490e90 3f7ff84a bc7b514b     ...?..I.J..?KQ{.
   123c0:	3f7ff4e6 bc96c9b6 3f7ff0e3 bcafea69     ...?.......?i...
   123d0:	3f7fec43 bcc90ab0 3f7fe705 bce22a7b     C..?.......?{*..
   123e0:	3f7fe129 bcfb49b9 3f7fdaaf bd0a342f     )..?.I.....?/4..
   123f0:	3f7fd398 bd16c32c 3f7fcbe2 bd2351cc     ...?,......?.Q#.
   12400:	3f7fc38f bd2fe007 3f7fba9e bd3c6dd5     ...?../....?.m<.
   12410:	3f7fb10f bd48fb2f 3f7fa6e3 bd55880e     ...?/.H....?..U.
   12420:	3f7f9c18 bd621468 3f7f90b1 bd6ea038     ...?h.b....?8.n.
   12430:	3f7f84ab bd7b2b74 3f7f7808 bd83db0a     ...?t+{..x.?....
   12440:	3f7f6ac7 bd8a200a 3f7f5ce9 bd9064b4     .j.?. ...\.?.d..
   12450:	3f7f4e6d bd96a905 3f7f3f54 bd9cecf9     mN.?....T?.?....
   12460:	3f7f2f9d bda3308c 3f7f1f49 bda973ba     ./.?.0..I..?.s..
   12470:	3f7f0e58 bdafb680 3f7efcc9 bdb5f8da     X..?......~?....
   12480:	3f7eea9d bdbc3ac3 3f7ed7d4 bdc27c39     ..~?.:....~?9|..
   12490:	3f7ec46d bdc8bd36 3f7eb069 bdcefdb7     m.~?6...i.~?....
   124a0:	3f7e9bc9 bdd53db9 3f7e868b bddb7d37     ..~?.=....~?7}..
   124b0:	3f7e70b0 bde1bc2e 3f7e5a38 bde7fa9a     .p~?....8Z~?....
   124c0:	3f7e4323 bdee3876 3f7e2b72 bdf475c0     #C~?v8..r+~?.u..
   124d0:	3f7e1324 bdfab273 3f7dfa38 be007745     $.~?s...8.}?Ew..
   124e0:	3f7de0b1 be039502 3f7dc68c be06b26e     ..}?......}?n...
   124f0:	3f7dabcc be09cf86 3f7d906e be0cec4a     ..}?....n.}?J...
   12500:	3f7d7474 be1008b7 3f7d57de be1324ca     tt}?.....W}?.$..
   12510:	3f7d3aac be164083 3f7d1cdd be195be0     .:}?.@....}?.[..
   12520:	3f7cfe73 be1c76de 3f7cdf6c be1f917b     s.|?.v..l.|?{...
   12530:	3f7cbfc9 be22abb6 3f7c9f8a be25c58c     ..|?.."...|?..%.
   12540:	3f7c7eb0 be28defc 3f7c5d3a be2bf804     .~|?..(.:]|?..+.
   12550:	3f7c3b28 be2f10a2 3f7c187a be3228d4     (;|?../.z.|?.(2.
   12560:	3f7bf531 be354098 3f7bd14d be3857ec     1.{?.@5.M.{?.W8.
   12570:	3f7baccd be3b6ecf 3f7b87b2 be3e853e     ..{?.n;...{?>.>.
   12580:	3f7b61fc be419b37 3f7b3bab be44b0b9     .a{?7.A..;{?..D.
   12590:	3f7b14be be47c5c2 3f7aed37 be4ada4f     ..{?..G.7.z?O.J.
   125a0:	3f7ac516 be4dee60 3f7a9c59 be5101f1     ..z?`.M.Y.z?..Q.
   125b0:	3f7a7302 be541501 3f7a4910 be57278f     .sz?..T..Iz?.'W.
   125c0:	3f7a1e84 be5a3997 3f79f35e be5d4b1a     ..z?.9Z.^.y?.K].
   125d0:	3f79c79d be605c13 3f799b43 be636c83     ..y?.\`.C.y?.lc.
   125e0:	3f796e4e be667c66 3f7940c0 be698bba     Nny?f|f..@y?..i.
   125f0:	3f791298 be6c9a7f 3f78e3d6 be6fa8b2     ..y?..l...x?..o.
   12600:	3f78b47b be72b651 3f788486 be75c35a     {.x?Q.r...x?Z.u.
   12610:	3f7853f8 be78cfcc 3f7822d1 be7bdba4     .Sx?..x.."x?..{.
   12620:	3f77f110 be7ee6e1 3f77beb7 be80f8c0     ..w?..~...w?....
   12630:	3f778bc5 be827dc0 3f77583a be840270     ..w?.}..:Xw?p...
   12640:	3f772417 be8586ce 3f76ef5b be870ada     .$w?....[.v?....
   12650:	3f76ba07 be888e93 3f76841b be8a11f8     ..v?......v?....
   12660:	3f764d97 be8b9507 3f76167a be8d17c0     .Mv?....z.v?....
   12670:	3f75dec6 be8e9a22 3f75a67b be901c2c     ..u?"...{.u?,...
   12680:	3f756d97 be919ddd 3f75341d be931f35     .mu?.....4u?5...
   12690:	3f74fa0b be94a031 3f74bf62 be9620d2     ..t?1...b.t?. ..
   126a0:	3f748422 be97a117 3f74484b be9920fe     ".t?....KHt?. ..
   126b0:	3f740bdd be9aa086 3f73ced9 be9c1faf     ..t?......s?....
   126c0:	3f73913f be9d9e78 3f73530e be9f1cdf     ?.s?x....Ss?....
   126d0:	3f731447 bea09ae5 3f72d4eb bea21887     G.s?......r?....
   126e0:	3f7294f8 bea395c5 3f725470 bea5129f     ..r?....pTr?....
   126f0:	3f721352 bea68f12 3f71d19f bea80b1f     R.r?......q?....
   12700:	3f718f57 bea986c4 3f714c7a beab0201     W.q?....zLq?....
   12710:	3f710908 beac7cd4 3f70c502 beadf73c     ..q?.|....p?<...
   12720:	3f708066 beaf713a 3f703b37 beb0eacb     f.p?:q..7;p?....
   12730:	3f6ff573 beb263ef 3f6faf1b beb3dca5     s.o?.c....o?....
   12740:	3f6f6830 beb554ec 3f6f20b0 beb6ccc3     0ho?.T... o?....
   12750:	3f6ed89e beb8442a 3f6e8ff8 beb9bb1e     ..n?*D....n?....
   12760:	3f6e46be bebb31a0 3f6dfcf2 bebca7af     .Fn?.1....m?....
   12770:	3f6db293 bebe1d4a 3f6d67a1 bebf926f     ..m?J....gm?o...
   12780:	3f6d1c1d bec1071e 3f6cd007 bec27b55     ..m?......l?U{..
   12790:	3f6c835e bec3ef15 3f6c3624 bec5625c     ^.l?....$6l?\b..
   127a0:	3f6be858 bec6d529 3f6b99fb bec8477c     X.k?).....k?|G..
   127b0:	3f6b4b0c bec9b953 3f6afb8c becb2aae     .Kk?S.....j?.*..
   127c0:	3f6aab7b becc9b8b 3f6a5ad9 bece0bea     {.j?.....Zj?....
   127d0:	3f6a09a7 becf7bca 3f69b7e4 bed0eb2a     ..j?.{....i?*...
   127e0:	3f696591 bed25a09 3f6912ae bed3c867     .ei?.Z....i?g...
   127f0:	3f68bf3c bed53641 3f686b39 bed6a399     <.h?A6..9kh?....
   12800:	3f6816a8 bed8106b 3f67c187 bed97cb9     ..h?k.....g?.|..
   12810:	3f676bd8 bedae880 3f671599 bedc53c1     .kg?......g?.S..
   12820:	3f66becc beddbe79 3f666771 bedf28a9     ..f?y...qgf?.(..
   12830:	3f660f88 bee0924f 3f65b710 bee1fb6a     ..f?O.....e?j...
   12840:	3f655e0b bee363fa 3f650479 bee4cbfe     .^e?.c..y.e?....
   12850:	3f64aa59 bee63375 3f644fac bee79a5d     Y.d?u3...Od?]...
   12860:	3f63f473 bee900b7 3f6398ac beea6681     s.c?......c?.f..
   12870:	3f633c5a beebcbbb 3f62df7b beed3063     Z<c?....{.b?c0..
   12880:	3f628210 beee9479 3f62241a beeff7fb     ..b?y....$b?....
   12890:	3f61c598 bef15aea 3f61668a bef2bd43     ..a?.Z...fa?C...
   128a0:	3f6106f2 bef41f07 3f60a6cf bef58035     ..a?......`?5...
   128b0:	3f604621 bef6e0cb 3f5fe4e9 bef840c8     !F`?......_?.@..
   128c0:	3f5f8327 bef9a02d 3f5f20db befafef7     '._?-.... _?....
   128d0:	3f5ebe05 befc5d27 3f5e5aa6 befdbabb     ..^?']...Z^?....
   128e0:	3f5df6be beff17b2 3f5d924d bf003a06     ..]?....M.]?.:..
   128f0:	3f5d2d53 bf00e7e4 3f5cc7d1 bf019573     S-]?......\?s...
   12900:	3f5c61c7 bf0242b1 3f5bfb34 bf02ef9f     .a\?.B..4.[?....
   12910:	3f5b941a bf039c3d 3f5b2c79 bf044889     ..[?=...y,[?.H..
   12920:	3f5ac450 bf04f484 3f5a5ba0 bf05a02c     P.Z?.....[Z?,...
   12930:	3f59f26a bf064b82 3f5988ad bf06f686     j.Y?.K....Y?....
   12940:	3f591e6a bf07a136 3f58b3a1 bf084b92     j.Y?6.....X?.K..
   12950:	3f584853 bf08f59b 3f57dc7f bf099f4e     SHX?......W?N...
   12960:	3f577026 bf0a48ad 3f570348 bf0af1b7     &pW?.H..H.W?....
   12970:	3f5695e5 bf0b9a6b 3f5627fe bf0c42c9     ..V?k....'V?.B..
   12980:	3f55b993 bf0cead0 3f554aa4 bf0d9281     ..U?.....JU?....
   12990:	3f54db31 bf0e39da 3f546b3b bf0ee0db     1.T?.9..;kT?....
   129a0:	3f53fac3 bf0f8784 3f5389c7 bf102dd5     ..S?......S?.-..
   129b0:	3f531849 bf10d3cd 3f52a649 bf11796b     I.S?....I.R?ky..
   129c0:	3f5233c6 bf121eb0 3f51c0c2 bf12c39a     .3R?......Q?....
   129d0:	3f514d3d bf13682a 3f50d937 bf140c5f     =MQ?*h..7.P?_...
   129e0:	3f5064af bf14b039 3f4fefa8 bf1553b7     .dP?9.....O?.S..
   129f0:	3f4f7a1f bf15f6d9 3f4f0417 bf16999f     .zO?......O?....
   12a00:	3f4e8d90 bf173c07 3f4e1689 bf17de12     ..N?.<....N?....
   12a10:	3f4d9f02 bf187fc0 3f4d26fd bf19210f     ..M?.....&M?.!..
   12a20:	3f4cae79 bf19c200 3f4c3578 bf1a6293     y.L?....x5L?.b..
   12a30:	3f4bbbf8 bf1b02c6 3f4b41fa bf1ba299     ..K?.....AK?....
   12a40:	3f4ac77f bf1c420c 3f4a4c87 bf1ce11f     ..J?.B...LJ?....
   12a50:	3f49d112 bf1d7fd1 3f495521 bf1e1e22     ..I?....!UI?"...
   12a60:	3f48d8b3 bf1ebc12 3f485bca bf1f599f     ..H?.....[H?.Y..
   12a70:	3f47de65 bf1ff6cb 3f476085 bf209393     e.G?.....`G?.. .
   12a80:	3f46e22a bf212ff9 3f466354 bf21cbfb     *.F?./!.TcF?..!.
   12a90:	3f45e403 bf226799 3f456439 bf2302d3     ..E?.g".9dE?..#.
   12aa0:	3f44e3f5 bf239da9 3f446337 bf24381a     ..D?..#.7cD?.8$.
   12ab0:	3f43e200 bf24d225 3f436051 bf256bcb     ..C?%.$.Q`C?.k%.
   12ac0:	3f42de29 bf26050a 3f425b89 bf269de3     ).B?..&..[B?..&.
   12ad0:	3f41d870 bf273656 3f4154e1 bf27ce61     p.A?V6'..TA?a.'.
   12ae0:	3f40d0da bf286605 3f404c5c bf28fd41     ..@?.f(.\L@?A.(.
   12af0:	3f3fc767 bf299415 3f3f41fc bf2a2a80     g.??..)..A??.**.
   12b00:	3f3ebc1b bf2ac082 3f3e35c5 bf2b561b     ..>?..*..5>?.V+.
   12b10:	3f3daef9 bf2beb4a 3f3d27b8 bf2c800f     ..=?J.+..'=?..,.
   12b20:	3f3ca003 bf2d1469 3f3c17d9 bf2da859     ..<?i.-...<?Y.-.
   12b30:	3f3b8f3b bf2e3bde 3f3b0629 bf2ecef7     ;.;?.;..).;?....
   12b40:	3f3a7ca4 bf2f61a5 3f39f2ac bf2ff3e6     .|:?.a/...9?../.
   12b50:	3f396842 bf3085bb 3f38dd65 bf311722     Bh9?..0.e.8?".1.
   12b60:	3f385216 bf31a81d 3f37c655 bf3238aa     .R8?..1.U.7?.82.
   12b70:	3f373a23 bf32c8c9 3f36ad7f bf33587a     #:7?..2...6?zX3.
   12b80:	3f36206c bf33e7bc 3f3592e7 bf34768f     l 6?..3...5?.v4.
   12b90:	3f3504f3 bf3504f3 3f34768f bf3592e7     ..5?..5..v4?..5.
   12ba0:	3f33e7bc bf36206c 3f33587a bf36ad7f     ..3?l 6.zX3?..6.
   12bb0:	3f32c8c9 bf373a23 3f3238aa bf37c655     ..2?#:7..82?U.7.
   12bc0:	3f31a81d bf385216 3f311722 bf38dd65     ..1?.R8.".1?e.8.
   12bd0:	3f3085bb bf396842 3f2ff3e6 bf39f2ac     ..0?Bh9.../?..9.
   12be0:	3f2f61a5 bf3a7ca4 3f2ecef7 bf3b0629     .a/?.|:....?).;.
   12bf0:	3f2e3bde bf3b8f3b 3f2da859 bf3c17d9     .;.?;.;.Y.-?..<.
   12c00:	3f2d1469 bf3ca003 3f2c800f bf3d27b8     i.-?..<...,?.'=.
   12c10:	3f2beb4a bf3daef9 3f2b561b bf3e35c5     J.+?..=..V+?.5>.
   12c20:	3f2ac082 bf3ebc1b 3f2a2a80 bf3f41fc     ..*?..>..**?.A?.
   12c30:	3f299415 bf3fc767 3f28fd41 bf404c5c     ..)?g.?.A.(?\L@.
   12c40:	3f286605 bf40d0da 3f27ce61 bf4154e1     .f(?..@.a.'?.TA.
   12c50:	3f273656 bf41d870 3f269de3 bf425b89     V6'?p.A...&?.[B.
   12c60:	3f26050a bf42de29 3f256bcb bf436051     ..&?).B..k%?Q`C.
   12c70:	3f24d225 bf43e200 3f24381a bf446337     %.$?..C..8$?7cD.
   12c80:	3f239da9 bf44e3f5 3f2302d3 bf456439     ..#?..D...#?9dE.
   12c90:	3f226799 bf45e403 3f21cbfb bf466354     .g"?..E...!?TcF.
   12ca0:	3f212ff9 bf46e22a 3f209393 bf476085     ./!?*.F... ?.`G.
   12cb0:	3f1ff6cb bf47de65 3f1f599f bf485bca     ...?e.G..Y.?.[H.
   12cc0:	3f1ebc12 bf48d8b3 3f1e1e22 bf495521     ...?..H."..?!UI.
   12cd0:	3f1d7fd1 bf49d112 3f1ce11f bf4a4c87     ...?..I....?.LJ.
   12ce0:	3f1c420c bf4ac77f 3f1ba299 bf4b41fa     .B.?..J....?.AK.
   12cf0:	3f1b02c6 bf4bbbf8 3f1a6293 bf4c3578     ...?..K..b.?x5L.
   12d00:	3f19c200 bf4cae79 3f19210f bf4d26fd     ...?y.L..!.?.&M.
   12d10:	3f187fc0 bf4d9f02 3f17de12 bf4e1689     ...?..M....?..N.
   12d20:	3f173c07 bf4e8d90 3f16999f bf4f0417     .<.?..N....?..O.
   12d30:	3f15f6d9 bf4f7a1f 3f1553b7 bf4fefa8     ...?.zO..S.?..O.
   12d40:	3f14b039 bf5064af 3f140c5f bf50d937     9..?.dP._..?7.P.
   12d50:	3f13682a bf514d3d 3f12c39a bf51c0c2     *h.?=MQ....?..Q.
   12d60:	3f121eb0 bf5233c6 3f11796b bf52a649     ...?.3R.ky.?I.R.
   12d70:	3f10d3cd bf531849 3f102dd5 bf5389c7     ...?I.S..-.?..S.
   12d80:	3f0f8784 bf53fac3 3f0ee0db bf546b3b     ...?..S....?;kT.
   12d90:	3f0e39da bf54db31 3f0d9281 bf554aa4     .9.?1.T....?.JU.
   12da0:	3f0cead0 bf55b993 3f0c42c9 bf5627fe     ...?..U..B.?.'V.
   12db0:	3f0b9a6b bf5695e5 3f0af1b7 bf570348     k..?..V....?H.W.
   12dc0:	3f0a48ad bf577026 3f099f4e bf57dc7f     .H.?&pW.N..?..W.
   12dd0:	3f08f59b bf584853 3f084b92 bf58b3a1     ...?SHX..K.?..X.
   12de0:	3f07a136 bf591e6a 3f06f686 bf5988ad     6..?j.Y....?..Y.
   12df0:	3f064b82 bf59f26a 3f05a02c bf5a5ba0     .K.?j.Y.,..?.[Z.
   12e00:	3f04f484 bf5ac450 3f044889 bf5b2c79     ...?P.Z..H.?y,[.
   12e10:	3f039c3d bf5b941a 3f02ef9f bf5bfb34     =..?..[....?4.[.
   12e20:	3f0242b1 bf5c61c7 3f019573 bf5cc7d1     .B.?.a\.s..?..\.
   12e30:	3f00e7e4 bf5d2d53 3f003a06 bf5d924d     ...?S-]..:.?M.].
   12e40:	3eff17b2 bf5df6be 3efdbabb bf5e5aa6     ...>..]....>.Z^.
   12e50:	3efc5d27 bf5ebe05 3efafef7 bf5f20db     '].>..^....>. _.
   12e60:	3ef9a02d bf5f8327 3ef840c8 bf5fe4e9     -..>'._..@.>.._.
   12e70:	3ef6e0cb bf604621 3ef58035 bf60a6cf     ...>!F`.5..>..`.
   12e80:	3ef41f07 bf6106f2 3ef2bd43 bf61668a     ...>..a.C..>.fa.
   12e90:	3ef15aea bf61c598 3eeff7fb bf62241a     .Z.>..a....>.$b.
   12ea0:	3eee9479 bf628210 3eed3063 bf62df7b     y..>..b.c0.>{.b.
   12eb0:	3eebcbbb bf633c5a 3eea6681 bf6398ac     ...>Z<c..f.>..c.
   12ec0:	3ee900b7 bf63f473 3ee79a5d bf644fac     ...>s.c.]..>.Od.
   12ed0:	3ee63375 bf64aa59 3ee4cbfe bf650479     u3.>Y.d....>y.e.
   12ee0:	3ee363fa bf655e0b 3ee1fb6a bf65b710     .c.>.^e.j..>..e.
   12ef0:	3ee0924f bf660f88 3edf28a9 bf666771     O..>..f..(.>qgf.
   12f00:	3eddbe79 bf66becc 3edc53c1 bf671599     y..>..f..S.>..g.
   12f10:	3edae880 bf676bd8 3ed97cb9 bf67c187     ...>.kg..|.>..g.
   12f20:	3ed8106b bf6816a8 3ed6a399 bf686b39     k..>..h....>9kh.
   12f30:	3ed53641 bf68bf3c 3ed3c867 bf6912ae     A6.><.h.g..>..i.
   12f40:	3ed25a09 bf696591 3ed0eb2a bf69b7e4     .Z.>.ei.*..>..i.
   12f50:	3ecf7bca bf6a09a7 3ece0bea bf6a5ad9     .{.>..j....>.Zj.
   12f60:	3ecc9b8b bf6aab7b 3ecb2aae bf6afb8c     ...>{.j..*.>..j.
   12f70:	3ec9b953 bf6b4b0c 3ec8477c bf6b99fb     S..>.Kk.|G.>..k.
   12f80:	3ec6d529 bf6be858 3ec5625c bf6c3624     )..>X.k.\b.>$6l.
   12f90:	3ec3ef15 bf6c835e 3ec27b55 bf6cd007     ...>^.l.U{.>..l.
   12fa0:	3ec1071e bf6d1c1d 3ebf926f bf6d67a1     ...>..m.o..>.gm.
   12fb0:	3ebe1d4a bf6db293 3ebca7af bf6dfcf2     J..>..m....>..m.
   12fc0:	3ebb31a0 bf6e46be 3eb9bb1e bf6e8ff8     .1.>.Fn....>..n.
   12fd0:	3eb8442a bf6ed89e 3eb6ccc3 bf6f20b0     *D.>..n....>. o.
   12fe0:	3eb554ec bf6f6830 3eb3dca5 bf6faf1b     .T.>0ho....>..o.
   12ff0:	3eb263ef bf6ff573 3eb0eacb bf703b37     .c.>s.o....>7;p.
   13000:	3eaf713a bf708066 3eadf73c bf70c502     :q.>f.p.<..>..p.
   13010:	3eac7cd4 bf710908 3eab0201 bf714c7a     .|.>..q....>zLq.
   13020:	3ea986c4 bf718f57 3ea80b1f bf71d19f     ...>W.q....>..q.
   13030:	3ea68f12 bf721352 3ea5129f bf725470     ...>R.r....>pTr.
   13040:	3ea395c5 bf7294f8 3ea21887 bf72d4eb     ...>..r....>..r.
   13050:	3ea09ae5 bf731447 3e9f1cdf bf73530e     ...>G.s....>.Ss.
   13060:	3e9d9e78 bf73913f 3e9c1faf bf73ced9     x..>?.s....>..s.
   13070:	3e9aa086 bf740bdd 3e9920fe bf74484b     ...>..t.. .>KHt.
   13080:	3e97a117 bf748422 3e9620d2 bf74bf62     ...>".t.. .>b.t.
   13090:	3e94a031 bf74fa0b 3e931f35 bf75341d     1..>..t.5..>.4u.
   130a0:	3e919ddd bf756d97 3e901c2c bf75a67b     ...>.mu.,..>{.u.
   130b0:	3e8e9a22 bf75dec6 3e8d17c0 bf76167a     "..>..u....>z.v.
   130c0:	3e8b9507 bf764d97 3e8a11f8 bf76841b     ...>.Mv....>..v.
   130d0:	3e888e93 bf76ba07 3e870ada bf76ef5b     ...>..v....>[.v.
   130e0:	3e8586ce bf772417 3e840270 bf77583a     ...>.$w.p..>:Xw.
   130f0:	3e827dc0 bf778bc5 3e80f8c0 bf77beb7     .}.>..w....>..w.
   13100:	3e7ee6e1 bf77f110 3e7bdba4 bf7822d1     ..~>..w...{>."x.
   13110:	3e78cfcc bf7853f8 3e75c35a bf788486     ..x>.Sx.Z.u>..x.
   13120:	3e72b651 bf78b47b 3e6fa8b2 bf78e3d6     Q.r>{.x...o>..x.
   13130:	3e6c9a7f bf791298 3e698bba bf7940c0     ..l>..y...i>.@y.
   13140:	3e667c66 bf796e4e 3e636c83 bf799b43     f|f>Nny..lc>C.y.
   13150:	3e605c13 bf79c79d 3e5d4b1a bf79f35e     .\`>..y..K]>^.y.
   13160:	3e5a3997 bf7a1e84 3e57278f bf7a4910     .9Z>..z..'W>.Iz.
   13170:	3e541501 bf7a7302 3e5101f1 bf7a9c59     ..T>.sz...Q>Y.z.
   13180:	3e4dee60 bf7ac516 3e4ada4f bf7aed37     `.M>..z.O.J>7.z.
   13190:	3e47c5c2 bf7b14be 3e44b0b9 bf7b3bab     ..G>..{...D>.;{.
   131a0:	3e419b37 bf7b61fc 3e3e853e bf7b87b2     7.A>.a{.>.>>..{.
   131b0:	3e3b6ecf bf7baccd 3e3857ec bf7bd14d     .n;>..{..W8>M.{.
   131c0:	3e354098 bf7bf531 3e3228d4 bf7c187a     .@5>1.{..(2>z.|.
   131d0:	3e2f10a2 bf7c3b28 3e2bf804 bf7c5d3a     ../>(;|...+>:]|.
   131e0:	3e28defc bf7c7eb0 3e25c58c bf7c9f8a     ..(>.~|...%>..|.
   131f0:	3e22abb6 bf7cbfc9 3e1f917b bf7cdf6c     ..">..|.{..>l.|.
   13200:	3e1c76de bf7cfe73 3e195be0 bf7d1cdd     .v.>s.|..[.>..}.
   13210:	3e164083 bf7d3aac 3e1324ca bf7d57de     .@.>.:}..$.>.W}.
   13220:	3e1008b7 bf7d7474 3e0cec4a bf7d906e     ...>tt}.J..>n.}.
   13230:	3e09cf86 bf7dabcc 3e06b26e bf7dc68c     ...>..}.n..>..}.
   13240:	3e039502 bf7de0b1 3e007745 bf7dfa38     ...>..}.Ew.>8.}.
   13250:	3dfab273 bf7e1324 3df475c0 bf7e2b72     s..=$.~..u.=r+~.
   13260:	3dee3876 bf7e4323 3de7fa9a bf7e5a38     v8.=#C~....=8Z~.
   13270:	3de1bc2e bf7e70b0 3ddb7d37 bf7e868b     ...=.p~.7}.=..~.
   13280:	3dd53db9 bf7e9bc9 3dcefdb7 bf7eb069     .=.=..~....=i.~.
   13290:	3dc8bd36 bf7ec46d 3dc27c39 bf7ed7d4     6..=m.~.9|.=..~.
   132a0:	3dbc3ac3 bf7eea9d 3db5f8da bf7efcc9     .:.=..~....=..~.
   132b0:	3dafb680 bf7f0e58 3da973ba bf7f1f49     ...=X....s.=I...
   132c0:	3da3308c bf7f2f9d 3d9cecf9 bf7f3f54     .0.=./.....=T?..
   132d0:	3d96a905 bf7f4e6d 3d9064b4 bf7f5ce9     ...=mN...d.=.\..
   132e0:	3d8a200a bf7f6ac7 3d83db0a bf7f7808     . .=.j.....=.x..
   132f0:	3d7b2b74 bf7f84ab 3d6ea038 bf7f90b1     t+{=....8.n=....
   13300:	3d621468 bf7f9c18 3d55880e bf7fa6e3     h.b=......U=....
   13310:	3d48fb2f bf7fb10f 3d3c6dd5 bf7fba9e     /.H=.....m<=....
   13320:	3d2fe007 bf7fc38f 3d2351cc bf7fcbe2     ../=.....Q#=....
   13330:	3d16c32c bf7fd398 3d0a342f bf7fdaaf     ,..=..../4.=....
   13340:	3cfb49b9 bf7fe129 3ce22a7b bf7fe705     .I.<)...{*.<....
   13350:	3cc90ab0 bf7fec43 3cafea69 bf7ff0e3     ...<C...i..<....
   13360:	3c96c9b6 bf7ff4e6 3c7b514b bf7ff84a     ...<....KQ{<J...
   13370:	3c490e90 bf7ffb11 3c16cb59 bf7ffd39     ..I<....Y..<9...
   13380:	3bc90f89 bf7ffec4 3b490fc7 bf7fffb1     ...;......I;....

00013390 <twiddleCoef_rfft_4096>:
   13390:	00000000 3f800000 3ac90fd4 3f7fffec     .......?...:...?
   133a0:	3b490fc7 3f7fffb1 3b96cbc1 3f7fff4e     ..I;...?...;N..?
   133b0:	3bc90f89 3f7ffec4 3bfb5330 3f7ffe13     ...;...?0S.;...?
   133c0:	3c16cb59 3f7ffd39 3c2fed02 3f7ffc39     Y..<9..?../<9..?
   133d0:	3c490e90 3f7ffb11 3c623000 3f7ff9c1     ..I<...?.0b<...?
   133e0:	3c7b514b 3f7ff84a 3c8a3938 3f7ff6ac     KQ{<J..?89.<...?
   133f0:	3c96c9b6 3f7ff4e6 3ca35a1c 3f7ff2f8     ...<...?.Z.<...?
   13400:	3cafea69 3f7ff0e3 3cbc7a9b 3f7feea7     i..<...?.z.<...?
   13410:	3cc90ab0 3f7fec43 3cd59aa6 3f7fe9b8     ...<C..?...<...?
   13420:	3ce22a7b 3f7fe705 3ceeba2d 3f7fe42b     {*.<...?-..<+..?
   13430:	3cfb49b9 3f7fe129 3d03ec90 3f7fde00     .I.<)..?...=...?
   13440:	3d0a342f 3f7fdaaf 3d107bb8 3f7fd737     /4.=...?.{.=7..?
   13450:	3d16c32c 3f7fd398 3d1d0a88 3f7fcfd1     ,..=...?...=...?
   13460:	3d2351cc 3f7fcbe2 3d2998f6 3f7fc7cc     .Q#=...?..)=...?
   13470:	3d2fe007 3f7fc38f 3d3626fc 3f7fbf2a     ../=...?.&6=*..?
   13480:	3d3c6dd5 3f7fba9e 3d42b491 3f7fb5ea     .m<=...?..B=...?
   13490:	3d48fb2f 3f7fb10f 3d4f41af 3f7fac0d     /.H=...?.AO=...?
   134a0:	3d55880e 3f7fa6e3 3d5bce4c 3f7fa191     ..U=...?L.[=...?
   134b0:	3d621468 3f7f9c18 3d685a62 3f7f9678     h.b=...?bZh=x..?
   134c0:	3d6ea038 3f7f90b1 3d74e5e9 3f7f8ac2     8.n=...?..t=...?
   134d0:	3d7b2b74 3f7f84ab 3d80b86c 3f7f7e6d     t+{=...?l..=m~.?
   134e0:	3d83db0a 3f7f7808 3d86fd94 3f7f717b     ...=.x.?...={q.?
   134f0:	3d8a200a 3f7f6ac7 3d8d426a 3f7f63ec     . .=.j.?jB.=.c.?
   13500:	3d9064b4 3f7f5ce9 3d9386e7 3f7f55bf     .d.=.\.?...=.U.?
   13510:	3d96a905 3f7f4e6d 3d99cb0a 3f7f46f4     ...=mN.?...=.F.?
   13520:	3d9cecf9 3f7f3f54 3da00ecf 3f7f378d     ...=T?.?...=.7.?
   13530:	3da3308c 3f7f2f9d 3da65230 3f7f2787     .0.=./.?0R.=.'.?
   13540:	3da973ba 3f7f1f49 3dac952b 3f7f16e4     .s.=I..?+..=...?
   13550:	3dafb680 3f7f0e58 3db2d7bb 3f7f05a4     ...=X..?...=...?
   13560:	3db5f8da 3f7efcc9 3db919dd 3f7ef3c7     ...=..~?...=..~?
   13570:	3dbc3ac3 3f7eea9d 3dbf5b8d 3f7ee14c     .:.=..~?.[.=L.~?
   13580:	3dc27c39 3f7ed7d4 3dc59cc6 3f7ece34     9|.=..~?...=4.~?
   13590:	3dc8bd36 3f7ec46d 3dcbdd86 3f7eba7f     6..=m.~?...=..~?
   135a0:	3dcefdb7 3f7eb069 3dd21dc8 3f7ea62d     ...=i.~?...=-.~?
   135b0:	3dd53db9 3f7e9bc9 3dd85d89 3f7e913d     .=.=..~?.].==.~?
   135c0:	3ddb7d37 3f7e868b 3dde9cc4 3f7e7bb1     7}.=..~?...=.{~?
   135d0:	3de1bc2e 3f7e70b0 3de4db76 3f7e6588     ...=.p~?v..=.e~?
   135e0:	3de7fa9a 3f7e5a38 3deb199a 3f7e4ec1     ...=8Z~?...=.N~?
   135f0:	3dee3876 3f7e4323 3df1572e 3f7e375e     v8.=#C~?.W.=^7~?
   13600:	3df475c0 3f7e2b72 3df7942c 3f7e1f5e     .u.=r+~?,..=^.~?
   13610:	3dfab273 3f7e1324 3dfdd092 3f7e06c2     s..=$.~?...=..~?
   13620:	3e007745 3f7dfa38 3e02062e 3f7ded88     Ew.>8.}?...>..}?
   13630:	3e039502 3f7de0b1 3e0523c2 3f7dd3b2     ...>..}?.#.>..}?
   13640:	3e06b26e 3f7dc68c 3e084105 3f7db940     n..>..}?.A.>@.}?
   13650:	3e09cf86 3f7dabcc 3e0b5df3 3f7d9e30     ...>..}?.].>0.}?
   13660:	3e0cec4a 3f7d906e 3e0e7a8b 3f7d8285     J..>n.}?.z.>..}?
   13670:	3e1008b7 3f7d7474 3e1196cc 3f7d663d     ...>tt}?...>=f}?
   13680:	3e1324ca 3f7d57de 3e14b2b2 3f7d4959     .$.>.W}?...>YI}?
   13690:	3e164083 3f7d3aac 3e17ce3d 3f7d2bd8     .@.>.:}?=..>.+}?
   136a0:	3e195be0 3f7d1cdd 3e1ae96b 3f7d0dbc     .[.>..}?k..>..}?
   136b0:	3e1c76de 3f7cfe73 3e1e0438 3f7cef03     .v.>s.|?8..>..|?
   136c0:	3e1f917b 3f7cdf6c 3e211ea5 3f7ccfae     {..>l.|?..!>..|?
   136d0:	3e22abb6 3f7cbfc9 3e2438ad 3f7cafbd     ..">..|?.8$>..|?
   136e0:	3e25c58c 3f7c9f8a 3e275251 3f7c8f31     ..%>..|?QR'>1.|?
   136f0:	3e28defc 3f7c7eb0 3e2a6b8d 3f7c6e08     ..(>.~|?.k*>.n|?
   13700:	3e2bf804 3f7c5d3a 3e2d8461 3f7c4c44     ..+>:]|?a.->DL|?
   13710:	3e2f10a2 3f7c3b28 3e309cc9 3f7c29e5     ../>(;|?..0>.)|?
   13720:	3e3228d4 3f7c187a 3e33b4c4 3f7c06e9     .(2>z.|?..3>..|?
   13730:	3e354098 3f7bf531 3e36cc50 3f7be353     .@5>1.{?P.6>S.{?
   13740:	3e3857ec 3f7bd14d 3e39e36c 3f7bbf20     .W8>M.{?l.9> .{?
   13750:	3e3b6ecf 3f7baccd 3e3cfa15 3f7b9a53     .n;>..{?..<>S.{?
   13760:	3e3e853e 3f7b87b2 3e401049 3f7b74ea     >.>>..{?I.@>.t{?
   13770:	3e419b37 3f7b61fc 3e432607 3f7b4ee7     7.A>.a{?.&C>.N{?
   13780:	3e44b0b9 3f7b3bab 3e463b4d 3f7b2848     ..D>.;{?M;F>H({?
   13790:	3e47c5c2 3f7b14be 3e495018 3f7b010e     ..G>..{?.PI>..{?
   137a0:	3e4ada4f 3f7aed37 3e4c6467 3f7ad93a     O.J>7.z?gdL>:.z?
   137b0:	3e4dee60 3f7ac516 3e4f7838 3f7ab0cb     `.M>..z?8xO>..z?
   137c0:	3e5101f1 3f7a9c59 3e528b89 3f7a87c1     ..Q>Y.z?..R>..z?
   137d0:	3e541501 3f7a7302 3e559e58 3f7a5e1c     ..T>.sz?X.U>.^z?
   137e0:	3e57278f 3f7a4910 3e58b0a4 3f7a33dd     .'W>.Iz?..X>.3z?
   137f0:	3e5a3997 3f7a1e84 3e5bc26a 3f7a0904     .9Z>..z?j.[>..z?
   13800:	3e5d4b1a 3f79f35e 3e5ed3a8 3f79dd91     .K]>^.y?..^>..y?
   13810:	3e605c13 3f79c79d 3e61e45c 3f79b183     .\`>..y?\.a>..y?
   13820:	3e636c83 3f799b43 3e64f486 3f7984dc     .lc>C.y?..d>..y?
   13830:	3e667c66 3f796e4e 3e680422 3f79579a     f|f>Nny?".h>.Wy?
   13840:	3e698bba 3f7940c0 3e6b132f 3f7929bf     ..i>.@y?/.k>.)y?
   13850:	3e6c9a7f 3f791298 3e6e21ab 3f78fb4a     ..l>..y?.!n>J.x?
   13860:	3e6fa8b2 3f78e3d6 3e712f94 3f78cc3b     ..o>..x?./q>;.x?
   13870:	3e72b651 3f78b47b 3e743ce8 3f789c93     Q.r>{.x?.<t>..x?
   13880:	3e75c35a 3f788486 3e7749a6 3f786c52     Z.u>..x?.Iw>Rlx?
   13890:	3e78cfcc 3f7853f8 3e7a55cb 3f783b77     ..x>.Sx?.Uz>w;x?
   138a0:	3e7bdba4 3f7822d1 3e7d6156 3f780a04     ..{>."x?Va}>..x?
   138b0:	3e7ee6e1 3f77f110 3e803622 3f77d7f7     ..~>..w?"6.>..w?
   138c0:	3e80f8c0 3f77beb7 3e81bb4a 3f77a551     ...>..w?J..>Q.w?
   138d0:	3e827dc0 3f778bc5 3e834022 3f777213     .}.>..w?"@.>.rw?
   138e0:	3e840270 3f77583a 3e84c4aa 3f773e3c     p..>:Xw?...><>w?
   138f0:	3e8586ce 3f772417 3e8648df 3f7709cc     ...>.$w?.H.>..w?
   13900:	3e870ada 3f76ef5b 3e87ccc1 3f76d4c4     ...>[.v?...>..v?
   13910:	3e888e93 3f76ba07 3e895050 3f769f24     ...>..v?PP.>$.v?
   13920:	3e8a11f8 3f76841b 3e8ad38a 3f7668ec     ...>..v?...>.hv?
   13930:	3e8b9507 3f764d97 3e8c566e 3f76321b     ...>.Mv?nV.>.2v?
   13940:	3e8d17c0 3f76167a 3e8dd8fc 3f75fab3     ...>z.v?...>..u?
   13950:	3e8e9a22 3f75dec6 3e8f5b32 3f75c2b3     "..>..u?2[.>..u?
   13960:	3e901c2c 3f75a67b 3e90dd10 3f758a1c     ,..>{.u?...>..u?
   13970:	3e919ddd 3f756d97 3e925e94 3f7550ed     ...>.mu?.^.>.Pu?
   13980:	3e931f35 3f75341d 3e93dfbf 3f751727     5..>.4u?...>'.u?
   13990:	3e94a031 3f74fa0b 3e95608d 3f74dcc9     1..>..t?.`.>..t?
   139a0:	3e9620d2 3f74bf62 3e96e100 3f74a1d5     . .>b.t?...>..t?
   139b0:	3e97a117 3f748422 3e986116 3f746649     ...>".t?.a.>Ift?
   139c0:	3e9920fe 3f74484b 3e99e0ce 3f742a27     . .>KHt?...>'*t?
   139d0:	3e9aa086 3f740bdd 3e9b6027 3f73ed6e     ...>..t?'`.>n.s?
   139e0:	3e9c1faf 3f73ced9 3e9cdf20 3f73b01f     ...>..s? ..>..s?
   139f0:	3e9d9e78 3f73913f 3e9e5db8 3f737239     x..>?.s?.].>9rs?
   13a00:	3e9f1cdf 3f73530e 3e9fdbee 3f7333be     ...>.Ss?...>.3s?
   13a10:	3ea09ae5 3f731447 3ea159c2 3f72f4ac     ...>G.s?.Y.>..r?
   13a20:	3ea21887 3f72d4eb 3ea2d733 3f72b504     ...>..r?3..>..r?
   13a30:	3ea395c5 3f7294f8 3ea4543f 3f7274c7     ...>..r??T.>.tr?
   13a40:	3ea5129f 3f725470 3ea5d0e5 3f7233f4     ...>pTr?...>.3r?
   13a50:	3ea68f12 3f721352 3ea74d25 3f71f28c     ...>R.r?%M.>..q?
   13a60:	3ea80b1f 3f71d19f 3ea8c8fe 3f71b08e     ...>..q?...>..q?
   13a70:	3ea986c4 3f718f57 3eaa446f 3f716dfb     ...>W.q?oD.>.mq?
   13a80:	3eab0201 3f714c7a 3eabbf77 3f712ad4     ...>zLq?w..>.*q?
   13a90:	3eac7cd4 3f710908 3ead3a15 3f70e717     .|.>..q?.:.>..p?
   13aa0:	3eadf73c 3f70c502 3eaeb449 3f70a2c6     <..>..p?I..>..p?
   13ab0:	3eaf713a 3f708066 3eb02e10 3f705de1     :q.>f.p?...>.]p?
   13ac0:	3eb0eacb 3f703b37 3eb1a76b 3f701867     ...>7;p?k..>g.p?
   13ad0:	3eb263ef 3f6ff573 3eb32058 3f6fd25a     .c.>s.o?X .>Z.o?
   13ae0:	3eb3dca5 3f6faf1b 3eb498d6 3f6f8bb8     ...>..o?...>..o?
   13af0:	3eb554ec 3f6f6830 3eb610e6 3f6f4483     .T.>0ho?...>.Do?
   13b00:	3eb6ccc3 3f6f20b0 3eb78884 3f6efcba     ...>. o?...>..n?
   13b10:	3eb8442a 3f6ed89e 3eb8ffb2 3f6eb45d     *D.>..n?...>].n?
   13b20:	3eb9bb1e 3f6e8ff8 3eba766e 3f6e6b6d     ...>..n?nv.>mkn?
   13b30:	3ebb31a0 3f6e46be 3ebbecb6 3f6e21eb     .1.>.Fn?...>.!n?
   13b40:	3ebca7af 3f6dfcf2 3ebd628b 3f6dd7d5     ...>..m?.b.>..m?
   13b50:	3ebe1d4a 3f6db293 3ebed7eb 3f6d8d2d     J..>..m?...>-.m?
   13b60:	3ebf926f 3f6d67a1 3ec04cd5 3f6d41f2     o..>.gm?.L.>.Am?
   13b70:	3ec1071e 3f6d1c1d 3ec1c148 3f6cf624     ...>..m?H..>$.l?
   13b80:	3ec27b55 3f6cd007 3ec33544 3f6ca9c5     U{.>..l?D5.>..l?
   13b90:	3ec3ef15 3f6c835e 3ec4a8c8 3f6c5cd4     ...>^.l?...>.\l?
   13ba0:	3ec5625c 3f6c3624 3ec61bd2 3f6c0f50     \b.>$6l?...>P.l?
   13bb0:	3ec6d529 3f6be858 3ec78e62 3f6bc13b     )..>X.k?b..>;.k?
   13bc0:	3ec8477c 3f6b99fb 3ec90077 3f6b7295     |G.>..k?w..>.rk?
   13bd0:	3ec9b953 3f6b4b0c 3eca7210 3f6b235e     S..>.Kk?.r.>^#k?
   13be0:	3ecb2aae 3f6afb8c 3ecbe32c 3f6ad395     .*.>..j?,..>..j?
   13bf0:	3ecc9b8b 3f6aab7b 3ecd53ca 3f6a833c     ...>{.j?.S.><.j?
   13c00:	3ece0bea 3f6a5ad9 3ecec3ea 3f6a3252     ...>.Zj?...>R2j?
   13c10:	3ecf7bca 3f6a09a7 3ed0338a 3f69e0d7     .{.>..j?.3.>..i?
   13c20:	3ed0eb2a 3f69b7e4 3ed1a2aa 3f698ecc     *..>..i?...>..i?
   13c30:	3ed25a09 3f696591 3ed31148 3f693c32     .Z.>.ei?H..>2<i?
   13c40:	3ed3c867 3f6912ae 3ed47f64 3f68e907     g..>..i?d..>..h?
   13c50:	3ed53641 3f68bf3c 3ed5ecfd 3f68954c     A6.><.h?...>L.h?
   13c60:	3ed6a399 3f686b39 3ed75a13 3f684103     ...>9kh?.Z.>.Ah?
   13c70:	3ed8106b 3f6816a8 3ed8c6a3 3f67ec2a     k..>..h?...>*.g?
   13c80:	3ed97cb9 3f67c187 3eda32ad 3f6796c1     .|.>..g?.2.>..g?
   13c90:	3edae880 3f676bd8 3edb9e31 3f6740ca     ...>.kg?1..>.@g?
   13ca0:	3edc53c1 3f671599 3edd092e 3f66ea45     .S.>..g?...>E.f?
   13cb0:	3eddbe79 3f66becc 3ede73a2 3f669330     y..>..f?.s.>0.f?
   13cc0:	3edf28a9 3f666771 3edfdd8d 3f663b8e     .(.>qgf?...>.;f?
   13cd0:	3ee0924f 3f660f88 3ee146ee 3f65e35e     O..>..f?.F.>^.e?
   13ce0:	3ee1fb6a 3f65b710 3ee2afc4 3f658aa0     j..>..e?...>..e?
   13cf0:	3ee363fa 3f655e0b 3ee4180e 3f653154     .c.>.^e?...>T1e?
   13d00:	3ee4cbfe 3f650479 3ee57fcb 3f64d77b     ...>y.e?...>{.d?
   13d10:	3ee63375 3f64aa59 3ee6e6fb 3f647d14     u3.>Y.d?...>.}d?
   13d20:	3ee79a5d 3f644fac 3ee84d9c 3f642221     ]..>.Od?.M.>!"d?
   13d30:	3ee900b7 3f63f473 3ee9b3ae 3f63c6a1     ...>s.c?...>..c?
   13d40:	3eea6681 3f6398ac 3eeb1930 3f636a95     .f.>..c?0..>.jc?
   13d50:	3eebcbbb 3f633c5a 3eec7e21 3f630dfc     ...>Z<c?!~.>..c?
   13d60:	3eed3063 3f62df7b 3eede280 3f62b0d7     c0.>{.b?...>..b?
   13d70:	3eee9479 3f628210 3eef464c 3f625326     y..>..b?LF.>&Sb?
   13d80:	3eeff7fb 3f62241a 3ef0a985 3f61f4ea     ...>.$b?...>..a?
   13d90:	3ef15aea 3f61c598 3ef20c29 3f619622     .Z.>..a?)..>".a?
   13da0:	3ef2bd43 3f61668a 3ef36e38 3f6136d0     C..>.fa?8n.>.6a?
   13db0:	3ef41f07 3f6106f2 3ef4cfb1 3f60d6f2     ...>..a?...>..`?
   13dc0:	3ef58035 3f60a6cf 3ef63093 3f607689     5..>..`?.0.>.v`?
   13dd0:	3ef6e0cb 3f604621 3ef790dc 3f601596     ...>!F`?...>..`?
   13de0:	3ef840c8 3f5fe4e9 3ef8f08e 3f5fb419     .@.>.._?...>.._?
   13df0:	3ef9a02d 3f5f8327 3efa4fa5 3f5f5212     -..>'._?.O.>.R_?
   13e00:	3efafef7 3f5f20db 3efbae22 3f5eef81     ...>. _?"..>..^?
   13e10:	3efc5d27 3f5ebe05 3efd0c04 3f5e8c67     '].>..^?...>g.^?
   13e20:	3efdbabb 3f5e5aa6 3efe694a 3f5e28c3     ...>.Z^?Ji.>.(^?
   13e30:	3eff17b2 3f5df6be 3effc5f3 3f5dc497     ...>..]?...>..]?
   13e40:	3f003a06 3f5d924d 3f0090ff 3f5d5fe1     .:.?M.]?...?._]?
   13e50:	3f00e7e4 3f5d2d53 3f013eb5 3f5cfaa3     ...?S-]?.>.?..\?
   13e60:	3f019573 3f5cc7d1 3f01ec1c 3f5c94dd     s..?..\?...?..\?
   13e70:	3f0242b1 3f5c61c7 3f029932 3f5c2e8e     .B.?.a\?2..?..\?
   13e80:	3f02ef9f 3f5bfb34 3f0345f8 3f5bc7b8     ...?4.[?.E.?..[?
   13e90:	3f039c3d 3f5b941a 3f03f26d 3f5b605a     =..?..[?m..?Z`[?
   13ea0:	3f044889 3f5b2c79 3f049e91 3f5af875     .H.?y,[?...?u.Z?
   13eb0:	3f04f484 3f5ac450 3f054a62 3f5a9009     ...?P.Z?bJ.?..Z?
   13ec0:	3f05a02c 3f5a5ba0 3f05f5e2 3f5a2716     ,..?.[Z?...?.'Z?
   13ed0:	3f064b82 3f59f26a 3f06a10e 3f59bd9c     .K.?j.Y?...?..Y?
   13ee0:	3f06f686 3f5988ad 3f074be8 3f59539c     ...?..Y?.K.?.SY?
   13ef0:	3f07a136 3f591e6a 3f07f66f 3f58e917     6..?j.Y?o..?..X?
   13f00:	3f084b92 3f58b3a1 3f08a0a1 3f587e0b     .K.?..X?...?.~X?
   13f10:	3f08f59b 3f584853 3f094a7f 3f581279     ...?SHX?.J.?y.X?
   13f20:	3f099f4e 3f57dc7f 3f09f409 3f57a663     N..?..W?...?c.W?
   13f30:	3f0a48ad 3f577026 3f0a9d3d 3f5739c7     .H.?&pW?=..?.9W?
   13f40:	3f0af1b7 3f570348 3f0b461c 3f56cca7     ...?H.W?.F.?..V?
   13f50:	3f0b9a6b 3f5695e5 3f0beea5 3f565f02     k..?..V?...?._V?
   13f60:	3f0c42c9 3f5627fe 3f0c96d7 3f55f0d9     .B.?.'V?...?..U?
   13f70:	3f0cead0 3f55b993 3f0d3eb3 3f55822c     ...?..U?.>.?,.U?
   13f80:	3f0d9281 3f554aa4 3f0de638 3f5512fb     ...?.JU?8..?..U?
   13f90:	3f0e39da 3f54db31 3f0e8d65 3f54a347     .9.?1.T?e..?G.T?
   13fa0:	3f0ee0db 3f546b3b 3f0f343b 3f54330f     ...?;kT?;4.?.3T?
   13fb0:	3f0f8784 3f53fac3 3f0fdab8 3f53c255     ...?..S?...?U.S?
   13fc0:	3f102dd5 3f5389c7 3f1080dc 3f535118     .-.?..S?...?.QS?
   13fd0:	3f10d3cd 3f531849 3f1126a7 3f52df59     ...?I.S?.&.?Y.R?
   13fe0:	3f11796b 3f52a649 3f11cc19 3f526d18     ky.?I.R?...?.mR?
   13ff0:	3f121eb0 3f5233c6 3f127130 3f51fa54     ...?.3R?0q.?T.Q?
   14000:	3f12c39a 3f51c0c2 3f1315ee 3f518710     ...?..Q?...?..Q?
   14010:	3f13682a 3f514d3d 3f13ba50 3f51134a     *h.?=MQ?P..?J.Q?
   14020:	3f140c5f 3f50d937 3f145e58 3f509f03     _..?7.P?X^.?..P?
   14030:	3f14b039 3f5064af 3f150204 3f502a3b     9..?.dP?...?;*P?
   14040:	3f1553b7 3f4fefa8 3f15a554 3f4fb4f4     .S.?..O?T..?..O?
   14050:	3f15f6d9 3f4f7a1f 3f164847 3f4f3f2b     ...?.zO?GH.?+?O?
   14060:	3f16999f 3f4f0417 3f16eadf 3f4ec8e4     ...?..O?...?..N?
   14070:	3f173c07 3f4e8d90 3f178d18 3f4e521c     .<.?..N?...?.RN?
   14080:	3f17de12 3f4e1689 3f182ef5 3f4ddad5     ...?..N?...?..M?
   14090:	3f187fc0 3f4d9f02 3f18d073 3f4d6310     ...?..M?s..?.cM?
   140a0:	3f19210f 3f4d26fd 3f197194 3f4ceacb     .!.?.&M?.q.?..L?
   140b0:	3f19c200 3f4cae79 3f1a1255 3f4c7208     ...?y.L?U..?.rL?
   140c0:	3f1a6293 3f4c3578 3f1ab2b8 3f4bf8c7     .b.?x5L?...?..K?
   140d0:	3f1b02c6 3f4bbbf8 3f1b52bb 3f4b7f09     ...?..K?.R.?..K?
   140e0:	3f1ba299 3f4b41fa 3f1bf25f 3f4b04cc     ...?.AK?_..?..K?
   140f0:	3f1c420c 3f4ac77f 3f1c91a2 3f4a8a13     .B.?..J?...?..J?
   14100:	3f1ce11f 3f4a4c87 3f1d3084 3f4a0edc     ...?.LJ?.0.?..J?
   14110:	3f1d7fd1 3f49d112 3f1dcf06 3f499329     ...?..I?...?).I?
   14120:	3f1e1e22 3f495521 3f1e6d26 3f4916fa     "..?!UI?&m.?..I?
   14130:	3f1ebc12 3f48d8b3 3f1f0ae5 3f489a4e     ...?..H?...?N.H?
   14140:	3f1f599f 3f485bca 3f1fa841 3f481d27     .Y.?.[H?A..?'.H?
   14150:	3f1ff6cb 3f47de65 3f20453b 3f479f84     ...?e.G?;E ?..G?
   14160:	3f209393 3f476085 3f20e1d2 3f472167     .. ?.`G?.. ?g!G?
   14170:	3f212ff9 3f46e22a 3f217e06 3f46a2ce     ./!?*.F?.~!?..F?
   14180:	3f21cbfb 3f466354 3f2219d7 3f4623bb     ..!?TcF?.."?.#F?
   14190:	3f226799 3f45e403 3f22b543 3f45a42d     .g"?..E?C."?-.E?
   141a0:	3f2302d3 3f456439 3f23504b 3f452426     ..#?9dE?KP#?&$E?
   141b0:	3f239da9 3f44e3f5 3f23eaee 3f44a3a5     ..#?..D?..#?..D?
   141c0:	3f24381a 3f446337 3f24852c 3f4422ab     .8$?7cD?,.$?."D?
   141d0:	3f24d225 3f43e200 3f251f04 3f43a138     %.$?..C?..%?8.C?
   141e0:	3f256bcb 3f436051 3f25b877 3f431f4c     .k%?Q`C?w.%?L.C?
   141f0:	3f26050a 3f42de29 3f265184 3f429ce8     ..&?).B?.Q&?..B?
   14200:	3f269de3 3f425b89 3f26ea2a 3f421a0b     ..&?.[B?*.&?..B?
   14210:	3f273656 3f41d870 3f278268 3f4196b7     V6'?p.A?h.'?..A?
   14220:	3f27ce61 3f4154e1 3f281a40 3f4112ec     a.'?.TA?@.(?..A?
   14230:	3f286605 3f40d0da 3f28b1b0 3f408ea9     .f(?..@?..(?..@?
   14240:	3f28fd41 3f404c5c 3f2948b8 3f4009f0     A.(?\L@?.H)?..@?
   14250:	3f299415 3f3fc767 3f29df57 3f3f84c0     ..)?g.??W.)?..??
   14260:	3f2a2a80 3f3f41fc 3f2a758e 3f3eff1b     .**?.A??.u*?..>?
   14270:	3f2ac082 3f3ebc1b 3f2b0b5b 3f3e78ff     ..*?..>?[.+?.x>?
   14280:	3f2b561b 3f3e35c5 3f2ba0bf 3f3df26e     .V+?.5>?..+?n.=?
   14290:	3f2beb4a 3f3daef9 3f2c35b9 3f3d6b67     J.+?..=?.5,?gk=?
   142a0:	3f2c800f 3f3d27b8 3f2cca49 3f3ce3ec     ..,?.'=?I.,?..<?
   142b0:	3f2d1469 3f3ca003 3f2d5e6f 3f3c5bfc     i.-?..<?o^-?.[<?
   142c0:	3f2da859 3f3c17d9 3f2df229 3f3bd398     Y.-?..<?).-?..;?
   142d0:	3f2e3bde 3f3b8f3b 3f2e8578 3f3b4ac1     .;.?;.;?x..?.J;?
   142e0:	3f2ecef7 3f3b0629 3f2f185b 3f3ac175     ...?).;?[./?u.:?
   142f0:	3f2f61a5 3f3a7ca4 3f2faad3 3f3a37b7     .a/?.|:?../?.7:?
   14300:	3f2ff3e6 3f39f2ac 3f303cde 3f39ad85     ../?..9?.<0?..9?
   14310:	3f3085bb 3f396842 3f30ce7c 3f3922e1     ..0?Bh9?|.0?."9?
   14320:	3f311722 3f38dd65 3f315fad 3f3897cb     ".1?e.8?._1?..8?
   14330:	3f31a81d 3f385216 3f31f071 3f380c43     ..1?.R8?q.1?C.8?
   14340:	3f3238aa 3f37c655 3f3280c7 3f37804a     .82?U.7?..2?J.7?
   14350:	3f32c8c9 3f373a23 3f3310af 3f36f3df     ..2?#:7?..3?..6?
   14360:	3f33587a 3f36ad7f 3f33a029 3f366704     zX3?..6?).3?.g6?
   14370:	3f33e7bc 3f36206c 3f342f34 3f35d9b8     ..3?l 6?4/4?..5?
   14380:	3f34768f 3f3592e7 3f34bdcf 3f354bfb     .v4?..5?..4?.K5?
   14390:	3f3504f3 3f3504f3 3f354bfb 3f34bdcf     ..5?..5?.K5?..4?
   143a0:	3f3592e7 3f34768f 3f35d9b8 3f342f34     ..5?.v4?..5?4/4?
   143b0:	3f36206c 3f33e7bc 3f366704 3f33a029     l 6?..3?.g6?).3?
   143c0:	3f36ad7f 3f33587a 3f36f3df 3f3310af     ..6?zX3?..6?..3?
   143d0:	3f373a23 3f32c8c9 3f37804a 3f3280c7     #:7?..2?J.7?..2?
   143e0:	3f37c655 3f3238aa 3f380c43 3f31f071     U.7?.82?C.8?q.1?
   143f0:	3f385216 3f31a81d 3f3897cb 3f315fad     .R8?..1?..8?._1?
   14400:	3f38dd65 3f311722 3f3922e1 3f30ce7c     e.8?".1?."9?|.0?
   14410:	3f396842 3f3085bb 3f39ad85 3f303cde     Bh9?..0?..9?.<0?
   14420:	3f39f2ac 3f2ff3e6 3f3a37b7 3f2faad3     ..9?../?.7:?../?
   14430:	3f3a7ca4 3f2f61a5 3f3ac175 3f2f185b     .|:?.a/?u.:?[./?
   14440:	3f3b0629 3f2ecef7 3f3b4ac1 3f2e8578     ).;?...?.J;?x..?
   14450:	3f3b8f3b 3f2e3bde 3f3bd398 3f2df229     ;.;?.;.?..;?).-?
   14460:	3f3c17d9 3f2da859 3f3c5bfc 3f2d5e6f     ..<?Y.-?.[<?o^-?
   14470:	3f3ca003 3f2d1469 3f3ce3ec 3f2cca49     ..<?i.-?..<?I.,?
   14480:	3f3d27b8 3f2c800f 3f3d6b67 3f2c35b9     .'=?..,?gk=?.5,?
   14490:	3f3daef9 3f2beb4a 3f3df26e 3f2ba0bf     ..=?J.+?n.=?..+?
   144a0:	3f3e35c5 3f2b561b 3f3e78ff 3f2b0b5b     .5>?.V+?.x>?[.+?
   144b0:	3f3ebc1b 3f2ac082 3f3eff1b 3f2a758e     ..>?..*?..>?.u*?
   144c0:	3f3f41fc 3f2a2a80 3f3f84c0 3f29df57     .A??.**?..??W.)?
   144d0:	3f3fc767 3f299415 3f4009f0 3f2948b8     g.??..)?..@?.H)?
   144e0:	3f404c5c 3f28fd41 3f408ea9 3f28b1b0     \L@?A.(?..@?..(?
   144f0:	3f40d0da 3f286605 3f4112ec 3f281a40     ..@?.f(?..A?@.(?
   14500:	3f4154e1 3f27ce61 3f4196b7 3f278268     .TA?a.'?..A?h.'?
   14510:	3f41d870 3f273656 3f421a0b 3f26ea2a     p.A?V6'?..B?*.&?
   14520:	3f425b89 3f269de3 3f429ce8 3f265184     .[B?..&?..B?.Q&?
   14530:	3f42de29 3f26050a 3f431f4c 3f25b877     ).B?..&?L.C?w.%?
   14540:	3f436051 3f256bcb 3f43a138 3f251f04     Q`C?.k%?8.C?..%?
   14550:	3f43e200 3f24d225 3f4422ab 3f24852c     ..C?%.$?."D?,.$?
   14560:	3f446337 3f24381a 3f44a3a5 3f23eaee     7cD?.8$?..D?..#?
   14570:	3f44e3f5 3f239da9 3f452426 3f23504b     ..D?..#?&$E?KP#?
   14580:	3f456439 3f2302d3 3f45a42d 3f22b543     9dE?..#?-.E?C."?
   14590:	3f45e403 3f226799 3f4623bb 3f2219d7     ..E?.g"?.#F?.."?
   145a0:	3f466354 3f21cbfb 3f46a2ce 3f217e06     TcF?..!?..F?.~!?
   145b0:	3f46e22a 3f212ff9 3f472167 3f20e1d2     *.F?./!?g!G?.. ?
   145c0:	3f476085 3f209393 3f479f84 3f20453b     .`G?.. ?..G?;E ?
   145d0:	3f47de65 3f1ff6cb 3f481d27 3f1fa841     e.G?...?'.H?A..?
   145e0:	3f485bca 3f1f599f 3f489a4e 3f1f0ae5     .[H?.Y.?N.H?...?
   145f0:	3f48d8b3 3f1ebc12 3f4916fa 3f1e6d26     ..H?...?..I?&m.?
   14600:	3f495521 3f1e1e22 3f499329 3f1dcf06     !UI?"..?).I?...?
   14610:	3f49d112 3f1d7fd1 3f4a0edc 3f1d3084     ..I?...?..J?.0.?
   14620:	3f4a4c87 3f1ce11f 3f4a8a13 3f1c91a2     .LJ?...?..J?...?
   14630:	3f4ac77f 3f1c420c 3f4b04cc 3f1bf25f     ..J?.B.?..K?_..?
   14640:	3f4b41fa 3f1ba299 3f4b7f09 3f1b52bb     .AK?...?..K?.R.?
   14650:	3f4bbbf8 3f1b02c6 3f4bf8c7 3f1ab2b8     ..K?...?..K?...?
   14660:	3f4c3578 3f1a6293 3f4c7208 3f1a1255     x5L?.b.?.rL?U..?
   14670:	3f4cae79 3f19c200 3f4ceacb 3f197194     y.L?...?..L?.q.?
   14680:	3f4d26fd 3f19210f 3f4d6310 3f18d073     .&M?.!.?.cM?s..?
   14690:	3f4d9f02 3f187fc0 3f4ddad5 3f182ef5     ..M?...?..M?...?
   146a0:	3f4e1689 3f17de12 3f4e521c 3f178d18     ..N?...?.RN?...?
   146b0:	3f4e8d90 3f173c07 3f4ec8e4 3f16eadf     ..N?.<.?..N?...?
   146c0:	3f4f0417 3f16999f 3f4f3f2b 3f164847     ..O?...?+?O?GH.?
   146d0:	3f4f7a1f 3f15f6d9 3f4fb4f4 3f15a554     .zO?...?..O?T..?
   146e0:	3f4fefa8 3f1553b7 3f502a3b 3f150204     ..O?.S.?;*P?...?
   146f0:	3f5064af 3f14b039 3f509f03 3f145e58     .dP?9..?..P?X^.?
   14700:	3f50d937 3f140c5f 3f51134a 3f13ba50     7.P?_..?J.Q?P..?
   14710:	3f514d3d 3f13682a 3f518710 3f1315ee     =MQ?*h.?..Q?...?
   14720:	3f51c0c2 3f12c39a 3f51fa54 3f127130     ..Q?...?T.Q?0q.?
   14730:	3f5233c6 3f121eb0 3f526d18 3f11cc19     .3R?...?.mR?...?
   14740:	3f52a649 3f11796b 3f52df59 3f1126a7     I.R?ky.?Y.R?.&.?
   14750:	3f531849 3f10d3cd 3f535118 3f1080dc     I.S?...?.QS?...?
   14760:	3f5389c7 3f102dd5 3f53c255 3f0fdab8     ..S?.-.?U.S?...?
   14770:	3f53fac3 3f0f8784 3f54330f 3f0f343b     ..S?...?.3T?;4.?
   14780:	3f546b3b 3f0ee0db 3f54a347 3f0e8d65     ;kT?...?G.T?e..?
   14790:	3f54db31 3f0e39da 3f5512fb 3f0de638     1.T?.9.?..U?8..?
   147a0:	3f554aa4 3f0d9281 3f55822c 3f0d3eb3     .JU?...?,.U?.>.?
   147b0:	3f55b993 3f0cead0 3f55f0d9 3f0c96d7     ..U?...?..U?...?
   147c0:	3f5627fe 3f0c42c9 3f565f02 3f0beea5     .'V?.B.?._V?...?
   147d0:	3f5695e5 3f0b9a6b 3f56cca7 3f0b461c     ..V?k..?..V?.F.?
   147e0:	3f570348 3f0af1b7 3f5739c7 3f0a9d3d     H.W?...?.9W?=..?
   147f0:	3f577026 3f0a48ad 3f57a663 3f09f409     &pW?.H.?c.W?...?
   14800:	3f57dc7f 3f099f4e 3f581279 3f094a7f     ..W?N..?y.X?.J.?
   14810:	3f584853 3f08f59b 3f587e0b 3f08a0a1     SHX?...?.~X?...?
   14820:	3f58b3a1 3f084b92 3f58e917 3f07f66f     ..X?.K.?..X?o..?
   14830:	3f591e6a 3f07a136 3f59539c 3f074be8     j.Y?6..?.SY?.K.?
   14840:	3f5988ad 3f06f686 3f59bd9c 3f06a10e     ..Y?...?..Y?...?
   14850:	3f59f26a 3f064b82 3f5a2716 3f05f5e2     j.Y?.K.?.'Z?...?
   14860:	3f5a5ba0 3f05a02c 3f5a9009 3f054a62     .[Z?,..?..Z?bJ.?
   14870:	3f5ac450 3f04f484 3f5af875 3f049e91     P.Z?...?u.Z?...?
   14880:	3f5b2c79 3f044889 3f5b605a 3f03f26d     y,[?.H.?Z`[?m..?
   14890:	3f5b941a 3f039c3d 3f5bc7b8 3f0345f8     ..[?=..?..[?.E.?
   148a0:	3f5bfb34 3f02ef9f 3f5c2e8e 3f029932     4.[?...?..\?2..?
   148b0:	3f5c61c7 3f0242b1 3f5c94dd 3f01ec1c     .a\?.B.?..\?...?
   148c0:	3f5cc7d1 3f019573 3f5cfaa3 3f013eb5     ..\?s..?..\?.>.?
   148d0:	3f5d2d53 3f00e7e4 3f5d5fe1 3f0090ff     S-]?...?._]?...?
   148e0:	3f5d924d 3f003a06 3f5dc497 3effc5f3     M.]?.:.?..]?...>
   148f0:	3f5df6be 3eff17b2 3f5e28c3 3efe694a     ..]?...>.(^?Ji.>
   14900:	3f5e5aa6 3efdbabb 3f5e8c67 3efd0c04     .Z^?...>g.^?...>
   14910:	3f5ebe05 3efc5d27 3f5eef81 3efbae22     ..^?'].>..^?"..>
   14920:	3f5f20db 3efafef7 3f5f5212 3efa4fa5     . _?...>.R_?.O.>
   14930:	3f5f8327 3ef9a02d 3f5fb419 3ef8f08e     '._?-..>.._?...>
   14940:	3f5fe4e9 3ef840c8 3f601596 3ef790dc     .._?.@.>..`?...>
   14950:	3f604621 3ef6e0cb 3f607689 3ef63093     !F`?...>.v`?.0.>
   14960:	3f60a6cf 3ef58035 3f60d6f2 3ef4cfb1     ..`?5..>..`?...>
   14970:	3f6106f2 3ef41f07 3f6136d0 3ef36e38     ..a?...>.6a?8n.>
   14980:	3f61668a 3ef2bd43 3f619622 3ef20c29     .fa?C..>".a?)..>
   14990:	3f61c598 3ef15aea 3f61f4ea 3ef0a985     ..a?.Z.>..a?...>
   149a0:	3f62241a 3eeff7fb 3f625326 3eef464c     .$b?...>&Sb?LF.>
   149b0:	3f628210 3eee9479 3f62b0d7 3eede280     ..b?y..>..b?...>
   149c0:	3f62df7b 3eed3063 3f630dfc 3eec7e21     {.b?c0.>..c?!~.>
   149d0:	3f633c5a 3eebcbbb 3f636a95 3eeb1930     Z<c?...>.jc?0..>
   149e0:	3f6398ac 3eea6681 3f63c6a1 3ee9b3ae     ..c?.f.>..c?...>
   149f0:	3f63f473 3ee900b7 3f642221 3ee84d9c     s.c?...>!"d?.M.>
   14a00:	3f644fac 3ee79a5d 3f647d14 3ee6e6fb     .Od?]..>.}d?...>
   14a10:	3f64aa59 3ee63375 3f64d77b 3ee57fcb     Y.d?u3.>{.d?...>
   14a20:	3f650479 3ee4cbfe 3f653154 3ee4180e     y.e?...>T1e?...>
   14a30:	3f655e0b 3ee363fa 3f658aa0 3ee2afc4     .^e?.c.>..e?...>
   14a40:	3f65b710 3ee1fb6a 3f65e35e 3ee146ee     ..e?j..>^.e?.F.>
   14a50:	3f660f88 3ee0924f 3f663b8e 3edfdd8d     ..f?O..>.;f?...>
   14a60:	3f666771 3edf28a9 3f669330 3ede73a2     qgf?.(.>0.f?.s.>
   14a70:	3f66becc 3eddbe79 3f66ea45 3edd092e     ..f?y..>E.f?...>
   14a80:	3f671599 3edc53c1 3f6740ca 3edb9e31     ..g?.S.>.@g?1..>
   14a90:	3f676bd8 3edae880 3f6796c1 3eda32ad     .kg?...>..g?.2.>
   14aa0:	3f67c187 3ed97cb9 3f67ec2a 3ed8c6a3     ..g?.|.>*.g?...>
   14ab0:	3f6816a8 3ed8106b 3f684103 3ed75a13     ..h?k..>.Ah?.Z.>
   14ac0:	3f686b39 3ed6a399 3f68954c 3ed5ecfd     9kh?...>L.h?...>
   14ad0:	3f68bf3c 3ed53641 3f68e907 3ed47f64     <.h?A6.>..h?d..>
   14ae0:	3f6912ae 3ed3c867 3f693c32 3ed31148     ..i?g..>2<i?H..>
   14af0:	3f696591 3ed25a09 3f698ecc 3ed1a2aa     .ei?.Z.>..i?...>
   14b00:	3f69b7e4 3ed0eb2a 3f69e0d7 3ed0338a     ..i?*..>..i?.3.>
   14b10:	3f6a09a7 3ecf7bca 3f6a3252 3ecec3ea     ..j?.{.>R2j?...>
   14b20:	3f6a5ad9 3ece0bea 3f6a833c 3ecd53ca     .Zj?...><.j?.S.>
   14b30:	3f6aab7b 3ecc9b8b 3f6ad395 3ecbe32c     {.j?...>..j?,..>
   14b40:	3f6afb8c 3ecb2aae 3f6b235e 3eca7210     ..j?.*.>^#k?.r.>
   14b50:	3f6b4b0c 3ec9b953 3f6b7295 3ec90077     .Kk?S..>.rk?w..>
   14b60:	3f6b99fb 3ec8477c 3f6bc13b 3ec78e62     ..k?|G.>;.k?b..>
   14b70:	3f6be858 3ec6d529 3f6c0f50 3ec61bd2     X.k?)..>P.l?...>
   14b80:	3f6c3624 3ec5625c 3f6c5cd4 3ec4a8c8     $6l?\b.>.\l?...>
   14b90:	3f6c835e 3ec3ef15 3f6ca9c5 3ec33544     ^.l?...>..l?D5.>
   14ba0:	3f6cd007 3ec27b55 3f6cf624 3ec1c148     ..l?U{.>$.l?H..>
   14bb0:	3f6d1c1d 3ec1071e 3f6d41f2 3ec04cd5     ..m?...>.Am?.L.>
   14bc0:	3f6d67a1 3ebf926f 3f6d8d2d 3ebed7eb     .gm?o..>-.m?...>
   14bd0:	3f6db293 3ebe1d4a 3f6dd7d5 3ebd628b     ..m?J..>..m?.b.>
   14be0:	3f6dfcf2 3ebca7af 3f6e21eb 3ebbecb6     ..m?...>.!n?...>
   14bf0:	3f6e46be 3ebb31a0 3f6e6b6d 3eba766e     .Fn?.1.>mkn?nv.>
   14c00:	3f6e8ff8 3eb9bb1e 3f6eb45d 3eb8ffb2     ..n?...>].n?...>
   14c10:	3f6ed89e 3eb8442a 3f6efcba 3eb78884     ..n?*D.>..n?...>
   14c20:	3f6f20b0 3eb6ccc3 3f6f4483 3eb610e6     . o?...>.Do?...>
   14c30:	3f6f6830 3eb554ec 3f6f8bb8 3eb498d6     0ho?.T.>..o?...>
   14c40:	3f6faf1b 3eb3dca5 3f6fd25a 3eb32058     ..o?...>Z.o?X .>
   14c50:	3f6ff573 3eb263ef 3f701867 3eb1a76b     s.o?.c.>g.p?k..>
   14c60:	3f703b37 3eb0eacb 3f705de1 3eb02e10     7;p?...>.]p?...>
   14c70:	3f708066 3eaf713a 3f70a2c6 3eaeb449     f.p?:q.>..p?I..>
   14c80:	3f70c502 3eadf73c 3f70e717 3ead3a15     ..p?<..>..p?.:.>
   14c90:	3f710908 3eac7cd4 3f712ad4 3eabbf77     ..q?.|.>.*q?w..>
   14ca0:	3f714c7a 3eab0201 3f716dfb 3eaa446f     zLq?...>.mq?oD.>
   14cb0:	3f718f57 3ea986c4 3f71b08e 3ea8c8fe     W.q?...>..q?...>
   14cc0:	3f71d19f 3ea80b1f 3f71f28c 3ea74d25     ..q?...>..q?%M.>
   14cd0:	3f721352 3ea68f12 3f7233f4 3ea5d0e5     R.r?...>.3r?...>
   14ce0:	3f725470 3ea5129f 3f7274c7 3ea4543f     pTr?...>.tr??T.>
   14cf0:	3f7294f8 3ea395c5 3f72b504 3ea2d733     ..r?...>..r?3..>
   14d00:	3f72d4eb 3ea21887 3f72f4ac 3ea159c2     ..r?...>..r?.Y.>
   14d10:	3f731447 3ea09ae5 3f7333be 3e9fdbee     G.s?...>.3s?...>
   14d20:	3f73530e 3e9f1cdf 3f737239 3e9e5db8     .Ss?...>9rs?.].>
   14d30:	3f73913f 3e9d9e78 3f73b01f 3e9cdf20     ?.s?x..>..s? ..>
   14d40:	3f73ced9 3e9c1faf 3f73ed6e 3e9b6027     ..s?...>n.s?'`.>
   14d50:	3f740bdd 3e9aa086 3f742a27 3e99e0ce     ..t?...>'*t?...>
   14d60:	3f74484b 3e9920fe 3f746649 3e986116     KHt?. .>Ift?.a.>
   14d70:	3f748422 3e97a117 3f74a1d5 3e96e100     ".t?...>..t?...>
   14d80:	3f74bf62 3e9620d2 3f74dcc9 3e95608d     b.t?. .>..t?.`.>
   14d90:	3f74fa0b 3e94a031 3f751727 3e93dfbf     ..t?1..>'.u?...>
   14da0:	3f75341d 3e931f35 3f7550ed 3e925e94     .4u?5..>.Pu?.^.>
   14db0:	3f756d97 3e919ddd 3f758a1c 3e90dd10     .mu?...>..u?...>
   14dc0:	3f75a67b 3e901c2c 3f75c2b3 3e8f5b32     {.u?,..>..u?2[.>
   14dd0:	3f75dec6 3e8e9a22 3f75fab3 3e8dd8fc     ..u?"..>..u?...>
   14de0:	3f76167a 3e8d17c0 3f76321b 3e8c566e     z.v?...>.2v?nV.>
   14df0:	3f764d97 3e8b9507 3f7668ec 3e8ad38a     .Mv?...>.hv?...>
   14e00:	3f76841b 3e8a11f8 3f769f24 3e895050     ..v?...>$.v?PP.>
   14e10:	3f76ba07 3e888e93 3f76d4c4 3e87ccc1     ..v?...>..v?...>
   14e20:	3f76ef5b 3e870ada 3f7709cc 3e8648df     [.v?...>..w?.H.>
   14e30:	3f772417 3e8586ce 3f773e3c 3e84c4aa     .$w?...><>w?...>
   14e40:	3f77583a 3e840270 3f777213 3e834022     :Xw?p..>.rw?"@.>
   14e50:	3f778bc5 3e827dc0 3f77a551 3e81bb4a     ..w?.}.>Q.w?J..>
   14e60:	3f77beb7 3e80f8c0 3f77d7f7 3e803622     ..w?...>..w?"6.>
   14e70:	3f77f110 3e7ee6e1 3f780a04 3e7d6156     ..w?..~>..x?Va}>
   14e80:	3f7822d1 3e7bdba4 3f783b77 3e7a55cb     ."x?..{>w;x?.Uz>
   14e90:	3f7853f8 3e78cfcc 3f786c52 3e7749a6     .Sx?..x>Rlx?.Iw>
   14ea0:	3f788486 3e75c35a 3f789c93 3e743ce8     ..x?Z.u>..x?.<t>
   14eb0:	3f78b47b 3e72b651 3f78cc3b 3e712f94     {.x?Q.r>;.x?./q>
   14ec0:	3f78e3d6 3e6fa8b2 3f78fb4a 3e6e21ab     ..x?..o>J.x?.!n>
   14ed0:	3f791298 3e6c9a7f 3f7929bf 3e6b132f     ..y?..l>.)y?/.k>
   14ee0:	3f7940c0 3e698bba 3f79579a 3e680422     .@y?..i>.Wy?".h>
   14ef0:	3f796e4e 3e667c66 3f7984dc 3e64f486     Nny?f|f>..y?..d>
   14f00:	3f799b43 3e636c83 3f79b183 3e61e45c     C.y?.lc>..y?\.a>
   14f10:	3f79c79d 3e605c13 3f79dd91 3e5ed3a8     ..y?.\`>..y?..^>
   14f20:	3f79f35e 3e5d4b1a 3f7a0904 3e5bc26a     ^.y?.K]>..z?j.[>
   14f30:	3f7a1e84 3e5a3997 3f7a33dd 3e58b0a4     ..z?.9Z>.3z?..X>
   14f40:	3f7a4910 3e57278f 3f7a5e1c 3e559e58     .Iz?.'W>.^z?X.U>
   14f50:	3f7a7302 3e541501 3f7a87c1 3e528b89     .sz?..T>..z?..R>
   14f60:	3f7a9c59 3e5101f1 3f7ab0cb 3e4f7838     Y.z?..Q>..z?8xO>
   14f70:	3f7ac516 3e4dee60 3f7ad93a 3e4c6467     ..z?`.M>:.z?gdL>
   14f80:	3f7aed37 3e4ada4f 3f7b010e 3e495018     7.z?O.J>..{?.PI>
   14f90:	3f7b14be 3e47c5c2 3f7b2848 3e463b4d     ..{?..G>H({?M;F>
   14fa0:	3f7b3bab 3e44b0b9 3f7b4ee7 3e432607     .;{?..D>.N{?.&C>
   14fb0:	3f7b61fc 3e419b37 3f7b74ea 3e401049     .a{?7.A>.t{?I.@>
   14fc0:	3f7b87b2 3e3e853e 3f7b9a53 3e3cfa15     ..{?>.>>S.{?..<>
   14fd0:	3f7baccd 3e3b6ecf 3f7bbf20 3e39e36c     ..{?.n;> .{?l.9>
   14fe0:	3f7bd14d 3e3857ec 3f7be353 3e36cc50     M.{?.W8>S.{?P.6>
   14ff0:	3f7bf531 3e354098 3f7c06e9 3e33b4c4     1.{?.@5>..|?..3>
   15000:	3f7c187a 3e3228d4 3f7c29e5 3e309cc9     z.|?.(2>.)|?..0>
   15010:	3f7c3b28 3e2f10a2 3f7c4c44 3e2d8461     (;|?../>DL|?a.->
   15020:	3f7c5d3a 3e2bf804 3f7c6e08 3e2a6b8d     :]|?..+>.n|?.k*>
   15030:	3f7c7eb0 3e28defc 3f7c8f31 3e275251     .~|?..(>1.|?QR'>
   15040:	3f7c9f8a 3e25c58c 3f7cafbd 3e2438ad     ..|?..%>..|?.8$>
   15050:	3f7cbfc9 3e22abb6 3f7ccfae 3e211ea5     ..|?..">..|?..!>
   15060:	3f7cdf6c 3e1f917b 3f7cef03 3e1e0438     l.|?{..>..|?8..>
   15070:	3f7cfe73 3e1c76de 3f7d0dbc 3e1ae96b     s.|?.v.>..}?k..>
   15080:	3f7d1cdd 3e195be0 3f7d2bd8 3e17ce3d     ..}?.[.>.+}?=..>
   15090:	3f7d3aac 3e164083 3f7d4959 3e14b2b2     .:}?.@.>YI}?...>
   150a0:	3f7d57de 3e1324ca 3f7d663d 3e1196cc     .W}?.$.>=f}?...>
   150b0:	3f7d7474 3e1008b7 3f7d8285 3e0e7a8b     tt}?...>..}?.z.>
   150c0:	3f7d906e 3e0cec4a 3f7d9e30 3e0b5df3     n.}?J..>0.}?.].>
   150d0:	3f7dabcc 3e09cf86 3f7db940 3e084105     ..}?...>@.}?.A.>
   150e0:	3f7dc68c 3e06b26e 3f7dd3b2 3e0523c2     ..}?n..>..}?.#.>
   150f0:	3f7de0b1 3e039502 3f7ded88 3e02062e     ..}?...>..}?...>
   15100:	3f7dfa38 3e007745 3f7e06c2 3dfdd092     8.}?Ew.>..~?...=
   15110:	3f7e1324 3dfab273 3f7e1f5e 3df7942c     $.~?s..=^.~?,..=
   15120:	3f7e2b72 3df475c0 3f7e375e 3df1572e     r+~?.u.=^7~?.W.=
   15130:	3f7e4323 3dee3876 3f7e4ec1 3deb199a     #C~?v8.=.N~?...=
   15140:	3f7e5a38 3de7fa9a 3f7e6588 3de4db76     8Z~?...=.e~?v..=
   15150:	3f7e70b0 3de1bc2e 3f7e7bb1 3dde9cc4     .p~?...=.{~?...=
   15160:	3f7e868b 3ddb7d37 3f7e913d 3dd85d89     ..~?7}.==.~?.].=
   15170:	3f7e9bc9 3dd53db9 3f7ea62d 3dd21dc8     ..~?.=.=-.~?...=
   15180:	3f7eb069 3dcefdb7 3f7eba7f 3dcbdd86     i.~?...=..~?...=
   15190:	3f7ec46d 3dc8bd36 3f7ece34 3dc59cc6     m.~?6..=4.~?...=
   151a0:	3f7ed7d4 3dc27c39 3f7ee14c 3dbf5b8d     ..~?9|.=L.~?.[.=
   151b0:	3f7eea9d 3dbc3ac3 3f7ef3c7 3db919dd     ..~?.:.=..~?...=
   151c0:	3f7efcc9 3db5f8da 3f7f05a4 3db2d7bb     ..~?...=...?...=
   151d0:	3f7f0e58 3dafb680 3f7f16e4 3dac952b     X..?...=...?+..=
   151e0:	3f7f1f49 3da973ba 3f7f2787 3da65230     I..?.s.=.'.?0R.=
   151f0:	3f7f2f9d 3da3308c 3f7f378d 3da00ecf     ./.?.0.=.7.?...=
   15200:	3f7f3f54 3d9cecf9 3f7f46f4 3d99cb0a     T?.?...=.F.?...=
   15210:	3f7f4e6d 3d96a905 3f7f55bf 3d9386e7     mN.?...=.U.?...=
   15220:	3f7f5ce9 3d9064b4 3f7f63ec 3d8d426a     .\.?.d.=.c.?jB.=
   15230:	3f7f6ac7 3d8a200a 3f7f717b 3d86fd94     .j.?. .={q.?...=
   15240:	3f7f7808 3d83db0a 3f7f7e6d 3d80b86c     .x.?...=m~.?l..=
   15250:	3f7f84ab 3d7b2b74 3f7f8ac2 3d74e5e9     ...?t+{=...?..t=
   15260:	3f7f90b1 3d6ea038 3f7f9678 3d685a62     ...?8.n=x..?bZh=
   15270:	3f7f9c18 3d621468 3f7fa191 3d5bce4c     ...?h.b=...?L.[=
   15280:	3f7fa6e3 3d55880e 3f7fac0d 3d4f41af     ...?..U=...?.AO=
   15290:	3f7fb10f 3d48fb2f 3f7fb5ea 3d42b491     ...?/.H=...?..B=
   152a0:	3f7fba9e 3d3c6dd5 3f7fbf2a 3d3626fc     ...?.m<=*..?.&6=
   152b0:	3f7fc38f 3d2fe007 3f7fc7cc 3d2998f6     ...?../=...?..)=
   152c0:	3f7fcbe2 3d2351cc 3f7fcfd1 3d1d0a88     ...?.Q#=...?...=
   152d0:	3f7fd398 3d16c32c 3f7fd737 3d107bb8     ...?,..=7..?.{.=
   152e0:	3f7fdaaf 3d0a342f 3f7fde00 3d03ec90     ...?/4.=...?...=
   152f0:	3f7fe129 3cfb49b9 3f7fe42b 3ceeba2d     )..?.I.<+..?-..<
   15300:	3f7fe705 3ce22a7b 3f7fe9b8 3cd59aa6     ...?{*.<...?...<
   15310:	3f7fec43 3cc90ab0 3f7feea7 3cbc7a9b     C..?...<...?.z.<
   15320:	3f7ff0e3 3cafea69 3f7ff2f8 3ca35a1c     ...?i..<...?.Z.<
   15330:	3f7ff4e6 3c96c9b6 3f7ff6ac 3c8a3938     ...?...<...?89.<
   15340:	3f7ff84a 3c7b514b 3f7ff9c1 3c623000     J..?KQ{<...?.0b<
   15350:	3f7ffb11 3c490e90 3f7ffc39 3c2fed02     ...?..I<9..?../<
   15360:	3f7ffd39 3c16cb59 3f7ffe13 3bfb5330     9..?Y..<...?0S.;
   15370:	3f7ffec4 3bc90f89 3f7fff4e 3b96cbc1     ...?...;N..?...;
   15380:	3f7fffb1 3b490fc7 3f7fffec 3ac90fd4     ...?..I;...?...:
   15390:	3f800000 00000000 3f7fffec bac90fd4     ...?.......?....
   153a0:	3f7fffb1 bb490fc7 3f7fff4e bb96cbc1     ...?..I.N..?....
   153b0:	3f7ffec4 bbc90f89 3f7ffe13 bbfb5330     ...?.......?0S..
   153c0:	3f7ffd39 bc16cb59 3f7ffc39 bc2fed02     9..?Y...9..?../.
   153d0:	3f7ffb11 bc490e90 3f7ff9c1 bc623000     ...?..I....?.0b.
   153e0:	3f7ff84a bc7b514b 3f7ff6ac bc8a3938     J..?KQ{....?89..
   153f0:	3f7ff4e6 bc96c9b6 3f7ff2f8 bca35a1c     ...?.......?.Z..
   15400:	3f7ff0e3 bcafea69 3f7feea7 bcbc7a9b     ...?i......?.z..
   15410:	3f7fec43 bcc90ab0 3f7fe9b8 bcd59aa6     C..?.......?....
   15420:	3f7fe705 bce22a7b 3f7fe42b bceeba2d     ...?{*..+..?-...
   15430:	3f7fe129 bcfb49b9 3f7fde00 bd03ec90     )..?.I.....?....
   15440:	3f7fdaaf bd0a342f 3f7fd737 bd107bb8     ...?/4..7..?.{..
   15450:	3f7fd398 bd16c32c 3f7fcfd1 bd1d0a88     ...?,......?....
   15460:	3f7fcbe2 bd2351cc 3f7fc7cc bd2998f6     ...?.Q#....?..).
   15470:	3f7fc38f bd2fe007 3f7fbf2a bd3626fc     ...?../.*..?.&6.
   15480:	3f7fba9e bd3c6dd5 3f7fb5ea bd42b491     ...?.m<....?..B.
   15490:	3f7fb10f bd48fb2f 3f7fac0d bd4f41af     ...?/.H....?.AO.
   154a0:	3f7fa6e3 bd55880e 3f7fa191 bd5bce4c     ...?..U....?L.[.
   154b0:	3f7f9c18 bd621468 3f7f9678 bd685a62     ...?h.b.x..?bZh.
   154c0:	3f7f90b1 bd6ea038 3f7f8ac2 bd74e5e9     ...?8.n....?..t.
   154d0:	3f7f84ab bd7b2b74 3f7f7e6d bd80b86c     ...?t+{.m~.?l...
   154e0:	3f7f7808 bd83db0a 3f7f717b bd86fd94     .x.?....{q.?....
   154f0:	3f7f6ac7 bd8a200a 3f7f63ec bd8d426a     .j.?. ...c.?jB..
   15500:	3f7f5ce9 bd9064b4 3f7f55bf bd9386e7     .\.?.d...U.?....
   15510:	3f7f4e6d bd96a905 3f7f46f4 bd99cb0a     mN.?.....F.?....
   15520:	3f7f3f54 bd9cecf9 3f7f378d bda00ecf     T?.?.....7.?....
   15530:	3f7f2f9d bda3308c 3f7f2787 bda65230     ./.?.0...'.?0R..
   15540:	3f7f1f49 bda973ba 3f7f16e4 bdac952b     I..?.s.....?+...
   15550:	3f7f0e58 bdafb680 3f7f05a4 bdb2d7bb     X..?.......?....
   15560:	3f7efcc9 bdb5f8da 3f7ef3c7 bdb919dd     ..~?......~?....
   15570:	3f7eea9d bdbc3ac3 3f7ee14c bdbf5b8d     ..~?.:..L.~?.[..
   15580:	3f7ed7d4 bdc27c39 3f7ece34 bdc59cc6     ..~?9|..4.~?....
   15590:	3f7ec46d bdc8bd36 3f7eba7f bdcbdd86     m.~?6.....~?....
   155a0:	3f7eb069 bdcefdb7 3f7ea62d bdd21dc8     i.~?....-.~?....
   155b0:	3f7e9bc9 bdd53db9 3f7e913d bdd85d89     ..~?.=..=.~?.]..
   155c0:	3f7e868b bddb7d37 3f7e7bb1 bdde9cc4     ..~?7}...{~?....
   155d0:	3f7e70b0 bde1bc2e 3f7e6588 bde4db76     .p~?.....e~?v...
   155e0:	3f7e5a38 bde7fa9a 3f7e4ec1 bdeb199a     8Z~?.....N~?....
   155f0:	3f7e4323 bdee3876 3f7e375e bdf1572e     #C~?v8..^7~?.W..
   15600:	3f7e2b72 bdf475c0 3f7e1f5e bdf7942c     r+~?.u..^.~?,...
   15610:	3f7e1324 bdfab273 3f7e06c2 bdfdd092     $.~?s.....~?....
   15620:	3f7dfa38 be007745 3f7ded88 be02062e     8.}?Ew....}?....
   15630:	3f7de0b1 be039502 3f7dd3b2 be0523c2     ..}?......}?.#..
   15640:	3f7dc68c be06b26e 3f7db940 be084105     ..}?n...@.}?.A..
   15650:	3f7dabcc be09cf86 3f7d9e30 be0b5df3     ..}?....0.}?.]..
   15660:	3f7d906e be0cec4a 3f7d8285 be0e7a8b     n.}?J.....}?.z..
   15670:	3f7d7474 be1008b7 3f7d663d be1196cc     tt}?....=f}?....
   15680:	3f7d57de be1324ca 3f7d4959 be14b2b2     .W}?.$..YI}?....
   15690:	3f7d3aac be164083 3f7d2bd8 be17ce3d     .:}?.@...+}?=...
   156a0:	3f7d1cdd be195be0 3f7d0dbc be1ae96b     ..}?.[....}?k...
   156b0:	3f7cfe73 be1c76de 3f7cef03 be1e0438     s.|?.v....|?8...
   156c0:	3f7cdf6c be1f917b 3f7ccfae be211ea5     l.|?{.....|?..!.
   156d0:	3f7cbfc9 be22abb6 3f7cafbd be2438ad     ..|?.."...|?.8$.
   156e0:	3f7c9f8a be25c58c 3f7c8f31 be275251     ..|?..%.1.|?QR'.
   156f0:	3f7c7eb0 be28defc 3f7c6e08 be2a6b8d     .~|?..(..n|?.k*.
   15700:	3f7c5d3a be2bf804 3f7c4c44 be2d8461     :]|?..+.DL|?a.-.
   15710:	3f7c3b28 be2f10a2 3f7c29e5 be309cc9     (;|?../..)|?..0.
   15720:	3f7c187a be3228d4 3f7c06e9 be33b4c4     z.|?.(2...|?..3.
   15730:	3f7bf531 be354098 3f7be353 be36cc50     1.{?.@5.S.{?P.6.
   15740:	3f7bd14d be3857ec 3f7bbf20 be39e36c     M.{?.W8. .{?l.9.
   15750:	3f7baccd be3b6ecf 3f7b9a53 be3cfa15     ..{?.n;.S.{?..<.
   15760:	3f7b87b2 be3e853e 3f7b74ea be401049     ..{?>.>..t{?I.@.
   15770:	3f7b61fc be419b37 3f7b4ee7 be432607     .a{?7.A..N{?.&C.
   15780:	3f7b3bab be44b0b9 3f7b2848 be463b4d     .;{?..D.H({?M;F.
   15790:	3f7b14be be47c5c2 3f7b010e be495018     ..{?..G...{?.PI.
   157a0:	3f7aed37 be4ada4f 3f7ad93a be4c6467     7.z?O.J.:.z?gdL.
   157b0:	3f7ac516 be4dee60 3f7ab0cb be4f7838     ..z?`.M...z?8xO.
   157c0:	3f7a9c59 be5101f1 3f7a87c1 be528b89     Y.z?..Q...z?..R.
   157d0:	3f7a7302 be541501 3f7a5e1c be559e58     .sz?..T..^z?X.U.
   157e0:	3f7a4910 be57278f 3f7a33dd be58b0a4     .Iz?.'W..3z?..X.
   157f0:	3f7a1e84 be5a3997 3f7a0904 be5bc26a     ..z?.9Z...z?j.[.
   15800:	3f79f35e be5d4b1a 3f79dd91 be5ed3a8     ^.y?.K]...y?..^.
   15810:	3f79c79d be605c13 3f79b183 be61e45c     ..y?.\`...y?\.a.
   15820:	3f799b43 be636c83 3f7984dc be64f486     C.y?.lc...y?..d.
   15830:	3f796e4e be667c66 3f79579a be680422     Nny?f|f..Wy?".h.
   15840:	3f7940c0 be698bba 3f7929bf be6b132f     .@y?..i..)y?/.k.
   15850:	3f791298 be6c9a7f 3f78fb4a be6e21ab     ..y?..l.J.x?.!n.
   15860:	3f78e3d6 be6fa8b2 3f78cc3b be712f94     ..x?..o.;.x?./q.
   15870:	3f78b47b be72b651 3f789c93 be743ce8     {.x?Q.r...x?.<t.
   15880:	3f788486 be75c35a 3f786c52 be7749a6     ..x?Z.u.Rlx?.Iw.
   15890:	3f7853f8 be78cfcc 3f783b77 be7a55cb     .Sx?..x.w;x?.Uz.
   158a0:	3f7822d1 be7bdba4 3f780a04 be7d6156     ."x?..{...x?Va}.
   158b0:	3f77f110 be7ee6e1 3f77d7f7 be803622     ..w?..~...w?"6..
   158c0:	3f77beb7 be80f8c0 3f77a551 be81bb4a     ..w?....Q.w?J...
   158d0:	3f778bc5 be827dc0 3f777213 be834022     ..w?.}...rw?"@..
   158e0:	3f77583a be840270 3f773e3c be84c4aa     :Xw?p...<>w?....
   158f0:	3f772417 be8586ce 3f7709cc be8648df     .$w?......w?.H..
   15900:	3f76ef5b be870ada 3f76d4c4 be87ccc1     [.v?......v?....
   15910:	3f76ba07 be888e93 3f769f24 be895050     ..v?....$.v?PP..
   15920:	3f76841b be8a11f8 3f7668ec be8ad38a     ..v?.....hv?....
   15930:	3f764d97 be8b9507 3f76321b be8c566e     .Mv?.....2v?nV..
   15940:	3f76167a be8d17c0 3f75fab3 be8dd8fc     z.v?......u?....
   15950:	3f75dec6 be8e9a22 3f75c2b3 be8f5b32     ..u?".....u?2[..
   15960:	3f75a67b be901c2c 3f758a1c be90dd10     {.u?,.....u?....
   15970:	3f756d97 be919ddd 3f7550ed be925e94     .mu?.....Pu?.^..
   15980:	3f75341d be931f35 3f751727 be93dfbf     .4u?5...'.u?....
   15990:	3f74fa0b be94a031 3f74dcc9 be95608d     ..t?1.....t?.`..
   159a0:	3f74bf62 be9620d2 3f74a1d5 be96e100     b.t?. ....t?....
   159b0:	3f748422 be97a117 3f746649 be986116     ".t?....Ift?.a..
   159c0:	3f74484b be9920fe 3f742a27 be99e0ce     KHt?. ..'*t?....
   159d0:	3f740bdd be9aa086 3f73ed6e be9b6027     ..t?....n.s?'`..
   159e0:	3f73ced9 be9c1faf 3f73b01f be9cdf20     ..s?......s? ...
   159f0:	3f73913f be9d9e78 3f737239 be9e5db8     ?.s?x...9rs?.]..
   15a00:	3f73530e be9f1cdf 3f7333be be9fdbee     .Ss?.....3s?....
   15a10:	3f731447 bea09ae5 3f72f4ac bea159c2     G.s?......r?.Y..
   15a20:	3f72d4eb bea21887 3f72b504 bea2d733     ..r?......r?3...
   15a30:	3f7294f8 bea395c5 3f7274c7 bea4543f     ..r?.....tr??T..
   15a40:	3f725470 bea5129f 3f7233f4 bea5d0e5     pTr?.....3r?....
   15a50:	3f721352 bea68f12 3f71f28c bea74d25     R.r?......q?%M..
   15a60:	3f71d19f bea80b1f 3f71b08e bea8c8fe     ..q?......q?....
   15a70:	3f718f57 bea986c4 3f716dfb beaa446f     W.q?.....mq?oD..
   15a80:	3f714c7a beab0201 3f712ad4 beabbf77     zLq?.....*q?w...
   15a90:	3f710908 beac7cd4 3f70e717 bead3a15     ..q?.|....p?.:..
   15aa0:	3f70c502 beadf73c 3f70a2c6 beaeb449     ..p?<.....p?I...
   15ab0:	3f708066 beaf713a 3f705de1 beb02e10     f.p?:q...]p?....
   15ac0:	3f703b37 beb0eacb 3f701867 beb1a76b     7;p?....g.p?k...
   15ad0:	3f6ff573 beb263ef 3f6fd25a beb32058     s.o?.c..Z.o?X ..
   15ae0:	3f6faf1b beb3dca5 3f6f8bb8 beb498d6     ..o?......o?....
   15af0:	3f6f6830 beb554ec 3f6f4483 beb610e6     0ho?.T...Do?....
   15b00:	3f6f20b0 beb6ccc3 3f6efcba beb78884     . o?......n?....
   15b10:	3f6ed89e beb8442a 3f6eb45d beb8ffb2     ..n?*D..].n?....
   15b20:	3f6e8ff8 beb9bb1e 3f6e6b6d beba766e     ..n?....mkn?nv..
   15b30:	3f6e46be bebb31a0 3f6e21eb bebbecb6     .Fn?.1...!n?....
   15b40:	3f6dfcf2 bebca7af 3f6dd7d5 bebd628b     ..m?......m?.b..
   15b50:	3f6db293 bebe1d4a 3f6d8d2d bebed7eb     ..m?J...-.m?....
   15b60:	3f6d67a1 bebf926f 3f6d41f2 bec04cd5     .gm?o....Am?.L..
   15b70:	3f6d1c1d bec1071e 3f6cf624 bec1c148     ..m?....$.l?H...
   15b80:	3f6cd007 bec27b55 3f6ca9c5 bec33544     ..l?U{....l?D5..
   15b90:	3f6c835e bec3ef15 3f6c5cd4 bec4a8c8     ^.l?.....\l?....
   15ba0:	3f6c3624 bec5625c 3f6c0f50 bec61bd2     $6l?\b..P.l?....
   15bb0:	3f6be858 bec6d529 3f6bc13b bec78e62     X.k?)...;.k?b...
   15bc0:	3f6b99fb bec8477c 3f6b7295 bec90077     ..k?|G...rk?w...
   15bd0:	3f6b4b0c bec9b953 3f6b235e beca7210     .Kk?S...^#k?.r..
   15be0:	3f6afb8c becb2aae 3f6ad395 becbe32c     ..j?.*....j?,...
   15bf0:	3f6aab7b becc9b8b 3f6a833c becd53ca     {.j?....<.j?.S..
   15c00:	3f6a5ad9 bece0bea 3f6a3252 becec3ea     .Zj?....R2j?....
   15c10:	3f6a09a7 becf7bca 3f69e0d7 bed0338a     ..j?.{....i?.3..
   15c20:	3f69b7e4 bed0eb2a 3f698ecc bed1a2aa     ..i?*.....i?....
   15c30:	3f696591 bed25a09 3f693c32 bed31148     .ei?.Z..2<i?H...
   15c40:	3f6912ae bed3c867 3f68e907 bed47f64     ..i?g.....h?d...
   15c50:	3f68bf3c bed53641 3f68954c bed5ecfd     <.h?A6..L.h?....
   15c60:	3f686b39 bed6a399 3f684103 bed75a13     9kh?.....Ah?.Z..
   15c70:	3f6816a8 bed8106b 3f67ec2a bed8c6a3     ..h?k...*.g?....
   15c80:	3f67c187 bed97cb9 3f6796c1 beda32ad     ..g?.|....g?.2..
   15c90:	3f676bd8 bedae880 3f6740ca bedb9e31     .kg?.....@g?1...
   15ca0:	3f671599 bedc53c1 3f66ea45 bedd092e     ..g?.S..E.f?....
   15cb0:	3f66becc beddbe79 3f669330 bede73a2     ..f?y...0.f?.s..
   15cc0:	3f666771 bedf28a9 3f663b8e bedfdd8d     qgf?.(...;f?....
   15cd0:	3f660f88 bee0924f 3f65e35e bee146ee     ..f?O...^.e?.F..
   15ce0:	3f65b710 bee1fb6a 3f658aa0 bee2afc4     ..e?j.....e?....
   15cf0:	3f655e0b bee363fa 3f653154 bee4180e     .^e?.c..T1e?....
   15d00:	3f650479 bee4cbfe 3f64d77b bee57fcb     y.e?....{.d?....
   15d10:	3f64aa59 bee63375 3f647d14 bee6e6fb     Y.d?u3...}d?....
   15d20:	3f644fac bee79a5d 3f642221 bee84d9c     .Od?]...!"d?.M..
   15d30:	3f63f473 bee900b7 3f63c6a1 bee9b3ae     s.c?......c?....
   15d40:	3f6398ac beea6681 3f636a95 beeb1930     ..c?.f...jc?0...
   15d50:	3f633c5a beebcbbb 3f630dfc beec7e21     Z<c?......c?!~..
   15d60:	3f62df7b beed3063 3f62b0d7 beede280     {.b?c0....b?....
   15d70:	3f628210 beee9479 3f625326 beef464c     ..b?y...&Sb?LF..
   15d80:	3f62241a beeff7fb 3f61f4ea bef0a985     .$b?......a?....
   15d90:	3f61c598 bef15aea 3f619622 bef20c29     ..a?.Z..".a?)...
   15da0:	3f61668a bef2bd43 3f6136d0 bef36e38     .fa?C....6a?8n..
   15db0:	3f6106f2 bef41f07 3f60d6f2 bef4cfb1     ..a?......`?....
   15dc0:	3f60a6cf bef58035 3f607689 bef63093     ..`?5....v`?.0..
   15dd0:	3f604621 bef6e0cb 3f601596 bef790dc     !F`?......`?....
   15de0:	3f5fe4e9 bef840c8 3f5fb419 bef8f08e     .._?.@...._?....
   15df0:	3f5f8327 bef9a02d 3f5f5212 befa4fa5     '._?-....R_?.O..
   15e00:	3f5f20db befafef7 3f5eef81 befbae22     . _?......^?"...
   15e10:	3f5ebe05 befc5d27 3f5e8c67 befd0c04     ..^?']..g.^?....
   15e20:	3f5e5aa6 befdbabb 3f5e28c3 befe694a     .Z^?.....(^?Ji..
   15e30:	3f5df6be beff17b2 3f5dc497 beffc5f3     ..]?......]?....
   15e40:	3f5d924d bf003a06 3f5d5fe1 bf0090ff     M.]?.:..._]?....
   15e50:	3f5d2d53 bf00e7e4 3f5cfaa3 bf013eb5     S-]?......\?.>..
   15e60:	3f5cc7d1 bf019573 3f5c94dd bf01ec1c     ..\?s.....\?....
   15e70:	3f5c61c7 bf0242b1 3f5c2e8e bf029932     .a\?.B....\?2...
   15e80:	3f5bfb34 bf02ef9f 3f5bc7b8 bf0345f8     4.[?......[?.E..
   15e90:	3f5b941a bf039c3d 3f5b605a bf03f26d     ..[?=...Z`[?m...
   15ea0:	3f5b2c79 bf044889 3f5af875 bf049e91     y,[?.H..u.Z?....
   15eb0:	3f5ac450 bf04f484 3f5a9009 bf054a62     P.Z?......Z?bJ..
   15ec0:	3f5a5ba0 bf05a02c 3f5a2716 bf05f5e2     .[Z?,....'Z?....
   15ed0:	3f59f26a bf064b82 3f59bd9c bf06a10e     j.Y?.K....Y?....
   15ee0:	3f5988ad bf06f686 3f59539c bf074be8     ..Y?.....SY?.K..
   15ef0:	3f591e6a bf07a136 3f58e917 bf07f66f     j.Y?6.....X?o...
   15f00:	3f58b3a1 bf084b92 3f587e0b bf08a0a1     ..X?.K...~X?....
   15f10:	3f584853 bf08f59b 3f581279 bf094a7f     SHX?....y.X?.J..
   15f20:	3f57dc7f bf099f4e 3f57a663 bf09f409     ..W?N...c.W?....
   15f30:	3f577026 bf0a48ad 3f5739c7 bf0a9d3d     &pW?.H...9W?=...
   15f40:	3f570348 bf0af1b7 3f56cca7 bf0b461c     H.W?......V?.F..
   15f50:	3f5695e5 bf0b9a6b 3f565f02 bf0beea5     ..V?k...._V?....
   15f60:	3f5627fe bf0c42c9 3f55f0d9 bf0c96d7     .'V?.B....U?....
   15f70:	3f55b993 bf0cead0 3f55822c bf0d3eb3     ..U?....,.U?.>..
   15f80:	3f554aa4 bf0d9281 3f5512fb bf0de638     .JU?......U?8...
   15f90:	3f54db31 bf0e39da 3f54a347 bf0e8d65     1.T?.9..G.T?e...
   15fa0:	3f546b3b bf0ee0db 3f54330f bf0f343b     ;kT?.....3T?;4..
   15fb0:	3f53fac3 bf0f8784 3f53c255 bf0fdab8     ..S?....U.S?....
   15fc0:	3f5389c7 bf102dd5 3f535118 bf1080dc     ..S?.-...QS?....
   15fd0:	3f531849 bf10d3cd 3f52df59 bf1126a7     I.S?....Y.R?.&..
   15fe0:	3f52a649 bf11796b 3f526d18 bf11cc19     I.R?ky...mR?....
   15ff0:	3f5233c6 bf121eb0 3f51fa54 bf127130     .3R?....T.Q?0q..
   16000:	3f51c0c2 bf12c39a 3f518710 bf1315ee     ..Q?......Q?....
   16010:	3f514d3d bf13682a 3f51134a bf13ba50     =MQ?*h..J.Q?P...
   16020:	3f50d937 bf140c5f 3f509f03 bf145e58     7.P?_.....P?X^..
   16030:	3f5064af bf14b039 3f502a3b bf150204     .dP?9...;*P?....
   16040:	3f4fefa8 bf1553b7 3f4fb4f4 bf15a554     ..O?.S....O?T...
   16050:	3f4f7a1f bf15f6d9 3f4f3f2b bf164847     .zO?....+?O?GH..
   16060:	3f4f0417 bf16999f 3f4ec8e4 bf16eadf     ..O?......N?....
   16070:	3f4e8d90 bf173c07 3f4e521c bf178d18     ..N?.<...RN?....
   16080:	3f4e1689 bf17de12 3f4ddad5 bf182ef5     ..N?......M?....
   16090:	3f4d9f02 bf187fc0 3f4d6310 bf18d073     ..M?.....cM?s...
   160a0:	3f4d26fd bf19210f 3f4ceacb bf197194     .&M?.!....L?.q..
   160b0:	3f4cae79 bf19c200 3f4c7208 bf1a1255     y.L?.....rL?U...
   160c0:	3f4c3578 bf1a6293 3f4bf8c7 bf1ab2b8     x5L?.b....K?....
   160d0:	3f4bbbf8 bf1b02c6 3f4b7f09 bf1b52bb     ..K?......K?.R..
   160e0:	3f4b41fa bf1ba299 3f4b04cc bf1bf25f     .AK?......K?_...
   160f0:	3f4ac77f bf1c420c 3f4a8a13 bf1c91a2     ..J?.B....J?....
   16100:	3f4a4c87 bf1ce11f 3f4a0edc bf1d3084     .LJ?......J?.0..
   16110:	3f49d112 bf1d7fd1 3f499329 bf1dcf06     ..I?....).I?....
   16120:	3f495521 bf1e1e22 3f4916fa bf1e6d26     !UI?".....I?&m..
   16130:	3f48d8b3 bf1ebc12 3f489a4e bf1f0ae5     ..H?....N.H?....
   16140:	3f485bca bf1f599f 3f481d27 bf1fa841     .[H?.Y..'.H?A...
   16150:	3f47de65 bf1ff6cb 3f479f84 bf20453b     e.G?......G?;E .
   16160:	3f476085 bf209393 3f472167 bf20e1d2     .`G?.. .g!G?.. .
   16170:	3f46e22a bf212ff9 3f46a2ce bf217e06     *.F?./!...F?.~!.
   16180:	3f466354 bf21cbfb 3f4623bb bf2219d7     TcF?..!..#F?..".
   16190:	3f45e403 bf226799 3f45a42d bf22b543     ..E?.g".-.E?C.".
   161a0:	3f456439 bf2302d3 3f452426 bf23504b     9dE?..#.&$E?KP#.
   161b0:	3f44e3f5 bf239da9 3f44a3a5 bf23eaee     ..D?..#...D?..#.
   161c0:	3f446337 bf24381a 3f4422ab bf24852c     7cD?.8$.."D?,.$.
   161d0:	3f43e200 bf24d225 3f43a138 bf251f04     ..C?%.$.8.C?..%.
   161e0:	3f436051 bf256bcb 3f431f4c bf25b877     Q`C?.k%.L.C?w.%.
   161f0:	3f42de29 bf26050a 3f429ce8 bf265184     ).B?..&...B?.Q&.
   16200:	3f425b89 bf269de3 3f421a0b bf26ea2a     .[B?..&...B?*.&.
   16210:	3f41d870 bf273656 3f4196b7 bf278268     p.A?V6'...A?h.'.
   16220:	3f4154e1 bf27ce61 3f4112ec bf281a40     .TA?a.'...A?@.(.
   16230:	3f40d0da bf286605 3f408ea9 bf28b1b0     ..@?.f(...@?..(.
   16240:	3f404c5c bf28fd41 3f4009f0 bf2948b8     \L@?A.(...@?.H).
   16250:	3f3fc767 bf299415 3f3f84c0 bf29df57     g.??..)...??W.).
   16260:	3f3f41fc bf2a2a80 3f3eff1b bf2a758e     .A??.**...>?.u*.
   16270:	3f3ebc1b bf2ac082 3f3e78ff bf2b0b5b     ..>?..*..x>?[.+.
   16280:	3f3e35c5 bf2b561b 3f3df26e bf2ba0bf     .5>?.V+.n.=?..+.
   16290:	3f3daef9 bf2beb4a 3f3d6b67 bf2c35b9     ..=?J.+.gk=?.5,.
   162a0:	3f3d27b8 bf2c800f 3f3ce3ec bf2cca49     .'=?..,...<?I.,.
   162b0:	3f3ca003 bf2d1469 3f3c5bfc bf2d5e6f     ..<?i.-..[<?o^-.
   162c0:	3f3c17d9 bf2da859 3f3bd398 bf2df229     ..<?Y.-...;?).-.
   162d0:	3f3b8f3b bf2e3bde 3f3b4ac1 bf2e8578     ;.;?.;...J;?x...
   162e0:	3f3b0629 bf2ecef7 3f3ac175 bf2f185b     ).;?....u.:?[./.
   162f0:	3f3a7ca4 bf2f61a5 3f3a37b7 bf2faad3     .|:?.a/..7:?../.
   16300:	3f39f2ac bf2ff3e6 3f39ad85 bf303cde     ..9?../...9?.<0.
   16310:	3f396842 bf3085bb 3f3922e1 bf30ce7c     Bh9?..0.."9?|.0.
   16320:	3f38dd65 bf311722 3f3897cb bf315fad     e.8?".1...8?._1.
   16330:	3f385216 bf31a81d 3f380c43 bf31f071     .R8?..1.C.8?q.1.
   16340:	3f37c655 bf3238aa 3f37804a bf3280c7     U.7?.82.J.7?..2.
   16350:	3f373a23 bf32c8c9 3f36f3df bf3310af     #:7?..2...6?..3.
   16360:	3f36ad7f bf33587a 3f366704 bf33a029     ..6?zX3..g6?).3.
   16370:	3f36206c bf33e7bc 3f35d9b8 bf342f34     l 6?..3...5?4/4.
   16380:	3f3592e7 bf34768f 3f354bfb bf34bdcf     ..5?.v4..K5?..4.
   16390:	3f3504f3 bf3504f3 3f34bdcf bf354bfb     ..5?..5...4?.K5.
   163a0:	3f34768f bf3592e7 3f342f34 bf35d9b8     .v4?..5.4/4?..5.
   163b0:	3f33e7bc bf36206c 3f33a029 bf366704     ..3?l 6.).3?.g6.
   163c0:	3f33587a bf36ad7f 3f3310af bf36f3df     zX3?..6...3?..6.
   163d0:	3f32c8c9 bf373a23 3f3280c7 bf37804a     ..2?#:7...2?J.7.
   163e0:	3f3238aa bf37c655 3f31f071 bf380c43     .82?U.7.q.1?C.8.
   163f0:	3f31a81d bf385216 3f315fad bf3897cb     ..1?.R8.._1?..8.
   16400:	3f311722 bf38dd65 3f30ce7c bf3922e1     ".1?e.8.|.0?."9.
   16410:	3f3085bb bf396842 3f303cde bf39ad85     ..0?Bh9..<0?..9.
   16420:	3f2ff3e6 bf39f2ac 3f2faad3 bf3a37b7     ../?..9.../?.7:.
   16430:	3f2f61a5 bf3a7ca4 3f2f185b bf3ac175     .a/?.|:.[./?u.:.
   16440:	3f2ecef7 bf3b0629 3f2e8578 bf3b4ac1     ...?).;.x..?.J;.
   16450:	3f2e3bde bf3b8f3b 3f2df229 bf3bd398     .;.?;.;.).-?..;.
   16460:	3f2da859 bf3c17d9 3f2d5e6f bf3c5bfc     Y.-?..<.o^-?.[<.
   16470:	3f2d1469 bf3ca003 3f2cca49 bf3ce3ec     i.-?..<.I.,?..<.
   16480:	3f2c800f bf3d27b8 3f2c35b9 bf3d6b67     ..,?.'=..5,?gk=.
   16490:	3f2beb4a bf3daef9 3f2ba0bf bf3df26e     J.+?..=...+?n.=.
   164a0:	3f2b561b bf3e35c5 3f2b0b5b bf3e78ff     .V+?.5>.[.+?.x>.
   164b0:	3f2ac082 bf3ebc1b 3f2a758e bf3eff1b     ..*?..>..u*?..>.
   164c0:	3f2a2a80 bf3f41fc 3f29df57 bf3f84c0     .**?.A?.W.)?..?.
   164d0:	3f299415 bf3fc767 3f2948b8 bf4009f0     ..)?g.?..H)?..@.
   164e0:	3f28fd41 bf404c5c 3f28b1b0 bf408ea9     A.(?\L@...(?..@.
   164f0:	3f286605 bf40d0da 3f281a40 bf4112ec     .f(?..@.@.(?..A.
   16500:	3f27ce61 bf4154e1 3f278268 bf4196b7     a.'?.TA.h.'?..A.
   16510:	3f273656 bf41d870 3f26ea2a bf421a0b     V6'?p.A.*.&?..B.
   16520:	3f269de3 bf425b89 3f265184 bf429ce8     ..&?.[B..Q&?..B.
   16530:	3f26050a bf42de29 3f25b877 bf431f4c     ..&?).B.w.%?L.C.
   16540:	3f256bcb bf436051 3f251f04 bf43a138     .k%?Q`C...%?8.C.
   16550:	3f24d225 bf43e200 3f24852c bf4422ab     %.$?..C.,.$?."D.
   16560:	3f24381a bf446337 3f23eaee bf44a3a5     .8$?7cD...#?..D.
   16570:	3f239da9 bf44e3f5 3f23504b bf452426     ..#?..D.KP#?&$E.
   16580:	3f2302d3 bf456439 3f22b543 bf45a42d     ..#?9dE.C."?-.E.
   16590:	3f226799 bf45e403 3f2219d7 bf4623bb     .g"?..E..."?.#F.
   165a0:	3f21cbfb bf466354 3f217e06 bf46a2ce     ..!?TcF..~!?..F.
   165b0:	3f212ff9 bf46e22a 3f20e1d2 bf472167     ./!?*.F... ?g!G.
   165c0:	3f209393 bf476085 3f20453b bf479f84     .. ?.`G.;E ?..G.
   165d0:	3f1ff6cb bf47de65 3f1fa841 bf481d27     ...?e.G.A..?'.H.
   165e0:	3f1f599f bf485bca 3f1f0ae5 bf489a4e     .Y.?.[H....?N.H.
   165f0:	3f1ebc12 bf48d8b3 3f1e6d26 bf4916fa     ...?..H.&m.?..I.
   16600:	3f1e1e22 bf495521 3f1dcf06 bf499329     "..?!UI....?).I.
   16610:	3f1d7fd1 bf49d112 3f1d3084 bf4a0edc     ...?..I..0.?..J.
   16620:	3f1ce11f bf4a4c87 3f1c91a2 bf4a8a13     ...?.LJ....?..J.
   16630:	3f1c420c bf4ac77f 3f1bf25f bf4b04cc     .B.?..J._..?..K.
   16640:	3f1ba299 bf4b41fa 3f1b52bb bf4b7f09     ...?.AK..R.?..K.
   16650:	3f1b02c6 bf4bbbf8 3f1ab2b8 bf4bf8c7     ...?..K....?..K.
   16660:	3f1a6293 bf4c3578 3f1a1255 bf4c7208     .b.?x5L.U..?.rL.
   16670:	3f19c200 bf4cae79 3f197194 bf4ceacb     ...?y.L..q.?..L.
   16680:	3f19210f bf4d26fd 3f18d073 bf4d6310     .!.?.&M.s..?.cM.
   16690:	3f187fc0 bf4d9f02 3f182ef5 bf4ddad5     ...?..M....?..M.
   166a0:	3f17de12 bf4e1689 3f178d18 bf4e521c     ...?..N....?.RN.
   166b0:	3f173c07 bf4e8d90 3f16eadf bf4ec8e4     .<.?..N....?..N.
   166c0:	3f16999f bf4f0417 3f164847 bf4f3f2b     ...?..O.GH.?+?O.
   166d0:	3f15f6d9 bf4f7a1f 3f15a554 bf4fb4f4     ...?.zO.T..?..O.
   166e0:	3f1553b7 bf4fefa8 3f150204 bf502a3b     .S.?..O....?;*P.
   166f0:	3f14b039 bf5064af 3f145e58 bf509f03     9..?.dP.X^.?..P.
   16700:	3f140c5f bf50d937 3f13ba50 bf51134a     _..?7.P.P..?J.Q.
   16710:	3f13682a bf514d3d 3f1315ee bf518710     *h.?=MQ....?..Q.
   16720:	3f12c39a bf51c0c2 3f127130 bf51fa54     ...?..Q.0q.?T.Q.
   16730:	3f121eb0 bf5233c6 3f11cc19 bf526d18     ...?.3R....?.mR.
   16740:	3f11796b bf52a649 3f1126a7 bf52df59     ky.?I.R..&.?Y.R.
   16750:	3f10d3cd bf531849 3f1080dc bf535118     ...?I.S....?.QS.
   16760:	3f102dd5 bf5389c7 3f0fdab8 bf53c255     .-.?..S....?U.S.
   16770:	3f0f8784 bf53fac3 3f0f343b bf54330f     ...?..S.;4.?.3T.
   16780:	3f0ee0db bf546b3b 3f0e8d65 bf54a347     ...?;kT.e..?G.T.
   16790:	3f0e39da bf54db31 3f0de638 bf5512fb     .9.?1.T.8..?..U.
   167a0:	3f0d9281 bf554aa4 3f0d3eb3 bf55822c     ...?.JU..>.?,.U.
   167b0:	3f0cead0 bf55b993 3f0c96d7 bf55f0d9     ...?..U....?..U.
   167c0:	3f0c42c9 bf5627fe 3f0beea5 bf565f02     .B.?.'V....?._V.
   167d0:	3f0b9a6b bf5695e5 3f0b461c bf56cca7     k..?..V..F.?..V.
   167e0:	3f0af1b7 bf570348 3f0a9d3d bf5739c7     ...?H.W.=..?.9W.
   167f0:	3f0a48ad bf577026 3f09f409 bf57a663     .H.?&pW....?c.W.
   16800:	3f099f4e bf57dc7f 3f094a7f bf581279     N..?..W..J.?y.X.
   16810:	3f08f59b bf584853 3f08a0a1 bf587e0b     ...?SHX....?.~X.
   16820:	3f084b92 bf58b3a1 3f07f66f bf58e917     .K.?..X.o..?..X.
   16830:	3f07a136 bf591e6a 3f074be8 bf59539c     6..?j.Y..K.?.SY.
   16840:	3f06f686 bf5988ad 3f06a10e bf59bd9c     ...?..Y....?..Y.
   16850:	3f064b82 bf59f26a 3f05f5e2 bf5a2716     .K.?j.Y....?.'Z.
   16860:	3f05a02c bf5a5ba0 3f054a62 bf5a9009     ,..?.[Z.bJ.?..Z.
   16870:	3f04f484 bf5ac450 3f049e91 bf5af875     ...?P.Z....?u.Z.
   16880:	3f044889 bf5b2c79 3f03f26d bf5b605a     .H.?y,[.m..?Z`[.
   16890:	3f039c3d bf5b941a 3f0345f8 bf5bc7b8     =..?..[..E.?..[.
   168a0:	3f02ef9f bf5bfb34 3f029932 bf5c2e8e     ...?4.[.2..?..\.
   168b0:	3f0242b1 bf5c61c7 3f01ec1c bf5c94dd     .B.?.a\....?..\.
   168c0:	3f019573 bf5cc7d1 3f013eb5 bf5cfaa3     s..?..\..>.?..\.
   168d0:	3f00e7e4 bf5d2d53 3f0090ff bf5d5fe1     ...?S-]....?._].
   168e0:	3f003a06 bf5d924d 3effc5f3 bf5dc497     .:.?M.]....>..].
   168f0:	3eff17b2 bf5df6be 3efe694a bf5e28c3     ...>..].Ji.>.(^.
   16900:	3efdbabb bf5e5aa6 3efd0c04 bf5e8c67     ...>.Z^....>g.^.
   16910:	3efc5d27 bf5ebe05 3efbae22 bf5eef81     '].>..^."..>..^.
   16920:	3efafef7 bf5f20db 3efa4fa5 bf5f5212     ...>. _..O.>.R_.
   16930:	3ef9a02d bf5f8327 3ef8f08e bf5fb419     -..>'._....>.._.
   16940:	3ef840c8 bf5fe4e9 3ef790dc bf601596     .@.>.._....>..`.
   16950:	3ef6e0cb bf604621 3ef63093 bf607689     ...>!F`..0.>.v`.
   16960:	3ef58035 bf60a6cf 3ef4cfb1 bf60d6f2     5..>..`....>..`.
   16970:	3ef41f07 bf6106f2 3ef36e38 bf6136d0     ...>..a.8n.>.6a.
   16980:	3ef2bd43 bf61668a 3ef20c29 bf619622     C..>.fa.)..>".a.
   16990:	3ef15aea bf61c598 3ef0a985 bf61f4ea     .Z.>..a....>..a.
   169a0:	3eeff7fb bf62241a 3eef464c bf625326     ...>.$b.LF.>&Sb.
   169b0:	3eee9479 bf628210 3eede280 bf62b0d7     y..>..b....>..b.
   169c0:	3eed3063 bf62df7b 3eec7e21 bf630dfc     c0.>{.b.!~.>..c.
   169d0:	3eebcbbb bf633c5a 3eeb1930 bf636a95     ...>Z<c.0..>.jc.
   169e0:	3eea6681 bf6398ac 3ee9b3ae bf63c6a1     .f.>..c....>..c.
   169f0:	3ee900b7 bf63f473 3ee84d9c bf642221     ...>s.c..M.>!"d.
   16a00:	3ee79a5d bf644fac 3ee6e6fb bf647d14     ]..>.Od....>.}d.
   16a10:	3ee63375 bf64aa59 3ee57fcb bf64d77b     u3.>Y.d....>{.d.
   16a20:	3ee4cbfe bf650479 3ee4180e bf653154     ...>y.e....>T1e.
   16a30:	3ee363fa bf655e0b 3ee2afc4 bf658aa0     .c.>.^e....>..e.
   16a40:	3ee1fb6a bf65b710 3ee146ee bf65e35e     j..>..e..F.>^.e.
   16a50:	3ee0924f bf660f88 3edfdd8d bf663b8e     O..>..f....>.;f.
   16a60:	3edf28a9 bf666771 3ede73a2 bf669330     .(.>qgf..s.>0.f.
   16a70:	3eddbe79 bf66becc 3edd092e bf66ea45     y..>..f....>E.f.
   16a80:	3edc53c1 bf671599 3edb9e31 bf6740ca     .S.>..g.1..>.@g.
   16a90:	3edae880 bf676bd8 3eda32ad bf6796c1     ...>.kg..2.>..g.
   16aa0:	3ed97cb9 bf67c187 3ed8c6a3 bf67ec2a     .|.>..g....>*.g.
   16ab0:	3ed8106b bf6816a8 3ed75a13 bf684103     k..>..h..Z.>.Ah.
   16ac0:	3ed6a399 bf686b39 3ed5ecfd bf68954c     ...>9kh....>L.h.
   16ad0:	3ed53641 bf68bf3c 3ed47f64 bf68e907     A6.><.h.d..>..h.
   16ae0:	3ed3c867 bf6912ae 3ed31148 bf693c32     g..>..i.H..>2<i.
   16af0:	3ed25a09 bf696591 3ed1a2aa bf698ecc     .Z.>.ei....>..i.
   16b00:	3ed0eb2a bf69b7e4 3ed0338a bf69e0d7     *..>..i..3.>..i.
   16b10:	3ecf7bca bf6a09a7 3ecec3ea bf6a3252     .{.>..j....>R2j.
   16b20:	3ece0bea bf6a5ad9 3ecd53ca bf6a833c     ...>.Zj..S.><.j.
   16b30:	3ecc9b8b bf6aab7b 3ecbe32c bf6ad395     ...>{.j.,..>..j.
   16b40:	3ecb2aae bf6afb8c 3eca7210 bf6b235e     .*.>..j..r.>^#k.
   16b50:	3ec9b953 bf6b4b0c 3ec90077 bf6b7295     S..>.Kk.w..>.rk.
   16b60:	3ec8477c bf6b99fb 3ec78e62 bf6bc13b     |G.>..k.b..>;.k.
   16b70:	3ec6d529 bf6be858 3ec61bd2 bf6c0f50     )..>X.k....>P.l.
   16b80:	3ec5625c bf6c3624 3ec4a8c8 bf6c5cd4     \b.>$6l....>.\l.
   16b90:	3ec3ef15 bf6c835e 3ec33544 bf6ca9c5     ...>^.l.D5.>..l.
   16ba0:	3ec27b55 bf6cd007 3ec1c148 bf6cf624     U{.>..l.H..>$.l.
   16bb0:	3ec1071e bf6d1c1d 3ec04cd5 bf6d41f2     ...>..m..L.>.Am.
   16bc0:	3ebf926f bf6d67a1 3ebed7eb bf6d8d2d     o..>.gm....>-.m.
   16bd0:	3ebe1d4a bf6db293 3ebd628b bf6dd7d5     J..>..m..b.>..m.
   16be0:	3ebca7af bf6dfcf2 3ebbecb6 bf6e21eb     ...>..m....>.!n.
   16bf0:	3ebb31a0 bf6e46be 3eba766e bf6e6b6d     .1.>.Fn.nv.>mkn.
   16c00:	3eb9bb1e bf6e8ff8 3eb8ffb2 bf6eb45d     ...>..n....>].n.
   16c10:	3eb8442a bf6ed89e 3eb78884 bf6efcba     *D.>..n....>..n.
   16c20:	3eb6ccc3 bf6f20b0 3eb610e6 bf6f4483     ...>. o....>.Do.
   16c30:	3eb554ec bf6f6830 3eb498d6 bf6f8bb8     .T.>0ho....>..o.
   16c40:	3eb3dca5 bf6faf1b 3eb32058 bf6fd25a     ...>..o.X .>Z.o.
   16c50:	3eb263ef bf6ff573 3eb1a76b bf701867     .c.>s.o.k..>g.p.
   16c60:	3eb0eacb bf703b37 3eb02e10 bf705de1     ...>7;p....>.]p.
   16c70:	3eaf713a bf708066 3eaeb449 bf70a2c6     :q.>f.p.I..>..p.
   16c80:	3eadf73c bf70c502 3ead3a15 bf70e717     <..>..p..:.>..p.
   16c90:	3eac7cd4 bf710908 3eabbf77 bf712ad4     .|.>..q.w..>.*q.
   16ca0:	3eab0201 bf714c7a 3eaa446f bf716dfb     ...>zLq.oD.>.mq.
   16cb0:	3ea986c4 bf718f57 3ea8c8fe bf71b08e     ...>W.q....>..q.
   16cc0:	3ea80b1f bf71d19f 3ea74d25 bf71f28c     ...>..q.%M.>..q.
   16cd0:	3ea68f12 bf721352 3ea5d0e5 bf7233f4     ...>R.r....>.3r.
   16ce0:	3ea5129f bf725470 3ea4543f bf7274c7     ...>pTr.?T.>.tr.
   16cf0:	3ea395c5 bf7294f8 3ea2d733 bf72b504     ...>..r.3..>..r.
   16d00:	3ea21887 bf72d4eb 3ea159c2 bf72f4ac     ...>..r..Y.>..r.
   16d10:	3ea09ae5 bf731447 3e9fdbee bf7333be     ...>G.s....>.3s.
   16d20:	3e9f1cdf bf73530e 3e9e5db8 bf737239     ...>.Ss..].>9rs.
   16d30:	3e9d9e78 bf73913f 3e9cdf20 bf73b01f     x..>?.s. ..>..s.
   16d40:	3e9c1faf bf73ced9 3e9b6027 bf73ed6e     ...>..s.'`.>n.s.
   16d50:	3e9aa086 bf740bdd 3e99e0ce bf742a27     ...>..t....>'*t.
   16d60:	3e9920fe bf74484b 3e986116 bf746649     . .>KHt..a.>Ift.
   16d70:	3e97a117 bf748422 3e96e100 bf74a1d5     ...>".t....>..t.
   16d80:	3e9620d2 bf74bf62 3e95608d bf74dcc9     . .>b.t..`.>..t.
   16d90:	3e94a031 bf74fa0b 3e93dfbf bf751727     1..>..t....>'.u.
   16da0:	3e931f35 bf75341d 3e925e94 bf7550ed     5..>.4u..^.>.Pu.
   16db0:	3e919ddd bf756d97 3e90dd10 bf758a1c     ...>.mu....>..u.
   16dc0:	3e901c2c bf75a67b 3e8f5b32 bf75c2b3     ,..>{.u.2[.>..u.
   16dd0:	3e8e9a22 bf75dec6 3e8dd8fc bf75fab3     "..>..u....>..u.
   16de0:	3e8d17c0 bf76167a 3e8c566e bf76321b     ...>z.v.nV.>.2v.
   16df0:	3e8b9507 bf764d97 3e8ad38a bf7668ec     ...>.Mv....>.hv.
   16e00:	3e8a11f8 bf76841b 3e895050 bf769f24     ...>..v.PP.>$.v.
   16e10:	3e888e93 bf76ba07 3e87ccc1 bf76d4c4     ...>..v....>..v.
   16e20:	3e870ada bf76ef5b 3e8648df bf7709cc     ...>[.v..H.>..w.
   16e30:	3e8586ce bf772417 3e84c4aa bf773e3c     ...>.$w....><>w.
   16e40:	3e840270 bf77583a 3e834022 bf777213     p..>:Xw."@.>.rw.
   16e50:	3e827dc0 bf778bc5 3e81bb4a bf77a551     .}.>..w.J..>Q.w.
   16e60:	3e80f8c0 bf77beb7 3e803622 bf77d7f7     ...>..w."6.>..w.
   16e70:	3e7ee6e1 bf77f110 3e7d6156 bf780a04     ..~>..w.Va}>..x.
   16e80:	3e7bdba4 bf7822d1 3e7a55cb bf783b77     ..{>."x..Uz>w;x.
   16e90:	3e78cfcc bf7853f8 3e7749a6 bf786c52     ..x>.Sx..Iw>Rlx.
   16ea0:	3e75c35a bf788486 3e743ce8 bf789c93     Z.u>..x..<t>..x.
   16eb0:	3e72b651 bf78b47b 3e712f94 bf78cc3b     Q.r>{.x../q>;.x.
   16ec0:	3e6fa8b2 bf78e3d6 3e6e21ab bf78fb4a     ..o>..x..!n>J.x.
   16ed0:	3e6c9a7f bf791298 3e6b132f bf7929bf     ..l>..y./.k>.)y.
   16ee0:	3e698bba bf7940c0 3e680422 bf79579a     ..i>.@y.".h>.Wy.
   16ef0:	3e667c66 bf796e4e 3e64f486 bf7984dc     f|f>Nny...d>..y.
   16f00:	3e636c83 bf799b43 3e61e45c bf79b183     .lc>C.y.\.a>..y.
   16f10:	3e605c13 bf79c79d 3e5ed3a8 bf79dd91     .\`>..y...^>..y.
   16f20:	3e5d4b1a bf79f35e 3e5bc26a bf7a0904     .K]>^.y.j.[>..z.
   16f30:	3e5a3997 bf7a1e84 3e58b0a4 bf7a33dd     .9Z>..z...X>.3z.
   16f40:	3e57278f bf7a4910 3e559e58 bf7a5e1c     .'W>.Iz.X.U>.^z.
   16f50:	3e541501 bf7a7302 3e528b89 bf7a87c1     ..T>.sz...R>..z.
   16f60:	3e5101f1 bf7a9c59 3e4f7838 bf7ab0cb     ..Q>Y.z.8xO>..z.
   16f70:	3e4dee60 bf7ac516 3e4c6467 bf7ad93a     `.M>..z.gdL>:.z.
   16f80:	3e4ada4f bf7aed37 3e495018 bf7b010e     O.J>7.z..PI>..{.
   16f90:	3e47c5c2 bf7b14be 3e463b4d bf7b2848     ..G>..{.M;F>H({.
   16fa0:	3e44b0b9 bf7b3bab 3e432607 bf7b4ee7     ..D>.;{..&C>.N{.
   16fb0:	3e419b37 bf7b61fc 3e401049 bf7b74ea     7.A>.a{.I.@>.t{.
   16fc0:	3e3e853e bf7b87b2 3e3cfa15 bf7b9a53     >.>>..{...<>S.{.
   16fd0:	3e3b6ecf bf7baccd 3e39e36c bf7bbf20     .n;>..{.l.9> .{.
   16fe0:	3e3857ec bf7bd14d 3e36cc50 bf7be353     .W8>M.{.P.6>S.{.
   16ff0:	3e354098 bf7bf531 3e33b4c4 bf7c06e9     .@5>1.{...3>..|.
   17000:	3e3228d4 bf7c187a 3e309cc9 bf7c29e5     .(2>z.|...0>.)|.
   17010:	3e2f10a2 bf7c3b28 3e2d8461 bf7c4c44     ../>(;|.a.->DL|.
   17020:	3e2bf804 bf7c5d3a 3e2a6b8d bf7c6e08     ..+>:]|..k*>.n|.
   17030:	3e28defc bf7c7eb0 3e275251 bf7c8f31     ..(>.~|.QR'>1.|.
   17040:	3e25c58c bf7c9f8a 3e2438ad bf7cafbd     ..%>..|..8$>..|.
   17050:	3e22abb6 bf7cbfc9 3e211ea5 bf7ccfae     ..">..|...!>..|.
   17060:	3e1f917b bf7cdf6c 3e1e0438 bf7cef03     {..>l.|.8..>..|.
   17070:	3e1c76de bf7cfe73 3e1ae96b bf7d0dbc     .v.>s.|.k..>..}.
   17080:	3e195be0 bf7d1cdd 3e17ce3d bf7d2bd8     .[.>..}.=..>.+}.
   17090:	3e164083 bf7d3aac 3e14b2b2 bf7d4959     .@.>.:}....>YI}.
   170a0:	3e1324ca bf7d57de 3e1196cc bf7d663d     .$.>.W}....>=f}.
   170b0:	3e1008b7 bf7d7474 3e0e7a8b bf7d8285     ...>tt}..z.>..}.
   170c0:	3e0cec4a bf7d906e 3e0b5df3 bf7d9e30     J..>n.}..].>0.}.
   170d0:	3e09cf86 bf7dabcc 3e084105 bf7db940     ...>..}..A.>@.}.
   170e0:	3e06b26e bf7dc68c 3e0523c2 bf7dd3b2     n..>..}..#.>..}.
   170f0:	3e039502 bf7de0b1 3e02062e bf7ded88     ...>..}....>..}.
   17100:	3e007745 bf7dfa38 3dfdd092 bf7e06c2     Ew.>8.}....=..~.
   17110:	3dfab273 bf7e1324 3df7942c bf7e1f5e     s..=$.~.,..=^.~.
   17120:	3df475c0 bf7e2b72 3df1572e bf7e375e     .u.=r+~..W.=^7~.
   17130:	3dee3876 bf7e4323 3deb199a bf7e4ec1     v8.=#C~....=.N~.
   17140:	3de7fa9a bf7e5a38 3de4db76 bf7e6588     ...=8Z~.v..=.e~.
   17150:	3de1bc2e bf7e70b0 3dde9cc4 bf7e7bb1     ...=.p~....=.{~.
   17160:	3ddb7d37 bf7e868b 3dd85d89 bf7e913d     7}.=..~..].==.~.
   17170:	3dd53db9 bf7e9bc9 3dd21dc8 bf7ea62d     .=.=..~....=-.~.
   17180:	3dcefdb7 bf7eb069 3dcbdd86 bf7eba7f     ...=i.~....=..~.
   17190:	3dc8bd36 bf7ec46d 3dc59cc6 bf7ece34     6..=m.~....=4.~.
   171a0:	3dc27c39 bf7ed7d4 3dbf5b8d bf7ee14c     9|.=..~..[.=L.~.
   171b0:	3dbc3ac3 bf7eea9d 3db919dd bf7ef3c7     .:.=..~....=..~.
   171c0:	3db5f8da bf7efcc9 3db2d7bb bf7f05a4     ...=..~....=....
   171d0:	3dafb680 bf7f0e58 3dac952b bf7f16e4     ...=X...+..=....
   171e0:	3da973ba bf7f1f49 3da65230 bf7f2787     .s.=I...0R.=.'..
   171f0:	3da3308c bf7f2f9d 3da00ecf bf7f378d     .0.=./.....=.7..
   17200:	3d9cecf9 bf7f3f54 3d99cb0a bf7f46f4     ...=T?.....=.F..
   17210:	3d96a905 bf7f4e6d 3d9386e7 bf7f55bf     ...=mN.....=.U..
   17220:	3d9064b4 bf7f5ce9 3d8d426a bf7f63ec     .d.=.\..jB.=.c..
   17230:	3d8a200a bf7f6ac7 3d86fd94 bf7f717b     . .=.j.....={q..
   17240:	3d83db0a bf7f7808 3d80b86c bf7f7e6d     ...=.x..l..=m~..
   17250:	3d7b2b74 bf7f84ab 3d74e5e9 bf7f8ac2     t+{=......t=....
   17260:	3d6ea038 bf7f90b1 3d685a62 bf7f9678     8.n=....bZh=x...
   17270:	3d621468 bf7f9c18 3d5bce4c bf7fa191     h.b=....L.[=....
   17280:	3d55880e bf7fa6e3 3d4f41af bf7fac0d     ..U=.....AO=....
   17290:	3d48fb2f bf7fb10f 3d42b491 bf7fb5ea     /.H=......B=....
   172a0:	3d3c6dd5 bf7fba9e 3d3626fc bf7fbf2a     .m<=.....&6=*...
   172b0:	3d2fe007 bf7fc38f 3d2998f6 bf7fc7cc     ../=......)=....
   172c0:	3d2351cc bf7fcbe2 3d1d0a88 bf7fcfd1     .Q#=.......=....
   172d0:	3d16c32c bf7fd398 3d107bb8 bf7fd737     ,..=.....{.=7...
   172e0:	3d0a342f bf7fdaaf 3d03ec90 bf7fde00     /4.=.......=....
   172f0:	3cfb49b9 bf7fe129 3ceeba2d bf7fe42b     .I.<)...-..<+...
   17300:	3ce22a7b bf7fe705 3cd59aa6 bf7fe9b8     {*.<.......<....
   17310:	3cc90ab0 bf7fec43 3cbc7a9b bf7feea7     ...<C....z.<....
   17320:	3cafea69 bf7ff0e3 3ca35a1c bf7ff2f8     i..<.....Z.<....
   17330:	3c96c9b6 bf7ff4e6 3c8a3938 bf7ff6ac     ...<....89.<....
   17340:	3c7b514b bf7ff84a 3c623000 bf7ff9c1     KQ{<J....0b<....
   17350:	3c490e90 bf7ffb11 3c2fed02 bf7ffc39     ..I<....../<9...
   17360:	3c16cb59 bf7ffd39 3bfb5330 bf7ffe13     Y..<9...0S.;....
   17370:	3bc90f89 bf7ffec4 3b96cbc1 bf7fff4e     ...;.......;N...
   17380:	3b490fc7 bf7fffb1 3ac90fd4 bf7fffec     ..I;.......:....

00017390 <twiddleCoef_256>:
   17390:	3f800000 00000000 3f7fec43 3cc90ab0     ...?....C..?...<
   173a0:	3f7fb10f 3d48fb2f 3f7f4e6d 3d96a905     ...?/.H=mN.?...=
   173b0:	3f7ec46d 3dc8bd36 3f7e1324 3dfab273     m.~?6..=$.~?s..=
   173c0:	3f7d3aac 3e164083 3f7c3b28 3e2f10a2     .:}?.@.>(;|?../>
   173d0:	3f7b14be 3e47c5c2 3f79c79d 3e605c13     ..{?..G>..y?.\`>
   173e0:	3f7853f8 3e78cfcc 3f76ba07 3e888e93     .Sx?..x>..v?...>
   173f0:	3f74fa0b 3e94a031 3f731447 3ea09ae5     ..t?1..>G.s?...>
   17400:	3f710908 3eac7cd4 3f6ed89e 3eb8442a     ..q?.|.>..n?*D.>
   17410:	3f6c835e 3ec3ef15 3f6a09a7 3ecf7bca     ^.l?...>..j?.{.>
   17420:	3f676bd8 3edae880 3f64aa59 3ee63375     .kg?...>Y.d?u3.>
   17430:	3f61c598 3ef15aea 3f5ebe05 3efc5d27     ..a?.Z.>..^?'].>
   17440:	3f5b941a 3f039c3d 3f584853 3f08f59b     ..[?=..?SHX?...?
   17450:	3f54db31 3f0e39da 3f514d3d 3f13682a     1.T?.9.?=MQ?*h.?
   17460:	3f4d9f02 3f187fc0 3f49d112 3f1d7fd1     ..M?...?..I?...?
   17470:	3f45e403 3f226799 3f41d870 3f273656     ..E?.g"?p.A?V6'?
   17480:	3f3daef9 3f2beb4a 3f396842 3f3085bb     ..=?J.+?Bh9?..0?
   17490:	3f3504f3 3f3504f3 3f3085bb 3f396842     ..5?..5?..0?Bh9?
   174a0:	3f2beb4a 3f3daef9 3f273656 3f41d870     J.+?..=?V6'?p.A?
   174b0:	3f226799 3f45e403 3f1d7fd1 3f49d112     .g"?..E?...?..I?
   174c0:	3f187fc0 3f4d9f02 3f13682a 3f514d3d     ...?..M?*h.?=MQ?
   174d0:	3f0e39da 3f54db31 3f08f59b 3f584853     .9.?1.T?...?SHX?
   174e0:	3f039c3d 3f5b941a 3efc5d27 3f5ebe05     =..?..[?'].>..^?
   174f0:	3ef15aea 3f61c598 3ee63375 3f64aa59     .Z.>..a?u3.>Y.d?
   17500:	3edae880 3f676bd8 3ecf7bca 3f6a09a7     ...>.kg?.{.>..j?
   17510:	3ec3ef15 3f6c835e 3eb8442a 3f6ed89e     ...>^.l?*D.>..n?
   17520:	3eac7cd4 3f710908 3ea09ae5 3f731447     .|.>..q?...>G.s?
   17530:	3e94a031 3f74fa0b 3e888e93 3f76ba07     1..>..t?...>..v?
   17540:	3e78cfcc 3f7853f8 3e605c13 3f79c79d     ..x>.Sx?.\`>..y?
   17550:	3e47c5c2 3f7b14be 3e2f10a2 3f7c3b28     ..G>..{?../>(;|?
   17560:	3e164083 3f7d3aac 3dfab273 3f7e1324     .@.>.:}?s..=$.~?
   17570:	3dc8bd36 3f7ec46d 3d96a905 3f7f4e6d     6..=m.~?...=mN.?
   17580:	3d48fb2f 3f7fb10f 3cc90ab0 3f7fec43     /.H=...?...<C..?
   17590:	00000000 3f800000 bcc90ab0 3f7fec43     .......?....C..?
   175a0:	bd48fb2f 3f7fb10f bd96a905 3f7f4e6d     /.H....?....mN.?
   175b0:	bdc8bd36 3f7ec46d bdfab273 3f7e1324     6...m.~?s...$.~?
   175c0:	be164083 3f7d3aac be2f10a2 3f7c3b28     .@...:}?../.(;|?
   175d0:	be47c5c2 3f7b14be be605c13 3f79c79d     ..G...{?.\`...y?
   175e0:	be78cfcc 3f7853f8 be888e93 3f76ba07     ..x..Sx?......v?
   175f0:	be94a031 3f74fa0b bea09ae5 3f731447     1.....t?....G.s?
   17600:	beac7cd4 3f710908 beb8442a 3f6ed89e     .|....q?*D....n?
   17610:	bec3ef15 3f6c835e becf7bca 3f6a09a7     ....^.l?.{....j?
   17620:	bedae880 3f676bd8 bee63375 3f64aa59     .....kg?u3..Y.d?
   17630:	bef15aea 3f61c598 befc5d27 3f5ebe05     .Z....a?']....^?
   17640:	bf039c3d 3f5b941a bf08f59b 3f584853     =.....[?....SHX?
   17650:	bf0e39da 3f54db31 bf13682a 3f514d3d     .9..1.T?*h..=MQ?
   17660:	bf187fc0 3f4d9f02 bf1d7fd1 3f49d112     ......M?......I?
   17670:	bf226799 3f45e403 bf273656 3f41d870     .g"...E?V6'.p.A?
   17680:	bf2beb4a 3f3daef9 bf3085bb 3f396842     J.+...=?..0.Bh9?
   17690:	bf3504f3 3f3504f3 bf396842 3f3085bb     ..5...5?Bh9...0?
   176a0:	bf3daef9 3f2beb4a bf41d870 3f273656     ..=.J.+?p.A.V6'?
   176b0:	bf45e403 3f226799 bf49d112 3f1d7fd1     ..E..g"?..I....?
   176c0:	bf4d9f02 3f187fc0 bf514d3d 3f13682a     ..M....?=MQ.*h.?
   176d0:	bf54db31 3f0e39da bf584853 3f08f59b     1.T..9.?SHX....?
   176e0:	bf5b941a 3f039c3d bf5ebe05 3efc5d27     ..[.=..?..^.'].>
   176f0:	bf61c598 3ef15aea bf64aa59 3ee63375     ..a..Z.>Y.d.u3.>
   17700:	bf676bd8 3edae880 bf6a09a7 3ecf7bca     .kg....>..j..{.>
   17710:	bf6c835e 3ec3ef15 bf6ed89e 3eb8442a     ^.l....>..n.*D.>
   17720:	bf710908 3eac7cd4 bf731447 3ea09ae5     ..q..|.>G.s....>
   17730:	bf74fa0b 3e94a031 bf76ba07 3e888e93     ..t.1..>..v....>
   17740:	bf7853f8 3e78cfcc bf79c79d 3e605c13     .Sx...x>..y..\`>
   17750:	bf7b14be 3e47c5c2 bf7c3b28 3e2f10a2     ..{...G>(;|.../>
   17760:	bf7d3aac 3e164083 bf7e1324 3dfab273     .:}..@.>$.~.s..=
   17770:	bf7ec46d 3dc8bd36 bf7f4e6d 3d96a905     m.~.6..=mN.....=
   17780:	bf7fb10f 3d48fb2f bf7fec43 3cc90ab0     ..../.H=C......<
   17790:	bf800000 00000000 bf7fec43 bcc90ab0     ........C.......
   177a0:	bf7fb10f bd48fb2f bf7f4e6d bd96a905     ..../.H.mN......
   177b0:	bf7ec46d bdc8bd36 bf7e1324 bdfab273     m.~.6...$.~.s...
   177c0:	bf7d3aac be164083 bf7c3b28 be2f10a2     .:}..@..(;|.../.
   177d0:	bf7b14be be47c5c2 bf79c79d be605c13     ..{...G...y..\`.
   177e0:	bf7853f8 be78cfcc bf76ba07 be888e93     .Sx...x...v.....
   177f0:	bf74fa0b be94a031 bf731447 bea09ae5     ..t.1...G.s.....
   17800:	bf710908 beac7cd4 bf6ed89e beb8442a     ..q..|....n.*D..
   17810:	bf6c835e bec3ef15 bf6a09a7 becf7bca     ^.l.......j..{..
   17820:	bf676bd8 bedae880 bf64aa59 bee63375     .kg.....Y.d.u3..
   17830:	bf61c598 bef15aea bf5ebe05 befc5d27     ..a..Z....^.']..
   17840:	bf5b941a bf039c3d bf584853 bf08f59b     ..[.=...SHX.....
   17850:	bf54db31 bf0e39da bf514d3d bf13682a     1.T..9..=MQ.*h..
   17860:	bf4d9f02 bf187fc0 bf49d112 bf1d7fd1     ..M.......I.....
   17870:	bf45e403 bf226799 bf41d870 bf273656     ..E..g".p.A.V6'.
   17880:	bf3daef9 bf2beb4a bf396842 bf3085bb     ..=.J.+.Bh9...0.
   17890:	bf3504f3 bf3504f3 bf3085bb bf396842     ..5...5...0.Bh9.
   178a0:	bf2beb4a bf3daef9 bf273656 bf41d870     J.+...=.V6'.p.A.
   178b0:	bf226799 bf45e403 bf1d7fd1 bf49d112     .g"...E.......I.
   178c0:	bf187fc0 bf4d9f02 bf13682a bf514d3d     ......M.*h..=MQ.
   178d0:	bf0e39da bf54db31 bf08f59b bf584853     .9..1.T.....SHX.
   178e0:	bf039c3d bf5b941a befc5d27 bf5ebe05     =.....[.']....^.
   178f0:	bef15aea bf61c598 bee63375 bf64aa59     .Z....a.u3..Y.d.
   17900:	bedae880 bf676bd8 becf7bca bf6a09a7     .....kg..{....j.
   17910:	bec3ef15 bf6c835e beb8442a bf6ed89e     ....^.l.*D....n.
   17920:	beac7cd4 bf710908 bea09ae5 bf731447     .|....q.....G.s.
   17930:	be94a031 bf74fa0b be888e93 bf76ba07     1.....t.......v.
   17940:	be78cfcc bf7853f8 be605c13 bf79c79d     ..x..Sx..\`...y.
   17950:	be47c5c2 bf7b14be be2f10a2 bf7c3b28     ..G...{.../.(;|.
   17960:	be164083 bf7d3aac bdfab273 bf7e1324     .@...:}.s...$.~.
   17970:	bdc8bd36 bf7ec46d bd96a905 bf7f4e6d     6...m.~.....mN..
   17980:	bd48fb2f bf7fb10f bcc90ab0 bf7fec43     /.H.........C...
   17990:	80000000 bf800000 3cc90ab0 bf7fec43     ...........<C...
   179a0:	3d48fb2f bf7fb10f 3d96a905 bf7f4e6d     /.H=.......=mN..
   179b0:	3dc8bd36 bf7ec46d 3dfab273 bf7e1324     6..=m.~.s..=$.~.
   179c0:	3e164083 bf7d3aac 3e2f10a2 bf7c3b28     .@.>.:}.../>(;|.
   179d0:	3e47c5c2 bf7b14be 3e605c13 bf79c79d     ..G>..{..\`>..y.
   179e0:	3e78cfcc bf7853f8 3e888e93 bf76ba07     ..x>.Sx....>..v.
   179f0:	3e94a031 bf74fa0b 3ea09ae5 bf731447     1..>..t....>G.s.
   17a00:	3eac7cd4 bf710908 3eb8442a bf6ed89e     .|.>..q.*D.>..n.
   17a10:	3ec3ef15 bf6c835e 3ecf7bca bf6a09a7     ...>^.l..{.>..j.
   17a20:	3edae880 bf676bd8 3ee63375 bf64aa59     ...>.kg.u3.>Y.d.
   17a30:	3ef15aea bf61c598 3efc5d27 bf5ebe05     .Z.>..a.'].>..^.
   17a40:	3f039c3d bf5b941a 3f08f59b bf584853     =..?..[....?SHX.
   17a50:	3f0e39da bf54db31 3f13682a bf514d3d     .9.?1.T.*h.?=MQ.
   17a60:	3f187fc0 bf4d9f02 3f1d7fd1 bf49d112     ...?..M....?..I.
   17a70:	3f226799 bf45e403 3f273656 bf41d870     .g"?..E.V6'?p.A.
   17a80:	3f2beb4a bf3daef9 3f3085bb bf396842     J.+?..=...0?Bh9.
   17a90:	3f3504f3 bf3504f3 3f396842 bf3085bb     ..5?..5.Bh9?..0.
   17aa0:	3f3daef9 bf2beb4a 3f41d870 bf273656     ..=?J.+.p.A?V6'.
   17ab0:	3f45e403 bf226799 3f49d112 bf1d7fd1     ..E?.g"...I?....
   17ac0:	3f4d9f02 bf187fc0 3f514d3d bf13682a     ..M?....=MQ?*h..
   17ad0:	3f54db31 bf0e39da 3f584853 bf08f59b     1.T?.9..SHX?....
   17ae0:	3f5b941a bf039c3d 3f5ebe05 befc5d27     ..[?=.....^?']..
   17af0:	3f61c598 bef15aea 3f64aa59 bee63375     ..a?.Z..Y.d?u3..
   17b00:	3f676bd8 bedae880 3f6a09a7 becf7bca     .kg?......j?.{..
   17b10:	3f6c835e bec3ef15 3f6ed89e beb8442a     ^.l?......n?*D..
   17b20:	3f710908 beac7cd4 3f731447 bea09ae5     ..q?.|..G.s?....
   17b30:	3f74fa0b be94a031 3f76ba07 be888e93     ..t?1.....v?....
   17b40:	3f7853f8 be78cfcc 3f79c79d be605c13     .Sx?..x...y?.\`.
   17b50:	3f7b14be be47c5c2 3f7c3b28 be2f10a2     ..{?..G.(;|?../.
   17b60:	3f7d3aac be164083 3f7e1324 bdfab273     .:}?.@..$.~?s...
   17b70:	3f7ec46d bdc8bd36 3f7f4e6d bd96a905     m.~?6...mN.?....
   17b80:	3f7fb10f bd48fb2f 3f7fec43 bcc90ab0     ...?/.H.C..?....

00017b90 <twiddleCoef_16>:
   17b90:	3f800000 00000000 3f6c835e 3ec3ef15     ...?....^.l?...>
   17ba0:	3f3504f3 3f3504f3 3ec3ef15 3f6c835e     ..5?..5?...>^.l?
   17bb0:	00000000 3f800000 bec3ef15 3f6c835e     .......?....^.l?
   17bc0:	bf3504f3 3f3504f3 bf6c835e 3ec3ef15     ..5...5?^.l....>
   17bd0:	bf800000 00000000 bf6c835e bec3ef15     ........^.l.....
   17be0:	bf3504f3 bf3504f3 bec3ef15 bf6c835e     ..5...5.....^.l.
   17bf0:	80000000 bf800000 3ec3ef15 bf6c835e     ...........>^.l.
   17c00:	3f3504f3 bf3504f3 3f6c835e bec3ef15     ..5?..5.^.l?....

00017c10 <twiddleCoef_1024>:
   17c10:	3f800000 00000000 3f7ffec4 3bc90f89     ...?.......?...;
   17c20:	3f7ffb11 3c490e90 3f7ff4e6 3c96c9b6     ...?..I<...?...<
   17c30:	3f7fec43 3cc90ab0 3f7fe129 3cfb49b9     C..?...<)..?.I.<
   17c40:	3f7fd398 3d16c32c 3f7fc38f 3d2fe007     ...?,..=...?../=
   17c50:	3f7fb10f 3d48fb2f 3f7f9c18 3d621468     ...?/.H=...?h.b=
   17c60:	3f7f84ab 3d7b2b74 3f7f6ac7 3d8a200a     ...?t+{=.j.?. .=
   17c70:	3f7f4e6d 3d96a905 3f7f2f9d 3da3308c     mN.?...=./.?.0.=
   17c80:	3f7f0e58 3dafb680 3f7eea9d 3dbc3ac3     X..?...=..~?.:.=
   17c90:	3f7ec46d 3dc8bd36 3f7e9bc9 3dd53db9     m.~?6..=..~?.=.=
   17ca0:	3f7e70b0 3de1bc2e 3f7e4323 3dee3876     .p~?...=#C~?v8.=
   17cb0:	3f7e1324 3dfab273 3f7de0b1 3e039502     $.~?s..=..}?...>
   17cc0:	3f7dabcc 3e09cf86 3f7d7474 3e1008b7     ..}?...>tt}?...>
   17cd0:	3f7d3aac 3e164083 3f7cfe73 3e1c76de     .:}?.@.>s.|?.v.>
   17ce0:	3f7cbfc9 3e22abb6 3f7c7eb0 3e28defc     ..|?..">.~|?..(>
   17cf0:	3f7c3b28 3e2f10a2 3f7bf531 3e354098     (;|?../>1.{?.@5>
   17d00:	3f7baccd 3e3b6ecf 3f7b61fc 3e419b37     ..{?.n;>.a{?7.A>
   17d10:	3f7b14be 3e47c5c2 3f7ac516 3e4dee60     ..{?..G>..z?`.M>
   17d20:	3f7a7302 3e541501 3f7a1e84 3e5a3997     .sz?..T>..z?.9Z>
   17d30:	3f79c79d 3e605c13 3f796e4e 3e667c66     ..y?.\`>Nny?f|f>
   17d40:	3f791298 3e6c9a7f 3f78b47b 3e72b651     ..y?..l>{.x?Q.r>
   17d50:	3f7853f8 3e78cfcc 3f77f110 3e7ee6e1     .Sx?..x>..w?..~>
   17d60:	3f778bc5 3e827dc0 3f772417 3e8586ce     ..w?.}.>.$w?...>
   17d70:	3f76ba07 3e888e93 3f764d97 3e8b9507     ..v?...>.Mv?...>
   17d80:	3f75dec6 3e8e9a22 3f756d97 3e919ddd     ..u?"..>.mu?...>
   17d90:	3f74fa0b 3e94a031 3f748422 3e97a117     ..t?1..>".t?...>
   17da0:	3f740bdd 3e9aa086 3f73913f 3e9d9e78     ..t?...>?.s?x..>
   17db0:	3f731447 3ea09ae5 3f7294f8 3ea395c5     G.s?...>..r?...>
   17dc0:	3f721352 3ea68f12 3f718f57 3ea986c4     R.r?...>W.q?...>
   17dd0:	3f710908 3eac7cd4 3f708066 3eaf713a     ..q?.|.>f.p?:q.>
   17de0:	3f6ff573 3eb263ef 3f6f6830 3eb554ec     s.o?.c.>0ho?.T.>
   17df0:	3f6ed89e 3eb8442a 3f6e46be 3ebb31a0     ..n?*D.>.Fn?.1.>
   17e00:	3f6db293 3ebe1d4a 3f6d1c1d 3ec1071e     ..m?J..>..m?...>
   17e10:	3f6c835e 3ec3ef15 3f6be858 3ec6d529     ^.l?...>X.k?)..>
   17e20:	3f6b4b0c 3ec9b953 3f6aab7b 3ecc9b8b     .Kk?S..>{.j?...>
   17e30:	3f6a09a7 3ecf7bca 3f696591 3ed25a09     ..j?.{.>.ei?.Z.>
   17e40:	3f68bf3c 3ed53641 3f6816a8 3ed8106b     <.h?A6.>..h?k..>
   17e50:	3f676bd8 3edae880 3f66becc 3eddbe79     .kg?...>..f?y..>
   17e60:	3f660f88 3ee0924f 3f655e0b 3ee363fa     ..f?O..>.^e?.c.>
   17e70:	3f64aa59 3ee63375 3f63f473 3ee900b7     Y.d?u3.>s.c?...>
   17e80:	3f633c5a 3eebcbbb 3f628210 3eee9479     Z<c?...>..b?y..>
   17e90:	3f61c598 3ef15aea 3f6106f2 3ef41f07     ..a?.Z.>..a?...>
   17ea0:	3f604621 3ef6e0cb 3f5f8327 3ef9a02d     !F`?...>'._?-..>
   17eb0:	3f5ebe05 3efc5d27 3f5df6be 3eff17b2     ..^?'].>..]?...>
   17ec0:	3f5d2d53 3f00e7e4 3f5c61c7 3f0242b1     S-]?...?.a\?.B.?
   17ed0:	3f5b941a 3f039c3d 3f5ac450 3f04f484     ..[?=..?P.Z?...?
   17ee0:	3f59f26a 3f064b82 3f591e6a 3f07a136     j.Y?.K.?j.Y?6..?
   17ef0:	3f584853 3f08f59b 3f577026 3f0a48ad     SHX?...?&pW?.H.?
   17f00:	3f5695e5 3f0b9a6b 3f55b993 3f0cead0     ..V?k..?..U?...?
   17f10:	3f54db31 3f0e39da 3f53fac3 3f0f8784     1.T?.9.?..S?...?
   17f20:	3f531849 3f10d3cd 3f5233c6 3f121eb0     I.S?...?.3R?...?
   17f30:	3f514d3d 3f13682a 3f5064af 3f14b039     =MQ?*h.?.dP?9..?
   17f40:	3f4f7a1f 3f15f6d9 3f4e8d90 3f173c07     .zO?...?..N?.<.?
   17f50:	3f4d9f02 3f187fc0 3f4cae79 3f19c200     ..M?...?y.L?...?
   17f60:	3f4bbbf8 3f1b02c6 3f4ac77f 3f1c420c     ..K?...?..J?.B.?
   17f70:	3f49d112 3f1d7fd1 3f48d8b3 3f1ebc12     ..I?...?..H?...?
   17f80:	3f47de65 3f1ff6cb 3f46e22a 3f212ff9     e.G?...?*.F?./!?
   17f90:	3f45e403 3f226799 3f44e3f5 3f239da9     ..E?.g"?..D?..#?
   17fa0:	3f43e200 3f24d225 3f42de29 3f26050a     ..C?%.$?).B?..&?
   17fb0:	3f41d870 3f273656 3f40d0da 3f286605     p.A?V6'?..@?.f(?
   17fc0:	3f3fc767 3f299415 3f3ebc1b 3f2ac082     g.??..)?..>?..*?
   17fd0:	3f3daef9 3f2beb4a 3f3ca003 3f2d1469     ..=?J.+?..<?i.-?
   17fe0:	3f3b8f3b 3f2e3bde 3f3a7ca4 3f2f61a5     ;.;?.;.?.|:?.a/?
   17ff0:	3f396842 3f3085bb 3f385216 3f31a81d     Bh9?..0?.R8?..1?
   18000:	3f373a23 3f32c8c9 3f36206c 3f33e7bc     #:7?..2?l 6?..3?
   18010:	3f3504f3 3f3504f3 3f33e7bc 3f36206c     ..5?..5?..3?l 6?
   18020:	3f32c8c9 3f373a23 3f31a81d 3f385216     ..2?#:7?..1?.R8?
   18030:	3f3085bb 3f396842 3f2f61a5 3f3a7ca4     ..0?Bh9?.a/?.|:?
   18040:	3f2e3bde 3f3b8f3b 3f2d1469 3f3ca003     .;.?;.;?i.-?..<?
   18050:	3f2beb4a 3f3daef9 3f2ac082 3f3ebc1b     J.+?..=?..*?..>?
   18060:	3f299415 3f3fc767 3f286605 3f40d0da     ..)?g.??.f(?..@?
   18070:	3f273656 3f41d870 3f26050a 3f42de29     V6'?p.A?..&?).B?
   18080:	3f24d225 3f43e200 3f239da9 3f44e3f5     %.$?..C?..#?..D?
   18090:	3f226799 3f45e403 3f212ff9 3f46e22a     .g"?..E?./!?*.F?
   180a0:	3f1ff6cb 3f47de65 3f1ebc12 3f48d8b3     ...?e.G?...?..H?
   180b0:	3f1d7fd1 3f49d112 3f1c420c 3f4ac77f     ...?..I?.B.?..J?
   180c0:	3f1b02c6 3f4bbbf8 3f19c200 3f4cae79     ...?..K?...?y.L?
   180d0:	3f187fc0 3f4d9f02 3f173c07 3f4e8d90     ...?..M?.<.?..N?
   180e0:	3f15f6d9 3f4f7a1f 3f14b039 3f5064af     ...?.zO?9..?.dP?
   180f0:	3f13682a 3f514d3d 3f121eb0 3f5233c6     *h.?=MQ?...?.3R?
   18100:	3f10d3cd 3f531849 3f0f8784 3f53fac3     ...?I.S?...?..S?
   18110:	3f0e39da 3f54db31 3f0cead0 3f55b993     .9.?1.T?...?..U?
   18120:	3f0b9a6b 3f5695e5 3f0a48ad 3f577026     k..?..V?.H.?&pW?
   18130:	3f08f59b 3f584853 3f07a136 3f591e6a     ...?SHX?6..?j.Y?
   18140:	3f064b82 3f59f26a 3f04f484 3f5ac450     .K.?j.Y?...?P.Z?
   18150:	3f039c3d 3f5b941a 3f0242b1 3f5c61c7     =..?..[?.B.?.a\?
   18160:	3f00e7e4 3f5d2d53 3eff17b2 3f5df6be     ...?S-]?...>..]?
   18170:	3efc5d27 3f5ebe05 3ef9a02d 3f5f8327     '].>..^?-..>'._?
   18180:	3ef6e0cb 3f604621 3ef41f07 3f6106f2     ...>!F`?...>..a?
   18190:	3ef15aea 3f61c598 3eee9479 3f628210     .Z.>..a?y..>..b?
   181a0:	3eebcbbb 3f633c5a 3ee900b7 3f63f473     ...>Z<c?...>s.c?
   181b0:	3ee63375 3f64aa59 3ee363fa 3f655e0b     u3.>Y.d?.c.>.^e?
   181c0:	3ee0924f 3f660f88 3eddbe79 3f66becc     O..>..f?y..>..f?
   181d0:	3edae880 3f676bd8 3ed8106b 3f6816a8     ...>.kg?k..>..h?
   181e0:	3ed53641 3f68bf3c 3ed25a09 3f696591     A6.><.h?.Z.>.ei?
   181f0:	3ecf7bca 3f6a09a7 3ecc9b8b 3f6aab7b     .{.>..j?...>{.j?
   18200:	3ec9b953 3f6b4b0c 3ec6d529 3f6be858     S..>.Kk?)..>X.k?
   18210:	3ec3ef15 3f6c835e 3ec1071e 3f6d1c1d     ...>^.l?...>..m?
   18220:	3ebe1d4a 3f6db293 3ebb31a0 3f6e46be     J..>..m?.1.>.Fn?
   18230:	3eb8442a 3f6ed89e 3eb554ec 3f6f6830     *D.>..n?.T.>0ho?
   18240:	3eb263ef 3f6ff573 3eaf713a 3f708066     .c.>s.o?:q.>f.p?
   18250:	3eac7cd4 3f710908 3ea986c4 3f718f57     .|.>..q?...>W.q?
   18260:	3ea68f12 3f721352 3ea395c5 3f7294f8     ...>R.r?...>..r?
   18270:	3ea09ae5 3f731447 3e9d9e78 3f73913f     ...>G.s?x..>?.s?
   18280:	3e9aa086 3f740bdd 3e97a117 3f748422     ...>..t?...>".t?
   18290:	3e94a031 3f74fa0b 3e919ddd 3f756d97     1..>..t?...>.mu?
   182a0:	3e8e9a22 3f75dec6 3e8b9507 3f764d97     "..>..u?...>.Mv?
   182b0:	3e888e93 3f76ba07 3e8586ce 3f772417     ...>..v?...>.$w?
   182c0:	3e827dc0 3f778bc5 3e7ee6e1 3f77f110     .}.>..w?..~>..w?
   182d0:	3e78cfcc 3f7853f8 3e72b651 3f78b47b     ..x>.Sx?Q.r>{.x?
   182e0:	3e6c9a7f 3f791298 3e667c66 3f796e4e     ..l>..y?f|f>Nny?
   182f0:	3e605c13 3f79c79d 3e5a3997 3f7a1e84     .\`>..y?.9Z>..z?
   18300:	3e541501 3f7a7302 3e4dee60 3f7ac516     ..T>.sz?`.M>..z?
   18310:	3e47c5c2 3f7b14be 3e419b37 3f7b61fc     ..G>..{?7.A>.a{?
   18320:	3e3b6ecf 3f7baccd 3e354098 3f7bf531     .n;>..{?.@5>1.{?
   18330:	3e2f10a2 3f7c3b28 3e28defc 3f7c7eb0     ../>(;|?..(>.~|?
   18340:	3e22abb6 3f7cbfc9 3e1c76de 3f7cfe73     ..">..|?.v.>s.|?
   18350:	3e164083 3f7d3aac 3e1008b7 3f7d7474     .@.>.:}?...>tt}?
   18360:	3e09cf86 3f7dabcc 3e039502 3f7de0b1     ...>..}?...>..}?
   18370:	3dfab273 3f7e1324 3dee3876 3f7e4323     s..=$.~?v8.=#C~?
   18380:	3de1bc2e 3f7e70b0 3dd53db9 3f7e9bc9     ...=.p~?.=.=..~?
   18390:	3dc8bd36 3f7ec46d 3dbc3ac3 3f7eea9d     6..=m.~?.:.=..~?
   183a0:	3dafb680 3f7f0e58 3da3308c 3f7f2f9d     ...=X..?.0.=./.?
   183b0:	3d96a905 3f7f4e6d 3d8a200a 3f7f6ac7     ...=mN.?. .=.j.?
   183c0:	3d7b2b74 3f7f84ab 3d621468 3f7f9c18     t+{=...?h.b=...?
   183d0:	3d48fb2f 3f7fb10f 3d2fe007 3f7fc38f     /.H=...?../=...?
   183e0:	3d16c32c 3f7fd398 3cfb49b9 3f7fe129     ,..=...?.I.<)..?
   183f0:	3cc90ab0 3f7fec43 3c96c9b6 3f7ff4e6     ...<C..?...<...?
   18400:	3c490e90 3f7ffb11 3bc90f89 3f7ffec4     ..I<...?...;...?
   18410:	00000000 3f800000 bbc90f89 3f7ffec4     .......?.......?
   18420:	bc490e90 3f7ffb11 bc96c9b6 3f7ff4e6     ..I....?.......?
   18430:	bcc90ab0 3f7fec43 bcfb49b9 3f7fe129     ....C..?.I..)..?
   18440:	bd16c32c 3f7fd398 bd2fe007 3f7fc38f     ,......?../....?
   18450:	bd48fb2f 3f7fb10f bd621468 3f7f9c18     /.H....?h.b....?
   18460:	bd7b2b74 3f7f84ab bd8a200a 3f7f6ac7     t+{....?. ...j.?
   18470:	bd96a905 3f7f4e6d bda3308c 3f7f2f9d     ....mN.?.0.../.?
   18480:	bdafb680 3f7f0e58 bdbc3ac3 3f7eea9d     ....X..?.:....~?
   18490:	bdc8bd36 3f7ec46d bdd53db9 3f7e9bc9     6...m.~?.=....~?
   184a0:	bde1bc2e 3f7e70b0 bdee3876 3f7e4323     .....p~?v8..#C~?
   184b0:	bdfab273 3f7e1324 be039502 3f7de0b1     s...$.~?......}?
   184c0:	be09cf86 3f7dabcc be1008b7 3f7d7474     ......}?....tt}?
   184d0:	be164083 3f7d3aac be1c76de 3f7cfe73     .@...:}?.v..s.|?
   184e0:	be22abb6 3f7cbfc9 be28defc 3f7c7eb0     .."...|?..(..~|?
   184f0:	be2f10a2 3f7c3b28 be354098 3f7bf531     ../.(;|?.@5.1.{?
   18500:	be3b6ecf 3f7baccd be419b37 3f7b61fc     .n;...{?7.A..a{?
   18510:	be47c5c2 3f7b14be be4dee60 3f7ac516     ..G...{?`.M...z?
   18520:	be541501 3f7a7302 be5a3997 3f7a1e84     ..T..sz?.9Z...z?
   18530:	be605c13 3f79c79d be667c66 3f796e4e     .\`...y?f|f.Nny?
   18540:	be6c9a7f 3f791298 be72b651 3f78b47b     ..l...y?Q.r.{.x?
   18550:	be78cfcc 3f7853f8 be7ee6e1 3f77f110     ..x..Sx?..~...w?
   18560:	be827dc0 3f778bc5 be8586ce 3f772417     .}....w?.....$w?
   18570:	be888e93 3f76ba07 be8b9507 3f764d97     ......v?.....Mv?
   18580:	be8e9a22 3f75dec6 be919ddd 3f756d97     ".....u?.....mu?
   18590:	be94a031 3f74fa0b be97a117 3f748422     1.....t?....".t?
   185a0:	be9aa086 3f740bdd be9d9e78 3f73913f     ......t?x...?.s?
   185b0:	bea09ae5 3f731447 bea395c5 3f7294f8     ....G.s?......r?
   185c0:	bea68f12 3f721352 bea986c4 3f718f57     ....R.r?....W.q?
   185d0:	beac7cd4 3f710908 beaf713a 3f708066     .|....q?:q..f.p?
   185e0:	beb263ef 3f6ff573 beb554ec 3f6f6830     .c..s.o?.T..0ho?
   185f0:	beb8442a 3f6ed89e bebb31a0 3f6e46be     *D....n?.1...Fn?
   18600:	bebe1d4a 3f6db293 bec1071e 3f6d1c1d     J.....m?......m?
   18610:	bec3ef15 3f6c835e bec6d529 3f6be858     ....^.l?)...X.k?
   18620:	bec9b953 3f6b4b0c becc9b8b 3f6aab7b     S....Kk?....{.j?
   18630:	becf7bca 3f6a09a7 bed25a09 3f696591     .{....j?.Z...ei?
   18640:	bed53641 3f68bf3c bed8106b 3f6816a8     A6..<.h?k.....h?
   18650:	bedae880 3f676bd8 beddbe79 3f66becc     .....kg?y.....f?
   18660:	bee0924f 3f660f88 bee363fa 3f655e0b     O.....f?.c...^e?
   18670:	bee63375 3f64aa59 bee900b7 3f63f473     u3..Y.d?....s.c?
   18680:	beebcbbb 3f633c5a beee9479 3f628210     ....Z<c?y.....b?
   18690:	bef15aea 3f61c598 bef41f07 3f6106f2     .Z....a?......a?
   186a0:	bef6e0cb 3f604621 bef9a02d 3f5f8327     ....!F`?-...'._?
   186b0:	befc5d27 3f5ebe05 beff17b2 3f5df6be     ']....^?......]?
   186c0:	bf00e7e4 3f5d2d53 bf0242b1 3f5c61c7     ....S-]?.B...a\?
   186d0:	bf039c3d 3f5b941a bf04f484 3f5ac450     =.....[?....P.Z?
   186e0:	bf064b82 3f59f26a bf07a136 3f591e6a     .K..j.Y?6...j.Y?
   186f0:	bf08f59b 3f584853 bf0a48ad 3f577026     ....SHX?.H..&pW?
   18700:	bf0b9a6b 3f5695e5 bf0cead0 3f55b993     k.....V?......U?
   18710:	bf0e39da 3f54db31 bf0f8784 3f53fac3     .9..1.T?......S?
   18720:	bf10d3cd 3f531849 bf121eb0 3f5233c6     ....I.S?.....3R?
   18730:	bf13682a 3f514d3d bf14b039 3f5064af     *h..=MQ?9....dP?
   18740:	bf15f6d9 3f4f7a1f bf173c07 3f4e8d90     .....zO?.<....N?
   18750:	bf187fc0 3f4d9f02 bf19c200 3f4cae79     ......M?....y.L?
   18760:	bf1b02c6 3f4bbbf8 bf1c420c 3f4ac77f     ......K?.B....J?
   18770:	bf1d7fd1 3f49d112 bf1ebc12 3f48d8b3     ......I?......H?
   18780:	bf1ff6cb 3f47de65 bf212ff9 3f46e22a     ....e.G?./!.*.F?
   18790:	bf226799 3f45e403 bf239da9 3f44e3f5     .g"...E?..#...D?
   187a0:	bf24d225 3f43e200 bf26050a 3f42de29     %.$...C?..&.).B?
   187b0:	bf273656 3f41d870 bf286605 3f40d0da     V6'.p.A?.f(...@?
   187c0:	bf299415 3f3fc767 bf2ac082 3f3ebc1b     ..).g.??..*...>?
   187d0:	bf2beb4a 3f3daef9 bf2d1469 3f3ca003     J.+...=?i.-...<?
   187e0:	bf2e3bde 3f3b8f3b bf2f61a5 3f3a7ca4     .;..;.;?.a/..|:?
   187f0:	bf3085bb 3f396842 bf31a81d 3f385216     ..0.Bh9?..1..R8?
   18800:	bf32c8c9 3f373a23 bf33e7bc 3f36206c     ..2.#:7?..3.l 6?
   18810:	bf3504f3 3f3504f3 bf36206c 3f33e7bc     ..5...5?l 6...3?
   18820:	bf373a23 3f32c8c9 bf385216 3f31a81d     #:7...2?.R8...1?
   18830:	bf396842 3f3085bb bf3a7ca4 3f2f61a5     Bh9...0?.|:..a/?
   18840:	bf3b8f3b 3f2e3bde bf3ca003 3f2d1469     ;.;..;.?..<.i.-?
   18850:	bf3daef9 3f2beb4a bf3ebc1b 3f2ac082     ..=.J.+?..>...*?
   18860:	bf3fc767 3f299415 bf40d0da 3f286605     g.?...)?..@..f(?
   18870:	bf41d870 3f273656 bf42de29 3f26050a     p.A.V6'?).B...&?
   18880:	bf43e200 3f24d225 bf44e3f5 3f239da9     ..C.%.$?..D...#?
   18890:	bf45e403 3f226799 bf46e22a 3f212ff9     ..E..g"?*.F../!?
   188a0:	bf47de65 3f1ff6cb bf48d8b3 3f1ebc12     e.G....?..H....?
   188b0:	bf49d112 3f1d7fd1 bf4ac77f 3f1c420c     ..I....?..J..B.?
   188c0:	bf4bbbf8 3f1b02c6 bf4cae79 3f19c200     ..K....?y.L....?
   188d0:	bf4d9f02 3f187fc0 bf4e8d90 3f173c07     ..M....?..N..<.?
   188e0:	bf4f7a1f 3f15f6d9 bf5064af 3f14b039     .zO....?.dP.9..?
   188f0:	bf514d3d 3f13682a bf5233c6 3f121eb0     =MQ.*h.?.3R....?
   18900:	bf531849 3f10d3cd bf53fac3 3f0f8784     I.S....?..S....?
   18910:	bf54db31 3f0e39da bf55b993 3f0cead0     1.T..9.?..U....?
   18920:	bf5695e5 3f0b9a6b bf577026 3f0a48ad     ..V.k..?&pW..H.?
   18930:	bf584853 3f08f59b bf591e6a 3f07a136     SHX....?j.Y.6..?
   18940:	bf59f26a 3f064b82 bf5ac450 3f04f484     j.Y..K.?P.Z....?
   18950:	bf5b941a 3f039c3d bf5c61c7 3f0242b1     ..[.=..?.a\..B.?
   18960:	bf5d2d53 3f00e7e4 bf5df6be 3eff17b2     S-]....?..]....>
   18970:	bf5ebe05 3efc5d27 bf5f8327 3ef9a02d     ..^.'].>'._.-..>
   18980:	bf604621 3ef6e0cb bf6106f2 3ef41f07     !F`....>..a....>
   18990:	bf61c598 3ef15aea bf628210 3eee9479     ..a..Z.>..b.y..>
   189a0:	bf633c5a 3eebcbbb bf63f473 3ee900b7     Z<c....>s.c....>
   189b0:	bf64aa59 3ee63375 bf655e0b 3ee363fa     Y.d.u3.>.^e..c.>
   189c0:	bf660f88 3ee0924f bf66becc 3eddbe79     ..f.O..>..f.y..>
   189d0:	bf676bd8 3edae880 bf6816a8 3ed8106b     .kg....>..h.k..>
   189e0:	bf68bf3c 3ed53641 bf696591 3ed25a09     <.h.A6.>.ei..Z.>
   189f0:	bf6a09a7 3ecf7bca bf6aab7b 3ecc9b8b     ..j..{.>{.j....>
   18a00:	bf6b4b0c 3ec9b953 bf6be858 3ec6d529     .Kk.S..>X.k.)..>
   18a10:	bf6c835e 3ec3ef15 bf6d1c1d 3ec1071e     ^.l....>..m....>
   18a20:	bf6db293 3ebe1d4a bf6e46be 3ebb31a0     ..m.J..>.Fn..1.>
   18a30:	bf6ed89e 3eb8442a bf6f6830 3eb554ec     ..n.*D.>0ho..T.>
   18a40:	bf6ff573 3eb263ef bf708066 3eaf713a     s.o..c.>f.p.:q.>
   18a50:	bf710908 3eac7cd4 bf718f57 3ea986c4     ..q..|.>W.q....>
   18a60:	bf721352 3ea68f12 bf7294f8 3ea395c5     R.r....>..r....>
   18a70:	bf731447 3ea09ae5 bf73913f 3e9d9e78     G.s....>?.s.x..>
   18a80:	bf740bdd 3e9aa086 bf748422 3e97a117     ..t....>".t....>
   18a90:	bf74fa0b 3e94a031 bf756d97 3e919ddd     ..t.1..>.mu....>
   18aa0:	bf75dec6 3e8e9a22 bf764d97 3e8b9507     ..u."..>.Mv....>
   18ab0:	bf76ba07 3e888e93 bf772417 3e8586ce     ..v....>.$w....>
   18ac0:	bf778bc5 3e827dc0 bf77f110 3e7ee6e1     ..w..}.>..w...~>
   18ad0:	bf7853f8 3e78cfcc bf78b47b 3e72b651     .Sx...x>{.x.Q.r>
   18ae0:	bf791298 3e6c9a7f bf796e4e 3e667c66     ..y...l>Nny.f|f>
   18af0:	bf79c79d 3e605c13 bf7a1e84 3e5a3997     ..y..\`>..z..9Z>
   18b00:	bf7a7302 3e541501 bf7ac516 3e4dee60     .sz...T>..z.`.M>
   18b10:	bf7b14be 3e47c5c2 bf7b61fc 3e419b37     ..{...G>.a{.7.A>
   18b20:	bf7baccd 3e3b6ecf bf7bf531 3e354098     ..{..n;>1.{..@5>
   18b30:	bf7c3b28 3e2f10a2 bf7c7eb0 3e28defc     (;|.../>.~|...(>
   18b40:	bf7cbfc9 3e22abb6 bf7cfe73 3e1c76de     ..|...">s.|..v.>
   18b50:	bf7d3aac 3e164083 bf7d7474 3e1008b7     .:}..@.>tt}....>
   18b60:	bf7dabcc 3e09cf86 bf7de0b1 3e039502     ..}....>..}....>
   18b70:	bf7e1324 3dfab273 bf7e4323 3dee3876     $.~.s..=#C~.v8.=
   18b80:	bf7e70b0 3de1bc2e bf7e9bc9 3dd53db9     .p~....=..~..=.=
   18b90:	bf7ec46d 3dc8bd36 bf7eea9d 3dbc3ac3     m.~.6..=..~..:.=
   18ba0:	bf7f0e58 3dafb680 bf7f2f9d 3da3308c     X......=./...0.=
   18bb0:	bf7f4e6d 3d96a905 bf7f6ac7 3d8a200a     mN.....=.j... .=
   18bc0:	bf7f84ab 3d7b2b74 bf7f9c18 3d621468     ....t+{=....h.b=
   18bd0:	bf7fb10f 3d48fb2f bf7fc38f 3d2fe007     ..../.H=....../=
   18be0:	bf7fd398 3d16c32c bf7fe129 3cfb49b9     ....,..=)....I.<
   18bf0:	bf7fec43 3cc90ab0 bf7ff4e6 3c96c9b6     C......<.......<
   18c00:	bf7ffb11 3c490e90 bf7ffec4 3bc90f89     ......I<.......;
   18c10:	bf800000 00000000 bf7ffec4 bbc90f89     ................
   18c20:	bf7ffb11 bc490e90 bf7ff4e6 bc96c9b6     ......I.........
   18c30:	bf7fec43 bcc90ab0 bf7fe129 bcfb49b9     C.......)....I..
   18c40:	bf7fd398 bd16c32c bf7fc38f bd2fe007     ....,........./.
   18c50:	bf7fb10f bd48fb2f bf7f9c18 bd621468     ..../.H.....h.b.
   18c60:	bf7f84ab bd7b2b74 bf7f6ac7 bd8a200a     ....t+{..j... ..
   18c70:	bf7f4e6d bd96a905 bf7f2f9d bda3308c     mN......./...0..
   18c80:	bf7f0e58 bdafb680 bf7eea9d bdbc3ac3     X.........~..:..
   18c90:	bf7ec46d bdc8bd36 bf7e9bc9 bdd53db9     m.~.6.....~..=..
   18ca0:	bf7e70b0 bde1bc2e bf7e4323 bdee3876     .p~.....#C~.v8..
   18cb0:	bf7e1324 bdfab273 bf7de0b1 be039502     $.~.s.....}.....
   18cc0:	bf7dabcc be09cf86 bf7d7474 be1008b7     ..}.....tt}.....
   18cd0:	bf7d3aac be164083 bf7cfe73 be1c76de     .:}..@..s.|..v..
   18ce0:	bf7cbfc9 be22abb6 bf7c7eb0 be28defc     ..|..."..~|...(.
   18cf0:	bf7c3b28 be2f10a2 bf7bf531 be354098     (;|.../.1.{..@5.
   18d00:	bf7baccd be3b6ecf bf7b61fc be419b37     ..{..n;..a{.7.A.
   18d10:	bf7b14be be47c5c2 bf7ac516 be4dee60     ..{...G...z.`.M.
   18d20:	bf7a7302 be541501 bf7a1e84 be5a3997     .sz...T...z..9Z.
   18d30:	bf79c79d be605c13 bf796e4e be667c66     ..y..\`.Nny.f|f.
   18d40:	bf791298 be6c9a7f bf78b47b be72b651     ..y...l.{.x.Q.r.
   18d50:	bf7853f8 be78cfcc bf77f110 be7ee6e1     .Sx...x...w...~.
   18d60:	bf778bc5 be827dc0 bf772417 be8586ce     ..w..}...$w.....
   18d70:	bf76ba07 be888e93 bf764d97 be8b9507     ..v......Mv.....
   18d80:	bf75dec6 be8e9a22 bf756d97 be919ddd     ..u."....mu.....
   18d90:	bf74fa0b be94a031 bf748422 be97a117     ..t.1...".t.....
   18da0:	bf740bdd be9aa086 bf73913f be9d9e78     ..t.....?.s.x...
   18db0:	bf731447 bea09ae5 bf7294f8 bea395c5     G.s.......r.....
   18dc0:	bf721352 bea68f12 bf718f57 bea986c4     R.r.....W.q.....
   18dd0:	bf710908 beac7cd4 bf708066 beaf713a     ..q..|..f.p.:q..
   18de0:	bf6ff573 beb263ef bf6f6830 beb554ec     s.o..c..0ho..T..
   18df0:	bf6ed89e beb8442a bf6e46be bebb31a0     ..n.*D...Fn..1..
   18e00:	bf6db293 bebe1d4a bf6d1c1d bec1071e     ..m.J.....m.....
   18e10:	bf6c835e bec3ef15 bf6be858 bec6d529     ^.l.....X.k.)...
   18e20:	bf6b4b0c bec9b953 bf6aab7b becc9b8b     .Kk.S...{.j.....
   18e30:	bf6a09a7 becf7bca bf696591 bed25a09     ..j..{...ei..Z..
   18e40:	bf68bf3c bed53641 bf6816a8 bed8106b     <.h.A6....h.k...
   18e50:	bf676bd8 bedae880 bf66becc beddbe79     .kg.......f.y...
   18e60:	bf660f88 bee0924f bf655e0b bee363fa     ..f.O....^e..c..
   18e70:	bf64aa59 bee63375 bf63f473 bee900b7     Y.d.u3..s.c.....
   18e80:	bf633c5a beebcbbb bf628210 beee9479     Z<c.......b.y...
   18e90:	bf61c598 bef15aea bf6106f2 bef41f07     ..a..Z....a.....
   18ea0:	bf604621 bef6e0cb bf5f8327 bef9a02d     !F`.....'._.-...
   18eb0:	bf5ebe05 befc5d27 bf5df6be beff17b2     ..^.']....].....
   18ec0:	bf5d2d53 bf00e7e4 bf5c61c7 bf0242b1     S-]......a\..B..
   18ed0:	bf5b941a bf039c3d bf5ac450 bf04f484     ..[.=...P.Z.....
   18ee0:	bf59f26a bf064b82 bf591e6a bf07a136     j.Y..K..j.Y.6...
   18ef0:	bf584853 bf08f59b bf577026 bf0a48ad     SHX.....&pW..H..
   18f00:	bf5695e5 bf0b9a6b bf55b993 bf0cead0     ..V.k.....U.....
   18f10:	bf54db31 bf0e39da bf53fac3 bf0f8784     1.T..9....S.....
   18f20:	bf531849 bf10d3cd bf5233c6 bf121eb0     I.S......3R.....
   18f30:	bf514d3d bf13682a bf5064af bf14b039     =MQ.*h...dP.9...
   18f40:	bf4f7a1f bf15f6d9 bf4e8d90 bf173c07     .zO.......N..<..
   18f50:	bf4d9f02 bf187fc0 bf4cae79 bf19c200     ..M.....y.L.....
   18f60:	bf4bbbf8 bf1b02c6 bf4ac77f bf1c420c     ..K.......J..B..
   18f70:	bf49d112 bf1d7fd1 bf48d8b3 bf1ebc12     ..I.......H.....
   18f80:	bf47de65 bf1ff6cb bf46e22a bf212ff9     e.G.....*.F../!.
   18f90:	bf45e403 bf226799 bf44e3f5 bf239da9     ..E..g"...D...#.
   18fa0:	bf43e200 bf24d225 bf42de29 bf26050a     ..C.%.$.).B...&.
   18fb0:	bf41d870 bf273656 bf40d0da bf286605     p.A.V6'...@..f(.
   18fc0:	bf3fc767 bf299415 bf3ebc1b bf2ac082     g.?...)...>...*.
   18fd0:	bf3daef9 bf2beb4a bf3ca003 bf2d1469     ..=.J.+...<.i.-.
   18fe0:	bf3b8f3b bf2e3bde bf3a7ca4 bf2f61a5     ;.;..;...|:..a/.
   18ff0:	bf396842 bf3085bb bf385216 bf31a81d     Bh9...0..R8...1.
   19000:	bf373a23 bf32c8c9 bf36206c bf33e7bc     #:7...2.l 6...3.
   19010:	bf3504f3 bf3504f3 bf33e7bc bf36206c     ..5...5...3.l 6.
   19020:	bf32c8c9 bf373a23 bf31a81d bf385216     ..2.#:7...1..R8.
   19030:	bf3085bb bf396842 bf2f61a5 bf3a7ca4     ..0.Bh9..a/..|:.
   19040:	bf2e3bde bf3b8f3b bf2d1469 bf3ca003     .;..;.;.i.-...<.
   19050:	bf2beb4a bf3daef9 bf2ac082 bf3ebc1b     J.+...=...*...>.
   19060:	bf299415 bf3fc767 bf286605 bf40d0da     ..).g.?..f(...@.
   19070:	bf273656 bf41d870 bf26050a bf42de29     V6'.p.A...&.).B.
   19080:	bf24d225 bf43e200 bf239da9 bf44e3f5     %.$...C...#...D.
   19090:	bf226799 bf45e403 bf212ff9 bf46e22a     .g"...E../!.*.F.
   190a0:	bf1ff6cb bf47de65 bf1ebc12 bf48d8b3     ....e.G.......H.
   190b0:	bf1d7fd1 bf49d112 bf1c420c bf4ac77f     ......I..B....J.
   190c0:	bf1b02c6 bf4bbbf8 bf19c200 bf4cae79     ......K.....y.L.
   190d0:	bf187fc0 bf4d9f02 bf173c07 bf4e8d90     ......M..<....N.
   190e0:	bf15f6d9 bf4f7a1f bf14b039 bf5064af     .....zO.9....dP.
   190f0:	bf13682a bf514d3d bf121eb0 bf5233c6     *h..=MQ......3R.
   19100:	bf10d3cd bf531849 bf0f8784 bf53fac3     ....I.S.......S.
   19110:	bf0e39da bf54db31 bf0cead0 bf55b993     .9..1.T.......U.
   19120:	bf0b9a6b bf5695e5 bf0a48ad bf577026     k.....V..H..&pW.
   19130:	bf08f59b bf584853 bf07a136 bf591e6a     ....SHX.6...j.Y.
   19140:	bf064b82 bf59f26a bf04f484 bf5ac450     .K..j.Y.....P.Z.
   19150:	bf039c3d bf5b941a bf0242b1 bf5c61c7     =.....[..B...a\.
   19160:	bf00e7e4 bf5d2d53 beff17b2 bf5df6be     ....S-].......].
   19170:	befc5d27 bf5ebe05 bef9a02d bf5f8327     ']....^.-...'._.
   19180:	bef6e0cb bf604621 bef41f07 bf6106f2     ....!F`.......a.
   19190:	bef15aea bf61c598 beee9479 bf628210     .Z....a.y.....b.
   191a0:	beebcbbb bf633c5a bee900b7 bf63f473     ....Z<c.....s.c.
   191b0:	bee63375 bf64aa59 bee363fa bf655e0b     u3..Y.d..c...^e.
   191c0:	bee0924f bf660f88 beddbe79 bf66becc     O.....f.y.....f.
   191d0:	bedae880 bf676bd8 bed8106b bf6816a8     .....kg.k.....h.
   191e0:	bed53641 bf68bf3c bed25a09 bf696591     A6..<.h..Z...ei.
   191f0:	becf7bca bf6a09a7 becc9b8b bf6aab7b     .{....j.....{.j.
   19200:	bec9b953 bf6b4b0c bec6d529 bf6be858     S....Kk.)...X.k.
   19210:	bec3ef15 bf6c835e bec1071e bf6d1c1d     ....^.l.......m.
   19220:	bebe1d4a bf6db293 bebb31a0 bf6e46be     J.....m..1...Fn.
   19230:	beb8442a bf6ed89e beb554ec bf6f6830     *D....n..T..0ho.
   19240:	beb263ef bf6ff573 beaf713a bf708066     .c..s.o.:q..f.p.
   19250:	beac7cd4 bf710908 bea986c4 bf718f57     .|....q.....W.q.
   19260:	bea68f12 bf721352 bea395c5 bf7294f8     ....R.r.......r.
   19270:	bea09ae5 bf731447 be9d9e78 bf73913f     ....G.s.x...?.s.
   19280:	be9aa086 bf740bdd be97a117 bf748422     ......t.....".t.
   19290:	be94a031 bf74fa0b be919ddd bf756d97     1.....t......mu.
   192a0:	be8e9a22 bf75dec6 be8b9507 bf764d97     ".....u......Mv.
   192b0:	be888e93 bf76ba07 be8586ce bf772417     ......v......$w.
   192c0:	be827dc0 bf778bc5 be7ee6e1 bf77f110     .}....w...~...w.
   192d0:	be78cfcc bf7853f8 be72b651 bf78b47b     ..x..Sx.Q.r.{.x.
   192e0:	be6c9a7f bf791298 be667c66 bf796e4e     ..l...y.f|f.Nny.
   192f0:	be605c13 bf79c79d be5a3997 bf7a1e84     .\`...y..9Z...z.
   19300:	be541501 bf7a7302 be4dee60 bf7ac516     ..T..sz.`.M...z.
   19310:	be47c5c2 bf7b14be be419b37 bf7b61fc     ..G...{.7.A..a{.
   19320:	be3b6ecf bf7baccd be354098 bf7bf531     .n;...{..@5.1.{.
   19330:	be2f10a2 bf7c3b28 be28defc bf7c7eb0     ../.(;|...(..~|.
   19340:	be22abb6 bf7cbfc9 be1c76de bf7cfe73     .."...|..v..s.|.
   19350:	be164083 bf7d3aac be1008b7 bf7d7474     .@...:}.....tt}.
   19360:	be09cf86 bf7dabcc be039502 bf7de0b1     ......}.......}.
   19370:	bdfab273 bf7e1324 bdee3876 bf7e4323     s...$.~.v8..#C~.
   19380:	bde1bc2e bf7e70b0 bdd53db9 bf7e9bc9     .....p~..=....~.
   19390:	bdc8bd36 bf7ec46d bdbc3ac3 bf7eea9d     6...m.~..:....~.
   193a0:	bdafb680 bf7f0e58 bda3308c bf7f2f9d     ....X....0.../..
   193b0:	bd96a905 bf7f4e6d bd8a200a bf7f6ac7     ....mN... ...j..
   193c0:	bd7b2b74 bf7f84ab bd621468 bf7f9c18     t+{.....h.b.....
   193d0:	bd48fb2f bf7fb10f bd2fe007 bf7fc38f     /.H......./.....
   193e0:	bd16c32c bf7fd398 bcfb49b9 bf7fe129     ,........I..)...
   193f0:	bcc90ab0 bf7fec43 bc96c9b6 bf7ff4e6     ....C...........
   19400:	bc490e90 bf7ffb11 bbc90f89 bf7ffec4     ..I.............
   19410:	80000000 bf800000 3bc90f89 bf7ffec4     ...........;....
   19420:	3c490e90 bf7ffb11 3c96c9b6 bf7ff4e6     ..I<.......<....
   19430:	3cc90ab0 bf7fec43 3cfb49b9 bf7fe129     ...<C....I.<)...
   19440:	3d16c32c bf7fd398 3d2fe007 bf7fc38f     ,..=....../=....
   19450:	3d48fb2f bf7fb10f 3d621468 bf7f9c18     /.H=....h.b=....
   19460:	3d7b2b74 bf7f84ab 3d8a200a bf7f6ac7     t+{=..... .=.j..
   19470:	3d96a905 bf7f4e6d 3da3308c bf7f2f9d     ...=mN...0.=./..
   19480:	3dafb680 bf7f0e58 3dbc3ac3 bf7eea9d     ...=X....:.=..~.
   19490:	3dc8bd36 bf7ec46d 3dd53db9 bf7e9bc9     6..=m.~..=.=..~.
   194a0:	3de1bc2e bf7e70b0 3dee3876 bf7e4323     ...=.p~.v8.=#C~.
   194b0:	3dfab273 bf7e1324 3e039502 bf7de0b1     s..=$.~....>..}.
   194c0:	3e09cf86 bf7dabcc 3e1008b7 bf7d7474     ...>..}....>tt}.
   194d0:	3e164083 bf7d3aac 3e1c76de bf7cfe73     .@.>.:}..v.>s.|.
   194e0:	3e22abb6 bf7cbfc9 3e28defc bf7c7eb0     ..">..|...(>.~|.
   194f0:	3e2f10a2 bf7c3b28 3e354098 bf7bf531     ../>(;|..@5>1.{.
   19500:	3e3b6ecf bf7baccd 3e419b37 bf7b61fc     .n;>..{.7.A>.a{.
   19510:	3e47c5c2 bf7b14be 3e4dee60 bf7ac516     ..G>..{.`.M>..z.
   19520:	3e541501 bf7a7302 3e5a3997 bf7a1e84     ..T>.sz..9Z>..z.
   19530:	3e605c13 bf79c79d 3e667c66 bf796e4e     .\`>..y.f|f>Nny.
   19540:	3e6c9a7f bf791298 3e72b651 bf78b47b     ..l>..y.Q.r>{.x.
   19550:	3e78cfcc bf7853f8 3e7ee6e1 bf77f110     ..x>.Sx...~>..w.
   19560:	3e827dc0 bf778bc5 3e8586ce bf772417     .}.>..w....>.$w.
   19570:	3e888e93 bf76ba07 3e8b9507 bf764d97     ...>..v....>.Mv.
   19580:	3e8e9a22 bf75dec6 3e919ddd bf756d97     "..>..u....>.mu.
   19590:	3e94a031 bf74fa0b 3e97a117 bf748422     1..>..t....>".t.
   195a0:	3e9aa086 bf740bdd 3e9d9e78 bf73913f     ...>..t.x..>?.s.
   195b0:	3ea09ae5 bf731447 3ea395c5 bf7294f8     ...>G.s....>..r.
   195c0:	3ea68f12 bf721352 3ea986c4 bf718f57     ...>R.r....>W.q.
   195d0:	3eac7cd4 bf710908 3eaf713a bf708066     .|.>..q.:q.>f.p.
   195e0:	3eb263ef bf6ff573 3eb554ec bf6f6830     .c.>s.o..T.>0ho.
   195f0:	3eb8442a bf6ed89e 3ebb31a0 bf6e46be     *D.>..n..1.>.Fn.
   19600:	3ebe1d4a bf6db293 3ec1071e bf6d1c1d     J..>..m....>..m.
   19610:	3ec3ef15 bf6c835e 3ec6d529 bf6be858     ...>^.l.)..>X.k.
   19620:	3ec9b953 bf6b4b0c 3ecc9b8b bf6aab7b     S..>.Kk....>{.j.
   19630:	3ecf7bca bf6a09a7 3ed25a09 bf696591     .{.>..j..Z.>.ei.
   19640:	3ed53641 bf68bf3c 3ed8106b bf6816a8     A6.><.h.k..>..h.
   19650:	3edae880 bf676bd8 3eddbe79 bf66becc     ...>.kg.y..>..f.
   19660:	3ee0924f bf660f88 3ee363fa bf655e0b     O..>..f..c.>.^e.
   19670:	3ee63375 bf64aa59 3ee900b7 bf63f473     u3.>Y.d....>s.c.
   19680:	3eebcbbb bf633c5a 3eee9479 bf628210     ...>Z<c.y..>..b.
   19690:	3ef15aea bf61c598 3ef41f07 bf6106f2     .Z.>..a....>..a.
   196a0:	3ef6e0cb bf604621 3ef9a02d bf5f8327     ...>!F`.-..>'._.
   196b0:	3efc5d27 bf5ebe05 3eff17b2 bf5df6be     '].>..^....>..].
   196c0:	3f00e7e4 bf5d2d53 3f0242b1 bf5c61c7     ...?S-]..B.?.a\.
   196d0:	3f039c3d bf5b941a 3f04f484 bf5ac450     =..?..[....?P.Z.
   196e0:	3f064b82 bf59f26a 3f07a136 bf591e6a     .K.?j.Y.6..?j.Y.
   196f0:	3f08f59b bf584853 3f0a48ad bf577026     ...?SHX..H.?&pW.
   19700:	3f0b9a6b bf5695e5 3f0cead0 bf55b993     k..?..V....?..U.
   19710:	3f0e39da bf54db31 3f0f8784 bf53fac3     .9.?1.T....?..S.
   19720:	3f10d3cd bf531849 3f121eb0 bf5233c6     ...?I.S....?.3R.
   19730:	3f13682a bf514d3d 3f14b039 bf5064af     *h.?=MQ.9..?.dP.
   19740:	3f15f6d9 bf4f7a1f 3f173c07 bf4e8d90     ...?.zO..<.?..N.
   19750:	3f187fc0 bf4d9f02 3f19c200 bf4cae79     ...?..M....?y.L.
   19760:	3f1b02c6 bf4bbbf8 3f1c420c bf4ac77f     ...?..K..B.?..J.
   19770:	3f1d7fd1 bf49d112 3f1ebc12 bf48d8b3     ...?..I....?..H.
   19780:	3f1ff6cb bf47de65 3f212ff9 bf46e22a     ...?e.G../!?*.F.
   19790:	3f226799 bf45e403 3f239da9 bf44e3f5     .g"?..E...#?..D.
   197a0:	3f24d225 bf43e200 3f26050a bf42de29     %.$?..C...&?).B.
   197b0:	3f273656 bf41d870 3f286605 bf40d0da     V6'?p.A..f(?..@.
   197c0:	3f299415 bf3fc767 3f2ac082 bf3ebc1b     ..)?g.?...*?..>.
   197d0:	3f2beb4a bf3daef9 3f2d1469 bf3ca003     J.+?..=.i.-?..<.
   197e0:	3f2e3bde bf3b8f3b 3f2f61a5 bf3a7ca4     .;.?;.;..a/?.|:.
   197f0:	3f3085bb bf396842 3f31a81d bf385216     ..0?Bh9...1?.R8.
   19800:	3f32c8c9 bf373a23 3f33e7bc bf36206c     ..2?#:7...3?l 6.
   19810:	3f3504f3 bf3504f3 3f36206c bf33e7bc     ..5?..5.l 6?..3.
   19820:	3f373a23 bf32c8c9 3f385216 bf31a81d     #:7?..2..R8?..1.
   19830:	3f396842 bf3085bb 3f3a7ca4 bf2f61a5     Bh9?..0..|:?.a/.
   19840:	3f3b8f3b bf2e3bde 3f3ca003 bf2d1469     ;.;?.;....<?i.-.
   19850:	3f3daef9 bf2beb4a 3f3ebc1b bf2ac082     ..=?J.+...>?..*.
   19860:	3f3fc767 bf299415 3f40d0da bf286605     g.??..)...@?.f(.
   19870:	3f41d870 bf273656 3f42de29 bf26050a     p.A?V6'.).B?..&.
   19880:	3f43e200 bf24d225 3f44e3f5 bf239da9     ..C?%.$...D?..#.
   19890:	3f45e403 bf226799 3f46e22a bf212ff9     ..E?.g".*.F?./!.
   198a0:	3f47de65 bf1ff6cb 3f48d8b3 bf1ebc12     e.G?......H?....
   198b0:	3f49d112 bf1d7fd1 3f4ac77f bf1c420c     ..I?......J?.B..
   198c0:	3f4bbbf8 bf1b02c6 3f4cae79 bf19c200     ..K?....y.L?....
   198d0:	3f4d9f02 bf187fc0 3f4e8d90 bf173c07     ..M?......N?.<..
   198e0:	3f4f7a1f bf15f6d9 3f5064af bf14b039     .zO?.....dP?9...
   198f0:	3f514d3d bf13682a 3f5233c6 bf121eb0     =MQ?*h...3R?....
   19900:	3f531849 bf10d3cd 3f53fac3 bf0f8784     I.S?......S?....
   19910:	3f54db31 bf0e39da 3f55b993 bf0cead0     1.T?.9....U?....
   19920:	3f5695e5 bf0b9a6b 3f577026 bf0a48ad     ..V?k...&pW?.H..
   19930:	3f584853 bf08f59b 3f591e6a bf07a136     SHX?....j.Y?6...
   19940:	3f59f26a bf064b82 3f5ac450 bf04f484     j.Y?.K..P.Z?....
   19950:	3f5b941a bf039c3d 3f5c61c7 bf0242b1     ..[?=....a\?.B..
   19960:	3f5d2d53 bf00e7e4 3f5df6be beff17b2     S-]?......]?....
   19970:	3f5ebe05 befc5d27 3f5f8327 bef9a02d     ..^?']..'._?-...
   19980:	3f604621 bef6e0cb 3f6106f2 bef41f07     !F`?......a?....
   19990:	3f61c598 bef15aea 3f628210 beee9479     ..a?.Z....b?y...
   199a0:	3f633c5a beebcbbb 3f63f473 bee900b7     Z<c?....s.c?....
   199b0:	3f64aa59 bee63375 3f655e0b bee363fa     Y.d?u3...^e?.c..
   199c0:	3f660f88 bee0924f 3f66becc beddbe79     ..f?O.....f?y...
   199d0:	3f676bd8 bedae880 3f6816a8 bed8106b     .kg?......h?k...
   199e0:	3f68bf3c bed53641 3f696591 bed25a09     <.h?A6...ei?.Z..
   199f0:	3f6a09a7 becf7bca 3f6aab7b becc9b8b     ..j?.{..{.j?....
   19a00:	3f6b4b0c bec9b953 3f6be858 bec6d529     .Kk?S...X.k?)...
   19a10:	3f6c835e bec3ef15 3f6d1c1d bec1071e     ^.l?......m?....
   19a20:	3f6db293 bebe1d4a 3f6e46be bebb31a0     ..m?J....Fn?.1..
   19a30:	3f6ed89e beb8442a 3f6f6830 beb554ec     ..n?*D..0ho?.T..
   19a40:	3f6ff573 beb263ef 3f708066 beaf713a     s.o?.c..f.p?:q..
   19a50:	3f710908 beac7cd4 3f718f57 bea986c4     ..q?.|..W.q?....
   19a60:	3f721352 bea68f12 3f7294f8 bea395c5     R.r?......r?....
   19a70:	3f731447 bea09ae5 3f73913f be9d9e78     G.s?....?.s?x...
   19a80:	3f740bdd be9aa086 3f748422 be97a117     ..t?....".t?....
   19a90:	3f74fa0b be94a031 3f756d97 be919ddd     ..t?1....mu?....
   19aa0:	3f75dec6 be8e9a22 3f764d97 be8b9507     ..u?"....Mv?....
   19ab0:	3f76ba07 be888e93 3f772417 be8586ce     ..v?.....$w?....
   19ac0:	3f778bc5 be827dc0 3f77f110 be7ee6e1     ..w?.}....w?..~.
   19ad0:	3f7853f8 be78cfcc 3f78b47b be72b651     .Sx?..x.{.x?Q.r.
   19ae0:	3f791298 be6c9a7f 3f796e4e be667c66     ..y?..l.Nny?f|f.
   19af0:	3f79c79d be605c13 3f7a1e84 be5a3997     ..y?.\`...z?.9Z.
   19b00:	3f7a7302 be541501 3f7ac516 be4dee60     .sz?..T...z?`.M.
   19b10:	3f7b14be be47c5c2 3f7b61fc be419b37     ..{?..G..a{?7.A.
   19b20:	3f7baccd be3b6ecf 3f7bf531 be354098     ..{?.n;.1.{?.@5.
   19b30:	3f7c3b28 be2f10a2 3f7c7eb0 be28defc     (;|?../..~|?..(.
   19b40:	3f7cbfc9 be22abb6 3f7cfe73 be1c76de     ..|?..".s.|?.v..
   19b50:	3f7d3aac be164083 3f7d7474 be1008b7     .:}?.@..tt}?....
   19b60:	3f7dabcc be09cf86 3f7de0b1 be039502     ..}?......}?....
   19b70:	3f7e1324 bdfab273 3f7e4323 bdee3876     $.~?s...#C~?v8..
   19b80:	3f7e70b0 bde1bc2e 3f7e9bc9 bdd53db9     .p~?......~?.=..
   19b90:	3f7ec46d bdc8bd36 3f7eea9d bdbc3ac3     m.~?6.....~?.:..
   19ba0:	3f7f0e58 bdafb680 3f7f2f9d bda3308c     X..?...../.?.0..
   19bb0:	3f7f4e6d bd96a905 3f7f6ac7 bd8a200a     mN.?.....j.?. ..
   19bc0:	3f7f84ab bd7b2b74 3f7f9c18 bd621468     ...?t+{....?h.b.
   19bd0:	3f7fb10f bd48fb2f 3f7fc38f bd2fe007     ...?/.H....?../.
   19be0:	3f7fd398 bd16c32c 3f7fe129 bcfb49b9     ...?,...)..?.I..
   19bf0:	3f7fec43 bcc90ab0 3f7ff4e6 bc96c9b6     C..?.......?....
   19c00:	3f7ffb11 bc490e90 3f7ffec4 bbc90f89     ...?..I....?....

00019c10 <twiddleCoef_32>:
   19c10:	3f800000 00000000 3f7b14be 3e47c5c2     ...?......{?..G>
   19c20:	3f6c835e 3ec3ef15 3f54db31 3f0e39da     ^.l?...>1.T?.9.?
   19c30:	3f3504f3 3f3504f3 3f0e39da 3f54db31     ..5?..5?.9.?1.T?
   19c40:	3ec3ef15 3f6c835e 3e47c5c2 3f7b14be     ...>^.l?..G>..{?
   19c50:	00000000 3f800000 be47c5c2 3f7b14be     .......?..G...{?
   19c60:	bec3ef15 3f6c835e bf0e39da 3f54db31     ....^.l?.9..1.T?
   19c70:	bf3504f3 3f3504f3 bf54db31 3f0e39da     ..5...5?1.T..9.?
   19c80:	bf6c835e 3ec3ef15 bf7b14be 3e47c5c2     ^.l....>..{...G>
   19c90:	bf800000 00000000 bf7b14be be47c5c2     ..........{...G.
   19ca0:	bf6c835e bec3ef15 bf54db31 bf0e39da     ^.l.....1.T..9..
   19cb0:	bf3504f3 bf3504f3 bf0e39da bf54db31     ..5...5..9..1.T.
   19cc0:	bec3ef15 bf6c835e be47c5c2 bf7b14be     ....^.l...G...{.
   19cd0:	80000000 bf800000 3e47c5c2 bf7b14be     ..........G>..{.
   19ce0:	3ec3ef15 bf6c835e 3f0e39da bf54db31     ...>^.l..9.?1.T.
   19cf0:	3f3504f3 bf3504f3 3f54db31 bf0e39da     ..5?..5.1.T?.9..
   19d00:	3f6c835e bec3ef15 3f7b14be be47c5c2     ^.l?......{?..G.

00019d10 <armBitRevIndexTable1024>:
   19d10:	10000008 02000010 12000018 04000020     ............ ...
   19d20:	14000028 06000030 16000038 08000040     (...0...8...@...
   19d30:	18000048 0a000050 1a000058 0c000060     H...P...X...`...
   19d40:	1c000068 0e000070 1e000078 08000080     h...p...x.......
   19d50:	10400088 02400090 12400098 044000a0     ..@...@...@...@.
   19d60:	144000a8 064000b0 164000b8 084000c0     ..@...@...@...@.
   19d70:	184000c8 0a4000d0 1a4000d8 0c4000e0     ..@...@...@...@.
   19d80:	1c4000e8 0e4000f0 1e4000f8 08000100     ..@...@...@.....
   19d90:	10800108 02800110 12800118 04800120     ............ ...
   19da0:	14800128 06800130 16800138 08800140     (...0...8...@...
   19db0:	18800148 0a800150 1a800158 0c800160     H...P...X...`...
   19dc0:	1c800168 0e800170 1e800178 08400180     h...p...x.....@.
   19dd0:	10c00188 02c00190 12c00198 04c001a0     ................
   19de0:	14c001a8 06c001b0 16c001b8 08c001c0     ................
   19df0:	18c001c8 0ac001d0 1ac001d8 0cc001e0     ................
   19e00:	1cc001e8 0ec001f0 1ec001f8 08000200     ................
   19e10:	11000208 03000210 13000218 05000220     ............ ...
   19e20:	15000228 07000230 17000238 09000240     (...0...8...@...
   19e30:	19000248 0b000250 1b000258 0d000260     H...P...X...`...
   19e40:	1d000268 0f000270 1f000278 08800280     h...p...x.......
   19e50:	11400288 03400290 13400298 054002a0     ..@...@...@...@.
   19e60:	154002a8 074002b0 174002b8 094002c0     ..@...@...@...@.
   19e70:	194002c8 0b4002d0 1b4002d8 0d4002e0     ..@...@...@...@.
   19e80:	1d4002e8 0f4002f0 1f4002f8 08400300     ..@...@...@...@.
   19e90:	11800308 03800310 13800318 05800320     ............ ...
   19ea0:	15800328 07800330 17800338 09800340     (...0...8...@...
   19eb0:	19800348 0b800350 1b800358 0d800360     H...P...X...`...
   19ec0:	1d800368 0f800370 1f800378 08c00380     h...p...x.......
   19ed0:	11c00388 03c00390 13c00398 05c003a0     ................
   19ee0:	15c003a8 07c003b0 17c003b8 09c003c0     ................
   19ef0:	19c003c8 0bc003d0 1bc003d8 0dc003e0     ................
   19f00:	1dc003e8 0fc003f0 1fc003f8 10000400     ................
   19f10:	10080408 11000410 12080418 10080420     ............ ...
   19f20:	14080428 06080430 16080438 08080440     (...0...8...@...
   19f30:	18080448 0a080450 1a080458 0c080460     H...P...X...`...
   19f40:	1c080468 0e080470 1e080478 18000480     h...p...x.......
   19f50:	10480488 19000490 12480498 180804a0     ..H.......H.....
   19f60:	144804a8 064804b0 164804b8 084804c0     ..H...H...H...H.
   19f70:	184804c8 0a4804d0 1a4804d8 0c4804e0     ..H...H...H...H.
   19f80:	1c4804e8 0e4804f0 1e4804f8 10400500     ..H...H...H...@.
   19f90:	10880508 11400510 12880518 10480520     ......@..... .H.
   19fa0:	14880528 06880530 16880538 08880540     (...0...8...@...
   19fb0:	18880548 0a880550 1a880558 0c880560     H...P...X...`...
   19fc0:	1c880568 0e880570 1e880578 18400580     h...p...x.....@.
   19fd0:	10c80588 19400590 12c80598 184805a0     ......@.......H.
   19fe0:	14c805a8 06c805b0 16c805b8 08c805c0     ................
   19ff0:	18c805c8 0ac805d0 1ac805d8 0cc805e0     ................
   1a000:	1cc805e8 0ec805f0 1ec805f8 10800600     ................
   1a010:	11080608 11800610 13080618 10880620     ............ ...
   1a020:	15080628 07080630 17080638 09080640     (...0...8...@...
   1a030:	19080648 0b080650 1b080658 0d080660     H...P...X...`...
   1a040:	1d080668 0f080670 1f080678 18800680     h...p...x.......
   1a050:	11480688 19800690 13480698 188806a0     ..H.......H.....
   1a060:	154806a8 074806b0 174806b8 094806c0     ..H...H...H...H.
   1a070:	194806c8 0b4806d0 1b4806d8 0d4806e0     ..H...H...H...H.
   1a080:	1d4806e8 0f4806f0 1f4806f8 10c00700     ..H...H...H.....
   1a090:	11880708 11c00710 13880718 10c80720     ............ ...
   1a0a0:	15880728 07880730 17880738 09880740     (...0...8...@...
   1a0b0:	19880748 0b880750 1b880758 0d880760     H...P...X...`...
   1a0c0:	1d880768 0f880770 1f880778 18c00780     h...p...x.......
   1a0d0:	11c80788 19c00790 13c80798 18c807a0     ................
   1a0e0:	15c807a8 07c807b0 17c807b8 09c807c0     ................
   1a0f0:	19c807c8 0bc807d0 1bc807d8 0dc807e0     ................
   1a100:	1dc807e8 0fc807f0 1fc807f8 10100808     ................
   1a110:	08400810 12100818 11000820 14100828     ..@..... ...(...
   1a120:	11800830 16100838 18100848 0a100850     0...8...H...P...
   1a130:	1a100858 0c100860 1c100868 0e100870     X...`...h...p...
   1a140:	1e100878 0a000880 10500888 0b000890     x.........P.....
   1a150:	12500898 0a0808a0 145008a8 0b0808b0     ..P.......P.....
   1a160:	165008b8 0a1008c0 185008c8 0a5008d0     ..P.......P...P.
   1a170:	1a5008d8 0c5008e0 1c5008e8 0e5008f0     ..P...P...P...P.
   1a180:	1e5008f8 10900908 09800910 12900918     ..P.............
   1a190:	19000920 14900928 19800930 16900938      ...(...0...8...
   1a1a0:	0b000940 18900948 0a900950 1a900958     @...H...P...X...
   1a1b0:	0c900960 1c900968 0e900970 1e900978     `...h...p...x...
   1a1c0:	0a400980 10d00988 0b400990 12d00998     ..@.......@.....
   1a1d0:	0a4809a0 14d009a8 0b4809b0 16d009b8     ..H.......H.....
   1a1e0:	0a5009c0 18d009c8 0ad009d0 1ad009d8     ..P.............
   1a1f0:	0cd009e0 1cd009e8 0ed009f0 1ed009f8     ................
   1a200:	11100a08 13100a18 11400a20 15100a28     ........ .@.(...
   1a210:	11c00a30 17100a38 19100a48 0b100a50     0...8...H...P...
   1a220:	1b100a58 0d100a60 1d100a68 0f100a70     X...`...h...p...
   1a230:	1f100a78 11500a88 0b800a90 13500a98     x.....P.......P.
   1a240:	11500aa0 15500aa8 0b880ab0 17500ab8     ..P...P.......P.
   1a250:	0b800ac0 19500ac8 0b500ad0 1b500ad8     ......P...P...P.
   1a260:	0d500ae0 1d500ae8 0f500af0 1f500af8     ..P...P...P...P.
   1a270:	11900b08 13900b18 19400b20 15900b28     ........ .@.(...
   1a280:	19c00b30 17900b38 19900b48 0b900b50     0...8...H...P...
   1a290:	1b900b58 0d900b60 1d900b68 0f900b70     X...`...h...p...
   1a2a0:	1f900b78 11d00b88 0bc00b90 13d00b98     x...............
   1a2b0:	19500ba0 15d00ba8 0bc80bb0 17d00bb8     ..P.............
   1a2c0:	19d00bc8 1bd00bd8 0dd00be0 1dd00be8     ................
   1a2d0:	0fd00bf0 1fd00bf8 12000c00 10180c08     ................
   1a2e0:	13000c10 12180c18 12080c20 14180c28     ........ ...(...
   1a2f0:	13080c30 16180c38 12100c40 18180c48     0...8...@...H...
   1a300:	13100c50 1a180c58 12180c60 1c180c68     P...X...`...h...
   1a310:	0e180c70 1e180c78 1a000c80 10580c88     p...x.........X.
   1a320:	1b000c90 12580c98 1a080ca0 14580ca8     ......X.......X.
   1a330:	1b080cb0 16580cb8 1a100cc0 18580cc8     ......X.......X.
   1a340:	1b100cd0 1a580cd8 1a180ce0 1c580ce8     ......X.......X.
   1a350:	0e580cf0 1e580cf8 12400d00 10980d08     ..X...X...@.....
   1a360:	13400d10 12980d18 12480d20 14980d28     ..@..... .H.(...
   1a370:	13480d30 16980d38 12500d40 18980d48     0.H.8...@.P.H...
   1a380:	13500d50 1a980d58 12580d60 1c980d68     P.P.X...`.X.h...
   1a390:	0e980d70 1e980d78 1a400d80 10d80d88     p...x.....@.....
   1a3a0:	1b400d90 12d80d98 1a480da0 14d80da8     ..@.......H.....
   1a3b0:	1b480db0 16d80db8 1a500dc0 18d80dc8     ..H.......P.....
   1a3c0:	1b500dd0 1ad80dd8 1a580de0 1cd80de8     ..P.......X.....
   1a3d0:	0ed80df0 1ed80df8 12800e00 11180e08     ................
   1a3e0:	13800e10 13180e18 12880e20 15180e28     ........ ...(...
   1a3f0:	13880e30 17180e38 12900e40 19180e48     0...8...@...H...
   1a400:	13900e50 1b180e58 12980e60 1d180e68     P...X...`...h...
   1a410:	0f180e70 1f180e78 1a800e80 11580e88     p...x.........X.
   1a420:	1b800e90 13580e98 1a880ea0 15580ea8     ......X.......X.
   1a430:	1b880eb0 17580eb8 1a900ec0 19580ec8     ......X.......X.
   1a440:	1b900ed0 1b580ed8 1a980ee0 1d580ee8     ......X.......X.
   1a450:	0f580ef0 1f580ef8 12c00f00 11980f08     ..X...X.........
   1a460:	13c00f10 13980f18 12c80f20 15980f28     ........ ...(...
   1a470:	13c80f30 17980f38 12d00f40 19980f48     0...8...@...H...
   1a480:	13d00f50 1b980f58 12d80f60 1d980f68     P...X...`...h...
   1a490:	0f980f70 1f980f78 1ac00f80 11d80f88     p...x...........
   1a4a0:	1bc00f90 13d80f98 1ac80fa0 15d80fa8     ................
   1a4b0:	1bc80fb0 17d80fb8 1ad00fc0 19d80fc8     ................
   1a4c0:	1bd00fd0 1bd80fd8 1ad80fe0 1dd80fe8     ................
   1a4d0:	1bd80ff0 1fd80ff8 10201008 10401010     .......... ...@.
   1a4e0:	12201018 14201028 10881030 16201038     .. .(. .0...8. .
   1a4f0:	11001040 18201048 11401050 1a201058     @...H. .P.@.X. .
   1a500:	12081060 1c201068 12881070 1e201078     `...h. .p...x. .
   1a510:	12001080 12081088 12401090 12601098     ..........@...`.
   1a520:	122010a0 146010a8 126010b0 166010b8     .. ...`...`...`.
   1a530:	130010c0 186010c8 134010d0 1a6010d8     ......`...@...`.
   1a540:	121810e0 1c6010e8 129810f0 1e6010f8     ......`.......`.
   1a550:	12201108 11401110 12a01118 18081120     .. ...@..... ...
   1a560:	14a01128 18881130 16a01138 18a01148     (...0...8...H...
   1a570:	1aa01158 1a081160 1ca01168 1a881170     X...`...h...p...
   1a580:	1ea01178 12101180 12181188 12501190     x.............P.
   1a590:	12e01198 181811a0 14e011a8 189811b0     ................
   1a5a0:	16e011b8 131011c0 18e011c8 135011d0     ..............P.
   1a5b0:	1ae011d8 1a1811e0 1ce011e8 1a9811f0     ................
   1a5c0:	1ee011f8 18001200 18081208 18401210     ..............@.
   1a5d0:	13201218 18201220 15201228 18601230     .. . . .(. .0.`.
   1a5e0:	17201238 19001240 19201248 19401250     8. .@...H. .P.@.
   1a5f0:	1b201258 19201260 1d201268 12c81270     X. .`. .h. .p...
   1a600:	1f201278 1a001280 1a081288 1a401290     x. ...........@.
   1a610:	13601298 1a2012a0 156012a8 1a6012b0     ..`... ...`...`.
   1a620:	176012b8 1b0012c0 196012c8 1b4012d0     ..`.......`...@.
   1a630:	1b6012d8 1b2012e0 1d6012e8 1b6012f0     ..`... ...`...`.
   1a640:	1f6012f8 18101300 18181308 18501310     ..`...........P.
   1a650:	13a01318 18481320 15a01328 18c81330     .... .H.(...0...
   1a660:	17a01338 19101340 19a01348 19501350     8...@...H...P.P.
   1a670:	1ba01358 1a481360 1da01368 1ac81370     X...`.H.h...p...
   1a680:	1fa01378 1a101380 1a181388 1a501390     x.............P.
   1a690:	13e01398 185813a0 15e013a8 18d813b0     ......X.........
   1a6a0:	17e013b8 1b1013c0 19e013c8 1b5013d0     ..............P.
   1a6b0:	1be013d8 1a5813e0 1de013e8 1ad813f0     ......X.........
   1a6c0:	1fe013f8 14201408 15001410 15201418     ...... ....... .
   1a6d0:	15081430 16281438 15001440 18281448     0...8.(.@...H.(.
   1a6e0:	15101450 1a281458 15201460 1c281468     P...X.(.`. .h.(.
   1a6f0:	15181470 1e281478 1c001480 1c201488     p...x.(....... .
   1a700:	1d001490 1d201498 1c0814a0 1c2814a8     ...... .......(.
   1a710:	1d0814b0 166814b8 1c1014c0 186814c8     ......h.......h.
   1a720:	1d1014d0 1a6814d8 1c1814e0 1c6814e8     ......h.......h.
   1a730:	1d1814f0 1e6814f8 15201508 15401510     ......h... ...@.
   1a740:	15601518 18281520 1c281528 15481530     ..`. .(.(.(.0.H.
   1a750:	16a81538 18a81548 1aa81558 1a281560     8...H...X...`.(.
   1a760:	1ca81568 1aa81570 1ea81578 1c401580     h...p...x.....@.
   1a770:	1c601588 1d401590 1d601598 1c4815a0     ..`...@...`...H.
   1a780:	1c6815a8 1d4815b0 16e815b8 1c5015c0     ..h...H.......P.
   1a790:	18e815c8 1d5015d0 1ae815d8 1c5815e0     ......P.......X.
   1a7a0:	1ce815e8 1d5815f0 1ee815f8 1c001600     ......X.........
   1a7b0:	1c081608 1c401610 1c481618 1c201620     ......@...H. . .
   1a7c0:	1c281628 1c601630 17281638 1d001640     (.(.0.`.8.(.@...
   1a7d0:	19281648 1d401650 1b281658 1d201660     H.(.P.@.X.(.`. .
   1a7e0:	1d281668 1d601670 1f281678 1c801680     h.(.p.`.x.(.....
   1a7f0:	1ca01688 1d801690 1da01698 1c8816a0     ................
   1a800:	1ca816a8 1d8816b0 176816b8 1c9016c0     ..........h.....
   1a810:	196816c8 1d9016d0 1b6816d8 1c9816e0     ..h.......h.....
   1a820:	1d6816e8 1d9816f0 1f6816f8 1c101700     ..h.......h.....
   1a830:	1c181708 1c501710 1c581718 18681720     ......P...X. .h.
   1a840:	1c681728 18e81730 17a81738 1d101740     (.h.0...8...@...
   1a850:	19a81748 1d501750 1ba81758 1a681760     H...P.P.X...`.h.
   1a860:	1da81768 1ae81770 1fa81778 1cc01780     h...p...x.......
   1a870:	1ce01788 1dc01790 1de01798 1cc817a0     ................
   1a880:	1ce817a8 1dc817b0 17e817b8 1cd017c0     ................
   1a890:	19e817c8 1dd017d0 1be817d8 1cd817e0     ................
   1a8a0:	1de817e8 1dd817f0 1fe817f8 18601818     ..............`.
   1a8b0:	18481830 1c601838 1a301858 1c301868     0.H.8.`.X.0.h.0.
   1a8c0:	1a181870 1e301878 1a001880 1a081888     p...x.0.........
   1a8d0:	1b001890 19601898 1a2018a0 1a2818a8     ......`... ...(.
   1a8e0:	1b2018b0 1d6018b8 1a1018c0 1a1818c8     .. ...`.........
   1a8f0:	1b1018d0 1a7018d8 1a3018e0 1c7018e8     ......p...0...p.
   1a900:	1a5818f0 1e7018f8 19201908 1a601918     ..X...p... ...`.
   1a910:	1d081928 19881930 1d881938 1b201948     (...0...8...H. .
   1a920:	1ab01958 1b081960 1cb01968 1b881970     X...`...h...p...
   1a930:	1eb01978 1a401980 1a481988 1b401990     x.....@...H...@.
   1a940:	1b601998 1a6019a0 1d1819a8 1b6019b0     ..`...`.......`.
   1a950:	1d9819b8 1a5019c0 1a5819c8 1b5019d0     ......P...X...P.
   1a960:	1af019d8 1b1819e0 1cf019e8 1b9819f0     ................
   1a970:	1ef019f8 1c701a38 1b301a58 1d301a68     ....8.p.X.0.h.0.
   1a980:	1b181a70 1f301a78 1ac01a90 1ac81a98     p...x.0.........
   1a990:	1ae01ab0 1ae81ab8 1b801ac0 1b881ac8     ................
   1a9a0:	1bc01ad0 1b701ad8 1ba01ae0 1d701ae8     ......p.......p.
   1a9b0:	1be01af0 1f701af8 1d481b28 1dc81b38     ......p.(.H.8...
   1a9c0:	1b601b48 1bb01b58 1db01b68 1bc81b70     H.`.X...h...p...
   1a9d0:	1fb01b78 1bc01b90 1bc81b98 1d581ba8     x.............X.
   1a9e0:	1be01bb0 1dd81bb8 1bf01bd8 1df01be8     ................
   1a9f0:	1ff01bf8 1c201c08 1c301c18 1c681c38     ...... ...0.8.h.
   1aa00:	1c601c48 1c701c58 1e381c78 1e001c80     H.`.X.p.x.8.....
   1aa10:	1e201c88 1f001c90 1f201c98 1e081ca0     .. ....... .....
   1aa20:	1e281ca8 1f081cb0 1f281cb8 1e101cc0     ..(.......(.....
   1aa30:	1e301cc8 1f101cd0 1f301cd8 1e181ce0     ..0.......0.....
   1aa40:	1e381ce8 1f181cf0 1e781cf8 1d201d08     ..8.......x... .
   1aa50:	1d301d18 1da81d38 1d601d48 1d701d58     ..0.8...H.`.X.p.
   1aa60:	1f281d68 1eb81d78 1e401d80 1e601d88     h.(.x.....@...`.
   1aa70:	1f401d90 1f601d98 1e481da0 1e681da8     ..@...`...H...h.
   1aa80:	1f481db0 1f681db8 1e501dc0 1e701dc8     ..H...h...P...p.
   1aa90:	1f501dd0 1f701dd8 1e581de0 1e781de8     ..P...p...X...x.
   1aaa0:	1f581df0 1ef81df8 1e201e08 1e301e18     ..X....... ...0.
   1aab0:	1e601e48 1e701e58 1f381e78 1ea01e88     H.`.X.p.x.8.....
   1aac0:	1f801e90 1fa01e98 1f881eb0 1fa81eb8     ................
   1aad0:	1f801ec0 1f881ec8 1f901ed0 1fb01ed8     ................
   1aae0:	1fa01ee0 1fa81ee8 1f981ef0 1f781ef8     ..............x.
   1aaf0:	1f201f08 1f301f18 1f601f48 1f701f58     .. ...0.H.`.X.p.
   1ab00:	1fb81f78 1fa01f88 1fc01f90 1fe01f98     x...............
   1ab10:	1fc81fb0 1fe81fb8 1fe01fc8 1ff01fd8     ................

0001ab20 <armBitRevIndexTable16>:
   1ab20:	00400008 00480018 00400010 00500028     ..@...H...@.(.P.
   1ab30:	00400020 00580038 00480030 00680058      .@.8.X.0.H.X.h.
   1ab40:	00600048 00700068                       H.`.h.p.

0001ab48 <twiddleCoef_rfft_32>:
   1ab48:	00000000 3f800000 3e47c5c2 3f7b14be     .......?..G>..{?
   1ab58:	3ec3ef15 3f6c835e 3f0e39da 3f54db31     ...>^.l?.9.?1.T?
   1ab68:	3f3504f3 3f3504f3 3f54db31 3f0e39da     ..5?..5?1.T?.9.?
   1ab78:	3f6c835e 3ec3ef15 3f7b14be 3e47c5c2     ^.l?...>..{?..G>
   1ab88:	3f800000 00000000 3f7b14be be47c5c2     ...?......{?..G.
   1ab98:	3f6c835e bec3ef15 3f54db31 bf0e39da     ^.l?....1.T?.9..
   1aba8:	3f3504f3 bf3504f3 3f0e39da bf54db31     ..5?..5..9.?1.T.
   1abb8:	3ec3ef15 bf6c835e 3e47c5c2 bf7b14be     ...>^.l...G>..{.

0001abc8 <armBitRevIndexTable32>:
   1abc8:	00400008 00800010 00c00018 00400020     ..@......... .@.
   1abd8:	00480028 00880030 00c80038 00800040     (.H.0...8...@...
   1abe8:	00500048 00d00058 00900050 00c00060     H.P.X...P...`...
   1abf8:	00d00068 00980070 00d80078 00c00088     h...p...x.......
   1ac08:	00a00090 00d000a8 00e00098 00d000b0     ................
   1ac18:	00e800b8 00f000d8 00e000c8 00f000e8     ................

0001ac28 <sinTable_f32>:
   1ac28:	00000000 3c490e92 3cc90ab1 3d16c32b     ......I<...<+..=
   1ac38:	3d48fb2e 3d7b2b75 3d96a904 3dafb680     ..H=u+{=...=...=
   1ac48:	3dc8bd36 3de1bc2f 3dfab273 3e09cf87     6..=/..=s..=...>
   1ac58:	3e164083 3e22abb5 3e2f10a2 3e3b6ecf     .@.>..">../>.n;>
   1ac68:	3e47c5c2 3e541501 3e605c13 3e6c9a7f     ..G>..T>.\`>..l>
   1ac78:	3e78cfcc 3e827dc0 3e888e93 3e8e9a22     ..x>.}.>...>"..>
   1ac88:	3e94a032 3e9aa086 3ea09ae5 3ea68f12     2..>...>...>...>
   1ac98:	3eac7cd4 3eb263ef 3eb8442a 3ebe1d49     .|.>.c.>*D.>I..>
   1aca8:	3ec3ef15 3ec9b953 3ecf7bca 3ed53641     ...>S..>.{.>A6.>
   1acb8:	3edae880 3ee0924f 3ee63375 3eebcbbb     ...>O..>u3.>...>
   1acc8:	3ef15aea 3ef6e0cb 3efc5d27 3f00e7e4     .Z.>...>'].>...?
   1acd8:	3f039c3d 3f064b82 3f08f59b 3f0b9a6b     =..?.K.?...?k..?
   1ace8:	3f0e39da 3f10d3cd 3f13682a 3f15f6d9     .9.?...?*h.?...?
   1acf8:	3f187fc0 3f1b02c6 3f1d7fd1 3f1ff6cb     ...?...?...?...?
   1ad08:	3f226799 3f24d225 3f273656 3f299415     .g"?%.$?V6'?..)?
   1ad18:	3f2beb4a 3f2e3bde 3f3085bb 3f32c8c9     J.+?.;.?..0?..2?
   1ad28:	3f3504f3 3f373a23 3f396842 3f3b8f3b     ..5?#:7?Bh9?;.;?
   1ad38:	3f3daef9 3f3fc767 3f41d870 3f43e201     ..=?g.??p.A?..C?
   1ad48:	3f45e403 3f47de65 3f49d112 3f4bbbf8     ..E?e.G?..I?..K?
   1ad58:	3f4d9f02 3f4f7a20 3f514d3d 3f531849     ..M? zO?=MQ?I.S?
   1ad68:	3f54db31 3f5695e5 3f584853 3f59f26a     1.T?..V?SHX?j.Y?
   1ad78:	3f5b941a 3f5d2d53 3f5ebe05 3f604621     ..[?S-]?..^?!F`?
   1ad88:	3f61c597 3f633c5a 3f64aa59 3f660f88     ..a?Z<c?Y.d?..f?
   1ad98:	3f676bd8 3f68bf3c 3f6a09a7 3f6b4b0c     .kg?<.h?..j?.Kk?
   1ada8:	3f6c835e 3f6db293 3f6ed89e 3f6ff573     ^.l?..m?..n?s.o?
   1adb8:	3f710908 3f721352 3f731447 3f740bdd     ..q?R.r?G.s?..t?
   1adc8:	3f74fa0b 3f75dec6 3f76ba07 3f778bc5     ..t?..u?..v?..w?
   1add8:	3f7853f8 3f791298 3f79c79d 3f7a7302     .Sx?..y?..y?.sz?
   1ade8:	3f7b14be 3f7baccd 3f7c3b28 3f7cbfc9     ..{?..{?(;|?..|?
   1adf8:	3f7d3aac 3f7dabcc 3f7e1323 3f7e70b0     .:}?..}?#.~?.p~?
   1ae08:	3f7ec46d 3f7f0e58 3f7f4e6d 3f7f84ab     m.~?X..?mN.?...?
   1ae18:	3f7fb10f 3f7fd397 3f7fec43 3f7ffb11     ...?...?C..?...?
   1ae28:	3f800000 3f7ffb11 3f7fec43 3f7fd397     ...?...?C..?...?
   1ae38:	3f7fb10f 3f7f84ab 3f7f4e6d 3f7f0e58     ...?...?mN.?X..?
   1ae48:	3f7ec46d 3f7e70b0 3f7e1323 3f7dabcc     m.~?.p~?#.~?..}?
   1ae58:	3f7d3aac 3f7cbfc9 3f7c3b28 3f7baccd     .:}?..|?(;|?..{?
   1ae68:	3f7b14be 3f7a7302 3f79c79d 3f791298     ..{?.sz?..y?..y?
   1ae78:	3f7853f8 3f778bc5 3f76ba07 3f75dec6     .Sx?..w?..v?..u?
   1ae88:	3f74fa0b 3f740bdd 3f731447 3f721352     ..t?..t?G.s?R.r?
   1ae98:	3f710908 3f6ff573 3f6ed89e 3f6db293     ..q?s.o?..n?..m?
   1aea8:	3f6c835e 3f6b4b0c 3f6a09a7 3f68bf3c     ^.l?.Kk?..j?<.h?
   1aeb8:	3f676bd8 3f660f88 3f64aa59 3f633c5a     .kg?..f?Y.d?Z<c?
   1aec8:	3f61c597 3f604621 3f5ebe05 3f5d2d53     ..a?!F`?..^?S-]?
   1aed8:	3f5b941a 3f59f26a 3f584853 3f5695e5     ..[?j.Y?SHX?..V?
   1aee8:	3f54db31 3f531849 3f514d3d 3f4f7a20     1.T?I.S?=MQ? zO?
   1aef8:	3f4d9f02 3f4bbbf8 3f49d112 3f47de65     ..M?..K?..I?e.G?
   1af08:	3f45e403 3f43e201 3f41d870 3f3fc767     ..E?..C?p.A?g.??
   1af18:	3f3daef9 3f3b8f3b 3f396842 3f373a23     ..=?;.;?Bh9?#:7?
   1af28:	3f3504f3 3f32c8c9 3f3085bb 3f2e3bde     ..5?..2?..0?.;.?
   1af38:	3f2beb4a 3f299415 3f273656 3f24d225     J.+?..)?V6'?%.$?
   1af48:	3f226799 3f1ff6cb 3f1d7fd1 3f1b02c6     .g"?...?...?...?
   1af58:	3f187fc0 3f15f6d9 3f13682a 3f10d3cd     ...?...?*h.?...?
   1af68:	3f0e39da 3f0b9a6b 3f08f59b 3f064b82     .9.?k..?...?.K.?
   1af78:	3f039c3d 3f00e7e4 3efc5d27 3ef6e0cb     =..?...?'].>...>
   1af88:	3ef15aea 3eebcbbb 3ee63375 3ee0924f     .Z.>...>u3.>O..>
   1af98:	3edae880 3ed53641 3ecf7bca 3ec9b953     ...>A6.>.{.>S..>
   1afa8:	3ec3ef15 3ebe1d49 3eb8442a 3eb263ef     ...>I..>*D.>.c.>
   1afb8:	3eac7cd4 3ea68f12 3ea09ae5 3e9aa086     .|.>...>...>...>
   1afc8:	3e94a032 3e8e9a22 3e888e93 3e827dc0     2..>"..>...>.}.>
   1afd8:	3e78cfcc 3e6c9a7f 3e605c13 3e541501     ..x>..l>.\`>..T>
   1afe8:	3e47c5c2 3e3b6ecf 3e2f10a2 3e22abb5     ..G>.n;>../>..">
   1aff8:	3e164083 3e09cf87 3dfab273 3de1bc2f     .@.>...>s..=/..=
   1b008:	3dc8bd36 3dafb680 3d96a904 3d7b2b75     6..=...=...=u+{=
   1b018:	3d48fb2e 3d16c32b 3cc90ab1 3c490e92     ..H=+..=...<..I<
   1b028:	00000000 bc490e92 bcc90ab1 bd16c32b     ......I.....+...
   1b038:	bd48fb2e bd7b2b75 bd96a904 bdafb680     ..H.u+{.........
   1b048:	bdc8bd36 bde1bc2f bdfab273 be09cf87     6.../...s.......
   1b058:	be164083 be22abb5 be2f10a2 be3b6ecf     .@....".../..n;.
   1b068:	be47c5c2 be541501 be605c13 be6c9a7f     ..G...T..\`...l.
   1b078:	be78cfcc be827dc0 be888e93 be8e9a22     ..x..}......"...
   1b088:	be94a032 be9aa086 bea09ae5 bea68f12     2...............
   1b098:	beac7cd4 beb263ef beb8442a bebe1d49     .|...c..*D..I...
   1b0a8:	bec3ef15 bec9b953 becf7bca bed53641     ....S....{..A6..
   1b0b8:	bedae880 bee0924f bee63375 beebcbbb     ....O...u3......
   1b0c8:	bef15aea bef6e0cb befc5d27 bf00e7e4     .Z......']......
   1b0d8:	bf039c3d bf064b82 bf08f59b bf0b9a6b     =....K......k...
   1b0e8:	bf0e39da bf10d3cd bf13682a bf15f6d9     .9......*h......
   1b0f8:	bf187fc0 bf1b02c6 bf1d7fd1 bf1ff6cb     ................
   1b108:	bf226799 bf24d225 bf273656 bf299415     .g".%.$.V6'...).
   1b118:	bf2beb4a bf2e3bde bf3085bb bf32c8c9     J.+..;....0...2.
   1b128:	bf3504f3 bf373a23 bf396842 bf3b8f3b     ..5.#:7.Bh9.;.;.
   1b138:	bf3daef9 bf3fc767 bf41d870 bf43e201     ..=.g.?.p.A...C.
   1b148:	bf45e403 bf47de65 bf49d112 bf4bbbf8     ..E.e.G...I...K.
   1b158:	bf4d9f02 bf4f7a20 bf514d3d bf531849     ..M. zO.=MQ.I.S.
   1b168:	bf54db31 bf5695e5 bf584853 bf59f26a     1.T...V.SHX.j.Y.
   1b178:	bf5b941a bf5d2d53 bf5ebe05 bf604621     ..[.S-]...^.!F`.
   1b188:	bf61c597 bf633c5a bf64aa59 bf660f88     ..a.Z<c.Y.d...f.
   1b198:	bf676bd8 bf68bf3c bf6a09a7 bf6b4b0c     .kg.<.h...j..Kk.
   1b1a8:	bf6c835e bf6db293 bf6ed89e bf6ff573     ^.l...m...n.s.o.
   1b1b8:	bf710908 bf721352 bf731447 bf740bdd     ..q.R.r.G.s...t.
   1b1c8:	bf74fa0b bf75dec6 bf76ba07 bf778bc5     ..t...u...v...w.
   1b1d8:	bf7853f8 bf791298 bf79c79d bf7a7302     .Sx...y...y..sz.
   1b1e8:	bf7b14be bf7baccd bf7c3b28 bf7cbfc9     ..{...{.(;|...|.
   1b1f8:	bf7d3aac bf7dabcc bf7e1323 bf7e70b0     .:}...}.#.~..p~.
   1b208:	bf7ec46d bf7f0e58 bf7f4e6d bf7f84ab     m.~.X...mN......
   1b218:	bf7fb10f bf7fd397 bf7fec43 bf7ffb11     ........C.......
   1b228:	bf800000 bf7ffb11 bf7fec43 bf7fd397     ........C.......
   1b238:	bf7fb10f bf7f84ab bf7f4e6d bf7f0e58     ........mN..X...
   1b248:	bf7ec46d bf7e70b0 bf7e1323 bf7dabcc     m.~..p~.#.~...}.
   1b258:	bf7d3aac bf7cbfc9 bf7c3b28 bf7baccd     .:}...|.(;|...{.
   1b268:	bf7b14be bf7a7302 bf79c79d bf791298     ..{..sz...y...y.
   1b278:	bf7853f8 bf778bc5 bf76ba07 bf75dec6     .Sx...w...v...u.
   1b288:	bf74fa0b bf740bdd bf731447 bf721352     ..t...t.G.s.R.r.
   1b298:	bf710908 bf6ff573 bf6ed89e bf6db293     ..q.s.o...n...m.
   1b2a8:	bf6c835e bf6b4b0c bf6a09a7 bf68bf3c     ^.l..Kk...j.<.h.
   1b2b8:	bf676bd8 bf660f88 bf64aa59 bf633c5a     .kg...f.Y.d.Z<c.
   1b2c8:	bf61c597 bf604621 bf5ebe05 bf5d2d53     ..a.!F`...^.S-].
   1b2d8:	bf5b941a bf59f26a bf584853 bf5695e5     ..[.j.Y.SHX...V.
   1b2e8:	bf54db31 bf531849 bf514d3d bf4f7a20     1.T.I.S.=MQ. zO.
   1b2f8:	bf4d9f02 bf4bbbf8 bf49d112 bf47de65     ..M...K...I.e.G.
   1b308:	bf45e403 bf43e201 bf41d870 bf3fc767     ..E...C.p.A.g.?.
   1b318:	bf3daef9 bf3b8f3b bf396842 bf373a23     ..=.;.;.Bh9.#:7.
   1b328:	bf3504f3 bf32c8c9 bf3085bb bf2e3bde     ..5...2...0..;..
   1b338:	bf2beb4a bf299415 bf273656 bf24d225     J.+...).V6'.%.$.
   1b348:	bf226799 bf1ff6cb bf1d7fd1 bf1b02c6     .g".............
   1b358:	bf187fc0 bf15f6d9 bf13682a bf10d3cd     ........*h......
   1b368:	bf0e39da bf0b9a6b bf08f59b bf064b82     .9..k........K..
   1b378:	bf039c3d bf00e7e4 befc5d27 bef6e0cb     =.......']......
   1b388:	bef15aea beebcbbb bee63375 bee0924f     .Z......u3..O...
   1b398:	bedae880 bed53641 becf7bca bec9b953     ....A6...{..S...
   1b3a8:	bec3ef15 bebe1d49 beb8442a beb263ef     ....I...*D...c..
   1b3b8:	beac7cd4 bea68f12 bea09ae5 be9aa086     .|..............
   1b3c8:	be94a032 be8e9a22 be888e93 be827dc0     2..."........}..
   1b3d8:	be78cfcc be6c9a7f be605c13 be541501     ..x...l..\`...T.
   1b3e8:	be47c5c2 be3b6ecf be2f10a2 be22abb5     ..G..n;.../...".
   1b3f8:	be164083 be09cf87 bdfab273 bde1bc2f     .@......s.../...
   1b408:	bdc8bd36 bdafb680 bd96a904 bd7b2b75     6...........u+{.
   1b418:	bd48fb2e bd16c32b bcc90ab1 bc490e92     ..H.+.........I.
   1b428:	80000000                                ....

0001b42c <twiddleCoef_128>:
   1b42c:	3f800000 00000000 3f7fb10f 3d48fb2f     ...?.......?/.H=
   1b43c:	3f7ec46d 3dc8bd36 3f7d3aac 3e164083     m.~?6..=.:}?.@.>
   1b44c:	3f7b14be 3e47c5c2 3f7853f8 3e78cfcc     ..{?..G>.Sx?..x>
   1b45c:	3f74fa0b 3e94a031 3f710908 3eac7cd4     ..t?1..>..q?.|.>
   1b46c:	3f6c835e 3ec3ef15 3f676bd8 3edae880     ^.l?...>.kg?...>
   1b47c:	3f61c598 3ef15aea 3f5b941a 3f039c3d     ..a?.Z.>..[?=..?
   1b48c:	3f54db31 3f0e39da 3f4d9f02 3f187fc0     1.T?.9.?..M?...?
   1b49c:	3f45e403 3f226799 3f3daef9 3f2beb4a     ..E?.g"?..=?J.+?
   1b4ac:	3f3504f3 3f3504f3 3f2beb4a 3f3daef9     ..5?..5?J.+?..=?
   1b4bc:	3f226799 3f45e403 3f187fc0 3f4d9f02     .g"?..E?...?..M?
   1b4cc:	3f0e39da 3f54db31 3f039c3d 3f5b941a     .9.?1.T?=..?..[?
   1b4dc:	3ef15aea 3f61c598 3edae880 3f676bd8     .Z.>..a?...>.kg?
   1b4ec:	3ec3ef15 3f6c835e 3eac7cd4 3f710908     ...>^.l?.|.>..q?
   1b4fc:	3e94a031 3f74fa0b 3e78cfcc 3f7853f8     1..>..t?..x>.Sx?
   1b50c:	3e47c5c2 3f7b14be 3e164083 3f7d3aac     ..G>..{?.@.>.:}?
   1b51c:	3dc8bd36 3f7ec46d 3d48fb2f 3f7fb10f     6..=m.~?/.H=...?
   1b52c:	00000000 3f800000 bd48fb2f 3f7fb10f     .......?/.H....?
   1b53c:	bdc8bd36 3f7ec46d be164083 3f7d3aac     6...m.~?.@...:}?
   1b54c:	be47c5c2 3f7b14be be78cfcc 3f7853f8     ..G...{?..x..Sx?
   1b55c:	be94a031 3f74fa0b beac7cd4 3f710908     1.....t?.|....q?
   1b56c:	bec3ef15 3f6c835e bedae880 3f676bd8     ....^.l?.....kg?
   1b57c:	bef15aea 3f61c598 bf039c3d 3f5b941a     .Z....a?=.....[?
   1b58c:	bf0e39da 3f54db31 bf187fc0 3f4d9f02     .9..1.T?......M?
   1b59c:	bf226799 3f45e403 bf2beb4a 3f3daef9     .g"...E?J.+...=?
   1b5ac:	bf3504f3 3f3504f3 bf3daef9 3f2beb4a     ..5...5?..=.J.+?
   1b5bc:	bf45e403 3f226799 bf4d9f02 3f187fc0     ..E..g"?..M....?
   1b5cc:	bf54db31 3f0e39da bf5b941a 3f039c3d     1.T..9.?..[.=..?
   1b5dc:	bf61c598 3ef15aea bf676bd8 3edae880     ..a..Z.>.kg....>
   1b5ec:	bf6c835e 3ec3ef15 bf710908 3eac7cd4     ^.l....>..q..|.>
   1b5fc:	bf74fa0b 3e94a031 bf7853f8 3e78cfcc     ..t.1..>.Sx...x>
   1b60c:	bf7b14be 3e47c5c2 bf7d3aac 3e164083     ..{...G>.:}..@.>
   1b61c:	bf7ec46d 3dc8bd36 bf7fb10f 3d48fb2f     m.~.6..=..../.H=
   1b62c:	bf800000 00000000 bf7fb10f bd48fb2f     ............/.H.
   1b63c:	bf7ec46d bdc8bd36 bf7d3aac be164083     m.~.6....:}..@..
   1b64c:	bf7b14be be47c5c2 bf7853f8 be78cfcc     ..{...G..Sx...x.
   1b65c:	bf74fa0b be94a031 bf710908 beac7cd4     ..t.1.....q..|..
   1b66c:	bf6c835e bec3ef15 bf676bd8 bedae880     ^.l......kg.....
   1b67c:	bf61c598 bef15aea bf5b941a bf039c3d     ..a..Z....[.=...
   1b68c:	bf54db31 bf0e39da bf4d9f02 bf187fc0     1.T..9....M.....
   1b69c:	bf45e403 bf226799 bf3daef9 bf2beb4a     ..E..g"...=.J.+.
   1b6ac:	bf3504f3 bf3504f3 bf2beb4a bf3daef9     ..5...5.J.+...=.
   1b6bc:	bf226799 bf45e403 bf187fc0 bf4d9f02     .g"...E.......M.
   1b6cc:	bf0e39da bf54db31 bf039c3d bf5b941a     .9..1.T.=.....[.
   1b6dc:	bef15aea bf61c598 bedae880 bf676bd8     .Z....a......kg.
   1b6ec:	bec3ef15 bf6c835e beac7cd4 bf710908     ....^.l..|....q.
   1b6fc:	be94a031 bf74fa0b be78cfcc bf7853f8     1.....t...x..Sx.
   1b70c:	be47c5c2 bf7b14be be164083 bf7d3aac     ..G...{..@...:}.
   1b71c:	bdc8bd36 bf7ec46d bd48fb2f bf7fb10f     6...m.~./.H.....
   1b72c:	80000000 bf800000 3d48fb2f bf7fb10f     ......../.H=....
   1b73c:	3dc8bd36 bf7ec46d 3e164083 bf7d3aac     6..=m.~..@.>.:}.
   1b74c:	3e47c5c2 bf7b14be 3e78cfcc bf7853f8     ..G>..{...x>.Sx.
   1b75c:	3e94a031 bf74fa0b 3eac7cd4 bf710908     1..>..t..|.>..q.
   1b76c:	3ec3ef15 bf6c835e 3edae880 bf676bd8     ...>^.l....>.kg.
   1b77c:	3ef15aea bf61c598 3f039c3d bf5b941a     .Z.>..a.=..?..[.
   1b78c:	3f0e39da bf54db31 3f187fc0 bf4d9f02     .9.?1.T....?..M.
   1b79c:	3f226799 bf45e403 3f2beb4a bf3daef9     .g"?..E.J.+?..=.
   1b7ac:	3f3504f3 bf3504f3 3f3daef9 bf2beb4a     ..5?..5...=?J.+.
   1b7bc:	3f45e403 bf226799 3f4d9f02 bf187fc0     ..E?.g"...M?....
   1b7cc:	3f54db31 bf0e39da 3f5b941a bf039c3d     1.T?.9....[?=...
   1b7dc:	3f61c598 bef15aea 3f676bd8 bedae880     ..a?.Z...kg?....
   1b7ec:	3f6c835e bec3ef15 3f710908 beac7cd4     ^.l?......q?.|..
   1b7fc:	3f74fa0b be94a031 3f7853f8 be78cfcc     ..t?1....Sx?..x.
   1b80c:	3f7b14be be47c5c2 3f7d3aac be164083     ..{?..G..:}?.@..
   1b81c:	3f7ec46d bdc8bd36 3f7fb10f bd48fb2f     m.~?6......?/.H.

0001b82c <twiddleCoef_512>:
   1b82c:	3f800000 00000000 3f7ffb11 3c490e90     ...?.......?..I<
   1b83c:	3f7fec43 3cc90ab0 3f7fd398 3d16c32c     C..?...<...?,..=
   1b84c:	3f7fb10f 3d48fb2f 3f7f84ab 3d7b2b74     ...?/.H=...?t+{=
   1b85c:	3f7f4e6d 3d96a905 3f7f0e58 3dafb680     mN.?...=X..?...=
   1b86c:	3f7ec46d 3dc8bd36 3f7e70b0 3de1bc2e     m.~?6..=.p~?...=
   1b87c:	3f7e1324 3dfab273 3f7dabcc 3e09cf86     $.~?s..=..}?...>
   1b88c:	3f7d3aac 3e164083 3f7cbfc9 3e22abb6     .:}?.@.>..|?..">
   1b89c:	3f7c3b28 3e2f10a2 3f7baccd 3e3b6ecf     (;|?../>..{?.n;>
   1b8ac:	3f7b14be 3e47c5c2 3f7a7302 3e541501     ..{?..G>.sz?..T>
   1b8bc:	3f79c79d 3e605c13 3f791298 3e6c9a7f     ..y?.\`>..y?..l>
   1b8cc:	3f7853f8 3e78cfcc 3f778bc5 3e827dc0     .Sx?..x>..w?.}.>
   1b8dc:	3f76ba07 3e888e93 3f75dec6 3e8e9a22     ..v?...>..u?"..>
   1b8ec:	3f74fa0b 3e94a031 3f740bdd 3e9aa086     ..t?1..>..t?...>
   1b8fc:	3f731447 3ea09ae5 3f721352 3ea68f12     G.s?...>R.r?...>
   1b90c:	3f710908 3eac7cd4 3f6ff573 3eb263ef     ..q?.|.>s.o?.c.>
   1b91c:	3f6ed89e 3eb8442a 3f6db293 3ebe1d4a     ..n?*D.>..m?J..>
   1b92c:	3f6c835e 3ec3ef15 3f6b4b0c 3ec9b953     ^.l?...>.Kk?S..>
   1b93c:	3f6a09a7 3ecf7bca 3f68bf3c 3ed53641     ..j?.{.><.h?A6.>
   1b94c:	3f676bd8 3edae880 3f660f88 3ee0924f     .kg?...>..f?O..>
   1b95c:	3f64aa59 3ee63375 3f633c5a 3eebcbbb     Y.d?u3.>Z<c?...>
   1b96c:	3f61c598 3ef15aea 3f604621 3ef6e0cb     ..a?.Z.>!F`?...>
   1b97c:	3f5ebe05 3efc5d27 3f5d2d53 3f00e7e4     ..^?'].>S-]?...?
   1b98c:	3f5b941a 3f039c3d 3f59f26a 3f064b82     ..[?=..?j.Y?.K.?
   1b99c:	3f584853 3f08f59b 3f5695e5 3f0b9a6b     SHX?...?..V?k..?
   1b9ac:	3f54db31 3f0e39da 3f531849 3f10d3cd     1.T?.9.?I.S?...?
   1b9bc:	3f514d3d 3f13682a 3f4f7a1f 3f15f6d9     =MQ?*h.?.zO?...?
   1b9cc:	3f4d9f02 3f187fc0 3f4bbbf8 3f1b02c6     ..M?...?..K?...?
   1b9dc:	3f49d112 3f1d7fd1 3f47de65 3f1ff6cb     ..I?...?e.G?...?
   1b9ec:	3f45e403 3f226799 3f43e200 3f24d225     ..E?.g"?..C?%.$?
   1b9fc:	3f41d870 3f273656 3f3fc767 3f299415     p.A?V6'?g.??..)?
   1ba0c:	3f3daef9 3f2beb4a 3f3b8f3b 3f2e3bde     ..=?J.+?;.;?.;.?
   1ba1c:	3f396842 3f3085bb 3f373a23 3f32c8c9     Bh9?..0?#:7?..2?
   1ba2c:	3f3504f3 3f3504f3 3f32c8c9 3f373a23     ..5?..5?..2?#:7?
   1ba3c:	3f3085bb 3f396842 3f2e3bde 3f3b8f3b     ..0?Bh9?.;.?;.;?
   1ba4c:	3f2beb4a 3f3daef9 3f299415 3f3fc767     J.+?..=?..)?g.??
   1ba5c:	3f273656 3f41d870 3f24d225 3f43e200     V6'?p.A?%.$?..C?
   1ba6c:	3f226799 3f45e403 3f1ff6cb 3f47de65     .g"?..E?...?e.G?
   1ba7c:	3f1d7fd1 3f49d112 3f1b02c6 3f4bbbf8     ...?..I?...?..K?
   1ba8c:	3f187fc0 3f4d9f02 3f15f6d9 3f4f7a1f     ...?..M?...?.zO?
   1ba9c:	3f13682a 3f514d3d 3f10d3cd 3f531849     *h.?=MQ?...?I.S?
   1baac:	3f0e39da 3f54db31 3f0b9a6b 3f5695e5     .9.?1.T?k..?..V?
   1babc:	3f08f59b 3f584853 3f064b82 3f59f26a     ...?SHX?.K.?j.Y?
   1bacc:	3f039c3d 3f5b941a 3f00e7e4 3f5d2d53     =..?..[?...?S-]?
   1badc:	3efc5d27 3f5ebe05 3ef6e0cb 3f604621     '].>..^?...>!F`?
   1baec:	3ef15aea 3f61c598 3eebcbbb 3f633c5a     .Z.>..a?...>Z<c?
   1bafc:	3ee63375 3f64aa59 3ee0924f 3f660f88     u3.>Y.d?O..>..f?
   1bb0c:	3edae880 3f676bd8 3ed53641 3f68bf3c     ...>.kg?A6.><.h?
   1bb1c:	3ecf7bca 3f6a09a7 3ec9b953 3f6b4b0c     .{.>..j?S..>.Kk?
   1bb2c:	3ec3ef15 3f6c835e 3ebe1d4a 3f6db293     ...>^.l?J..>..m?
   1bb3c:	3eb8442a 3f6ed89e 3eb263ef 3f6ff573     *D.>..n?.c.>s.o?
   1bb4c:	3eac7cd4 3f710908 3ea68f12 3f721352     .|.>..q?...>R.r?
   1bb5c:	3ea09ae5 3f731447 3e9aa086 3f740bdd     ...>G.s?...>..t?
   1bb6c:	3e94a031 3f74fa0b 3e8e9a22 3f75dec6     1..>..t?"..>..u?
   1bb7c:	3e888e93 3f76ba07 3e827dc0 3f778bc5     ...>..v?.}.>..w?
   1bb8c:	3e78cfcc 3f7853f8 3e6c9a7f 3f791298     ..x>.Sx?..l>..y?
   1bb9c:	3e605c13 3f79c79d 3e541501 3f7a7302     .\`>..y?..T>.sz?
   1bbac:	3e47c5c2 3f7b14be 3e3b6ecf 3f7baccd     ..G>..{?.n;>..{?
   1bbbc:	3e2f10a2 3f7c3b28 3e22abb6 3f7cbfc9     ../>(;|?..">..|?
   1bbcc:	3e164083 3f7d3aac 3e09cf86 3f7dabcc     .@.>.:}?...>..}?
   1bbdc:	3dfab273 3f7e1324 3de1bc2e 3f7e70b0     s..=$.~?...=.p~?
   1bbec:	3dc8bd36 3f7ec46d 3dafb680 3f7f0e58     6..=m.~?...=X..?
   1bbfc:	3d96a905 3f7f4e6d 3d7b2b74 3f7f84ab     ...=mN.?t+{=...?
   1bc0c:	3d48fb2f 3f7fb10f 3d16c32c 3f7fd398     /.H=...?,..=...?
   1bc1c:	3cc90ab0 3f7fec43 3c490e90 3f7ffb11     ...<C..?..I<...?
   1bc2c:	00000000 3f800000 bc490e90 3f7ffb11     .......?..I....?
   1bc3c:	bcc90ab0 3f7fec43 bd16c32c 3f7fd398     ....C..?,......?
   1bc4c:	bd48fb2f 3f7fb10f bd7b2b74 3f7f84ab     /.H....?t+{....?
   1bc5c:	bd96a905 3f7f4e6d bdafb680 3f7f0e58     ....mN.?....X..?
   1bc6c:	bdc8bd36 3f7ec46d bde1bc2e 3f7e70b0     6...m.~?.....p~?
   1bc7c:	bdfab273 3f7e1324 be09cf86 3f7dabcc     s...$.~?......}?
   1bc8c:	be164083 3f7d3aac be22abb6 3f7cbfc9     .@...:}?.."...|?
   1bc9c:	be2f10a2 3f7c3b28 be3b6ecf 3f7baccd     ../.(;|?.n;...{?
   1bcac:	be47c5c2 3f7b14be be541501 3f7a7302     ..G...{?..T..sz?
   1bcbc:	be605c13 3f79c79d be6c9a7f 3f791298     .\`...y?..l...y?
   1bccc:	be78cfcc 3f7853f8 be827dc0 3f778bc5     ..x..Sx?.}....w?
   1bcdc:	be888e93 3f76ba07 be8e9a22 3f75dec6     ......v?".....u?
   1bcec:	be94a031 3f74fa0b be9aa086 3f740bdd     1.....t?......t?
   1bcfc:	bea09ae5 3f731447 bea68f12 3f721352     ....G.s?....R.r?
   1bd0c:	beac7cd4 3f710908 beb263ef 3f6ff573     .|....q?.c..s.o?
   1bd1c:	beb8442a 3f6ed89e bebe1d4a 3f6db293     *D....n?J.....m?
   1bd2c:	bec3ef15 3f6c835e bec9b953 3f6b4b0c     ....^.l?S....Kk?
   1bd3c:	becf7bca 3f6a09a7 bed53641 3f68bf3c     .{....j?A6..<.h?
   1bd4c:	bedae880 3f676bd8 bee0924f 3f660f88     .....kg?O.....f?
   1bd5c:	bee63375 3f64aa59 beebcbbb 3f633c5a     u3..Y.d?....Z<c?
   1bd6c:	bef15aea 3f61c598 bef6e0cb 3f604621     .Z....a?....!F`?
   1bd7c:	befc5d27 3f5ebe05 bf00e7e4 3f5d2d53     ']....^?....S-]?
   1bd8c:	bf039c3d 3f5b941a bf064b82 3f59f26a     =.....[?.K..j.Y?
   1bd9c:	bf08f59b 3f584853 bf0b9a6b 3f5695e5     ....SHX?k.....V?
   1bdac:	bf0e39da 3f54db31 bf10d3cd 3f531849     .9..1.T?....I.S?
   1bdbc:	bf13682a 3f514d3d bf15f6d9 3f4f7a1f     *h..=MQ?.....zO?
   1bdcc:	bf187fc0 3f4d9f02 bf1b02c6 3f4bbbf8     ......M?......K?
   1bddc:	bf1d7fd1 3f49d112 bf1ff6cb 3f47de65     ......I?....e.G?
   1bdec:	bf226799 3f45e403 bf24d225 3f43e200     .g"...E?%.$...C?
   1bdfc:	bf273656 3f41d870 bf299415 3f3fc767     V6'.p.A?..).g.??
   1be0c:	bf2beb4a 3f3daef9 bf2e3bde 3f3b8f3b     J.+...=?.;..;.;?
   1be1c:	bf3085bb 3f396842 bf32c8c9 3f373a23     ..0.Bh9?..2.#:7?
   1be2c:	bf3504f3 3f3504f3 bf373a23 3f32c8c9     ..5...5?#:7...2?
   1be3c:	bf396842 3f3085bb bf3b8f3b 3f2e3bde     Bh9...0?;.;..;.?
   1be4c:	bf3daef9 3f2beb4a bf3fc767 3f299415     ..=.J.+?g.?...)?
   1be5c:	bf41d870 3f273656 bf43e200 3f24d225     p.A.V6'?..C.%.$?
   1be6c:	bf45e403 3f226799 bf47de65 3f1ff6cb     ..E..g"?e.G....?
   1be7c:	bf49d112 3f1d7fd1 bf4bbbf8 3f1b02c6     ..I....?..K....?
   1be8c:	bf4d9f02 3f187fc0 bf4f7a1f 3f15f6d9     ..M....?.zO....?
   1be9c:	bf514d3d 3f13682a bf531849 3f10d3cd     =MQ.*h.?I.S....?
   1beac:	bf54db31 3f0e39da bf5695e5 3f0b9a6b     1.T..9.?..V.k..?
   1bebc:	bf584853 3f08f59b bf59f26a 3f064b82     SHX....?j.Y..K.?
   1becc:	bf5b941a 3f039c3d bf5d2d53 3f00e7e4     ..[.=..?S-]....?
   1bedc:	bf5ebe05 3efc5d27 bf604621 3ef6e0cb     ..^.'].>!F`....>
   1beec:	bf61c598 3ef15aea bf633c5a 3eebcbbb     ..a..Z.>Z<c....>
   1befc:	bf64aa59 3ee63375 bf660f88 3ee0924f     Y.d.u3.>..f.O..>
   1bf0c:	bf676bd8 3edae880 bf68bf3c 3ed53641     .kg....><.h.A6.>
   1bf1c:	bf6a09a7 3ecf7bca bf6b4b0c 3ec9b953     ..j..{.>.Kk.S..>
   1bf2c:	bf6c835e 3ec3ef15 bf6db293 3ebe1d4a     ^.l....>..m.J..>
   1bf3c:	bf6ed89e 3eb8442a bf6ff573 3eb263ef     ..n.*D.>s.o..c.>
   1bf4c:	bf710908 3eac7cd4 bf721352 3ea68f12     ..q..|.>R.r....>
   1bf5c:	bf731447 3ea09ae5 bf740bdd 3e9aa086     G.s....>..t....>
   1bf6c:	bf74fa0b 3e94a031 bf75dec6 3e8e9a22     ..t.1..>..u."..>
   1bf7c:	bf76ba07 3e888e93 bf778bc5 3e827dc0     ..v....>..w..}.>
   1bf8c:	bf7853f8 3e78cfcc bf791298 3e6c9a7f     .Sx...x>..y...l>
   1bf9c:	bf79c79d 3e605c13 bf7a7302 3e541501     ..y..\`>.sz...T>
   1bfac:	bf7b14be 3e47c5c2 bf7baccd 3e3b6ecf     ..{...G>..{..n;>
   1bfbc:	bf7c3b28 3e2f10a2 bf7cbfc9 3e22abb6     (;|.../>..|...">
   1bfcc:	bf7d3aac 3e164083 bf7dabcc 3e09cf86     .:}..@.>..}....>
   1bfdc:	bf7e1324 3dfab273 bf7e70b0 3de1bc2e     $.~.s..=.p~....=
   1bfec:	bf7ec46d 3dc8bd36 bf7f0e58 3dafb680     m.~.6..=X......=
   1bffc:	bf7f4e6d 3d96a905 bf7f84ab 3d7b2b74     mN.....=....t+{=
   1c00c:	bf7fb10f 3d48fb2f bf7fd398 3d16c32c     ..../.H=....,..=
   1c01c:	bf7fec43 3cc90ab0 bf7ffb11 3c490e90     C......<......I<
   1c02c:	bf800000 00000000 bf7ffb11 bc490e90     ..............I.
   1c03c:	bf7fec43 bcc90ab0 bf7fd398 bd16c32c     C...........,...
   1c04c:	bf7fb10f bd48fb2f bf7f84ab bd7b2b74     ..../.H.....t+{.
   1c05c:	bf7f4e6d bd96a905 bf7f0e58 bdafb680     mN......X.......
   1c06c:	bf7ec46d bdc8bd36 bf7e70b0 bde1bc2e     m.~.6....p~.....
   1c07c:	bf7e1324 bdfab273 bf7dabcc be09cf86     $.~.s.....}.....
   1c08c:	bf7d3aac be164083 bf7cbfc9 be22abb6     .:}..@....|...".
   1c09c:	bf7c3b28 be2f10a2 bf7baccd be3b6ecf     (;|.../...{..n;.
   1c0ac:	bf7b14be be47c5c2 bf7a7302 be541501     ..{...G..sz...T.
   1c0bc:	bf79c79d be605c13 bf791298 be6c9a7f     ..y..\`...y...l.
   1c0cc:	bf7853f8 be78cfcc bf778bc5 be827dc0     .Sx...x...w..}..
   1c0dc:	bf76ba07 be888e93 bf75dec6 be8e9a22     ..v.......u."...
   1c0ec:	bf74fa0b be94a031 bf740bdd be9aa086     ..t.1.....t.....
   1c0fc:	bf731447 bea09ae5 bf721352 bea68f12     G.s.....R.r.....
   1c10c:	bf710908 beac7cd4 bf6ff573 beb263ef     ..q..|..s.o..c..
   1c11c:	bf6ed89e beb8442a bf6db293 bebe1d4a     ..n.*D....m.J...
   1c12c:	bf6c835e bec3ef15 bf6b4b0c bec9b953     ^.l......Kk.S...
   1c13c:	bf6a09a7 becf7bca bf68bf3c bed53641     ..j..{..<.h.A6..
   1c14c:	bf676bd8 bedae880 bf660f88 bee0924f     .kg.......f.O...
   1c15c:	bf64aa59 bee63375 bf633c5a beebcbbb     Y.d.u3..Z<c.....
   1c16c:	bf61c598 bef15aea bf604621 bef6e0cb     ..a..Z..!F`.....
   1c17c:	bf5ebe05 befc5d27 bf5d2d53 bf00e7e4     ..^.']..S-].....
   1c18c:	bf5b941a bf039c3d bf59f26a bf064b82     ..[.=...j.Y..K..
   1c19c:	bf584853 bf08f59b bf5695e5 bf0b9a6b     SHX.......V.k...
   1c1ac:	bf54db31 bf0e39da bf531849 bf10d3cd     1.T..9..I.S.....
   1c1bc:	bf514d3d bf13682a bf4f7a1f bf15f6d9     =MQ.*h...zO.....
   1c1cc:	bf4d9f02 bf187fc0 bf4bbbf8 bf1b02c6     ..M.......K.....
   1c1dc:	bf49d112 bf1d7fd1 bf47de65 bf1ff6cb     ..I.....e.G.....
   1c1ec:	bf45e403 bf226799 bf43e200 bf24d225     ..E..g"...C.%.$.
   1c1fc:	bf41d870 bf273656 bf3fc767 bf299415     p.A.V6'.g.?...).
   1c20c:	bf3daef9 bf2beb4a bf3b8f3b bf2e3bde     ..=.J.+.;.;..;..
   1c21c:	bf396842 bf3085bb bf373a23 bf32c8c9     Bh9...0.#:7...2.
   1c22c:	bf3504f3 bf3504f3 bf32c8c9 bf373a23     ..5...5...2.#:7.
   1c23c:	bf3085bb bf396842 bf2e3bde bf3b8f3b     ..0.Bh9..;..;.;.
   1c24c:	bf2beb4a bf3daef9 bf299415 bf3fc767     J.+...=...).g.?.
   1c25c:	bf273656 bf41d870 bf24d225 bf43e200     V6'.p.A.%.$...C.
   1c26c:	bf226799 bf45e403 bf1ff6cb bf47de65     .g"...E.....e.G.
   1c27c:	bf1d7fd1 bf49d112 bf1b02c6 bf4bbbf8     ......I.......K.
   1c28c:	bf187fc0 bf4d9f02 bf15f6d9 bf4f7a1f     ......M......zO.
   1c29c:	bf13682a bf514d3d bf10d3cd bf531849     *h..=MQ.....I.S.
   1c2ac:	bf0e39da bf54db31 bf0b9a6b bf5695e5     .9..1.T.k.....V.
   1c2bc:	bf08f59b bf584853 bf064b82 bf59f26a     ....SHX..K..j.Y.
   1c2cc:	bf039c3d bf5b941a bf00e7e4 bf5d2d53     =.....[.....S-].
   1c2dc:	befc5d27 bf5ebe05 bef6e0cb bf604621     ']....^.....!F`.
   1c2ec:	bef15aea bf61c598 beebcbbb bf633c5a     .Z....a.....Z<c.
   1c2fc:	bee63375 bf64aa59 bee0924f bf660f88     u3..Y.d.O.....f.
   1c30c:	bedae880 bf676bd8 bed53641 bf68bf3c     .....kg.A6..<.h.
   1c31c:	becf7bca bf6a09a7 bec9b953 bf6b4b0c     .{....j.S....Kk.
   1c32c:	bec3ef15 bf6c835e bebe1d4a bf6db293     ....^.l.J.....m.
   1c33c:	beb8442a bf6ed89e beb263ef bf6ff573     *D....n..c..s.o.
   1c34c:	beac7cd4 bf710908 bea68f12 bf721352     .|....q.....R.r.
   1c35c:	bea09ae5 bf731447 be9aa086 bf740bdd     ....G.s.......t.
   1c36c:	be94a031 bf74fa0b be8e9a22 bf75dec6     1.....t.".....u.
   1c37c:	be888e93 bf76ba07 be827dc0 bf778bc5     ......v..}....w.
   1c38c:	be78cfcc bf7853f8 be6c9a7f bf791298     ..x..Sx...l...y.
   1c39c:	be605c13 bf79c79d be541501 bf7a7302     .\`...y...T..sz.
   1c3ac:	be47c5c2 bf7b14be be3b6ecf bf7baccd     ..G...{..n;...{.
   1c3bc:	be2f10a2 bf7c3b28 be22abb6 bf7cbfc9     ../.(;|..."...|.
   1c3cc:	be164083 bf7d3aac be09cf86 bf7dabcc     .@...:}.......}.
   1c3dc:	bdfab273 bf7e1324 bde1bc2e bf7e70b0     s...$.~......p~.
   1c3ec:	bdc8bd36 bf7ec46d bdafb680 bf7f0e58     6...m.~.....X...
   1c3fc:	bd96a905 bf7f4e6d bd7b2b74 bf7f84ab     ....mN..t+{.....
   1c40c:	bd48fb2f bf7fb10f bd16c32c bf7fd398     /.H.....,.......
   1c41c:	bcc90ab0 bf7fec43 bc490e90 bf7ffb11     ....C.....I.....
   1c42c:	80000000 bf800000 3c490e90 bf7ffb11     ..........I<....
   1c43c:	3cc90ab0 bf7fec43 3d16c32c bf7fd398     ...<C...,..=....
   1c44c:	3d48fb2f bf7fb10f 3d7b2b74 bf7f84ab     /.H=....t+{=....
   1c45c:	3d96a905 bf7f4e6d 3dafb680 bf7f0e58     ...=mN.....=X...
   1c46c:	3dc8bd36 bf7ec46d 3de1bc2e bf7e70b0     6..=m.~....=.p~.
   1c47c:	3dfab273 bf7e1324 3e09cf86 bf7dabcc     s..=$.~....>..}.
   1c48c:	3e164083 bf7d3aac 3e22abb6 bf7cbfc9     .@.>.:}...">..|.
   1c49c:	3e2f10a2 bf7c3b28 3e3b6ecf bf7baccd     ../>(;|..n;>..{.
   1c4ac:	3e47c5c2 bf7b14be 3e541501 bf7a7302     ..G>..{...T>.sz.
   1c4bc:	3e605c13 bf79c79d 3e6c9a7f bf791298     .\`>..y...l>..y.
   1c4cc:	3e78cfcc bf7853f8 3e827dc0 bf778bc5     ..x>.Sx..}.>..w.
   1c4dc:	3e888e93 bf76ba07 3e8e9a22 bf75dec6     ...>..v."..>..u.
   1c4ec:	3e94a031 bf74fa0b 3e9aa086 bf740bdd     1..>..t....>..t.
   1c4fc:	3ea09ae5 bf731447 3ea68f12 bf721352     ...>G.s....>R.r.
   1c50c:	3eac7cd4 bf710908 3eb263ef bf6ff573     .|.>..q..c.>s.o.
   1c51c:	3eb8442a bf6ed89e 3ebe1d4a bf6db293     *D.>..n.J..>..m.
   1c52c:	3ec3ef15 bf6c835e 3ec9b953 bf6b4b0c     ...>^.l.S..>.Kk.
   1c53c:	3ecf7bca bf6a09a7 3ed53641 bf68bf3c     .{.>..j.A6.><.h.
   1c54c:	3edae880 bf676bd8 3ee0924f bf660f88     ...>.kg.O..>..f.
   1c55c:	3ee63375 bf64aa59 3eebcbbb bf633c5a     u3.>Y.d....>Z<c.
   1c56c:	3ef15aea bf61c598 3ef6e0cb bf604621     .Z.>..a....>!F`.
   1c57c:	3efc5d27 bf5ebe05 3f00e7e4 bf5d2d53     '].>..^....?S-].
   1c58c:	3f039c3d bf5b941a 3f064b82 bf59f26a     =..?..[..K.?j.Y.
   1c59c:	3f08f59b bf584853 3f0b9a6b bf5695e5     ...?SHX.k..?..V.
   1c5ac:	3f0e39da bf54db31 3f10d3cd bf531849     .9.?1.T....?I.S.
   1c5bc:	3f13682a bf514d3d 3f15f6d9 bf4f7a1f     *h.?=MQ....?.zO.
   1c5cc:	3f187fc0 bf4d9f02 3f1b02c6 bf4bbbf8     ...?..M....?..K.
   1c5dc:	3f1d7fd1 bf49d112 3f1ff6cb bf47de65     ...?..I....?e.G.
   1c5ec:	3f226799 bf45e403 3f24d225 bf43e200     .g"?..E.%.$?..C.
   1c5fc:	3f273656 bf41d870 3f299415 bf3fc767     V6'?p.A...)?g.?.
   1c60c:	3f2beb4a bf3daef9 3f2e3bde bf3b8f3b     J.+?..=..;.?;.;.
   1c61c:	3f3085bb bf396842 3f32c8c9 bf373a23     ..0?Bh9...2?#:7.
   1c62c:	3f3504f3 bf3504f3 3f373a23 bf32c8c9     ..5?..5.#:7?..2.
   1c63c:	3f396842 bf3085bb 3f3b8f3b bf2e3bde     Bh9?..0.;.;?.;..
   1c64c:	3f3daef9 bf2beb4a 3f3fc767 bf299415     ..=?J.+.g.??..).
   1c65c:	3f41d870 bf273656 3f43e200 bf24d225     p.A?V6'...C?%.$.
   1c66c:	3f45e403 bf226799 3f47de65 bf1ff6cb     ..E?.g".e.G?....
   1c67c:	3f49d112 bf1d7fd1 3f4bbbf8 bf1b02c6     ..I?......K?....
   1c68c:	3f4d9f02 bf187fc0 3f4f7a1f bf15f6d9     ..M?.....zO?....
   1c69c:	3f514d3d bf13682a 3f531849 bf10d3cd     =MQ?*h..I.S?....
   1c6ac:	3f54db31 bf0e39da 3f5695e5 bf0b9a6b     1.T?.9....V?k...
   1c6bc:	3f584853 bf08f59b 3f59f26a bf064b82     SHX?....j.Y?.K..
   1c6cc:	3f5b941a bf039c3d 3f5d2d53 bf00e7e4     ..[?=...S-]?....
   1c6dc:	3f5ebe05 befc5d27 3f604621 bef6e0cb     ..^?']..!F`?....
   1c6ec:	3f61c598 bef15aea 3f633c5a beebcbbb     ..a?.Z..Z<c?....
   1c6fc:	3f64aa59 bee63375 3f660f88 bee0924f     Y.d?u3....f?O...
   1c70c:	3f676bd8 bedae880 3f68bf3c bed53641     .kg?....<.h?A6..
   1c71c:	3f6a09a7 becf7bca 3f6b4b0c bec9b953     ..j?.{...Kk?S...
   1c72c:	3f6c835e bec3ef15 3f6db293 bebe1d4a     ^.l?......m?J...
   1c73c:	3f6ed89e beb8442a 3f6ff573 beb263ef     ..n?*D..s.o?.c..
   1c74c:	3f710908 beac7cd4 3f721352 bea68f12     ..q?.|..R.r?....
   1c75c:	3f731447 bea09ae5 3f740bdd be9aa086     G.s?......t?....
   1c76c:	3f74fa0b be94a031 3f75dec6 be8e9a22     ..t?1.....u?"...
   1c77c:	3f76ba07 be888e93 3f778bc5 be827dc0     ..v?......w?.}..
   1c78c:	3f7853f8 be78cfcc 3f791298 be6c9a7f     .Sx?..x...y?..l.
   1c79c:	3f79c79d be605c13 3f7a7302 be541501     ..y?.\`..sz?..T.
   1c7ac:	3f7b14be be47c5c2 3f7baccd be3b6ecf     ..{?..G...{?.n;.
   1c7bc:	3f7c3b28 be2f10a2 3f7cbfc9 be22abb6     (;|?../...|?..".
   1c7cc:	3f7d3aac be164083 3f7dabcc be09cf86     .:}?.@....}?....
   1c7dc:	3f7e1324 bdfab273 3f7e70b0 bde1bc2e     $.~?s....p~?....
   1c7ec:	3f7ec46d bdc8bd36 3f7f0e58 bdafb680     m.~?6...X..?....
   1c7fc:	3f7f4e6d bd96a905 3f7f84ab bd7b2b74     mN.?.......?t+{.
   1c80c:	3f7fb10f bd48fb2f 3f7fd398 bd16c32c     ...?/.H....?,...
   1c81c:	3f7fec43 bcc90ab0 3f7ffb11 bc490e90     C..?.......?..I.

0001c82c <armBitRevIndexTable2048>:
   1c82c:	10000008 20000010 30000018 02000020     ....... ...0 ...
   1c83c:	12000028 22000030 32000038 04000040     (...0.."8..2@...
   1c84c:	14000048 24000050 34000058 06000060     H...P..$X..4`...
   1c85c:	16000068 26000070 36000078 08000080     h...p..&x..6....
   1c86c:	18000088 28000090 38000098 0a0000a0     .......(...8....
   1c87c:	1a0000a8 2a0000b0 3a0000b8 0c0000c0     .......*...:....
   1c88c:	1c0000c8 2c0000d0 3c0000d8 0e0000e0     .......,...<....
   1c89c:	1e0000e8 2e0000f0 3e0000f8 04000100     ...........>....
   1c8ac:	10400108 20400110 30400118 02400120     ..@...@ ..@0 .@.
   1c8bc:	12400128 22400130 32400138 04400140     (.@.0.@"8.@2@.@.
   1c8cc:	14400148 24400150 34400158 06400160     H.@.P.@$X.@4`.@.
   1c8dc:	16400168 26400170 36400178 08400180     h.@.p.@&x.@6..@.
   1c8ec:	18400188 28400190 38400198 0a4001a0     ..@...@(..@8..@.
   1c8fc:	1a4001a8 2a4001b0 3a4001b8 0c4001c0     ..@...@*..@:..@.
   1c90c:	1c4001c8 2c4001d0 3c4001d8 0e4001e0     ..@...@,..@<..@.
   1c91c:	1e4001e8 2e4001f0 3e4001f8 08000200     ..@...@...@>....
   1c92c:	10800208 20800210 30800218 02800220     ....... ...0 ...
   1c93c:	12800228 22800230 32800238 04800240     (...0.."8..2@...
   1c94c:	14800248 24800250 34800258 06800260     H...P..$X..4`...
   1c95c:	16800268 26800270 36800278 08800280     h...p..&x..6....
   1c96c:	18800288 28800290 38800298 0a8002a0     .......(...8....
   1c97c:	1a8002a8 2a8002b0 3a8002b8 0c8002c0     .......*...:....
   1c98c:	1c8002c8 2c8002d0 3c8002d8 0e8002e0     .......,...<....
   1c99c:	1e8002e8 2e8002f0 3e8002f8 0c000300     ...........>....
   1c9ac:	10c00308 20c00310 30c00318 0c800320     ....... ...0 ...
   1c9bc:	12c00328 22c00330 32c00338 04c00340     (...0.."8..2@...
   1c9cc:	14c00348 24c00350 34c00358 06c00360     H...P..$X..4`...
   1c9dc:	16c00368 26c00370 36c00378 08c00380     h...p..&x..6....
   1c9ec:	18c00388 28c00390 38c00398 0ac003a0     .......(...8....
   1c9fc:	1ac003a8 2ac003b0 3ac003b8 0cc003c0     .......*...:....
   1ca0c:	1cc003c8 2cc003d0 3cc003d8 0ec003e0     .......,...<....
   1ca1c:	1ec003e8 2ec003f0 3ec003f8 11000408     ...........>....
   1ca2c:	21000410 31000418 0c000420 13000428     ...!...1 ...(...
   1ca3c:	23000430 33000438 05000440 15000448     0..#8..3@...H...
   1ca4c:	25000450 35000458 07000460 17000468     P..%X..5`...h...
   1ca5c:	27000470 37000478 09000480 19000488     p..'x..7........
   1ca6c:	29000490 39000498 0b0004a0 1b0004a8     ...)...9........
   1ca7c:	2b0004b0 3b0004b8 0d0004c0 1d0004c8     ...+...;........
   1ca8c:	2d0004d0 3d0004d8 0f0004e0 1f0004e8     ...-...=........
   1ca9c:	2f0004f0 3f0004f8 11400508 21400510     .../...?..@...@!
   1caac:	31400518 0d000520 13400528 23400530     ..@1 ...(.@.0.@#
   1cabc:	33400538 15400548 25400550 35400558     8.@3H.@.P.@%X.@5
   1cacc:	07400560 17400568 27400570 37400578     `.@.h.@.p.@'x.@7
   1cadc:	09400580 19400588 29400590 39400598     ..@...@...@)..@9
   1caec:	0b4005a0 1b4005a8 2b4005b0 3b4005b8     ..@...@...@+..@;
   1cafc:	0d4005c0 1d4005c8 2d4005d0 3d4005d8     ..@...@...@-..@=
   1cb0c:	0f4005e0 1f4005e8 2f4005f0 3f4005f8     ..@...@...@/..@?
   1cb1c:	08400600 11800608 21800610 31800618     ..@........!...1
   1cb2c:	08c00620 13800628 23800630 33800638      ...(...0..#8..3
   1cb3c:	09400640 15800648 25800650 35800658     @.@.H...P..%X..5
   1cb4c:	07800660 17800668 27800670 37800678     `...h...p..'x..7
   1cb5c:	09800680 19800688 29800690 39800698     ...........)...9
   1cb6c:	0b8006a0 1b8006a8 2b8006b0 3b8006b8     ...........+...;
   1cb7c:	0d8006c0 1d8006c8 2d8006d0 3d8006d8     ...........-...=
   1cb8c:	0f8006e0 1f8006e8 2f8006f0 3f8006f8     .........../...?
   1cb9c:	0c400700 11c00708 21c00710 31c00718     ..@........!...1
   1cbac:	0cc00720 13c00728 23c00730 33c00738      ...(...0..#8..3
   1cbbc:	0d400740 15c00748 25c00750 35c00758     @.@.H...P..%X..5
   1cbcc:	07c00760 17c00768 27c00770 37c00778     `...h...p..'x..7
   1cbdc:	09c00780 19c00788 29c00790 39c00798     ...........)...9
   1cbec:	0bc007a0 1bc007a8 2bc007b0 3bc007b8     ...........+...;
   1cbfc:	0dc007c0 1dc007c8 2dc007d0 3dc007d8     ...........-...=
   1cc0c:	0fc007e0 1fc007e8 2fc007f0 3fc007f8     .........../...?
   1cc1c:	10000800 10080808 20080810 30080818     ........... ...0
   1cc2c:	10800820 12080828 22080830 32080838      ...(...0.."8..2
   1cc3c:	11000840 14080848 24080850 34080858     @...H...P..$X..4
   1cc4c:	11800860 16080868 26080870 36080878     `...h...p..&x..6
   1cc5c:	10080880 18080888 28080890 38080898     ...........(...8
   1cc6c:	0a0808a0 1a0808a8 2a0808b0 3a0808b8     ...........*...:
   1cc7c:	0c0808c0 1c0808c8 2c0808d0 3c0808d8     ...........,...<
   1cc8c:	0e0808e0 1e0808e8 2e0808f0 3e0808f8     ...............>
   1cc9c:	14000900 10480908 20480910 30480918     ......H...H ..H0
   1ccac:	14800920 12480928 22480930 32480938      ...(.H.0.H"8.H2
   1ccbc:	15000940 14480948 24480950 34480958     @...H.H.P.H$X.H4
   1cccc:	15800960 16480968 26480970 36480978     `...h.H.p.H&x.H6
   1ccdc:	14080980 18480988 28480990 38480998     ......H...H(..H8
   1ccec:	0a4809a0 1a4809a8 2a4809b0 3a4809b8     ..H...H...H*..H:
   1ccfc:	0c4809c0 1c4809c8 2c4809d0 3c4809d8     ..H...H...H,..H<
   1cd0c:	0e4809e0 1e4809e8 2e4809f0 3e4809f8     ..H...H...H...H>
   1cd1c:	18000a00 10880a08 20880a10 30880a18     ........... ...0
   1cd2c:	18800a20 12880a28 22880a30 32880a38      ...(...0.."8..2
   1cd3c:	19000a40 14880a48 24880a50 34880a58     @...H...P..$X..4
   1cd4c:	19800a60 16880a68 26880a70 36880a78     `...h...p..&x..6
   1cd5c:	18080a80 18880a88 28880a90 38880a98     ...........(...8
   1cd6c:	18880aa0 1a880aa8 2a880ab0 3a880ab8     ...........*...:
   1cd7c:	0c880ac0 1c880ac8 2c880ad0 3c880ad8     ...........,...<
   1cd8c:	0e880ae0 1e880ae8 2e880af0 3e880af8     ...............>
   1cd9c:	1c000b00 10c80b08 20c80b10 30c80b18     ........... ...0
   1cdac:	1c800b20 12c80b28 22c80b30 32c80b38      ...(...0.."8..2
   1cdbc:	1d000b40 14c80b48 24c80b50 34c80b58     @...H...P..$X..4
   1cdcc:	1d800b60 16c80b68 26c80b70 36c80b78     `...h...p..&x..6
   1cddc:	1c080b80 18c80b88 28c80b90 38c80b98     ...........(...8
   1cdec:	1c880ba0 1ac80ba8 2ac80bb0 3ac80bb8     ...........*...:
   1cdfc:	0cc80bc0 1cc80bc8 2cc80bd0 3cc80bd8     ...........,...<
   1ce0c:	0ec80be0 1ec80be8 2ec80bf0 3ec80bf8     ...............>
   1ce1c:	10400c00 11080c08 21080c10 31080c18     ..@........!...1
   1ce2c:	10c00c20 13080c28 23080c30 33080c38      ...(...0..#8..3
   1ce3c:	11400c40 15080c48 25080c50 35080c58     @.@.H...P..%X..5
   1ce4c:	11c00c60 17080c68 27080c70 37080c78     `...h...p..'x..7
   1ce5c:	10480c80 19080c88 29080c90 39080c98     ..H........)...9
   1ce6c:	10c80ca0 1b080ca8 2b080cb0 3b080cb8     ...........+...;
   1ce7c:	0d080cc0 1d080cc8 2d080cd0 3d080cd8     ...........-...=
   1ce8c:	0f080ce0 1f080ce8 2f080cf0 3f080cf8     .........../...?
   1ce9c:	14400d00 11480d08 21480d10 31480d18     ..@...H...H!..H1
   1ceac:	14c00d20 13480d28 23480d30 33480d38      ...(.H.0.H#8.H3
   1cebc:	15400d40 15480d48 25480d50 35480d58     @.@.H.H.P.H%X.H5
   1cecc:	15c00d60 17480d68 27480d70 37480d78     `...h.H.p.H'x.H7
   1cedc:	14480d80 19480d88 29480d90 39480d98     ..H...H...H)..H9
   1ceec:	14c80da0 1b480da8 2b480db0 3b480db8     ......H...H+..H;
   1cefc:	15480dc0 1d480dc8 2d480dd0 3d480dd8     ..H...H...H-..H=
   1cf0c:	0f480de0 1f480de8 2f480df0 3f480df8     ..H...H...H/..H?
   1cf1c:	18400e00 11880e08 21880e10 31880e18     ..@........!...1
   1cf2c:	18c00e20 13880e28 23880e30 33880e38      ...(...0..#8..3
   1cf3c:	19400e40 15880e48 25880e50 35880e58     @.@.H...P..%X..5
   1cf4c:	19c00e60 17880e68 27880e70 37880e78     `...h...p..'x..7
   1cf5c:	18480e80 19880e88 29880e90 39880e98     ..H........)...9
   1cf6c:	18c80ea0 1b880ea8 2b880eb0 3b880eb8     ...........+...;
   1cf7c:	19480ec0 1d880ec8 2d880ed0 3d880ed8     ..H........-...=
   1cf8c:	0f880ee0 1f880ee8 2f880ef0 3f880ef8     .........../...?
   1cf9c:	1c400f00 11c80f08 21c80f10 31c80f18     ..@........!...1
   1cfac:	1cc00f20 13c80f28 23c80f30 33c80f38      ...(...0..#8..3
   1cfbc:	1d400f40 15c80f48 25c80f50 35c80f58     @.@.H...P..%X..5
   1cfcc:	1dc00f60 17c80f68 27c80f70 37c80f78     `...h...p..'x..7
   1cfdc:	1c480f80 19c80f88 29c80f90 39c80f98     ..H........)...9
   1cfec:	1cc80fa0 1bc80fa8 2bc80fb0 3bc80fb8     ...........+...;
   1cffc:	1d480fc0 1dc80fc8 2dc80fd0 3dc80fd8     ..H........-...=
   1d00c:	1dc80fe0 1fc80fe8 2fc80ff0 3fc80ff8     .........../...?
   1d01c:	20001000 10101008 20101010 30101018     ... ....... ...0
   1d02c:	20801020 12101028 22101030 32101038      .. (...0.."8..2
   1d03c:	21001040 14101048 24101050 34101058     @..!H...P..$X..4
   1d04c:	21801060 16101068 26101070 36101078     `..!h...p..&x..6
   1d05c:	20081080 18101088 28101090 38101098     ... .......(...8
   1d06c:	208810a0 1a1010a8 2a1010b0 3a1010b8     ... .......*...:
   1d07c:	210810c0 1c1010c8 2c1010d0 3c1010d8     ...!.......,...<
   1d08c:	218810e0 1e1010e8 2e1010f0 3e1010f8     ...!...........>
   1d09c:	24001100 24101108 20501110 30501118     ...$...$..P ..P0
   1d0ac:	24801120 12501128 22501130 32501138      ..$(.P.0.P"8.P2
   1d0bc:	25001140 14501148 24501150 34501158     @..%H.P.P.P$X.P4
   1d0cc:	25801160 16501168 26501170 36501178     `..%h.P.p.P&x.P6
   1d0dc:	24081180 18501188 28501190 38501198     ...$..P...P(..P8
   1d0ec:	248811a0 1a5011a8 2a5011b0 3a5011b8     ...$..P...P*..P:
   1d0fc:	250811c0 1c5011c8 2c5011d0 3c5011d8     ...%..P...P,..P<
   1d10c:	258811e0 1e5011e8 2e5011f0 3e5011f8     ...%..P...P...P>
   1d11c:	28001200 28101208 20901210 30901218     ...(...(... ...0
   1d12c:	28801220 12901228 22901230 32901238      ..((...0.."8..2
   1d13c:	29001240 14901248 24901250 34901258     @..)H...P..$X..4
   1d14c:	29801260 16901268 26901270 36901278     `..)h...p..&x..6
   1d15c:	28081280 18901288 28901290 38901298     ...(.......(...8
   1d16c:	288812a0 1a9012a8 2a9012b0 3a9012b8     ...(.......*...:
   1d17c:	290812c0 1c9012c8 2c9012d0 3c9012d8     ...).......,...<
   1d18c:	298812e0 1e9012e8 2e9012f0 3e9012f8     ...)...........>
   1d19c:	2c001300 2c101308 20d01310 30d01318     ...,...,... ...0
   1d1ac:	2c801320 2c901328 22d01330 32d01338      ..,(..,0.."8..2
   1d1bc:	2d001340 14d01348 24d01350 34d01358     @..-H...P..$X..4
   1d1cc:	2d801360 16d01368 26d01370 36d01378     `..-h...p..&x..6
   1d1dc:	2c081380 18d01388 28d01390 38d01398     ...,.......(...8
   1d1ec:	2c8813a0 1ad013a8 2ad013b0 3ad013b8     ...,.......*...:
   1d1fc:	2d0813c0 1cd013c8 2cd013d0 3cd013d8     ...-.......,...<
   1d20c:	2d8813e0 1ed013e8 2ed013f0 3ed013f8     ...-...........>
   1d21c:	20401400 20501408 21101410 31101418     ..@ ..P ...!...1
   1d22c:	20c01420 20d01428 23101430 33101438      .. (.. 0..#8..3
   1d23c:	21401440 15101448 25101450 35101458     @.@!H...P..%X..5
   1d24c:	21c01460 17101468 27101470 37101478     `..!h...p..'x..7
   1d25c:	20481480 19101488 29101490 39101498     ..H .......)...9
   1d26c:	20c814a0 1b1014a8 2b1014b0 3b1014b8     ... .......+...;
   1d27c:	214814c0 1d1014c8 2d1014d0 3d1014d8     ..H!.......-...=
   1d28c:	21c814e0 1f1014e8 2f1014f0 3f1014f8     ...!......./...?
   1d29c:	24401500 24501508 21501510 31501518     ..@$..P$..P!..P1
   1d2ac:	24c01520 24d01528 23501530 33501538      ..$(..$0.P#8.P3
   1d2bc:	25401540 15501548 25501550 35501558     @.@%H.P.P.P%X.P5
   1d2cc:	25c01560 17501568 27501570 37501578     `..%h.P.p.P'x.P7
   1d2dc:	24481580 19501588 29501590 39501598     ..H$..P...P)..P9
   1d2ec:	24c815a0 1b5015a8 2b5015b0 3b5015b8     ...$..P...P+..P;
   1d2fc:	254815c0 1d5015c8 2d5015d0 3d5015d8     ..H%..P...P-..P=
   1d30c:	25c815e0 1f5015e8 2f5015f0 3f5015f8     ...%..P...P/..P?
   1d31c:	28401600 28501608 21901610 31901618     ..@(..P(...!...1
   1d32c:	28c01620 28d01628 23901630 33901638      ..((..(0..#8..3
   1d33c:	29401640 29501648 25901650 35901658     @.@)H.P)P..%X..5
   1d34c:	29c01660 17901668 27901670 37901678     `..)h...p..'x..7
   1d35c:	28481680 19901688 29901690 39901698     ..H(.......)...9
   1d36c:	28c816a0 1b9016a8 2b9016b0 3b9016b8     ...(.......+...;
   1d37c:	294816c0 1d9016c8 2d9016d0 3d9016d8     ..H).......-...=
   1d38c:	29c816e0 1f9016e8 2f9016f0 3f9016f8     ...)......./...?
   1d39c:	2c401700 2c501708 21d01710 31d01718     ..@,..P,...!...1
   1d3ac:	2cc01720 2cd01728 23d01730 33d01738      ..,(..,0..#8..3
   1d3bc:	2d401740 2d501748 25d01750 35d01758     @.@-H.P-P..%X..5
   1d3cc:	2dc01760 17d01768 27d01770 37d01778     `..-h...p..'x..7
   1d3dc:	2c481780 19d01788 29d01790 39d01798     ..H,.......)...9
   1d3ec:	2cc817a0 1bd017a8 2bd017b0 3bd017b8     ...,.......+...;
   1d3fc:	2d4817c0 1dd017c8 2dd017d0 3dd017d8     ..H-.......-...=
   1d40c:	2dc817e0 1fd017e8 2fd017f0 3fd017f8     ...-......./...?
   1d41c:	30001800 30101808 20181810 30181818     ...0...0... ...0
   1d42c:	30801820 30901828 22181830 32181838      ..0(..00.."8..2
   1d43c:	31001840 31101848 24181850 34181858     @..1H..1P..$X..4
   1d44c:	31801860 31901868 26181870 36181878     `..1h..1p..&x..6
   1d45c:	30081880 30181888 28181890 38181898     ...0...0...(...8
   1d46c:	308818a0 1a1818a8 2a1818b0 3a1818b8     ...0.......*...:
   1d47c:	310818c0 1c1818c8 2c1818d0 3c1818d8     ...1.......,...<
   1d48c:	318818e0 1e1818e8 2e1818f0 3e1818f8     ...1...........>
   1d49c:	34001900 34101908 20581910 30581918     ...4...4..X ..X0
   1d4ac:	34801920 34901928 22581930 32581938      ..4(..40.X"8.X2
   1d4bc:	35001940 35101948 24581950 34581958     @..5H..5P.X$X.X4
   1d4cc:	35801960 35901968 26581970 36581978     `..5h..5p.X&x.X6
   1d4dc:	34081980 34181988 28581990 38581998     ...4...4..X(..X8
   1d4ec:	348819a0 1a5819a8 2a5819b0 3a5819b8     ...4..X...X*..X:
   1d4fc:	350819c0 1c5819c8 2c5819d0 3c5819d8     ...5..X...X,..X<
   1d50c:	358819e0 1e5819e8 2e5819f0 3e5819f8     ...5..X...X...X>
   1d51c:	38001a00 38101a08 20981a10 30981a18     ...8...8... ...0
   1d52c:	38801a20 38901a28 22981a30 32981a38      ..8(..80.."8..2
   1d53c:	39001a40 39101a48 24981a50 34981a58     @..9H..9P..$X..4
   1d54c:	39801a60 39901a68 26981a70 36981a78     `..9h..9p..&x..6
   1d55c:	38081a80 38181a88 28981a90 38981a98     ...8...8...(...8
   1d56c:	38881aa0 38981aa8 2a981ab0 3a981ab8     ...8...8...*...:
   1d57c:	39081ac0 1c981ac8 2c981ad0 3c981ad8     ...9.......,...<
   1d58c:	39881ae0 1e981ae8 2e981af0 3e981af8     ...9...........>
   1d59c:	3c001b00 3c101b08 20d81b10 30d81b18     ...<...<... ...0
   1d5ac:	3c801b20 3c901b28 22d81b30 32d81b38      ..<(..<0.."8..2
   1d5bc:	3d001b40 3d101b48 24d81b50 34d81b58     @..=H..=P..$X..4
   1d5cc:	3d801b60 3d901b68 26d81b70 36d81b78     `..=h..=p..&x..6
   1d5dc:	3c081b80 3c181b88 28d81b90 38d81b98     ...<...<...(...8
   1d5ec:	3c881ba0 3c981ba8 2ad81bb0 3ad81bb8     ...<...<...*...:
   1d5fc:	3d081bc0 1cd81bc8 2cd81bd0 3cd81bd8     ...=.......,...<
   1d60c:	3d881be0 1ed81be8 2ed81bf0 3ed81bf8     ...=...........>
   1d61c:	30401c00 30501c08 21181c10 31181c18     ..@0..P0...!...1
   1d62c:	30c01c20 30d01c28 23181c30 33181c38      ..0(..00..#8..3
   1d63c:	31401c40 31501c48 25181c50 35181c58     @.@1H.P1P..%X..5
   1d64c:	31c01c60 31d01c68 27181c70 37181c78     `..1h..1p..'x..7
   1d65c:	30481c80 30581c88 29181c90 39181c98     ..H0..X0...)...9
   1d66c:	30c81ca0 30d81ca8 2b181cb0 3b181cb8     ...0...0...+...;
   1d67c:	31481cc0 1d181cc8 2d181cd0 3d181cd8     ..H1.......-...=
   1d68c:	31c81ce0 1f181ce8 2f181cf0 3f181cf8     ...1......./...?
   1d69c:	34401d00 34501d08 21581d10 31581d18     ..@4..P4..X!..X1
   1d6ac:	34c01d20 34d01d28 23581d30 33581d38      ..4(..40.X#8.X3
   1d6bc:	35401d40 35501d48 25581d50 35581d58     @.@5H.P5P.X%X.X5
   1d6cc:	35c01d60 35d01d68 27581d70 37581d78     `..5h..5p.X'x.X7
   1d6dc:	34481d80 34581d88 29581d90 39581d98     ..H4..X4..X)..X9
   1d6ec:	34c81da0 34d81da8 2b581db0 3b581db8     ...4...4..X+..X;
   1d6fc:	35481dc0 35581dc8 2d581dd0 3d581dd8     ..H5..X5..X-..X=
   1d70c:	35c81de0 1f581de8 2f581df0 3f581df8     ...5..X...X/..X?
   1d71c:	38401e00 38501e08 21981e10 31981e18     ..@8..P8...!...1
   1d72c:	38c01e20 38d01e28 23981e30 33981e38      ..8(..80..#8..3
   1d73c:	39401e40 39501e48 25981e50 35981e58     @.@9H.P9P..%X..5
   1d74c:	39c01e60 39d01e68 27981e70 37981e78     `..9h..9p..'x..7
   1d75c:	38481e80 38581e88 29981e90 39981e98     ..H8..X8...)...9
   1d76c:	38c81ea0 38d81ea8 2b981eb0 3b981eb8     ...8...8...+...;
   1d77c:	39481ec0 39581ec8 2d981ed0 3d981ed8     ..H9..X9...-...=
   1d78c:	39c81ee0 1f981ee8 2f981ef0 3f981ef8     ...9......./...?
   1d79c:	3c401f00 3c501f08 21d81f10 31d81f18     ..@<..P<...!...1
   1d7ac:	3cc01f20 3cd01f28 23d81f30 33d81f38      ..<(..<0..#8..3
   1d7bc:	3d401f40 3d501f48 25d81f50 35d81f58     @.@=H.P=P..%X..5
   1d7cc:	3dc01f60 3dd01f68 27d81f70 37d81f78     `..=h..=p..'x..7
   1d7dc:	3c481f80 3c581f88 29d81f90 39d81f98     ..H<..X<...)...9
   1d7ec:	3cc81fa0 3cd81fa8 2bd81fb0 3bd81fb8     ...<...<...+...;
   1d7fc:	3d481fc0 3d581fc8 2dd81fd0 3dd81fd8     ..H=..X=...-...=
   1d80c:	3dc81fe0 3dd81fe8 2fd81ff0 3fd81ff8     ...=...=.../...?
   1d81c:	20802008 20202010 30202018 28802028     . . .   .  0( .(
   1d82c:	22202030 32202038 21002040 20c02048     0  "8  2@ .!H . 
   1d83c:	24202050 34202058 24102060 28c02068     P  $X  4` .$h .(
   1d84c:	26202070 36202078 30802088 28202090     p  &x  6. .0.  (
   1d85c:	38202098 300820a0 388020a8 2a2020b0     .  8. .0. .8.  *
   1d86c:	3a2020b8 210820c0 30c020c8 2c2020d0     .  :. .!. .0.  ,
   1d87c:	3c2020d8 310820e0 38c020e8 2e2020f0     .  <. .1. .8.  .
   1d88c:	3e2020f8 24002100 21802108 24102110     .  >.!.$.!.!.!.$
   1d89c:	30602118 24202120 29802128 22602130     .!`0 ! $(!.)0!`"
   1d8ac:	32602138 25002140 21c02148 24602150     8!`2@!.%H!.!P!`$
   1d8bc:	34602158 24502160 29c02168 26602170     X!`4`!P$h!.)p!`&
   1d8cc:	36602178 24082180 31802188 28602190     x!`6.!.$.!.1.!`(
   1d8dc:	38602198 340821a0 398021a8 2a6021b0     .!`8.!.4.!.9.!`*
   1d8ec:	3a6021b8 250821c0 31c021c8 2c6021d0     .!`:.!.%.!.1.!`,
   1d8fc:	3c6021d8 350821e0 39c021e8 2e6021f0     .!`<.!.5.!.9.!`.
   1d90c:	3e6021f8 30002200 30802208 30082210     .!`>.".0.".0.".0
   1d91c:	30a02218 30102220 28882228 22a02230     .".0 ".0(".(0"."
   1d92c:	32a02238 30402240 30c02248 24a02250     8".2@"@0H".0P".$
   1d93c:	34a02258 30502260 28c82268 26a02270     X".4`"P0h".(p".&
   1d94c:	36a02278 30202280 30882288 28a02290     x".6." 0.".0.".(
   1d95c:	38a02298 301822a0 388822a8 2aa022b0     .".8.".0.".8.".*
   1d96c:	3aa022b8 306022c0 30c822c8 2ca022d0     .".:."`0.".0.".,
   1d97c:	3ca022d8 311822e0 38c822e8 2ea022f0     .".<.".1.".8."..
   1d98c:	3ea022f8 31002300 31802308 31082310     .".>.#.1.#.1.#.1
   1d99c:	30e02318 31102320 29882328 31182330     .#.0 #.1(#.)0#.1
   1d9ac:	32e02338 31402340 31c02348 24e02350     8#.2@#@1H#.1P#.$
   1d9bc:	34e02358 31502360 29c82368 26e02370     X#.4`#P1h#.)p#.&
   1d9cc:	36e02378 24182380 31882388 28e02390     x#.6.#.$.#.1.#.(
   1d9dc:	38e02398 341823a0 398823a8 2ae023b0     .#.8.#.4.#.9.#.*
   1d9ec:	3ae023b8 251823c0 31c823c8 2ce023d0     .#.:.#.%.#.1.#.,
   1d9fc:	3ce023d8 351823e0 39c823e8 2ee023f0     .#.<.#.5.#.9.#..
   1da0c:	3ee023f8 24802408 24202410 31202418     .#.>.$.$.$ $.$ 1
   1da1c:	2c802428 31102430 33202438 25002440     ($.,0$.18$ 3@$.%
   1da2c:	24c02448 25202450 35202458 25102460     H$.$P$ %X$ 5`$.%
   1da3c:	2cc02468 27202470 37202478 34802488     h$.,p$ 'x$ 7.$.4
   1da4c:	29202490 39202498 304824a0 3c8024a8     .$ ).$ 9.$H0.$.<
   1da5c:	2b2024b0 3b2024b8 250824c0 34c024c8     .$ +.$ ;.$.%.$.4
   1da6c:	2d2024d0 3d2024d8 314824e0 3cc024e8     .$ -.$ =.$H1.$.<
   1da7c:	2f2024f0 3f2024f8 25802508 25202510     .$ /.$ ?.%.%.% %
   1da8c:	31602518 2d802528 31502530 33602538     .%`1(%.-0%P18%`3
   1da9c:	25c02548 25602550 35602558 2dc02568     H%.%P%`%X%`5h%.-
   1daac:	27602570 37602578 35802588 29602590     p%`'x%`7.%.5.%`)
   1dabc:	39602598 344825a0 3d8025a8 2b6025b0     .%`9.%H4.%.=.%`+
   1dacc:	3b6025b8 35c025c8 2d6025d0 3d6025d8     .%`;.%.5.%`-.%`=
   1dadc:	354825e0 3dc025e8 2f6025f0 3f6025f8     .%H5.%.=.%`/.%`?
   1daec:	34002600 34802608 34082610 31a02618     .&.4.&.4.&.4.&.1
   1dafc:	34102620 2c882628 34182630 33a02638      &.4(&.,0&.48&.3
   1db0c:	34402640 34c02648 34482650 35a02658     @&@4H&.4P&H4X&.5
   1db1c:	34502660 2cc82668 27a02670 37a02678     `&P4h&.,p&.'x&.7
   1db2c:	34202680 34882688 29a02690 39a02698     .& 4.&.4.&.).&.9
   1db3c:	305826a0 3c8826a8 2ba026b0 3ba026b8     .&X0.&.<.&.+.&.;
   1db4c:	346026c0 34c826c8 2da026d0 3da026d8     .&`4.&.4.&.-.&.=
   1db5c:	315826e0 3cc826e8 2fa026f0 3fa026f8     .&X1.&.<.&./.&.?
   1db6c:	35002700 35802708 35082710 31e02718     .'.5.'.5.'.5.'.1
   1db7c:	35102720 2d882728 35182730 33e02738      '.5('.-0'.58'.3
   1db8c:	35402740 35c02748 35482750 35e02758     @'@5H'.5P'H5X'.5
   1db9c:	35502760 2dc82768 27e02770 37e02778     `'P5h'.-p'.'x'.7
   1dbac:	35202780 35882788 29e02790 39e02798     .' 5.'.5.'.).'.9
   1dbbc:	345827a0 3d8827a8 2be027b0 3be027b8     .'X4.'.=.'.+.'.;
   1dbcc:	356027c0 35c827c8 2de027d0 3de027d8     .'`5.'.5.'.-.'.=
   1dbdc:	355827e0 3dc827e8 2fe027f0 3fe027f8     .'X5.'.=.'./.'.?
   1dbec:	28202808 28802810 30282818 28902828     .( (.(.(.((0((.(
   1dbfc:	28882830 32282838 2c002840 2c202848     0(.(8((2@(.,H( ,
   1dc0c:	2c802850 34282858 2c082860 28d02868     P(.,X((4`(.,h(.(
   1dc1c:	2c882870 36282878 30902888 38282898     p(.,x((6.(.0.((8
   1dc2c:	302828a0 389028a8 2a2828b0 3a2828b8     .((0.(.8.((*.((:
   1dc3c:	2c1028c0 30d028c8 2c2828d0 3c2828d8     .(.,.(.0.((,.((<
   1dc4c:	2c1828e0 38d028e8 2e2828f0 3e2828f8     .(.,.(.8.((..((>
   1dc5c:	2c002900 2c082908 2c102910 30682918     .).,.).,.).,.)h0
   1dc6c:	2c202920 29902928 30d02930 32682938      ) ,().)0).08)h2
   1dc7c:	2c402940 2c602948 2cc02950 34682958     @)@,H)`,P).,X)h4
   1dc8c:	2c482960 29d02968 2cc82970 36682978     `)H,h).)p).,x)h6
   1dc9c:	2c802980 31902988 2c282990 38682998     .).,.).1.)(,.)h8
   1dcac:	342829a0 399029a8 2a6829b0 3a6829b8     .)(4.).9.)h*.)h:
   1dcbc:	2c5029c0 31d029c8 2c6829d0 3c6829d8     .)P,.).1.)h,.)h<
   1dccc:	2c5829e0 39d029e8 2e6829f0 3e6829f8     .)X,.).9.)h..)h>
   1dcdc:	38002a00 38202a08 38802a10 30a82a18     .*.8.* 8.*.8.*.0
   1dcec:	38082a20 38282a28 38882a30 32a82a38      *.8(*(80*.88*.2
   1dcfc:	3c002a40 3c202a48 3c802a50 34a82a58     @*.<H* <P*.<X*.4
   1dd0c:	3c082a60 3c282a68 3c882a70 36a82a78     `*.<h*(<p*.<x*.6
   1dd1c:	38102a80 30982a88 38902a90 38a82a98     .*.8.*.0.*.8.*.8
   1dd2c:	38182aa0 38982aa8 38982ab0 3aa82ab8     .*.8.*.8.*.8.*.:
   1dd3c:	3c102ac0 30d82ac8 2ca82ad0 3ca82ad8     .*.<.*.0.*.,.*.<
   1dd4c:	3c182ae0 38d82ae8 2ea82af0 3ea82af8     .*.<.*.8.*...*.>
   1dd5c:	38402b00 38602b08 38c02b10 30e82b18     .+@8.+`8.+.8.+.0
   1dd6c:	38482b20 38682b28 38c82b30 32e82b38      +H8(+h80+.88+.2
   1dd7c:	3c402b40 3c602b48 3cc02b50 34e82b58     @+@<H+`<P+.<X+.4
   1dd8c:	3c482b60 3c682b68 3cc82b70 36e82b78     `+H<h+h<p+.<x+.6
   1dd9c:	38502b80 31982b88 38d02b90 38e82b98     .+P8.+.1.+.8.+.8
   1ddac:	38582ba0 39982ba8 38d82bb0 3ae82bb8     .+X8.+.9.+.8.+.:
   1ddbc:	3c502bc0 31d82bc8 2ce82bd0 3ce82bd8     .+P<.+.1.+.,.+.<
   1ddcc:	3c582be0 39d82be8 2ee82bf0 3ee82bf8     .+X<.+.9.+...+.>
   1dddc:	2c202c08 2c802c10 31282c18 2c902c28     ., ,.,.,.,(1(,.,
   1ddec:	31902c30 33282c38 2d002c40 2d202c48     0,.18,(3@,.-H, -
   1ddfc:	2d802c50 35282c58 2d082c60 2cd02c68     P,.-X,(5`,.-h,.,
   1de0c:	2d882c70 37282c78 34902c88 39282c98     p,.-x,(7.,.4.,(9
   1de1c:	30682ca0 3c902ca8 38682cb0 3b282cb8     .,h0.,.<.,h8.,(;
   1de2c:	2d102cc0 34d02cc8 2d282cd0 3d282cd8     .,.-.,.4.,(-.,(=
   1de3c:	2d182ce0 3cd02ce8 2f282cf0 3f282cf8     .,.-.,.<.,(/.,(?
   1de4c:	2d202d08 2d802d10 31682d18 2d902d28     .- -.-.-.-h1(-.-
   1de5c:	31d02d30 33682d38 2d602d48 2dc02d50     0-.18-h3H-`-P-.-
   1de6c:	35682d58 2dd02d68 2dc82d70 37682d78     X-h5h-.-p-.-x-h7
   1de7c:	35902d88 39682d98 34682da0 3d902da8     .-.5.-h9.-h4.-.=
   1de8c:	3c682db0 3b682db8 35d02dc8 3d682dd8     .-h<.-h;.-.5.-h=
   1de9c:	35682de0 3dd02de8 2f682df0 3f682df8     .-h5.-.=.-h/.-h?
   1deac:	39002e00 39202e08 39802e10 31a82e18     ...9.. 9...9...1
   1debc:	39082e20 39282e28 39882e30 33a82e38      ..9(.(90..98..3
   1decc:	3d002e40 3d202e48 3d802e50 35a82e58     @..=H. =P..=X..5
   1dedc:	3d082e60 3d282e68 3d882e70 37a82e78     `..=h.(=p..=x..7
   1deec:	39102e80 34982e88 39902e90 39a82e98     ...9...4...9...9
   1defc:	39182ea0 3c982ea8 39982eb0 3ba82eb8     ...9...<...9...;
   1df0c:	3d102ec0 34d82ec8 3d902ed0 3da82ed8     ...=...4...=...=
   1df1c:	3d182ee0 3cd82ee8 2fa82ef0 3fa82ef8     ...=...<.../...?
   1df2c:	39402f00 39602f08 39c02f10 31e82f18     ./@9./`9./.9./.1
   1df3c:	39482f20 39682f28 39c82f30 33e82f38      /H9(/h90/.98/.3
   1df4c:	3d402f40 3d602f48 3dc02f50 35e82f58     @/@=H/`=P/.=X/.5
   1df5c:	3d482f60 3d682f68 3dc82f70 37e82f78     `/H=h/h=p/.=x/.7
   1df6c:	39502f80 35982f88 39d02f90 39e82f98     ./P9./.5./.9./.9
   1df7c:	39582fa0 3d982fa8 39d82fb0 3be82fb8     ./X9./.=./.9./.;
   1df8c:	3d502fc0 35d82fc8 3dd02fd0 3de82fd8     ./P=./.5./.=./.=
   1df9c:	3d582fe0 3dd82fe8 3dd82ff0 3fe82ff8     ./X=./.=./.=./.?
   1dfac:	30303018 32303038 31003040 31083048     .0008002@0.1H0.1
   1dfbc:	31103050 34303058 31203060 31283068     P0.1X004`0 1h0(1
   1dfcc:	34183070 36303078 30a03088 38303098     p0.4x006.0.0.008
   1dfdc:	38a030a8 388830b0 3a3030b8 318030c0     .0.8.0.8.00:.0.1
   1dfec:	30e030c8 319030d0 3c3030d8 318830e0     .0.0.0.1.00<.0.1
   1dffc:	38e030e8 398830f0 3e3030f8 34003100     .0.8.0.9.00>.1.4
   1e00c:	34083108 34103110 34183118 34203120     .1.4.1.4.1.4 1 4
   1e01c:	34283128 34303130 32703138 35003140     (1(4010481p2@1.5
   1e02c:	35083148 35103150 34703158 35203160     H1.5P1.5X1p4`1 5
   1e03c:	35283168 34583170 36703178 34803180     h1(5p1X4x1p6.1.4
   1e04c:	31a03188 34903190 38703198 348831a0     .1.1.1.4.1p8.1.4
   1e05c:	39a031a8 3c8831b0 3a7031b8 358031c0     .1.9.1.<.1p:.1.5
   1e06c:	31e031c8 359031d0 3c7031d8 358831e0     .1.1.1.5.1p<.1.5
   1e07c:	39e031e8 3d8831f0 3e7031f8 38003200     .1.9.1.=.1p>.2.8
   1e08c:	38803208 38083210 38883218 38103220     .2.8.2.8.2.8 2.8
   1e09c:	38903228 38183230 32b03238 38403240     (2.802.882.2@2@8
   1e0ac:	38c03248 38483250 34b03258 38503260     H2.8P2H8X2.4`2P8
   1e0bc:	38d03268 38583270 36b03278 38203280     h2.8p2X8x2.6.2 8
   1e0cc:	38a03288 38283290 38b03298 383032a0     .2.8.2(8.2.8.208
   1e0dc:	38a832a8 389832b0 3ab032b8 386032c0     .2.8.2.8.2.:.2`8
   1e0ec:	38e032c8 386832d0 3cb032d8 387032e0     .2.8.2h8.2.<.2p8
   1e0fc:	38e832e8 399832f0 3eb032f8 39003300     .2.8.2.9.2.>.3.9
   1e10c:	39803308 39083310 39883318 39103320     .3.9.3.9.3.9 3.9
   1e11c:	39903328 39183330 39983338 39403340     (3.903.983.9@3@9
   1e12c:	39c03348 39483350 34f03358 39503360     H3.9P3H9X3.4`3P9
   1e13c:	39d03368 39583370 36f03378 39203380     h3.9p3X9x3.6.3 9
   1e14c:	39a03388 39283390 38f03398 349833a0     .3.9.3(9.3.8.3.4
   1e15c:	39a833a8 3c9833b0 3af033b8 396033c0     .3.9.3.<.3.:.3`9
   1e16c:	39e033c8 396833d0 3cf033d8 359833e0     .3.9.3h9.3.<.3.5
   1e17c:	39e833e8 3d9833f0 3ef033f8 34303418     .3.9.3.=.3.>.404
   1e18c:	39183438 35003440 35083448 35103450     84.9@4.5H4.5P4.5
   1e19c:	35303458 35203460 35283468 35183470     X405`4 5h4(5p4.5
   1e1ac:	37303478 34a03488 39303498 3ca034a8     x407.4.4.409.4.<
   1e1bc:	38c834b0 3b3034b8 358034c0 34e034c8     .4.8.40;.4.5.4.4
   1e1cc:	359034d0 3d3034d8 358834e0 3ce034e8     .4.5.40=.4.5.4.<
   1e1dc:	39c834f0 3f3034f8 35303518 39583538     .4.9.40?.50585X9
   1e1ec:	35703558 37703578 35a03588 39703598     X5p5x5p7.5.5.5p9
   1e1fc:	3da035a8 3cc835b0 3b7035b8 35e035c8     .5.=.5.<.5p;.5.5
   1e20c:	3d7035d8 3de035e8 3dc835f0 3f7035f8     .5p=.5.=.5.=.5p?
   1e21c:	3c003600 3c803608 3c083610 3c883618     .6.<.6.<.6.<.6.<
   1e22c:	3c103620 3c903628 3c183630 3c983638      6.<(6.<06.<86.<
   1e23c:	3c403640 3cc03648 3c483650 3cc83658     @6@<H6.<P6H<X6.<
   1e24c:	3c503660 3cd03668 3c583670 37b03678     `6P<h6.<p6X<x6.7
   1e25c:	3c203680 3ca03688 3c283690 39b03698     .6 <.6.<.6(<.6.9
   1e26c:	3c3036a0 3ca836a8 38d836b0 3bb036b8     .60<.6.<.6.8.6.;
   1e27c:	3c6036c0 3ce036c8 3c6836d0 3db036d8     .6`<.6.<.6h<.6.=
   1e28c:	3c7036e0 3ce836e8 39d836f0 3fb036f8     .6p<.6.<.6.9.6.?
   1e29c:	3d003700 3d803708 3d083710 3d883718     .7.=.7.=.7.=.7.=
   1e2ac:	3d103720 3d903728 3d183730 3d983738      7.=(7.=07.=87.=
   1e2bc:	3d403740 3dc03748 3d483750 3dc83758     @7@=H7.=P7H=X7.=
   1e2cc:	3d503760 3dd03768 3d583770 37f03778     `7P=h7.=p7X=x7.7
   1e2dc:	3d203780 3da03788 3d283790 39f03798     .7 =.7.=.7(=.7.9
   1e2ec:	3d3037a0 3da837a8 3cd837b0 3bf037b8     .70=.7.=.7.<.7.;
   1e2fc:	3d6037c0 3de037c8 3d6837d0 3df037d8     .7`=.7.=.7h=.7.=
   1e30c:	3d7037e0 3de837e8 3dd837f0 3ff037f8     .7p=.7.=.7.=.7.?
   1e31c:	38983838 39003840 39083848 39103850     88.8@8.9H8.9P8.9
   1e32c:	39183858 39203860 39283868 39303870     X8.9`8 9h8(9p809
   1e33c:	3c983878 38b038a8 3a3838b8 398038c0     x8.<.8.8.88:.8.9
   1e34c:	398838c8 399038d0 3c3838d8 39a038e0     .8.9.8.9.88<.8.9
   1e35c:	38f038e8 3e3838f8 39a838f0 3c003900     .8.8.88>.8.9.9.<
   1e36c:	3c083908 3c103910 3c183918 3c203920     .9.<.9.<.9.< 9 <
   1e37c:	3c283928 3c303930 3c383938 3d003940     (9(<090<898<@9.=
   1e38c:	3d083948 3d103950 3d183958 3d203960     H9.=P9.=X9.=`9 =
   1e39c:	3d283968 3d303970 3cd83978 3c803980     h9(=p90=x9.<.9.<
   1e3ac:	3c883988 3c903990 3c983998 3ca039a0     .9.<.9.<.9.<.9.<
   1e3bc:	39b039a8 3a7839b8 3ca839b0 3d8039c0     .9.9.9x:.9.<.9.=
   1e3cc:	3d8839c8 3d9039d0 3c7839d8 3da039e0     .9.=.9.=.9x<.9.=
   1e3dc:	39f039e8 3e7839f8 3da839f0 3a103a08     .9.9.9x>.9.=.:.:
   1e3ec:	3a203a10 3a303a18 3a803a20 3a903a28     .: :.:0: :.:(:.:
   1e3fc:	3aa03a30 3ab03a38 3b003a40 3b103a48     0:.:8:.:@:.;H:.;
   1e40c:	3b203a50 3b303a58 3b803a60 3b903a68     P: ;X:0;`:.;h:.;
   1e41c:	3ba03a70 3bb03a78 3aa03a88 3ab03a98     p:.;x:.;.:.:.:.:
   1e42c:	3ab03aa8 3b083ac0 3b183ac8 3b283ad0     .:.:.:.;.:.;.:(;
   1e43c:	3cb83ad8 3b883ae0 3b983ae8 3ba83af0     .:.<.:.;.:.;.:.;
   1e44c:	3eb83af8 3e003b00 3e103b08 3e203b10     .:.>.;.>.;.>.; >
   1e45c:	3e303b18 3e803b20 3e903b28 3ea03b30     .;0> ;.>(;.>0;.>
   1e46c:	3eb03b38 3f003b40 3f103b48 3f203b50     8;.>@;.?H;.?P; ?
   1e47c:	3f303b58 3f803b60 3f903b68 3fa03b70     X;0?`;.?h;.?p;.?
   1e48c:	3fb03b78 3e083b80 3e183b88 3e283b90     x;.?.;.>.;.>.;(>
   1e49c:	3e383b98 3e883ba0 3e983ba8 3ea83bb0     .;8>.;.>.;.>.;.>
   1e4ac:	3eb83bb8 3f083bc0 3f183bc8 3f283bd0     .;.>.;.?.;.?.;(?
   1e4bc:	3cf83bd8 3f883be0 3f983be8 3fa83bf0     .;.<.;.?.;.?.;.?
   1e4cc:	3ef83bf8 3c983c38 3d003c40 3d083c48     .;.>8<.<@<.=H<.=
   1e4dc:	3d103c50 3d183c58 3d203c60 3d283c68     P<.=X<.=`< =h<(=
   1e4ec:	3d303c70 3d983c78 3cb03ca8 3eb03cb8     p<0=x<.=.<.<.<.>
   1e4fc:	3d803cc0 3d883cc8 3d903cd0 3d383cd8     .<.=.<.=.<.=.<8=
   1e50c:	3da03ce0 3cf03ce8 3da83cf0 3f383cf8     .<.=.<.<.<.=.<8?
   1e51c:	3d983d38 3dd83d78 3db03da8 3fb03db8     8=.=x=.=.=.=.=.?
   1e52c:	3df03de8 3e803e08 3f783df8 3e803e10     .=.=.>.>.=x?.>.>
   1e53c:	3e883e18 3e803e20 3e903e28 3e883e30     .>.> >.>(>.>0>.>
   1e54c:	3e983e38 3f003e40 3f203e48 3f803e50     8>.>@>.?H> ?P>.?
   1e55c:	3fa03e58 3f083e60 3f283e68 3f883e70     X>.?`>.?h>(?p>.?
   1e56c:	3fa83e78 3ea03e88 3ea83e98 3f103ec0     x>.?.>.>.>.>.>.?
   1e57c:	3eb03ea8 3f303ec8 3f903ed0 3fb03ed8     .>.>.>0?.>.?.>.?
   1e58c:	3f183ee0 3f383ee8 3f983ef0 3f803f08     .>.?.>8?.>.?.?.?
   1e59c:	3fb83ef8 3f803f10 3f883f18 3f803f20     .>.?.?.?.?.? ?.?
   1e5ac:	3f903f28 3f883f30 3f983f38 3f503f48     (?.?0?.?8?.?H?P?
   1e5bc:	3f603f50 3f703f58 3fc03f60 3fd03f68     P?`?X?p?`?.?h?.?
   1e5cc:	3fe03f70 3ff03f78 3fa03f88 3fa83f98     p?.?x?.?.?.?.?.?
   1e5dc:	3fb03fa8 3ff03fd8 3fe03fc8 3ff03fe8     .?.?.?.?.?.?.?.?

0001e5ec <twiddleCoef_64>:
   1e5ec:	3f800000 00000000 3f7ec46d 3dc8bd36     ...?....m.~?6..=
   1e5fc:	3f7b14be 3e47c5c2 3f74fa0b 3e94a031     ..{?..G>..t?1..>
   1e60c:	3f6c835e 3ec3ef15 3f61c598 3ef15aea     ^.l?...>..a?.Z.>
   1e61c:	3f54db31 3f0e39da 3f45e403 3f226799     1.T?.9.?..E?.g"?
   1e62c:	3f3504f3 3f3504f3 3f226799 3f45e403     ..5?..5?.g"?..E?
   1e63c:	3f0e39da 3f54db31 3ef15aea 3f61c598     .9.?1.T?.Z.>..a?
   1e64c:	3ec3ef15 3f6c835e 3e94a031 3f74fa0b     ...>^.l?1..>..t?
   1e65c:	3e47c5c2 3f7b14be 3dc8bd36 3f7ec46d     ..G>..{?6..=m.~?
   1e66c:	00000000 3f800000 bdc8bd36 3f7ec46d     .......?6...m.~?
   1e67c:	be47c5c2 3f7b14be be94a031 3f74fa0b     ..G...{?1.....t?
   1e68c:	bec3ef15 3f6c835e bef15aea 3f61c598     ....^.l?.Z....a?
   1e69c:	bf0e39da 3f54db31 bf226799 3f45e403     .9..1.T?.g"...E?
   1e6ac:	bf3504f3 3f3504f3 bf45e403 3f226799     ..5...5?..E..g"?
   1e6bc:	bf54db31 3f0e39da bf61c598 3ef15aea     1.T..9.?..a..Z.>
   1e6cc:	bf6c835e 3ec3ef15 bf74fa0b 3e94a031     ^.l....>..t.1..>
   1e6dc:	bf7b14be 3e47c5c2 bf7ec46d 3dc8bd36     ..{...G>m.~.6..=
   1e6ec:	bf800000 00000000 bf7ec46d bdc8bd36     ........m.~.6...
   1e6fc:	bf7b14be be47c5c2 bf74fa0b be94a031     ..{...G...t.1...
   1e70c:	bf6c835e bec3ef15 bf61c598 bef15aea     ^.l.......a..Z..
   1e71c:	bf54db31 bf0e39da bf45e403 bf226799     1.T..9....E..g".
   1e72c:	bf3504f3 bf3504f3 bf226799 bf45e403     ..5...5..g"...E.
   1e73c:	bf0e39da bf54db31 bef15aea bf61c598     .9..1.T..Z....a.
   1e74c:	bec3ef15 bf6c835e be94a031 bf74fa0b     ....^.l.1.....t.
   1e75c:	be47c5c2 bf7b14be bdc8bd36 bf7ec46d     ..G...{.6...m.~.
   1e76c:	80000000 bf800000 3dc8bd36 bf7ec46d     ........6..=m.~.
   1e77c:	3e47c5c2 bf7b14be 3e94a031 bf74fa0b     ..G>..{.1..>..t.
   1e78c:	3ec3ef15 bf6c835e 3ef15aea bf61c598     ...>^.l..Z.>..a.
   1e79c:	3f0e39da bf54db31 3f226799 bf45e403     .9.?1.T..g"?..E.
   1e7ac:	3f3504f3 bf3504f3 3f45e403 bf226799     ..5?..5...E?.g".
   1e7bc:	3f54db31 bf0e39da 3f61c598 bef15aea     1.T?.9....a?.Z..
   1e7cc:	3f6c835e bec3ef15 3f74fa0b be94a031     ^.l?......t?1...
   1e7dc:	3f7b14be be47c5c2 3f7ec46d bdc8bd36     ..{?..G.m.~?6...

0001e7ec <twiddleCoef_rfft_512>:
   1e7ec:	00000000 3f800000 3c490e90 3f7ffb11     .......?..I<...?
   1e7fc:	3cc90ab0 3f7fec43 3d16c32c 3f7fd398     ...<C..?,..=...?
   1e80c:	3d48fb2f 3f7fb10f 3d7b2b74 3f7f84ab     /.H=...?t+{=...?
   1e81c:	3d96a905 3f7f4e6d 3dafb680 3f7f0e58     ...=mN.?...=X..?
   1e82c:	3dc8bd36 3f7ec46d 3de1bc2e 3f7e70b0     6..=m.~?...=.p~?
   1e83c:	3dfab273 3f7e1324 3e09cf86 3f7dabcc     s..=$.~?...>..}?
   1e84c:	3e164083 3f7d3aac 3e22abb6 3f7cbfc9     .@.>.:}?..">..|?
   1e85c:	3e2f10a2 3f7c3b28 3e3b6ecf 3f7baccd     ../>(;|?.n;>..{?
   1e86c:	3e47c5c2 3f7b14be 3e541501 3f7a7302     ..G>..{?..T>.sz?
   1e87c:	3e605c13 3f79c79d 3e6c9a7f 3f791298     .\`>..y?..l>..y?
   1e88c:	3e78cfcc 3f7853f8 3e827dc0 3f778bc5     ..x>.Sx?.}.>..w?
   1e89c:	3e888e93 3f76ba07 3e8e9a22 3f75dec6     ...>..v?"..>..u?
   1e8ac:	3e94a031 3f74fa0b 3e9aa086 3f740bdd     1..>..t?...>..t?
   1e8bc:	3ea09ae5 3f731447 3ea68f12 3f721352     ...>G.s?...>R.r?
   1e8cc:	3eac7cd4 3f710908 3eb263ef 3f6ff573     .|.>..q?.c.>s.o?
   1e8dc:	3eb8442a 3f6ed89e 3ebe1d4a 3f6db293     *D.>..n?J..>..m?
   1e8ec:	3ec3ef15 3f6c835e 3ec9b953 3f6b4b0c     ...>^.l?S..>.Kk?
   1e8fc:	3ecf7bca 3f6a09a7 3ed53641 3f68bf3c     .{.>..j?A6.><.h?
   1e90c:	3edae880 3f676bd8 3ee0924f 3f660f88     ...>.kg?O..>..f?
   1e91c:	3ee63375 3f64aa59 3eebcbbb 3f633c5a     u3.>Y.d?...>Z<c?
   1e92c:	3ef15aea 3f61c598 3ef6e0cb 3f604621     .Z.>..a?...>!F`?
   1e93c:	3efc5d27 3f5ebe05 3f00e7e4 3f5d2d53     '].>..^?...?S-]?
   1e94c:	3f039c3d 3f5b941a 3f064b82 3f59f26a     =..?..[?.K.?j.Y?
   1e95c:	3f08f59b 3f584853 3f0b9a6b 3f5695e5     ...?SHX?k..?..V?
   1e96c:	3f0e39da 3f54db31 3f10d3cd 3f531849     .9.?1.T?...?I.S?
   1e97c:	3f13682a 3f514d3d 3f15f6d9 3f4f7a1f     *h.?=MQ?...?.zO?
   1e98c:	3f187fc0 3f4d9f02 3f1b02c6 3f4bbbf8     ...?..M?...?..K?
   1e99c:	3f1d7fd1 3f49d112 3f1ff6cb 3f47de65     ...?..I?...?e.G?
   1e9ac:	3f226799 3f45e403 3f24d225 3f43e200     .g"?..E?%.$?..C?
   1e9bc:	3f273656 3f41d870 3f299415 3f3fc767     V6'?p.A?..)?g.??
   1e9cc:	3f2beb4a 3f3daef9 3f2e3bde 3f3b8f3b     J.+?..=?.;.?;.;?
   1e9dc:	3f3085bb 3f396842 3f32c8c9 3f373a23     ..0?Bh9?..2?#:7?
   1e9ec:	3f3504f3 3f3504f3 3f373a23 3f32c8c9     ..5?..5?#:7?..2?
   1e9fc:	3f396842 3f3085bb 3f3b8f3b 3f2e3bde     Bh9?..0?;.;?.;.?
   1ea0c:	3f3daef9 3f2beb4a 3f3fc767 3f299415     ..=?J.+?g.??..)?
   1ea1c:	3f41d870 3f273656 3f43e200 3f24d225     p.A?V6'?..C?%.$?
   1ea2c:	3f45e403 3f226799 3f47de65 3f1ff6cb     ..E?.g"?e.G?...?
   1ea3c:	3f49d112 3f1d7fd1 3f4bbbf8 3f1b02c6     ..I?...?..K?...?
   1ea4c:	3f4d9f02 3f187fc0 3f4f7a1f 3f15f6d9     ..M?...?.zO?...?
   1ea5c:	3f514d3d 3f13682a 3f531849 3f10d3cd     =MQ?*h.?I.S?...?
   1ea6c:	3f54db31 3f0e39da 3f5695e5 3f0b9a6b     1.T?.9.?..V?k..?
   1ea7c:	3f584853 3f08f59b 3f59f26a 3f064b82     SHX?...?j.Y?.K.?
   1ea8c:	3f5b941a 3f039c3d 3f5d2d53 3f00e7e4     ..[?=..?S-]?...?
   1ea9c:	3f5ebe05 3efc5d27 3f604621 3ef6e0cb     ..^?'].>!F`?...>
   1eaac:	3f61c598 3ef15aea 3f633c5a 3eebcbbb     ..a?.Z.>Z<c?...>
   1eabc:	3f64aa59 3ee63375 3f660f88 3ee0924f     Y.d?u3.>..f?O..>
   1eacc:	3f676bd8 3edae880 3f68bf3c 3ed53641     .kg?...><.h?A6.>
   1eadc:	3f6a09a7 3ecf7bca 3f6b4b0c 3ec9b953     ..j?.{.>.Kk?S..>
   1eaec:	3f6c835e 3ec3ef15 3f6db293 3ebe1d4a     ^.l?...>..m?J..>
   1eafc:	3f6ed89e 3eb8442a 3f6ff573 3eb263ef     ..n?*D.>s.o?.c.>
   1eb0c:	3f710908 3eac7cd4 3f721352 3ea68f12     ..q?.|.>R.r?...>
   1eb1c:	3f731447 3ea09ae5 3f740bdd 3e9aa086     G.s?...>..t?...>
   1eb2c:	3f74fa0b 3e94a031 3f75dec6 3e8e9a22     ..t?1..>..u?"..>
   1eb3c:	3f76ba07 3e888e93 3f778bc5 3e827dc0     ..v?...>..w?.}.>
   1eb4c:	3f7853f8 3e78cfcc 3f791298 3e6c9a7f     .Sx?..x>..y?..l>
   1eb5c:	3f79c79d 3e605c13 3f7a7302 3e541501     ..y?.\`>.sz?..T>
   1eb6c:	3f7b14be 3e47c5c2 3f7baccd 3e3b6ecf     ..{?..G>..{?.n;>
   1eb7c:	3f7c3b28 3e2f10a2 3f7cbfc9 3e22abb6     (;|?../>..|?..">
   1eb8c:	3f7d3aac 3e164083 3f7dabcc 3e09cf86     .:}?.@.>..}?...>
   1eb9c:	3f7e1324 3dfab273 3f7e70b0 3de1bc2e     $.~?s..=.p~?...=
   1ebac:	3f7ec46d 3dc8bd36 3f7f0e58 3dafb680     m.~?6..=X..?...=
   1ebbc:	3f7f4e6d 3d96a905 3f7f84ab 3d7b2b74     mN.?...=...?t+{=
   1ebcc:	3f7fb10f 3d48fb2f 3f7fd398 3d16c32c     ...?/.H=...?,..=
   1ebdc:	3f7fec43 3cc90ab0 3f7ffb11 3c490e90     C..?...<...?..I<
   1ebec:	3f800000 00000000 3f7ffb11 bc490e90     ...?.......?..I.
   1ebfc:	3f7fec43 bcc90ab0 3f7fd398 bd16c32c     C..?.......?,...
   1ec0c:	3f7fb10f bd48fb2f 3f7f84ab bd7b2b74     ...?/.H....?t+{.
   1ec1c:	3f7f4e6d bd96a905 3f7f0e58 bdafb680     mN.?....X..?....
   1ec2c:	3f7ec46d bdc8bd36 3f7e70b0 bde1bc2e     m.~?6....p~?....
   1ec3c:	3f7e1324 bdfab273 3f7dabcc be09cf86     $.~?s.....}?....
   1ec4c:	3f7d3aac be164083 3f7cbfc9 be22abb6     .:}?.@....|?..".
   1ec5c:	3f7c3b28 be2f10a2 3f7baccd be3b6ecf     (;|?../...{?.n;.
   1ec6c:	3f7b14be be47c5c2 3f7a7302 be541501     ..{?..G..sz?..T.
   1ec7c:	3f79c79d be605c13 3f791298 be6c9a7f     ..y?.\`...y?..l.
   1ec8c:	3f7853f8 be78cfcc 3f778bc5 be827dc0     .Sx?..x...w?.}..
   1ec9c:	3f76ba07 be888e93 3f75dec6 be8e9a22     ..v?......u?"...
   1ecac:	3f74fa0b be94a031 3f740bdd be9aa086     ..t?1.....t?....
   1ecbc:	3f731447 bea09ae5 3f721352 bea68f12     G.s?....R.r?....
   1eccc:	3f710908 beac7cd4 3f6ff573 beb263ef     ..q?.|..s.o?.c..
   1ecdc:	3f6ed89e beb8442a 3f6db293 bebe1d4a     ..n?*D....m?J...
   1ecec:	3f6c835e bec3ef15 3f6b4b0c bec9b953     ^.l?.....Kk?S...
   1ecfc:	3f6a09a7 becf7bca 3f68bf3c bed53641     ..j?.{..<.h?A6..
   1ed0c:	3f676bd8 bedae880 3f660f88 bee0924f     .kg?......f?O...
   1ed1c:	3f64aa59 bee63375 3f633c5a beebcbbb     Y.d?u3..Z<c?....
   1ed2c:	3f61c598 bef15aea 3f604621 bef6e0cb     ..a?.Z..!F`?....
   1ed3c:	3f5ebe05 befc5d27 3f5d2d53 bf00e7e4     ..^?']..S-]?....
   1ed4c:	3f5b941a bf039c3d 3f59f26a bf064b82     ..[?=...j.Y?.K..
   1ed5c:	3f584853 bf08f59b 3f5695e5 bf0b9a6b     SHX?......V?k...
   1ed6c:	3f54db31 bf0e39da 3f531849 bf10d3cd     1.T?.9..I.S?....
   1ed7c:	3f514d3d bf13682a 3f4f7a1f bf15f6d9     =MQ?*h...zO?....
   1ed8c:	3f4d9f02 bf187fc0 3f4bbbf8 bf1b02c6     ..M?......K?....
   1ed9c:	3f49d112 bf1d7fd1 3f47de65 bf1ff6cb     ..I?....e.G?....
   1edac:	3f45e403 bf226799 3f43e200 bf24d225     ..E?.g"...C?%.$.
   1edbc:	3f41d870 bf273656 3f3fc767 bf299415     p.A?V6'.g.??..).
   1edcc:	3f3daef9 bf2beb4a 3f3b8f3b bf2e3bde     ..=?J.+.;.;?.;..
   1eddc:	3f396842 bf3085bb 3f373a23 bf32c8c9     Bh9?..0.#:7?..2.
   1edec:	3f3504f3 bf3504f3 3f32c8c9 bf373a23     ..5?..5...2?#:7.
   1edfc:	3f3085bb bf396842 3f2e3bde bf3b8f3b     ..0?Bh9..;.?;.;.
   1ee0c:	3f2beb4a bf3daef9 3f299415 bf3fc767     J.+?..=...)?g.?.
   1ee1c:	3f273656 bf41d870 3f24d225 bf43e200     V6'?p.A.%.$?..C.
   1ee2c:	3f226799 bf45e403 3f1ff6cb bf47de65     .g"?..E....?e.G.
   1ee3c:	3f1d7fd1 bf49d112 3f1b02c6 bf4bbbf8     ...?..I....?..K.
   1ee4c:	3f187fc0 bf4d9f02 3f15f6d9 bf4f7a1f     ...?..M....?.zO.
   1ee5c:	3f13682a bf514d3d 3f10d3cd bf531849     *h.?=MQ....?I.S.
   1ee6c:	3f0e39da bf54db31 3f0b9a6b bf5695e5     .9.?1.T.k..?..V.
   1ee7c:	3f08f59b bf584853 3f064b82 bf59f26a     ...?SHX..K.?j.Y.
   1ee8c:	3f039c3d bf5b941a 3f00e7e4 bf5d2d53     =..?..[....?S-].
   1ee9c:	3efc5d27 bf5ebe05 3ef6e0cb bf604621     '].>..^....>!F`.
   1eeac:	3ef15aea bf61c598 3eebcbbb bf633c5a     .Z.>..a....>Z<c.
   1eebc:	3ee63375 bf64aa59 3ee0924f bf660f88     u3.>Y.d.O..>..f.
   1eecc:	3edae880 bf676bd8 3ed53641 bf68bf3c     ...>.kg.A6.><.h.
   1eedc:	3ecf7bca bf6a09a7 3ec9b953 bf6b4b0c     .{.>..j.S..>.Kk.
   1eeec:	3ec3ef15 bf6c835e 3ebe1d4a bf6db293     ...>^.l.J..>..m.
   1eefc:	3eb8442a bf6ed89e 3eb263ef bf6ff573     *D.>..n..c.>s.o.
   1ef0c:	3eac7cd4 bf710908 3ea68f12 bf721352     .|.>..q....>R.r.
   1ef1c:	3ea09ae5 bf731447 3e9aa086 bf740bdd     ...>G.s....>..t.
   1ef2c:	3e94a031 bf74fa0b 3e8e9a22 bf75dec6     1..>..t."..>..u.
   1ef3c:	3e888e93 bf76ba07 3e827dc0 bf778bc5     ...>..v..}.>..w.
   1ef4c:	3e78cfcc bf7853f8 3e6c9a7f bf791298     ..x>.Sx...l>..y.
   1ef5c:	3e605c13 bf79c79d 3e541501 bf7a7302     .\`>..y...T>.sz.
   1ef6c:	3e47c5c2 bf7b14be 3e3b6ecf bf7baccd     ..G>..{..n;>..{.
   1ef7c:	3e2f10a2 bf7c3b28 3e22abb6 bf7cbfc9     ../>(;|...">..|.
   1ef8c:	3e164083 bf7d3aac 3e09cf86 bf7dabcc     .@.>.:}....>..}.
   1ef9c:	3dfab273 bf7e1324 3de1bc2e bf7e70b0     s..=$.~....=.p~.
   1efac:	3dc8bd36 bf7ec46d 3dafb680 bf7f0e58     6..=m.~....=X...
   1efbc:	3d96a905 bf7f4e6d 3d7b2b74 bf7f84ab     ...=mN..t+{=....
   1efcc:	3d48fb2f bf7fb10f 3d16c32c bf7fd398     /.H=....,..=....
   1efdc:	3cc90ab0 bf7fec43 3c490e90 bf7ffb11     ...<C.....I<....

0001efec <armBitRevIndexTable512>:
   1efec:	02000008 04000010 06000018 08000020     ............ ...
   1effc:	0a000028 0c000030 0e000038 02400048     (...0...8...H.@.
   1f00c:	04400050 06400058 08400060 0a400068     P.@.X.@.`.@.h.@.
   1f01c:	0c400070 0e400078 02800088 04800090     p.@.x.@.........
   1f02c:	06800098 088000a0 0a8000a8 0c8000b0     ................
   1f03c:	0e8000b8 02c000c8 04c000d0 06c000d8     ................
   1f04c:	08c000e0 0ac000e8 0cc000f0 0ec000f8     ................
   1f05c:	03000108 05000110 07000118 09000120     ............ ...
   1f06c:	0b000128 0d000130 0f000138 03400148     (...0...8...H.@.
   1f07c:	05400150 07400158 09400160 0b400168     P.@.X.@.`.@.h.@.
   1f08c:	0d400170 0f400178 03800188 05800190     p.@.x.@.........
   1f09c:	07800198 098001a0 0b8001a8 0d8001b0     ................
   1f0ac:	0f8001b8 03c001c8 05c001d0 07c001d8     ................
   1f0bc:	09c001e0 0bc001e8 0dc001f0 0fc001f8     ................
   1f0cc:	04080210 06080218 08080220 0a080228     ........ ...(...
   1f0dc:	0c080230 0e080238 04480250 06480258     0...8...P.H.X.H.
   1f0ec:	08480260 0a480268 0c480270 0e480278     `.H.h.H.p.H.x.H.
   1f0fc:	04880290 06880298 088802a0 0a8802a8     ................
   1f10c:	0c8802b0 0e8802b8 04c802d0 06c802d8     ................
   1f11c:	08c802e0 0ac802e8 0cc802f0 0ec802f8     ................
   1f12c:	05080310 07080318 09080320 0b080328     ........ ...(...
   1f13c:	0d080330 0f080338 05480350 07480358     0...8...P.H.X.H.
   1f14c:	09480360 0b480368 0d480370 0f480378     `.H.h.H.p.H.x.H.
   1f15c:	05880390 07880398 098803a0 0b8803a8     ................
   1f16c:	0d8803b0 0f8803b8 05c803d0 07c803d8     ................
   1f17c:	09c803e0 0bc803e8 0dc803f0 0fc803f8     ................
   1f18c:	06100418 08100420 0a100428 0c100430     .... ...(...0...
   1f19c:	0e100438 06500458 08500460 0a500468     8...X.P.`.P.h.P.
   1f1ac:	0c500470 0e500478 06900498 089004a0     p.P.x.P.........
   1f1bc:	0a9004a8 0c9004b0 0e9004b8 06d004d8     ................
   1f1cc:	08d004e0 0ad004e8 0cd004f0 0ed004f8     ................
   1f1dc:	07100518 09100520 0b100528 0d100530     .... ...(...0...
   1f1ec:	0f100538 07500558 09500560 0b500568     8...X.P.`.P.h.P.
   1f1fc:	0d500570 0f500578 07900598 099005a0     p.P.x.P.........
   1f20c:	0b9005a8 0d9005b0 0f9005b8 07d005d8     ................
   1f21c:	09d005e0 0bd005e8 0dd005f0 0fd005f8     ................
   1f22c:	08180620 0a180628 0c180630 0e180638      ...(...0...8...
   1f23c:	08580660 0a580668 0c580670 0e580678     `.X.h.X.p.X.x.X.
   1f24c:	089806a0 0a9806a8 0c9806b0 0e9806b8     ................
   1f25c:	08d806e0 0ad806e8 0cd806f0 0ed806f8     ................
   1f26c:	09180720 0b180728 0d180730 0f180738      ...(...0...8...
   1f27c:	09580760 0b580768 0d580770 0f580778     `.X.h.X.p.X.x.X.
   1f28c:	099807a0 0b9807a8 0d9807b0 0f9807b8     ................
   1f29c:	09d807e0 0bd807e8 0dd807f0 0fd807f8     ................
   1f2ac:	0a200828 0c200830 0e200838 0a600868     (. .0. .8. .h.`.
   1f2bc:	0c600870 0e600878 0aa008a8 0ca008b0     p.`.x.`.........
   1f2cc:	0ea008b8 0ae008e8 0ce008f0 0ee008f8     ................
   1f2dc:	0b200928 0d200930 0f200938 0b600968     (. .0. .8. .h.`.
   1f2ec:	0d600970 0f600978 0ba009a8 0da009b0     p.`.x.`.........
   1f2fc:	0fa009b8 0be009e8 0de009f0 0fe009f8     ................
   1f30c:	0c280a30 0e280a38 0c680a70 0e680a78     0.(.8.(.p.h.x.h.
   1f31c:	0ca80ab0 0ea80ab8 0ce80af0 0ee80af8     ................
   1f32c:	0d280b30 0f280b38 0d680b70 0f680b78     0.(.8.(.p.h.x.h.
   1f33c:	0da80bb0 0fa80bb8 0de80bf0 0fe80bf8     ................
   1f34c:	0e300c38 0e700c78 0eb00cb8 0ef00cf8     8.0.x.p.........
   1f35c:	0f300d38 0f700d78 0fb00db8 0ff00df8     8.0.x.p.........

0001f36c <twiddleCoef_rfft_1024>:
   1f36c:	00000000 3f800000 3bc90f89 3f7ffec4     .......?...;...?
   1f37c:	3c490e90 3f7ffb11 3c96c9b6 3f7ff4e6     ..I<...?...<...?
   1f38c:	3cc90ab0 3f7fec43 3cfb49b9 3f7fe129     ...<C..?.I.<)..?
   1f39c:	3d16c32c 3f7fd398 3d2fe007 3f7fc38f     ,..=...?../=...?
   1f3ac:	3d48fb2f 3f7fb10f 3d621468 3f7f9c18     /.H=...?h.b=...?
   1f3bc:	3d7b2b74 3f7f84ab 3d8a200a 3f7f6ac7     t+{=...?. .=.j.?
   1f3cc:	3d96a905 3f7f4e6d 3da3308c 3f7f2f9d     ...=mN.?.0.=./.?
   1f3dc:	3dafb680 3f7f0e58 3dbc3ac3 3f7eea9d     ...=X..?.:.=..~?
   1f3ec:	3dc8bd36 3f7ec46d 3dd53db9 3f7e9bc9     6..=m.~?.=.=..~?
   1f3fc:	3de1bc2e 3f7e70b0 3dee3876 3f7e4323     ...=.p~?v8.=#C~?
   1f40c:	3dfab273 3f7e1324 3e039502 3f7de0b1     s..=$.~?...>..}?
   1f41c:	3e09cf86 3f7dabcc 3e1008b7 3f7d7474     ...>..}?...>tt}?
   1f42c:	3e164083 3f7d3aac 3e1c76de 3f7cfe73     .@.>.:}?.v.>s.|?
   1f43c:	3e22abb6 3f7cbfc9 3e28defc 3f7c7eb0     ..">..|?..(>.~|?
   1f44c:	3e2f10a2 3f7c3b28 3e354098 3f7bf531     ../>(;|?.@5>1.{?
   1f45c:	3e3b6ecf 3f7baccd 3e419b37 3f7b61fc     .n;>..{?7.A>.a{?
   1f46c:	3e47c5c2 3f7b14be 3e4dee60 3f7ac516     ..G>..{?`.M>..z?
   1f47c:	3e541501 3f7a7302 3e5a3997 3f7a1e84     ..T>.sz?.9Z>..z?
   1f48c:	3e605c13 3f79c79d 3e667c66 3f796e4e     .\`>..y?f|f>Nny?
   1f49c:	3e6c9a7f 3f791298 3e72b651 3f78b47b     ..l>..y?Q.r>{.x?
   1f4ac:	3e78cfcc 3f7853f8 3e7ee6e1 3f77f110     ..x>.Sx?..~>..w?
   1f4bc:	3e827dc0 3f778bc5 3e8586ce 3f772417     .}.>..w?...>.$w?
   1f4cc:	3e888e93 3f76ba07 3e8b9507 3f764d97     ...>..v?...>.Mv?
   1f4dc:	3e8e9a22 3f75dec6 3e919ddd 3f756d97     "..>..u?...>.mu?
   1f4ec:	3e94a031 3f74fa0b 3e97a117 3f748422     1..>..t?...>".t?
   1f4fc:	3e9aa086 3f740bdd 3e9d9e78 3f73913f     ...>..t?x..>?.s?
   1f50c:	3ea09ae5 3f731447 3ea395c5 3f7294f8     ...>G.s?...>..r?
   1f51c:	3ea68f12 3f721352 3ea986c4 3f718f57     ...>R.r?...>W.q?
   1f52c:	3eac7cd4 3f710908 3eaf713a 3f708066     .|.>..q?:q.>f.p?
   1f53c:	3eb263ef 3f6ff573 3eb554ec 3f6f6830     .c.>s.o?.T.>0ho?
   1f54c:	3eb8442a 3f6ed89e 3ebb31a0 3f6e46be     *D.>..n?.1.>.Fn?
   1f55c:	3ebe1d4a 3f6db293 3ec1071e 3f6d1c1d     J..>..m?...>..m?
   1f56c:	3ec3ef15 3f6c835e 3ec6d529 3f6be858     ...>^.l?)..>X.k?
   1f57c:	3ec9b953 3f6b4b0c 3ecc9b8b 3f6aab7b     S..>.Kk?...>{.j?
   1f58c:	3ecf7bca 3f6a09a7 3ed25a09 3f696591     .{.>..j?.Z.>.ei?
   1f59c:	3ed53641 3f68bf3c 3ed8106b 3f6816a8     A6.><.h?k..>..h?
   1f5ac:	3edae880 3f676bd8 3eddbe79 3f66becc     ...>.kg?y..>..f?
   1f5bc:	3ee0924f 3f660f88 3ee363fa 3f655e0b     O..>..f?.c.>.^e?
   1f5cc:	3ee63375 3f64aa59 3ee900b7 3f63f473     u3.>Y.d?...>s.c?
   1f5dc:	3eebcbbb 3f633c5a 3eee9479 3f628210     ...>Z<c?y..>..b?
   1f5ec:	3ef15aea 3f61c598 3ef41f07 3f6106f2     .Z.>..a?...>..a?
   1f5fc:	3ef6e0cb 3f604621 3ef9a02d 3f5f8327     ...>!F`?-..>'._?
   1f60c:	3efc5d27 3f5ebe05 3eff17b2 3f5df6be     '].>..^?...>..]?
   1f61c:	3f00e7e4 3f5d2d53 3f0242b1 3f5c61c7     ...?S-]?.B.?.a\?
   1f62c:	3f039c3d 3f5b941a 3f04f484 3f5ac450     =..?..[?...?P.Z?
   1f63c:	3f064b82 3f59f26a 3f07a136 3f591e6a     .K.?j.Y?6..?j.Y?
   1f64c:	3f08f59b 3f584853 3f0a48ad 3f577026     ...?SHX?.H.?&pW?
   1f65c:	3f0b9a6b 3f5695e5 3f0cead0 3f55b993     k..?..V?...?..U?
   1f66c:	3f0e39da 3f54db31 3f0f8784 3f53fac3     .9.?1.T?...?..S?
   1f67c:	3f10d3cd 3f531849 3f121eb0 3f5233c6     ...?I.S?...?.3R?
   1f68c:	3f13682a 3f514d3d 3f14b039 3f5064af     *h.?=MQ?9..?.dP?
   1f69c:	3f15f6d9 3f4f7a1f 3f173c07 3f4e8d90     ...?.zO?.<.?..N?
   1f6ac:	3f187fc0 3f4d9f02 3f19c200 3f4cae79     ...?..M?...?y.L?
   1f6bc:	3f1b02c6 3f4bbbf8 3f1c420c 3f4ac77f     ...?..K?.B.?..J?
   1f6cc:	3f1d7fd1 3f49d112 3f1ebc12 3f48d8b3     ...?..I?...?..H?
   1f6dc:	3f1ff6cb 3f47de65 3f212ff9 3f46e22a     ...?e.G?./!?*.F?
   1f6ec:	3f226799 3f45e403 3f239da9 3f44e3f5     .g"?..E?..#?..D?
   1f6fc:	3f24d225 3f43e200 3f26050a 3f42de29     %.$?..C?..&?).B?
   1f70c:	3f273656 3f41d870 3f286605 3f40d0da     V6'?p.A?.f(?..@?
   1f71c:	3f299415 3f3fc767 3f2ac082 3f3ebc1b     ..)?g.??..*?..>?
   1f72c:	3f2beb4a 3f3daef9 3f2d1469 3f3ca003     J.+?..=?i.-?..<?
   1f73c:	3f2e3bde 3f3b8f3b 3f2f61a5 3f3a7ca4     .;.?;.;?.a/?.|:?
   1f74c:	3f3085bb 3f396842 3f31a81d 3f385216     ..0?Bh9?..1?.R8?
   1f75c:	3f32c8c9 3f373a23 3f33e7bc 3f36206c     ..2?#:7?..3?l 6?
   1f76c:	3f3504f3 3f3504f3 3f36206c 3f33e7bc     ..5?..5?l 6?..3?
   1f77c:	3f373a23 3f32c8c9 3f385216 3f31a81d     #:7?..2?.R8?..1?
   1f78c:	3f396842 3f3085bb 3f3a7ca4 3f2f61a5     Bh9?..0?.|:?.a/?
   1f79c:	3f3b8f3b 3f2e3bde 3f3ca003 3f2d1469     ;.;?.;.?..<?i.-?
   1f7ac:	3f3daef9 3f2beb4a 3f3ebc1b 3f2ac082     ..=?J.+?..>?..*?
   1f7bc:	3f3fc767 3f299415 3f40d0da 3f286605     g.??..)?..@?.f(?
   1f7cc:	3f41d870 3f273656 3f42de29 3f26050a     p.A?V6'?).B?..&?
   1f7dc:	3f43e200 3f24d225 3f44e3f5 3f239da9     ..C?%.$?..D?..#?
   1f7ec:	3f45e403 3f226799 3f46e22a 3f212ff9     ..E?.g"?*.F?./!?
   1f7fc:	3f47de65 3f1ff6cb 3f48d8b3 3f1ebc12     e.G?...?..H?...?
   1f80c:	3f49d112 3f1d7fd1 3f4ac77f 3f1c420c     ..I?...?..J?.B.?
   1f81c:	3f4bbbf8 3f1b02c6 3f4cae79 3f19c200     ..K?...?y.L?...?
   1f82c:	3f4d9f02 3f187fc0 3f4e8d90 3f173c07     ..M?...?..N?.<.?
   1f83c:	3f4f7a1f 3f15f6d9 3f5064af 3f14b039     .zO?...?.dP?9..?
   1f84c:	3f514d3d 3f13682a 3f5233c6 3f121eb0     =MQ?*h.?.3R?...?
   1f85c:	3f531849 3f10d3cd 3f53fac3 3f0f8784     I.S?...?..S?...?
   1f86c:	3f54db31 3f0e39da 3f55b993 3f0cead0     1.T?.9.?..U?...?
   1f87c:	3f5695e5 3f0b9a6b 3f577026 3f0a48ad     ..V?k..?&pW?.H.?
   1f88c:	3f584853 3f08f59b 3f591e6a 3f07a136     SHX?...?j.Y?6..?
   1f89c:	3f59f26a 3f064b82 3f5ac450 3f04f484     j.Y?.K.?P.Z?...?
   1f8ac:	3f5b941a 3f039c3d 3f5c61c7 3f0242b1     ..[?=..?.a\?.B.?
   1f8bc:	3f5d2d53 3f00e7e4 3f5df6be 3eff17b2     S-]?...?..]?...>
   1f8cc:	3f5ebe05 3efc5d27 3f5f8327 3ef9a02d     ..^?'].>'._?-..>
   1f8dc:	3f604621 3ef6e0cb 3f6106f2 3ef41f07     !F`?...>..a?...>
   1f8ec:	3f61c598 3ef15aea 3f628210 3eee9479     ..a?.Z.>..b?y..>
   1f8fc:	3f633c5a 3eebcbbb 3f63f473 3ee900b7     Z<c?...>s.c?...>
   1f90c:	3f64aa59 3ee63375 3f655e0b 3ee363fa     Y.d?u3.>.^e?.c.>
   1f91c:	3f660f88 3ee0924f 3f66becc 3eddbe79     ..f?O..>..f?y..>
   1f92c:	3f676bd8 3edae880 3f6816a8 3ed8106b     .kg?...>..h?k..>
   1f93c:	3f68bf3c 3ed53641 3f696591 3ed25a09     <.h?A6.>.ei?.Z.>
   1f94c:	3f6a09a7 3ecf7bca 3f6aab7b 3ecc9b8b     ..j?.{.>{.j?...>
   1f95c:	3f6b4b0c 3ec9b953 3f6be858 3ec6d529     .Kk?S..>X.k?)..>
   1f96c:	3f6c835e 3ec3ef15 3f6d1c1d 3ec1071e     ^.l?...>..m?...>
   1f97c:	3f6db293 3ebe1d4a 3f6e46be 3ebb31a0     ..m?J..>.Fn?.1.>
   1f98c:	3f6ed89e 3eb8442a 3f6f6830 3eb554ec     ..n?*D.>0ho?.T.>
   1f99c:	3f6ff573 3eb263ef 3f708066 3eaf713a     s.o?.c.>f.p?:q.>
   1f9ac:	3f710908 3eac7cd4 3f718f57 3ea986c4     ..q?.|.>W.q?...>
   1f9bc:	3f721352 3ea68f12 3f7294f8 3ea395c5     R.r?...>..r?...>
   1f9cc:	3f731447 3ea09ae5 3f73913f 3e9d9e78     G.s?...>?.s?x..>
   1f9dc:	3f740bdd 3e9aa086 3f748422 3e97a117     ..t?...>".t?...>
   1f9ec:	3f74fa0b 3e94a031 3f756d97 3e919ddd     ..t?1..>.mu?...>
   1f9fc:	3f75dec6 3e8e9a22 3f764d97 3e8b9507     ..u?"..>.Mv?...>
   1fa0c:	3f76ba07 3e888e93 3f772417 3e8586ce     ..v?...>.$w?...>
   1fa1c:	3f778bc5 3e827dc0 3f77f110 3e7ee6e1     ..w?.}.>..w?..~>
   1fa2c:	3f7853f8 3e78cfcc 3f78b47b 3e72b651     .Sx?..x>{.x?Q.r>
   1fa3c:	3f791298 3e6c9a7f 3f796e4e 3e667c66     ..y?..l>Nny?f|f>
   1fa4c:	3f79c79d 3e605c13 3f7a1e84 3e5a3997     ..y?.\`>..z?.9Z>
   1fa5c:	3f7a7302 3e541501 3f7ac516 3e4dee60     .sz?..T>..z?`.M>
   1fa6c:	3f7b14be 3e47c5c2 3f7b61fc 3e419b37     ..{?..G>.a{?7.A>
   1fa7c:	3f7baccd 3e3b6ecf 3f7bf531 3e354098     ..{?.n;>1.{?.@5>
   1fa8c:	3f7c3b28 3e2f10a2 3f7c7eb0 3e28defc     (;|?../>.~|?..(>
   1fa9c:	3f7cbfc9 3e22abb6 3f7cfe73 3e1c76de     ..|?..">s.|?.v.>
   1faac:	3f7d3aac 3e164083 3f7d7474 3e1008b7     .:}?.@.>tt}?...>
   1fabc:	3f7dabcc 3e09cf86 3f7de0b1 3e039502     ..}?...>..}?...>
   1facc:	3f7e1324 3dfab273 3f7e4323 3dee3876     $.~?s..=#C~?v8.=
   1fadc:	3f7e70b0 3de1bc2e 3f7e9bc9 3dd53db9     .p~?...=..~?.=.=
   1faec:	3f7ec46d 3dc8bd36 3f7eea9d 3dbc3ac3     m.~?6..=..~?.:.=
   1fafc:	3f7f0e58 3dafb680 3f7f2f9d 3da3308c     X..?...=./.?.0.=
   1fb0c:	3f7f4e6d 3d96a905 3f7f6ac7 3d8a200a     mN.?...=.j.?. .=
   1fb1c:	3f7f84ab 3d7b2b74 3f7f9c18 3d621468     ...?t+{=...?h.b=
   1fb2c:	3f7fb10f 3d48fb2f 3f7fc38f 3d2fe007     ...?/.H=...?../=
   1fb3c:	3f7fd398 3d16c32c 3f7fe129 3cfb49b9     ...?,..=)..?.I.<
   1fb4c:	3f7fec43 3cc90ab0 3f7ff4e6 3c96c9b6     C..?...<...?...<
   1fb5c:	3f7ffb11 3c490e90 3f7ffec4 3bc90f89     ...?..I<...?...;
   1fb6c:	3f800000 00000000 3f7ffec4 bbc90f89     ...?.......?....
   1fb7c:	3f7ffb11 bc490e90 3f7ff4e6 bc96c9b6     ...?..I....?....
   1fb8c:	3f7fec43 bcc90ab0 3f7fe129 bcfb49b9     C..?....)..?.I..
   1fb9c:	3f7fd398 bd16c32c 3f7fc38f bd2fe007     ...?,......?../.
   1fbac:	3f7fb10f bd48fb2f 3f7f9c18 bd621468     ...?/.H....?h.b.
   1fbbc:	3f7f84ab bd7b2b74 3f7f6ac7 bd8a200a     ...?t+{..j.?. ..
   1fbcc:	3f7f4e6d bd96a905 3f7f2f9d bda3308c     mN.?...../.?.0..
   1fbdc:	3f7f0e58 bdafb680 3f7eea9d bdbc3ac3     X..?......~?.:..
   1fbec:	3f7ec46d bdc8bd36 3f7e9bc9 bdd53db9     m.~?6.....~?.=..
   1fbfc:	3f7e70b0 bde1bc2e 3f7e4323 bdee3876     .p~?....#C~?v8..
   1fc0c:	3f7e1324 bdfab273 3f7de0b1 be039502     $.~?s.....}?....
   1fc1c:	3f7dabcc be09cf86 3f7d7474 be1008b7     ..}?....tt}?....
   1fc2c:	3f7d3aac be164083 3f7cfe73 be1c76de     .:}?.@..s.|?.v..
   1fc3c:	3f7cbfc9 be22abb6 3f7c7eb0 be28defc     ..|?.."..~|?..(.
   1fc4c:	3f7c3b28 be2f10a2 3f7bf531 be354098     (;|?../.1.{?.@5.
   1fc5c:	3f7baccd be3b6ecf 3f7b61fc be419b37     ..{?.n;..a{?7.A.
   1fc6c:	3f7b14be be47c5c2 3f7ac516 be4dee60     ..{?..G...z?`.M.
   1fc7c:	3f7a7302 be541501 3f7a1e84 be5a3997     .sz?..T...z?.9Z.
   1fc8c:	3f79c79d be605c13 3f796e4e be667c66     ..y?.\`.Nny?f|f.
   1fc9c:	3f791298 be6c9a7f 3f78b47b be72b651     ..y?..l.{.x?Q.r.
   1fcac:	3f7853f8 be78cfcc 3f77f110 be7ee6e1     .Sx?..x...w?..~.
   1fcbc:	3f778bc5 be827dc0 3f772417 be8586ce     ..w?.}...$w?....
   1fccc:	3f76ba07 be888e93 3f764d97 be8b9507     ..v?.....Mv?....
   1fcdc:	3f75dec6 be8e9a22 3f756d97 be919ddd     ..u?"....mu?....
   1fcec:	3f74fa0b be94a031 3f748422 be97a117     ..t?1...".t?....
   1fcfc:	3f740bdd be9aa086 3f73913f be9d9e78     ..t?....?.s?x...
   1fd0c:	3f731447 bea09ae5 3f7294f8 bea395c5     G.s?......r?....
   1fd1c:	3f721352 bea68f12 3f718f57 bea986c4     R.r?....W.q?....
   1fd2c:	3f710908 beac7cd4 3f708066 beaf713a     ..q?.|..f.p?:q..
   1fd3c:	3f6ff573 beb263ef 3f6f6830 beb554ec     s.o?.c..0ho?.T..
   1fd4c:	3f6ed89e beb8442a 3f6e46be bebb31a0     ..n?*D...Fn?.1..
   1fd5c:	3f6db293 bebe1d4a 3f6d1c1d bec1071e     ..m?J.....m?....
   1fd6c:	3f6c835e bec3ef15 3f6be858 bec6d529     ^.l?....X.k?)...
   1fd7c:	3f6b4b0c bec9b953 3f6aab7b becc9b8b     .Kk?S...{.j?....
   1fd8c:	3f6a09a7 becf7bca 3f696591 bed25a09     ..j?.{...ei?.Z..
   1fd9c:	3f68bf3c bed53641 3f6816a8 bed8106b     <.h?A6....h?k...
   1fdac:	3f676bd8 bedae880 3f66becc beddbe79     .kg?......f?y...
   1fdbc:	3f660f88 bee0924f 3f655e0b bee363fa     ..f?O....^e?.c..
   1fdcc:	3f64aa59 bee63375 3f63f473 bee900b7     Y.d?u3..s.c?....
   1fddc:	3f633c5a beebcbbb 3f628210 beee9479     Z<c?......b?y...
   1fdec:	3f61c598 bef15aea 3f6106f2 bef41f07     ..a?.Z....a?....
   1fdfc:	3f604621 bef6e0cb 3f5f8327 bef9a02d     !F`?....'._?-...
   1fe0c:	3f5ebe05 befc5d27 3f5df6be beff17b2     ..^?']....]?....
   1fe1c:	3f5d2d53 bf00e7e4 3f5c61c7 bf0242b1     S-]?.....a\?.B..
   1fe2c:	3f5b941a bf039c3d 3f5ac450 bf04f484     ..[?=...P.Z?....
   1fe3c:	3f59f26a bf064b82 3f591e6a bf07a136     j.Y?.K..j.Y?6...
   1fe4c:	3f584853 bf08f59b 3f577026 bf0a48ad     SHX?....&pW?.H..
   1fe5c:	3f5695e5 bf0b9a6b 3f55b993 bf0cead0     ..V?k.....U?....
   1fe6c:	3f54db31 bf0e39da 3f53fac3 bf0f8784     1.T?.9....S?....
   1fe7c:	3f531849 bf10d3cd 3f5233c6 bf121eb0     I.S?.....3R?....
   1fe8c:	3f514d3d bf13682a 3f5064af bf14b039     =MQ?*h...dP?9...
   1fe9c:	3f4f7a1f bf15f6d9 3f4e8d90 bf173c07     .zO?......N?.<..
   1feac:	3f4d9f02 bf187fc0 3f4cae79 bf19c200     ..M?....y.L?....
   1febc:	3f4bbbf8 bf1b02c6 3f4ac77f bf1c420c     ..K?......J?.B..
   1fecc:	3f49d112 bf1d7fd1 3f48d8b3 bf1ebc12     ..I?......H?....
   1fedc:	3f47de65 bf1ff6cb 3f46e22a bf212ff9     e.G?....*.F?./!.
   1feec:	3f45e403 bf226799 3f44e3f5 bf239da9     ..E?.g"...D?..#.
   1fefc:	3f43e200 bf24d225 3f42de29 bf26050a     ..C?%.$.).B?..&.
   1ff0c:	3f41d870 bf273656 3f40d0da bf286605     p.A?V6'...@?.f(.
   1ff1c:	3f3fc767 bf299415 3f3ebc1b bf2ac082     g.??..)...>?..*.
   1ff2c:	3f3daef9 bf2beb4a 3f3ca003 bf2d1469     ..=?J.+...<?i.-.
   1ff3c:	3f3b8f3b bf2e3bde 3f3a7ca4 bf2f61a5     ;.;?.;...|:?.a/.
   1ff4c:	3f396842 bf3085bb 3f385216 bf31a81d     Bh9?..0..R8?..1.
   1ff5c:	3f373a23 bf32c8c9 3f36206c bf33e7bc     #:7?..2.l 6?..3.
   1ff6c:	3f3504f3 bf3504f3 3f33e7bc bf36206c     ..5?..5...3?l 6.
   1ff7c:	3f32c8c9 bf373a23 3f31a81d bf385216     ..2?#:7...1?.R8.
   1ff8c:	3f3085bb bf396842 3f2f61a5 bf3a7ca4     ..0?Bh9..a/?.|:.
   1ff9c:	3f2e3bde bf3b8f3b 3f2d1469 bf3ca003     .;.?;.;.i.-?..<.
   1ffac:	3f2beb4a bf3daef9 3f2ac082 bf3ebc1b     J.+?..=...*?..>.
   1ffbc:	3f299415 bf3fc767 3f286605 bf40d0da     ..)?g.?..f(?..@.
   1ffcc:	3f273656 bf41d870 3f26050a bf42de29     V6'?p.A...&?).B.
   1ffdc:	3f24d225 bf43e200 3f239da9 bf44e3f5     %.$?..C...#?..D.
   1ffec:	3f226799 bf45e403 3f212ff9 bf46e22a     .g"?..E../!?*.F.
   1fffc:	3f1ff6cb bf47de65 3f1ebc12 bf48d8b3     ...?e.G....?..H.
   2000c:	3f1d7fd1 bf49d112 3f1c420c bf4ac77f     ...?..I..B.?..J.
   2001c:	3f1b02c6 bf4bbbf8 3f19c200 bf4cae79     ...?..K....?y.L.
   2002c:	3f187fc0 bf4d9f02 3f173c07 bf4e8d90     ...?..M..<.?..N.
   2003c:	3f15f6d9 bf4f7a1f 3f14b039 bf5064af     ...?.zO.9..?.dP.
   2004c:	3f13682a bf514d3d 3f121eb0 bf5233c6     *h.?=MQ....?.3R.
   2005c:	3f10d3cd bf531849 3f0f8784 bf53fac3     ...?I.S....?..S.
   2006c:	3f0e39da bf54db31 3f0cead0 bf55b993     .9.?1.T....?..U.
   2007c:	3f0b9a6b bf5695e5 3f0a48ad bf577026     k..?..V..H.?&pW.
   2008c:	3f08f59b bf584853 3f07a136 bf591e6a     ...?SHX.6..?j.Y.
   2009c:	3f064b82 bf59f26a 3f04f484 bf5ac450     .K.?j.Y....?P.Z.
   200ac:	3f039c3d bf5b941a 3f0242b1 bf5c61c7     =..?..[..B.?.a\.
   200bc:	3f00e7e4 bf5d2d53 3eff17b2 bf5df6be     ...?S-]....>..].
   200cc:	3efc5d27 bf5ebe05 3ef9a02d bf5f8327     '].>..^.-..>'._.
   200dc:	3ef6e0cb bf604621 3ef41f07 bf6106f2     ...>!F`....>..a.
   200ec:	3ef15aea bf61c598 3eee9479 bf628210     .Z.>..a.y..>..b.
   200fc:	3eebcbbb bf633c5a 3ee900b7 bf63f473     ...>Z<c....>s.c.
   2010c:	3ee63375 bf64aa59 3ee363fa bf655e0b     u3.>Y.d..c.>.^e.
   2011c:	3ee0924f bf660f88 3eddbe79 bf66becc     O..>..f.y..>..f.
   2012c:	3edae880 bf676bd8 3ed8106b bf6816a8     ...>.kg.k..>..h.
   2013c:	3ed53641 bf68bf3c 3ed25a09 bf696591     A6.><.h..Z.>.ei.
   2014c:	3ecf7bca bf6a09a7 3ecc9b8b bf6aab7b     .{.>..j....>{.j.
   2015c:	3ec9b953 bf6b4b0c 3ec6d529 bf6be858     S..>.Kk.)..>X.k.
   2016c:	3ec3ef15 bf6c835e 3ec1071e bf6d1c1d     ...>^.l....>..m.
   2017c:	3ebe1d4a bf6db293 3ebb31a0 bf6e46be     J..>..m..1.>.Fn.
   2018c:	3eb8442a bf6ed89e 3eb554ec bf6f6830     *D.>..n..T.>0ho.
   2019c:	3eb263ef bf6ff573 3eaf713a bf708066     .c.>s.o.:q.>f.p.
   201ac:	3eac7cd4 bf710908 3ea986c4 bf718f57     .|.>..q....>W.q.
   201bc:	3ea68f12 bf721352 3ea395c5 bf7294f8     ...>R.r....>..r.
   201cc:	3ea09ae5 bf731447 3e9d9e78 bf73913f     ...>G.s.x..>?.s.
   201dc:	3e9aa086 bf740bdd 3e97a117 bf748422     ...>..t....>".t.
   201ec:	3e94a031 bf74fa0b 3e919ddd bf756d97     1..>..t....>.mu.
   201fc:	3e8e9a22 bf75dec6 3e8b9507 bf764d97     "..>..u....>.Mv.
   2020c:	3e888e93 bf76ba07 3e8586ce bf772417     ...>..v....>.$w.
   2021c:	3e827dc0 bf778bc5 3e7ee6e1 bf77f110     .}.>..w...~>..w.
   2022c:	3e78cfcc bf7853f8 3e72b651 bf78b47b     ..x>.Sx.Q.r>{.x.
   2023c:	3e6c9a7f bf791298 3e667c66 bf796e4e     ..l>..y.f|f>Nny.
   2024c:	3e605c13 bf79c79d 3e5a3997 bf7a1e84     .\`>..y..9Z>..z.
   2025c:	3e541501 bf7a7302 3e4dee60 bf7ac516     ..T>.sz.`.M>..z.
   2026c:	3e47c5c2 bf7b14be 3e419b37 bf7b61fc     ..G>..{.7.A>.a{.
   2027c:	3e3b6ecf bf7baccd 3e354098 bf7bf531     .n;>..{..@5>1.{.
   2028c:	3e2f10a2 bf7c3b28 3e28defc bf7c7eb0     ../>(;|...(>.~|.
   2029c:	3e22abb6 bf7cbfc9 3e1c76de bf7cfe73     ..">..|..v.>s.|.
   202ac:	3e164083 bf7d3aac 3e1008b7 bf7d7474     .@.>.:}....>tt}.
   202bc:	3e09cf86 bf7dabcc 3e039502 bf7de0b1     ...>..}....>..}.
   202cc:	3dfab273 bf7e1324 3dee3876 bf7e4323     s..=$.~.v8.=#C~.
   202dc:	3de1bc2e bf7e70b0 3dd53db9 bf7e9bc9     ...=.p~..=.=..~.
   202ec:	3dc8bd36 bf7ec46d 3dbc3ac3 bf7eea9d     6..=m.~..:.=..~.
   202fc:	3dafb680 bf7f0e58 3da3308c bf7f2f9d     ...=X....0.=./..
   2030c:	3d96a905 bf7f4e6d 3d8a200a bf7f6ac7     ...=mN... .=.j..
   2031c:	3d7b2b74 bf7f84ab 3d621468 bf7f9c18     t+{=....h.b=....
   2032c:	3d48fb2f bf7fb10f 3d2fe007 bf7fc38f     /.H=....../=....
   2033c:	3d16c32c bf7fd398 3cfb49b9 bf7fe129     ,..=.....I.<)...
   2034c:	3cc90ab0 bf7fec43 3c96c9b6 bf7ff4e6     ...<C......<....
   2035c:	3c490e90 bf7ffb11 3bc90f89 bf7ffec4     ..I<.......;....

0002036c <twiddleCoef_rfft_256>:
   2036c:	00000000 3f800000 3cc90ab0 3f7fec43     .......?...<C..?
   2037c:	3d48fb2f 3f7fb10f 3d96a905 3f7f4e6d     /.H=...?...=mN.?
   2038c:	3dc8bd36 3f7ec46d 3dfab273 3f7e1324     6..=m.~?s..=$.~?
   2039c:	3e164083 3f7d3aac 3e2f10a2 3f7c3b28     .@.>.:}?../>(;|?
   203ac:	3e47c5c2 3f7b14be 3e605c13 3f79c79d     ..G>..{?.\`>..y?
   203bc:	3e78cfcc 3f7853f8 3e888e93 3f76ba07     ..x>.Sx?...>..v?
   203cc:	3e94a031 3f74fa0b 3ea09ae5 3f731447     1..>..t?...>G.s?
   203dc:	3eac7cd4 3f710908 3eb8442a 3f6ed89e     .|.>..q?*D.>..n?
   203ec:	3ec3ef15 3f6c835e 3ecf7bca 3f6a09a7     ...>^.l?.{.>..j?
   203fc:	3edae880 3f676bd8 3ee63375 3f64aa59     ...>.kg?u3.>Y.d?
   2040c:	3ef15aea 3f61c598 3efc5d27 3f5ebe05     .Z.>..a?'].>..^?
   2041c:	3f039c3d 3f5b941a 3f08f59b 3f584853     =..?..[?...?SHX?
   2042c:	3f0e39da 3f54db31 3f13682a 3f514d3d     .9.?1.T?*h.?=MQ?
   2043c:	3f187fc0 3f4d9f02 3f1d7fd1 3f49d112     ...?..M?...?..I?
   2044c:	3f226799 3f45e403 3f273656 3f41d870     .g"?..E?V6'?p.A?
   2045c:	3f2beb4a 3f3daef9 3f3085bb 3f396842     J.+?..=?..0?Bh9?
   2046c:	3f3504f3 3f3504f3 3f396842 3f3085bb     ..5?..5?Bh9?..0?
   2047c:	3f3daef9 3f2beb4a 3f41d870 3f273656     ..=?J.+?p.A?V6'?
   2048c:	3f45e403 3f226799 3f49d112 3f1d7fd1     ..E?.g"?..I?...?
   2049c:	3f4d9f02 3f187fc0 3f514d3d 3f13682a     ..M?...?=MQ?*h.?
   204ac:	3f54db31 3f0e39da 3f584853 3f08f59b     1.T?.9.?SHX?...?
   204bc:	3f5b941a 3f039c3d 3f5ebe05 3efc5d27     ..[?=..?..^?'].>
   204cc:	3f61c598 3ef15aea 3f64aa59 3ee63375     ..a?.Z.>Y.d?u3.>
   204dc:	3f676bd8 3edae880 3f6a09a7 3ecf7bca     .kg?...>..j?.{.>
   204ec:	3f6c835e 3ec3ef15 3f6ed89e 3eb8442a     ^.l?...>..n?*D.>
   204fc:	3f710908 3eac7cd4 3f731447 3ea09ae5     ..q?.|.>G.s?...>
   2050c:	3f74fa0b 3e94a031 3f76ba07 3e888e93     ..t?1..>..v?...>
   2051c:	3f7853f8 3e78cfcc 3f79c79d 3e605c13     .Sx?..x>..y?.\`>
   2052c:	3f7b14be 3e47c5c2 3f7c3b28 3e2f10a2     ..{?..G>(;|?../>
   2053c:	3f7d3aac 3e164083 3f7e1324 3dfab273     .:}?.@.>$.~?s..=
   2054c:	3f7ec46d 3dc8bd36 3f7f4e6d 3d96a905     m.~?6..=mN.?...=
   2055c:	3f7fb10f 3d48fb2f 3f7fec43 3cc90ab0     ...?/.H=C..?...<
   2056c:	3f800000 00000000 3f7fec43 bcc90ab0     ...?....C..?....
   2057c:	3f7fb10f bd48fb2f 3f7f4e6d bd96a905     ...?/.H.mN.?....
   2058c:	3f7ec46d bdc8bd36 3f7e1324 bdfab273     m.~?6...$.~?s...
   2059c:	3f7d3aac be164083 3f7c3b28 be2f10a2     .:}?.@..(;|?../.
   205ac:	3f7b14be be47c5c2 3f79c79d be605c13     ..{?..G...y?.\`.
   205bc:	3f7853f8 be78cfcc 3f76ba07 be888e93     .Sx?..x...v?....
   205cc:	3f74fa0b be94a031 3f731447 bea09ae5     ..t?1...G.s?....
   205dc:	3f710908 beac7cd4 3f6ed89e beb8442a     ..q?.|....n?*D..
   205ec:	3f6c835e bec3ef15 3f6a09a7 becf7bca     ^.l?......j?.{..
   205fc:	3f676bd8 bedae880 3f64aa59 bee63375     .kg?....Y.d?u3..
   2060c:	3f61c598 bef15aea 3f5ebe05 befc5d27     ..a?.Z....^?']..
   2061c:	3f5b941a bf039c3d 3f584853 bf08f59b     ..[?=...SHX?....
   2062c:	3f54db31 bf0e39da 3f514d3d bf13682a     1.T?.9..=MQ?*h..
   2063c:	3f4d9f02 bf187fc0 3f49d112 bf1d7fd1     ..M?......I?....
   2064c:	3f45e403 bf226799 3f41d870 bf273656     ..E?.g".p.A?V6'.
   2065c:	3f3daef9 bf2beb4a 3f396842 bf3085bb     ..=?J.+.Bh9?..0.
   2066c:	3f3504f3 bf3504f3 3f3085bb bf396842     ..5?..5...0?Bh9.
   2067c:	3f2beb4a bf3daef9 3f273656 bf41d870     J.+?..=.V6'?p.A.
   2068c:	3f226799 bf45e403 3f1d7fd1 bf49d112     .g"?..E....?..I.
   2069c:	3f187fc0 bf4d9f02 3f13682a bf514d3d     ...?..M.*h.?=MQ.
   206ac:	3f0e39da bf54db31 3f08f59b bf584853     .9.?1.T....?SHX.
   206bc:	3f039c3d bf5b941a 3efc5d27 bf5ebe05     =..?..[.'].>..^.
   206cc:	3ef15aea bf61c598 3ee63375 bf64aa59     .Z.>..a.u3.>Y.d.
   206dc:	3edae880 bf676bd8 3ecf7bca bf6a09a7     ...>.kg..{.>..j.
   206ec:	3ec3ef15 bf6c835e 3eb8442a bf6ed89e     ...>^.l.*D.>..n.
   206fc:	3eac7cd4 bf710908 3ea09ae5 bf731447     .|.>..q....>G.s.
   2070c:	3e94a031 bf74fa0b 3e888e93 bf76ba07     1..>..t....>..v.
   2071c:	3e78cfcc bf7853f8 3e605c13 bf79c79d     ..x>.Sx..\`>..y.
   2072c:	3e47c5c2 bf7b14be 3e2f10a2 bf7c3b28     ..G>..{.../>(;|.
   2073c:	3e164083 bf7d3aac 3dfab273 bf7e1324     .@.>.:}.s..=$.~.
   2074c:	3dc8bd36 bf7ec46d 3d96a905 bf7f4e6d     6..=m.~....=mN..
   2075c:	3d48fb2f bf7fb10f 3cc90ab0 bf7fec43     /.H=.......<C...

0002076c <armBitRevIndexTable256>:
   2076c:	02000008 04000010 06000018 00400020     ............ .@.
   2077c:	02400028 04400030 06400038 00800040     (.@.0.@.8.@.@...
   2078c:	02800048 04800050 06800058 00c00060     H...P...X...`...
   2079c:	02c00068 04c00070 06c00078 01000080     h...p...x.......
   207ac:	03000088 05000090 07000098 014000a0     ..............@.
   207bc:	034000a8 054000b0 074000b8 018000c0     ..@...@...@.....
   207cc:	038000c8 058000d0 078000d8 01c000e0     ................
   207dc:	03c000e8 05c000f0 07c000f8 02000100     ................
   207ec:	02080108 04080110 06080118 02800120     ............ ...
   207fc:	02480128 04480130 06480138 03000140     (.H.0.H.8.H.@...
   2080c:	02880148 04880150 06880158 03800160     H...P...X...`...
   2081c:	02c80168 04c80170 06c80178 02080180     h...p...x.......
   2082c:	03080188 05080190 07080198 028801a0     ................
   2083c:	034801a8 054801b0 074801b8 030801c0     ..H...H...H.....
   2084c:	038801c8 058801d0 078801d8 038801e0     ................
   2085c:	03c801e8 05c801f0 07c801f8 02100208     ................
   2086c:	04000200 04100210 06100218 04800220     ............ ...
   2087c:	02500228 04500230 06500238 05000240     (.P.0.P.8.P.@...
   2088c:	02900248 04900250 06900258 05800260     H...P...X...`...
   2089c:	02d00268 04d00270 06d00278 04080280     h...p...x.......
   208ac:	03100288 05100290 07100298 048802a0     ................
   208bc:	035002a8 055002b0 075002b8 050802c0     ..P...P...P.....
   208cc:	039002c8 059002d0 079002d8 058802e0     ................
   208dc:	03d002e8 05d002f0 07d002f8 06000300     ................
   208ec:	06100308 04180310 06180318 06800320     ............ ...
   208fc:	06900328 04580330 06580338 07000340     (...0.X.8.X.@...
   2090c:	07100348 04980350 06980358 07800360     H...P...X...`...
   2091c:	07900368 04d80370 06d80378 06080380     h...p...x.......
   2092c:	06180388 05180390 07180398 068803a0     ................
   2093c:	069803a8 055803b0 075803b8 070803c0     ......X...X.....
   2094c:	071803c8 059803d0 079803d8 078803e0     ................
   2095c:	079803e8 05d803f0 07d803f8 04800408     ................
   2096c:	04200410 06200418 05800428 04600430     .. ... .(...0.`.
   2097c:	06600438 06000440 04880448 04a00450     8.`.@...H...P...
   2098c:	06a00458 06100460 05880468 04e00470     X...`...h...p...
   2099c:	06e00478 06800488 05200490 07200498     x......... ... .
   209ac:	060804a0 078004a8 056004b0 076004b8     ..........`...`.
   209bc:	062004c0 068804c8 05a004d0 07a004d8     .. .............
   209cc:	061804e0 078804e8 05e004f0 07e004f8     ................
   209dc:	05200508 05800510 06280518 05900528     .. .......(.(...
   209ec:	05880530 06680538 07000540 07200548     0...8.h.@...H. .
   209fc:	07800550 06a80558 07080560 05980568     P...X...`...h...
   20a0c:	07880570 06e80578 06900588 07280598     p...x.........(.
   20a1c:	062805a0 079005a8 072805b0 076805b8     ..(.......(...h.
   20a2c:	071005c0 069805c8 079005d0 07a805d8     ................
   20a3c:	071805e0 079805e8 079805f0 07e805f8     ................
   20a4c:	06300618 06700638 07000640 07800648     ..0.8.p.@...H...
   20a5c:	07080650 06b00658 07100660 07900668     P...X...`...h...
   20a6c:	07180670 06f00678 06a00688 07300698     p...x.........0.
   20a7c:	07a006a8 078806b0 077006b8 072006c0     ..........p... .
   20a8c:	07a006c8 072806d0 07b006d8 073006e0     ......(.......0.
   20a9c:	07a806e8 079806f0 07f006f8 07500748     ............H.P.
   20aac:	07980738 07600750 07700758 07c00760     8...P.`.X.p.`...
   20abc:	07d00768 07f00778 07e00770 07f007b8     h...x...p.......
   20acc:	07b007a8 07f007d8 07e007c8 07f007e8     ................

00020adc <twiddleCoef_rfft_128>:
   20adc:	00000000 3f800000 3d48fb2f 3f7fb10f     .......?/.H=...?
   20aec:	3dc8bd36 3f7ec46d 3e164083 3f7d3aac     6..=m.~?.@.>.:}?
   20afc:	3e47c5c2 3f7b14be 3e78cfcc 3f7853f8     ..G>..{?..x>.Sx?
   20b0c:	3e94a031 3f74fa0b 3eac7cd4 3f710908     1..>..t?.|.>..q?
   20b1c:	3ec3ef15 3f6c835e 3edae880 3f676bd8     ...>^.l?...>.kg?
   20b2c:	3ef15aea 3f61c598 3f039c3d 3f5b941a     .Z.>..a?=..?..[?
   20b3c:	3f0e39da 3f54db31 3f187fc0 3f4d9f02     .9.?1.T?...?..M?
   20b4c:	3f226799 3f45e403 3f2beb4a 3f3daef9     .g"?..E?J.+?..=?
   20b5c:	3f3504f3 3f3504f3 3f3daef9 3f2beb4a     ..5?..5?..=?J.+?
   20b6c:	3f45e403 3f226799 3f4d9f02 3f187fc0     ..E?.g"?..M?...?
   20b7c:	3f54db31 3f0e39da 3f5b941a 3f039c3d     1.T?.9.?..[?=..?
   20b8c:	3f61c598 3ef15aea 3f676bd8 3edae880     ..a?.Z.>.kg?...>
   20b9c:	3f6c835e 3ec3ef15 3f710908 3eac7cd4     ^.l?...>..q?.|.>
   20bac:	3f74fa0b 3e94a031 3f7853f8 3e78cfcc     ..t?1..>.Sx?..x>
   20bbc:	3f7b14be 3e47c5c2 3f7d3aac 3e164083     ..{?..G>.:}?.@.>
   20bcc:	3f7ec46d 3dc8bd36 3f7fb10f 3d48fb2f     m.~?6..=...?/.H=
   20bdc:	3f800000 00000000 3f7fb10f bd48fb2f     ...?.......?/.H.
   20bec:	3f7ec46d bdc8bd36 3f7d3aac be164083     m.~?6....:}?.@..
   20bfc:	3f7b14be be47c5c2 3f7853f8 be78cfcc     ..{?..G..Sx?..x.
   20c0c:	3f74fa0b be94a031 3f710908 beac7cd4     ..t?1.....q?.|..
   20c1c:	3f6c835e bec3ef15 3f676bd8 bedae880     ^.l?.....kg?....
   20c2c:	3f61c598 bef15aea 3f5b941a bf039c3d     ..a?.Z....[?=...
   20c3c:	3f54db31 bf0e39da 3f4d9f02 bf187fc0     1.T?.9....M?....
   20c4c:	3f45e403 bf226799 3f3daef9 bf2beb4a     ..E?.g"...=?J.+.
   20c5c:	3f3504f3 bf3504f3 3f2beb4a bf3daef9     ..5?..5.J.+?..=.
   20c6c:	3f226799 bf45e403 3f187fc0 bf4d9f02     .g"?..E....?..M.
   20c7c:	3f0e39da bf54db31 3f039c3d bf5b941a     .9.?1.T.=..?..[.
   20c8c:	3ef15aea bf61c598 3edae880 bf676bd8     .Z.>..a....>.kg.
   20c9c:	3ec3ef15 bf6c835e 3eac7cd4 bf710908     ...>^.l..|.>..q.
   20cac:	3e94a031 bf74fa0b 3e78cfcc bf7853f8     1..>..t...x>.Sx.
   20cbc:	3e47c5c2 bf7b14be 3e164083 bf7d3aac     ..G>..{..@.>.:}.
   20ccc:	3dc8bd36 bf7ec46d 3d48fb2f bf7fb10f     6..=m.~./.H=....

00020cdc <armBitRevIndexTable128>:
   20cdc:	02000008 00400010 02400018 00800020     ......@...@. ...
   20cec:	02800028 00c00030 02c00038 01000040     (...0...8...@...
   20cfc:	03000048 01400050 03400058 01800060     H...P.@.X.@.`...
   20d0c:	03800068 01c00070 03c00078 02000080     h...p...x.......
   20d1c:	02080088 03000090 02480098 020800a0     ..........H.....
   20d2c:	028800a8 00c800b0 02c800b8 010800c0     ................
   20d3c:	030800c8 014800d0 034800d8 018800e0     ......H...H.....
   20d4c:	038800e8 01c800f0 03c800f8 02100108     ................
   20d5c:	01400110 02500118 03000120 02900128     ..@...P. ...(...
   20d6c:	01480130 02d00138 03100148 03500158     0.H.8...H...X.P.
   20d7c:	01900160 03900168 01d00170 03d00178     `...h...p...x...
   20d8c:	02400180 02180188 03400190 02580198     ..@.......@...X.
   20d9c:	024801a0 029801a8 034801b0 02d801b8     ..H.......H.....
   20dac:	025001c0 031801c8 035001d0 035801d8     ..P.......P...X.
   20dbc:	025801e0 039801e8 035801f0 03d801f8     ..X.......X.....
   20dcc:	02200208 02400210 02600218 02a00228     .. ...@...`.(...
   20ddc:	02600230 02e00238 03000240 03200248     0.`.8...@...H. .
   20dec:	03400250 03600258 03200260 03a00268     P.@.X.`.`. .h...
   20dfc:	03600270 03e00278 02a00288 03800290     p.`.x...........
   20e0c:	03a00298 038802b0 02e802b8 038002c0     ................
   20e1c:	032802c8 039002d0 036802d8 03a002e0     ..(.......h.....
   20e2c:	03a802e8 039802f0 03e802f8 03200308     .............. .
   20e3c:	03400310 03600318 03880328 03600330     ..@...`.(...0.`.
   20e4c:	03980338 03600348 03700358 03b00368     8...H.`.X.p.h...
   20e5c:	03f00378 03a00388 03c00390 03e00398     x...............
   20e6c:	03c803b0 03e803b8 03e003c8 03f003d8     ................
   20e7c:	00676f6c 74727173 00000066              log.sqrtf...

00020e88 <dense4_bias>:
   20e88:	000000f9                                ....

00020e8c <dense2_wt>:
   20e8c:	e5fde8fb ed1101e6 121e0725 0de7eff9     ........%.......
   20e9c:	0214f5fa e2fd1310 04eff3e8 fdf4e50b     ................
   20eac:	fad8fef6 dc20f508 f00cf702 07fa180f     ...... .........
   20ebc:	1a0f0af5 20fbe9fa ee080602 02f7ff16     ....... ........
   20ecc:	fc060ff3 18ea0106 1918fceb f4e9f31b     ................
   20edc:	06f0fd18 ff05ec13 18180517 150f0b15     ................
   20eec:	fbe714f6 110d1d0b f6f805f8 f3fb1f06     ................
   20efc:	edfa010b f0f62a01 0011f215 18ed040e     .....*..........
   20f0c:	f4f803fb 1928faee e3f3fb28 13f20b08     ......(.(.......
   20f1c:	fff3f9f5 0914e31b f4fbe4e6 e5e40306     ................
   20f2c:	f8f8ddf9 e506150c 0d1bf4ff 1dff050e     ................
   20f3c:	1e00e5e8 feeceefd f5e5f6ee f4e91b0a     ................
   20f4c:	f4150efc f7e51d1c 01e80fe3 f0f900f5     ................
   20f5c:	0cef13f5 05030fea 0c151ff8 f3161c17     ................
   20f6c:	fdf90303 24e714f1 eae20703 f917f611     .......$........
   20f7c:	effb1a04 f1e80bf1 10e612ee 1708ec06     ................
   20f8c:	15ffeedb f0ecf5f0 0317ede8 dfffff01     ................
   20f9c:	ee05250f 05f619e7 f5f711fe f6e11a1f     .%..............
   20fac:	0b0aea14 f6f803ef f214e7d7 eb05f3f2     ................
   20fbc:	00e41602 0fdf0afc 18f1e319 f407011d     ................
   20fcc:	0aec0911 fff5def8 050bff0b ea011510     ................
   20fdc:	f3f6d1e4 fbe91704 0807faf3 0cf311ea     ................
   20fec:	fa1dfb20 f902d322 17f10f15 1007eef1      ..."...........
   20ffc:	0e131400 f0e6dc16 0d020bd6 e001e60a     ................
   2100c:	e9eeeaef f4200506 0310faf3 0f0d08ef     ...... .........
   2101c:	d904de11 02e102ff 12fef418 1402f000     ................
   2102c:	1ee9f505 f028ddee f4f50700 0c0cefd6     ......(.........
   2103c:	1cf4f8fd 0ce5ea1c 04170ce0 01e8fa11     ................
   2104c:	eaf71822 0b18e71a 13ec1410 ee0affec     "...............
   2105c:	d41ad8eb eae50814 f204fefd 0ffc14f7     ................
   2106c:	ea1504f7 050cecfb 24f712f7 f8030e06     ...........$....
   2107c:	09150908 0eeb0010 11f10ceb dff8f8f7     ................
   2108c:	f8ecf3f2 0ef6eee7 e7020f00 0af8faf9     ................
   2109c:	d00cd5f8 07e6f311 181706e6 02f7fceb     ................
   210ac:	fade2307 dd09f6fa 1015fbf7 05fffc04     .#..............
   210bc:	24080be7 f0e0e5ff 0c1c0edf e6e6f705     ...$............
   210cc:	0718eafe 0e26fc0a efff0de8 ff03ec08     ......&.........
   210dc:	f6e9e809 15def8f2 11f4071a 18e906e8     ................
   210ec:	e8e2edf9 08ebdeec e80709dd 091718e5     ................
   210fc:	ff13fbfe 11eae501 faffeed7 00051002     ................
   2110c:	090104ed edea110d 0eed1708 ece11aff     ................
   2111c:	270f15e5 fc1703fd f40c25f1 ee1c09fc     ...'.....%......
   2112c:	ea0414fd 1bf20ce5 0eda1103 0d0ff1fc     ................
   2113c:	e5080816 e10328ff 0ef5182b e308e612     .....(..+.......
   2114c:	1a0cfae0 fdf21a03 fbfc03e9 fae20709     ................
   2115c:	02f329ee f218f60f fc15f5ef 0a19fce9     .)..............
   2116c:	fff30801 13fe28ed dfdaece9 f0e0010f     .....(..........
   2117c:	f8f41611 10241805 0af5fe3c f6edf1ff     ......$.<.......
   2118c:	fd18e913 1ae80516 f6f2182a eceafb14     ........*.......
   2119c:	fd1cda12 fcf716ff f80003ee 01e414ea     ................
   211ac:	02d9fe1b f612e311 fd18f608 230efb08     ...............#
   211bc:	240e1ee5 1604e207 ff150ad2 ee10f8ee     ...$............
   211cc:	e3f40808 eb06db15 f5f616ed 11121505     ................
   211dc:	e504dbfd fc04fcfe 13f21620 15f41406     ........ .......
   211ec:	ee00ff09 02e9e1ff f0fcf5f8 dfe606ef     ................
   211fc:	e1e8e4f7 fbe7dbfc eef8fcfa e1fcf512     ................
   2120c:	0eeb0617 13ebee12 0bee1405 06fb1cf3     ................
   2121c:	d1fff104 04d5fd03 0917f610 07fa11f6     ................
   2122c:	1be4ea0b 0329ed00 ecefe708 f3ea05db     ......).........
   2123c:	11e314e0 ff08f9ef 120e02e1 ff040b00     ................
   2124c:	eafefaf7 0deefffc 030e0400 f3e00609     ................
   2125c:	e512fcf5 e9dd1bec 1203f6e9 f6f9e6df     ................
   2126c:	e8eb1617 f7f5e7f1 19fde2ed fb0200f6     ................
   2127c:	e5fd1ceb 0d0e0402 f90208ff 1815fffa     ................
   2128c:	f6ea0c2b 050ae6e5 10150f16 eb14e319     +...............
   2129c:	fd0ff509 02ec150d faebfafc 020017fe     ................
   212ac:	f00bf704 ed08070c 181f0c14 080be50e     ................
   212bc:	14210bf4 01e7ddeb 160ceff9 dc0f17e3     ..!.............
   212cc:	120c11f2 090e03f5 16e1f2ef f1151019     ................
   212dc:	f113f9ec e3f41e0e 12f0f711 06f9f602     ................
   212ec:	02f2e8ef e51debe9 f9fb170a f40211e2     ................
   212fc:	e613ea08 12f9ecfd fae8f8ef ffe6fd0a     ................
   2130c:	29f704f0 fce6161b 100df9e7 e8dbfef9     ...)............
   2131c:	05ef2c14 12181304 09ef0905 091910fb     .,..............
   2132c:	1805fde8 1003071b e3e1dbed 00e8f5f4     ................
   2133c:	ef0a0d21 f920f90f 01e20af8 17e114fd     !..... .........
   2134c:	0eedf40d 11e3f30e 09f510e9 1a05fcfd     ................
   2135c:	d81de81a 1be31600 fff90c18 16e207e2     ................
   2136c:	0b1d12f0 0407dd0d ee14f713 180a08ef     ................
   2137c:	01e8fee5 0c02e909 f90a1bdb f6f9ff15     ................
   2138c:	01eceaf7 0cfef5e6 01ea14ea 1803f70b     ................
   2139c:	cd1ad404 17e0f21e 1520070f f8e500f4     .......... .....
   213ac:	ffe3e41e e8f5eb0a 05f3f40a 1dfdfee6     ................
   213bc:	e61603e6 02f10907 14fde4fb dcf1f206     ................
   213cc:	2417f7fd 170c0004 09f9f8ea 130d0a00     ...$............
   213dc:	faf9f210 121e06ff 1d0a240d 06120522     .........$.."...
   213ec:	09df13ec 100bfaee 04fde10a f3ef1f0e     ................
   213fc:	f5dff316 05eb23e8 fbfbf618 28fcfe0d     .....#.........(
   2140c:	f41b120c 0a19f000 09e501ef 14220915     ..............".
   2141c:	d1fbe507 faf716fd 0518fb10 0701efe2     ................
   2142c:	fe1d110b e91af712 f40e191d dd0bfce0     ................
   2143c:	030e13e3 18e1e20a e4fdf9e1 01e50004     ................
   2144c:	03fb1802 0603fbed e2dffcea 02f2040e     ................
   2145c:	f50efe18 f6fc05f5 14e9e71b 03e90b0b     ................
   2146c:	0623e9f7 ea17ee16 19080002 df0e0704     ..#.............
   2147c:	f7fb1a17 10ecfbf6 f2fff2f2 0bf61705     ................
   2148c:	f1f1ec09 ec03f2ef ed0a1001 03030509     ................
   2149c:	fc0cdf05 1df20514 e710e810 f30210fa     ................
   214ac:	f2f61602 e90ffe14 fc010fed 12ef08fa     ................
   214bc:	0ff30ef5 efe8ef07 f2f3f5d2 030006f5     ................
   214cc:	eaea0912 f112f817 e516ff0f ff090003     ................
   214dc:	e719daf8 1eede315 fa0f0adc 09fd150d     ................
   214ec:	07dee8f3 f2ffee17 220afb15 2f160ef6     ...........".../
   214fc:	1d04eeec 1605eff2 f5fb00e3 fd1301ee     ................
   2150c:	e3fbf41f fe15f70b ff081bea fd081beb     ................
   2151c:	d6effa08 efe4f51c ed11f0f1 f1df0409     ................
   2152c:	14221802 e813c81a 06f11309 15f506f6     ..".............
   2153c:	f6ed1af2 02d9daf4 ed150cdd f9070bfe     ................
   2154c:	f30efa09 1dfb2517 210d15ea fb0be515     .....%.....!....
   2155c:	040b030c 00eefa14 e8ff1dfa f00013f6     ................
   2156c:	19080303 1ef517e7 05e5f704 e7f902fc     ................
   2157c:	05ebecfa 0f1b0efd 0909f325 090ef4fd     ........%.......
   2158c:	0d1801e7 06052814 ed1f0ee6 f2f80607     .....(..........
   2159c:	24f704ea f418f4ea 06f21efc f6f41721     ...$........!...
   215ac:	e7ee1fee 1df915f6 fce8f2f0 08001022     ............"...
   215bc:	fafbea27 ef1b22ea 07fd1d2f 15eafb09     '...."../.......
   215cc:	071de801 0ae6f9fe f9021014 0c160a0c     ................
   215dc:	fe1dfce7 0601e400 f0000f05 04fdf6ea     ................
   215ec:	1bece80f faf4ebef f3fe1000 1a1ffde9     ................
   215fc:	ee02edf3 09ffe2fe f6f9e5e4 ef00e90b     ................
   2160c:	09091412 fd1be6f1 feec16f2 f020f705     .............. .
   2161c:	fc170611 fbff0d12 f9dce916 f30bedfa     ................
   2162c:	0a02f5df 0a15f8ec 0a080f0a f6e7e4f6     ................
   2163c:	0a02020b f0eaf1e9 080100f1 07eff7e3     ................
   2164c:	0f170ee7 10e7f116 ebf5f5f2 141c0d07     ................
   2165c:	d505f2fa f101fc0c 0217eaf8 16d8fbf1     ................
   2166c:	15f0e7f6 f7f8d8f6 14050cf9 f5f7ffd5     ................
   2167c:	e1ef06e7 fee8021c 0b03fdd7 08ff06e7     ................
   2168c:	fe0419e6 eefd19e7 0ef806dc 05da0912     ................
   2169c:	230f2810 ef0b1118 09f3e6f1 1607eee5     .(.#............
   216ac:	eef300e1 f10916f0 03cdf2ea faf314eb     ................
   216bc:	0205e904 f41fe306 eceaf9fe da08e30b     ................
   216cc:	e1efe8e4 15f8fa0b f9050b16 181b1cfe     ................
   216dc:	c5f3d3ea 1900ee18 eef4ffe6 f8fc08f2     ................
   216ec:	fc17fefb f5e8e00f fff5fc0a 0413e610     ................
   216fc:	1efef604 fae90419 e90215e1 01fee8fd     ................
   2170c:	f3f6f0dc f706fbf8 f0f106ec 01efedec     ................
   2171c:	e9eefce6 e9150301 0cfce903 06fff505     ................
   2172c:	f3eef003 ef051711 0bebec0b f7f5ed00     ................
   2173c:	e7140bed 1507f218 fbf1fff6 04f71408     ................
   2174c:	27f0f5ef 0cf1f7fd 1efee600 f803ff1d     ...'............
   2175c:	19121bec 081515eb e21f23eb e20d0f0f     .........#......
   2176c:	01f2fa16 1605e20b fff216fc 00051521     ............!...
   2177c:	13f0e811 f11516fa e6151c18 31f5f604     ...............1
   2178c:	d3f51d24 e52d0316 11eaf723 02f0effd     $.....-.#.......
   2179c:	190ef5f0 ebf50110 fc100bd8 0f0fe413     ................
   217ac:	f3c9e916 f6f41a02 0f0d0a20 0e1c0800     ........ .......
   217bc:	2b01fff2 1812f6d6 f0fc16f1 e6f7f4fa     ...+............
   217cc:	001a1106 ede7e712 0cf5f011 07171513     ................
   217dc:	e313e219 1ae9fbe9 0cedf0f2 13eb12e4     ................
   217ec:	f2e8f508 06f3e00a e1fef5e3 eff5ee03     ................
   217fc:	11000bfe 140ff007 0c17f6d1 fd1c1bfc     ................
   2180c:	0bf0ed1f 08e6ed07 03e609f0 1402ff1c     ................
   2181c:	d812f80a ebf30c0c 1b0a0c07 f404fbf3     ................
   2182c:	05ee05f4 0d200406 170b1116 e0f1fae0     ...... .........
   2183c:	e307ecf6 1f0ae2fa efe6fbef 030d0fe7     ................
   2184c:	09e6e305 07f2fe1e 1106070c ebe9f3ff     ................
   2185c:	040eec08 110f0cf3 e60c0709 ede71205     ................
   2186c:	f80cf7f2 07fedff8 fee906ff e8e9eb1f     ................
   2187c:	f70edc16 f002fa04 0af8211f 180400fa     .........!......
   2188c:	12f9030f 1ae91306 052010ea 02f90f09     .......... .....
   2189c:	2cf806fe 1cf205eb f110f9f9 fa1af30b     ...,............
   218ac:	f2eff2f0 14e914eb 02e3faf5 e8f6010a     ................
   218bc:	f101e527 f0162705 e9f50b2b 1aed03f0     '....'..+.......
   218cc:	0debfde8 eeebe6e2 eafc14ed fbf2e2ee     ................
   218dc:	13fae102 0e160a05 150d1803 0d01e915     ................
   218ec:	121a001f fe0f12f2 031409de f0f00d05     ................
   218fc:	f0eb0115 0d0516e9 1afdf921 1302e9e6     ........!.......
   2190c:	081817eb 15e61418 051317f3 f1effb1e     ................
   2191c:	1cfe0d0e fe041614 03ee1815 f7e6f302     ................
   2192c:	e5fbf2f4 f416fff3 feea0ef4 e0f7071f     ................
   2193c:	12efd818 ef220df6 0f1e00f0 210dfee6     ......"........!
   2194c:	e50c1600 effbf7fe edf80c12 0715f2f9     ................
   2195c:	e017031a 01eefb1a e61316eb e709f9f2     ................
   2196c:	00e4f5f5 edeae021 e8f5e7e3 fee8fb11     ....!...........
   2197c:	f21200f4 f6e6f001 0b090ef3 f118100b     ................
   2198c:	0b1b1a24 0f0cfbe7 f9070af5 ef0bf207     $...............
   2199c:	ecf3d1fb 13efeb0b f20ae013 19dbedef     ................
   219ac:	08e30e11 e32ae608 e8f20915 11f118e6     ......*.........
   219bc:	0b16100b 13f6010d 161be9e5 d8e517e7     ................
   219cc:	0ffcf207 e91016ee e0f9ec17 15fee0e1     ................
   219dc:	eb0818e9 fa0aeaff 0a18f5f8 1008ee07     ................
   219ec:	ea0ee3fd e40206ff 0f1bf9db e8e8edea     ................
   219fc:	f6f316ec 1606f7e6 26edecf4 1308ff10     ...........&....
   21a0c:	f903f31e 1425ee15 0a0bfe1e 1118051c     ......%.........
   21a1c:	d303e10b f9fb1518 e9020509 14eb17f5     ................
   21a2c:	09d904f6 0026db0b 0d0817e3 1a1de7f2     ......&.........
   21a3c:	fcf100eb fadfedfe 0d00f2db ebf301fd     ................
   21a4c:	f80bea16 0b2316fb 140bf92c 15f3e1ee     ......#.,.......
   21a5c:	0508fa13 e5f4fbfa e7e9e3e5 02fbe7f8     ................
   21a6c:	fbdae406 f4fd0b07 0bf4fd1b 1b1eeafc     ................
   21a7c:	3015ecf6 e2f1ebee 020018ec 081616f4     ...0............
   21a8c:	03ed0312 11e61f00 0de8ec08 fff619ed     ................
   21a9c:	24fc11e6 effd1007 13ec10dc 05020309     ...$............
   21aac:	eef71cdc 06f32bfc 0fdbf1ea f8f207fa     .....+..........
   21abc:	04ede1fa f9f91f17 0500f628 171b0318     ........(.......
   21acc:	d80fe7f0 0d1c030d e8faf30f 05061a0a     ................
   21adc:	cbebe4f0 f1e6f4e6 f9f9eaec f0f90b01     ................
   21aec:	f4d9f218 e516fd12 1bfbf207 f7f707d4     ................
   21afc:	182212fc e6e8df10 fb1b0edb 041501ed     ..".............
   21b0c:	18f80900 fadc22fc f1160bfe 160cf4e9     ....."..........
   21b1c:	031026f1 0a1309f2 fff8000d 0406fdfc     .&..............
   21b2c:	030f1fef 21e5fbed fcdbf9e6 0c071bf8     .......!........
   21b3c:	08f01225 07f614fe 1a08f514 120611f9     %...............
   21b4c:	edfee4ed f90fe5f1 eaf8e4f3 09e5e8fd     ................
   21b5c:	ff0207f3 fef817f5 e2e8e2df 0a0ff3ea     ................
   21b6c:	e8f50fe5 f916120d 2111fe04 12140af5     ...........!....
   21b7c:	07efee0a f4f314e8 10dd1a0f 07f915e5     ................
   21b8c:	0905e9fd ebec2217 eff4f101 07e80214     ....."..........
   21b9c:	2f071710 f3ff161a 15edf8f3 fa0801fd     .../............
   21bac:	0af8fee6 f5f0ff09 06e211f1 01e7f0fc     ................
   21bbc:	eb0aeef2 0708e511 09ff1226 0a0cefeb     ........&.......
   21bcc:	2f160a01 110b1dfc 19ea0bea e4f109ee     .../............
   21bdc:	090cf7e9 f92407ed 010216ef f2220107     ......$.......".
   21bec:	f2f61cf8 0eeb0f10 f9e3f302 05f8e6e7     ................
   21bfc:	06fc0921 ec0f16f2 e7fae914 0e09ef14     !...............
   21c0c:	0212faf8 f8e6141a 0ff9f2ff f7eaff1c     ................
   21c1c:	0511e41a 17280912 160d1df9 e9010f03     ......(.........
   21c2c:	f802fb04 21da34f0 12effeea f4de0ef7     .....4.!........
   21c3c:	0305ff26 defd30f7 0cf9082d 09f70f0c     &....0..-.......
   21c4c:	f7f814f3 f7efff17 eff1f0e4 f81af0ee     ................
   21c5c:	f317ffec 01061714 f9e415f9 f00e07ee     ................
   21c6c:	0c1efef0 f3efeff9 f4f50203 fa02f505     ................
   21c7c:	1cfef4fa 0ce800fd 05effde3 090a1a10     ................
   21c8c:	eafa0e16 110bdf02 02f41a09 fc20fdf4     .............. .
   21c9c:	fa20f4f1 fafe1806 1a040c12 09e90502     .. .............
   21cac:	f5e6f6ff e408e5ef 1306f7df fff107e8     ................
   21cbc:	151717e7 0bf20012 fd1af2e2 e2ec19f4     ................
   21ccc:	05ee14ee dff3131a 0d17e306 030c05ed     ................
   21cdc:	03ebfbf7 effcf6e3 eaebfee9 05050719     ................
   21cec:	e6080aec f20adcea 1200050b eaf3f201     ................
   21cfc:	f706f517 080817f6 1a05fcf5 02f1e7ef     ................
   21d0c:	00e9ecf6 fdfc1cf3 010100e7 faeef6f2     ................
   21d1c:	19eee9ea 0e18f2fd 061520fd e3de0f04     ......... ......
   21d2c:	15fa15e1 f0f600fa 18fb00f1 f2edf11f     ................
   21d3c:	e5f9f31b eb2610ff ec1c0f01 20f0fe02     ......&........ 
   21d4c:	e4ee0e23 1d1d03f1 f6eefc04 100e0903     #...............
   21d5c:	ed01e80f 0de8ecf4 f3efe801 0ef8ee15     ................
   21d6c:	f305ed18 07f6e615 fbf2fe1f 1d22ec0e     ..............".
   21d7c:	281ffa02 06f1e712 ecf0f8d7 df21f40a     ...(..........!.
   21d8c:	1ef61ae0 fb0423fc 19ec00e7 f4f417e8     .....#..........
   21d9c:	28fdfaea ea26e714 1cf302f6 fa22160b     ...(..&.......".
   21dac:	eb0bfff0 200114ff de02eaf7 f7fcf70c     ....... ........
   21dbc:	f4e00721 eb112607 faf70f31 f9f2ee1b     !....&..1.......
   21dcc:	f1f008e2 03ed1d06 feff15fc ffe90519     ................
   21ddc:	25e61104 0d180d01 e8e8eaec f516f4ef     ...%............
   21dec:	0cf30fe9 f204150c eae916ed 09100f0b     ................
   21dfc:	f6f40cf6 161713f7 1705e61c 1ffe0b0c     ................
   21e0c:	2ef3eeec 0ff8f911 ed15efe6 e706ece5     ................
   21e1c:	fce52013 eefce9ef fa1b13fb f0d10c15     . ..............
   21e2c:	11f308fc e1ffe211 f2180def e607ed0a     ................
   21e3c:	f0f9fbf3 081222e6 10f8fd1c 12eff90a     ....."..........
   21e4c:	f4f2070e 0fe7e5e7 fbde07d4 f7fe1713     ................
   21e5c:	f708dcfe 08e71eed f614f4f4 0906f515     ................
   21e6c:	f7e3e61c f422d7fc 1b03f7f1 171c0ee6     ......".........
   21e7c:	11f80205 f0f2f311 edf0effc feef0d12     ................

00021e8c <dense4_wt>:
   21e8c:	f316e3e7 10dc291d 18deedee 112ddedc     .....)........-.
   21e9c:	ea0cdd1c 1ce3e406 d302120a 20ca1d2d     ............-.. 
   21eac:	2524f12f d4e01519 da1be7dc 142724ef     /.$%.........$'.
   21ebc:	f306e201 0e14f824 cd16e30c d02132e0     ....$........2!.
   21ecc:	69647541 746f4d6f 30252068 30255838     AudioMoth %08X%0
   21edc:	00005838 6f636552 64656472 20746120     8X..Recorded at 
   21eec:	64323025 3230253a 30253a64 25206432     %02d:%02d:%02d %
   21efc:	2f643230 64323025 3430252f 55282064     02d/%02d/%04d (U
   21f0c:	00004354 00006425 0064252b 79622029     TC..%d..+%d.) by
   21f1c:	20732520 67207461 206e6961 74746573      %s at gain sett
   21f2c:	20676e69 77206425 656c6968 74616220     ing %d while bat
   21f3c:	79726574 61747320 77206574 00207361     tery state was .
   21f4c:	7373656c 61687420 2e33206e 002e5636     less than 3.6V..
   21f5c:	61657267 20726574 6e616874 392e3420     greater than 4.9
   21f6c:	00002e56 64313025 3130252e 002e5664     V...%01d.%01dV..
   21f7c:	63655220 6964726f 6320676e 65636e61      Recording cance
   21f8c:	64656c6c 66656220 2065726f 706d6f63     lled before comp
   21f9c:	6974656c 64206e6f 74206575 0000206f     letion due to ..
   21fac:	20776f6c 74746162 20797265 746c6f76     low battery volt
   21fbc:	2e656761 00000000 6e616863 6f206567     age.....change o
   21fcc:	77732066 68637469 736f7020 6f697469     f switch positio
   21fdc:	00002e6e 64343025 64323025 64323025     n...%04d%02d%02d
   21fec:	3230255f 32302564 32302564 41572e64     _%02d%02d%02d.WA
   21ffc:	00000056 64343025 64323025 64323025     V...%04d%02d%02d
   2200c:	3230255f 32302564 32302564 58542e64     _%02d%02d%02d.TX
   2201c:	00000054 7074754f 69207475 64252073     T...Output is %d
   2202c:	0000000a 64343025 0000002c              ....%04d,...

00022038 <dense1_bias>:
   22038:	fefcfd00 0007f800 fffe0000 04050001     ................
   22048:	0200f3fe fef7fcfd fd02fdfc f9fafffc     ................
   22058:	fefbfe01 fc00f5ff fd0303fa 0501fd04     ................
   22068:	0502ff02 ff05fe04 f901fbff 02fbfefe     ................

00022078 <dense3_bias>:
   22078:	12fb100c fe0b00ff ff0ff60a ff01ef09     ................
   22088:	0a050ffd 0613fc00 0bf808fa fd0cfd03     ................
   22098:	05010c03 0f0efefd 0efc14f7 00ff0900     ................
   220a8:	09fc0df3 02010b09 0efc0e04 0d00010b     ................

000220b8 <dense1_wt>:
   220b8:	fc00fbfe 02020502 130600fe effcf2ef     ................
   220c8:	0cefee07 fafb0006 fbfa0dfa f8fa01ee     ................
   220d8:	07f0ed00 fc0cf7e4 00fdfd0a f8f7f80a     ................
   220e8:	fdf5fcef 05e8f0f4 fe050feb 06f703fd     ................
   220f8:	02f6edef edfef602 e403f5db 02fe030d     ................
   22108:	fc03fcf5 07f3f6ee fd16ffeb 0ddd010c     ................
   22118:	0004feff ec03fd06 f7edfcf7 fff3f6fd     ................
   22128:	fc07f3f7 090505fc eee70204 f901f100     ................
   22138:	f1ed0cfa 11ff0cf8 0306f9fb eefef6f7     ................
   22148:	f9f51102 f9fc0aec 04060401 fffdf403     ................
   22158:	0dfd03f6 fdfffafd 03e4f4f2 01ef060e     ................
   22168:	f9fefa07 f0fbf5ff f3ece7fc 11fcee00     ................
   22178:	0807000d 0611f9ff eaf9f3f6 fdf3fff9     ................
   22188:	121001ea f4ef0501 0408fa0b f8fa0a08     ................
   22198:	faf80bf7 08060605 0e070610 0ef5feff     ................
   221a8:	f0fbfb02 0bf3f5f0 01fe04ff f5f5fd04     ................
   221b8:	f7fafb0e 0ef1f200 0b00f1ff fe0afe16     ................
   221c8:	1103f5fe feedf9f1 f30009ff 04130000     ................
   221d8:	fa001205 0208f8fb e9fb141d fff916ee     ................
   221e8:	fc030d06 fefc01fd 0ffc0a07 fdfaf80b     ................
   221f8:	02faf3f1 02020b09 f2e400ff 0303020a     ................
   22208:	02f8f102 0801f3f2 0505020c 130af5f8     ................
   22218:	ec00feed 08f6f8f3 02000f03 02030cfc     ................
   22228:	effe06fe 00ff06fe 07070df4 f9000b09     ................
   22238:	06000305 04060f08 06f6f4f9 04f80207     ................
   22248:	160706fe eefef0fe 0810071b 180ffdf7     ................
   22258:	0f05f1f9 f400010e 1409f6f0 030603f7     ................
   22268:	0c041b03 020efe08 0205fd08 fc11080c     ................
   22278:	080b0a0b f80109f4 07070710 f9ff0104     ................
   22288:	180d1f05 fcf4eff9 fff6f1fb 0f0c0d0b     ................
   22298:	03f80303 0204f609 0dfafdfa 12fef1fb     ................
   222a8:	01f2070b fc00f8f5 f6f10909 fc07f201     ................
   222b8:	1203f610 faf7040b 0d0705fb fb05f608     ................
   222c8:	fbfdf2e9 fd0206fb fb00faff 0ff5f80b     ................
   222d8:	08090505 f802f806 f7030a0e 030507fe     ................
   222e8:	0411030c 030306fd 0200f1f2 01ff0a04     ................
   222f8:	06f6f50b 00fa0805 00f70109 070e0202     ................
   22308:	fa04040c 04f200fd fbf2fbff f5f1f5f9     ................
   22318:	f8060803 f409f301 0c0a0efc 090006f7     ................
   22328:	fb0bfdfb 00f40704 ecf50b06 07000312     ................
   22338:	0907fdfa ff0ff6eb f1f0f6fc 13fbe6f9     ................
   22348:	07f606fc 0f070a09 0e070a11 f1050001     ................
   22358:	f90bff08 f907fbf8 f7ff06ff fd05fe0a     ................
   22368:	0200faff f9020b00 00fe0afd 01090701     ................
   22378:	f903fa06 070e0601 fc140702 0afb05fb     ................
   22388:	0006f8f8 fafc030f 08fc090e 06e9fe15     ................
   22398:	ee03f8f7 0b000cfe 0003f90d f6faff00     ................
   223a8:	0bf7f8f6 f1e1f9fa 04ff0200 03ff05fa     ................
   223b8:	07171601 f80304fd 0dfffdf3 040afd08     ................
   223c8:	faf401f9 040611f9 04fa0f03 0809f0f9     ................
   223d8:	ffff0413 08fcfbfb 00fffd07 ef07fa04     ................
   223e8:	100604ff 08030102 010addfc 07020aea     ................
   223f8:	feef0507 05100611 f9f6080d 010111f7     ................
   22408:	f5f9fc03 03f7f1e6 0301060c ef02f805     ................
   22418:	ee0a0ffe 08fe02ec 0416f6eb 05fe070c     ................
   22428:	fc00110a 00ff0800 f0ebf509 fa0a13e8     ................
   22438:	1500fcf9 0ff9e308 f101fa05 00ff0001     ................
   22448:	fe05ff0b fa070809 221804f5 f4e40afc     ..........."....
   22458:	16e9e8ef 06f5fff6 fef207fd f6101003     ................
   22468:	f5f807ed 080ff6fd fe01fd02 fd00fdfb     ................
   22478:	04fb07ff f6f600ef 0f0802f2 0cfdfc03     ................
   22488:	0610e708 faef0d07 eaf9fffe 0a0df716     ................
   22498:	07fbf6fd 10fef7fa f2faf3f5 0ae5f9e5     ................
   224a8:	ff0b0805 fef8fd01 ef08120c f0f300e9     ................
   224b8:	1116fcf9 fcfb0405 fef30200 ef0d09f9     ................
   224c8:	edfc0303 070021e8 fef500fe ff05ec08     .....!..........
   224d8:	00f509f6 f4f2eeed 0e0a0708 f5feff0d     ................
   224e8:	15100303 f7fef9f3 12def1e8 0604fc06     ................
   224f8:	f6f4faf1 eeee0317 f5f0ffe7 fa0eedf7     ................
   22508:	f6fb08fe 03fcfd00 f6040915 f7000603     ................
   22518:	02fe0ffb f90000fc f8f1fe13 faee0a02     ................
   22528:	05f40afc 0a12f90a f6fefb03 0406fa04     ................
   22538:	000eeffd 14e5f2ff 08090406 00020407     ................
   22548:	ebeff4fc 0afe07f1 fd09f5e8 030303fd     ................
   22558:	edec0805 01f0f5fc f4e9ee01 020cfbe1     ................
   22568:	f804f8fb fdfe06f7 0407fdf7 fdf4fffb     ................
   22578:	06050509 f50205fe f503f805 fe020706     ................
   22588:	07fc0305 fb030901 fc06f806 f5f9f5f8     ................
   22598:	0501fdfa fa080006 05020604 01050806     ................
   225a8:	f90406ff f407fc00 07fbfef7 f9f7fb07     ................
   225b8:	f70603f6 fafdfff8 04ff00fd fc050207     ................
   225c8:	01f8f7f9 01fb0200 00ff04fd fbfafd02     ................
   225d8:	fb04faf7 f7fd08f8 f7fa0403 fd0505fc     ................
   225e8:	030004f9 0503f8fb fb040607 04f807fd     ................
   225f8:	fe060607 f9f70303 09fe03fa 06f601fc     ................
   22608:	010305f8 f9ff02fd 0404f903 f9fe0706     ................
   22618:	f8fd00fa f90a04fe 06f906fa 00f70501     ................
   22628:	fe020904 00050502 fafe0504 f9030404     ................
   22638:	04090500 06f90005 fa01fc06 06fb0603     ................
   22648:	03fefcf8 fb0905f8 01fcfbf8 03fb06fb     ................
   22658:	00fdf809 fe01fcfe 060203fd faf902fa     ................
   22668:	fdfdf5fc fcfbf903 03fcfdff 060afdf6     ................
   22678:	03f901fc fdfc02fa 0308fdff 090afd03     ................
   22688:	0203f602 01f9f903 f800fb00 fefcff00     ................
   22698:	fc0203fd fdfc0003 fdfc0305 fdf7f704     ................
   226a8:	00f20405 ff0601fd fefdf7fb 0503fd06     ................
   226b8:	07fd00fb 0305f1f7 01fafcfa 0601fbf9     ................
   226c8:	00fa0309 06070205 000301f6 f9fdf905     ................
   226d8:	02fcfef8 fff606ff f603fd05 060303f9     ................
   226e8:	f8f8f5f8 0103f704 020000f5 fbfafa04     ................
   226f8:	06fc00f6 faf701f7 03050100 0c000500     ................
   22708:	fbfbf600 f8050400 05f5fefc 02030200     ................
   22718:	0309fefd 06f90105 fc03fc07 f4fbf5fb     ................
   22728:	f8f4fe03 f905fffc fefdfdf8 02f3fa03     ................
   22738:	06f9fafa 0301ff01 0401fdfa fa0701fa     ................
   22748:	00f600ff 06010402 050302f8 f8f70404     ................
   22758:	02f303f9 0407f9f6 02fd0902 f9080304     ................
   22768:	f901f9fb f6fefc05 f8f906ff fbf600fd     ................
   22778:	fa03ff01 ff00fa00 02fc03f6 fef7fcf6     ................
   22788:	ff0200f8 fcfe000b 030405fd fffaf6ff     ................
   22798:	f8f8fdfd fef8fcff fbfa0206 00f902fe     ................
   227a8:	ff04fe02 f8060805 fcfef6fc 06f600f6     ................
   227b8:	fafcf5f5 f5fc0705 ff0206fa 05fcfe01     ................
   227c8:	06ff03f7 f8fd03f7 0006f902 04f5f7fa     ................
   227d8:	04fa05fc fff90801 fb01f70e fcf7fcf9     ................
   227e8:	06ff06fc fa060606 00fb05fc 0807fa03     ................
   227f8:	fdf502f9 0a00fa06 f8f50001 fd04fe05     ................
   22808:	fafa0304 f7000305 f803fafd ff04fcff     ................
   22818:	0101f9f8 f7f6f501 01010605 02fbfdfd     ................
   22828:	f703f6fe fcfcf808 f7fcff02 07fef4f6     ................
   22838:	02f90309 fff700fc fd08f5fa ff0205fc     ................
   22848:	ff0301fb 07030400 f605ff05 f6f7fffd     ................
   22858:	f7ff06ff 04fc02f7 07ff03fd faf702f4     ................
   22868:	00000404 000101fe f903fcf9 00fef700     ................
   22878:	02fefbf8 fcff04fa 03fcff04 04f8f904     ................
   22888:	02fb05f8 f9fcf8f6 fe000006 00f9fbf8     ................
   22898:	f6050003 fafbf2fc f8020003 03f8fb02     ................
   228a8:	fef807fa 07fcfbfd 030301f7 f7fb02f4     ................
   228b8:	04f8f7f6 0208fcff 000202fb 01fff8fe     ................
   228c8:	05fbfff3 09f9f5fe fbfffb04 fffa06ff     ................
   228d8:	03fbfe03 05f9f6fb 02fbfbff f907f805     ................
   228e8:	04fb00fe f9fe0903 0403f506 0806fef7     ................
   228f8:	0106f708 fef8fbf7 fbf4fafb f7000502     ................
   22908:	fafa05fa 0506fe01 fdfc0502 f7fefdfd     ................
   22918:	09f3faff fc0700f6 fc00fefe fc03f701     ................
   22928:	f60601fa fc09f5fa 02ff06ff 02faf8fa     ................
   22938:	05fffafd f7f804f6 f8fc04fc 04fd06fe     ................
   22948:	f9f80705 05fff8f8 fffd05f4 fe09ff0a     ................
   22958:	fcfffbfc fcf5fdf7 fdfbfbf5 fff706f3     ................
   22968:	f70600fd fffdfffd 03fdfe04 f905f4f9     ................
   22978:	050a0105 fe02f808 f8fd02fd fbf60102     ................
   22988:	fef700ff 00f60106 f608f8f8 fef9fa00     ................
   22998:	0501fdfb fa0502fd 00fc000a f707f5ff     ................
   229a8:	08000302 fa06f8fc fbf60102 060001f8     ................
   229b8:	f8f3f900 02f8ff04 f705fef8 09fcf7ff     ................
   229c8:	fb07fc04 fcf9f7fb fafe0503 00fcfc02     ................
   229d8:	fc020200 fb060005 0504f9ff 02fcfbf7     ................
   229e8:	03fcfbfb f6fd0301 07fff703 f7010308     ................
   229f8:	f7fcfb01 0301f8fa f801fcfe 0205fef8     ................
   22a08:	fd0404fd fdf7f9f8 fb08f7fd 01ff0305     ................
   22a18:	fcf90206 fb030a03 fcfbfdf5 0602fefd     ................
   22a28:	fef901f8 03000906 050605fd 01fcfffe     ................
   22a38:	07fafcfb 0601fcf8 060400fe 00f9fcf8     ................
   22a48:	02f4faff fc030704 0302ff05 ff040508     ................
   22a58:	fb09f9fc 06fdf8f9 060105f9 fe020306     ................
   22a68:	fefe03fa f70105fe fff600fd 0301fa04     ................
   22a78:	f6fdfafd f9fd04fd 0403fa08 f9fd02fd     ................
   22a88:	02fb00fc fb00fbf8 faf903f8 03fafefd     ................
   22a98:	f601fcf7 02f90205 f7fc04fc 01ff0200     ................
   22aa8:	f7020300 03000409 fdf9f8f8 0805f803     ................
   22ab8:	f7fcfcfe fd0409f9 07f7fdf6 070005fc     ................
   22ac8:	fdf8fc05 fdfa0101 0803fb06 fd06fb05     ................
   22ad8:	f9fc02fe f902fefb ff04f9fc 0705fef7     ................
   22ae8:	06f50605 f9f9f5fd f706fff7 0804f7fb     ................
   22af8:	fff6fa01 fdf7f903 f9f6fb04 fdf704fa     ................
   22b08:	fc06fe07 0305ff05 02040403 faf7fbfa     ................
   22b18:	03fe05fb 050203fc fff902f7 08020405     ................
   22b28:	fd0305f6 fffffdfe 01fb0207 03f301f5     ................
   22b38:	04f9fe06 fc060000 fffdf403 ff0508fd     ................
   22b48:	f5fe0600 fb010601 06ff02ff 08fd0601     ................
   22b58:	fa01f9fe 080af9f6 04fbfb05 f6fcf101     ................
   22b68:	fd020604 0003fc02 f8feff01 010401fc     ................
   22b78:	fcf9f9fc 0502fdf9 f9040a00 fcfd0202     ................
   22b88:	f4fb01ff fafaf3fd 08fc0206 f9fff4f7     ................
   22b98:	fd00f6f9 f8fff5fc 07fc06f6 020003fc     ................
   22ba8:	fffc0303 010201fe fafaff00 fefafdfc     ................
   22bb8:	0402fefc 07f9f9fc 04f702fd fb020004     ................
   22bc8:	01f9fd02 fc0105fc 03020104 f80500f8     ................
   22bd8:	0109fafb fc000204 05f901fc fafdfe08     ................
   22be8:	04fcf8f2 0a040306 fef6ff05 f90200ff     ................
   22bf8:	fafcfef7 0006f1f9 f9050805 03fdf607     ................
   22c08:	09f9060a ff01ff03 0a00fc00 07fb0008     ................
   22c18:	fefe07fd 04f7f8fe fefefaf9 040206fe     ................
   22c28:	fffd0307 fd01fe07 f604f9f8 04f901f4     ................
   22c38:	fffe02fb f9f90203 f702f8f7 f203fffa     ................
   22c48:	f5f8f5ff fbf7070a fe0601fb faf8fafd     ................
   22c58:	fff2faf9 fbf4fc04 01010205 fa0307fd     ................
   22c68:	f8f60207 fa06f501 fafc00f8 fcf50400     ................
   22c78:	fcfcfb02 f805fb00 00fff900 04050afc     ................
   22c88:	fffdf8f9 0404f6f5 05fb03f5 f8f3fffb     ................
   22c98:	f7f9f6fe 00fdfcff fc00ff04 fdf50601     ................
   22ca8:	f90400fa fcfc05f9 00fdf905 fcfcfefe     ................
   22cb8:	f7fff807 0703f904 0401f9f9 0000f707     ................
   22cc8:	fefdf801 07f50101 00000701 f9fff8fd     ................
   22cd8:	0202fbf4 fcfefafa 01fb0307 fff807ff     ................
   22ce8:	f7f6fa05 f7f8fefb fbf8fcfe 01fff7ff     ................
   22cf8:	fafbf801 faf6fa01 f606fcff f6f6f3f7     ................
   22d08:	fb09fa04 f8ff0600 00fdfbfb 04f5fcfb     ................
   22d18:	f90101f8 fefd0afb 06f9f702 f4fe0802     ................
   22d28:	f8f8fef9 f904f8fb fc00ff07 0101fb04     ................
   22d38:	0000fdfb 04f505f9 f9f8fd04 04f7fdfc     ................
   22d48:	0bf9fdfd 0001f802 fdfc0403 050301f9     ................
   22d58:	03fd0200 06fffb01 f60600f9 faf8f8f6     ................
   22d68:	fc0203fd ff0102fa fffe00f7 faf7fef7     ................
   22d78:	0206fffa fefd06fe f6fc0505 fdfc0102     ................
   22d88:	0706fe02 07fef802 fdfbf8fb 050209fe     ................
   22d98:	03060c06 0408ff06 fffd03fb f9f7ffff     ................
   22da8:	fc09f308 06fa0100 faf70704 06010805     ................
   22db8:	02fd0300 000105f5 f800fbf6 0afb05fd     ................
   22dc8:	fdfcf605 fdfbfb02 fbfe01f8 fafefe09     ................
   22dd8:	02f5fdf9 f4030701 f8f40500 0603fbfd     ................
   22de8:	fb08f805 fbfe03fa ff03faf6 fffffff8     ................
   22df8:	00fa0003 03f50807 f50102f8 02fff605     ................
   22e08:	fa0807f6 f7f9f901 fcfbf7fd 02fafbff     ................
   22e18:	03fbfff7 fdfcfffc 03fff8fe 0303f9ff     ................
   22e28:	03fdfc03 02fb0301 fcf6f8f5 f8040203     ................
   22e38:	f50b05ff f7f90806 f80102fb ff05f908     ................
   22e48:	07f907ff fdfdfe04 f9f5faf6 fef904f6     ................
   22e58:	f9fdfdf6 f6fdf604 03020405 05f8f4fa     ................
   22e68:	f7f70603 0703fb06 0700fefe 000700fe     ................
   22e78:	fff5fef5 08fd0006 0503f500 f604f9fc     ................
   22e88:	02f50308 fc050203 fafef801 00f40301     ................
   22e98:	fe0008fd 05fefb09 0003f8fc 06f80307     ................
   22ea8:	0500fd04 0508f507 f806f8ff 0503f801     ................
   22eb8:	fbfa0102 fcfffef9 121df60f fa01fe0b     ................
   22ec8:	080809fc 02010c02 09fae9f0 fc160ff9     ................
   22ed8:	fef306f6 fa061515 0000f80d 060ef0e9     ................
   22ee8:	f7010e1f fce9fa08 ebf400f7 f1fc01fe     ................
   22ef8:	1ff608f4 fe01071a fb0303f4 05060602     ................
   22f08:	fbecf117 0e10f5ff fbffee00 02ff0901     ................
   22f18:	030bfc06 000eeef9 fe0315fd 08f806f7     ................
   22f28:	04ee07ff fffa05fd f302faf0 01090707     ................
   22f38:	08070504 f6f4faf8 fcf7f803 00010d03     ................
   22f48:	f5f1021a 0606fd06 00fb02ef 0cf1f707     ................
   22f58:	01f6f40f fe04e300 0504f409 fcfb06f6     ................
   22f68:	0306ebfd 0afefdf9 0f01f901 f0f40a08     ................
   22f78:	03f809f9 f70600f4 000802f6 ef000d09     ................
   22f88:	f5f709f2 04f9f909 09f60809 f9f30404     ................
   22f98:	f6ec0410 faeeff06 fce7f6f0 fffd0100     ................
   22fa8:	1609fe03 ed0b0805 f0f70305 00feeeec     ................
   22fb8:	000afbf7 000b0b0d 08f9fc03 03f7faf0     ................
   22fc8:	ef02fbf7 06fd01fd 07ff04fb f1fafaf9     ................
   22fd8:	f6f9f8f1 fffe0300 f2ff02f8 eff00700     ................
   22fe8:	f5e8ff05 fcfd04f4 f1f3f501 15ff02fd     ................
   22ff8:	f70307fe 0001f7f5 0bf5f9f0 f0f40708     ................
   23008:	05040607 01f90202 f5fa02f3 040204f3     ................
   23018:	0cf1effa f4020300 05f9fb0b fd15f3fb     ................
   23028:	01f6f3ff fd09fbe4 02fa1405 ee07ffff     ................
   23038:	03fe01ed e9f5f3f6 06ff0cfa ff030610     ................
   23048:	fbf306fb ee0af2fe f0f0f7f3 0ffffc0a     ................
   23058:	fcf2fbfd f0f3f400 f9ea01f1 1af6ebed     ................
   23068:	f70e1202 fef9f8f6 eff7f5ed eff6f8ff     ................
   23078:	fd07f7e0 f40a07ff e10204ff 03fa00ed     ................
   23088:	e0f9f3ee 0bfe14e4 f3fa1012 f20303f5     ................
   23098:	e902f5fe f4e0edf0 0e16f703 f5fdffff     ................
   230a8:	fdfbfaf7 e9e00afe 0eeed2eb ff0afcfa     ................
   230b8:	f6f2ebf7 0313fef7 f4eee5fa 0b16f6e7     ................
   230c8:	fc060107 f30df4fa 0f00feff e4f4e0eb     ................
   230d8:	050509e7 f7050410 fa0104fc d908f5fe     ................
   230e8:	eedff1e9 fe060210 fbf70909 16f1f402     ................
   230f8:	f0e80007 1dfee5ee fc140d02 fff9fbfe     ................
   23108:	0500f3ed eaedf501 010defe0 f7070b05     ................
   23118:	fdfdfdf9 050309fa e4eef2e2 1a0718fa     ................
   23128:	02f70d14 eef500fd ef020bf4 fdeef8fc     ................
   23138:	0afa0e06 0a010208 feeffd0e f2fb07f5     ................
   23148:	04f4ddee 0cfd010d 070904fc fe10020d     ................
   23158:	01f3f608 0412f0f1 0602fb0c f9ff0902     ................
   23168:	f9ef03f7 f0f3f1f6 05070bfe 040b0710     ................
   23178:	02fef9fe e9f7f7fb f8f7f40b 08f70106     ................
   23188:	0301f709 15f7f5f0 eaf403fd 07f4ebef     ................
   23198:	ff1602fe fc0b050d 0906fcfa 05f9f5fe     ................
   231a8:	f80f00fa 08fd0809 03fe0401 fdfe0700     ................
   231b8:	fbf3fbf0 080609f8 0d0b0b10 03fe0504     ................
   231c8:	ee09fefa f2ebf605 08f1fc13 f2000e0b     ................
   231d8:	02faf5f0 0bfafc04 ff06f0ff 0b07fa0b     ................
   231e8:	fc010003 f90301ef f70c0407 041103f4     ................
   231f8:	fffd000e 0d0707f8 fcef0e00 fe0600fb     ................
   23208:	11140af8 02090702 00f9f200 0204fdf9     ................
   23218:	ef060b08 fffb1005 fef8ff04 fff908fa     ................
   23228:	110f07fa f5fefb06 fdfdf901 f3f506ff     ................
   23238:	03f1fc06 040e0806 05f600fc f7030208     ................
   23248:	00f60dfd fd010d08 080300fc 0d070303     ................
   23258:	010af710 f610fe02 0206f60d 050e0b00     ................
   23268:	0b0a04f6 f2f6fffa 0efb11fc ff04fcfe     ................
   23278:	fc05ff03 f8060205 fcf30906 00040903     ................
   23288:	03060105 fdf3010d 01f703fe 03fcf8f8     ................
   23298:	08050208 09fa0202 0c0df008 fbfdfc0a     ................
   232a8:	03010400 0a05f406 040af40a 09fa10f7     ................
   232b8:	0101f00a 0c01fffe 14000501 e5091105     ................
   232c8:	060f0001 0403fbf6 06f90610 fb0814fe     ................
   232d8:	0400040c fc0908ff 0902fb05 f8f90004     ................
   232e8:	0b010ffb 0f04ed00 fbf10805 0a1608f6     ................
   232f8:	fff9fe08 0112020a 030a04f4 f6f9ee05     ................
   23308:	12fd02f6 01f80106 f4030702 120af2f9     ................
   23318:	0002f8fe 08080006 fe07f503 08fbf90a     ................
   23328:	03030904 040702fa f7fe0306 040405fa     ................
   23338:	0c03f205 fefc030e fc0afef7 fe02f411     ................
   23348:	0613fc12 08fd0bf9 f30cf3fd fe00fbff     ................
   23358:	160806fc f2f91006 0409f602 00fc05fd     ................
   23368:	fdf6ff04 0a06010b 0107fc02 05f206f9     ................
   23378:	03050500 fb020201 05fcf706 f5fcfbfe     ................
   23388:	03fa0001 f9090200 0208fdf4 00f60204     ................
   23398:	0006fd05 04f9f8fd fa01f803 0802ffff     ................
   233a8:	fefef600 03030205 f7fd05fa 08f807f7     ................
   233b8:	fdfb0200 fffc05ff fdf5f7fe f80600f4     ................
   233c8:	0004fdf7 0103fa05 000706f8 f700f806     ................
   233d8:	03faf906 0609fefe fefe0305 0007fe07     ................
   233e8:	03faf506 04050405 ff090afc 0305f902     ................
   233f8:	04fc0202 fcf8fd02 fdfefb05 fcfdfd02     ................
   23408:	0109fbff ff06fe0a ff070607 020606fb     ................
   23418:	020503fd fbfd0101 030305fc fcf605fb     ................
   23428:	fcfb0000 05fe0602 fb04fe03 05f6fd01     ................
   23438:	f803fdf9 0504fefb f9f904fb fb01f604     ................
   23448:	f8fa06fd ff03fdfd 0005fe09 f60100f7     ................
   23458:	fa00faf5 f9f90603 04f9fe06 03fe0101     ................
   23468:	03f9fdf9 0705fa00 0401f6fe fd0905fb     ................
   23478:	0001fa01 fcf9fa04 fa0004fa 03f406f7     ................
   23488:	03070d04 0bfb0005 030902fb f60303f9     ................
   23498:	02090101 fef70a03 f50bf3fe fd02fbf7     ................
   234a8:	ff07fdf8 fdfcf5f7 f703f4fb f7f9fbf9     ................
   234b8:	f60906ff f9f706fd 040203fc 06f4fcfc     ................
   234c8:	fd04fa01 f4050600 05fe0202 f6fb0706     ................
   234d8:	02fbf900 00090502 fe0301fc fe03f900     ................
   234e8:	f7f7070c 0103fff9 f601f8fa 05f9fff5     ................
   234f8:	01f9f906 fb050504 f5f609f6 05f7fa06     ................
   23508:	0805fe01 fb0cfe05 fef60302 fb05f9fd     ................
   23518:	05030200 fe06fefa 02030901 fb01f9f6     ................
   23528:	010901fb 05030204 04fc06ff f4020703     ................
   23538:	0502f6ff 040507f9 fefcfcff 07fbf6f9     ................
   23548:	04f70406 01040003 f9f70606 00fbfefc     ................
   23558:	ff08faf9 03f7f500 fdfdf6ff 08f9fafb     ................
   23568:	02fcfbf4 f80b0b02 fb00fc06 f4fa0900     ................
   23578:	fc02fbf7 08f50703 fff500fd fff9f4fe     ................
   23588:	0002fc01 fdfff9fb 0d00f9fd f8f4f800     ................
   23598:	02fb0202 fa06fd02 fef902fe 040606fd     ................
   235a8:	01f1fdf6 f603fa03 02fb03f6 f8fcf9ff     ................
   235b8:	fd000a02 03f2f9fe f4f6f9f9 fa01fa01     ................
   235c8:	01fcfefb f4f9f900 f808f7f2 05fbfa02     ................
   235d8:	fc0801fa 06f6fbff f0fafff9 fe0005f3     ................
   235e8:	fcf900fd 02030303 030a00fb f6f8f7fa     ................
   235f8:	fefcfbf8 01fffd00 f6010c04 f6f80a03     ................
   23608:	f6f1faf8 faff00f8 f8040109 f9fbfa06     ................
   23618:	f304040b 0204f4fc ff0403fd 0afa0802     ................
   23628:	0ef905ff fff501fc 09fc08fc 03fff4fc     ................
   23638:	f7fefd06 06fefb03 01f6fe02 fc01fd02     ................
   23648:	01fe0804 fe0300f7 f6fa00f7 05fdfef6     ................
   23658:	06f805fb 020afc05 f500f5fb 00ff0702     ................
   23668:	01fcf1fb 04050507 fdfb07f4 0df3fffd     ................
   23678:	00f806fa fffaf9fb 0404f7fb fafbfe07     ................
   23688:	080806fb fb00fb04 f5fefe06 04050505     ................
   23698:	0807fffb f8010b01 fcf6f7fe fb0002fd     ................
   236a8:	0101f605 04fe0600 fefc0009 fc06feef     ................
   236b8:	fc07fffc fb000604 0dfffff5 f1fa0107     ................
   236c8:	06fefdf3 ff03f705 03fcf7ff 000900f9     ................
   236d8:	fffbf406 fb0206fd 010007fd fcfcf9fc     ................
   236e8:	f7fc0efb f9fdf9fe 05f700f5 fef9f7ff     ................
   236f8:	fe060403 f4010202 f800fdf7 05fbf5fb     ................
   23708:	fe00fd08 0b050b01 fef6f7f8 04fe0406     ................
   23718:	05fef700 00fc01ff f8fe09fe 00fdfafc     ................
   23728:	0a09f20a fb020cfd 04f803fc 03050006     ................
   23738:	04f60100 02030103 0405f604 03f60004     ................
   23748:	f80405fd 00fef8f8 f8fcf805 06ff0205     ................
   23758:	fe0202fa 05f9f708 fcf50902 fefe0202     ................
   23768:	fe00ff04 0c0bfdff faf6fef7 010206ff     ................
   23778:	faf6f709 fe07fb02 fb08fafb f9fc04fd     ................
   23788:	040109fa 02fd0302 ff020201 fbfe02ff     ................
   23798:	f302f8fb feff0506 05fdf8fa 0b060900     ................
   237a8:	f70100f9 fefefbfc faf9f7f8 00fafc03     ................
   237b8:	070dfe03 fc02fe00 fdfff9fc 0404ff02     ................
   237c8:	08fcfeff 0106fdf6 01f80100 0006fffa     ................
   237d8:	fafbf706 05fd01ff 05fe0304 faf900f7     ................
   237e8:	04000002 faf502f4 0d0105f7 f70104fb     ................
   237f8:	07fb02fe fc04fefc fef80104 080d04fc     ................
   23808:	fdfefbf9 fb04f8fc 05010203 f601fef2     ................
   23818:	16130502 f4fa0afd f60300fb 13f5f508     ................
   23828:	0d080e00 061920f5 00020202 0efcfbfb     ..... ..........
   23838:	fdf903f7 04020806 0403261b f3f902f9     .........&......
   23848:	0c020000 0c03fef3 1100090c 0e0a021d     ................
   23858:	fdfc060f 000a0409 f906080f 1f06f912     ................
   23868:	ed050706 fc0402fa 08fdf6f4 030b030c     ................
   23878:	0f090dfb fb0403f0 06f0fdef 05fa0106     ................
   23888:	f4080602 f8fd0d01 f2f1fcf2 12fbf403     ................
   23898:	0af1fd00 f5020f07 03fafb03 effafa07     ................
   238a8:	0601fefe 030200f4 09fefb07 0407faf4     ................
   238b8:	00fef308 14f2fef4 040b0708 02fefb0b     ................
   238c8:	0209fd02 0805faf4 fbf30400 01030907     ................
   238d8:	18fd04fa f0fa06ff fdfbf6fb fee8f0f5     ................
   238e8:	ee06f90e 020e0800 faeefafe fff6fc04     ................
   238f8:	fe0608f9 0eef06f4 f7fd03fe fcf607fa     ................
   23908:	04f3f4f7 001604f1 fa020000 0200080e     ................
   23918:	04020103 f7000d0b 05fef308 0302fbf0     ................
   23928:	fa000400 fb0402f3 03ebf0fa e800fe11     ................
   23938:	0d05fa06 fef2e804 fc0700f1 02fef108     ................
   23948:	fff10703 fa010304 f1eff6f4 fefcfbfe     ................
   23958:	080609f6 f9f9f60f fffdfffb 050af6f8     ................
   23968:	0e070efe fefc030b 00fdf8e7 0003ff08     ................
   23978:	fb03fbf0 fef3f7f9 eb0bf607 0709fe06     ................
   23988:	eff00205 efeefb00 f905fc01 02e907f8     ................
   23998:	09fa07f8 0609fff5 05f6f007 080303e8     ................
   239a8:	05fbe602 f5fffc06 fffdfcf4 0904f702     ................
   239b8:	07f707fe fbf6f7de 05fa06fe f90c0109     ................
   239c8:	03e701f8 db02f5fc 01f5f6ed fdf7ff06     ................
   239d8:	f1f303fb 14fce303 e7e806f1 fbf6f9f4     ................
   239e8:	ef0900f9 0c06f706 060602f3 f2f3d808     ................
   239f8:	f6fee7fc 04fb0415 fefdfa10 0df303f8     ................
   23a08:	fbe9eae7 08ff05f9 0309f3fe 01ef0a00     ................
   23a18:	dc07fb08 0806fdee f9080114 effefc04     ................
   23a28:	0505ef11 e8e50908 07f4faf3 0e0b01fd     ................
   23a38:	0cf8f507 fe0607f8 fcfadd06 0706f1f4     ................
   23a48:	1704030d fb030301 0dfb08fa fbf7f4de     ................
   23a58:	17fc0b08 060cfa0f fcee0603 eb0504ff     ................
   23a68:	01f6fafc 0001fc10 fcf2f2fd 19fbe403     ................
   23a78:	fde20103 0607f4f1 000a0000 01030001     ................
   23a88:	0205fcf1 f6ffe705 ff01fbfa 1f06060f     ................
   23a98:	f706fc01 fcf30afd 050201ec 06f8020a     ................
   23aa8:	011008f5 12fe08f2 f502f7fd 14fbfa05     ................
   23ab8:	0118ff0c 0102f9f0 01f8fcff 03f7fdfa     ................
   23ac8:	fd01f2fd 010312f6 09fc0afe fe0200f5     ................
   23ad8:	f603ebfd f3f7fd0c 0df70009 f3f7fdf8     ................
   23ae8:	02fa0e0a 03fefcfb 06f706fa ec090a0b     ................
   23af8:	06fbf7f9 f6fa020b fa07f309 00fffbfe     ................
   23b08:	01040d08 17fee7fd 0c02fcf5 f2fe00fa     ................
   23b18:	0ff71007 f8f1f4f7 fd0ffff1 0806f9f9     ................
   23b28:	fd010300 0a04fb04 faf9f500 fcfb0102     ................
   23b38:	f9021f02 fe040602 f304f907 fdf50af6     ................
   23b48:	0c01f10a 0b09f20e fa120107 09060502     ................
   23b58:	04fdfd10 0d0bfcf4 0100fcf7 030c0dfa     ................
   23b68:	11faf70a 060d0efd 03140300 f8f6f60e     ................
   23b78:	15140604 f003ff00 00fc0108 fd05230b     .............#..
   23b88:	f4f209f9 fd08fcf9 fef40e03 0df20509     ................
   23b98:	0400f61d 04fcff00 01050a04 1107ef02     ................
   23ba8:	1308fcfd f9fff6fb fc08f7fe 0af2fd00     ................
   23bb8:	fd1e0b09 031016f7 fdfa01fa 10e8f6fa     ................
   23bc8:	0810f6f9 f9fc12ff fc0a160b 0cfd0008     ................
   23bd8:	00070003 fa0416fe 09fb03ff f604f417     ................
   23be8:	0202fafd fcfffd06 050f040e 0e0afe00     ................
   23bf8:	ff000000 f5ff11fa 09ff0000 f51809eb     ................
   23c08:	f7180fff 0d010c04 05fc02f9 f70003f8     ................
   23c18:	f5fafe06 fc081115 fcf4fe0d 09fff305     ................
   23c28:	09fe0f0c 1afcfa00 01f6f414 0d08f3f2     ................
   23c38:	ff0d0509 090ff50a 0a0fffff f8f8f2f6     ................
   23c48:	fa0b0cf9 0cf3fdfd f20205fe ff100401     ................
   23c58:	fe0409ff fcf8010d f7f9fafb fb0ef8fa     ................
   23c68:	10071600 f0f3f502 02f2fe08 fd0afbf9     ................
   23c78:	05f5070d f4070812 1000e8fb f9f50d03     ................
   23c88:	0102ed0b 0508f800 04f400fc f80a07f2     ................
   23c98:	0cfbf307 f5fb050c 01040afc 000105f9     ................
   23ca8:	ff0cff03 0409f0fc fffe0b05 fd090d0f     ................
   23cb8:	03edfbf8 09fa000b 010605fc e7fefefd     ................
   23cc8:	edf4e8f2 02f5ff05 f5f502fe fd0101ff     ................
   23cd8:	f4e1f9fd 10f7e2e0 f5f7ebfb fe00fbea     ................
   23ce8:	f4f4f9fb dcf2e509 0016e5e5 f40e09fc     ................
   23cf8:	edfe0003 fbf3e9ef dde2f3e1 ee011cec     ................
   23d08:	f8ff03fa 06f6fffe ebf906f9 f8eaea08     ................
   23d18:	fe12fd1f ef07040d 07fc0401 0dedf014     ................
   23d28:	0efdfff3 05001607 f0ff14fd fdfa07f4     ................
   23d38:	f304f506 fffeeffb fb0500f3 fe06f716     ................
   23d48:	0cff09ef fd010efd de0015f0 13fae9f4     ................
   23d58:	07f7f7f4 f6000c06 f7fb0909 f8faf906     ................
   23d68:	fb030c0c 0dfcf5f4 03f306f9 03fafb05     ................
   23d78:	fbeefcf5 0d090e03 06faf5ff 0400f602     ................
   23d88:	050afffc f808f0fc fef9ff02 050517fd     ................
   23d98:	000008f4 f10c07f3 f6e90bef fdf900f4     ................
   23da8:	fbfaf5f5 f5fff7fb edde03fb 010ce402     ................
   23db8:	0b0705f7 09f5fdfc f8f402fe e8eafe0a     ................
   23dc8:	01010ef6 f1f5f802 fa07f606 05fbfcfe     ................
   23dd8:	ff0be8ef fcf5030e 10eeecf9 08f3f6f9     ................
   23de8:	e302f6fb 03f90afb f5fc0001 02fd0205     ................
   23df8:	02f9f60b eee8fe07 0709f901 fe13f5f3     ................
   23e08:	ffef07ff 040a0ee6 0df6f104 e5020702     ................
   23e18:	01091503 edf7fefe 06f4fc01 f9f5f000     ................
   23e28:	0aee0701 0bf90a06 18f500e9 fb0b00fd     ................
   23e38:	020203fd f2fdef14 f30ceff8 fe0afefd     ................
   23e48:	f0e6fc03 07fefdf2 12f316e6 faf1030c     ................
   23e58:	01fd0aeb 03e9090c ea0d1106 07fe0e01     ................
   23e68:	f40cfa07 0e08faf8 0407e70e fdf2fb08     ................
   23e78:	fcfbfdf8 14fa02f1 fc170cfe 0a0504ea     ................
   23e88:	fb0dedf8 f7fa14fa 0703edfe ecf111f4     ................
   23e98:	120df7fa 1d010006 0aff020a 02f008ec     ................
   23ea8:	04f0f403 f6fe0804 0f0705fa f5f9fafd     ................
   23eb8:	07040309 ee04f801 07041003 0405fef0     ................
   23ec8:	03e60701 07fdf8f7 14fcff05 01f8e504     ................
   23ed8:	0409040d f9f7f308 fb0dfc08 090cf707     ................
   23ee8:	0aeff413 ff0005f6 f0f90ff8 010a0cf5     ................
   23ef8:	fd0612f9 0cfcfcf9 ed08f605 fff20607     ................
   23f08:	f607f5fe 03070702 0602ff06 02f7f8f3     ................
   23f18:	ed04f9f9 fbf1f8f9 03040604 0a09fbff     ................
   23f28:	0b05ee07 f5f502f5 fdfeef01 0f0a04f5     ................
   23f38:	0701fefb f8020bef ff0509fd ee010cf8     ................
   23f48:	07f50aef f50d0103 0905f2fe e9f8f804     ................
   23f58:	f0f8f7fa 0509f6fd 01fb0901 f80a0509     ................
   23f68:	fcf50af8 1200e800 00fe1302 fcff10fe     ................
   23f78:	f4fb0709 fc01fb0b 130b0402 fefdfffa     ................
   23f88:	fc05fa07 01f8f904 0afdfded fdeefbef     ................
   23f98:	1402000c fc07f306 f101fcf1 f3fcf8fa     ................
   23fa8:	0df8f8f6 fa030e02 fc08ffed fdfd02f8     ................
   23fb8:	f8f3f1fb 0607fef5 fe090cf7 e9020c0f     ................
   23fc8:	f803f506 f3fafced 01fefbff fcf608fc     ................
   23fd8:	02f80202 fa02f6f7 09effdf3 08e9fffc     ................
   23fe8:	08fff30d fa02f101 f7fff9fb 021bf40c     ................
   23ff8:	0d03f903 f8f40101 effe11fe 02fd0d06     ................
   24008:	ff0a1bf9 f306ecfd fcf6f500 01fbf601     ................
   24018:	010002fc 04fa0312 00080df3 fc080200     ................
   24028:	0a01fdf6 06f61300 e0fe00fd fe0ef101     ................
   24038:	f3f30302 fa1a07f5 fcfa04ff 0ff10301     ................
   24048:	08f90ff1 fcfe0009 fdf805f9 fdfbfdf1     ................
   24058:	f9f4f30a 0cf4fe1b 0c04f409 fffcf4f9     ................
   24068:	06f4f609 0af704f5 fd0906fc fe1908f2     ................
   24078:	03fdf4fa e6fdfdf8 020ff7ed ff130707     ................
   24088:	f610080c 05fe1000 fd0402f1 030414ef     ................
   24098:	2105100c 010102f9 fbfffb01 eff4ef0d     ...!............
   240a8:	120a051d 0206fa04 f6070a13 fdf6f4f6     ................
   240b8:	15f5fcfb fa030c06 060dfff6 fc0105f8     ................
   240c8:	f5f9f4ef 0524f9f7 0c0c0407 fefa0700     ......$.........
   240d8:	f20c06f8 f5ebe7ef fafb1ff3 0011f100     ................
   240e8:	ff0b0102 f8f30408 ee01eef3 02f7ff12     ................
   240f8:	1805070d 0af4e1fe 000104ff 23f5e3ea     ...............#
   24108:	0204f708 ef11070f 0803f201 f202f8f6     ................
   24118:	0a05ebee 0906fcfe 050b0b07 f300fef4     ................
   24128:	03fa06fe fdfd0ef3 01f5f904 f60008f6     ................
   24138:	fcf0fff0 f3faeef2 05fe0509 0901f6f9     ................
   24148:	fffd01fe fb04ed03 0df7f6f8 f4f4f4ea     ................
   24158:	f10aff0a 0707fbfe fc00f8f5 f209ee08     ................
   24168:	02040512 090b18ff 07fc1104 f5f7f5f3     ................
   24178:	030408f7 020803ff f8fef7fc f503f002     ................
   24188:	fae8eff2 0405f603 f9fdfffb 02fe07fe     ................
   24198:	f4f60c00 fa05f101 02effff8 030500fe     ................
   241a8:	f909f102 f2eff20a f30efef8 fd08ff0e     ................
   241b8:	fe0bfa00 fdfdf8e7 fb03f201 08fb0cf8     ................
   241c8:	fb070300 eef8fc00 0907f906 0c07fdf4     ................
   241d8:	f706f606 ff010200 0502f802 f70afefd     ................
   241e8:	040302fc fc0807f3 f6f7fdf9 fb07fbf7     ................
   241f8:	fefa0ffc 03faf108 f8030007 060cfb04     ................
   24208:	f907f602 fa06fb0a 11f5fd04 f9fef7fe     ................
   24218:	f802feff 0c04fbfe 0b07fef5 0205f0ec     ................
   24228:	02fef5f8 f8fb0204 fb03fbfb fd0c0c05     ................
   24238:	fa0a12f7 070100f4 04fff908 fbff12f7     ................
   24248:	fbeffb0b fe04fa05 fcfc01ff 00050d0d     ................
   24258:	0800f600 04eefb0d 02fd04fc f90900ff     ................
   24268:	04f90a03 050d00fc 030af102 fb03f6fe     ................
   24278:	fc03fdf7 fafc0605 03ff0906 f20c08ec     ................
   24288:	0500fcf9 0df8040d 01f702fd fff8fcfe     ................
   24298:	0206fe0a 04fbfb11 fdfe0509 0bf50006     ................
   242a8:	ff00f90e 0bfffefa eff7fafc 08fbfdf3     ................
   242b8:	031103ff 0409f302 020205f1 ed0d02ff     ................
   242c8:	fe07fcfa fa0209fb fcfe0bfa fbf808fe     ................
   242d8:	05fe0106 fdfffbff f8fc0bf7 0bf10411     ................
   242e8:	0f0200fd 030f0504 fe03010b ff01fe01     ................
   242f8:	fefb01f4 ee04f6f7 0d070200 ff02f6fa     ................
   24308:	fb02edf6 010800fa ff0a06f8 000a0504     ................
   24318:	f706faf6 f7f6faf2 f5fd03fa fa090409     ................
   24328:	fb040607 f1070810 05f9f3ff 070709fb     ................
   24338:	05f501f9 0cfdf60b 0af6f602 12f9f901     ................
   24348:	edfafdf2 f9f704f4 0cfbfef4 0602f600     ................
   24358:	0205f0f4 f5f5000a fefb0108 f1fd07ff     ................
   24368:	fcfe02f5 08fafd07 08130412 0402f907     ................
   24378:	f4fa00fb 0302fa11 14fe0805 07f5fdf7     ................
   24388:	040905fc faf803fb 0cfef4f3 fc0403f3     ................
   24398:	0700f8f8 fa040b0a 030eeefe fff6f3f6     ................
   243a8:	ee060005 050d08f1 f8fcf70a faf40bfd     ................
   243b8:	030309f8 03f9f10c 0afefc09 f6fdfa03     ................
   243c8:	fff90013 030efc09 0bfdf5f2 080efb06     ................
   243d8:	06fafe04 f501f7f5 f8f8fef6 0508f901     ................
   243e8:	0c0605f4 00fff4fa 00fef2fa f90004f9     ................
   243f8:	f8040505 f906f7fc 060514f9 fffdfa00     ................
   24408:	fff40105 010307fe fe02f300 0202fa01     ................
   24418:	060d0304 00f7f5ff 0806fdf9 04f20807     ................
   24428:	fcf5f6f8 f30208f8 0a0a0006 0b0303fe     ................
   24438:	f3010406 0501050b fe070000 fcfffef7     ................
   24448:	05050108 01f500f0 0409f803 fcfffb0e     ................
   24458:	fff7f7fc 050ef101 fb01fd01 1002f4fd     ................
   24468:	0104ff02 fbfa0003 08fb06f5 090bfd03     ................
   24478:	ff01fd0e 0207feee 04fffff5 0902fb01     ................
   24488:	f9f50405 ff070804 fdfd03f5 04f3fcfb     ................
   24498:	040613f9 00060f04 fefefb05 01fe080e     ................
   244a8:	f601f6fe 0402f90b fe070106 09fbf9f5     ................
   244b8:	0307fa01 120104fc fff9fe03 ef090207     ................
   244c8:	000402ed fd00fa0a fa11f800 fefef5f7     ................
   244d8:	fafc03f9 f3fc050a 0401fe04 0af6fe01     ................
   244e8:	090f0ef9 01080911 04f60104 f6030b0c     ................
   244f8:	f3fa090f 0003fb00 0409fcfc 0f06fa02     ................
   24508:	0afa0103 070ceef9 f505ffff 060b0601     ................
   24518:	0a02f506 0309f305 05f50104 05f906fb     ................
   24528:	f80a0ef7 060ef8fc 030000eb 0b03faf9     ................
   24538:	f70f030c 11080404 fd0efef5 03fefb08     ................
   24548:	04f3fe02 07070d06 fffefcfb 04f40304     ................
   24558:	070404f7 020a04f4 080201ff 09fcfdfa     ................
   24568:	010efdfc f80300ff 03ef07fd 060709fe     ................
   24578:	06010403 fbec0300 fdfffd04 f3f30412     ................
   24588:	fc06ff01 070a0102 0505f908 03fcf906     ................
   24598:	fffbfef5 ff02f701 0cf907fe fe0700ee     ................
   245a8:	0406f4fd 0a07fc05 03fa0303 fe01f0f7     ................
   245b8:	01fb0017 fcf30608 f20a0501 0608f601     ................
   245c8:	03f80502 0309fff1 fbf7fe06 0301fffb     ................
   245d8:	ff040307 0b050007 0705fcf5 0401fefe     ................
   245e8:	03f7f407 0efc0907 03fd09f5 0afaf106     ................
   245f8:	ff0cf8fb 04fcf4ff f8110002 03f90106     ................
   24608:	f50108f7 effffbf1 fbf7fbfc 07f3f7fe     ................
   24618:	fa06f8f9 010b0601 edf1e6ff 0009fce3     ................
   24628:	f80cf209 11e90105 05030606 01fff5e7     ................
   24638:	04f408f2 06f0fdfc fd02edfc e1f6f707     ................
   24648:	0af901f7 ea11f906 fa11e7fb fff20201     ................
   24658:	f1f3fff9 11fefeef 0aec12ec fd0107fa     ................
   24668:	fa0f0100 f6fefcf7 0403f006 ef15e10a     ................
   24678:	0b080b05 fe040108 06fdf800 12fcf7ff     ................
   24688:	f8f20bfa e8fdff08 fbfef2fd 13f70b01     ................
   24698:	ff0cfdff 06fff00b f7f8ff0e 0a0504f9     ................
   246a8:	fb07eaf5 0d010af1 f9f806f1 f203fbfa     ................
   246b8:	090e03f9 f4fafb07 0909ff0c f0eceffb     ................
   246c8:	09f1f4f4 fdf50b04 07f60409 01ef0507     ................
   246d8:	f9f3faf9 fcf2fc02 fef60814 0904f90d     ................
   246e8:	fdfb020e f8f90601 100908fa 0b01effb     ................
   246f8:	0404fb04 f10200fd fc11100a fc08fcff     ................
   24708:	f90cf1f6 ff12f902 08ed0211 010a1106     ................
   24718:	f60603f7 00ec0e05 ff09060f 0205f2fc     ................
   24728:	f104080f 0009fa02 0005f9f8 fcf7ec0b     ................
   24738:	000d0b07 0803f903 04feff01 010a0d0e     ................
   24748:	f4fd02f2 f70405fd 070b07f9 02f7f0fd     ................
   24758:	fb0c0903 fcfcff05 05f301ff 0c030df6     ................
   24768:	06f8fc02 02f80305 ed000001 f9f5fd00     ................
   24778:	070c0812 0f15f6ef 0000e602 f6fff5f1     ................
   24788:	04f10a11 00f80600 fe0d0e08 e90006f5     ................
   24798:	1003fc05 fef6f801 f6f9fcff f6040d02     ................
   247a8:	0ef7faf8 09020cf4 01020ffe fdec020a     ................
   247b8:	fcf41510 f60bf8f3 0703fcfb 0fff0b12     ................
   247c8:	f7f7ebfc 0703f602 19fe14fe fc06f912     ................
   247d8:	fc110005 0c0c09fd 021508f9 11f70017     ................
   247e8:	03150906 effefcf8 f71112fd 1afdf10e     ................
   247f8:	050100fb eefe15f8 02fdfa07 fdf00b04     ................
   24808:	0a1207f3 f802f80a fcfc1212 fc03faf3     ................
   24818:	fd00f516 05fc02f2 21e907fb f209eb09     ...........!....
   24828:	0f0a01ee f60403fd 00fe100d 0420fe06     .............. .
   24838:	fb0808fd ee02f5fb 0df3fd06 fef7e9fd     ................
   24848:	010a1905 06fefd10 0be4130e ff12f604     ................
   24858:	fcfcfced 03ff0316 fcf906fa f1f4e503     ................
   24868:	00070803 0af9faef 08fb050d 02f7f0f8     ................
   24878:	ecfb10eb f3040f09 0e14f408 0f0701f6     ................
   24888:	fc00f8f2 11f605fe 0005fbfa fb100afd     ................
   24898:	fe040007 0aef04fc f208ef07 f209f8f0     ................
   248a8:	07f2f503 0501fcfc f506eef8 0f0c0ceb     ................
   248b8:	100604f2 f4f5fd00 080af1f5 f5fcfff5     ................
   248c8:	f41c1222 03140406 fc09f4fd 0507fdf9     "...............
   248d8:	1cfa010c 05071010 f4000bfa 050d0e04     ................
   248e8:	07ed1c00 030afdf9 00ff07fd 11fafd0f     ................
   248f8:	0c0d0703 0905e710 0109fbf5 14010306     ................
   24908:	1005f906 050e1c04 f5ef01fa 03f7f912     ................
   24918:	fa09fc03 fffdfdeb f60bfafe 1704090c     ................
   24928:	fff90801 02f71206 01f9fd03 13e70600     ................
   24938:	000402f4 f6fafff5 fe07060d 0b0b0900     ................
   24948:	e9fbf402 efea04f0 0c060af8 08060b03     ................
   24958:	fcfe0404 eaf3f7f0 0ae8fc05 fc17f501     ................
   24968:	f9020104 061402f9 fff0f90d 051300f1     ................
   24978:	060010ed ec061104 11fcf9fa f500f80b     ................
   24988:	f8101001 01f0130e fa0805f8 00100cfe     ................
   24998:	02f5020a 06ee0df9 070e000d f1efea02     ................
   249a8:	07f71004 0402f516 0a12f204 fb0a0207     ................
   249b8:	080d0502 08fcfc05 fffaf2f8 f20804f2     ................
   249c8:	feff0ffc 04e602f3 ef07fbfd e810f4fc     ................
   249d8:	0cf107fa f305e80e 0a150200 fbfbfe0b     ................
   249e8:	0ef300fb 1403f8fd 04020403 eef90afe     ................
   249f8:	f910f6f8 120bed10 f20a0700 060cf7f3     ................
   24a08:	f9fef10d 0004eef7 f604fbe8 03f51208     ................
   24a18:	00fc1308 0600fef9 f209140e fff2f807     ................
   24a28:	f60bec0a fefffbf5 12f912fe 08f10bf8     ................
   24a38:	11fcea03 faf4f6fd e90218f7 f50c07fe     ................
   24a48:	0b0bfa14 f50dfaff 080a01f5 04f4f809     ................
   24a58:	0af9ea06 f0fd0afa feeb0503 0aecf902     ................
   24a68:	fcfffcfe 0306edf6 01fa0508 02fdf8fe     ................
   24a78:	fc03f7fe 0414120c 0cfe05f3 0cfdf0fc     ................
   24a88:	fff10b03 f7effee4 fff11113 fc08f000     ................
   24a98:	f709f9fc f70bf6f7 f8ef0206 14010606     ................
   24aa8:	fdfc02ed f4f113fa 08f7eefc fff1f7fc     ................
   24ab8:	ed02fdf7 fffbf209 eef4f7fe fb09e6f2     ................
   24ac8:	0efee6da fbef06fe 1109edee 010af804     ................
   24ad8:	f5f90406 f8ecf1f8 fbeaf408 0009f9ea     ................
   24ae8:	fd0b1016 f8ec00f9 0108f8ee f0f6f3f6     ................
   24af8:	ff070805 f9ffebf5 07f605fc 01090815     ................
   24b08:	f9f0f2f7 040e02fe 02fd0cfa f4f2fa04     ................
   24b18:	fdfb01fb 160efafa f0ef020a 00f800ff     ................
   24b28:	fae300f6 fdfe00f7 07090607 f7030815     ................
   24b38:	01f8f602 fa10fbf2 0707fffe 08080e03     ................
   24b48:	f101010b f30001fd 07fbf6ec f406faf9     ................
   24b58:	03ff1005 fcfc0800 ecf4ff06 fd00f9fd     ................
   24b68:	0d0510f8 f8fb08fd fefb0efa 08eb030e     ................
   24b78:	02020bfa ff031804 ffef0d07 0100fdfb     ................
   24b88:	070c02fa 0401fe07 06fd0116 fd00fe0c     ................
   24b98:	f80005fb 1102fdf8 0afaf801 fc180a05     ................
   24ba8:	05fd0903 f60309f1 f9090309 05000d03     ................
   24bb8:	0901ff02 e2f703f1 01fcfefb 03ff0bfa     ................
   24bc8:	f30108fe fdfe0909 04f7feea 0107f9fb     ................
   24bd8:	050e0f0a 0beffe09 05f80014 0301fc03     ................
   24be8:	120805f6 f8fd00fa fb200a02 f1070900     .......... .....
   24bf8:	f30f0afe 0209fc03 040608fa f20600fe     ................
   24c08:	03010501 f904fdfb f7fffefc f7fd07f6     ................
   24c18:	f8fa0111 03060303 0006f5f3 040701fb     ................
   24c28:	0aebfcff 00040214 fd09fefe 13001504     ................
   24c38:	0bfe0604 f815f4fa fc0202f0 f9050efe     ................
   24c48:	fe1506fa 0701fb02 fff30303 fd0808fa     ................
   24c58:	05edf903 fdff0500 f602fe03 fbf2fe03     ................
   24c68:	0e030006 03fdfa0b 04fc0b04 04f2fafe     ................
   24c78:	0d1101fb 001304f9 0b050cf4 f7fe09f5     ................
   24c88:	0810fd06 0c0f05ff effc1712 000600f3     ................
   24c98:	04fa00fc 000204f6 fff90304 02ebfc04     ................
   24ca8:	00fd02f1 ef0702fd 05fffb00 f900f705     ................
   24cb8:	02080009 fffbfb08 06fa03f7 fffe04ff     ................
   24cc8:	fe01f2f9 04f7fef2 030a08f9 060502fa     ................
   24cd8:	f504020f f7070601 0709f5f5 fefefc04     ................
   24ce8:	00020008 f4f90d01 07fb00ff 03070901     ................
   24cf8:	ebf8faff f1fd0aff 100afe01 f0f0fc04     ................
   24d08:	0a0cfe09 f8fe0301 0501f7f7 f5110c06     ................
   24d18:	00f90c04 edfffff8 050e0503 070e0cfb     ................
   24d28:	f6f92015 060cf9fd fd00110d ff0703fc     . ..............
   24d38:	08f30506 09f8fcfa fcfa1306 05030305     ................
   24d48:	fbf5050a 1001fefe 00fef606 03fb0108     ................
   24d58:	faec03f5 1005080b 00090e11 05fe01fc     ................
   24d68:	fa010702 03fd0307 05020110 f803fe08     ................
   24d78:	fffefa06 09080403 f405f5f7 0406f3fc     ................
   24d88:	06f3050a fbfd0a08 f9fa12fb 04fa0a05     ................
   24d98:	04040107 fff3fafd fefcf4f6 070108f9     ................
   24da8:	0afc0508 040e0f0c 0a00fd03 fa04fcf8     ................
   24db8:	f909f907 f60700fb eaf71004 f70406f9     ................
   24dc8:	06f6f4fd f9fffa03 00fc0d02 0bfcfd0e     ................
   24dd8:	fff7fafb fe0a02fb 01f709fe 0b0b09fb     ................
   24de8:	05ef000a fcfffbfc 09eb00f8 1000f502     ................
   24df8:	001c0ffe 00fc06f6 edf900ef 0dfef100     ................
   24e08:	01fff20d f20bfbff fcf4070f 0203fcfc     ................
   24e18:	fdfd0c05 f8fd1507 fcedfbff fef40401     ................
   24e28:	fbfa06f4 f6fd000f 08070209 f8040800     ................
   24e38:	04faf3fa 0c0609fe 0afcf906 030701fc     ................
   24e48:	0205fd13 f7060800 0604f1fc fe05fcf9     ................
   24e58:	f9040dfc 01fff706 fffb1302 fb001307     ................
   24e68:	060502ff 07ec04fa 01f907fb 0503f107     ................
   24e78:	fa07fe01 0c04fdfd fbf600ff 06f0fe0d     ................
   24e88:	07fe0c08 fcfcf8f2 06090109 06060508     ................
   24e98:	01fc01f6 0109f901 fefffa01 f20211f5     ................
   24ea8:	0206f9fb 0cfe0d0a f8fa0b04 f7fc0506     ................
   24eb8:	f9f6fd16 fb000afd f903fafe f708030e     ................
   24ec8:	0105f900 fdf0f8f5 f904ff0d f1010005     ................
   24ed8:	01f9f8ee 0012f908 f2fef800 fd01f2f4     ................
   24ee8:	fc010b07 fefcf3fb f2fc01f2 f90001f9     ................
   24ef8:	020b0205 faf40105 f7f003f3 fef30404     ................
   24f08:	0b00f808 fefefa03 faf80200 fefe01f5     ................
   24f18:	05f6f000 f803f2fa 0801fe06 f200ffff     ................
   24f28:	090e0202 faf9f80f ffebfff4 060b05fe     ................
   24f38:	fefb07f9 01fb1600 f9020400 08090000     ................
   24f48:	fff30207 f6f90202 f6040b02 f6fa08fc     ................
   24f58:	fefffbfd 0004fe03 04f30101 0004ef07     ................
   24f68:	f7effcf9 0005fc09 fefff9f4 fd0dfe08     ................
   24f78:	fffcf1fd 0303fd02 f304fd00 f407fdfe     ................
   24f88:	fb08f8ff 0ff7f8f4 fa020f0a 04f7f1fe     ................
   24f98:	0cf50102 fdfe02f5 0b0c0902 0ffa0306     ................
   24fa8:	f909f6fa f908f401 fdfc0511 1403020c     ................
   24fb8:	fa06f610 060002f5 11fafe00 fd02fcf7     ................
   24fc8:	05090602 f5f5f9f6 02faf1f3 0709ee06     ................
   24fd8:	030108f7 f6fffe02 05f4f70b 0203fc03     ................
   24fe8:	f20cfef7 fdfbef00 03fb00f7 f4fd0108     ................
   24ff8:	0102fc00 11fa0401 05f505f6 09faf209     ................
   25008:	03f80101 04f70704 040f040d f9f901fd     ................
   25018:	f407f7ff 04f9fd02 f901fd12 fdf60aef     ................
   25028:	0209fef7 05fbf3f8 f4fdf702 f7fdf9ee     ................
   25038:	fc030001 02fc01fa 00fcfafc 04fffeff     ................
   25048:	09fc0403 fff60303 01ff0304 0004f7fe     ................
   25058:	fe02fcfb fb030000 fafe0102 fcfefd01     ................
   25068:	f4f201f9 fef1ed00 0bfe02fb 070400fc     ................
   25078:	0df3f8ff fb06f0ff fc0500f1 0400fdfd     ................
   25088:	08fef9f2 02fb0002 f6fe06f6 01f710fd     ................
   25098:	f5fc0f00 ff010a04 fa05f8fd ffef00f6     ................
   250a8:	fcfb0c06 f4ecfefb 06050303 fbfffdfd     ................
   250b8:	fb02fbfc 08fb0507 fd07f50e 020807f8     ................
   250c8:	fff90300 fafcf702 fe0af8fa f908fcf6     ................
   250d8:	0a000301 f90b00fa 02f500f9 f9fe0006     ................
   250e8:	f501fff3 f6fa010b 02fa02fa 01f6010a     ................
   250f8:	fffff4fe 0d050108 f5f7f6fe 0308fc0c     ................
   25108:	06fcfaff fa040704 010afef1 0604fbfd     ................
   25118:	050300f9 fdfff700 f60d0204 f4fb0ae9     ................
   25128:	f804f2f5 06fd0500 f80201fa f7f5fa06     ................
   25138:	fe010d0b fcf4060d fd0a0305 f7f6fbfe     ................
   25148:	0bfafa05 03fb04fe 010a0802 06fa07ff     ................
   25158:	fcfaeefb 0006f101 05fd08fa 020f0702     ................
   25168:	f60bf6fd 04fdfbf3 fe09faed edf004f3     ................
   25178:	fb070e0d fbf4fef4 f2fa0b01 fc07fcf7     ................
   25188:	0b0102fe fb0903f7 fb05f0f9 05040002     ................
   25198:	09030bfa fa0c0401 01ec03ff 08010100     ................
   251a8:	0b00ec06 04feee01 fc03fbf6 00fbf105     ................
   251b8:	fc0409fa ff060df2 ebfbf5f9 08fffafe     ................
   251c8:	fef401f9 ef02fdf4 fdf80804 fcf6fffc     ................
   251d8:	f7fef707 faf3fff3 01f7fc03 f8fb0802     ................
   251e8:	0306fcfc fbe40100 04f905f0 0103f603     ................
   251f8:	080502fb 00fa0605 f502f501 0bf7fef9     ................
   25208:	fb0407f2 090300fb 06fb0700 f1f7feea     ................
   25218:	f5fafcfe fdf5f703 f7f4ff04 f2fffd03     ................
   25228:	0af4f603 fc010303 fe02fcfc f705fbfe     ................
   25238:	03e204fd fdfd06fa 0c05f607 fffe0603     ................
   25248:	fa0902fa f002faf7 f5f9f5fa 06060e02     ................
   25258:	fef6fb08 03f40bfb f7f6f8f7 f50607fd     ................
   25268:	f9f8010d 08fdfd06 ef07f807 00f2f3f4     ................
   25278:	0cfbf7fd 0afafc03 f7060708 feeb01f8     ................
   25288:	0800f5fa 09f9ee02 fefd09ff 080301fa     ................
   25298:	fdf9ef0a fb03ff03 fc0908fd fc01fef9     ................
   252a8:	01faf709 01f4f9ec f30a01f2 05f4f606     ................
   252b8:	fef7fcfb ec05ea00 f5fdfffd 0005fffa     ................
   252c8:	f901ff05 0800f90b 06ea0900 ffeef3f8     ................
   252d8:	0e00fe03 09f500fc 06fdfdef ff01ec03     ................
   252e8:	090702f9 0d03f8f8 fcf4f505 ff00fd05     ................
   252f8:	faf30af6 f403fff2 ff04fcfb 06fff80a     ................
   25308:	fb02fff4 fc02edff f7fe08f8 f5fefdfb     ................
   25318:	05fd0c0d 01ef06fe fafe05f9 f7fafbff     ................
   25328:	0902fe05 04f8fe00 0005f606 f6f0fb0a     ................
   25338:	05fefc03 f90501f4 020afc06 fdfd04f9     ................
   25348:	fcf9fef1 f5fcfaf9 0903f903 0009fe0c     ................
   25358:	060400fa fafb06f3 fdf80009 fb04f202     ................
   25368:	0bfe10fd fe00fff4 07fdfeff 00020002     ................
   25378:	fe0a0909 0408ff06 fef60006 fef30409     ................
   25388:	f7fffdfd 13faf80c 09f40cf6 06fbff09     ................
   25398:	fa03090e fffaf5fd 0000fefb fa0af605     ................
   253a8:	f8020400 0000fcfc 00000504 0cf605fe     ................
   253b8:	ef0009fe f5fd0603 03f2f9f2 0203f7fe     ................
   253c8:	01faf7fe 0305fdfe effffe09 08fcf4fa     ................
   253d8:	0a02fffe 0bf0fff3 fa070504 02f4f7f7     ................
   253e8:	0b06f809 f605f907 fdfcf3fb 09f806f7     ................
   253f8:	09060504 f9fe0108 0af40207 f8f604f8     ................
   25408:	fbf2fb0d fff80b08 fc0200fa fa0ffd10     ................
   25418:	05f7fc04 040500ee faf3f601 080100fc     ................
   25428:	0700000e f4f70206 f3f6f8f9 f90105f6     ................
   25438:	04f8fa02 0800050d 05fe07fc 02fa0800     ................
   25448:	fa04ff0a 0a04fcfa fc04050d fafffdfd     ................
   25458:	01f7fbfa 00fd08f5 0bfc1008 f9fefe08     ................
   25468:	08fc00f7 fcf5fdff 00fafe02 f3040303     ................
   25478:	f5faf8fc 0000fbfe fdfc0002 00fbfbf5     ................
   25488:	ff0602fe fff7f8fd fdfc0004 fc01fb04     ................
   25498:	050807fa fdfb01fb 020004f8 f9fb02fc     ................
   254a8:	f700fcfb 0a03fe05 fffaf8fb fefdfef9     ................
   254b8:	02fcfa03 000006fe fbfbf904 fe01faf7     ................
   254c8:	fdf9fcff fcf60803 fdfc0605 fcf908fa     ................
   254d8:	02f6f7f6 04f4fa03 0a01fbf8 050305f9     ................
   254e8:	03fe020a fdf9f501 060500f5 fbf901f7     ................
   254f8:	03fe0bfa f6fefc06 fb05f502 00fdfffe     ................
   25508:	03f40404 02fefa08 04fd08f5 f8f7fe02     ................
   25518:	f5f907fb fb06f402 fe020204 00ff0503     ................
   25528:	08fefb07 04fa0001 0508fcfe fefcf7fc     ................
   25538:	fe000507 fffbf7ff f801f300 04fafefe     ................
   25548:	fbf9f8f4 f5f702fa 0104fcf7 09f9fd01     ................
   25558:	fe0605ff f8fe04f2 030001ff 02060508     ................
   25568:	0afbf9fc 000100fa f504fb09 0605fbfc     ................
   25578:	04fb0202 00f7fc03 fffafd07 f9fd01fd     ................
   25588:	03fc02fb 0102f5f8 05fff900 f7fefe02     ................
   25598:	02040800 ff07f903 0201f704 fefef9fe     ................
   255a8:	fcf503f1 03ff00f9 05f1f9ff fa060308     ................
   255b8:	0102fbfb 00fef5f8 05f6f705 02f10005     ................
   255c8:	faf50b00 f5f4f5fe fa05f8f9 0501fc02     ................
   255d8:	f203f904 0101fa01 fb0500f5 01010604     ................
   255e8:	0206faf8 080404fe fbfc02f9 ff0005f9     ................
   255f8:	f8fe0105 fcff06f9 f70700ff f3f9fafc     ................
   25608:	fa01fffc 05f9f500 0501f8fa f5fc0100     ................
   25618:	01fffafc f700f9f5 fafffdf7 020501fc     ................
   25628:	00f6f808 0408fffb fef806fa 0304fcf8     ................
   25638:	fff8faf7 f801fbf8 fcf903f0 fafafffb     ................
   25648:	f8fc03fb 06fef7f7 f8fdf407 fc050208     ................
   25658:	faf8fb01 06f90202 f7fd08f8 fcfefd03     ................
   25668:	06f9fe06 05010302 0005ffff f8f6feff     ................
   25678:	f9fcf8fd fd0402f8 f8f90102 fdfcf9fe     ................
   25688:	f2000105 03f906f0 04fffb04 0103fdf6     ................
   25698:	f706f803 01f6fafe 0100f605 fef802f9     ................
   256a8:	03f606fb 00f60804 fbf7f800 040003fb     ................
   256b8:	010702fb fa050006 03f7f505 fcff00fb     ................
   256c8:	fff40501 f900fdf7 04fcf8f3 f1f7fa00     ................
   256d8:	00fc06fd f9f70a03 f004fbf8 06fa00f5     ................
   256e8:	f3f6f601 05f7fefd f7f603fc 06f301fc     ................
   256f8:	fd030606 05faf3f8 07fa00ff fc09ffff     ................
   25708:	fcfef904 f7faf80b 04fdf8fc fbf805ff     ................
   25718:	0602fcf8 0df601fd f7f700fb fa04fbf2     ................
   25728:	fef90000 fa05fffc f708fd02 f9fdf9f9     ................
   25738:	f803feff 04f70408 f7000703 ff000000     ................
   25748:	00fdf9f9 0103fd01 02fbf2fe f903f6ff     ................
   25758:	02f504fe 03fdfaff fefdfdf8 ff0209f6     ................
   25768:	02fb0500 f202ffff 02fbfefc 03fe04f9     ................
   25778:	0202f503 f90af7fe f3fdfcfc 030503fd     ................
   25788:	f403f604 f900faff f6040802 06f3f0f9     ................
   25798:	f9faf7fc 0501f8fc 010605f9 f6fb03fe     ................
   257a8:	fd000500 f5f9fff7 f7f6fdf5 0900fffc     ................
   257b8:	f0fdfafb f6f9f3f7 0301fefe f407fbfe     ................
   257c8:	fe0c06f8 f5f906f9 0501fd06 00fe0508     ................
   257d8:	0002fffc fcfe00f9 fff8f904 faf900ff     ................
   257e8:	fbf6f4f8 fa01040a 03fa0604 f9f8f6fb     ................
   257f8:	ff08f8f8 f6fefffa fefbf801 fbf8fffb     ................
   25808:	08fc04fb 0700fa00 fa01fbfc f7fbfdfa     ................
   25818:	f9f106f9 05fffd08 f6fc030a fc0402f6     ................
   25828:	02fb0206 fff6fd09 0005fa00 fa000203     ................
   25838:	fefcfcff 05fffd09 050300f2 fffc0500     ................
   25848:	f606fe01 01f1f9fa f4fefb09 fffd06fb     ................
   25858:	fefc0102 0103f9fa 0406f7f8 02f5ff03     ................
   25868:	fbfbf9fc f6f70405 f902f802 ff0306f5     ................
   25878:	000001ff fd06fc07 00050202 f8fafe01     ................
   25888:	0401fd06 050405f8 030b0103 0700fd03     ................
   25898:	0704fefb fe05fffb 0601f703 fcf907fc     ................
   258a8:	0306f8fd 000a03fc fc03fa09 040105f9     ................
   258b8:	fcf9fd07 fdfbfb01 020b09fd fffa0703     ................
   258c8:	070009ff 01f9f106 fff701f8 ebf2f600     ................
   258d8:	fc0301fe f5f404fa f4f603fa 08f3f2f3     ................
   258e8:	faf0f7e7 ff040bfb fcf1f502 fafcf7f9     ................
   258f8:	eb0d06fa 03f4effc f7fefb0b fbf5fbec     ................
   25908:	faf8f604 fbeb0705 00fef7f0 fd0f0b01     ................
   25918:	00f902ff fbf6f4f4 f4f0fbfb 081807f5     ................
   25928:	07f5fe03 fff4f904 0400e9fe fff0f7f8     ................
   25938:	07040308 faf8ff03 0100fcf4 06fd0204     ................
   25948:	0b05fcfa 090b06f8 f505f9fa f1fefa02     ................
   25958:	010b0301 fd000005 f607ff07 f5f3fdff     ................
   25968:	faf8fefc 040302f5 f9fafc00 fb080bf3     ................
   25978:	03fb030a ff02fffd 06f10305 03fff50a     ................
   25988:	03f5e90a 01fbfbfc fffa0407 0605040b     ................
   25998:	fa0bfdff fcfbfd01 f50800f4 050ffb02     ................
   259a8:	f2060afa fb000300 09f50f03 04fc02f9     ................
   259b8:	feff07f5 0401fd0f 03f90ef5 fefcfb0c     ................
   259c8:	fe05f9ff 0a03f90c fd02f706 fbee0001     ................
   259d8:	0801fafd 0fffff01 000a0302 0004f4fa     ................
   259e8:	fa05fd04 f70f0501 020f0204 f9f208ff     ................
   259f8:	07ff000f f5fb00fe 06010a00 030109fe     ................
   25a08:	fb03fb11 0500f8f9 f4f7fe02 f100f9f9     ................
   25a18:	09020109 03faf6fb 06fff312 f8f3fff1     ................
   25a28:	0ef611f3 fa150205 0b06f9fc 0006fbfe     ................
   25a38:	f90a04f8 050b010b eff90704 ff041803     ................
   25a48:	07f507ff fdfc0d0f 08000bf9 fbf7080e     ................
   25a58:	04f7fe01 02f9f7fa 03060501 0bf9fffc     ................
   25a68:	01fffa03 ff02faf9 0008030b 07faf8f7     ................
   25a78:	f9fbfb06 fb05fff1 fe0efdf3 0b0b0ff9     ................
   25a88:	07ff050b f8fe01ff fafc040a 00fa03fe     ................
   25a98:	0af20a06 0d01fbfe 06010b0e fcf7fcff     ................
   25aa8:	02fef306 fc070005 0c060d03 fd02f80a     ................
   25ab8:	fdfcf503 09fffef7 f7fb0202 f80f09f6     ................
   25ac8:	fc0d03ed f102ffff fa09070d fd060400     ................
   25ad8:	f3010c06 fe120907 0af802fe fb000501     ................
   25ae8:	0607fbf6 07060108 00ed0502 f503f803     ................
   25af8:	fb07fc06 080a0302 0500fe02 00faf3fd     ................
   25b08:	11020c01 f5010101 f902fdf6 fcfd02f3     ................
   25b18:	fe0002f9 fefa020a f8fcfe02 f8fc0502     ................
   25b28:	f90701fa 0e0006fe 0af40d13 fdfff7fc     ................
   25b38:	f2fd0008 0302fe08 05ffff06 f709fe06     ................
   25b48:	fe03fb08 0dfaf409 fcebf504 0bfa0304     ................
   25b58:	f907f6f2 f50cfef8 ff10fcf1 04090002     ................
   25b68:	f307fcfe f502f500 01f8f8f7 000706fa     ................
   25b78:	0c0105fa 09f100fd 00fefdf9 f403f608     ................
   25b88:	fb0905fa fafdfc07 fa06fe0d 02020204     ................
   25b98:	1001fb03 0d09f8fa 05f8fe06 0afef201     ................
   25ba8:	050d04ff fe02fefd 0a08ef02 f6020800     ................
   25bb8:	fc0005ff 0bf502fc fcfa0706 fff2fef0     ................
   25bc8:	fdf50201 fdfc0d01 04faf503 f9f5fc06     ................
   25bd8:	04fdfd07 f90af801 0406fb07 fe020301     ................
   25be8:	f4f804fa 0704fd04 0101fcec fb0704f1     ................
   25bf8:	00fef3fe 0706f3fc f30a0b0c f3f90903     ................
   25c08:	fff5ff01 0802f500 05f402f0 0cfbfdf6     ................
   25c18:	f6fcfc0a 0e04f902 f4f80000 f4fafd07     ................
   25c28:	fff8ec01 0afffc01 0e0801fb 01fcf405     ................
   25c38:	0301fff2 fb02fa00 00fafcf7 010801fa     ................
   25c48:	00fcfefb 0e030404 f500fd0b fef708f8     ................
   25c58:	000a010b f5f5fbf5 00f705fa fcfdf5f9     ................
   25c68:	07fb010a f9fa030a 030800fd 03fef4f9     ................
   25c78:	02f7f4fe 03040cfd f5f6fa08 0bf904f8     ................
   25c88:	07fef4fa faff03f7 fafff60e 0a0c00fa     ................
   25c98:	0504fa00 fcf805fb 0afafc00 0610fdfb     ................
   25ca8:	060006fa 02f9f9fe 0802f5fa fd090609     ................
   25cb8:	fefff4fb 04f30401 fb02ecfa fe0afef2     ................
   25cc8:	02f50506 f903f5fe faf7f9fc faf703f9     ................
   25cd8:	fffb02fb faf2ff09 f5f5f406 fb0409f4     ................
   25ce8:	ecfcff03 fdf7fe03 0302f5fa 030001fc     ................
   25cf8:	0400fdff fdfef5fa fe01fafb 05fe0801     ................
   25d08:	f4f9fdfe fcfdfaf8 f3faf5f9 f9f507fc     ................
   25d18:	03fef8f5 f6f7fcf9 ef0b07f1 04fffafa     ................
   25d28:	f60103fe fd0003fb fcf9fc0b fbf4fafb     ................
   25d38:	f600faf9 f60505fb fff9f3fa 04fd0203     ................
   25d48:	fefbfbfe fdf506fc fcfff7fb fbf5f6f9     ................
   25d58:	f800fafe fa05f1fc fcf1f801 f9fef709     ................
   25d68:	04f3f3fd f4fef4ea fbfbf5f2 fc01090c     ................
   25d78:	f901faf2 01fef508 060602fe 04fef101     ................
   25d88:	f10cf902 0400f003 f8f4effd fc00fe0a     ................
   25d98:	fc08f6fd fff91309 0a0a0602 000a0c03     ................
   25da8:	fd04ff0d fd01f2f5 f4fefa00 fd010505     ................
   25db8:	00001003 e80509fe 0807fdfc 0e0302fd     ................
   25dc8:	fcf70910 0ffbff09 edf6fefc f809fbfc     ................
   25dd8:	0cfdfdfc 06edf3f7 fb0c080b fce7f7ff     ................
   25de8:	0bf209f0 0700f2fb f505f2fc 04f8f9f5     ................
   25df8:	02fefcf8 01fdf4fc fa070800 06ff0df3     ................
   25e08:	f6f9fc03 fefb0502 f70304f9 f4f805f7     ................
   25e18:	fbf5f60c fdfbfafd f6fdf1fa 08020df9     ................
   25e28:	0b090808 03fcf501 fafb0703 f1fffff9     ................
   25e38:	0700fdf8 0a0206ff 0f0c00f2 fd08f90f     ................
   25e48:	0ff9edf6 f1030805 fa00fcfb 0b0bfcf7     ................
   25e58:	f9f9fdf5 fd0316ff f9020803 fa00fd0e     ................
   25e68:	ff0b0601 fb02faf4 06f809fb 11f1fdfd     ................
   25e78:	fcf107f6 0afc0201 f8ff08fb fef901f5     ................
   25e88:	0306f602 0101f7f8 f700f505 fdf9fc02     ................
   25e98:	010609ff 03f603f6 05070202 04f4f8f9     ................
   25ea8:	f7fefbf4 f5ff1302 f20003fc fbf70505     ................
   25eb8:	f9f403f5 faff0ff8 03fdfbfc f9fbf3fe     ................
   25ec8:	0300f9f2 fafcfe08 0b09f6f7 0dfcf8f2     ................
   25ed8:	0903fff7 fdfdf5f9 04fcf2fc fe0302fa     ................
   25ee8:	04f9fdfa 0904f805 f5fdfe05 fffbf4ec     ................
   25ef8:	f8ff0c13 f806fd07 f7f907fb f0ed05fe     ................
   25f08:	f9020e02 07f202ee f9fd0205 03f1fa04     ................
   25f18:	01ef110b 0606ff0e f8fafdf6 0207fe01     ................
   25f28:	fb06ea07 0efdf3fc f6010406 f80102ea     ................
   25f38:	000406f0 070600fa f40802fd fdfffaed     ................
   25f48:	f103fc02 ec050a02 f1fef0ff f9f603fc     ................
   25f58:	ff0d0707 0bf1fdf6 fcf2fc0d 01fc0c06     ................
   25f68:	00ff07ff 000af4fb 0702f6fd 1909f8f8     ................
   25f78:	0e03eefd fa0d0a00 fef600fc f70e0bee     ................
   25f88:	0b0802fa f4faf9f6 fd000412 0806f909     ................
   25f98:	ef040704 faf302fe 0a03f90a 0901f105     ................
   25fa8:	fdff0302 03f9fbfe 05ed0416 0401050e     ................
   25fb8:	f7f711ff fafa090d 1f00f405 0300f800     ................
   25fc8:	fbfcff01 01f6fced f903faed fb19fdff     ................
   25fd8:	f8fe0dfc fff0000d 080d05fc ef040708     ................
   25fe8:	f8040afe 0507f706 02f003fe 09fefef2     ................
   25ff8:	f8fe03f6 f6fb0706 fef8fa00 f0fb03f4     ................
   26008:	08050108 17fefefe 0efcf606 0002170e     ................
   26018:	0d00f8f2 f20205fe f614f9f3 fb0511f4     ................
   26028:	f5ff050a 0303f6fe fc0201fe f00c10ed     ................
   26038:	00fef508 07fa04f3 fbfe12f6 f9f900fe     ................
   26048:	04eefd01 f8fbfd06 f4fd09fb f8fff901     ................
   26058:	00f7fcf9 0101f7f8 f903f908 00fa0af9     ................
   26068:	05ff06f9 ff01eefd 06010406 f5fbfbf8     ................
   26078:	04f5f9ef f1f8fefe f9fe03fc f6fcfef9     ................
   26088:	0d0305f4 010005fb e9f2f7f2 01ff0c0b     ................
   26098:	f803fffc f9f50002 fe08fd00 f6f7eff6     ................
   260a8:	03f1f60d 080a0a08 fdfe06f8 fef5fef5     ................
   260b8:	fbfbf5f5 070afbfd 0506fe0e 0205fdf5     ................
   260c8:	f4fffd06 fafa0601 ef0100f3 00f1fbf9     ................
   260d8:	080000f3 f5f201fd 05fc07ff fafdfd0b     ................
   260e8:	f4ed0308 fcfcf907 04f7f7fa 00f4f803     ................
   260f8:	fdfe07f5 03f6ff0b fbf2fff3 fb04f7f0     ................
   26108:	f1f7f801 08fcedfb fbfef2f2 edfcfaff     ................
   26118:	f7030803 fdf20bf6 f201f3ec 06f9fe02     ................
   26128:	f4f50bfb ff000ef1 080dfbf1 faf5f2fe     ................
   26138:	010af90c 0001f60b 0df6fdfd 01f60204     ................
   26148:	f8f10106 040100fb 040afefb f8f5f7f9     ................
   26158:	f8fbf70d f9fcf6f5 f80600f0 01fd0503     ................
   26168:	08ec08f8 01150401 f7f309fb 07edfdf6     ................
   26178:	faf20601 f0f7ed0b fafcf1f7 faf8f904     ................
   26188:	f401f9fa fffcf6f2 02f9f7f5 f9f80cff     ................
   26198:	fd0400f7 0efbfef1 f5f7fbfe f402f7fc     ................
   261a8:	f4faf400 fcfcf80b fdf4ff06 0df60001     ................
   261b8:	0b05fc02 00fdfa06 04f60005 ff08070c     ................
   261c8:	0e0aeb02 fcfbfafe f90cedf6 f6ee0404     ................
   261d8:	04fef6f8 0bfb0efd fbfbff0a f80007f8     ................
   261e8:	07faf6f1 fafe0202 0af7fcf7 f400fa0f     ................
   261f8:	020c0704 f6fb0c00 02fffd04 f5f4f400     ................
   26208:	fdf20103 faf907f7 011208fe 0106f8fa     ................
   26218:	f7f901f5 ed06fff8 03f6fbf6 02060303     ................
   26228:	0709faf3 e9f509f1 f9ede8ee 07fc0605     ................
   26238:	00f4eefa ffedf3f2 efe1fbfe fefeedda     ................
   26248:	e81207f5 ecfbf6fd 04f1fff5 e7efd8f8     ................
   26258:	0009fffa fff90bfd f8fae7f6 fc0800fe     ................
   26268:	f8f8f3e9 010301f1 f20ef8fe f0000eff     ................
   26278:	eeeefcf8 fcfbf3f0 f6f6f61a fb0612ed     ................
   26288:	fef9f5f0 fffcf20d f300fee4 f6020e06     ................
   26298:	f501000a 0d0af4e7 ebf405f8 09fff4ff     ................
   262a8:	fefe06fd fbfefffd fa04f5eb f70404f9     ................
   262b8:	fe0dfafa 070ceff9 00f80af6 16f10cfa     ................
   262c8:	fa05fdf7 04fb0101 f6f90cf0 0ef0f0e9     ................
   262d8:	fa03f60b fffa04f7 f106f6ff fc090bf5     ................
   262e8:	0ef6f7f9 fafa0cf3 01f50408 f7eaf906     ................
   262f8:	f9fcf6f7 f2ff01ff f8f5f50d 030604f7     ................
   26308:	f5fafcff 01f4fc08 0df20b01 0b0cfcf1     ................
   26318:	09edfded 030af9f8 f308f4e7 f206f507     ................
   26328:	ebfff8f9 eef6f6f9 0cf3f1f7 06fa030e     ................
   26338:	03f609fa f9070c0b 03ef0bf9 0a0f0405     ................
   26348:	f609e6f6 15f6f902 1106edf8 0308f404     ................
   26358:	ff0706f6 0bf6fbf7 0b04ff08 f9f50bfe     ................
   26368:	edfb01ef feff06fe fcfceef2 f8080b06     ................
   26378:	e8fb0712 f7f7f7fb 0bfaf7e2 f602feff     ................
   26388:	00f70e0b 02ec13fb f6eef6f9 fb09fbf6     ................
   26398:	0ffcf807 fe03f30b 0400e5f5 f5030bfa     ................
   263a8:	fef90af5 0408fafb f5fd09f9 05f501f4     ................
   263b8:	f2f2fc04 0802fb0f fa0306f8 f6fa0003     ................
   263c8:	ea010000 fceefaf9 fe07fcf7 fbf5fd0a     ................
   263d8:	0200fb00 0b0701f6 00fefcff 00eff7fe     ................
   263e8:	000e0405 0206f0f6 041b07f6 fbfefcf1     ................
   263f8:	0e07fdfc 00fef908 f90df7e8 0a05f203     ................
   26408:	090bf806 f5050502 f5fb02fd f8f3eef7     ................
   26418:	0af7fff1 fafa0dfe fee0fe0a f8f40409     ................
   26428:	081102f4 f60af2fa 08f0f204 0610f509     ................
   26438:	03000e07 01061401 0afb07f4 0cfe0301     ................
   26448:	01f1fd0d fbfcf2f3 f5f7fe02 fa0ff8fc     ................
   26458:	ef01fff0 f20500fc 1408f7fc f7f306f6     ................
   26468:	fcf30bf0 00ea0a08 fcf6f1f9 070d0001     ................
   26478:	effbe80e 1108f504 0008fafe ff06f2f7     ................
   26488:	0ff70805 0af7fde7 070b01fd f9f101f8     ................
   26498:	f6fd06f2 ea05faff ef03fd08 00fe0eee     ................
   264a8:	fe11f804 fdfffbeb 00ef0ae1 f2f60bf1     ................
   264b8:	f2f1030b f7f70805 f90efcf5 f9fdf40b     ................
   264c8:	0f030013 f506f0ed f40afb0d 0ee70608     ................
   264d8:	05f300f6 ff10fdf2 060100f9 f80b01fd     ................
   264e8:	fd07ec02 f1fcf815 020f05fd fd0aefff     ................
   264f8:	000103f4 eae40cef 0ff507f4 04f30b13     ................
   26508:	f5f901f8 fd05f6fa f3eef4fb 04fd0105     ................
   26518:	0009f9f6 f7f4080d 01f9faf7 fffef7e2     ................
   26528:	020e0f00 03f503fa 0302fffc f1fcfd0d     ................
   26538:	f205f5fd 030f09fb 02110208 fff4f202     ................
   26548:	f7ee11ff 0afdfb01 fef7ef03 fbf8fdea     ................
   26558:	fa050bf6 0405e912 09fdff01 ebf8fdfd     ................
   26568:	ea05ff0d 0df80b04 fdfb10ee 0f0e0008     ................
   26578:	0100fd00 f70c09f0 f4fff40f fe0e0005     ................
   26588:	071206f9 f8180c06 03fdfb01 f1f601ed     ................
   26598:	fced01fa 0f04ff0b f4010609 01f605fa     ................
   265a8:	ff0211f8 030c0403 f6faf8f9 f3fbf711     ................
   265b8:	fcf20705 f4ff00f3 fd0e06ef f9f90a0d     ................
   265c8:	0609fdfe 010b0104 f60afe01 ffeefe00     ................
   265d8:	0f00f307 160bfcf5 02ff04fe f8f40cfe     ................
   265e8:	10fafb03 f9040203 fb0004fc 040600f7     ................
   265f8:	fd04f6fd fd04fe06 04ecee09 f3f30101     ................
   26608:	06fcfff7 010a0201 f9011008 e906050e     ................
   26618:	f90003f8 f706f507 fd030bff f90d0e07     ................
   26628:	fdf3fe01 fbe6e5e4 06fa08f6 080ff305     ................
   26638:	f4eefb06 f6fefef7 04f5fcfc f608f001     ................
   26648:	f40400f1 01f0e9f8 fff1fefb 0c03fa07     ................
   26658:	fb0706fa fefa0800 f3fe0008 fbffe5f3     ................
   26668:	f811fffc 04fe0b01 0c02f9f8 fbfff6f7     ................
   26678:	09e4f9f4 04f8fc03 fafffffc 06f1ecfc     ................
   26688:	f611fcf7 f403f8fc f803f600 00fbf5fd     ................
   26698:	f108f201 f50bfffe fcfef9ee 08f70ae7     ................
   266a8:	0afef9f7 f10007f2 130df9f0 e708f609     ................
   266b8:	ecebf104 fc01eff2 ff09f0fb 05f6eef5     ................
   266c8:	ffed0afd 01f50401 fdeaee02 01ff02f0     ................
   266d8:	0ef405fd e4f4efe3 fffd07f4 ff0503f5     ................
   266e8:	f2efe8f9 e80100f0 02e8e2f6 060a0708     ................
   266f8:	fe00f109 fcf6f6fa ebe804fb 07fdf1ef     ................
   26708:	fbf80500 f7f6ec03 fafaf5fe fbece302     ................
   26718:	0303f2e6 0b09ff01 050cf9f9 faf8e8f8     ................
   26728:	fbf1e8fd fa050d01 fa05fef4 f6f0eff0     ................
   26738:	fcfafaff feffee02 ff130a07 f7fffa02     ................
   26748:	08f8f903 02050006 ff010708 0b0b0207     ................
   26758:	08fcf800 0afafaf8 fc061104 060afcf6     ................
   26768:	fdf7f702 0b08fbf9 f4fcedf5 fc010404     ................
   26778:	0502fefc 020004ff f7fef6fe 0cf4f9ef     ................
   26788:	0609fc03 051304fb ff01fef1 eff90204     ................
   26798:	060ff703 f00e0505 f1fd07fa fdfef5fd     ................
   267a8:	0bfb01f9 06f91100 12020209 0101f507     ................
   267b8:	06fafefe f70f0505 15f8fc10 0104fa07     ................
   267c8:	06f404fb 0006f1fc 05f200f0 fcfe01f7     ................
   267d8:	0a0df900 f4fff8fc f9fd06f7 fffdf5ff     ................
   267e8:	0c031001 f40f06f0 09080800 0ef10507     ................
   267f8:	000113ff 15efed04 0af4f90b 0e050109     ................
   26808:	fd0aff06 03f90612 0402fbfa 04030a02     ................
   26818:	f502fcf5 fdf9ecfa 0114ffff 0d1e0bfe     ................
   26828:	fcfdfdf5 edff06fb 0712f502 f7f80503     ................
   26838:	020901ee fafcfe02 0df2000a 06040703     ................
   26848:	08f0fd02 f6fe060c 14060300 0716f5fb     ................
   26858:	0c08fe09 0303f905 fffdf4ef fb1aedfa     ................
   26868:	060403f8 0706faf7 0b09fe06 040bfc02     ................
   26878:	ef010af8 011000fd f2fd0806 07f7f8f4     ................
   26888:	fd060ffb 02fafd0d fafb0ef7 fbf4fe06     ................
   26898:	06010103 120b0806 fcffe8ff 16fa0309     ................
   268a8:	03f9040d 12fe00f0 fd0bfaf8 0df4fced     ................
   268b8:	1407fd06 f701fa04 f7f2faf3 f507f900     ................
   268c8:	010aff04 f5fe0607 000800f9 050502fc     ................
   268d8:	05010f06 feff08f9 f9ecf704 ff0b0f06     ................
   268e8:	0f0607ff 0006fc02 10000c05 f3060807     ................
   268f8:	05ffee01 fdf6faf9 0af50bfe 0206fdf9     ................
   26908:	110bf4fe fc00f2f3 f70d0401 f8fefaf2     ................
   26918:	0100130b f6010c00 01fc05f3 faf0090c     ................
   26928:	04fffd05 0100fd15 fbf2040d 17030103     ................
   26938:	fffbf60f 1904ff06 f7f9f6fc f401e4ef     ................
   26948:	13fe0ef2 11fb05fa 0008fc06 090dfe03     ................
   26958:	f4fef302 fb1003f9 f914f5fc f4fafffb     ................
   26968:	f10e0bf6 fd0908f3 04fb0e03 fb061202     ................
   26978:	f8f8f208 040503fe f5fbfdf9 f115f50d     ................
   26988:	180df711 070dfbfd fa070302 00f90eff     ................
   26998:	060112f6 1202faf9 0908ff06 070000fa     ................
   269a8:	ef07f40c f20401fe f9f60fff f6fe02f6     ................
   269b8:	0c030e01 fef5030f 0a010b05 060ae710     ................
   269c8:	e501ff0b 08fbfcf4 f700e109 fb040009     ................
   269d8:	f9050a00 ff07f704 090c03ff 020913fc     ................
   269e8:	ff0402ff 030ef803 04eef311 fe0600fc     ................
   269f8:	f30503fa f9f20405 0e05fffe 010b08fa     ................
   26a08:	06f6070c 07fb1100 0608f2ff f70d07f5     ................
   26a18:	050cfaff 041dec07 0b000107 030f08ff     ................
   26a28:	10f9f9fe f4fdfd09 02fa0cf6 030d03fd     ................
   26a38:	0312fa05 ff03fdf9 f50608f5 ef08fff9     ................
   26a48:	09f50efc 01020802 f20307f9 f908060b     ................
   26a58:	00f40f06 00fcf013 fffa0100 fd09fdff     ................
   26a68:	fc03f706 0ffafb01 100e09f9 0a05ff02     ................
   26a78:	f2f8fc0b faf300f9 f80bfbfd 0bff0404     ................
   26a88:	fdfdfb0d fa01fafc 03050803 0dfbff00     ................
   26a98:	08faf4f9 0212faee ff02fc06 080207fd     ................
   26aa8:	0305f405 f1fc10fd f805060b f6fdf3f0     ................
   26ab8:	02030607 fb040109 fd0709f4 0011f2fe     ................
   26ac8:	000502fe fe0801f1 09fcfbf7 fffbf7ff     ................
   26ad8:	fef7fb03 f8fb0602 01fd04ff 03ef0104     ................
   26ae8:	f60afcff fdf5fd0a 09f3f103 0504f90a     ................
   26af8:	f5fd00f6 00eaf8f9 faf4fd07 0603f804     ................
   26b08:	030d01f7 0609f2f2 0400f700 07fdf7fe     ................
   26b18:	e702fdfc feeff6f8 f8fdfafd f4040bfb     ................
   26b28:	f5fd04ff f7f6f6f6 f8ee0a0c 01fcf5ff     ................
   26b38:	fbfefdfc f9fa08ff fdfceff6 fbf9f307     ................
   26b48:	0ef50000 fdf7f4ff 09fefa02 0708f203     ................
   26b58:	fcfff700 0201f2f3 ff05f704 f705f5f0     ................
   26b68:	f3fbf7f2 0af602f2 f5fbfefb f6f7010d     ................
   26b78:	f8f8fefd f8e2f70d 06fdfcfa f2fef9ff     ................
   26b88:	0508fbf9 07010304 05ff0400 f7010301     ................
   26b98:	04fffffc feff0804 f8ff06f7 04fa01fc     ................
   26ba8:	fe0002fc f90400fa 04f9fb08 fb050006     ................
   26bb8:	f7f700f8 f704f906 09040502 06ff02f7     ................
   26bc8:	060705fc 010205f7 02fbf8f8 04f9fd07     ................
   26bd8:	0705f602 f90205f8 01fff8fc fefc05fd     ................
   26be8:	05f801f6 fef9f801 02fa07ff fb00fe00     ................
   26bf8:	fef80100 06faf7fc 01060101 fbf60400     ................
   26c08:	f6fbfa00 06fe0907 06f603fc 0503f806     ................
   26c18:	02040201 0608fb01 f90404fc 0201fafe     ................
   26c28:	0300fe01 04fcf6ff 02f90100 fdfb0300     ................
   26c38:	fbfdf8fe 07faf6fb fafcfefb f70002f9     ................
   26c48:	fb040104 01fb0801 ff02fe04 f8f6f903     ................
   26c58:	0201fbf7 0207fdff 06fdf7f7 fd050100     ................
   26c68:	fb03fe08 01fd0006 07fafc06 fa0006fb     ................
   26c78:	0702fdf9 fbfbfef8 fefbfe07 07040205     ................
   26c88:	050204f7 00fc0400 fcfdf9f9 02f80402     ................
   26c98:	0602f6f7 fd070400 f9020702 090209f8     ................
   26ca8:	fbfb0105 f7fff9ff 0005f8fd faf80201     ................
   26cb8:	fafafd08 f600fffd 0201fa00 fe020000     ................
   26cc8:	0307fd07 06f8fcfb 0702f9fa 0200fef8     ................
   26cd8:	fb04f6f9 09f807fd fbfa08fe f903fd04     ................
   26ce8:	f8fdfbfd 0300f804 fd02ff07 f7f80508     ................
   26cf8:	0501fa06 06fa0506 f6fc0106 f803faff     ................
   26d08:	fc02ff03 04f70704 f604f602 fafcfb02     ................
   26d18:	010602ff 05f9fc00 f7050604 0706ff06     ................
   26d28:	03ff05fe fafdfbf7 fc04f704 0304fa03     ................
   26d38:	fa05fff8 03fc0202 07f8f9fc f704fc03     ................
   26d48:	f8f703fa fffb06f8 fafeff08 06030401     ................
   26d58:	f6f80106 05f700fc 0207fd04 0303fdfb     ................
   26d68:	fd060100 fff804fb 03fdfff8 fa0600fb     ................
   26d78:	fe050702 00fefe02 f60308fa f8fcf8fc     ................
   26d88:	fd06fafa 0205f807 03fd0806 f7fcfd04     ................
   26d98:	fffb0106 0302f905 fb010308 05f9fd08     ................
   26da8:	08fdfe05 01fbfbfc 06f602fd 03fef8fd     ................
   26db8:	f8fbf9fc 04000303 f8fdfc09 03000809     ................
   26dc8:	fcfaf7fc f9fe07fa fc000104 feff0afd     ................
   26dd8:	0408faf6 fc0002fa f7ff01fd f9fe08f7     ................
   26de8:	0201f605 00fe02f5 fa06fcfa 010702fa     ................
   26df8:	03fffff9 f8f9fb05 f8f70307 03fcfdfa     ................
   26e08:	02fa02ff fa0801fc 0701f703 fdfff700     ................
   26e18:	06f801fe 03030800 fa04fbfd 00fcfff8     ................
   26e28:	fb0001f8 f8fcf6fd 0608fbf6 000100fd     ................
   26e38:	020503fb 0101fefe 04f9fffe ff080303     ................
   26e48:	00f80401 00f704fc 07fd05f6 f8ffffff     ................
   26e58:	f6fc0805 fc0305fc 07fff703 0205faf7     ................
   26e68:	fdf6fafe 01fbf9f8 ff0504f8 00fb03fc     ................
   26e78:	fcfb07fd fd05fbfb fef907fb 00fdf8fc     ................
   26e88:	f7fc0400 05fb0402 0700fd00 ff06fc01     ................
   26e98:	fd0607f8 00faf805 04fa04fc 0804f701     ................
   26ea8:	0405f605 fc040600 fe07fefb 07fefdff     ................
   26eb8:	03020603 01fa0100 f606fc01 fffa0302     ................
   26ec8:	fc06fff9 01fbf7fb 07fafd06 fefaf7fc     ................
   26ed8:	f8fffd04 000405fd 020302ff 04f7f804     ................
   26ee8:	fffa06f9 00fcfefd f9f9fcff 060102fb     ................
   26ef8:	0702f7fd ff0603fb fafefbf7 fb070afa     ................
   26f08:	fcf9fbfb 030701fc fff502fd 0607fd00     ................
   26f18:	fd0200fa fc02fb06 f6f90504 fdfb02fc     ................
   26f28:	0af903f8 0406fa07 fbf900f8 04f806f8     ................
   26f38:	070306fa 0508f8ff 05040305 01fe0706     ................
   26f48:	04ff05f9 fcf5f600 fb0502f7 ff01f6f9     ................
   26f58:	fd040300 fcf7f605 fcf7fafe fbfb0108     ................
   26f68:	faf7fd00 fff9fbf9 fb05fafd fdfb07f9     ................
   26f78:	fdfa0404 0105f6fe 02fb01f8 f8fefdfc     ................
   26f88:	06fafbfd fe03f901 f6f9fff8 fa060400     ................
   26f98:	fefcff05 f7fc07f7 05fef600 f6f70404     ................
   26fa8:	f8fa0601 02f9f9fa 01060708 f6f6f801     ................
   26fb8:	fbfc0605 06040201 090502fe 02fb01fd     ................
   26fc8:	00f905ff f9020605 07f7f9f9 fdfc0207     ................
   26fd8:	00f9f902 0107f604 fa01fefe fcf7fdfb     ................
   26fe8:	0303ff04 f8f80202 020006f9 0003f604     ................
   26ff8:	fe0301ff 03ff02fb fefb06ff 0203f8ff     ................
   27008:	fffcfef5 0806fbff 050301fc 01f706fe     ................
   27018:	fefcf6fa 02fd0302 fb0a0303 0705f8f9     ................
   27028:	fa01fd01 03060506 f7fd03f8 09090104     ................
   27038:	e9071b10 01f215fe 0a08fffc 0303fb02     ................
   27048:	0b0719f7 faf3f612 120d0bf4 100c080f     ................
   27058:	f80d0008 0b0f0b1b f1f9f400 060c0203     ................
   27068:	0d01fe0f 0ef3fcf9 03150a0c eef7f8fa     ................
   27078:	17ee030d 09fa0903 08010806 f201fcfa     ................
   27088:	f9ff04f3 0106f7f0 fbf2fefb 0af9ec09     ................
   27098:	fbf6f700 fcf4f2f5 0d0201f9 0dfcfb01     ................
   270a8:	f4ede9ea fbfd0104 00ff03e5 03fcf7fe     ................
   270b8:	db0a00fd fcf7e7e6 f0f303fb 0efffe06     ................
   270c8:	0605fbf4 f1e50cfd f6f3f8fe 03edff05     ................
   270d8:	0f02fbf2 07030507 f2f5ed11 ff13f0f1     ................
   270e8:	fd19f0ef f2f5fcf1 12f30803 ede2dce5     ................
   270f8:	00060de5 f2f910f4 04fb06fa d60d09fe     ................
   27108:	04f2f7ee fb07fa07 ffe4fa08 fff4f102     ................
   27118:	f2e503f5 0508eaf4 0cfa060a 1406ef00     ................
   27128:	fc04fbf4 f2f0ea09 0f0bfcf0 02210401     ..............!.
   27138:	f7fd0cf7 09fb15fd ebf0eee1 f90c03f0     ................
   27148:	f81206e9 01ebf807 e7fff807 f9eff7f4     ................
   27158:	f103fb13 f3e7fc01 fe00e6f6 e4e50cfe     ................
   27168:	0bf5f3f4 09090bfd 11f8edfd 090f05f2     ................
   27178:	fef7eb01 ff1101ef 061302ea fa04f9fa     ................
   27188:	04ee0a05 f0f9f3f5 080209fb e7f906f9     ................
   27198:	f0f60ef0 f901fbff ecf3fbfa fc050009     ................
   271a8:	fcecf30f 0800eefe f9eefcf0 0bf4f2f2     ................
   271b8:	0dfdfcff 0b04050b 000902eb fefbf1f8     ................
   271c8:	0908f8f9 f2fe060a f8f6fde9 080f0cfe     ................
   271d8:	04f1ecea 0fff0cfb ecf7fc0c f9e6fbf8     ................
   271e8:	f205ff02 01f7faf5 0205fa0b fdf1f512     ................
   271f8:	16ffdb0b f1f5fdf1 feeeefee 141508f7     ................
   27208:	0200ee04 f907fcfe 00040109 ff00eb02     ................
   27218:	07130e08 01fafe0d f7f70d0c fff20802     ................
   27228:	edff0dfe fdfb0209 f6fb08f8 03f604fd     ................
   27238:	020ff601 f8f1fe18 00ff0afa 0905f0fe     ................
   27248:	06f50200 010602f8 120100fe 0103f814     ................
   27258:	0408fdfe f9fe05ff fe08fef7 0707f6ef     ................
   27268:	0a04000e fa0a1604 07ee0e0a f7091701     ................
   27278:	fa00f216 04f50106 0ff70e05 0b05f607     ................
   27288:	f2f7fa04 fdfa0210 170efef8 100204fb     ................
   27298:	0b0e00fc 150208fe f5fe05fe 030b0bfd     ................
   272a8:	01060901 0a05fffd 10f8f8ed 04f701fb     ................
   272b8:	fb031505 00050c1c f40607fc f704fffe     ................
   272c8:	0afefc08 0903fe0b 1a0df701 f10e0c08     ................
   272d8:	01070505 02fb0ff8 060efefd 050904f2     ................
   272e8:	07fa03f6 effefa08 ef03f504 00040ffa     ................
   272f8:	fdf9fd15 f9fcff03 0ae8fe05 ff0e1417     ................
   27308:	04f90b10 f3fbfe0a f60e0409 01f2f401     ................
   27318:	01fc0a0d 1208f908 07e6f5f3 0bf8170b     ................
   27328:	0c0502fc 0a0efc06 f6141702 06ff0bf3     ................
   27338:	fa0bfaf9 011c030f f51008f9 fffbf9fd     ................
   27348:	0805f202 05f1090e f8040502 fe051410     ................
   27358:	f6fcf407 f304fdf7 fc01fe04 0501ff0b     ................
   27368:	1d06fa17 030405f8 fdeefef7 16060bf8     ................
   27378:	0e0afb02 fd0d04fd 01010001 0706e701     ................
   27388:	fc0a0408 fe0d01fa fee6f302 f90e0703     ................
   27398:	fbfb03fa fdfa0702 140d0c13 ebf6ed0d     ................
   273a8:	f2f40d08 f7f3f8fc 02f60ef1 f9fcf90c     ................
   273b8:	eff9fee6 00010f0c 07140707 1412fd02     ................
   273c8:	ea00f014 10f9e7fe 06f50009 010b08fd     ................
   273d8:	02050cfe 02f0010d 18eefcf3 0c02fdff     ................
   273e8:	fdfaef0d 0f0c1a04 0406effd 0bfde8f8     ................
   273f8:	05fcfefc fffdf8fc 061ef709 fcf406ff     ................
   27408:	f9fcfffb 01130507 020ef300 fc0b0b03     ................
   27418:	ed090709 070aff03 f40301fb feff0700     ................
   27428:	01faff04 0e010803 09fbfbf8 f705ff0d     ................
   27438:	fc010815 f6f3ea07 1406f7fe 00f903f2     ................
   27448:	10fefefb 100a040c 03f202f6 f5f90dfc     ................
   27458:	0411ec09 0007f705 f40e0bf6 fafef5fd     ................
   27468:	07fe02f9 02010714 ff0504fe 03f1110d     ................
   27478:	f5f50908 ff03fafd f5fb0103 110d120a     ................
   27488:	04f7ff04 0dfcfa0a 090efcea 09f90703     ................
   27498:	14180b08 0cfd03fc f4fbfaf3 0c01fbff     ................
   274a8:	04fa05fb 04fb0304 f50bff0d 0408fa02     ................
   274b8:	1103f102 ff0208fc 05f3ff0c 0d12fef7     ................
   274c8:	08fdf113 fef9090e 050f1804 f5f8f70b     ................
   274d8:	0311f70f 0905fcef ff0af9eb fbebebef     ................
   274e8:	fff902ff 03000802 f403eee7 f9f007fe     ................
   274f8:	08fae6e6 f2030210 f0f7f5f3 f6fcf705     ................
   27508:	eff9fd07 0b0df8fc ff00f7fd f404fbf9     ................
   27518:	07f007ef f1ececfb 06fc06e9 f40af7fc     ................
   27528:	eff9faf7 fd00f5ff 00fafaf4 f6070e1b     ................
   27538:	05050b08 f600f9f4 fffaffee 0cf603ec     ................
   27548:	0400040a f7f5fcff 0816f207 0000fdff     ................
   27558:	ff0b02fd 010703f3 f1f1fef7 f40802f2     ................
   27568:	0103fe04 110507ff fa05f309 fcfb01ef     ................
   27578:	08f8eef1 f900ebf9 05fd02f7 fcfaf802     ................
   27588:	f6f5fbea ff02fcfd 06faffed fb0a040b     ................
   27598:	fdfbfaf8 06f5f4f4 f2fc08ff fff8fafc     ................
   275a8:	03fb040b faeff6f5 fdf90603 effdf607     ................
   275b8:	050609f3 f2f7fe07 06eff304 12ff0311     ................
   275c8:	f9f7ef07 07faf807 fe00ff0b fcfbf2ee     ................
   275d8:	010d0505 01f1f208 01fdfafd f5f3f809     ................
   275e8:	0403fa03 f50c0b03 fe11faf9 ff0e220f     ............."..
   275f8:	f9f903fe 0213fbfe efed0c15 fdfe07fa     ................
   27608:	0d050500 0c09f30e 13fa0306 fc00f00d     ................
   27618:	fef50314 02f00600 fff205f4 fc0b09eb     ................
   27628:	0df805f4 fd04fffd 09fcf6f1 00faf9f6     ................
   27638:	f3ff08f6 ef10fef5 02fd17fc f8ff020c     ................
   27648:	0207fdf8 f7f504fb 08f808f8 0bfa020a     ................
   27658:	0c0d1205 fffcfd00 f3f2f408 f8070b10     ................
   27668:	fff3f7fe f6061a03 0307f704 05faf1e9     ................
   27678:	f6fbf6f3 09fb03f8 fefa050a fc0904fa     ................
   27688:	060703f2 fafb0001 07fd0102 f40b09fd     ................
   27698:	fe050702 ff0109f5 0a010107 f60afa07     ................
   276a8:	06f300f1 faf1000d 02f70410 fef60504     ................
   276b8:	fa03f1eb 0c040201 0303f3ef f209e9ef     ................
   276c8:	06fbee00 0101fcf6 080103fc fc03fcfb     ................
   276d8:	fc0201fd 06edf8f6 0200fc08 f5fb070a     ................
   276e8:	07fcfdec fbff0005 0802fd02 0df903ff     ................
   276f8:	03fefa04 03faf211 f608f1ff fbf700f7     ................
   27708:	f502fafe fefeecf8 f60afef7 01fff9f6     ................
   27718:	ffef0506 00040afc f00bfcf4 f60609f7     ................
   27728:	10fbfd00 05010606 f1faf900 050a05ef     ................
   27738:	fcf7f912 fc12090f 03fa04f7 fcfd090c     ................
   27748:	fdfcfb02 f4f7fff7 f3010205 fb0bff04     ................
   27758:	0c04faf4 fdff0602 04fbf9f2 f7fd0f08     ................
   27768:	f3040802 ee0efbf7 f718fffa fdf4f90f     ................
   27778:	f706fb02 04010004 ecf60cee f8030501     ................
   27788:	0709050c fff50afc fd08f806 fafefe07     ................
   27798:	02f50800 0c06180c fa020405 120bf2ef     ................
   277a8:	fa0707ff 05ff0901 f3fe0307 fe010401     ................
   277b8:	f61200f5 06f8fe08 06fd13ff 08060c09     ................
   277c8:	fbff0109 0e01ff00 ff01f20d f402f502     ................
   277d8:	0bfb0bf5 00f5fd03 faf8f808 05110df7     ................
   277e8:	ef000503 f70a0c0a 060909f9 f909fe03     ................
   277f8:	fe05ff03 070a0a05 f9f50a01 fe01fef2     ................
   27808:	0cfd0701 17040e1d fc02fa0b f704f306     ................
   27818:	060610fb 08fb0402 05020409 07fa0405     ................
   27828:	06fe0002 f4f1070a fd14fb04 fc020b0c     ................
   27838:	ff09fcff 0ffefaf0 fbf7f60c faf3f5f4     ................
   27848:	07fdfdfc ff060203 fc0b02ff 06fe05f9     ................
   27858:	fffeff06 040202f6 fffd0909 02ff00ef     ................
   27868:	fef9f313 0503ff05 0505fff8 091beffa     ................
   27878:	f812050f f7f704ef f005f801 00fdfe02     ................
   27888:	070406f5 0d010803 0706f7fd 1000020c     ................
   27898:	fd0307fc ff0701fd fffdf6f8 0bf3f6f4     ................
   278a8:	050f0bfa 04f808fe 0e030cf6 10fbf10f     ................
   278b8:	f50ef903 0707fdf3 fb07f8fe f3fdf707     ................
   278c8:	06fafef4 f30c0efd fa03040a 04fc0403     ................
   278d8:	0c0007f6 f7fafdfd fc00fe0f f8f80408     ................
   278e8:	00fa0212 ff04f4f3 07f901fa fff5e8fb     ................
   278f8:	f9f908fc 060406f0 0cff04fa 0111eff5     ................
   27908:	ff01f801 0212f90a fefb03fa fa04f5f8     ................
   27918:	0a0bfdff 04f9fffc 04fa0dfb fafb06fc     ................
   27928:	f2fefdfc f5010cfe ee01f806 03fff302     ................
   27938:	04fefe05 010201ff 0bf3020d 01f9f8f8     ................
   27948:	07fff4f8 030bf8f3 fb08feff f90bf2ff     ................
   27958:	fa04fcf5 f9fafaf1 fe0e09ed 010703fe     ................
   27968:	f7f409f4 02f3f9f2 f10203fc f409f7fe     ................
   27978:	fff40902 f6f3fc0a 0902e602 fe00eef7     ................
   27988:	fb030c11 04f60207 160afe06 020e01f9     ................
   27998:	02f803f6 0e010405 0e07ff15 081a10fe     ................
   279a8:	f8f203f2 0a0608fe 1eff0811 fb0a0403     ................
   279b8:	f9020c0f 070701ff fbfd050a ff0602fe     ................
   279c8:	0dfd02f9 13ff0a0c 0bea050a fce4f206     ................
   279d8:	faff0111 09080504 1313f5fb 0305fe13     ................
   279e8:	0608fef9 09f8f819 0d161109 06fc05f4     ................
   279f8:	010b1606 070803ed 0700fcfe 020b0c18     ................
   27a08:	f602ffff 0203021a fbff1313 020410ff     ................
   27a18:	02fe0b19 0c010e02 faf4fa08 02eb080b     ................
   27a28:	12070606 0efdf810 fc10010f 03fc04fb     ................
   27a38:	09f6ee0f fa0e0b05 f9f9f5fd 00f60af0     ................
   27a48:	0b0d0b06 0805f70e 0cee060d f8fffb05     ................
   27a58:	fefd0107 f5130d10 050912f3 f8fdf610     ................
   27a68:	13ef0cf5 01050209 f5f3f700 0e1208ff     ................
   27a78:	0b00fe03 ff09f405 ff0b0aff 1cfdfa02     ................
   27a88:	f1030b04 f000fef5 09090bf6 0b0bfd05     ................
   27a98:	0a1608fc faef0b0d ff01f5ff 09f903fb     ................
   27aa8:	f90f0c0c 10ff01f2 f7fafa0d 10120ffe     ................
   27ab8:	000805ff 01ff14fa 03130207 02f9fafd     ................
   27ac8:	0b0fef13 0d0cfff5 17f9030d fc031510     ................
   27ad8:	fbeff6ff f7000bf4 0ef605f5 fe15fefc     ................
   27ae8:	05101603 ef020704 11fe01fa f7f90202     ................
   27af8:	1b0d12fd f6f20209 0f0e0c05 ff0cfd0c     ................
   27b08:	fb0208f6 1114030d 16fdf505 06faeefe     ................
   27b18:	f50c0801 1001fbff 00081a03 f2f605ff     ................
   27b28:	0b00fffd 09fa0f10 081602fb fef3120e     ................
   27b38:	0100ffff f00b0c04 e4f7f70a 030511f7     ................
   27b48:	fd000004 03fe0008 00f9fcfb f90601ed     ................
   27b58:	09070214 080ff4fa 050cf6f7 f108f702     ................
   27b68:	1bf9f60a 0905050c ee020907 08040b02     ................
   27b78:	08fe0000 0b0bf705 080c030d f8f5fe08     ................
   27b88:	ef0b0c03 fcf7fb0b 0e061904 f807f8f1     ................
   27b98:	0b0af5f9 1203fbfe feff0bfb fb04090d     ................
   27ba8:	f9faeaf7 05120708 0c06000f 0d01fdfd     ................
   27bb8:	01fc040c 02f9f9fe 0cfc0e0b 01f701fd     ................
   27bc8:	090b00ea 0df4f409 050bfdef e80809f4     ................
   27bd8:	f00dedfd fcfd09fa f8f9f6f6 05fb08fb     ................
   27be8:	fff4fc13 0702fbf1 e5ff0013 07fc01ed     ................
   27bf8:	02feff09 f50b0502 0301eb05 f707fa09     ................
   27c08:	fafdfcf6 02fe04ff 10f5fd02 020502fb     ................
   27c18:	06f3ff03 f6fefbf7 ebfc000c 0007f300     ................
   27c28:	04f20bfa f8fef4f3 0203050a 01f60601     ................
   27c38:	0bebf5f0 e7f70104 fff5f8e8 f805020a     ................
   27c48:	fb00f0f2 030ce7e9 f1edf301 f30af6fe     ................
   27c58:	fbec03f9 efe1f703 f90903f0 fff1ecfc     ................
   27c68:	f603f8f8 fbf3fefb defeefff eff80406     ................
   27c78:	fc05e5ef 05f80bf5 02fff003 08fa03f4     ................
   27c88:	dfea0105 fef1f9e9 0711fa05 eee4fae9     ................
   27c98:	f6ffdf01 f4e9fa03 01fd0707 f205f8f2     ................
   27ca8:	fbdff4fc fcf7fcf7 06f7edf6 f2080902     ................
   27cb8:	f3f006fc e7faedf0 f4f4f306 fe02fae4     ................
   27cc8:	09000dfa f9f4f50f 0df6fce4 d7eef2fd     ................
   27cd8:	f9eb02fa f80a0d00 e9defc03 f3fef0ea     ................
   27ce8:	0af1ebe4 fefc0701 fffafc05 13eefff1     ................
   27cf8:	e4df0507 08f1e8ec 001107f0 f8fb0605     ................
   27d08:	f5eefdfc e3e2daff fc06e5e0 0a0b0615     ................
   27d18:	eaeef101 02f2f7e9 f1efeae6 07e7fdf3     ................
   27d28:	ea040414 eff7f3f5 e708eff2 fefdffe7     ................
   27d38:	0308e903 02fc00f7 00eef4e3 eee909fa     ................
   27d48:	01f7fcef 0c12fefa 00eeef0c f7ece5f2     ................
   27d58:	f5eee407 f800f3f9 0e030f03 fe03f1f2     ................
   27d68:	0df3f8f0 effee0e9 0ef2f5e4 fd07081f     ................
   27d78:	f0ed02fd e60ffd0b fcf7f0e6 0713faf8     ................
   27d88:	03faf9fd 04fdf9f8 e6d006f7 09fefcf3     ................
   27d98:	07110b0a fdf7f90e fdfcf800 fbf5ec03     ................
   27da8:	fa010706 0e070704 fcfa0606 11f0ecf2     ................
   27db8:	ebfbe8e4 060a0bf7 05ff0006 f307000f     ................
   27dc8:	e007010f f7f2eae6 0d0e0007 f4f107fd     ................
   27dd8:	10050afc e9e113fc fff3f300 0118130e     ................
   27de8:	ee01050e fbf8ef02 efefef09 0df40c02     ................
   27df8:	feff1905 fdee030e fef2fe07 f100fff3     ................
   27e08:	03fa04fa 0106060b fcfffbfc ecfcedfc     ................
   27e18:	fef8f2f1 1804190b fd0dfffa 19fc1102     ................
   27e28:	fdf4faff 020afff7 081f070d f10c0001     ................
   27e38:	130bee00 fbf50506 f9fbff06 f902fdfc     ................
   27e48:	f90602ff fcf808ff fbfbf8f7 fffc0502     ................
   27e58:	0702f701 fbfffcf6 0002fd00 0002fb02     ................
   27e68:	fefcfa05 fa01f800 f8fdfe00 00f9fa04     ................
   27e78:	03fcf8f9 02f90002 fd0403fa 03fe00fc     ................
   27e88:	f5fa00fc f7050401 f603fefe f7fafdfd     ................
   27e98:	00fcf9fb 060605fc fbf808f8 fb07fff6     ................
   27ea8:	fefd05f7 01fffcfd f7fdf707 fc08f705     ................
   27eb8:	f6fbffff 01fffe01 ff0808fa f9f7f7fe     ................
   27ec8:	0806fe00 fb05f6fe 0200f607 f8050707     ................
   27ed8:	03f706fc 040800fa fffaf9f8 fe0603fb     ................
   27ee8:	fbfd0801 f80107fa fbfe00ff f6f70603     ................
   27ef8:	00fc03f7 00fcf8fa fcfbfff8 fc010701     ................
   27f08:	00fdf7fe fdff02fa 03ff05fb f707f900     ................
   27f18:	01000205 fd06fcfb 0700fefb f7f7feff     ................
   27f28:	ff04ff03 fdf602fc fd0004f9 feff0afa     ................
   27f38:	fa06fe01 f501fefd 02fd01f5 f90202f9     ................
   27f48:	f8fafa05 fc00ff08 fcf7f804 fc0205fc     ................
   27f58:	0502fefd fc0002fd 0706fc02 05fb0102     ................
   27f68:	03010204 0802fa04 f901fcfe 070607f8     ................
   27f78:	09f801fd 03f6fbfb f8f8f901 0003fffa     ................
   27f88:	f7fafafb f900f803 fefff5ff fcf9fff9     ................
   27f98:	06fcf8fe fbfa02fc 05f5f703 08fe09fd     ................
   27fa8:	fb010505 fe03fd03 faf9fdf6 0005fa00     ................
   27fb8:	08fa02fd 0605fefe fb03fe03 fdfcf905     ................
   27fc8:	010506f8 ffffff02 fdfcf7f5 060706f8     ................
   27fd8:	fb070202 0306fef8 02fc04f9 02fbf6fe     ................
   27fe8:	04fe0105 02fdf9ff 00030007 050602fa     ................
   27ff8:	fc03fcf7 ff03fffe 010200f9 0604fd0a     ................
   28008:	040104fb 0205fbf8 f9f6fb02 0a010002     ................
   28018:	fafaf9ff f7fefb00 00fafd05 050007f9     ................
   28028:	00fd00f9 fbfcf60a fbfc01fb 07fa0606     ................
   28038:	fafbfdfe fd06fc03 fc040400 01f6ff00     ................
   28048:	fefdf4f8 fdf9fe00 00fe0903 f6f8fcfb     ................
   28058:	f601f805 fb060106 0200fd03 070003f9     ................
   28068:	06000103 020204fc 01f7feff 08040202     ................
   28078:	fef7ff00 ff05ff01 fffffd04 08040101     ................
   28088:	fd00fdfa 05fcff05 05fe0601 06f7fb04     ................
   28098:	fdfbfc02 07fb0105 f6fbfe02 0504f8fb     ................
   280a8:	040306f7 fef90404 0707fbfb f90101fc     ................
   280b8:	fcfffe07 fffd00fa fd04f9f9 02fa01ff     ................
   280c8:	f8fafc06 f9fffe02 fafa0602 fd030201     ................
   280d8:	fd00f6fa 0601f700 07f80300 f40505fe     ................
   280e8:	0309fb02 f8fdfc04 03fff6fe f8fffb04     ................
   280f8:	04f6fffa fdf7fe08 06f7fe05 fdf605fe     ................
   28108:	0507f905 07010306 04fe0901 f8feff06     ................
   28118:	fdfaf5f8 00fefffb f907fe01 07fc0708     ................
   28128:	ff0204f7 0103f6fe 06fefdf6 ff010102     ................
   28138:	05ff0601 fcfa08fb fd0007fe 050206fc     ................
   28148:	f9fbfe01 fd050003 fb070407 00f802f6     ................
   28158:	fd050401 0601fbff 0002fdf6 f5fafd04     ................
   28168:	03fd01fe 0304feff 04fff9f8 020600f5     ................
   28178:	fdfe0502 0407f7fe 04fdfefb f505fe04     ................
   28188:	fd01fd02 05f8fefc 0105f6fa 0505f905     ................
   28198:	05020306 f505fe06 fc00fb03 fffa08f8     ................
   281a8:	f5f7f806 03fb02fc ff03f7ff 04fffc01     ................
   281b8:	fd030b04 0705f4fa fc04fc00 06fa0305     ................
   281c8:	04f705fe fd070602 f8f70600 0203fa05     ................
   281d8:	fd060602 fdf505fb 050100f7 f7fff701     ................
   281e8:	06fe06f8 fb06f9f7 fb05ffff f602f8fc     ................
   281f8:	0007f6ff f8fffafa 0700fefe 09000afb     ................
   28208:	f603fdfe 0203fafc 04f60503 f802fb06     ................
   28218:	0205fd09 06f803f8 fbf90001 fcfff801     ................
   28228:	01fe04f7 f8fc08fc fe0600fd f9050605     ................
   28238:	05fbf704 010af807 fe060601 040107f8     ................
   28248:	f506f7fa 00fffc00 00fb0806 f906fd06     ................
   28258:	00f6f9fc 000301f7 fcfbfaf9 fd070807     ................
   28268:	01fcfaf8 04f60300 010205f8 01080704     ................
   28278:	04fa04f9 fff601fe 070401f8 02f900f8     ................
   28288:	07010600 fbfe06ff 08f8f5f9 f8060201     ................
   28298:	fbfafbfe 05040306 030703f9 06fe01fc     ................
   282a8:	f80004fa fcf9fe06 fdfffb02 060603fa     ................
   282b8:	0105f9f8 04f606f6 03000702 fff9f8ff     ................
   282c8:	fbfffe06 f6fcfefb 070601fe fe01fcf9     ................
   282d8:	fc0608fb fefdf9f8 04fd01fb f9fafff5     ................
   282e8:	fcfc07f7 0709f907 f7fefdfd 0003f3fc     ................
   282f8:	01f30602 0000ff10 0403fcf5 f9030102     ................
   28308:	f2fefdfb 08f4eefd 0c030afa f1010009     ................
   28318:	03fefdf5 fa03fbfb 0710fafe fb0200f9     ................
   28328:	f8fa0607 f8f1fff2 f504f5f9 00fd10f6     ................
   28338:	0a040400 fdfff7fb f7ffed05 02f60b04     ................
   28348:	fc080307 f703feff f707f7f0 00f8f8fc     ................
   28358:	05fd0002 0af506fb f0f5070d 040204fc     ................
   28368:	f7f7f501 001003ff f607ffff fafaf803     ................
   28378:	f603f9f8 fffbf9fc fdfb02f7 fff9f804     ................
   28388:	05faf901 00f9f4fe f7050907 06fd000a     ................
   28398:	fcf80003 fcf208ff f6f9fcf1 fbf2f1fa     ................
   283a8:	0c040204 fe0308fd f8fafd03 fa04f5f3     ................
   283b8:	fbfff9fe f90bfdfc fef90102 01fcfd04     ................
   283c8:	fe0606fb 08ff0401 00fe0303 fbf502fa     ................
   283d8:	fffa0204 fef70302 04ff0803 f3fcfcfc     ................
   283e8:	fbf50201 07fdf3f8 04f2f2fd 0e010e00     ................
   283f8:	05f6f5f9 02fafd00 fcf3fcff 0c09f701     ................
   28408:	0600ff0b f7fcfc02 00ffff04 0507f9f3     ................
   28418:	fe0504ff 02040701 0b010404 f7f2fcff     ................
   28428:	f3f9f703 03040a09 faf7ff00 05fb0d00     ................
   28438:	03f7f900 06f6f904 09050e04 08fbfafc     ................
   28448:	fc050001 fc03f6f6 06fdfd07 fb020204     ................
   28458:	08fff7fc 0603f9f6 fffff5fe fe0308fc     ................
   28468:	fafb0500 04050104 f2fefb02 fcfdffff     ................
   28478:	f808ff09 f4fafa02 fff6ff07 f9f8f3fb     ................
   28488:	0003f402 03040309 f8fefa07 fcf8fe00     ................
   28498:	0201fefa fc09f605 f7faff01 0308fffa     ................
   284a8:	00010bfe fb03f700 06fe0805 05f7f602     ................
   284b8:	04050afe fcf3fbfb f1fd09f5 f701ff03     ................
   284c8:	05010401 0af80003 090bfbfc 05040203     ................
   284d8:	0401f708 f5f8fa01 06fff9ff 0505f5fe     ................
   284e8:	020400ff fe090401 f50704f4 f7f803f6     ................
   284f8:	08f5fd08 030608fb 0df304fc f405fe01     ................
   28508:	f603f50a fdfc0aff fa09f806 0005fa09     ................
   28518:	0703fafa faf8f7f4 0901f3fb faf802fd     ................
   28528:	fafe03f5 07fb0601 f9fd05ff fdfbf8fd     ................
   28538:	fcfaf5fe fafdfbfb 03f9fdfc fbff05ff     ................
   28548:	f9fa0dff f8fc07ff f708fffe fe010909     ................
   28558:	06070500 f9030103 02fe03fd 060b02fd     ................
   28568:	0707f701 00fef203 f6f9fcfc f9f4f8f5     ................
   28578:	080002fe 0a050101 0202030b 03000201     ................
   28588:	f8f5fa03 00fbfff3 fffa0504 f7070b0b     ................
   28598:	05000504 fb0406f8 fdfafffe fbfbfe03     ................
   285a8:	f8ff03fe faf7f603 0906f704 f601f705     ................
   285b8:	0604fe01 f30002ff 02f5fe01 f8060afe     ................
   285c8:	faf60208 fa0801fe 020502fc fdf5f403     ................
   285d8:	0808f502 fd0206fb 03040e00 04020102     ................
   285e8:	fefefffe 02fafe0a f6f6f5fb 0500f908     ................
   285f8:	f700faf9 fffb04fb fb0106f7 0a00fe0c     ................
   28608:	fb030706 070505f6 fb010109 09fa0500     ................
   28618:	020402f9 02fe0206 07fafcfa fcfcf2f8     ................
   28628:	fc070508 fa0303f7 f5fef9fd 050007f5     ................
   28638:	07fc0afd f5f8f8fb f7fe05ff f901fdfe     ................
   28648:	0afd02fa 0203fff6 0403fafb fb01f902     ................
   28658:	fffffd00 0203f9f4 fa0502fa 080df3f0     ................
   28668:	0703fefc 06f2fe01 02f3fc0a f0fafef8     ................
   28678:	05010afc 06000705 0afd02fc f1fbfbfd     ................
   28688:	f2f2ecf2 f5010405 f7f204fb fafbfffb     ................
   28698:	ff09f3f4 0fed0002 f90207fc fc0400fd     ................
   286a8:	f605fbfb f4f9f804 0605eff9 05fafdfc     ................
   286b8:	f7f3f6fd fe0105fb 02070205 03050f04     ................
   286c8:	fef9fbff 07fbfbff fc09f006 f9f9f0fe     ................
   286d8:	f403fe03 fa08f801 070d02f6 fef7f6f5     ................
   286e8:	0cfdf4ff fdfcf705 fcf7fcfd f30509ff     ................
   286f8:	f9fcfbf1 fb06f4eb fcf6fc00 0401fe06     ................
   28708:	0107f706 f5fdfa05 f9f913f5 f8fffefe     ................
   28718:	fcfa0402 03faf300 f7f2f5fe 0102f812     ................
   28728:	fff7f4f8 fffafe05 fffdfdf3 11f6f9f7     ................
   28738:	01fbfd06 0102f402 f90003fa ff050400     ................
   28748:	0006f8f6 fa00f5fd 080509fa f7060300     ................
   28758:	f707f506 04ff08f3 03f601fa 0bfbfb06     ................
   28768:	0903fefd fcf507fd f5030503 f3fc03fd     ................
   28778:	f3fd06fc 0103f0ff 04fafdff fffbfc01     ................
   28788:	fbf9fff4 fc050002 f0fc0cfa 1dfdfcfe     ................
   28798:	f511ff15 fd0c0504 09ff02f5 0d0a1318     ................
   287a8:	1313f804 0602170e f7f30bfa 1100fe08     ................
   287b8:	fefd0413 fe1a1def 0502fd0a ff0a000e     ................
   287c8:	12e5fbfb f9fbf80c 10090d0f fdf1fe04     ................
   287d8:	f6f5fc13 12100009 fdfa0511 f6fdfe15     ................
   287e8:	050a04ef 07fdf8f7 0afd0a0b 0800fa0b     ................
   287f8:	f7f0f8fe f3fbfdfa 040607ff fefd0415     ................
   28808:	010804f8 f702f808 0502e4f9 11fefd04     ................
   28818:	f80b0602 fdfff9f4 0dfff901 0104fff5     ................
   28828:	04fcf813 07000bfc fb060102 f50508f7     ................
   28838:	0cfbf7fb 1205fb0a 0bfa02fd 0df90603     ................
   28848:	fbf3ef09 fafff8ff f80efd01 f9f4fc09     ................
   28858:	04fcf007 0b0500ec f80011fd 02f7f7fe     ................
   28868:	fcfbf4f2 03f70d0e ea03fcfc f8f4f005     ................
   28878:	eb09feff 08e6fafa fe1501f7 00e3f4fc     ................
   28888:	060bf3fc f2f30300 09fffcfd 07fd030f     ................
   28898:	03070d08 fcfdf80b eff5ee0d 0f09fdf5     ................
   288a8:	0907f205 eaec0704 04eb01f9 f0f4f7e4     ................
   288b8:	01f50410 ecf2f5f6 ebebfc06 e7010af4     ................
   288c8:	07f60af4 f90c0e0b 0901f4fa 010b07fa     ................
   288d8:	ecf60c12 05fbe5f6 02f1ed01 f1f90102     ................
   288e8:	fcfcf5ff f6e1d90b 060bf4f4 fdfef202     ................
   288f8:	f4fafdf8 14ec02fa f7fef7e2 ee070b07     ................
   28908:	f4f402e7 eeeaf3fe de05ecf4 01f2f5e9     ................
   28918:	06fbf813 04fcfa04 fe02f8fa f0e50ef9     ................
   28928:	0c04eefe 00f5030b ef030200 fa0ef1f0     ................
   28938:	fbe5da08 fe040900 0f03ffff ddff0cff     ................
   28948:	06f1ebf9 fcf4e9e0 02080803 f2f3fcf9     ................
   28958:	fbf1f7f3 db08e6f7 08f909e0 010c0e0f     ................
   28968:	0bf9faff 0cf9e7f8 e6ef0cf6 02ee0207     ................
   28978:	040d130a e3010b0a f200ddec f5e1ee12     ................
   28988:	050b04f7 fff80410 eef5fdf8 0ff00ffb     ................
   28998:	fef5eee8 0615140b fb02fceb fedff8fa     ................
   289a8:	f4fe0003 0ff8f4e9 fb0807fb 07f10b05     ................
   289b8:	0cf902ff f1eafefb 08f80300 03f5080d     ................
   289c8:	e9070506 fc06fc08 f0edfa0e 0a120cfa     ................
   289d8:	05ff1208 f1ecfce9 01fcfafc f606eef2     ................
   289e8:	00130507 f9fcfbf7 eaf3fa08 fa09fd10     ................
   289f8:	07080300 0510fc15 fe0dfc08 11f4ffef     ................
   28a08:	f6fb00ff 0dfe0610 f4010506 06fdf50f     ................
   28a18:	0505f806 100e0105 10050601 04fffbfe     ................
   28a28:	f2fbfdf8 faf40403 fa03f909 16030409     ................
   28a38:	0e00f6fa f504fafb 0e04f308 05f8fdfb     ................
   28a48:	fa0ef6f9 fc0dfdec 0d0d05f1 fe01fbf0     ................
   28a58:	01f30d00 04f6f5fa e307f7fc 090c05fd     ................
   28a68:	08f60d05 0a0a0003 fff602f2 f4ebf5fd     ................
   28a78:	f80710fb feff000a 10fb0106 0c07f2fa     ................
   28a88:	fc04000a 0a04fd09 02fd0701 f10efffc     ................
   28a98:	fd01edfe 0900f9fc 050af8f9 04f3fcfe     ................
   28aa8:	fa060d08 fc0c04fd 080df7fd fc0c0cfe     ................
   28ab8:	00060204 f6f9f5f9 f50005ef 01081007     ................
   28ac8:	fbfd0111 0f080106 07030604 0403090b     ................
   28ad8:	05fbe512 0afc05fe fcfffafe f3fcf900     ................
   28ae8:	0a0604fd 0e1300f8 f7060304 fd05fd03     ................
   28af8:	070dfdf5 f602f8fb ff1210fc 04f5040b     ................
   28b08:	fd0909f6 f8f5fd02 f60cfd08 f5fb130c     ................
   28b18:	0801f910 fc110cfe 0deff5fb 0ef7fe09     ................
   28b28:	02ee010b 05f503f2 f800fafe 1b0e0ffb     ................
   28b38:	ff0ffd07 fb030002 f1081001 fe06ff16     ................
   28b48:	05ff0702 0c0716fa fef7fe06 0dff0506     ................
   28b58:	00faecf9 05fffb0b 0afb0616 fc040004     ................
   28b68:	01010a08 05fd08fe 0ff8fdfd 06f9f007     ................
   28b78:	120f00fb 0400f4ff 1506fd03 120df7fd     ................
   28b88:	0201edfa 02fff402 000b01fe 05f904f5     ................
   28b98:	01061300 f60206f8 f7f701f8 f2fff5fd     ................
   28ba8:	00040df9 f8fb190c 060205fc fc03030d     ................
   28bb8:	100715fd 16ff0506 fdf10209 0613f8f6     ................
   28bc8:	faf80004 efed0605 0513f4ff 0105fb07     ................
   28bd8:	f30607f7 050af7f4 fef9f1fd 0c1016f5     ................
   28be8:	e205ff12 f604f8e7 f3fdfc02 fd050ceb     ................
   28bf8:	0a0b0511 fef90206 ff08fdfe f5f7fa04     ................
   28c08:	07f20301 0b07fd0b 0e0efbfd 00e5ebfe     ................
   28c18:	f1ef02f7 0d0af406 0501060b 04fef6fa     ................
   28c28:	03fafe07 ee0a0316 06091101 f0fc0103     ................
   28c38:	02001e01 0df6f9fa 0201f1fe f60bf600     ................
   28c48:	03020602 02fe0407 faf801fb f9ffeefe     ................
   28c58:	fd08f6ff 02f6040a 02010206 0cfb0401     ................
   28c68:	000cfefd f8fd02fd 0cfbf2f6 01fdf8f2     ................
   28c78:	f106fcfd 0b09feff f804fdfa 03fc0801     ................
   28c88:	0504ffff 06fa0efd 08010705 f9ff0708     ................
   28c98:	f602f308 00060afd 0502f909 fcfa0bfb     ................
   28ca8:	fbffff04 09040200 09fcfeff fb03faf2     ................
   28cb8:	0901fe03 fcf70b07 f6f9f9fa 010503f8     ................
   28cc8:	02fafe09 000502f8 ff0202fe 0409fcf5     ................
   28cd8:	06f607fd fc05fb09 fd02f8f8 fbfc0500     ................
   28ce8:	02fb07fb 00fef200 070b08fb 0a08020d     ................
   28cf8:	fef3f506 fdf9010a f9fe07f2 01fdfa04     ................
   28d08:	f2f4fe00 f4fc0100 fb01fb00 fcfcfd01     ................
   28d18:	f706fb03 05070209 03ff00fd fe040603     ................
   28d28:	fa03030a fef6f408 fff90409 fcfcfcfe     ................
   28d38:	08f8f4f7 f804fbfe 0806f903 01fdf8fa     ................
   28d48:	fffbf305 04070201 f9040108 03fc08ff     ................
   28d58:	05f60201 f9fff7ff 0bfc0100 fffcfdf9     ................
   28d68:	0708fb0b fd0305fc 0a01fcfb fb0af908     ................
   28d78:	05f403f9 f9fafb06 f7f8f603 fef8000a     ................
   28d88:	fcf80003 fd04f708 f9fcf405 04f7f3fa     ................
   28d98:	0a0a07ff 05fafd09 fcf3f8f3 f90201fb     ................
   28da8:	09060007 f9fd05fc 030d09fb eff7f405     ................
   28db8:	0404fcf4 00fc01ff f405f900 0bf400f3     ................
   28dc8:	04010600 ff060e04 020a03fd fef7f6f7     ................
   28dd8:	05fcf2fc 00ff02fd 05f70307 01f900fa     ................
   28de8:	00f7fcf9 0c03f5fe fb0508fe f8fcfa01     ................
   28df8:	faf4fb0c 01fa03f2 f0fff301 06ff01fd     ................
   28e08:	05000bf7 fbfd02fe fdf401f6 fcf60908     ................
   28e18:	fc0603fa f70ffa07 f7f4f7f6 00fbf3f6     ................
   28e28:	03f8f906 04fb0003 faf203fd f7f40401     ................
   28e38:	06000c04 08fafbfe f2f6fffa f9f8f50c     ................
   28e48:	fa0102fd 05fdf9f8 0c0a04fd 05fb0503     ................
   28e58:	f6fafa04 0df806f2 fcf6ff07 090ef8f8     ................
   28e68:	08030409 f0f5f3ff 0100fcfe 03000106     ................
   28e78:	ff010107 fafa0e03 fdf6f8eb 030403fb     ................
   28e88:	fd000c05 fb00f908 f9f6f708 f9fb02ed     ................
   28e98:	f5fefb03 09f8fe04 07070500 e4f202fc     ................
   28ea8:	0900fdec f8f607f8 fa09ff0c f0ff0601     ................
   28eb8:	faf2ef00 ff090504 0900fd03 0bfbfa0a     ................
   28ec8:	efff00f8 04f3eef1 0d04fdf6 0900fcf9     ................
   28ed8:	09fdf40a fffa0207 fbfaf9ef 07f4fbff     ................
   28ee8:	fdff0200 0af7fd00 f8fdf6fb 11fe06fd     ................
   28ef8:	03f5f703 fa07f8f3 f8090207 f5eff3f9     ................
   28f08:	04070100 fff7f504 04f6fcf6 fdf90afa     ................
   28f18:	06f1f5f8 05ff04f7 0a010401 021200fe     ................
   28f28:	f9f8f40a 0afbfafe f500fef1 07040805     ................
   28f38:	0a0107f1 feec02ed f8fc07f9 0af306ff     ................
   28f48:	ff00fbff fb060206 f4fcf0f1 03fe0d11     ................
   28f58:	f609fc11 0af3f503 fbf503f7 06f8edf4     ................
   28f68:	03f9fefb fff902f3 f113ff01 f7fbff02     ................
   28f78:	04f9faf2 fc05fe0d 07f6fbfb 05f10102     ................
   28f88:	ecf1f6f6 0001f6f3 f506100a ff03fe07     ................
   28f98:	fa060504 f8f1f8fa 0b05f30a 01f60402     ................
   28fa8:	0ffbf8f8 00faff00 0207fffe 0a03fffd     ................
   28fb8:	06f90102 f201fafb f9fffcff 09fc01f2     ................
   28fc8:	f60005fa fbf2ff00 00f5f8f4 00fdf3f7     ................
   28fd8:	01f203f2 fffa04fd f3fffafc 0605020c     ................
   28fe8:	fdfefcf0 060606fd 0203fafe 0efbf803     ................
   28ff8:	f9fcfd04 fb09fdf5 0408fdff fffd0508     ................
   29008:	f8fefefb 04ff04f9 02040000 f6f8fdfe     ................
   29018:	f8fdfdf7 07f007f1 0afff801 fafd0904     ................
   29028:	fefb00f3 fe01fbfd 0f03f9fe fdfd08fe     ................
   29038:	f90205ff 02fffbfc fdfb0800 010dfaf7     ................
   29048:	ff080909 fcfe0100 050109f9 f905f503     ................
   29058:	020000fb 01fe0afd f70cfd06 fff800ff     ................
   29068:	0a04f9f6 f803fdff fc0202fa fbfeffed     ................
   29078:	0a04fd0b 0301f704 05fe0703 f3f402fc     ................
   29088:	0706f102 0008ff05 fb0401fe 06fcf709     ................
   29098:	0609fc06 00f3f6f9 fe080404 01fc0202     ................
   290a8:	07f7fb00 fc030305 08f708fd fbf3ff00     ................
   290b8:	eff80708 f9fc020a fcfc1101 010107fe     ................
   290c8:	020cfa05 f8f806fe f7f7f905 f0f6fcfe     ................
   290d8:	fffc0306 f8fcffff 04fcf610 ff08fff8     ................
   290e8:	03f7f5fa 05060100 f8f3fa0e 040cfff5     ................
   290f8:	fe0805fc ecf5fd01 12fbe8f6 f1efeffa     ................
   29108:	110414fd fafc0308 f9f3edf1 f60b00fc     ................
   29118:	fbefecf2 f5fc0608 030203f1 06f2fc0d     ................
   29128:	f2f91100 05fbf3f9 f4030603 f9f8f70e     ................
   29138:	eef5faef f3f70a00 130df7fe fe07fe01     ................
   29148:	0600fbfd fef6eb14 f5f7fc09 f30d0bf7     ................
   29158:	f6fa0305 00f2f7fd 0ffa000d ff0ffdfe     ................
   29168:	020cfbf8 f3f607fb fcf9ff07 00fef8f9     ................
   29178:	0ef50003 03050505 0de7fa00 eff70101     ................
   29188:	f1f81400 030d0303 07000e01 f8f1f8fd     ................
   29198:	fe06f4f9 0becf210 0d0bf504 fcfafb07     ................
   291a8:	fdf1f900 1008fef0 0c0a0601 060d02fd     ................
   291b8:	f3f402f7 03fbf4f0 0118fa0c fbf40302     ................
   291c8:	faf70303 fdee0703 0d0f09f8 f00a09f8     ................
   291d8:	fd0706fa 07fa0d08 03f50108 fe03f0fc     ................
   291e8:	00040b08 fff6fd00 f102f504 fd0602f7     ................
   291f8:	10f705f9 fbfb0110 1e11f2fe 02fdfefc     ................
   29208:	06f80301 0517fa01 f1fdf909 06f51206     ................
   29218:	ff040701 fb071503 f9051c08 f7070401     ................
   29228:	fc040aff 08f805f9 fdf0fbfa 02fa0107     ................
   29238:	0df60704 eef6fa0e 02f60401 08fb02f9     ................
   29248:	07030605 1516eb00 f20b0210 fd0106f7     ................
   29258:	ff0dfd08 f7fd000b fffb13f8 09fafb0e     ................
   29268:	07030705 fa051a03 0b0808fc 0701fe04     ................
   29278:	00060408 fc01f3fd 01f60e10 f9f503ff     ................
   29288:	00fff4f9 030d0afb 06fdfdf3 f9f9fd03     ................
   29298:	f603f804 f4fe07fb 12121008 0b0c0802     ................
   292a8:	01fef803 f7f802ff 0efb0010 0202fa0d     ................
   292b8:	fafc0d02 11070101 00f6fc0f fa020401     ................
   292c8:	fbfdf206 04f11612 09fa0a14 e601fbfd     ................
   292d8:	06ff0fe9 130700fc fef80f03 03000105     ................
   292e8:	fc00170a 02060f0b fa080904 fff00505     ................
   292f8:	0a0206f4 0c03f30a fafb010e 07f112f4     ................
   29308:	010bfaff ebfdf9fb 00f1f6fd ff0efafc     ................
   29318:	fdfafb14 03f2ff0c f3f90003 120d00f4     ................
   29328:	080b01f7 0200fdfd fbfef408 fe01fef8     ................
   29338:	0d00000b 0506fe0b f9f2f8fd 060511fc     ................
   29348:	0508fffe 06f0fd05 f9ff09fa fcfafd08     ................
   29358:	fc02f806 f810fffa fa08fb00 fcf8fd19     ................
   29368:	0204fa07 f6f80208 1015020a 0a00eff4     ................
   29378:	fcf7fbfd 04fbf101 fbfb030e 0d040a02     ................
   29388:	0b0dfc02 07fa04fa 0f020302 0609f5fa     ................
   29398:	10f800f9 00010c07 0e1306fc 0c01f7fa     ................
   293a8:	07fd0be9 09110107 0001f910 0c060422     ............"...
   293b8:	fefafb11 030b0a0e 1207fdf8 09fb05fc     ................
   293c8:	0608fc09 080a0409 f9ff05fd f70c0afe     ................
   293d8:	06f6fcf1 01fe0309 00fbfff2 03eafe08     ................
   293e8:	ff0114fd 0a0b00fb 08f0f9f4 03fd0507     ................
   293f8:	060ff40b fafafa05 fc020a0d f9030e0f     ................
   29408:	0207feff 040efc01 fbfbfbf6 f3fa030a     ................
   29418:	02140310 fa0a1100 00020a0a feedff05     ................
   29428:	fb09fc0b fe060efb 05fa0208 f9010c09     ................
   29438:	1106fdff fcfefff7 05070013 0904ef02     ................
   29448:	fdf1030a f7060602 f8f3f7fc 08ff0efb     ................
   29458:	0c09050a f701f9f8 fffe000d 0d0aff09     ................
   29468:	0ef805f9 04100108 00f409fd f90a0eff     ................
   29478:	020cfaf2 fbf9030e f6011101 0510071c     ................
   29488:	f7f6f612 080609f9 0507f1fa 02f3f906     ................
   29498:	0914090d f0fd1ef9 011202f9 1209fa0c     ................
   294a8:	01fafe06 f502fb09 0ffaf10c 02fb12eb     ................
   294b8:	0a0bfe00 0bfdf8fd 01070306 fb08fb05     ................
   294c8:	fdfc0310 030312f7 ff02fd03 00fbee02     ................
   294d8:	11fe01f8 0305faf9 05fdf912 08f20704     ................
   294e8:	f50317fc fc040400 08020705 0000f1fe     ................
   294f8:	f0f5ff05 0300f4fc fc101a01 fdfd08f7     ................
   29508:	09fcfcf6 02eaf609 f008fffd fe050813     ................
   29518:	0508fc0b 00fe0e14 fff9f405 f9f5f907     ................
   29528:	0b020704 07f9ff03 03000202 ee000af8     ................
   29538:	0d06fefb 0901f7f7 ff00f7f6 f6080f06     ................
   29548:	faf00701 03000505 f30806fd 0aefffeb     ................
   29558:	02f60301 15fc06fa 00feff00 fa010302     ................
   29568:	f904000b 0ffcf810 060702fe 0ffd1113     ................
   29578:	ffeef9fe 0ef5f3ff fc050200 02edfd0f     ................
   29588:	050309f4 fdfaf0ef ecf70406 06070601     ................
   29598:	0a07ff0f 050400f4 f9f6150c fff4040c     ................
   295a8:	060102fc fd080107 17020401 0b06020b     ................
   295b8:	fafdf8fb f5fc00f7 f8050f00 0b170dff     ................
   295c8:	0a1602f3 fcfff7f5 09f6eeed fef5f2fa     ................
   295d8:	000b1710 01000102 fffff3ee 090b0603     ................
   295e8:	fdfcfafb e5020d12 f7f8fdfc 0804f7f9     ................
   295f8:	fb051709 14fa0606 ff09ff04 01f702fa     ................
   29608:	160708fa f9f7f0f2 ff0e0408 130cf5fe     ................
   29618:	fef700f9 080c0204 0a05f2ff 040804fc     ................
   29628:	f7fffcf1 01fc0308 f91100fc f7080900     ................
   29638:	e600fffb fffb06fc 1009f7f5 ff04010f     ................
   29648:	01fa0800 fcfcf608 11fefd02 0efbfafc     ................
   29658:	fef10302 09040203 f9040007 fa000205     ................
   29668:	f7f4e8fc 0105f2fc 031507f8 11f8edee     ................
   29678:	040604ef f400f3f6 07ff00f6 f8ffff08     ................
   29688:	ff0f0507 fbf4f804 effef806 00f800ff     ................
   29698:	fcfafd06 05090606 f9f1fbef 06f9fcfd     ................
   296a8:	020303ff 060106f7 fbf609f9 03fafaf6     ................
   296b8:	f002f300 f1000a03 08fcf3f8 f900f2f4     ................
   296c8:	06e9f5f8 f4f700fa 05fcf105 f1fafc02     ................
   296d8:	f300f6f4 0001f8fe 07f60bf9 00fde9f0     ................
   296e8:	ff0203f8 070705fc 00f50105 f703f8ed     ................
   296f8:	09fef0ed f7fcf206 f3f8eeee eef9f308     ................
   29708:	ebf004f4 040400f4 ebf6f805 0af5f7f1     ................
   29718:	f3f8fbed f3ebedf2 00070403 f2f8f3f6     ................
   29728:	e6f8fdec fbeff0fb 01fff7ed eff800f5     ................
   29738:	f6f7f8f8 faeffcee f504f8e5 050f02fc     ................
   29748:	01eeff0b eefaf8fc f3ffeef6 fadff8f2     ................
   29758:	fb090b09 fe00ebf8 faebf1f3 fdf7fbed     ................
   29768:	04e9ecfb fafe0f0d fef803fd f102f0f4     ................
   29778:	00eef206 fdfdede8 fdf80114 eef9f606     ................
   29788:	0aff06f4 e6f2f5f7 fe0102e5 0005030f     ................
   29798:	01fdf4fc ed0f0716 eceb00e2 f3010508     ................
   297a8:	f1fc03fc f7fdebf7 efe412f7 f9e7ecfd     ................
   297b8:	eeff1306 0802eff9 0107fc01 fce4ed01     ................
   297c8:	0f0bece3 0706ff05 fb0404fc 0af80ef2     ................
   297d8:	e2eaebe6 12021c00 f5010804 f4f9ef01     ................
   297e8:	e602ff03 ebe5f8e5 0f0efe01 f7f206fc     ................
   297f8:	fef5edfd ecebfdfb 1cf5effc fa141b09     ................
   29808:	02fbf8f9 fd00ebe9 0bfceffe 0a06f8ec     ................
   29818:	fff4080a f7fef802 05f9f7f6 e4f6f5ec     ................
   29828:	0a0511f5 100607fc 060c0402 f405eef4     ................
   29838:	fbf403ef fd0cfd0e fe09fbf2 fffbf70e     ................
   29848:	f3f104fc 14fae6ed f90416f4 fefb04fc     ................
   29858:	04f3fa01 0500f400 f908f4f3 f3f5f7f8     ................
   29868:	f4fefdf9 07f80bf6 e3fbeef7 060b03f9     ................
   29878:	f2f60904 fdfdff07 f5f7fefc 03eaf5f7     ................
   29888:	fc160217 040102f1 03f5fbfb 03f4fff9     ................
   29898:	10f0e9fe 080b07f6 f901f8fa 0303f802     ................
   298a8:	0301fe01 f904eee7 f8050605 f705f8fc     ................
   298b8:	fa0405fe f701fcff 080c18f0 08fbf20b     ................
   298c8:	05f7f8fc fc080012 04ee0403 0009f916     ................
   298d8:	f2fb0afb ff03f804 fb08fbea 0ff7f8f5     ................
   298e8:	0105190b faf4f8f6 04fbfdfe 04fe04fb     ................
   298f8:	0009f7f3 f50807fd 03020810 01fcfdee     ................
   29908:	f2040500 14060ffb fdfcf700 eefef600     ................
   29918:	0303fb03 f8f3fe0c f00d0501 0b07ffff     ................
   29928:	15050f04 090fff0f 06f90005 fa040efc     ................
   29938:	fffc000a 0d04fe18 0e090804 f50d010c     ................
   29948:	efec080e 0beefa04 00080c04 fa0a0e05     ................
   29958:	08090804 f5f70400 fd0204ec 00fffb03     ................
   29968:	0b010501 f50a0811 fb060005 020b15fa     ................
   29978:	fb04fbf8 03f5f806 08090c07 000afef4     ................
   29988:	02060004 010c03fb 050ffb01 fbfc11fb     ................
   29998:	06ef06fc 0c00ff00 f4f90611 0408f706     ................
   299a8:	03f30806 0bfdf5f3 08000610 06010310     ................
   299b8:	fe0b04fc ff0efffc f80a0303 130305ec     ................
   299c8:	fffdf6fd 010906f5 0011fefb fdfd040f     ................
   299d8:	fd0d09f8 fc0b080d e9fb0403 fbf4f804     ................
   299e8:	090711fd fefa0dfd fefe05f8 fef20608     ................
   299f8:	0f0af9e5 06f9ff08 fe05070a 06fcfd0d     ................
   29a08:	fdffff03 0704fffd 100501fe f408faf1     ................
   29a18:	0803fc05 02fdf6f1 f4fefbf5 050911f9     ................
   29a28:	0609fb10 0503fc04 f7f0fc09 f6010b0b     ................
   29a38:	03000c13 fafcfbf4 fbeefe08 01f900f2     ................
   29a48:	f901070a 07f603f8 06f803f8 05fb02ff     ................
   29a58:	f3fcf1f6 f6fc0af8 0201f805 f90af904     ................
   29a68:	fa01ee02 f7f7f6ee 0af4f503 0b0400f8     ................
   29a78:	fcff06fe fb04f0f7 0af60afe 060afbfb     ................
   29a88:	0302f006 f6f7ebf5 f0faf7ff 02fcfef2     ................
   29a98:	fa05fef5 05fdfff7 f2fafefa faf9f0ed     ................
   29aa8:	f90900f6 f200040a fd08fefa f801f5f4     ................
   29ab8:	0202f7f6 0b040506 09fd0402 fefd1007     ................
   29ac8:	fcf300fd f904feef 03fd050a ff09f0ff     ................
   29ad8:	faf4fc02 07fc0dfd 0c01fdfa 0bf9fd07     ................
   29ae8:	040907fc fb07feeb eefa08ff 02fffefb     ................
   29af8:	fbfdfe07 fa0409fb 0700f700 00f303fe     ................
   29b08:	06fefbfa 04f70dff f1f6f802 fefcf8fd     ................
   29b18:	09f902f4 fe08f309 030af5f8 060bf606     ................
   29b28:	0cf206f5 fefbf9f9 02010500 08fafaf8     ................
   29b38:	00000700 f2f0f2fb 040bf7f0 fd010004     ................
   29b48:	00fe0b03 0101f9fd 0bf3f2fb 08fffafb     ................
   29b58:	08fa03f8 fb040c00 0805fefc f9030a03     ................
   29b68:	fc01040d 0204fb05 fcfcfafc fbfff802     ................
   29b78:	0c000802 f4f5070d f80df7fa fdfaf5f4     ................
   29b88:	faf20200 030a00fc 030206f7 fdfe0e02     ................
   29b98:	f8fdf5f6 0ff5fef2 04010c00 faf9f8f7     ................
   29ba8:	0102fd0a 03f2f306 f812f9f9 fd060403     ................
   29bb8:	0601f104 0bfbfcf5 09fa0704 04f80605     ................
   29bc8:	02f7ff0a 06fef7f6 fcfcf3f1 02f904fe     ................
   29bd8:	fe06fd07 f2fbf706 fb040af8 09fe05f7     ................
   29be8:	fdf100fc 020703ff f9f506fe fbf60009     ................
   29bf8:	fc0902ff 00f70a04 fa0300f9 0efbfffb     ................
   29c08:	fb050304 f4fd0700 f6f602fc f8fffef7     ................
   29c18:	00fefc03 fe03ec03 f60308f2 fc04fc02     ................
   29c28:	ff0001f8 fa05fffe 090405f5 07feeff6     ................
   29c38:	07fefff7 02f7f0ee f0ff0a06 0b07fcfb     ................
   29c48:	020a0d06 f9fa0001 0efa02fb f9f1fb03     ................
   29c58:	00010dfe f809f9fb edf701fb f7030105     ................
   29c68:	fefffbf2 fef8fafd fdfcfcfb ff000206     ................
   29c78:	0302f8fd 0208f001 fa00f403 080206f9     ................
   29c88:	fbf6fe03 fd03fffc 0700fcf7 fffcf6f9     ................
   29c98:	02fcfafc 05f7f8f2 fffdfe04 f7020cfb     ................
   29ca8:	ff04f6fe f0fefafe faf4fdf9 05fc06fc     ................
   29cb8:	03ff08fa 01f6f602 04f302fd fcfdf8f9     ................
   29cc8:	f9040705 fef90701 fdf406f7 faf6f9f8     ................
   29cd8:	f8f806fd 0a01050e 05f40603 ec08f9f4     ................
   29ce8:	fbfcf7fa 0006000f f4fe0c05 f406fbfe     ................
   29cf8:	03f3feff fe0406f2 fd0802fc fe01ff00     ................
   29d08:	f7fb04f8 0200f7fe fd04f802 f9fd01f9     ................
   29d18:	fffa0401 fff0f606 faf3fbfa f6f3f609     ................
   29d28:	01ff0105 fff80401 f0fcf2f7 000808ff     ................
   29d38:	02040003 fd0cfdf2 f6faf3f4 f7f102f4     ................
   29d48:	100c03fb fffdfd06 f100fd02 f1fafffb     ................
   29d58:	fafff002 0d0f05f6 04f4f303 f6fb0503     ................
   29d68:	01f5fefe fd0502ff 0005030c fbff0502     ................
   29d78:	0402f8f9 f100ff02 f5f7f4fb fb01f709     ................
   29d88:	fb0ffe03 fd0107fd 01f308f4 fd0c0d03     ................
   29d98:	020603f7 03faf8f9 eff903ff fe01fffa     ................
   29da8:	06feff09 00fd04fd f4feff01 fdf9f509     ................
   29db8:	0607f4fe 03ff08ff 07ec03fc fdf6fafa     ................
   29dc8:	f208fd03 faf40103 fcf7f300 030ffb06     ................
   29dd8:	f4faf304 fc07fbf1 fafef9ff 02f9faff     ................
   29de8:	fcfc0bf3 f8070af1 fdfefb01 fcfd0dfe     ................
   29df8:	fbfd05fa fef400ff 08f80900 0a06fcff     ................
   29e08:	f8fbf7fd 01f9f8fc fd0809f8 01f8fdfe     ................
   29e18:	03fc05f9 f907fd00 07f7f4fb 0002f9fb     ................
   29e28:	fdf902fc ed0c06fe f1fc0efb fcf300f7     ................
   29e38:	01ff03fb fdf6fcfa fefb0bfb 01f70701     ................
   29e48:	fcf7f109 fdfffa0e fe08fdf3 fdfb0108     ................
   29e58:	f70102f6 0dfafff6 f30105f7 06fe08fe     ................
   29e68:	f5fa0501 fb04f9f8 fefdfcf4 f9090506     ................
   29e78:	f7fa0202 fe000301 0005fd00 f3f90802     ................
   29e88:	03030efb 0802faf7 00f7f7f9 0700f900     ................
   29e98:	08fafa0d 03fcf9fe 01fcf5f6 05030b01     ................
   29ea8:	09f606ff f20002ff fbfdfdfa feff00fb     ................
   29eb8:	f603f602 f90df608 fdfafd05 fc0600f7     ................
   29ec8:	01ffff0b 070407f5 02fb07f6 fefdfc09     ................
   29ed8:	fe0b0109 fdfcf1fa f901fa04 fdfc0104     ................
   29ee8:	08fdfd00 f2f8f603 faf30307 f8f80305     ................
   29ef8:	02f7020f fe01f4ff 03fb0005 0d07110b     ................
   29f08:	14f70701 04020b09 09f80005 04f4fff5     ................
   29f18:	fcfc0a05 0c06f8fb 05fe0806 f7060f00     ................
   29f28:	f602f8f7 05060704 fe060303 f9fb0603     ................
   29f38:	fdf402fd 09020400 fdfef902 02fd0403     ................
   29f48:	08fef1fe 05fd0006 f7fffd0c 05fdfff3     ................
   29f58:	fc030100 05f7f7f8 03fcfdf9 0203fffa     ................
   29f68:	f0fe06f7 060bfcee f9fc04fb f7fffe09     ................
   29f78:	fe0406f4 f8fdfc01 fefbfcfa 0c06f6fd     ................
   29f88:	08fd03f6 fffd0afc f9f0f3f2 00f9ff05     ................
   29f98:	0800f4fe 01000607 f9030408 ff07f3f2     ................
   29fa8:	01010103 0500fafa fcfdff00 f0f20dfe     ................
   29fb8:	010bfcf9 f5fcfc03 0406fffe 00fbf5fa     ................
   29fc8:	f7fef502 f90808fd f9fbf800 02f802f3     ................
   29fd8:	0e000108 00fc00fc fafef7fe eff4faf0     ................
   29fe8:	fc020b01 ef05f307 08fffef7 f0fff803     ................
   29ff8:	0403f702 ff020000 f6ee0bff 06fa00fc     ................
   2a008:	f3f10600 f7fa0801 ff02f9f2 fafbf906     ................
   2a018:	0100fcff fceff2f7 f8faf8fc 0bfcf6eb     ................
   2a028:	0a03eef3 fcfc01ff f603fef6 f7fdfb07     ................
   2a038:	f9ff01f5 00f5f8fd edfffc02 faf8fef9     ................
   2a048:	fefc040c f6fb0300 03fbf9ff 05f5fb04     ................
   2a058:	06f7fcfe f2fcf7fe fbfa04fe fffa03f8     ................
   2a068:	fd05f301 ff01f8fe 02eaf3f3 07f0f1ff     ................
   2a078:	fff6f8fa fefdf4ff 03f402fa f206f802     ................
   2a088:	02fff9f0 020707fd 080a03ec 0cfd02f8     ................
   2a098:	f4f00000 0a06fef9 f2f9fefe f6f502ff     ................
   2a0a8:	f2fafdf9 01f1fc09 010efc0d fff9f702     ................
   2a0b8:	f6f1f8fe 06f6f701 04fafaf2 01fff7fb     ................
   2a0c8:	050cf6f6 f8030afa ff05020c f701fcf6     ................
   2a0d8:	f4fc0c01 f600fcf2 fafbfaf9 fcfc0b02     ................
   2a0e8:	030909f9 fdfbfe05 0002fdfb 0506f8f4     ................
   2a0f8:	f4f3fa09 05050204 02faffff f1fffc04     ................
   2a108:	000bfdff 0c02f5ef 0707f804 fe0200fd     ................
   2a118:	fffa02f7 f300fc0e fd06f2f5 f4060910     ................
   2a128:	ff020bff 0dfffcf6 f906ff0c ff0603f6     ................
   2a138:	fe0306f9 fa01fe02 00f6f8f8 ffff02fd     ................
   2a148:	f7f7fcfd 01f2fc00 f80503f7 fcff05fe     ................
   2a158:	00f7fdfc fef8f5fa 04f9f8f2 03f5050f     ................
   2a168:	02060907 fd09050a 060cf9fa 01f10a00     ................
   2a178:	07f7fcf9 02f8fbfc fd090509 fbf30308     ................
   2a188:	05f2fa08 06fffef9 f3fa0203 f3fcfbfe     ................
   2a198:	01f6f40c f9fef605 07fe00fa 0908030b     ................
   2a1a8:	00f901fd f2fa01fc fefef8fa fff8fefa     ................
   2a1b8:	0102ff02 fa09fcf9 fef5fdfb 0b0606ff     ................
   2a1c8:	050a0802 01060001 f3fbf6f8 ff010802     ................
   2a1d8:	fe030809 f306fd00 f8f802f6 0d03f7f5     ................
   2a1e8:	fd080bfc fff807fa f9030907 06f80206     ................
   2a1f8:	fbf7fcf7 07f406f6 00fafb02 0208fa04     ................
   2a208:	fcfff8fc 0aff01fa 06faf3fc fa090407     ................
   2a218:	0207fa07 f7040401 f7fefef9 f90df70c     ................
   2a228:	f2040703 f7000bfd f7fffe06 fc070c06     ................
   2a238:	fdf4fff6 f8f6f907 fdfaf801 f5fbf0fc     ................
   2a248:	07050601 0cfbfc03 fefefffd 00ff0409     ................
   2a258:	04f2fc00 1101fa07 fe090206 faf6fc06     ................
   2a268:	fe00fbf6 0f070305 fc0601f4 fb0001f9     ................
   2a278:	fefcf702 06fef6fc f7fffdf6 0707ff02     ................
   2a288:	0301000a fd00f5fb fc0202ff 0b0507fc     ................
   2a298:	08fffa0d 0603fcfa fc08f9fe 05f6fbfe     ................
   2a2a8:	fbfa0a05 f90c05fc fbfb09fb 0201fd01     ................
   2a2b8:	0404f606 0d06fbfe 0500fe01 fc01fb0a     ................
   2a2c8:	06eff507 04fe02fa 02f7ff05 f8fafc00     ................
   2a2d8:	fffd0bfb 00fbfcfb f8f606fb 0103fc11     ................
   2a2e8:	02faf50c f700f80d 09fdfdf2 0500f208     ................
   2a2f8:	090c0506 fd010a02 fe01faf7 fd0800ef     ................
   2a308:	07fdf8fb fd0702f4 fefdffff fafdfa04     ................
   2a318:	f7fb03fd 02fc0208 05fe0c09 03fb040e     ................
   2a328:	fc00f602 0702fe00 04f604fc 0cfcfb09     ................
   2a338:	f406fa04 050102f3 fbf6f801 fb05f7fa     ................
   2a348:	f70afdff ff040000 00fbfefc fffb01fe     ................
   2a358:	f9010cf7 fcf90a0a 00f7fe02 f80109fb     ................
   2a368:	fef80503 07f70509 0afcfffb fe04f7ff     ................
   2a378:	fbfb00fb 0b01ff03 00fa0105 02fd0103     ................
   2a388:	f8f90a05 f30903f9 07fcf8f4 f9fa0800     ................
   2a398:	fb13fdf3 03f90108 01fe01fb 050b0bfd     ................
   2a3a8:	f800060e 080705ff fb07f9f8 fbfd1304     ................
   2a3b8:	140b060b f203fc07 090b0eee 00f0fcf4     ................
   2a3c8:	0cfc000f fd100f12 f9fcfffb f40905ff     ................
   2a3d8:	f5fff9fa 0d11f7fb f80f171a 07fcfb07     ................
   2a3e8:	05fdfbf1 fef41000 0c0b10ff 00f1040a     ................
   2a3f8:	f30403fa fafa05fb ff020e12 020dfc11     ................
   2a408:	f4fd0008 04fe03f8 00fefc0b fcf400f5     ................
   2a418:	fb02fc07 fc10fc06 05fd05f7 0d02fe03     ................
   2a428:	06fcfb0c f80d0a0a f8fb03f5 04fbf7fc     ................
   2a438:	09ff0bfd fb0e0afd 040108fc f701f2ff     ................
   2a448:	060402ed 02030e01 fffe0d02 f3f30705     ................
   2a458:	fd0111ef 04fdf3f7 00f3f209 06fd0010     ................
   2a468:	f2f8f4ff 05f40300 fcfff4f7 0805f903     ................
   2a478:	f6ff0d0a f8f4f7f6 0701fff7 0103f3f4     ................
   2a488:	0813fdfc f9f901f2 fb070102 01faf8f9     ................
   2a498:	f5fbfef4 00f812fa 0c04fbff fc030c05     ................
   2a4a8:	0af7f30a fafef702 f907f409 06fe1003     ................
   2a4b8:	ffea0707 0800fff7 1000fbf8 f7fafc05     ................
   2a4c8:	fc01fdf6 0401f1f8 041104fb fa0dfd00     ................
   2a4d8:	f9f3f9f5 f9f6fd10 f7ff0aee f703f504     ................
   2a4e8:	07fa08fe 0608fef0 f70c0efe 0d0bf7fd     ................
   2a4f8:	f8050311 00f1080d fc08fbfd 04f10509     ................
   2a508:	0ffff903 04f4fefb f9fdf6f8 02f9f205     ................
   2a518:	04fcf20a 06fe04fb f709faff 00f9f3ec     ................
   2a528:	fd03190e f902fff1 05fd0602 f4f6fbf0     ................
   2a538:	f2fef0f9 fafd05ff fcfc0908 f6020504     ................
   2a548:	03e9fa07 06fdfc09 f7eafc09 0808ed0b     ................
   2a558:	fafdf902 08f7f4fe 03000103 0707faee     ................
   2a568:	0009fbec f6feef0b fafcf6ea fb0707fa     ................
   2a578:	fe04fcf9 08060b0c e4f5faf9 08f2fdf6     ................
   2a588:	fcf9070e fc0bfc01 f8030108 fbeef5f6     ................
   2a598:	08ed0307 f7f30115 1900f001 f2f2ff0a     ................
   2a5a8:	0d06f3ee 06f8fc05 0c03eef6 08f902fb     ................
   2a5b8:	f1ede908 0700eded fcff06f8 00fc02ed     ................
   2a5c8:	07fc03fa efedecdc ff0911f3 f8010cfe     ................
   2a5d8:	fef2fd09 e502ff0a 05f1f7ec 0f05000f     ................
   2a5e8:	02ef001b 0601f3fe f1e30b08 07fdedef     ................
   2a5f8:	0102fd00 faf8effd 060c06e6 e6ebde09     ................
   2a608:	020af3ec fb0e1210 0200f8fd 020704f9     ................
   2a618:	feedebe6 f61409fb ff040a06 fff4fc09     ................
   2a628:	e5fe09f2 05f8ebfc 01fc0c04 01f70c11     ................
   2a638:	0f030101 03ee05fe 060ffef1 f902f600     ................
   2a648:	0c02fafb f712fcf3 f2f3e10c ff0009f7     ................
   2a658:	00fc1504 0a0602f9 050309fd 04fdf4e6     ................
   2a668:	fc0702fa f8080c0a 00fdf8f7 e8000f0b     ................
   2a678:	01fbe2f8 0df609f5 fcfe0006 fe0aecf9     ................
   2a688:	fae50709 fdfbf8fb 0b03fffe 050a0901     ................
   2a698:	fd080202 eafaf004 03f7f7fe 0d150c02     ................
   2a6a8:	00070204 000b03f9 fdf104e5 fc0602ee     ................
   2a6b8:	ff0b060f fc0303f6 f503f70d fff1f408     ................
   2a6c8:	fcfdfd07 fef0050a 0affecee 0cf80bfa     ................
   2a6d8:	0afefaff f4f70008 06020206 f2060608     ................
   2a6e8:	fe070206 01fffef6 0d0e0813 0b05fdfd     ................
   2a6f8:	0002fa04 01010ef7 f810f703 fa0c10fe     ................
   2a708:	0209fbfc 090007fb f1fa0311 05fd0af2     ................
   2a718:	f40705fe f0fdff04 0dfafcfb fa03f7ff     ................
   2a728:	fbf90207 0b06050b 040f0a0d fd03fffd     ................
   2a738:	fcf10700 f9000304 19f70bfb 04040907     ................
   2a748:	fe0912f6 080a000a fb0ef106 fd0df600     ................
   2a758:	09f90600 0a06ff0e 0b0906ed 05fc0f11     ................
   2a768:	f9050308 1104fd09 03040405 04020efd     ................
   2a778:	06fffa03 090f13fd fe0203f6 06f4fe05     ................
   2a788:	0c13fc0f 02fb05f6 04f311fd 02fe0504     ................
   2a798:	0b05020a ff01010d 060afefe 01000309     ................
   2a7a8:	06fcfc11 0b0201ee 07fcf910 fafb090f     ................
   2a7b8:	101508fa f10b02f7 12030204 fafffd03     ................
   2a7c8:	060a1005 f80d03fc faf3f409 fcfc1209     ................
   2a7d8:	02010905 fdfc180e 02ff1206 030bf701     ................
   2a7e8:	0500fb03 05f8fcf2 0a00ff03 fe0c0511     ................
   2a7f8:	02f20702 fafefb05 0d0505fe 0a020309     ................
   2a808:	00f60101 030bf904 0cf800f9 0c0ffdf6     ................
   2a818:	fe08f8fe 01fbfff5 010311fd 08fff808     ................
   2a828:	0b030707 06fe0e0e 010d0202 faf80704     ................
   2a838:	0314fefe 06fd0203 f9020317 00f60202     ................
   2a848:	fcf4fd04 03fbfffb fffefe02 01050803     ................
   2a858:	fdfcfd08 fef50bfb f8f9f9f4 0d030dfd     ................
   2a868:	020a0506 ff00f800 f4fd05fd f9fdfef9     ................
   2a878:	040e0a0e fa0902ff fafef8f9 00fdf6fe     ................
   2a888:	07f8f700 ff0c06fe fe02fcfb f8f9fb02     ................
   2a898:	f7fcfc03 0a0a07f2 000307ff f3ee02fe     ................
   2a8a8:	fcfdfef8 f4fafff3 050709fd 0f07ff08     ................
   2a8b8:	05fefcf2 fdf702f6 02f5fcfe fffcfbf9     ................
   2a8c8:	fc010007 f1f300fc fd0202ef 04fcf8f4     ................
   2a8d8:	02090900 f4fd0506 f5f70806 040a02fe     ................
   2a8e8:	fffe0404 fc04fb07 fefe0a11 05f9fef8     ................
   2a8f8:	ef03f8ff 04fa01fc 00fb06fe 07020801     ................
   2a908:	00fafc03 ff0101fc fafcfdff 0a06fd03     ................
   2a918:	0009fb03 f1f501f3 03f808f4 06fe0d00     ................
   2a928:	fffef6fe 0907fafe 00feff01 0afffffa     ................
   2a938:	060b0005 05fe0e03 f5fffaff f3f5f902     ................
   2a948:	fdfff803 fa030905 f3fbff04 02fa05fa     ................
   2a958:	0afefff8 f7fff801 fbfdfef8 f8f9fe08     ................
   2a968:	fa0104fb 0002f603 ff02fefc 050dff09     ................
   2a978:	faf3ff04 060301f2 05050aef 0afcf200     ................
   2a988:	fef600f9 00f2eef7 f3ebf503 ff0210fb     ................
   2a998:	0508fffc 04010aff 02fa05fe f7f7f9fe     ................
   2a9a8:	06040805 0404fcfe 0609f6f5 fdf9feff     ................
   2a9b8:	0df9f400 f9f6fd04 04fc00fb f7fefffb     ................
   2a9c8:	fa08f902 00fe01f2 0afcf5f9 fc090602     ................
   2a9d8:	fefffbfd 01fb01ec 00f609fa 0303fffa     ................
   2a9e8:	f1f70cfc 0306fdf0 04fb0200 04010a08     ................
   2a9f8:	f8fb01fa f6ff0109 f9eefe04 0701f7f7     ................
   2aa08:	00fb0604 fcf6f903 00ee03fc fef10209     ................
   2aa18:	090b04f1 0701fc06 06060b01 fafdedfb     ................
   2aa28:	0907f103 010509fb 040c07f0 f1fc09fe     ................
   2aa38:	f702fff6 f901fafe ff09fff6 fcf6fefe     ................
   2aa48:	000bfa00 02f4fff4 f105fefc f9edfaf3     ................
   2aa58:	f6f7f913 fbf6fb02 fd03f7fa f0f807fd     ................
   2aa68:	fef8fdf3 03fc0401 0000f6f9 f5fffaff     ................
   2aa78:	0003f207 fe0ffdf5 08fc01f4 f6010703     ................
   2aa88:	08f100f8 f4f4f1f8 030611fd fbfd040b     ................
   2aa98:	01fff40b f4050204 f6f4f801 fbff0506     ................
   2aaa8:	03fb0206 f501f5f5 f5f5fa01 0ffdf9f3     ................
   2aab8:	fcf70801 f504fdfb 02fa02f1 fbf6ff08     ................
   2aac8:	0510f7f7 f9fbfbf0 fc04f700 08f6faf5     ................
   2aad8:	fdf1f3f7 01040109 fb0307fd 0a0b0902     ................
   2aae8:	f302f602 02f6f9fc fb03f3fd 03f9fcf8     ................
   2aaf8:	f7f1f10c f6f8f8fa 00fefefa f8060b02     ................
   2ab08:	f5f6f308 f7edf905 fefdf6ff f709f7ff     ................
   2ab18:	00f8f7f9 07f8fc02 fa0407fc 00f3faf3     ................
   2ab28:	090afcfa f6ff0107 f7fe0007 f303f708     ................
   2ab38:	fffaf8f6 0406fef9 07fbf706 fbfbf309     ................
   2ab48:	fdf0fdfa 08f3f5fe 020908f6 05f80509     ................
   2ab58:	fe05f6fb f401ef00 fafef3fe fffd0b0a     ................
   2ab68:	fd020208 03fcf9fd f6ed0602 0102f6ef     ................
   2ab78:	04fafb05 f702f1ff f307f903 faf0fc02     ................
   2ab88:	02010003 ff01faf6 f2f204fe fcfaf5f2     ................
   2ab98:	07edffff 07f9fcff f6fdfc01 fc0604fd     ................
   2aba8:	0903f705 fe05f001 0a060403 f702f8fe     ................
   2abb8:	feff09ef fe080a06 05fcfbff f70905ff     ................
   2abc8:	fdf9f8fa 0702f9fa f9fe0205 f8fffa00     ................
   2abd8:	fa01f3fc fc0003f4 fe020106 f8fbfdf6     ................
   2abe8:	000108f8 fe03fcfb 02f7f207 010606fb     ................
   2abf8:	f900f4fc fa010107 fc02ffff fc010306     ................
   2ac08:	fffd0607 01fc0104 fffff3fd 070407f1     ................
   2ac18:	05f8f904 fa06fbfe ff09fffa 06fcec06     ................
   2ac28:	080600fd 0903f902 f8fefdff 0afc0b02     ................
   2ac38:	f605f8fb fff6fcfc fb14fefe 0002fb06     ................
   2ac48:	fd1209f5 fffff2f3 00faf4fd 0506110a     ................
   2ac58:	ff0afc02 fbfdfcf6 01040608 0603fbff     ................
   2ac68:	0606fe0a 02f708fb 04f503fd 05fefbf5     ................
   2ac78:	08fa05fd 03fafffe 03f80503 f3f90400     ................
   2ac88:	0400fcf3 fe0402fd f7fa0512 edf7fd08     ................
   2ac98:	f2fafff0 0dfffef9 0804fbfe fef4fbfd     ................
   2aca8:	02fb08f9 06fdfcff fe0d0401 00030702     ................
   2acb8:	fafbfbfa 0200faf9 fffff801 09050102     ................
   2acc8:	fbfd0afc 0304fc05 f2f400fd fbfcfdfc     ................
   2acd8:	0002fa07 0cfdf804 f7fd0206 00f1f9f9     ................
   2ace8:	feff0a03 04010b04 f906faf0 f7eefc09     ................
   2acf8:	03f7fcfd 1af6f701 f90e070b 091005fd     ................
   2ad08:	1202f7fd 00fc0107 090ef6fa f6fb160e     ................
   2ad18:	f90afcfd ff01100e 09161118 071510f8     ................
   2ad28:	fd000002 0500fefb 0ff709fb f5040711     ................
   2ad38:	0f0d0705 fd00f4fd f5fbff05 0109040d     ................
   2ad48:	fff30f12 f603ff04 0b01fef3 0100f3f7     ................
   2ad58:	00f60302 05050804 f5f1fa0a f5f302f8     ................
   2ad68:	090c0707 fefcfc14 f1f8faff f700fdf6     ................
   2ad78:	fa06e9ef 090009fd 02030001 f5f801fd     ................
   2ad88:	f6f0fdfe f904fbea 0902fa13 f9fff704     ................
   2ad98:	f8f8fbf4 fafb00fa fa01fcf6 05060a07     ................
   2ada8:	f7f10d03 0e02f0fc 0c00f6fd f8fa0109     ................
   2adb8:	040703f8 eef9ea09 0afbf1f6 fbfa09fa     ................
   2adc8:	ff0a08fa 01feff11 fee9f2ef ed03040e     ................
   2add8:	eefd0a04 06f70305 ea0af605 08e5f6f7     ................
   2ade8:	f60f07f5 07fc0202 fbfcfcff eaf4ff03     ................
   2adf8:	01fef5fc 10fefb07 01fe01fb 0702f70f     ................
   2ae08:	ece0e611 10f8f2e9 ff0bfaf0 fdfefd02     ................
   2ae18:	0ff3fafe f6f0eee2 f4f60208 f9f7faf5     ................
   2ae28:	ebf00c04 ec010afb f5f4f1e5 00070605     ................
   2ae38:	0705fc0e 020bf80a eff10b07 04f7f3fa     ................
   2ae48:	17fcf402 fc000101 f90800fe f8dcf30f     ................
   2ae58:	0dfff4ea f50ff9f6 040202fb 07f10bf6     ................
   2ae68:	f0e8edf6 fd0205fb f0f40ff6 faf8effe     ................
   2ae78:	f10eeefb 04e5eee8 f3faf6fb fe02fa09     ................
   2ae88:	030feeff e2ee0106 fcfcfcf9 08f20206     ................
   2ae98:	f3f7faf4 040df4f4 f1e6ea0c 09f801f5     ................
   2aea8:	f1f5fe00 e9fb06f8 0afa09fc eff0eaf1     ................
   2aeb8:	ff00faf6 04ec0cf2 fef2fd01 f905f806     ................
   2aec8:	fcf0f1ee 02f800fe fbf9fe08 01ee0402     ................
   2aed8:	f0fc0b0d f9e302f7 08040508 eaf80006     ................
   2aee8:	050cf902 f1f9f605 020cf400 060704fc     ................
   2aef8:	f6f5fbf1 ff0402e9 09fb03fe fd0e090b     ................
   2af08:	070bf4f4 fff402fd f7fcf9f8 05010202     ................
   2af18:	fd00fef4 08081509 06f815fd fafef5ec     ................
   2af28:	07fe00f3 fafff107 fe0a0b03 0f0ffef8     ................
   2af38:	f002fefd 00080107 05fb13fd f7f4f405     ................
   2af48:	010a07fb 03f7fa0a fc0ffe01 fe0802fd     ................
   2af58:	0402f7f5 03010b19 06030109 fe0bff0c     ................
   2af68:	080cfd09 0cfc0bf9 0000fbfc 04f5fcf8     ................
   2af78:	fff3f200 f402040b 0808f4fe 09021403     ................
   2af88:	0efafd01 0502fcf9 f6fe00fb 04fe17fe     ................
   2af98:	fff8f611 0700fb0e 0f08faf6 010ef600     ................
   2afa8:	1000f301 04f5fd0b f70ef804 0d06fb03     ................
   2afb8:	07fa03fc 0612f9f7 f5f603f4 ffff02fc     ................
   2afc8:	f100fdfa 0b0f0506 0401fffd 04f9fcfc     ................
   2afd8:	09fe04f4 fc020007 f20e0009 faff0d08     ................
   2afe8:	eef8f014 0b09fd00 150e020b 0fff0d0f     ................
   2aff8:	05fd010e fa0bf1fa 07f7fc06 16ff09f4     ................
   2b008:	fd10fdff 09eefdf7 05f90efe ff080203     ................
   2b018:	0708fefe 010d12f7 09010402 01faf4f7     ................
   2b028:	fcfa04f7 ff050804 04f90807 fffbf80a     ................
   2b038:	eefc09fc fa0fff0a 0b06fc13 f6f60102     ................
   2b048:	01f6f906 07edf8fb 090302fd 07100006     ................
   2b058:	eff90204 05fc01f8 fa02fc04 fc0805fa     ................
   2b068:	fa0312fb eeee08fd fd06fff0 f4f8fded     ................
   2b078:	ff07f605 f8f80c09 e7faecff 060603fe     ................
   2b088:	0eff04ff 14fd0afe 02fc0c06 0cfbf9ea     ................
   2b098:	f7060005 130305fb 040803f8 ff050a09     ................
   2b0a8:	f906fd01 f5fbfe06 07f4fef7 071513f6     ................
   2b0b8:	02ec02ff fef5fbfd f2f7efff f3f8fb07     ................
   2b0c8:	0bff0610 01fe0b0f 0409fe03 0cfcff02     ................
   2b0d8:	11fa050a fcf800fb 0e07f8f9 070dfd00     ................
   2b0e8:	1101faf8 0a0ef6f5 fb020908 00f6f6fa     ................
   2b0f8:	04090408 06fa0107 050f0df6 02fe0cff     ................
   2b108:	fff607f2 04ffff04 f400f9fa 0a01100d     ................
   2b118:	04fff70c 020cf60f fff215f8 01fb0301     ................
   2b128:	0d02030b 0700ebf6 0004f2f6 fdfc0dff     ................
   2b138:	0302f606 fa040dfb f8fe0bfd fc07fe05     ................
   2b148:	04f8fbf6 0e1805f8 f9f2fc0a f9fdfefc     ................
   2b158:	ff04f6fe ec0100fe 0507110a f9000606     ................
   2b168:	fafcf4ff 02f8faf5 0bfff90b 0007090c     ................
   2b178:	0aea0200 fef7f9fe f9ed00fa 040ef005     ................
   2b188:	01f9fc0d 03f5eef8 02f30bfe fb0efc03     ................
   2b198:	09110ff7 ecff06ff 06ff19fb fefcf1f4     ................
   2b1a8:	0f04e7fb f6e4f3ff fd0b09f9 f2fcf9fb     ................
   2b1b8:	fde2e9fe f403f4fc 00f1e5ea fefd060c     ................
   2b1c8:	f2f8f507 eff8efef f4f810f3 0303f5f3     ................
   2b1d8:	f7f6ef0b fefff9fd f809fbf1 f8f8f605     ................
   2b1e8:	0206f0f0 0bfe09fd eef0faf1 12f3efec     ................
   2b1f8:	fbfaf3f7 ee010505 f3effaf8 04f7faf5     ................
   2b208:	fdfef6ed f3f3f1f9 07fd0101 f0edfaf4     ................
   2b218:	fd05effa 04060a09 f9f700fd fe0ffffe     ................
   2b228:	fff0ea00 04f900f6 fafb06fa 01fcefff     ................
   2b238:	fa0002fa 0101eef6 f8fe0201 fcf0f104     ................
   2b248:	0003faf0 fd03070b fb01fbf3 08fa01f7     ................
   2b258:	fdfbf1f8 0f05fef6 01f6ed0a f6f9f2f5     ................
   2b268:	03090600 fff5fa00 f10007fa f4e7ecf8     ................
   2b278:	0d00fbf0 fff51404 0c02f5f5 0502fe01     ................
   2b288:	edf8f5fd fa04fa0a fef0fa06 0a05faf6     ................
   2b298:	fefd0005 f5f5e9f3 0003faf5 0b02ff0b     ................
   2b2a8:	08fa00f7 f0ef0901 fdf507fc 080cfbf6     ................
   2b2b8:	01f5f8f7 ff0e11f5 01f6fe00 fd0606eb     ................
   2b2c8:	fd0b0500 0003fdf9 fcfc0b11 05fa000a     ................
   2b2d8:	02f2fa0f f7f80915 020506f5 fe040b0b     ................
   2b2e8:	f0f4f8fc 03fef6ff f6040305 0ffb05f6     ................
   2b2f8:	f2efefff f504f501 0009f8fa f906f9ff     ................
   2b308:	0d13ffff fcec0606 070609f3 03f6ff0a     ................
   2b318:	faf3fef4 f4eefb06 fc0af8fe 060200fe     ................
   2b328:	f603fe06 fb04fbed 0cf8fef3 f402f802     ................
   2b338:	0e02fcf2 f0f9f106 01f7fe03 f7f2fefa     ................
   2b348:	ff010100 040d01fe 08fb0205 f8fffbfb     ................
   2b358:	f4f7f202 fc0802f5 ff0c06fb fb03f8f9     ................
   2b368:	fffb0cfb 0b05f508 0209f6fc f7ef0809     ................
   2b378:	f7010ff6 0703fc00 fb00f504 0af6fbf5     ................
   2b388:	07f9f006 01f5f903 f6faf403 fe070a01     ................
   2b398:	050d0304 fdfcf2fe fcf9fff8 fb02f201     ................
   2b3a8:	00020405 ff010102 f8f5faf7 0809fefa     ................
   2b3b8:	09fdffee 04f5fc01 03ff0013 f9040ef0     ................
   2b3c8:	01fffffc f9f7f4f4 08fc0a02 02f0f3f6     ................
   2b3d8:	0efaf4fe 04ef04fb f2020003 041201fb     ................
   2b3e8:	040306f6 07f9eef6 fdfbf4f9 10030406     ................
   2b3f8:	05030707 f8fff0f7 fe030b07 0908f9f9     ................
   2b408:	faf9f30a 03f5fc01 fcfcfff5 f2fefb02     ................
   2b418:	ffff01f7 0206fff6 fafff7f8 0a0401fc     ................
   2b428:	02f2f6f6 f707f8fd fc13fe01 00eff4fe     ................
   2b438:	fb06f9f5 f6fdfb03 05fe0cfe fbfc06fe     ................
   2b448:	0200f803 fd030800 ef06fafe 0200f7f4     ................
   2b458:	0cf801f9 f3030302 0309f3ff 00020405     ................
   2b468:	0b011304 07feeffc 1201ff0e 0afff4fb     ................
   2b478:	fe07010e 030b07fd 030408f7 07ff0107     ................
   2b488:	02f2ff0e fb010f02 effd040b 070bf2fa     ................
   2b498:	0602fb06 0601f901 f8f7f7fd f8f60207     ................
   2b4a8:	ef0c0a07 0b0df902 020904f7 fe08fdf2     ................
   2b4b8:	09fffafe 01f2fff9 f9fefe03 fff9fdfe     ................
   2b4c8:	f3070af7 fff6fff5 1205f3f9 02090600     ................
   2b4d8:	01f80c0c fbfc0e01 fb02f809 ff050cfc     ................
   2b4e8:	06f9fcfe 0307ff08 0bfc0807 eafdfbf8     ................
   2b4f8:	0002f203 0308f9fa 0309f8ec f800f9f9     ................
   2b508:	01000807 fbf3fdf7 080800fb 0d08fe08     ................
   2b518:	02fffbf3 0104fdfe f80bfefa 0af8fcfd     ................
   2b528:	000c0d04 fcfeed05 00f706f6 0b0501f6     ................
   2b538:	01ff00fe 0ff4fa04 0c030205 fafbf4fc     ................
   2b548:	f6fbf9f2 090704fe 00fbfff4 f8fc08fa     ................
   2b558:	f6f0f70d 05090dfe f40e0006 03fb0401     ................
   2b568:	03f1f207 ed0307fd 05fc0007 01f90601     ................
   2b578:	07fd0305 f403f9fe fc02f7f6 020505f6     ................
   2b588:	10040108 fcf6f8fc fbfef5f7 f9fff2f3     ................
   2b598:	0106feef 00080001 00fafaf4 f7f508fe     ................
   2b5a8:	01f90403 fe0e05f8 f7f907fa f7eaf802     ................
   2b5b8:	fefaf8fc 02f40d08 f0fa070d 0c0001f5     ................
   2b5c8:	fbf6f0f7 0102f3f5 08020802 11f70b08     ................
   2b5d8:	fb05fff6 f3f5f4f0 0302fff6 080afcfd     ................
   2b5e8:	0308f5fc fdfb0afe fff9030a f9100cf3     ................
   2b5f8:	fa0602f3 08f5f8ef f8faf80e 05f9f004     ................
   2b608:	02010a02 eff20905 00f9f1fb f60a0302     ................
   2b618:	0000f700 10fe05ff fbf3f504 020007fa     ................
   2b628:	fffff1f2 fbfc01f2 0108f5ff f8fcf5f8     ................
   2b638:	fff6fbff fbf5f2fa fc00edf1 f3000b08     ................
   2b648:	fdebf2f9 f0eef0fa fbfef300 ef010b03     ................
   2b658:	01ead80a fffd02e2 04100d02 1602020a     ................
   2b668:	09fa02f2 e5f9f7d8 0ded00fe 04f20302     ................
   2b678:	fb09010e dc0b0103 ffedfaec fb06f800     ................
   2b688:	0bf503fb 05fb0cfc f5ec0503 0003e9f8     ................
   2b698:	0e0001e7 1100fff4 fb01f502 ff01f904     ................
   2b6a8:	f810f7ef 060ff3ff 0f00fe05 fbf80200     ................
   2b6b8:	f8f4f9fd 14fd010e 00ff16ff f0060bfa     ................
   2b6c8:	000403f1 0401fe0c 1116f6f0 fdf7fa12     ................
   2b6d8:	f4f71013 0a0a10f7 0a060500 100205fa     ................
   2b6e8:	0dfb0a0c 0bf5f717 0705fe04 fe010cf4     ................
   2b6f8:	02090a10 05f40602 04fffb00 05050b00     ................
   2b708:	1005f301 0dfcfffc 090509fc 0201f205     ................
   2b718:	03f20502 fd0ffcf0 11fe000a 04f20d10     ................
   2b728:	09fc00ff ff08fefe 0af71408 050303f4     ................
   2b738:	0a04030e 0302fefd fe01ff0f f1fff700     ................
   2b748:	11f9050c 09fe0302 0211f3f6 07fdf402     ................
   2b758:	06fd01f2 f4060c03 030a03fb 090702fb     ................
   2b768:	ff0becf6 0f10040d f5050b10 fcfd0b0c     ................
   2b778:	f1080506 01fb11ff f6fc0404 02f2f816     ................
   2b788:	fa01ff02 fbed030c 0207ef04 ff080d13     ................
   2b798:	fd030002 0bf6f9f6 0cf8f813 0bf606f5     ................
   2b7a8:	02020d07 070e0802 010e0c05 f709fae9     ................
   2b7b8:	0e00f809 faf60006 f9fd0108 ea0b0704     ................
   2b7c8:	fbf50e05 f3181104 09f6e9f8 080efe0f     ................
   2b7d8:	f6f40b0a f905eeff 06f91006 0f0a00e0     ................
   2b7e8:	0403fbfb 04f9e806 16090dfd f8fefa0b     ................
   2b7f8:	0f0404fd 02040906 fbfb01e9 0211030e     ................
   2b808:	06ff130b 0404ff06 f50e1210 05041309     ................
   2b818:	f6101512 07f60d1e 0e0c0a0a 0402080c     ................
   2b828:	fc00f5f0 080efa10 01fc090a 070b06f9     ................
   2b838:	0805f008 09f103fb 010c0505 f30cf5e5     ................
   2b848:	ff0e08fb 000105e6 0b0c0409 02000015     ................
   2b858:	02fd080f e1070508 090016f5 f2ff0dec     ................
   2b868:	fffbfa0e 0f05ea0a 04ff01fe f0f0ff03     ................
   2b878:	06fe020d 010b0506 080a04fd 09f0ee03     ................
   2b888:	0dfbf402 0c0a0307 fa08fef9 020f0ff9     ................
   2b898:	e4fe05ef fcfdfc01 fd061e11 04f708fe     ................
   2b8a8:	fafc140a fdfcfff6 09030cf6 fcf70a16     ................
   2b8b8:	00fafb05 fbeaff17 f705f703 fef90600     ................
   2b8c8:	090004fe f8010407 07fdeafa 06f004f8     ................
   2b8d8:	f9130bfd fd0bfdff 020108fd fc0b04f4     ................
   2b8e8:	fefcf6f1 f9f811fe 05feff09 e903011b     ................
   2b8f8:	fbfef5fd 02fbf9f5 09021012 17f9fc03     ................
   2b908:	07f8080e 0107faf9 0d060600 050e1101     ................
   2b918:	f407f408 ff07f308 04fd0402 fe000a03     ................
   2b928:	f40c04f6 040a16ff fe0a0bf9 000def09     ................
   2b938:	08f50e14 01f800fa f703061c feee0f09     ................
   2b948:	120605ff f5ef1110 1704fb03 0ff60a03     ................
   2b958:	fe050204 110c080f 020c000f 070def06     ................
   2b968:	0502f70e 01f91101 10181107 000904f3     ................
   2b978:	f90915f1 f812f6ee 0414fe0b ee000310     ................
   2b988:	01ff010c fa04fe1f 0bf8faf4 0dfffe0a     ................
   2b998:	07f402ff 15fff409 fbf6030a 050ef905     ................
   2b9a8:	0b010313 0c0ffff4 f90b0300 01f6ff11     ................
   2b9b8:	0e05fb00 0012ff0b f505fbe9 12050ff8     ................
   2b9c8:	0a0202fb 0d00fb03 08070a0c fefe03fc     ................
   2b9d8:	020f020d f900faff 0d0802f2 10020506     ................
   2b9e8:	1cf2feff 03080707 0a0d03fe fc12070e     ................
   2b9f8:	fbfc08fe f90cfdf8 fe041105 fef30d04     ................
   2ba08:	00ff110d f3fcfa0f 09f801ff f8fbf606     ................
   2ba18:	0c09f804 130b040a 04f20002 ff04f518     ................
   2ba28:	08fe05fc 04fb0006 020cf802 150006f6     ................
   2ba38:	f50c0afb ff0c00fc 08000211 fe02f60c     ................
   2ba48:	060bfdf9 07f50103 0bf0fffc f20bfc09     ................
   2ba58:	01f9f203 fdfe09f2 0902fa07 0300090f     ................
   2ba68:	08fc0c01 e7f407f8 0bf1f10f 0beffdfe     ................
   2ba78:	f9f411f9 f10dff0c 13f2010d 0303fff4     ................
   2ba88:	fe040107 faf50204 fefefaf6 0214fc06     ................
   2ba98:	fcf60102 0e0214fb f3000a14 fefcfafe     ................
   2baa8:	0efd15f1 020bfdff 02020012 fff7000f     ................
   2bab8:	fffe00eb 02fafa0f fce7fffb 0ffe0dfa     ................
   2bac8:	f5fefa0a 18f7fc09 00fb04f8 f313f904     ................
   2bad8:	01000509 fc0a0309 fc07ebff 05f40104     ................
   2bae8:	0cfa00f5 fdfe04fd f2f9f8f6 00ff07e6     ................
   2baf8:	f6050511 04fe0409 03fe0700 05fe05fd     ................
   2bb08:	f3f2020d f1070afa f6080000 00f8fcf9     ................
   2bb18:	12000101 0507ff0e 05000106 01fcf6f8     ................
   2bb28:	fdf5fef6 fd0d0512 0df10509 e704f1ff     ................
   2bb38:	f2f6f5f9 09fa02f5 f70b0e05 030d02fd     ................
   2bb48:	fff20ef2 06f90af0 f711fbf8 03070706     ................
   2bb58:	f0f8140a fd01f3fc f4fbfc03 10080b09     ................
   2bb68:	030b09fc 03f4fff8 faf2faf2 fafafbf9     ................
   2bb78:	0408fc01 f9fd020d 030feef3 f8f4f8fd     ................
   2bb88:	160bfaef f7070cfc fe0bf203 f4f90cf3     ................
   2bb98:	ff0407f5 effe02f4 0afc0304 fafb0ef9     ................
   2bba8:	fefd0710 fc01f4fa f9f6f402 fe0bfff4     ................
   2bbb8:	01f60a08 f2fb02f2 0700f3f9 fbf500fa     ................
   2bbc8:	0f0004f9 f807f6fe fff9f307 0a0506f6     ................
   2bbd8:	00f8faf4 0d0af611 05fef4ec e8fd04fa     ................
   2bbe8:	f2f70df0 f40606f4 fd141dfb fcfff4fa     ................
   2bbf8:	f2fafaf4 fcf3fe10 fb0301fe 1300fa07     ................
   2bc08:	feeefbfb 14f800ec f2fae6f7 0a0609fe     ................
   2bc18:	0600f405 f900f8fc f017f6ff 08fbf6f7     ................
   2bc28:	070f0a09 f9fcf6f9 04f4f2f8 e9fa17f0     ................
   2bc38:	0a00f9fb 06fe1906 f7000208 ec00fc01     ................
   2bc48:	faed000f 0a1307f5 03f4030d 03f7fbfa     ................
   2bc58:	0cedf7f4 fcffe801 12020dff f303f6fe     ................
   2bc68:	f3ecfffa 000beff2 05fc07ee 0408f804     ................
   2bc78:	f8f5fbfd 00fdf1f5 f60509f7 0cfdfffd     ................
   2bc88:	ebfd0cf8 02fd00f9 f4f7f0f6 fcf0fc10     ................
   2bc98:	f90bfcf8 05f3fe0a 11fd0801 05e4fbf5     ................
   2bca8:	fa03f307 11fb12f8 f6fdf3fc ee06f808     ................
   2bcb8:	0104f0e9 00fdfff9 f90af812 f5f3fe04     ................
   2bcc8:	fbeef0e0 fd070ae5 0bfff809 06001109     ................
   2bcd8:	e8f5fd0b eaf8f009 f5f90203 0a0bfc02     ................
   2bce8:	fafd0002 fdebf504 05eaf2f2 03000602     ................
   2bcf8:	fcf51007 f8080afa e6fcf103 1103e8eb     ................
   2bd08:	02f504ef f8020200 f9fbfff5 02f9f3f3     ................
   2bd18:	f10908ea 04fcf304 f9fb0efa f902faf2     ................
   2bd28:	f3fdeb0b 08fb0304 f2010800 0efdfafb     ................
   2bd38:	f5e70206 08ee03ed f8fef70f 17f809f7     ................
   2bd48:	f401fff5 e506f602 0206ef02 fe07fdf2     ................
   2bd58:	f806fd09 f4f605fb f3ecfdf4 070d01f1     ................
   2bd68:	0203f90e 030402ff fb02fc05 e8f4eff7     ................
   2bd78:	0504ff08 010ff6fd ff04060c 08020702     ................
   2bd88:	02f90200 fa010008 05f302fa f901ff02     ................
   2bd98:	020cfffe 140003f9 06f403f6 05040a11     ................
   2bda8:	fe02fbf8 efedf8fc fc0b04ed 03f6fffc     ................
   2bdb8:	ea0206f5 f7fc01fc 02fcf810 fcf80b0a     ................
   2bdc8:	fa0bf8fd 07ee0308 f5faf5fd 01f6fcf1     ................
   2bdd8:	01f9f80e 01ed0bf4 fd02fefa f5fdfafe     ................
   2bde8:	04ff01fc fdfe0509 f40c0105 ff0d0af7     ................
   2bdf8:	efeff6fd 031102f7 fbfefbfc f5000703     ................
   2be08:	fd0af905 fafbfbf8 04fd0505 fc0509fb     ................
   2be18:	06f51411 f8f30000 fd010bf4 04100210     ................
   2be28:	f1f80008 00fdf912 f4fe0f03 1002f0fe     ................
   2be38:	fcf80801 0109ff08 f5f90af0 0204fef3     ................
   2be48:	f70705f5 0d0af5fd fa00fded f5eff60a     ................
   2be58:	ea01fcf4 fbfb0c07 fcfc02fd 02f0fc06     ................
   2be68:	fb0000f8 0af4fced 040df313 f7f908fc     ................
   2be78:	f80b0a09 faf404f8 0804fff6 05f500fe     ................
   2be88:	fc06f909 02fa07ff 01fcf3f8 f30d03f9     ................
   2be98:	0bf8f90c f603f7f2 f7f8fefd f4fffff1     ................
   2bea8:	08ff00fa fefb03fc 01f6fd11 fbfaf801     ................
   2beb8:	fff3f3fc 0a010405 08021206 fb0af80a     ................
   2bec8:	f9ed01ff fa04f701 fd0908f6 fbfd0202     ................
   2bed8:	fcfafaf6 eefdf4fd 020e03f4 f50804fd     ................
   2bee8:	fbfe1004 fb000301 e8effbfb 090903fd     ................
   2bef8:	f70efa08 02fc0bfe fefbf4f2 04f7eb05     ................
   2bf08:	08120a09 fffe07fb f40afefc 04f6fc04     ................
   2bf18:	0202010b 03fc0a01 111004f4 fffafcea     ................
   2bf28:	06f6fafa f91504fd 05fdff03 ff0a04f8     ................
   2bf38:	f8f40109 fc02ebf7 0ffe0e02 f90b030c     ................
   2bf48:	fcfe0f0d 0403fb05 08ed07f3 080e030c     ................
   2bf58:	0dfc00fd fef8f401 fd03f210 0600f2fa     ................
   2bf68:	110507fa 0afd0600 03020cf3 f7fd04fb     ................
   2bf78:	fc0704f2 02030002 f50504fc fb010102     ................
   2bf88:	f1f2eff0 040c0e01 f80e0909 fef40cfb     ................
   2bf98:	f7f2f504 f5f500fd 01020908 fc0409f9     ................
   2bfa8:	fbfb0504 ef01f5f3 f3fbf4e7 0df1f5f4     ................
   2bfb8:	f5fff401 f9f31000 f9000b08 f6010f01     ................
   2bfc8:	06fbf2f7 f7000ef5 00000209 0101fa0d     ................
   2bfd8:	f4f3f209 fd001101 0ffc0e0f 010a10f7     ................
   2bfe8:	0f10fbf3 fafdf8fa 06fef601 f410fdf1     ................
   2bff8:	f2030bfb fe0213f8 0dfaf1fc 050206fb     ................
   2c008:	01fe1301 f1fa0d0e fc03040a f90700f3     ................
   2c018:	fc020cfb 080aeffc f9f002fe eef90304     ................
   2c028:	fbf00d02 07fc03fc ff020af3 05fe0802     ................
   2c038:	fcfef8f5 01060410 fd05fd00 f4f5f8fc     ................
   2c048:	fe07faf1 13f5faf9 fafdfbf2 04f30507     ................
   2c058:	00f6f8fb f70cff15 f407feeb fafcf6fa     ................
   2c068:	03fe04fa 0af7fd0c f4ff0502 faf5120c     ................
   2c078:	03f9f5fb f3fbfefb f90703f4 fff5f306     ................
   2c088:	f0f8fa10 f402faff edea05f9 fd080a03     ................
   2c098:	07ff06f9 f10102f7 f0fafcf6 0a0b0907     ................
   2c0a8:	fd010204 fd0806f0 01f7e104 0cf90100     ................
   2c0b8:	fdeee3fc f804fa06 f8ff1606 fa0bf6ee     ................
   2c0c8:	f9fff400 07fafdf8 12f0fa08 f503f411     ................
   2c0d8:	04fefffc f1fb0501 fa0b03fb 1503effe     ................
   2c0e8:	fbeaf7f5 ff13fa02 03fe020e f3fe06fd     ................
   2c0f8:	f91106e8 f3fcf4fc 00f40100 f5090009     ................
   2c108:	f701030f 0bf30f0a 05fafbfe 0203f3fa     ................
   2c118:	fdee08fb 10fb0309 f10afe19 fafa05f9     ................
   2c128:	fd09f50f f5fe0601 0f09f0f0 f4f807fb     ................
   2c138:	ff08040f f7fcfe09 f3fe0a06 f6110ee5     ................
   2c148:	0af60502 fb0c0403 03fbf8fe f4f50509     ................
   2c158:	05e30a10 030cf003 00fdfaf5 09fdfef7     ................
   2c168:	0cf8f9f6 fdfef30a 0611fdfb 090305f3     ................
   2c178:	fa0d08fb 120705ed 03050be6 ff0415f7     ................
   2c188:	f0fdf20b f1f70df6 e602fff5 f9fb0d01     ................
   2c198:	07f309fe 07fe030c f8f3fc08 09e90b04     ................
   2c1a8:	05ff000a 0a0d02fe 010af1f4 00f5f802     ................
   2c1b8:	0ffee309 04fcf102 0b0200f0 f8060af4     ................
   2c1c8:	10f8f7f1 f60207ef f409010e 0500f50e     ................
   2c1d8:	eef5010d e705fef0 f2fb1b08 01fbfffd     ................
   2c1e8:	11f6ff10 f0eaf807 08e71204 fbffed09     ................
   2c1f8:	fd05f808 110e01ff 03f4f6fc 120be21c     ................
   2c208:	fc00faff 03fa02f9 030117ee 1909f6ef     ................
   2c218:	0203fde9 f5f50501 f6fcef13 f1ff0c0b     ................
   2c228:	e718fbff f6f30cf6 0ef80008 0904fcfb     ................
   2c238:	fff3fa07 05f415fc 01f8f500 f211f603     ................
   2c248:	0a03defa ff05f1ef 0df7f215 f80f06f4     ................
   2c258:	04f407f7 f60d10f6 19fafafb ef10f5f4     ................
   2c268:	f8f2060b 030cee17 e9000a06 ef1400fd     ................
   2c278:	03f80e05 1900f604 0a08faf2 0df4f811     ................
   2c288:	07e11807 0009f602 0114faf0 150bf3fb     ................
   2c298:	fffbf1fb 0f06dc12 fefd02f4 fafa03fe     ................
   2c2a8:	fb050c03 130cfcf5 eefd06e2 00020607     ................
   2c2b8:	1001f809 fbfb0912 e1110007 f7ef0404     ................
   2c2c8:	0b06fdf1 fcff0a04 fce90308 fbea08fe     ................
   2c2d8:	f308ed07 fb14f900 0b05fdf9 fafaf400     ................
   2c2e8:	f902e007 ff0a05f9 06fc08ed 06000f01     ................
   2c2f8:	0f0301ff fb0101e4 f70dfff8 0007f609     ................
   2c308:	f8f407fe de15fffe 03ff1008 09f9fffa     ................
   2c318:	f9010b07 f6fa0601 f9e91e0a edf6f80a     ................
   2c328:	f91bf6fe 0e070004 02f2f9fc 01fff015     ................
   2c338:	f9fff500 f50313f8 030a06ff 1dfcf3f6     ................
   2c348:	f0faf9e4 f809f901 f407f2ff fcfa01fe     ................
   2c358:	e510f4fe 00f601fc 0cfbfb00 f6f201fc     ................
   2c368:	00ee0e0e 05f612fb 0102fcfd f1fefafd     ................
   2c378:	0bfa00fc f604f205 eafdeb0b 010703ef     ................
   2c388:	01ff10f3 010bfbe5 0ff903fc e5dffdf2     ................
   2c398:	f2fb07fb fefcf509 f0f6010a ee16fdfa     ................
   2c3a8:	05f6f0f4 11effd0a f8e50904 fdf7010f     ................
   2c3b8:	f7f10308 0df7f1ef f301f806 fa03ec02     ................
   2c3c8:	0705eef7 fcf7dbfe f90dfaeb 07eb12ed     ................
   2c3d8:	fc010ef6 03ff07eb fdf502ea f5fd03fe     ................
   2c3e8:	f0fcebf9 f60c0505 e40cf3fd 04000bf5     ................
   2c3f8:	11fd0204 07ea02fb fbf20104 03ec1808     ................
   2c408:	04f8fff6 ef10f3f5 fbfef8f9 fbf4f107     ................
   2c418:	fef7e70e 050d01f4 fcf813f6 040002f2     ................
   2c428:	0afff8fd 0602f5eb f6f90af2 f0feec06     ................
   2c438:	f4fc0202 f40702f8 f8051001 0df106fc     ................
   2c448:	03e2fbf6 fdebf9f9 ffef16f1 06f408f9     ................
   2c458:	040ef1fc 050f0000 fa01fc03 06fafeff     ................
   2c468:	f700f7f6 0406f9ff 05fffdf6 04fd0005     ................
   2c478:	0305fa01 01000001 fef9f7fc 010403fc     ................
   2c488:	03f8fa04 fdfbf9f4 03f502ff fcfef5ff     ................
   2c498:	03fafd07 fafafdf6 0303f6fa 02fffeff     ................
   2c4a8:	0b0003f6 fffffffb 04f7ff05 0000fbf7     ................
   2c4b8:	fa0007ff fd0406f9 f6040008 fff9f5ff     ................
   2c4c8:	0502f9f6 0200fe00 fb03fb03 f70405f9     ................
   2c4d8:	faf7fafa fc0504f4 07fb02f6 fcfafff9     ................
   2c4e8:	f5f80306 f5fcfbfd 00000002 05000707     ................
   2c4f8:	02f90606 030000f7 060506ff fbfd06fb     ................
   2c508:	fdfc0204 00060900 fdf8f7f9 fd00fbff     ................
   2c518:	fcf907f9 050607fe 06fe0704 fc00ff00     ................
   2c528:	fbf9f804 f903fe07 f8f80600 fc00faf7     ................
   2c538:	06050000 040204f7 07f8feff 05f703fe     ................
   2c548:	f7fffdfa ff02f6fd f8fd0101 f805fb06     ................
   2c558:	fa05fa06 fef80501 04020005 f7fd01fe     ................
   2c568:	0502fffd 01f80507 05fff9ff 03f70104     ................
   2c578:	fef8f7fd 03070403 fffe0500 ff07fa02     ................
   2c588:	fefff601 faf90704 fb040403 0501f9fb     ................
   2c598:	fd0508f7 01f8fefa 0709fcf6 f705f902     ................
   2c5a8:	06fff5f8 f50006fc 0102ff00 01fcfe06     ................
   2c5b8:	04f6fe05 0300faf5 0304f905 0300f805     ................
   2c5c8:	05f901fe 0304fe01 f9faf7f8 03fd02fd     ................
   2c5d8:	09010300 030401fa 00fd00f8 06f8fd01     ................
   2c5e8:	f4030005 f9faf8f9 f5f9fa05 01f7fefc     ................
   2c5f8:	f703fcfc 03fc02f6 fefc0306 fdf8f303     ................
   2c608:	fcfcfbfc f8f8f9f8 0204fef7 0405fc03     ................
   2c618:	fcfcfef5 f8fc0000 04fe00fe fafffc03     ................
   2c628:	0002fcfd f9f701fb ffff06fa 0400faf8     ................
   2c638:	fb01fb03 0006fefb fefdf601 f5f705fd     ................
   2c648:	fc000606 f603ff04 fcfcff06 fdf901f9     ................
   2c658:	fbf7f6fa 06ff0607 fe010406 01f9ff07     ................
   2c668:	00fefc01 fcf60303 0af8fbfd 01040807     ................
   2c678:	f4fc04fa fff502ff f9fcfd02 ff06ff03     ................
   2c688:	04fb02fe 01fd0300 fc01faf9 ff050205     ................
   2c698:	06f709f5 06f9fd06 02010305 fa05fefd     ................
   2c6a8:	fc04fffd fef8fb06 ff09fa06 0205fffa     ................
   2c6b8:	fe0600fd 02fa02ff f5fefdff 01faf8f9     ................
   2c6c8:	0701f901 f9fb0106 fdfefdf9 fbfe0708     ................
   2c6d8:	05fff9fd 07f9fb01 06f8f8fe fefd0203     ................
   2c6e8:	0003fcfa fd01f7fd 0503f700 fbf8fe05     ................
   2c6f8:	fc060709 ff0108f7 fcff0602 fafb0004     ................
   2c708:	ff030605 05070302 f501faf6 f807fe01     ................
   2c718:	fe020404 02fd0603 06f9fa06 f605fffa     ................
   2c728:	01fb04f8 fdf900f7 fffdfefa 02000305     ................
   2c738:	050504fa 02fb03f7 f9000405 0300f608     ................
   2c748:	f8f8fd04 fbfe03f9 fa03f8f9 00fafefa     ................
   2c758:	f800fafd f9f603f6 02fc0707 0002fd05     ................
   2c768:	020506fe 04faff03 01fff6f7 fcf90400     ................
   2c778:	fbfdfafb 06ff0002 06fff9fb f903fa05     ................
   2c788:	fa0602fa fb0700fc 0100fe05 0501fa06     ................
   2c798:	f9f9f802 06fcfefc fffe07fe fd03fd00     ................
   2c7a8:	fd0102fe 05fdfff9 fafa02f8 030305f6     ................
   2c7b8:	f8f601fe fcff05fd f703fffb 01fc02ff     ................
   2c7c8:	f70208f7 fa02f7fd f90100fa 02f7faf7     ................
   2c7d8:	05f70606 03f8fef9 fbfafc05 0402f701     ................
   2c7e8:	000305f9 fffcfa04 00ff0405 fe04fbfe     ................
   2c7f8:	05f7fe06 f4fef806 fefffe08 02fbf601     ................
   2c808:	f906fd03 fb02f9f9 fff50707 040207f5     ................
   2c818:	fffaf502 01fd0005 f503f803 00fafe02     ................
   2c828:	0603ff05 02020600 03f50200 040301f9     ................
   2c838:	00f602fc 04f901f9 fd03fdfe 01f902f7     ................
   2c848:	0501ff05 fdf9fbfa f804f702 fe0505f7     ................
   2c858:	fefc04f8 05020600 02ff0a06 03fbfb01     ................
   2c868:	fcfd0303 f806fcf9 fb06f900 fff80408     ................
   2c878:	ff06fc03 fd03fbfd 03fc04fd fff60301     ................
   2c888:	02f9fcff 05fc05f8 050100f9 fc060407     ................
   2c898:	fffcfe07 f90000ff 05f805fd 01fb02f8     ................
   2c8a8:	06fdfe02 010104fe fe03fdfb fe04f805     ................
   2c8b8:	01fc0702 04fe0804 fc060307 ff040102     ................
   2c8c8:	000002f8 00fb0801 fcf6fc07 05fc0406     ................
   2c8d8:	fcf3fdfb 09090aff 080600f9 ff05fdfd     ................
   2c8e8:	06f6fd07 0401f603 fffe0505 f8fdfe03     ................
   2c8f8:	fb000af5 02fdfc04 f703fb01 03060500     ................
   2c908:	0407ff04 fdebecfe f5f6fbe0 01fe00fa     ................
   2c918:	0bfcf705 fbf703f5 ecfaf7ed 0bf30305     ................
   2c928:	fff6f9f8 ff0003fa e0010106 0bf7fef0     ................
   2c938:	f4070006 00ff0107 feed010c fcef0201     ................
   2c948:	f8f8f2f0 03e603f0 0ffe0506 f6ff030c     ................
   2c958:	0ef20502 f80601f0 0714fe01 08fcf3fb     ................
   2c968:	fafd11fb f7fff402 04fe0c11 fa0805fe     ................
   2c978:	01fe00f0 f303f607 04eb0efd fdf804f8     ................
   2c988:	03020803 03f50003 01fa0204 0f03f008     ................
   2c998:	fa00fdf5 07f6f6ff 04fbf3fe 0c080800     ................
   2c9a8:	edf510ee 0503f409 02f30602 f6fd06f9     ................
   2c9b8:	fc000b00 0ef7f714 fb01f001 fb02060b     ................
   2c9c8:	fb06fe06 09fa0a03 fa01fae9 090a0af1     ................
   2c9d8:	09f1ff0c 0b060d03 f209f608 01f5edfc     ................
   2c9e8:	01f30303 1104fd0e fffd0900 02fc0f08     ................
   2c9f8:	0600f103 03fefa08 fc0cfc02 fa0af5f0     ................
   2ca08:	0104fffa 09f2f8f7 fc01fbf9 08fe0bff     ................
   2ca18:	09fb0b03 fb00f4f9 f20903fe 03fd0002     ................
   2ca28:	0607020a f6fef005 03fc0403 f4f300ff     ................
   2ca38:	01050afc 05130ff6 fcf600fa 11fefcf6     ................
   2ca48:	f7f9ff12 0809fe06 0f07f9ff fdf2fb0c     ................
   2ca58:	fdf3f908 0e0b01fb ff03fa0d fcf9010c     ................
   2ca68:	07f9f1ed 0801fa02 01fe0d03 06fd0cfc     ................
   2ca78:	f60afb09 f3f604f5 f10a0b05 0e0c05f7     ................
   2ca88:	06faf902 f7f411f7 ff06f1f3 07f90503     ................
   2ca98:	110b01fb f60b0504 fafa000d 080d00ed     ................
   2caa8:	f700fd08 0c0afbec 08f4fe07 edecfbf7     ................
   2cab8:	03fa01fe ff081504 f603fd04 f90e0108     ................
   2cac8:	f5fc06f3 040e0400 01040f18 0b0010fc     ................
   2cad8:	f3ef0ffa f9f9fd05 020bf90d 0009f9fc     ................
   2cae8:	f305f900 03feed05 05faf9f8 faf9f7fd     ................
   2caf8:	09fdfc11 0cea0df7 f7ff08ef 00000004     ................
   2cb08:	09fe010c fefffa0f ed08f10a 050814eb     ................
   2cb18:	f6fd04f8 fc03fa04 100dfefe f1fe07eb     ................
   2cb28:	fafb000a 1307fc05 090109fd fc16f8fa     ................
   2cb38:	1100fc07 03f4fe05 ff0a0403 f901f700     ................
   2cb48:	01ed1104 ee08fdfb fe0e03f4 0305100a     ................
   2cb58:	fbf6fcfd 020bfd18 f7f50de9 fffb0f01     ................
   2cb68:	02faff09 15fff305 08f1100b 03fcfbfa     ................
   2cb78:	0600f7fe fe040909 ff1001fa 07f7f404     ................
   2cb88:	f8ff04fa 0604f9f3 f107fd04 02f50e09     ................
   2cb98:	01fb04f7 fd05fbfe f7fc08f7 fef30409     ................
   2cba8:	fe0e020d 14eef701 00ff0b06 0e0d0407     ................
   2cbb8:	06000205 00ec010d fbfdfbf9 0006fef5     ................
   2cbc8:	0a04fe02 fe09efff 0405040b 00fcfdff     ................
   2cbd8:	03f803f8 040907f0 fff10a09 0314fbf0     ................
   2cbe8:	f8f7fa0a fbf6f900 07010303 020cfb11     ................
   2cbf8:	f9fd0bf4 09f5f403 0bf4f301 0502f707     ................
   2cc08:	11fd08f0 050301fd 0c0c0a07 030008fc     ................
   2cc18:	0a1602fd feeefa19 f9f100f3 08100a01     ................
   2cc28:	f80c0601 04f20ffa f80ff904 f60cf903     ................
   2cc38:	00fd06f9 fffdfd06 000cfe08 0fff0500     ................
   2cc48:	01f804fd 19030702 0f0afd09 0c020c02     ................
   2cc58:	09050205 080f0a12 04080700 f4160cfd     ................
   2cc68:	0efeff0d 03f9f8ef 1219f903 fbfdf603     ................
   2cc78:	10000bf5 fffbf3f1 0207f8fe 04070906     ................
   2cc88:	ed010007 020ffe02 0906feff 050307fb     ................
   2cc98:	0906fe0d 0ff900fb f9ff0801 020cf20b     ................
   2cca8:	fcfb0711 030bfaf6 fcff02fa f7f80602     ................
   2ccb8:	fff9fefa f1000109 0811ff0f 0d000cf3     ................
   2ccc8:	f8feed06 07f7f309 1404060d 05f800f1     ................
   2ccd8:	0800f40a 02fb06f4 06f80309 010ef70a     ................
   2cce8:	130cf209 ed06fffd 0602ffff 16feff03     ................
   2ccf8:	fdfa03fc fd0101fd 06f3090a fd04efec     ................
   2cd08:	f8fcfb08 effe0804 02fd0102 f1fffd03     ................
   2cd18:	f6fdfd06 06fe0803 edea0afb 01f6f9fd     ................
   2cd28:	03eff2ed 04f8fdfb 07000207 09f5f501     ................
   2cd38:	fefa0803 09110003 02fcf300 fffbf4f4     ................
   2cd48:	f40cfaf5 02ef00fb fb070a01 fef8f6f9     ................
   2cd58:	0102fcfa fcfb01f1 fa01fd02 06f80100     ................
   2cd68:	01fcfe0e f4050cf2 ff04f102 efec04f1     ................
   2cd78:	0a0807f9 0604fe05 0600f604 ecfbfb00     ................
   2cd88:	fbfaf6f1 fe0107f6 0ffb090e ee0ce8ff     ................
   2cd98:	04ef02fa 07f4f905 03f5fafd 0001faf9     ................
   2cda8:	05ef0cf4 edf3f203 f7fbfefe 11fd04f9     ................
   2cdb8:	1215f8ef fdfe110c f7011903 1106fbfb     ................
   2cdc8:	120d0008 010a1bff 08f2fc19 11faf6f9     ................
   2cdd8:	18010906 f1050c0c 08011d10 fa00f4fb     ................
   2cde8:	01020901 0110fb10 10f40c05 02fe090e     ................
   2cdf8:	f6f9fc02 14f9f909 06070f03 0afc0010     ................
   2ce08:	f6f8fa02 0101fe02 0b00f7ee 11fafbfb     ................
   2ce18:	04fb07fe f0faf6f8 f2fafcf2 0ef60b05     ................
   2ce28:	09f20304 f0f4f4fc f2f5fdff 020203f4     ................
   2ce38:	00f0fdfc e30c0d10 fff2f1ee ebfa0403     ................
   2ce48:	17fe010e 0403f7fd f6e71101 02f6edf5     ................
   2ce58:	02eaf008 1502faf7 0c070c0b f9ede902     ................
   2ce68:	040d01ea 0311f3e9 fafbf908 13f70a01     ................
   2ce78:	f6f0f1db ee0106fa edf3fe00 f9f10604     ................
   2ce88:	db0e08fa 0905f2f3 fbf9f70c fff0fb10     ................
   2ce98:	f2f4fbfa f7dd1201 ff01f204 fbf10102     ................
   2cea8:	0afbed08 000d0bf6 eededb12 180703f1     ................
   2ceb8:	05170703 f0100806 12010302 edf3e9d8     ................
   2cec8:	f00304f8 0805fbf3 00eaf8fc e00cf9f3     ................
   2ced8:	09fdf6ea fef6f70d fbedf20c fdfff2fe     ................
   2cee8:	ddde0efd 0402f4f8 01f90107 090c0101     ................
   2cef8:	080108ea f9ede60b ff0d0be8 0e15f7e9     ................
   2cf08:	f9ff0605 0bf40a00 e6e8e7e5 fe080401     ................
   2cf18:	fdf607fa fafb0afb da0fede9 01efede9     ................
   2cf28:	f9f4070e feecfd18 02f3f4fb f3ed07f1     ................
   2cf38:	0effeaf9 1607f8f8 0ceffe05 ff0107f4     ................
   2cf48:	f4fbe1fd 0b0efbee f80a0302 ebfaf8fe     ................
   2cf58:	fc071cf6 00fbf6ea 02021500 f5000d0c     ................
   2cf68:	e6e4fe03 ea08fefc 08f4fcf3 fe01fa0a     ................
   2cf78:	f4f9f011 09fee7f8 fdf50bf4 f9f7f7fd     ................
   2cf88:	0c0a00fe 0bf9f009 060cfaf2 0607f603     ................
   2cf98:	ff05fa07 0e110e0e 07fe0a0d fdf908f3     ................
   2cfa8:	11f901f5 fd0b15fc fd05f400 fbfe02fa     ................
   2cfb8:	ff06f4f3 0505f906 fd001109 fe0005f1     ................
   2cfc8:	fcf8e3ff 08f5fdfe 070500f0 0eff0300     ................
   2cfd8:	1204ee0b fefd0605 f2fef3f9 0512010d     ................
   2cfe8:	0cf7f1fc fff2f808 fd120509 f7f90601     ................
   2cff8:	070a0905 f60f020d 00faef04 030207f6     ................
   2d008:	0c03f701 eff8060a 0bf50103 0901f802     ................
   2d018:	06faf805 0c0efc09 0f02faf6 fa0cfffa     ................
   2d028:	f808fb06 040afffd fc0cf9f8 1906fb00     ................
   2d038:	06fbf304 03090f00 0afd0c09 07030a0b     ................
   2d048:	040207fb 01f902fe 12060004 10faf302     ................
   2d058:	ec180a02 060703f5 fbeb0400 0507fd02     ................
   2d068:	050400fc fef605f7 f7f8fafb e80bfa0b     ................
   2d078:	02090efe faf9ec06 03f9f2f3 07f1fafb     ................
   2d088:	02041508 07000b0f f9f3fa03 f70906ef     ................
   2d098:	fa07fd05 0702ff03 12fdfd0b 03f7eff9     ................
   2d0a8:	0e010dfd 0af709fa 0d04f504 fc0c0408     ................
   2d0b8:	fffc0df7 f908fdee fe0804fb 030a03f8     ................
   2d0c8:	0406fe05 f80500fe f3fd0105 f90b00fa     ................
   2d0d8:	08fe1810 faf9080d f900f8ff fff80c0b     ................
   2d0e8:	0bfd01f9 03fb0107 f60302f9 07fe09fc     ................
   2d0f8:	10fc03fd 060d00f7 f5fffff5 01f9fe00     ................
   2d108:	0209f4fd f4080903 ff1306ff fbf5fd01     ................
   2d118:	010d0e01 f3f905fa fefd0dfb 02050d0e     ................
   2d128:	eaf4f002 f1fffc04 f8f60705 0bf707f4     ................
   2d138:	08fb040a f9fb02f4 fc090904 0f00f5fd     ................
   2d148:	0b11fbfe e8f9f601 09fff902 f9020509     ................
   2d158:	f215fe04 fc061005 fbed0209 1ef505fc     ................
   2d168:	01fc04fb f5fafafb 03050d0f f1faef07     ................
   2d178:	03fff502 0dfafd01 00f7fc02 0409fd07     ................
   2d188:	fefe01fd 08f7040c 080dfc04 110906ff     ................
   2d198:	f1090504 f4060af6 0a0007f2 01fe0bf4     ................
   2d1a8:	060b05f5 03fe0d06 0ff5fdff 09f6fcf4     ................
   2d1b8:	050a01ff f7091102 f1faf503 0502f3fe     ................
   2d1c8:	faf3fef5 14040308 1205030b fafffff9     ................
   2d1d8:	02f70603 0512f80b 180ffa0a f0faf503     ................
   2d1e8:	f60603f8 08fb0204 fb03030a 090902f6     ................
   2d1f8:	f9060d03 fef70c0d 01ff0001 f301f8fd     ................
   2d208:	09100f09 fff8020c 0ffe00f9 fff6f6fd     ................
   2d218:	ffff0cfa 0f0b040e 0dfe0507 f80604f2     ................
   2d228:	0405f0f9 0a07f9f1 04f60701 f1fbff05     ................
   2d238:	0400f3fe 0e05f406 050e04f2 06fb070c     ................
   2d248:	081105f4 10f7f007 fbf703fe 10fc0e08     ................
   2d258:	fff9f8ff 0b07fa18 f7fdfbf7 f71303f6     ................
   2d268:	ef05fefc edf2fff7 f0e4020a ee0408f0     ................
   2d278:	09fd1af3 f8feecf4 fae3ec01 05120f08     ................
   2d288:	01071207 fe040e1a f2fb06fd f4f5ecee     ................
   2d298:	f9fcf7ef 14f70800 f9fff9fc e7f6f5fb     ................
   2d2a8:	020cf8ea 06ebf900 081206fc f90202f8     ................
   2d2b8:	e6eefa03 00eff7f8 030c0818 0a0b0ceb     ................
   2d2c8:	f30003f9 fbe8eaf5 f6faef01 02fbf3f2     ................
   2d2d8:	0e0202fd fd090701 f1fffaf7 eff6f6f5     ................
   2d2e8:	10f0f9ef 09040c08 f9f102fd 0afae2fd     ................
   2d2f8:	11f505fa 010deefe f903ff05 f2fffc04     ................
   2d308:	fb0201f6 030bfcfd 02fb0ef9 f9f904f9     ................
   2d318:	f800f4fa eff7f0fa ec010111 0c1a0605     ................
   2d328:	f8070a06 eefe03fe fdf5e9f0 050105ff     ................
   2d338:	0d070108 01f603fe 110505f9 050507f8     ................
   2d348:	fe0af7ee 05fef906 04f8f808 f30c09fd     ................
   2d358:	f20202fb 080909fa fcfdfe06 0bfce5ee     ................
   2d368:	e0ecf301 f2011403 0b14ff04 ecf1f306     ................
   2d378:	f8fa01ff 04eee6f1 fef802f9 0f030507     ................
   2d388:	0101fdfd 0807ef00 19ebf1ed 15ff1306     ................
   2d398:	04040d0b 16f8f9f3 f5f91102 f3f5f4f4     ................
   2d3a8:	0c1407f0 fdfa0e10 ff0aeef7 f004efef     ................
   2d3b8:	f8e60702 0a0c0900 06f0fd01 09fe0dfd     ................
   2d3c8:	0bf4ea06 0011f1f5 02fc0b04 02fbfdfa     ................
   2d3d8:	010efe0a 0f0efa01 05fef003 04fc0006     ................
   2d3e8:	10100cfe f2fefb08 f4f4f7e1 010906eb     ................
   2d3f8:	06f404fe 081007f7 eaf61012 f6e1190a     ................
   2d408:	070a0010 faf9f7ff 01fb03ff f9efff04     ................
   2d418:	0b101205 04fbfdf4 0000fb03 07110402     ................
   2d428:	05f0fdfe 02021101 f80a02fd 1d0c0305     ................
   2d438:	f3081609 ff04ecf2 f905fe0b f9ff0d08     ................
   2d448:	02fafbf4 0b07f3fd fff2ff02 080cff07     ................
   2d458:	f60303f6 00fdfcf4 fefbfcf7 060d04f8     ................
   2d468:	00f80109 04fbeff8 fb080405 f9f903fa     ................
   2d478:	0d06ee01 efff0511 0f0301f9 f9100505     ................
   2d488:	07f609fe 05100412 e9f6fefa fefc03f6     ................
   2d498:	0cfffc11 f2e30503 0d0c0308 000705f7     ................
   2d4a8:	130c12ee 0304fe13 0c0e06f8 14fc0b09     ................
   2d4b8:	e8f20208 ee0705fe f5fd02f6 000cf4f4     ................
   2d4c8:	0206fdff 0aeff4ff 03f30a08 f9ff0609     ................
   2d4d8:	030d0a0e 04fc04fd 02f8f8f7 f2fef702     ................
   2d4e8:	edfc0c08 0aff0701 f2f6f9f1 f1f5f304     ................
   2d4f8:	fd0afcf2 0e0c0b00 f3060b01 f7f8fc02     ................
   2d508:	0ff7fe0f fe060afa 070801f8 eefafd0b     ................
   2d518:	0d0afaf2 fbf90e04 fc05f405 00011006     ................
   2d528:	fafb0005 06fdfaf1 07060e07 f8f31200     ................
   2d538:	0b040b09 f508f6f9 0414fa01 f9fbf5f8     ................
   2d548:	050ffeec f5030af5 fff5fc02 fff301f4     ................
   2d558:	fa02f6f7 090df7f3 06f507fd 0ffffeff     ................
   2d568:	00eefd07 fbe9f0f9 01fc05f1 03fc0409     ................
   2d578:	01fbfa03 09fffd0b fbfff0f2 0107fe01     ................
   2d588:	f6fffdf6 0202fbfe fe060709 0502f7fb     ................
   2d598:	fefe1405 eafcfa02 01f20500 0b0afef9     ................
   2d5a8:	fd03f6f2 060408fe 01f6f702 f6090512     ................
   2d5b8:	ede5feef 00080df2 fdfc03ff 0efaf9ee     ................
   2d5c8:	05f20b01 eae2ff0a 0d08020d 01f500f9     ................
   2d5d8:	080afff7 0211fff8 04edf6f0 ff0afe05     ................
   2d5e8:	fa06f6f6 f3f6faff fdf6e3fc 030df5f1     ................
   2d5f8:	fe0ef702 fcfcf8f2 f8f60702 f1dceeeb     ................
   2d608:	09050ede ed0205f9 0dfa01f6 01f0f208     ................
   2d618:	f300fffe fe02fe13 fef6f4f7 fffbf2f7     ................
   2d628:	fde3f6f8 10f8edfa fc060d01 f0fc04f1     ................
   2d638:	051401f9 0100fdfe 070ef5fc f8fb0408     ................
   2d648:	e5fa04fe f7f00f09 f6d7f3ff 0a051aec     ................
   2d658:	e0f100fd 01f0f4e5 07e7f1f3 fafcedf9     ................
   2d668:	0a0a0214 edf5fbff 1107f0eb ff03f407     ................
   2d678:	1af604f6 f8070504 e9f504f7 02ff0af7     ................
   2d688:	01fd04f2 0210fafc f9030b05 09f3fffe     ................
   2d698:	f20c1808 f4f8ebfa 05030ceb f7f50206     ................
   2d6a8:	fa0ffef1 02f1e9e4 eef2fbe8 0a02f815     ................
   2d6b8:	0ffef6fc 0601fe04 1305f4f6 03070602     ................
   2d6c8:	fd040cfc fd06fcf8 05010308 fef90bf9     ................
   2d6d8:	050ff203 fdf80909 f7f40302 f8eb0407     ................
   2d6e8:	ee0d0603 06fc13e2 fb0404f8 f3f2f1f5     ................
   2d6f8:	01f1f9f9 ecf70ef6 f002fe03 14faeef8     ................
   2d708:	0309effa fef709fe f701f9e6 0708140a     ................
   2d718:	110308fb 0614fd15 02060601 11fbf908     ................
   2d728:	080b0c10 fe0df8fb 01fc10f5 f503f7ff     ................
   2d738:	071bf2ec 0dfd0706 06040700 f1fc0bff     ................
   2d748:	0bf30904 07121df2 fe09040a 0a000a00     ................
   2d758:	170e0e0a fa04fb0d 00061716 0df9fc01     ................
   2d768:	fc09fd07 fafc0209 0dffff03 06ff0a10     ................
   2d778:	fbfe03fe 01f9fee7 fdf50305 00160109     ................
   2d788:	fefc04fa 03fd06fb ee02fc02 150405fc     ................
   2d798:	04fb13f4 00010303 0503faff 02f608f9     ................
   2d7a8:	fefaf404 0c080908 fe00000f edf1f507     ................
   2d7b8:	030904fa 0a000109 06000109 06f70501     ................
   2d7c8:	02010cf8 07fb0b00 03fffff1 0703fe01     ................
   2d7d8:	fd00f7fe 0d10f601 fe04f9f2 00faf40b     ................
   2d7e8:	fb0d0502 0103fdf1 f8f60cf0 0cfaf1ff     ................
   2d7f8:	fe07fdf9 fbf80105 ecfa00f8 03f507fc     ................
   2d808:	ff04fef9 fd00fe06 f9060803 0e0808f7     ................
   2d818:	f2faea0c 00f403fd 04fbf6f4 06f7050b     ................
   2d828:	ea07fe0e 0402e9da f803e70a f3100a03     ................
   2d838:	fd01fdf4 f0fff4f4 0ff7f0ec ff06faec     ................
   2d848:	0b08fc11 fef7f0f7 09f8ff0b fa0705ff     ................
   2d858:	09f0fef8 f3f70b0d 08f80001 ff06fb00     ................
   2d868:	f5ee0d04 1407fd00 f6e7f90b 0a010709     ................
   2d878:	eefceffe fffae906 040d1200 050bf6fb     ................
   2d888:	f0fc0000 11e9ffe6 0c01f8f1 fbf91504     ................
   2d898:	fb0afbf4 fded01fd ed0605f1 0df9f6f1     ................
   2d8a8:	f3ff0804 0a0700fd fbf4ecf9 eada00fd     ................
   2d8b8:	17060004 fb000004 0b00f602 eaeff7ec     ................
   2d8c8:	f7f3df11 05110cfd f305fd00 f0eefdf4     ................
   2d8d8:	06e7edf6 0104f4e8 fffb0b07 f7f9fdfe     ................
   2d8e8:	fff0f600 ea070a01 fdf9faf1 00120e0b     ................
   2d8f8:	01140903 f8f1effb f1ec0bf1 160302f5     ................
   2d908:	01fbfd0e fbfd0204 f2edfbe9 f5e2f20a     ................
   2d918:	081105f5 05f2fcfb fb09edf6 0eff02fe     ................
   2d928:	00f1e2f0 fe010400 0007fdf9 f4f902fa     ................
   2d938:	e105ed04 0d05fbf9 fafa0d09 040e0bfc     ................
   2d948:	f8fefaf5 f2f712f6 020e00f6 e7010d0c     ................
   2d958:	eff40504 fde5e9f3 feeaf208 09060df6     ................
   2d968:	00f8f911 f000f3ed 0202fff9 f3fcf7f7     ................
   2d978:	09011605 fe030903 fbf8fcfc f6fdf700     ................
   2d988:	02f8fbef 0108fd06 fdfe09f6 fbf901fe     ................
   2d998:	fbf7fe04 1313ff02 04f61105 0c01ff01     ................
   2d9a8:	f3e2f3f6 08f2f80d 04121603 fafdf51a     ................
   2d9b8:	f807f904 fff301f9 07f8fc00 10fdff06     ................
   2d9c8:	07fbea0b 07fbfefd fd08fefe fa0405ff     ................
   2d9d8:	f502030f 0002f5f5 fd01fbf1 f7fc04fb     ................
   2d9e8:	0603fbfd f6f104f9 0205020d fe000bf8     ................
   2d9f8:	f5fffe07 020dfffa 14f3fd07 01f80709     ................
   2da08:	fafefefc 010201fd 040b02fa 02fff400     ................
   2da18:	f2fcfb04 08f501fa 08fbfd01 060a0b06     ................
   2da28:	09040705 f9fbf1f7 0009080a 0a0c0404     ................
   2da38:	f6f50604 03fc00f4 f4fef0e8 f8000df9     ................
   2da48:	fc070f05 06f7ef08 effd0f02 05f60cf9     ................
   2da58:	0108000a f803fa07 f9f0f9fc 07fa05fa     ................
   2da68:	0af8f310 fef8fd05 f4fa00fa 010407fb     ................
   2da78:	00f20004 0913f7ef fcfc0ffc f2f4f8fc     ................
   2da88:	00f5fe09 fcf8f8f6 06070c03 fa0106fa     ................
   2da98:	07ffff0d edf7fffd 08090c03 f3010e01     ................
   2daa8:	000b080f f1f6f8fd 1505f603 0d040316     ................
   2dab8:	09ff00fe 07fe03f8 f6fa0afc f901f8fd     ................
   2dac8:	06060309 fdfefffe f504f4f8 0cfdf708     ................
   2dad8:	fa040103 fafe08fb fa08fe09 0400faf7     ................
   2dae8:	f30907f3 fbf6ee01 f5f60411 0000fbfc     ................
   2daf8:	f7fc0108 07f806ff 12f7e811 04f7f90b     ................
   2db08:	fdfb0406 0dfbfff9 fcfcf1f8 040bfdf6     ................
   2db18:	090b0a09 ff01f709 04fef80a f40907fa     ................
   2db28:	060809ff 02050306 07fb0202 f80a09fd     ................
   2db38:	08020600 f5fb0011 0f0b0505 fffbf611     ................
   2db48:	f200ff00 0bfaf9fe 09010305 f8f5f60f     ................
   2db58:	0002fffc f6e50100 1109fa05 01040405     ................
   2db68:	0001fff1 00fbfb00 080ef4eb 090508f8     ................
   2db78:	fa0c0207 080407f5 f702fd07 fcfc03f2     ................
   2db88:	0109ff0b faf8fdfa fbf8fc0e 0709f8f2     ................
   2db98:	18f6f1f6 faff0b10 06f6010b fcf907ff     ................
   2dba8:	03070e05 0108f9f8 02fd060f ff1208f3     ................
   2dbb8:	01fd08fe fdf7fafe 06fdfffb eb05fff0     ................
   2dbc8:	fbfe0500 1b0e00f7 0a0cf6f2 f3f30703     ................
   2dbd8:	faf40108 edeffa06 f516fd03 0604fcf7     ................
   2dbe8:	06faf808 0af8ebfa 06fc0401 f2eb0c05     ................
   2dbf8:	04fc0a04 f6f3f4fd 0501f4fc 01f6f201     ................
   2dc08:	08f2f405 f3ff0000 fc040b03 09070df4     ................
   2dc18:	090505fe 100cfbf3 fcf5fe09 03fcf3f9     ................
   2dc28:	eb06fb05 f7030802 0811fbe8 fef9f8f5     ................
   2dc38:	03ffffec 00fff3fa 06020505 02070efa     ................
   2dc48:	0606fe03 04fff0ff fdfdf5fe fcf3fafc     ................
   2dc58:	03f6fdfb fff90afe 02f303f9 f6f2f902     ................
   2dc68:	ff0e02f4 00fd0404 f9fff70b 00f7eef7     ................
   2dc78:	f50c02ff 05090ceb 050d0800 f0ed03f4     ................
   2dc88:	fe0403f6 f3f10bfc ee00fdf1 ed0608fa     ................
   2dc98:	06fee806 fdfbf4fa 0301f6f0 01fc010e     ................
   2dca8:	08ee0907 f906eef9 fe02f8f8 0c0b0104     ................
   2dcb8:	0600f5fd e70eed0d 07f3faf7 f205fcf5     ................
   2dcc8:	0408fcde 121206fd f3f4fff3 fefaf605     ................
   2dcd8:	e4fcf3f4 010100fa e8101ff2 fafff1fb     ................
   2dce8:	0d05010b 01f4f6f9 f4fcfa00 faee0911     ................
   2dcf8:	fc0203e8 fbf5ff06 0406fbfb 0ff4f5ff     ................
   2dd08:	f803f611 0004fbea f8fdf503 fd07f304     ................
   2dd18:	0c09f8ee f2f705f4 00fcf202 f0f705fb     ................
   2dd28:	f3f9fcf8 00110bf1 00f4fa09 f2fafafe     ................
   2dd38:	08f3f503 faf7fb0e 0dfa101e 01fcfafc     ................
   2dd48:	ff02fc08 0300fff8 0af3f8f8 ec03f00f     ................
   2dd58:	0c0006f2 ea00f8fe 0b0efefc 130df2fc     ................
   2dd68:	f0fd0eed f5fdf9fe f7e603f3 f9f8fdfa     ................
   2dd78:	f40f15f8 01f5fa11 f4f40203 1707fafc     ................
   2dd88:	fdf0f705 fee8120b 04fdeff5 f907ed04     ................
   2dd98:	faf903f3 0ffbfaf5 0f00f902 07f704fb     ................
   2dda8:	f3fbfcf9 ff0009f9 0f0df7fe f7070ef6     ................
   2ddb8:	f0fe0001 f3f40cff eef506ff f70810f7     ................
   2ddc8:	0b0708fc f7eb00f7 fdf3fc01 f3f0ff0b     ................
   2ddd8:	f5e81704 f709f608 fb0ff7ff 04f7f3f2     ................
   2dde8:	fceef006 10feed05 08edf8f4 f206fcfc     ................
   2ddf8:	fb0109f7 0a01f3f3 f4020bed ff03f9fa     ................
   2de08:	faff0901 eeff0603 e215fe01 0bf70202     ................
   2de18:	04f20202 06f2f708 f7f7fa07 ffe51803     ................
   2de28:	f406fd08 eff6effe 0b02feed 02f8f9f9     ................
   2de38:	0a03fa09 fafe02fd f3effff7 f509f8fa     ................
   2de48:	10fdfcf5 f30cfbea f3f8f106 e0f0f3ff     ................
   2de58:	ebf8fe0a eb170301 0cf303f2 f7ecf9fd     ................
   2de68:	11f5fbf7 f8fef20e f0f616fe f5fef703     ................
   2de78:	ef12f1f5 0dfff7fc 04f6effb 0906eb07     ................
   2de88:	fef104e8 01f506f4 f6100c08 031106eb     ................
   2de98:	eefeffe8 f1ecfd03 f7fffc0d f1ff0a0c     ................
   2dea8:	e8130c06 08e706f5 fdf7f604 03f6f4fd     ................
   2deb8:	0de7f90c fded1c13 f1fcecfd f8f3f2fa     ................
   2dec8:	07040efc f902f5fd 0afbdd10 f200f9e6     ................
   2ded8:	fcfc07f9 f211f4fd 0a0502f1 ebf604ea     ................
   2dee8:	fdf1e807 04fcfcfc f300fdfb ee06fb0a     ................
   2def8:	0ffafff8 0701f600 13fbf9f5 02f8fd04     ................
   2df08:	01e609fe e70cfff7 f900f304 f8fa0303     ................
   2df18:	fff9fa00 12f8ea13 f7fd0df5 0c1209fa     ................
   2df28:	f30af402 0708f5f4 fc03f4e5 f8fceef4     ................
   2df38:	0903030b ef040504 f00dfdee 07030000     ................
   2df48:	08f3f7fb f8fcf9f5 fcf40203 faf619f4     ................
   2df58:	ee09f5fb ed04fbfd 020be9f4 fcefef06     ................
   2df68:	f705f70e f10302fb 0ff70108 0601f8fc     ................
   2df78:	14fef9e8 f4fb05f4 ebf4fd0a f5f9faf6     ................
   2df88:	e9f9fbfa f50af30c 00f3f000 0ff7ffff     ................
   2df98:	fdee01ff f7f1fffe fafbf9f9 fffdfce8     ................
   2dfa8:	f406f8f4 ff0508fe f801f500 e8f7ec10     ................
   2dfb8:	f1fbf5f4 05fb0501 fe0bf3ef 06fc04eb     ................
   2dfc8:	f4edff01 fc010bf9 0103ff01 e502f4ff     ................
   2dfd8:	e903fe0d 01fcf0fb 12e7010f 07fdfaf5     ................
   2dfe8:	fff8f007 06f2fdfb fffbf0f5 ebfcebf8     ................
   2dff8:	faf6f4f0 fc04f801 010004fb f811f8f3     ................
   2e008:	10f602f5 fefdf6f5 09fdfaf3 fbf8f4f6     ................
   2e018:	ffecfffc 02fff00b f4faf0fd fafbf303     ................
   2e028:	07f3f5f5 08fbff0c 050101f2 09f102fc     ................
   2e038:	ff00fefb 0503f4f9 ec04f6f7 ffffeb08     ................
   2e048:	f6fdee0b 0cf20cff f209fd06 fbf805f6     ................
   2e058:	030002e6 fcf609f5 fa06effe 01f806fc     ................
   2e068:	f900f815 f0ef010b 0bf8e5ef 0b03f604     ................
   2e078:	e5f6080c fcf6efeb eeebf401 0e0e01f0     ................
   2e088:	0010060e f002fafc 02f2eff8 f6f5dded     ................
   2e098:	f7060b08 f9f7fafe f9fd1003 ee07f8fa     ................
   2e0a8:	ffecf3df fe0a0df4 fffb0ef8 ecfefa01     ................
   2e0b8:	f3f609f4 1002f902 07f9f501 01f50800     ................
   2e0c8:	f6f90300 faf3f6fc 08070ff3 f9030305     ................
   2e0d8:	ecfcf3f6 03fd0afd fefff304 090103f8     ................
   2e0e8:	f305f901 f7021102 04f9fffb f4f5fd09     ................
   2e0f8:	fb080400 eefdfafd f0f302ff f9fef3ed     ................
   2e108:	020402f5 f30aff01 fa030009 faf5fff5     ................
   2e118:	f5f30000 0bf4f5f7 02f8fb0a f5090a0c     ................
   2e128:	f2fdf0f6 fe02fb14 040bfe03 fe07fef9     ................
   2e138:	f108f3f3 1af90906 f3f808ff f00d0af7     ................
   2e148:	f8061200 02fe01f6 fe14fb08 fb01fd01     ................
   2e158:	f706fdfd eef911ff fbf2fe05 0a010cf5     ................
   2e168:	f000fffc 03f7030b 08fff801 faf60402     ................
   2e178:	0706090e 07ed0503 fa040908 06120304     ................
   2e188:	0d020e08 effffe07 06140ef7 fe08fc0d     ................
   2e198:	fe0e0a05 080efbfd 04f608fe f9fa0aff     ................
   2e1a8:	f6f101fa ecffed00 f5050d04 fb000305     ................
   2e1b8:	fff6070f f90dff05 f507f8fe 0afd07ff     ................
   2e1c8:	0901fdff ff06021c 0610fefc 0df71208     ................
   2e1d8:	07fe040a f81307ef 050b06f0 07100e08     ................
   2e1e8:	0114f60a 0b06070d 00f90203 f8fe0502     ................
   2e1f8:	00fff80b fa0b0e01 fff60307 0100fe02     ................
   2e208:	081502f9 fa09f80e 0704ff09 06fdf605     ................
   2e218:	0a0505f6 110d07fc 09f807fc fef4fcfc     ................
   2e228:	09090303 f60a0efb f5030e0b fd0f000c     ................
   2e238:	07050304 f5fa0709 f8f5fdf9 fdf407fd     ................
   2e248:	fe0107fe 00000409 f6f50004 f111fdee     ................
   2e258:	020e0501 fdfefe01 0cf4f2fc 0911ff07     ................
   2e268:	0b000100 0306fa01 ecfafaff 0a0efafd     ................
   2e278:	0a000902 fef91604 f609fe05 0bfafeff     ................
   2e288:	f4f90306 f7fc08f5 0b0109fa 04f609fc     ................
   2e298:	f4000206 edf2fb03 07050bf1 09f6f80a     ................
   2e2a8:	01f4ff01 fef4fefd 00f8f901 f90508fc     ................
   2e2b8:	08fc05fb f90901ff 09110307 08f902f5     ................
   2e2c8:	f3f60c05 0314fe06 f5ff0801 00eef704     ................
   2e2d8:	02f6f202 0ef30507 fcf41007 040b0604     ................
   2e2e8:	fff40e09 fe030002 ff07f70f 01f7f510     ................
   2e2f8:	ff0204f2 02000c04 020810ff 12fd04fd     ................
   2e308:	e90dfb08 0f010706 04f5040d 0703f105     ................
   2e318:	03fc0908 04f10b09 fffbfb06 0000fcff     ................
   2e328:	14ff0800 05fd0908 fafa07f4 00020002     ................
   2e338:	07070608 07faf607 fe01f707 06fcfbf6     ................
   2e348:	06fc05fb ff0a1300 0d050406 ea010001     ................
   2e358:	0fff0b00 f4fcebfd faff0401 fa0504f9     ................
   2e368:	fc0602f9 f40cf10b faf7fefe 07e60601     ................
   2e378:	04f90a05 0af2090a 050507f0 10f80002     ................
   2e388:	0802f7ff 05f7fb0b 040303fa 0dfb03f5     ................
   2e398:	0e0ffd01 02fc0ffc f5fe04f9 06f7ff01     ................
   2e3a8:	1006f8f7 f50502fa 070a080d fa040709     ................
   2e3b8:	f3f50615 ff0508f9 feebfd06 fe040efb     ................
   2e3c8:	0dfb0606 f402fe09 fb0ffdfd 080fff04     ................
   2e3d8:	06f6f500 0e0fff03 0c0401f8 08fef612     ................
   2e3e8:	11f90c13 ef1308f2 0c050c03 0a04f405     ................
   2e3f8:	02fe0802 010afffb 08022402 fc040e0c     .........$......
   2e408:	fefd0a04 02edfdf8 fe050a08 0401fb13     ................
   2e418:	f90cf80a 0f11fcfb f80503fa fbeff90b     ................
   2e428:	ffff0d04 00f103f4 ff06f104 05030d05     ................
   2e438:	f301080b 020d0408 040dfafe 0506fefd     ................
   2e448:	0b0e09fd 04051007 0bf30709 fefd090a     ................
   2e458:	0605fd09 03020203 01f40608 fc0cfd08     ................
   2e468:	f60cfaf6 00ff06f4 fef9f6f8 0bfff8fb     ................
   2e478:	f7f1fff2 160702f7 fc00f9f6 f606f2ec     ................
   2e488:	f30206f0 0609fb01 fbfc0af6 05fe0600     ................
   2e498:	fc031bfb 04f20116 fefe00ff 070a01f7     ................
   2e4a8:	0506ff07 05fcfe0b f70afbff fdf5f502     ................
   2e4b8:	03fbfd02 f3ebf302 0719f7f8 fdfd0400     ................
   2e4c8:	07010000 0a0f0007 f9f2ebfb 02f905f5     ................
   2e4d8:	fcfa0201 02f80705 f8070c03 fcfc02fc     ................
   2e4e8:	fe0008fc 04040303 fd0d0f04 f9ef08fc     ................
   2e4f8:	04fff8fd fffa0012 f3f90ef7 fe02fd00     ................
   2e508:	f6edf6fb fb04f7f9 0500f7e5 06fe0a10     ................
   2e518:	d801fa04 fddef7ee f9ff0307 fd01eefd     ................
   2e528:	fcfa06f7 efd6fdf8 0b06dfe3 ecf1fdf3     ................
   2e538:	f40202f7 eeeef3f5 d8e7ca00 fdfb03e3     ................
   2e548:	f80afb02 040afbf3 fa0800fc e8e9edd8     ................
   2e558:	fee8fb04 fcfefff2 03f81307 eaf2f9f9     ................
   2e568:	f7ecfffd e4fdff19 03ff0e02 01f2ebff     ................
   2e578:	f4f2f201 0a0af2f0 f8f41503 fefb0ef9     ................
   2e588:	0312fcfc fefd0106 fa0c05f5 f909fa0a     ................
   2e598:	fafb0bff 0502f8f0 fdfc06f8 ffff02fb     ................
   2e5a8:	01fff5f5 fef50905 f7fcfdfb fcf1fefd     ................
   2e5b8:	00f8ed15 fbfc0703 f800eef0 fdfdfef5     ................
   2e5c8:	0e01fcfe f7f400ef 0d050b05 0af60708     ................
   2e5d8:	fd0af4fb 010b06fa 001aee08 ff09fffa     ................
   2e5e8:	fef20102 f7fcfbfb 0c0710fd fb0511ee     ................
   2e5f8:	fe0009ff f5f40b04 0002ff05 efefef0d     ................
   2e608:	fa0cfef9 0a0f03fc 02eff8ff 04fcf701     ................
   2e618:	f6f9f8f2 fff903fc fbf50703 fd0af9f7     ................
   2e628:	f0fd09f5 fc0afb02 f41009fe 0100fbfd     ................
   2e638:	fcf305f2 08070605 0204fdf1 fc08f507     ................
   2e648:	f7fd05f5 0ff9f9ff f7fe0101 070b0103     ................
   2e658:	0107f3f4 08eff703 0d11f8fb feeb02fc     ................
   2e668:	fcfbffff 0e00f9fb fcfd01ff fd040301     ................
   2e678:	ff00f505 06fe0f0b f40305f6 06ee04fb     ................
   2e688:	0e0202fd f6ff02fd fa07f710 fd040702     ................
   2e698:	fefd0f06 e6fa040d 01effdfb 00f405f2     ................
   2e6a8:	fbfcfc03 f610f6fb 0cf6ff00 e5ff080f     ................
   2e6b8:	07f802ff f0f7fcfe f7050602 f407f6f4     ................
   2e6c8:	02020cfa 0105090e 00f2fbf9 07fcf9fe     ................
   2e6d8:	0208faf4 0508f6fc f9f915ff 090600f6     ................
   2e6e8:	ebf6f9fc 020bfbf8 00fa0806 03fef90d     ................
   2e6f8:	06fd01fe f3f0f208 fd04f8f0 0202fef8     ................
   2e708:	f0ec07f8 f8fd0307 f2f3ea03 05fc0e07     ................
   2e718:	fd11faf8 11f101fe f9f606fe 0ef9000c     ................
   2e728:	0602f903 f2f7fd06 0b05fa08 f5fefa14     ................
   2e738:	fc01f9f1 06f8f503 fe0109fa f6fe0304     ................
   2e748:	f8000cfc 0707fef5 fbeb0709 fff4e8fe     ................
   2e758:	0afc1111 f7fef701 fe06f500 fe08eb11     ................
   2e768:	0ffefef2 fefd12fc 0b08f1eb 040b00fd     ................
   2e778:	02000dfc fc1200fc ededfb04 fef7fef4     ................
   2e788:	0803ff02 0004fb05 06050df5 faf10502     ................
   2e798:	01f505fc 05f201f8 08fff602 f5f9f70a     ................
   2e7a8:	edf9fa09 f7fbf0f1 fd0df60d 040800fe     ................
   2e7b8:	fef500f3 fffd03f7 06ffecf3 ff02070a     ................
   2e7c8:	fc1007f9 faf0f805 fff90300 07030110     ................
   2e7d8:	f8f70a05 060b0e0d fefe000c 090009f8     ................
   2e7e8:	efeeffff 10f80102 0bfcfa08 fdfb0702     ................
   2e7f8:	ff0cfd03 fb07f905 041306fa 07031103     ................
   2e808:	f0f400fc 000e01f8 02fb00ef 06101702     ................
   2e818:	faeffc08 0802fe14 000a0604 f7fbfbf7     ................
   2e828:	0c0b180e 07fa11ff f707f5f4 f5f504fa     ................
   2e838:	08fa03fa f90df607 0f05f70c 0007fcf8     ................
   2e848:	020ff206 0408f30a 00f3080b f40210fe     ................
   2e858:	0af2fb01 06ff1604 0a0bfff7 ef09fc02     ................
   2e868:	0f0302fa 0f0eff00 fb0302fc ff110b03     ................
   2e878:	f70a08ff 070b0507 07030f12 f6f1f800     ................
   2e888:	0007f90d fffb0009 080e04f9 01030b0e     ................
   2e898:	1410f900 fbf30f10 eff1fb0d fe060507     ................
   2e8a8:	0301f801 010e0201 fe020217 0e07f7f5     ................
   2e8b8:	0e07fc09 fbf8f9f9 17f70410 0004fffc     ................
   2e8c8:	120406f0 02f3f8fe f9f9f603 f614e5ee     ................
   2e8d8:	01f708fa 030e0d06 0606ff04 0303fb00     ................
   2e8e8:	09030cf8 09060400 ff0a0906 f309faf9     ................
   2e8f8:	01fd0c06 0b00f307 f806feff 00ff020b     ................
   2e908:	fcec0408 0af3ef03 f500fdf6 0b0f0e04     ................
   2e918:	030af6f5 fdf8edfb fa10fc02 fbf4faf8     ................
   2e928:	00ff0705 fa00fafb 010beae6 fdf517fa     ................
   2e938:	03fbe8fe f905030b 01fdf915 fa0108f2     ................
   2e948:	07030211 01f9fd06 08f7f0f2 02fdff01     ................
   2e958:	0503f701 f9f9f2f2 f1100ffc f6f8f9f8     ................
   2e968:	f9f7f307 f90607f4 06f80400 fe0a0505     ................
   2e978:	fdfef4ed fcf9fefc fffafc00 fbf6e901     ................
   2e988:	ff04000b f005fdf1 0bf106e3 06ff0009     ................
   2e998:	0c0b04ff 09060ced ecfcfcf8 0ffefbef     ................
   2e9a8:	e7fefcfa fa050904 fa02fa04 feebe6fc     ................
   2e9b8:	05010b0a fafafa0d 02fc0b06 08e60906     ................
   2e9c8:	fff6f3ec f8f9f703 f300f1f6 f5fa0001     ................
   2e9d8:	f60dfe02 10fbf2eb f706ef03 fbfd03e5     ................
   2e9e8:	fdfc0401 eaf00bfb fd0afbf0 0405f200     ................
   2e9f8:	0802fb0b f6fbf8fd e5ebf501 030911f8     ................
   2ea08:	fdfbe9ff fbfbfef1 0100fbfa f6ecf6f4     ................
   2ea18:	0201fd05 fd0d00f5 f508fff5 f707ff05     ................
   2ea28:	0dfceafa fc0005fb f80102ef 0103fb0c     ................
   2ea38:	f302fdfa f8fff4ec f506f3fc 01f9f900     ................
   2ea48:	ec02feff effc0503 04f90ded 02ecf6ef     ................
   2ea58:	fe02f8f6 08fb02fe f7effdf4 01f8fb10     ................
   2ea68:	090300f7 fefcfdfc f40afff7 faeceef2     ................
   2ea78:	ecf2fa04 fb00fff9 0906fefc 07fefafc     ................
   2ea88:	ef0ff9f4 0400f7fc 01f1f603 f1fe04f9     ................
   2ea98:	f6f1fb0a 01fa01fd 04fbfceb 0300f6f0     ................
   2eaa8:	02fafc01 ecf0f6ff fd060004 f3f708fb     ................
   2eab8:	fcf8fcff ff01fa08 05e9e7f9 f5f1fc05     ................
   2eac8:	05050d01 f6060000 f9010dfa f8f8edfc     ................
   2ead8:	fcf0eefb 08fbfb07 04fe0003 edfe0408     ................
   2eae8:	07f9f7f1 070802f0 f9f8fefc fe0009f5     ................
   2eaf8:	f7eafd02 f1fe0002 ef0107f5 fef906f9     ................
   2eb08:	f808f90a 12eeeff6 fc06f802 fa05f906     ................
   2eb18:	110100fe f90506fb fb16f9f6 00fbf50c     ................
   2eb28:	f4fbf6f7 ff00f4f5 f402fd09 f9fcf9f1     ................
   2eb38:	0003eeee f5f8f2f9 010101fe f0f1f603     ................
   2eb48:	02f90312 f9f7fcf0 f806f2f9 ff00fbf2     ................
   2eb58:	faf5fafb eefd02ff 0bf908fc fbf7fc01     ................
   2eb68:	ffff03f7 fff9f2eb ff04f202 fa020203     ................
   2eb78:	0205fa09 f9fefafe 03080203 08f80304     ................
   2eb88:	fafcf0fa fbf8eefa efeb04f8 0006f405     ................
   2eb98:	020b01f8 fcf8fefb 06feff0b f7eff8f3     ................
   2eba8:	efeef0ff f805fdfb 0df3000b fc0cfa08     ................
   2ebb8:	f6fff9f4 eeeaf70b fefa0809 fdfc0605     ................
   2ebc8:	f7f70000 fb03fcec f7f3f603 0cef02fa     ................
   2ebd8:	fbfb05f7 f4fefa0e 0501f20d fc0002fb     ................
   2ebe8:	ee020700 03fc020c fef7ef00 0202f603     ................
   2ebf8:	03f6f6f3 02ec0a09 fefbfaf9 00fdfdf6     ................
   2ec08:	01ecf8f9 f403f9ff 01fcfef9 f6f3080b     ................
   2ec18:	fbf701f8 0301fcff f9f8f3fa 07fa06e3     ................
   2ec28:	01fb0101 fcfcf6fa fb03f6f4 f501f4fb     ................
   2ec38:	0502fd01 0ef2e9fc fef8f9fe 02fb0800     ................
   2ec48:	07f702ef fb0505fe 0005f3ef f0060202     ................
   2ec58:	fdfc01f7 f9f5f40d faf903f8 f2fcfdfd     ................
   2ec68:	fa06ff02 03fcf9fc 020b03fb eff2f4f1     ................
   2ec78:	f8f9f903 fc04fdf0 f90300ff fe000200     ................
   2ec88:	07feeff8 06f4f707 f7fdfd00 fdec08f5     ................
   2ec98:	01f7fcff f70502f6 f5fdf6f4 ec050600     ................
   2eca8:	01fbf204 fd02fa0c 07fafef1 020104ff     ................
   2ecb8:	0eee00f8 050305e6 f3f8fe03 0709fffc     ................
   2ecc8:	f60203ff f2faff07 ff09f1f6 f90dfcf2     ................
   2ecd8:	06f6f3f4 fbf1fb05 11f6fffc 00fb05fc     ................
   2ece8:	f80bffee fd040004 fef3f1f7 0500f206     ................
   2ecf8:	f1faf806 f5f30ff6 f505fd03 fb00fbfb     ................
   2ed08:	040b04fa fdf7f8f6 f6efeb07 f3fe0df3     ................
   2ed18:	ec040b03 f80bf507 04f5f2f9 f903e7fa     ................
   2ed28:	0200f8f6 f301fbf3 f1f5fd08 04fb03fb     ................
   2ed38:	fef3f4f4 05f8ec02 06fafb0a f0fdf500     ................
   2ed48:	00f500f9 01fc00fc 09f4f404 09fef6fd     ................
   2ed58:	ecff0207 fafdf8fb 0501fefe f2ff0503     ................
   2ed68:	0806fcf8 fc05ef0b fafef0fe 070af604     ................
   2ed78:	f9f7fdff fbfe06ef f7f603f2 04fcfe02     ................
   2ed88:	05f0fb08 f3fefbff fbfe0806 fffafffb     ................
   2ed98:	08fbebf2 09fdf407 07f3f906 e6ec0907     ................
   2eda8:	f9fffbfd f702f9fa fd04f8fd 04fc0306     ................
   2edb8:	06fff2f7 f2f6f5f9 f3fd0cfa f6000000     ................
   2edc8:	0500fa03 f2fcf9fa f8f3effa fe02fe08     ................
   2edd8:	fafc0405 f2f708f9 f0f5fcf9 0503fff6     ................
   2ede8:	08fa00f0 04fc0c02 f8ebeffd 0af5f1f1     ................
   2edf8:	030c0200 fff8f900 09f6fefa fff2fbfb     ................
   2ee08:	fc03f7f9 f400ff05 f5f80af5 f308fb07     ................
   2ee18:	f003eeec f3f6fdee fa00010d 05f0fbf3     ................
   2ee28:	f5ff0503 f6f7fefb 01f7fff0 e9f9fef8     ................
   2ee38:	0703fefa fde8f2fd 0af9fbf7 fe06f40c     ................
   2ee48:	f80203f6 f8030501 070df1ef 0101fcf0     ................
   2ee58:	fbf1fe01 fbf2030b f804fcfd f902fbf9     ................
   2ee68:	09f9eefe 0afbf2f2 ff0bf406 0e080601     ................
   2ee78:	07f60218 05f9f60c fb0afc05 0001f508     ................
   2ee88:	1c17f003 08070112 00120c02 0d030b04     ................
   2ee98:	05fdfa0d 071216fa 05070c08 f60502f4     ................
   2eea8:	fe0df304 000afcf3 fa0e1007 f6ee0c08     ................
   2eeb8:	fafc0d05 020408f6 0ff10b01 05f40013     ................
   2eec8:	0302f60a 040a0a08 03f90903 0a06ec02     ................
   2eed8:	fb0d0218 020cf6f9 ff0b0707 fe04fefc     ................
   2eee8:	101019fd fe0f0104 fdfdfafa fe06fe06     ................
   2eef8:	fd0afc06 f5181308 03f90e0c 00fb0609     ................
   2ef08:	e8070905 fef20b04 0a000705 08fef60f     ................
   2ef18:	ff0af7fe fafbf3f4 0502fd04 0afe09fb     ................
   2ef28:	efffff12 0a0603f7 f709f400 0afdf806     ................
   2ef38:	0907050c fe00fbf6 f8f70aff f30300f2     ................
   2ef48:	fbfafc05 fc13fffc fd0c0711 f8fef904     ................
   2ef58:	0efffa07 0407fcf5 07010c15 fe0ffdf8     ................
   2ef68:	faf2f8eb 010df909 0cfb08f7 f40600fc     ................
   2ef78:	fcebfa0c f8030109 f201fcfb fe130101     ................
   2ef88:	f7f0fdf2 0df407fa faf80702 01f0010f     ................
   2ef98:	02121309 f7ff020d f104ec01 03f0fdfd     ................
   2efa8:	fd0ff5f8 0a001018 08fcf704 01f6f404     ................
   2efb8:	0a0dfb14 0e0d04fa f804f907 f905fc05     ................
   2efc8:	f4fef00c 040a08fd fc0d0504 fffe03fe     ................
   2efd8:	17f8f905 f907f5f1 06f9fd0d 0a0a0602     ................
   2efe8:	fb03f80b 060507fe 09fe05fa ff02f9f1     ................
   2eff8:	fd050d15 fc0a00f2 fff50104 e90cf4ff     ................
   2f008:	07f604f6 fb020303 f9020909 fc02f7ff     ................
   2f018:	f3f307fe 0e05fa05 f7f20b0f 0100fe01     ................
   2f028:	f3fe08fb 06f3f600 02000f04 0a03fb02     ................
   2f038:	fbfbecf8 f5fff505 fb0ef2f0 0ffc0017     ................
   2f048:	0afe0902 0d05feff f0faf508 0e010df3     ................
   2f058:	f905040a 09fbfb08 05fefd0a eae706fd     ................
   2f068:	0bf9fe03 05040200 ff030cff eefe0bfc     ................
   2f078:	03f2f4f7 080802fd faf9f107 030af4fe     ................
   2f088:	fef4fbf9 ffffedf9 01070d13 100a0e00     ................
   2f098:	fff20007 f60afa09 fdfb1507 f1080501     ................
   2f0a8:	f708f404 0202fa09 04f30105 0cfe020e     ................
   2f0b8:	0af10904 11fb0501 050304f6 fef8fcf2     ................
   2f0c8:	0d0605ef fb050d0c ef02f8f7 fbf50004     ................
   2f0d8:	fd01f7ee 040d0000 0b070d0d fffff7f6     ................
   2f0e8:	fd04fefc f9040205 000d0804 f60c0402     ................
   2f0f8:	0408fa06 f801eaf5 fdfd030f 0a0406fc     ................
   2f108:	0d05130c f1fbff01 02f9fff3 050a0105     ................
   2f118:	000afffd ed00f7fe fdf1f60b 0809f0ee     ................
   2f128:	0ffc010d 04fb0a05 fdfcfbfd fffb0001     ................
   2f138:	00fb09f6 fe090a03 f709fdfc fb0cfd05     ................
   2f148:	f4f4e9ff fe040b0c fd0504fd fdfafd03     ................
   2f158:	ffff06fa 0201efec fe0dfffc 07fe0702     ................
   2f168:	f90eedf9 ddf4fd08 f602f1e4 090c0c04     ................
   2f178:	f9050204 01fefaf1 f3f8faff f2000df7     ................
   2f188:	fd070c07 eef8f7fc ec0af609 0a03faf3     ................
   2f198:	10020b03 00fb000c 00f10508 fce809f6     ................
   2f1a8:	0af8f2f0 0103050c f70406f4 e903f001     ................
   2f1b8:	eaecf90a fcfefff0 150ffdfd 00fc0000     ................
   2f1c8:	03f3f300 01f1ebf1 f70f03f4 f90b0608     ................
   2f1d8:	f9060101 010cff07 fb00f4f0 f6ff0210     ................
   2f1e8:	01fe0f09 f9ecf9f1 00fc08f6 07f1f4fc     ................
   2f1f8:	06fbfbff fdff0b0b 02fbeff8 e8f0fa1c     ................
   2f208:	f904ecf7 000efe05 0d0a06f6 0e01edfd     ................
   2f218:	fafbf6f3 0203fefa 0a0503f5 f7f7fcfe     ................
   2f228:	ee0ff7fc f5efe6f3 0a0100fe f903040c     ................
   2f238:	fdfdff05 f6f61afa f7fafaf5 06fe0505     ................
   2f248:	eef70c05 f1fb04fd f3f0fc13 fefaf605     ................
   2f258:	10040103 06020bf8 11f1fff5 fee4faf4     ................
   2f268:	00f908f7 01f91007 fd05f606 ed08ff05     ................
   2f278:	fc00e9ed 081c03fe 0dfd0906 eef80a08     ................
   2f288:	01fe0ef7 fc09f9f1 030e1005 fe0b0701     ................
   2f298:	f3fcfbfe f0f5fc12 070100fa fd02070b     ................
   2f2a8:	0b040707 0ef000fc 0204f1fd 090dfa00     ................
   2f2b8:	fafdfcff 0cfe00f5 f815f701 fffe00e9     ................
   2f2c8:	0a0d0008 0202f901 fd050003 00010dec     ................
   2f2d8:	0c080702 0002f711 f901fefc fbf30608     ................
   2f2e8:	f30c0303 02eefbff 10090bf9 fefb0809     ................
   2f2f8:	1107fafa 05fa0706 020ff9fb fe010506     ................
   2f308:	0807ff05 000dfc13 04fb0405 15f811fe     ................
   2f318:	fd02f4fb f6fafced fefbfd05 fcf8f9f9     ................
   2f328:	fb0002f8 f903fd04 f9fff9fc 0507fe02     ................
   2f338:	0405faf4 00f708f5 05fb04f6 fbf80206     ................
   2f348:	f6fc0bfd f702fafe fd0706fe f5fefcf8     ................
   2f358:	fb0205f4 04040302 fcfe09fb f705f6fa     ................
   2f368:	01f5f207 fbff0a05 f8fcf6fa f7fe03fe     ................
   2f378:	fd060105 fc06f5f8 fb0506f8 fc06f5f3     ................
   2f388:	ffff05f7 f9fafafd 020100fd fbff0701     ................
   2f398:	03fefef8 fdf80405 f7fdfef5 fa010300     ................
   2f3a8:	f6030003 05fbf705 03fbf501 f704f7f5     ................
   2f3b8:	0400f9fe 04f902fc f90afe03 f7fdfff7     ................
   2f3c8:	07020401 000801fe f5fcfdfe f6fd05ff     ................
   2f3d8:	03f80201 07f6f6fe 01010aff 03fcfdf7     ................
   2f3e8:	00fa03fd 0402f703 08fcf803 fb0405fb     ................
   2f3f8:	fdfdff04 06fd06f9 06030702 fd07fc05     ................
   2f408:	fd08fd04 fb07fcfb fef4f603 f7fbf8f8     ................
   2f418:	0808fd01 ff06fbfe 05f5fc03 ff08fbf5     ................
   2f428:	0a06f4f7 fefc0603 fc0107fc 050406fe     ................
   2f438:	f80000f5 ff05fdfb 01fcfa05 00fdf8f5     ................
   2f448:	fcf8fbff fc05f608 01ff0b01 fcf6fb09     ................
   2f458:	fdf6f8f6 f8f900ff f5f2fdf4 fe01fb0b     ................
   2f468:	fefef801 ff010906 0109fafc fbfafefc     ................
   2f478:	01ff07f7 fafa04f5 000103fe fb00fe05     ................
   2f488:	fe04fbfa f4fcfdfa 03f6f9f7 05f503ff     ................
   2f498:	01fdfb03 02fbfa00 01fcfb08 f602fd03     ................
   2f4a8:	f7fd0607 fbf901fa 0707fffa f5f8faf4     ................
   2f4b8:	f50104fe fe00f8f8 0b030706 fcfb0406     ................
   2f4c8:	ff0206f9 00f80204 05050802 09060200     ................
   2f4d8:	faf8f7fe 0005f9fd 00fe0103 06feffff     ................
   2f4e8:	07f706f7 05fff606 010601fb faf9fd02     ................
   2f4f8:	02f7fbfe fdfd0602 000603f5 0af7f9f5     ................
   2f508:	fdfe0604 0afbff05 01f9f806 0801fd02     ................
   2f518:	010401fa 00f60000 fb08f9f7 f703fc08     ................
   2f528:	f6fef608 fdfdf8f8 06ff05f7 fb0608f7     ................
   2f538:	f8fcfefd 04fffcfb fef800f9 f8f802ff     ................
   2f548:	02fc07fb fd0604f6 f8f50603 0a0604f9     ................
   2f558:	03fc0006 02f7fa06 03ff01f7 0202f709     ................
   2f568:	00fefe02 03fcfffa fcfdff04 fff7fa08     ................
   2f578:	000006f8 fff9fd02 01fcfd01 06fb0204     ................
   2f588:	02ff00ff 0204f507 000402fb fc0207fd     ................
   2f598:	00f9f9fd 05f7ffff 02faf7f7 0af702fb     ................
   2f5a8:	faf50207 00faf4f5 fefef6ff 08000cfd     ................
   2f5b8:	05070405 ffff0000 04fcfdfe f8fafff8     ................
   2f5c8:	fef4f802 03080cf8 fdfcffff 030106fc     ................
   2f5d8:	fafff500 f9f7fafa 01f70803 fdfa03fb     ................
   2f5e8:	f9030302 050105ff 03fb0205 fa060206     ................
   2f5f8:	faf9fbf8 fffcf607 f9fef305 08050502     ................
   2f608:	faf6fb06 f80103f8 fcfefaf9 01f706fd     ................
   2f618:	02fd0700 f9f7fdfb 020600f7 f804fbfe     ................
   2f628:	f8fafdf8 f9f7f805 f802f8f3 01f3fffe     ................
   2f638:	0a0504fa fd0706fc f3070308 f8fcf9fd     ................
   2f648:	09f6f901 ff06fc01 040607f8 f7ff02f8     ................
   2f658:	05fa0301 fff9fd00 01fc08fa fff909f8     ................
   2f668:	fcf7f600 f702f501 f90305f8 fd07f7fe     ................
   2f678:	01fb0301 0400fef9 fafd0506 0704f9fe     ................
   2f688:	03f901f7 f8f9f6f7 f9ff03fe fd0801fb     ................
   2f698:	03fb0104 0502fdfd f2f60305 08feff07     ................
   2f6a8:	f8f902fb 04f60106 f8f90f00 fafbf6ff     ................
   2f6b8:	04f805fd 03fa05f9 fff8fb01 f408fcfd     ................
   2f6c8:	f90000fb fc00020a fefa00fd 0ff6fdf8     ................
   2f6d8:	02fdf6fa 0407faf4 fc06f507 f7fe04ff     ................
   2f6e8:	fd0a06fe f4f403ff 0304f905 04f802fd     ................
   2f6f8:	f7f4ff02 fb0908fa fef2fdfa fd06fdf7     ................
   2f708:	0201fb03 00fff5f7 fbfc0104 0203f5f6     ................
   2f718:	03fb0507 f705f502 0bf80800 01ff0702     ................
   2f728:	04f6fc01 f8fa0804 0503f9f8 06fefa07     ................
   2f738:	f7fcff03 0203ff03 0106ff07 fe05f4ff     ................
   2f748:	ff0304fb 01f6fffe fdfe0500 f4fbff03     ................
   2f758:	05fafcfc fafa0b07 fefb06fa f40100fb     ................
   2f768:	f5f6f801 0400f506 f7fd08ff 04fefb00     ................
   2f778:	fdfcfffb f8f9fcf9 05070802 f5f6fdf8     ................
   2f788:	f8faf805 01f9fc02 02f6fb03 f9060703     ................
   2f798:	fdf9feff f80509f5 07f7f604 fefd0002     ................
   2f7a8:	fbfcfcfb 02fffc02 fa0207fb fdf3fdfd     ................
   2f7b8:	fb06fdfe 00fa07f7 fffc0103 05fff7fc     ................
   2f7c8:	f700fb03 f101f707 f5fefe0b fd05fcf6     ................
   2f7d8:	fefb0701 fffd0bfb 06eefef9 05f0eff5     ................
   2f7e8:	fa00f1f9 fb01faf5 f8f1f604 f60ef50a     ................
   2f7f8:	03fdfef8 f9f9eaf8 fff7ef03 0af7f3ff     ................
   2f808:	fafb06f8 f4f80602 03fcfff7 f3040103     ................
   2f818:	ec0cf500 f9fdff03 f9fff505 f7f809fd     ................
   2f828:	03edfffa 04f10502 02faf304 fef3ff02     ................
   2f838:	f601fff7 01f9ee01 0c05e8f9 f906f505     ................
   2f848:	fbf6f4f6 070200fa fa0501f5 ec020ef7     ................
   2f858:	fd06fbed 07f2f1fd fdf5f704 ef00fc09     ................
   2f868:	f2070a12 f000faf9 fd05070d fffd04f7     ................
   2f878:	0df703f9 02000701 06f30bfa f4fff0fa     ................
   2f888:	0000f7f4 fe12ee01 ff0002f5 0306f003     ................
   2f898:	fc030002 0df8ff04 fdfa08f9 fe070af0     ................
   2f8a8:	1003f8f2 08fbfe02 f304f7ed f8f6040b     ................
   2f8b8:	f9090af9 02fdf101 1002fef8 14f9fff9     ................
   2f8c8:	06f6f500 fdfbee03 f5fefd02 fd09f604     ................
   2f8d8:	f507f603 f9fbf2fa f5faf1fd e7fe08fc     ................
   2f8e8:	0404f7f9 f5f904fe f6fe01f3 f2fdfaf2     ................
   2f8f8:	02f70602 f103f405 f5fdf802 f408fb00     ................
   2f908:	fa03effa 0507fa05 0a0207ff 02f802fc     ................
   2f918:	f4f8f3f3 fb06f500 f8fafdf6 0009ed01     ................
   2f928:	07f6effc fc0509ff f5f3ff0c 10f8f8f1     ................
   2f938:	fefc08fa 1407fbfa 03fcfffa fcf8f005     ................
   2f948:	f201f8fe fc08020b 0d0102fc ff02f908     ................
   2f958:	ff05f6f9 00f9fef0 08fe0cfa f9f50a0c     ................
   2f968:	f8fd0a01 f7fc07f9 f6010404 03f6f706     ................
   2f978:	ff07ed06 f801f8f8 fd040601 09f705f8     ................
   2f988:	06fef9ff fb080703 f5f30202 f80df9f7     ................
   2f998:	f300f00f 06fbf1f7 f7fefb00 01f3ee00     ................
   2f9a8:	0bfd07ff 01edfaf6 03040703 f7fb08ed     ................
   2f9b8:	f2eefb05 ff09f909 ff03f8fc f405fbfc     ................
   2f9c8:	eefe0cfb 05f803fd fffa00f9 0ff806f1     ................
   2f9d8:	0200faf6 fefeec07 fa00fd07 f0f1f309     ................
   2f9e8:	ef060209 fefff6f4 07f20803 01020803     ................
   2f9f8:	f5f3ed05 09fb00fc fcfa0af9 0208ff04     ................
   2fa08:	fb08fefe fcfbff05 fef5fe01 0508fbf7     ................
   2fa18:	03f7f606 f2040efe f2f7fcf4 fff802f4     ................
   2fa28:	030403fb f403fcfc f8f8f207 fb030703     ................
   2fa38:	ff090305 f5fefef4 13f70406 fcf7f300     ................
   2fa48:	fe01f8fc fffeff02 fff5fd00 f90efc00     ................
   2fa58:	05eceff4 fcfcf802 1306f4f5 06f7fb01     ................
   2fa68:	effd12fc f604f7f1 090109fe 0907ff00     ................
   2fa78:	ff0cf2f9 f6ecf20b f4ef0201 f502ee06     ................
   2fa88:	090600fe 11f80af1 fdf2f506 0901fb04     ................
   2fa98:	f7f5fdff f3fd0505 fa0ff502 fbf8f3f7     ................
   2faa8:	fd07f002 f8f5f9ff 0cfdfde7 fe080d02     ................
   2fab8:	0bfc0cf6 f8edf3ef f70af8f4 f90806f8     ................
   2fac8:	fdfcfc13 e7fe0d0b f9f9fc01 fbf1fdf1     ................
   2fad8:	110307f9 02f3f10c 06edf7f1 f900f7f0     ................
   2fae8:	0901effb 030bf50a f8f7faf5 05f8f402     ................
   2faf8:	0006ff03 0200fd03 f40412f0 f901f9f3     ................
   2fb08:	fe0401f8 f7f9f4fe f5fb04fa f900fe15     ................
   2fb18:	e9faf900 fc0cfa01 05fb08ef 14f3fd01     ................
   2fb28:	f7f40602 f7fdf3f9 f3f5f5fa 0bedf5f6     ................
   2fb38:	f517f10a f702f5f6 f9fefff9 ebfc04f9     ................
   2fb48:	0707fcf5 f9f109fa fa01f6f6 01fb120b     ................
   2fb58:	f902f404 f703faf4 00f80308 0009fc00     ................
   2fb68:	f806100a edf2f6fe 12eb10f7 0bfbeffb     ................
   2fb78:	fbf40405 0af609f8 03f1f8fc f601f200     ................
   2fb88:	03f7f5f5 09fbf600 03f8090e 02fc05ef     ................
   2fb98:	f2f402e9 010d06f8 0b0704fb fdfcf5fd     ................
   2fba8:	f504f2fe edeef50a f6f3fb07 f9020208     ................
   2fbb8:	f7f6f5fd faf505fe 10e9fdfa 08fbf604     ................
   2fbc8:	f7fffcfe fbfbf105 fd0ff807 f7f5ebee     ................
   2fbd8:	0e050600 fbf40801 fcff04ff f0f202f1     ................
   2fbe8:	fdff00f0 160b0008 f808f9fc eb09f8f9     ................
   2fbf8:	e9f20007 01ef03fa fe130512 0605e8fd     ................
   2fc08:	03e6fff4 07e5fff9 f8fef9f6 fa0204f9     ................
   2fc18:	01f9f00c f80be30c f803f6f5 0505fbfa     ................
   2fc28:	fffbf607 10f3f3f8 f5fb05e6 f8fc0bf9     ................
   2fc38:	09fd04f2 f80df2fe f003f9f8 f2fcf002     ................
   2fc48:	f8020e06 fc0703f2 05e7f4fd 08f10501     ................
   2fc58:	06eefef6 faf1f6fb eef10c08 fef6ee02     ................
   2fc68:	f601ec05 f9ffeff8 faf00206 f7ffff0d     ................
   2fc78:	01ebf8ef e7fcfad8 10fc16fd 0af90bf7     ................
   2fc88:	fe03f903 d909ed08 f5ec0808 effcf50e     ................
   2fc98:	020df50b 00ec04ff ffd70d04 12fffaf8     ................
   2fca8:	11f703f6 fe0706fe ef03edf7 f0fdf006     ................
   2fcb8:	e402fce7 fe0fed05 030f0909 fff11601     ................
   2fcc8:	f5fe00ff fd051cfc fef50dee 0203f305     ................
   2fcd8:	f8fbf703 0107ff05 fa1ffa06 fefff31a     ................
   2fce8:	00eefe05 0f0510ee 0705ff0f 13fc13fa     ................
   2fcf8:	fe0c01ef f5f7e007 0106ff04 fb0bf8ef     ................
   2fd08:	f511fc05 02060813 fdfa01f8 f70313fd     ................
   2fd18:	070103ef 081614f7 f5fdee02 f705fcf6     ................
   2fd28:	0bfa0b0b 0914f903 0afcfd09 f4ea0606     ................
   2fd38:	0deb03f5 07f3ed0e 180c16f1 0e150a09     ................
   2fd48:	0407fa0d 04120bfd 010afef5 f40dfd16     ................
   2fd58:	1ffc04fd 0aeff704 06010bfb 08fc05f5     ................
   2fd68:	0fe818f7 0505f50b fa08f805 02f40311     ................
   2fd78:	0d06f902 00f4f401 faf907f1 0f0900fb     ................
   2fd88:	faf3100a 07010bf5 031608eb f9ff0214     ................
   2fd98:	0b150c0b 09fdf8fd f3fdfe02 09fb0d10     ................
   2fda8:	fcfa01fb 02070e00 080900f8 14080cf7     ................
   2fdb8:	0c04f1fe f303f4fb f50b0408 fb09fb05     ................
   2fdc8:	060bf415 fff30205 140904fd 01f307fc     ................
   2fdd8:	08fe0503 ee15fdf7 ff03ff07 0509f60a     ................
   2fde8:	04fcef01 fcfd110a 0ef9140d 05f70901     ................
   2fdf8:	ec040702 0301fbf5 05f40ef1 f210ec0b     ................
   2fe08:	0807f50c f7ed010a 0205fd06 04040110     ................
   2fe18:	f60608f6 110307f1 fef4f501 00ffeff3     ................
   2fe28:	02030bf6 1413070d 0c11fe01 09040bfb     ................
   2fe38:	fe070cf8 0be70c0f 0df9f603 f5fa0a0a     ................
   2fe48:	fa060c04 07fa0cfe fa0beff0 000603f4     ................
   2fe58:	00f7ff16 08f6f503 0bfbe50f fc000908     ................
   2fe68:	0804fff4 f5040a0d 19fb09f3 fb0801ee     ................
   2fe78:	fb130117 fc19fd04 f2f9fcfc f00cfc04     ................
   2fe88:	0ff6170a 0af8010f f70816f5 09f708fb     ................
   2fe98:	11ecfefa fd0cf104 fc04fb03 0e090f12     ................
   2fea8:	1007f905 0210e71c 04fd09f9 15f306f9     ................
   2feb8:	fef9ff0c 12fb0203 fafd0beb f8050813     ................
   2fec8:	0b0bf9ff ee07fa09 f103faf8 15f6fb0d     ................
   2fed8:	0af3ff09 0805170a f70c02ff 02f401f3     ................
   2fee8:	0802eff7 0cfdf813 ff080512 00f8020c     ................
   2fef8:	0b10ef12 08f10cfb 02fafaf4 00fbfb0b     ................
   2ff08:	fffcfdff f00c0ef4 fd15f407 101601f8     ................
   2ff18:	fef7f508 f30a0de8 18f3ff08 fe01180f     ................
   2ff28:	030402fe f307fef7 fefc13fa fa191207     ................
   2ff38:	ff10060d 01fc0afe f8030d0c 0304f011     ................
   2ff48:	f6fc120c 0dfa0002 08010004 14fffc07     ................
   2ff58:	0f041bf1 05050005 130d0004 0dfffc00     ................
   2ff68:	eb01f005 1afa0809 04fd0304 fa0d03fc     ................
   2ff78:	04060906 09fe02ec 0616fa02 f7070802     ................
   2ff88:	0efe0403 f3fdf4fc 0d11f701 090a1116     ................
   2ff98:	0300fe04 fe04fc09 0f0f0d03 ff050b05     ................
   2ffa8:	0b06ee00 130af809 fc11fe05 fe06fcec     ................
   2ffb8:	0d02f901 ff09edff 000005fa 07030903     ................
   2ffc8:	08ff0102 e900f70c f5fa080e 07061205     ................
   2ffd8:	f6f1f815 020efd03 ecf5fcfc 0bfb030e     ................
   2ffe8:	070902fe 08f3fef7 09081007 f300020a     ................
   2fff8:	0f0703fd ee1d0c11 fafdf6ee 130f0517     ................
   30008:	0500f804 060e11fa f9fd2407 1b01070b     .........$......
   30018:	f0030108 f00207f9 feff0f12 fa07122d     ............-...
   30028:	0806f307 03f605fc fcef00f8 1310f3fd     ................
   30038:	05f2feeb 031810f8 f30c070f 100df305     ................
   30048:	fd1602f6 0610faf6 09f5010f fffc0af2     ................
   30058:	ff0610fa e2f31216 04fc13f0 f4080004     ................
   30068:	f20aff00 f2000ffa e4f5f519 0811f609     ................
   30078:	19fa040b fe000400 14070402 01fcfaf2     ................
   30088:	02fa0bfe f404ff12 1002e307 ff0bfaef     ................
   30098:	fe040203 01e90115 06010bff fc0105f3     ................
   300a8:	f4050c05 010209ef f900ef05 f206fffd     ................
   300b8:	fc000f01 fef0fa0e 03070704 05f8060b     ................
   300c8:	fef501f5 1707f608 13f1fc0f 13f9ff04     ................
   300d8:	f1fb0208 0105fe07 090b04f4 ee00e20a     ................
   300e8:	19f5070f 03f7f8fc fc0e04ee fdfe1008     ................
   300f8:	0ef915f5 f8fcf30f ed09fdfd fe07f8fa     ................
   30108:	eef0f00f 090605fc 02f6fc05 04f107fc     ................
   30118:	0707fcfd 06e8020e 00000afb f401fafe     ................
   30128:	17021406 ffff0512 06feff0d f80a030a     ................
   30138:	00f60109 1608070a fc04000e 0004fffb     ................
   30148:	0be71003 08fef6fb 0c091202 080afe07     ................
   30158:	ea02020b 02090102 fd12f8fe f9061103     ................
   30168:	0b0bf804 fbfe0b03 f70113fd 070b0801     ................
   30178:	faeb0313 02f80104 02080c04 f8effcfe     ................
   30188:	0c0bf607 fdfefc15 00fc00f7 fdfe0304     ................
   30198:	13fd01f2 090f1205 ff060f01 f4f5eff3     ................
   301a8:	ed0900fe 0910feff ff170314 fa0102fe     ................
   301b8:	f8f9f505 00ff08fe 02000e03 0a040c04     ................
   301c8:	04020201 f7fbfbf5 01f001fb 0507ff0b     ................
   301d8:	fd020603 ef06fd02 fc09fbf0 0203fb07     ................
   301e8:	061203fd 0f0d0607 f3f807f8 fefceef3     ................
   301f8:	f0fc07ff fcfc1015 f6130f03 faf9fd02     ................
   30208:	f3fbf304 0afe0307 0700fc04 02fd1915     ................
   30218:	f1fc0500 fae6ecf7 0d040b07 13fbfcfe     ................
   30228:	fc0108ff 0803f801 0a030209 fe0803f3     ................
   30238:	0c0004f9 faf4fdfa 0eff03e9 f8fffaf6     ................
   30248:	01060205 fe0a0901 fefef304 fc04fdfd     ................
   30258:	03f1ee01 fbf9f2fd 09000509 0cfd06f7     ................
   30268:	07f50905 fcfcf60b 1006f9f2 fc02fb03     ................
   30278:	f7fff206 fafbfa00 f50b08fb f602fc02     ................
   30288:	f1fa0eee 0ffaf8fe fafb0004 f9fff8fa     ................
   30298:	fc07fef6 fdfbf4ff f60401fd f0f0ecfe     ................
   302a8:	fbfdf9f4 fffa1005 eb090302 0bedf4f1     ................
   302b8:	f5f8f8eb 03f209f7 f305fe10 fef80904     ................
   302c8:	ea03e808 f7faff06 0afbf401 fff906fe     ................
   302d8:	fbf7fefe fdeb04ee f6fee0fa 0007fe00     ................
   302e8:	0008f802 f6fafef6 eff6e803 fb0ef6f7     ................
   302f8:	000906fe 0406f9ee 0ff401f5 df04e600     ................
   30308:	0c06ffef 04f9030f 05f2020c f90d00fe     ................
   30318:	f0edf5fb 13fbf0f4 00f5f7f8 07fcff08     ................
   30328:	eae904f8 06f1ebf7 ff050902 04fef802     ................
   30338:	f802fcff fdf8ee04 0700e7e2 03f704ff     ................
   30348:	0d0e00f9 fafafb0a e9f4f7e6 fc060d0b     ................
   30358:	02030f08 fce7fc05 f1fbf6ff f5edf5fa     ................
   30368:	100cf907 03090d08 00f7f005 f6f508fd     ................
   30378:	09eef2ee 0209f703 0efb000b f013faf8     ................
   30388:	f0f2f60b 03fddfdb 01070707 fcfdf80d     ................
   30398:	020100f7 ebf3eceb 07ff04fd 06041311     ................
   303a8:	f4f40700 e90b0503 fdf1ecea 03090bfa     ................
   303b8:	010a08f6 0c030105 e4f30700 06f9f003     ................
   303c8:	f8f705fc 05fd0a02 eb01ffed e6e6fa05     ................
   303d8:	fcf8eee5 080f0b08 fb000205 fb04f4fa     ................
   303e8:	f6faf7e3 06000af6 fd04130b 03f803ff     ................
   303f8:	e90cfb07 fbe9f6f8 02040404 0b0002fe     ................
   30408:	0404fe04 f4e606f8 03f7f5f2 fa06050c     ................
   30418:	070a05ef 030b00f3 ebf2f110 fafeedee     ................
   30428:	fc140dfb 0006ff02 0afc08fa dcf9fae6     ................
   30438:	fe0d01ef 1107ff10 f50206f6 fc050c09     ................
   30448:	f9f3fcfe 10030d0c 06070504 0302f901     ................
   30458:	fde90df5 09faf3f3 f80cff0c 05fbf707     ................
   30468:	f105fb09 fce9f104 0d0af4e9 02060316     ................
   30478:	fd0007fd 030205f8 0101edef 020b01fc     ................
   30488:	000d0000 fdfdf603 f6040dfd 00f10502     ................
   30498:	02fffff8 07f90f07 fa010001 00f80505     ................
   304a8:	fe05f708 06f9080d 03fdf900 03fcf4ff     ................
   304b8:	01020006 fc0000f1 0707f608 0ffefcfe     ................
   304c8:	030a08fc 02000cf8 13f80300 000d0007     ................
   304d8:	000904fc fc060806 0cf70600 0c0208f8     ................
   304e8:	fefc0108 04fd0006 01f80cff f80dfb04     ................
   304f8:	0d090107 01010af7 00fc0502 f9ff0cfd     ................
   30508:	04010dfa 0310020b fffe05fc 0afb08fa     ................
   30518:	fdfe09ff fb05000a 01f91605 05fafb11     ................
   30528:	05030304 0c050b04 050904fa 0606f609     ................
   30538:	020d0c0c 0b0e04fa 07120bfc 0e100a09     ................
   30548:	040e00f8 f8f7fd08 01060a00 080305fc     ................
   30558:	060bfb0a 0f0907fd fdf90609 07060e0d     ................
   30568:	0a040600 f1fdfffa f7f8f7f2 02030506     ................
   30578:	fe0000fb 040107fc 0002010a ff000a0b     ................
   30588:	060507f7 0b06000b 090af601 f3060401     ................
   30598:	010dfb06 f508fffe f7ed04f7 f807fcf7     ................
   305a8:	f9ee0404 040d0402 040a0513 081100f5     ................
   305b8:	fcee0401 11020008 1803010b fc000b10     ................
   305c8:	05f50d09 06faf60e fcf9fe05 f2f81101     ................
   305d8:	0c0ef8f0 ff07f6f8 f8f7f7ff f5ecf2f8     ................
   305e8:	fcfb0002 0e0102f6 fe140318 f7f9fffa     ................
   305f8:	0704f0f7 f1f6faf6 fa0a0204 ff00ffeb     ................
   30608:	f8fa0af5 080700fb fbf7fafd 050bfc07     ................
   30618:	08fc00f9 f4e5f003 f10c04f0 0701f403     ................
   30628:	09f10106 00f901fb f8f403f7 f4f40405     ................
   30638:	01020cfd ea10fd13 0204eafb 06f7fff0     ................
   30648:	0a08fe0d 0c05ff10 f4fa1603 f605f6fa     ................
   30658:	110004fe 07f9fb01 0eff0c0b 06f3f907     ................
   30668:	f5f403fd fe06fbfa fd0806fe f6f80504     ................
   30678:	f1020dff fef201f6 f8040606 f9f80dfa     ................
   30688:	01f90011 0603f1ff 0505f7f0 0205fd0e     ................
   30698:	0602f10e fcfff50b 0108f5f2 120012fb     ................
   306a8:	03ff0504 fd0f08f7 f80809f1 01080708     ................
   306b8:	f8100b0d 040ffefe 05030f02 f90001f9     ................
   306c8:	0701faf9 fc080a01 00f70900 020902fa     ................
   306d8:	0a02f5ff 08000a02 f30e0e0f 17050afa     ................
   306e8:	f6fbfe0c 02fe0c00 09f90302 09f00000     ................
   306f8:	f30c1106 fcff0609 04090704 0115fb00     ................
   30708:	0cfdf8fb fdfa0bfd fcfcfbfb f3f8ecf9     ................
   30718:	f7080a06 00080507 fafd060e fafdf500     ................
   30728:	f906f9fa f9050b0e 0df5f703 fcfe080d     ................
   30738:	fc0df6fc 19fe0d05 08fffd05 f812fcf3     ................
   30748:	0100fcf4 08fd0a09 fc110003 fd04fc07     ................
   30758:	03f7fc07 f202020b 0606000d fc071403     ................
   30768:	f80406f5 05fa03ff 0501f5f4 07fd0604     ................
   30778:	f7fa0c14 ff01f9ff 020cfe05 06090700     ................
   30788:	05011008 0906fd01 030bfefb 06030e08     ................
   30798:	fefe1a0d 010504fe 0603fd01 12070308     ................
   307a8:	fbf30006 f9f60010 03ff060a f8fd0b02     ................
   307b8:	fbf90903 010afa03 00fef9fc fd0cfe09     ................
   307c8:	ff05f0fe 01010d09 040e04f8 0d010305     ................
   307d8:	01f7010b 060301fb 04fcff03 05031c09     ................
   307e8:	060e01f1 09060004 effbfafd fbf303fa     ................
   307f8:	04f90004 08fc07fd f4fa1205 f6010cff     ................
   30808:	02fbfcff 08f6040e 03fd0113 03fbfe03     ................
   30818:	fc06ff07 fb060cf9 0c070504 04f60e09     ................
   30828:	fb070502 fdf6f900 f2eb0506 0310fcff     ................
   30838:	ff0d0f07 f3010203 03fcf1fe fef2f7f9     ................
   30848:	030915fa fe01fa04 fc02f60a fdfc01fc     ................
   30858:	00fdfb0e ef00fe11 04f3fcf5 04f90a0c     ................
   30868:	ff08ff0c 14030607 f1fd0601 03020af3     ................
   30878:	08f8fc0b f5fa050d fc010605 fbf90309     ................
   30888:	03f4020c 0207f200 0ef9f70b 01020d0a     ................
   30898:	fff811f5 07040a03 180b0907 fdf4000b     ................
   308a8:	f506fc08 0af9fd05 01010704 00020504     ................
   308b8:	080500fb fa040408 06060a0c f505fe03     ................
   308c8:	f1fb03f3 fd080106 06fef20d faf8f9ff     ................
   308d8:	0c04000a 07f0ff0b 0bfe0305 f40907f6     ................
   308e8:	f5080508 030703fa fb06f4fa f804fd0a     ................
   308f8:	0d04ff02 fdfe09fc fe0e0d0d 010511f8     ................
   30908:	f8fd0b07 05050905 f8fdfb02 f8040a0b     ................
   30918:	0a0c0104 f70600fa fcfb0706 f3fc1007     ................
   30928:	fb03f70a fe070305 02fef7fb faf9fb05     ................
   30938:	0d04fafd 07fa01fe f90a070c 0c040206     ................
   30948:	f9f80dfe ff0c02fb 05fa0dff 0715070d     ................
   30958:	07ff0602 f9f3070b 04001003 0b0cf80b     ................
   30968:	ff0d1101 08f21503 0d06080e 01f7f0fd     ................
   30978:	fb040a05 020d080e 000e0304 19080109     ................
   30988:	07020704 05f4ff08 07f6020f 07f908f2     ................
   30998:	fb01000a 0dfbff00 05fafe0a f403f9fb     ................
   309a8:	07100404 04f603fc 0a0906fc 040f080c     ................
   309b8:	0bec0510 f8fafd01 05f4030c 090f0c09     ................
   309c8:	f2f2000e f4020705 0806eef7 09060505     ................
   309d8:	03010d17 02fdfa06 fafef4f4 f91907f2     ................
   309e8:	0c0400f9 f503fd0c f804fef4 f70af7fc     ................
   309f8:	f80611ef 060d06f7 030214fe ffeb0403     ................
   30a08:	06f70e01 08fefd07 020809fc 01fd0209     ................
   30a18:	f7fbfefd 0006f6f9 03000800 05f3fc07     ................
   30a28:	ff10f904 f2f8fee7 09090c02 0608fa0a     ................
   30a38:	f806010a e90506fe fdfdf4f3 fbef1104     ................
   30a48:	03010dfc f3040400 fcfa08f7 f4f7fefe     ................
   30a58:	ee0003f5 fc050d08 f8f10313 fb040204     ................
   30a68:	f2f0fff6 0903fd05 04fbfd07 fc030603     ................
   30a78:	f9f5fee5 ff0301fb e2000201 e8ecedef     ................
   30a88:	f5f9fefd 02fcfcf7 fef407f7 f9ea06f9     ................
   30a98:	09ffebe1 eef402f0 ed0306fa f9edfcfb     ................
   30aa8:	eef2e405 f10bf8f1 edfffff3 f70405fc     ................
   30ab8:	02fcf7ed eae3efdf fafe06f6 fdee03f9     ................
   30ac8:	ef01fbfa f1070000 03fef5f1 fe00fd0a     ................
   30ad8:	f60403fb 08edf6fd f7f0f304 02fbf9f4     ................
   30ae8:	f4f313fc f2f410fc 0005f7fc f5faf7fa     ................
   30af8:	fd08faf4 f7fa0af8 0609f905 fd01fff5     ................
   30b08:	f8fafc02 f90204fd 05f3f8f8 f7fe0dfc     ................
   30b18:	06f4f8f3 f1040507 06fcfbfd fafeff05     ................
   30b28:	fe02f2f2 0403fbf7 f5fb03f1 00fef8f7     ................
   30b38:	0e0b04f6 05e7f608 fb0302f8 02fe0302     ................
   30b48:	fa0bf301 fff1f9f6 f6fe0afb f8f5f7fd     ................
   30b58:	0003fdf5 04f00df3 04050203 14fa06ff     ................
   30b68:	0109f306 f4ee00fe f30bf803 090af6f5     ................
   30b78:	f8fffd00 f8fef6f8 f9eefdf6 f2f7fff0     ................
   30b88:	f7f609fc fa0402f6 fdff08fe f2fbf1f3     ................
   30b98:	0d120512 ff04f8ff 01e8fa06 000201fc     ................
   30ba8:	0c050afb 0801f100 fa0104fb 0408f701     ................
   30bb8:	f6e804ff fd06fbfe fefc02fe fcf7f503     ................
   30bc8:	010806ee f9f505ff faf508f5 0b0cf507     ................
   30bd8:	f2fbfb06 fffc0009 fd00fef7 0bf60afc     ................
   30be8:	ff100302 14f703f6 fe07f303 0c01f5eb     ................
   30bf8:	fe07fb07 0afa0107 0910080a f600fdfc     ................
   30c08:	0007fef6 fef517f8 06030404 fc0402ea     ................
   30c18:	04fb0301 f50214fd f8010b0b 01f6fff9     ................
   30c28:	04f3fe0a f8fff5f5 0df80709 fe040100     ................
   30c38:	00f40500 f715fffe 0807fcf8 fe0dec00     ................
   30c48:	fd010d02 140ef5f4 eff70201 0805f2fe     ................
   30c58:	fcfa06fd 00fbf608 f90304fe 01f7f9fd     ................
   30c68:	f2fcfefb 04ff00fa f4fd0103 01f80cfd     ................
   30c78:	ec03fd0c fcfe0205 00fb02fa 0bf5fef7     ................
   30c88:	0501fe05 13f408fe 0007eff9 02fcf302     ................
   30c98:	05fdff03 fdfdf506 fc0eedfa 00fa06fc     ................
   30ca8:	02030b00 ed00fe01 fef813fc 04f50eee     ................
   30cb8:	f9f4fef7 f8fe00fc 04ed070b f6fef502     ................
   30cc8:	0803f901 02fdfbff 0af5fffd fafc0407     ................
   30cd8:	fdf204e8 ff02f7fa 000bf802 0903f7f4     ................
   30ce8:	f6fefceb fdff03f7 fa01fd0d f806fffe     ................
   30cf8:	0710faf4 fbfffa03 fb010af8 02fbf7fd     ................
   30d08:	fb0007fc fff5f7fb e6f8040a 0602f5ff     ................
   30d18:	f900f805 f90b0205 00fdfffc 00f90807     ................
   30d28:	0105f708 09fffc08 ff000afb 0000fcf8     ................
   30d38:	000006fc 0bfdf506 fe10fef9 0c06fafb     ................
   30d48:	fa000ef7 04fd0204 01f5f7f7 0306fe02     ................
   30d58:	f2fb0300 ec03fb04 fafd07f9 05fafcf5     ................
   30d68:	0908ff09 ff0701f2 f5f60007 f205fef7     ................
   30d78:	0d0101f1 fb050cfe 03f7fa05 0205f604     ................
   30d88:	f8f5fb05 07fd02fe ff070809 fcf4fdf4     ................
   30d98:	0003fbec f0f0fc0b 06f90c08 fd02f60a     ................
   30da8:	fd0501f2 fdfcfa05 0bfff100 1002ff0e     ................
   30db8:	f0f2fffd fcf80bfd 01fd0a01 050301ff     ................
   30dc8:	0302fafd 04fcf2f6 03fdfb01 f2000b03     ................
   30dd8:	070b04fd 060f0ef4 f9050df5 f8fa01fa     ................
   30de8:	fdf202f9 01070708 01fc08fa f4f6f6f4     ................
   30df8:	fb120203 0901fc05 0bfffb07 f1fa0d04     ................
   30e08:	f6eff3ff fd07fe03 fd01fffd fd08f9fd     ................
   30e18:	0ef1fb14 030ffb00 ff00f50c 0509fdf8     ................
   30e28:	13fa0407 fa03f1ff fb010bf3 f7fdf40c     ................
   30e38:	02faf601 f708fcfc fd000306 0307fd04     ................
   30e48:	09060400 f700fff9 faff0bfb 12ff0907     ................
   30e58:	f305f5f4 07fffe04 09f4fffd fbfffb13     ................
   30e68:	0411f609 fafbfd09 fc07f704 06fcff04     ................
   30e78:	fef6ff01 f9000df3 f302f3f9 fe070006     ................
   30e88:	f914f7f7 fffbfbf1 00fbf600 f7fd0d07     ................
   30e98:	0000f2f8 fef702ef 0708f6f3 050d0000     ................
   30ea8:	00fbf712 fd0109f4 f60002fe 0604fbfe     ................
   30eb8:	08f5ef05 03f50bf6 04f0ea00 0a01eeef     ................
   30ec8:	00050d07 f2fcf707 fe0500fc 03fc04f1     ................
   30ed8:	05fdfdfd 051103f7 01f60afb f7fb06fc     ................
   30ee8:	f6f90c03 f5f4f5f4 f607fefd f7f2f803     ................
   30ef8:	f8ed05f6 fefaffff 0109fb00 0cfeff03     ................
   30f08:	f0fa0305 00fdf1f7 f3f3f6f6 05020702     ................
   30f18:	0301f001 f4f2fff3 fa0d00fd 01fbf408     ................
   30f28:	fd04fdfb 07f808fa fdeefbfa ff070bf9     ................
   30f38:	f4eaf101 f2efef08 ee020101 fe04f3f8     ................
   30f48:	f0f5fc16 0807ebf7 ecf4f8ec fee4f7fc     ................
   30f58:	13ff02f5 fffa04f1 ee05eee7 fde9fd00     ................
   30f68:	f104eafd fc0b01f5 f605f9f0 fb080afe     ................
   30f78:	050804f3 fbeb0df8 fd0b10f3 f10206e5     ................
   30f88:	00fbe407 f1fffa01 f701fa0e f600f807     ................
   30f98:	fa0fe6fd feeefcf7 14f30cfb 04fb0aee     ................
   30fa8:	f7f90102 e7f00ae3 0b00f6fa fe1202fb     ................
   30fb8:	1311f9f8 e3fbf5fe f8f00810 fb0005f8     ................
   30fc8:	03fa1e02 f0f908ed 02010803 f3faecfe     ................
   30fd8:	0408eb10 ff0ef617 f6000d13 f3ffe908     ................
   30fe8:	13f2fff6 1204f406 0f02fb01 0c0005fc     ................
   30ff8:	ebeefef4 fbfcf700 fe090805 0017f0fa     ................
   31008:	f414fe10 03f9f6fb f5f6f507 09f30601     ................
   31018:	f504f9e2 05f01107 fff8fa06 f9f9fd18     ................
   31028:	f5fee80b ff0102fb 0612f2fe 0def0bfc     ................
   31038:	0204f9ff fa0914ef 0df60afa 01f705e3     ................
   31048:	07f2fefb f50802f7 fd05f20d f71bfbf2     ................
   31058:	fcfa0e01 050afd01 08fd0902 f0fbfff8     ................
   31068:	0bfc0de8 0501f609 f905fbfe 0010f7ff     ................
   31078:	f0fb0204 fe04f910 09f1fd04 0efc0004     ................
   31088:	f2fa0aef 00f908ff fd080ceb f202fb00     ................
   31098:	02070402 f5f4ff17 f1fdf2f8 06fc01fe     ................
   310a8:	fdfdfe08 09020dfb f7f8f5f5 04ed12f5     ................
   310b8:	0301fef4 01fdfb00 fb07f709 04f8100c     ................
   310c8:	fafff306 ef0703f5 0efa00fa edf70100     ................
   310d8:	0efdfcf7 030afbf8 0df8040c f915faf7     ................
   310e8:	0d06ff07 f9fefef5 13f608f9 f6fffff8     ................
   310f8:	0af21503 edfbfefa 07fc0af4 f8fdffee     ................
   31108:	03f704fb f30bfb05 00ecf8fc 0006ef03     ................
   31118:	fc12ff08 04f7ff04 f50304f3 0def00ed     ................
   31128:	0f0df9e4 f70606ff 0114f802 f6f5f900     ................
   31138:	e20d00f8 fdf40207 fafefff8 fdf61205     ................
   31148:	ffeef005 fde2eef0 effdfcfc fdf6eff4     ................
   31158:	f70d050e f8f2fdeb f306e606 06f70301     ................
   31168:	02f4f607 edff1001 02f80301 07f1f1eb     ................
   31178:	f0ebfdf1 f30304ff fcfcf605 e502fce4     ................
   31188:	f9fb03fa fcf305fd 05fc0cff e3fcfff5     ................
   31198:	07f9fff7 050dfe06 fe04f0fd f505fa07     ................
   311a8:	0af8f207 011cf508 fbffeeeb 0a0203f6     ................
   311b8:	000204f2 060e02fc f6f2fee9 feeef9fe     ................
   311c8:	fc130afa 05f9f30a f20a14ef 0adff708     ................
   311d8:	f90906ff 10000eff 0700f7f1 14070207     ................
   311e8:	ff08fbf7 06010908 f803ff0d 1306fdff     ................
   311f8:	f806ec0d f8080005 0cfc03f0 07f903f8     ................
   31208:	030ffbf9 ff0207e1 05090002 fb14fa05     ................
   31218:	fffbf6f8 e714fdfc 10ebee07 f9fcecfc     ................
   31228:	05fb0601 f3f909ff 09fe14f0 f70cfef9     ................
   31238:	02fdfe01 ff0b0014 01f8eef3 03fae919     ................
   31248:	edf6f0ef 0c02ffeb 02fd0f00 130afafd     ................
   31258:	01f9f5f5 0dfcfafb 010ef801 f2000213     ................
   31268:	081403e2 f7f4f3f8 0708f1fd 11f803f8     ................
   31278:	f7f6fe0f 050503fa f604fb06 04feff04     ................
   31288:	0f0efd06 fdf6e4fe f503f0f7 f70df8f3     ................
   31298:	0a080103 f70008f8 00f3fc01 f8f3f600     ................
   312a8:	0207f9ff fd090605 f6f4fb00 05fcf8f2     ................
   312b8:	f7f80cfc 0202f5ff f8ef01f9 f70a1a08     ................
   312c8:	0dfb1702 f9fbef0a eefdfaf9 070af80b     ................
   312d8:	01f7f90e 0d0af607 f8f509fd 0bef03f1     ................
   312e8:	0c05eef0 0903f2fc f7070af6 fe08fae8     ................
   312f8:	edfff4fd 04f9f6ff f80c0bfb f8eaf510     ................
   31308:	fff8f8f6 02ecfdf7 ec070d07 00f81607     ................
   31318:	f308f50b eff6f8f9 fcf7ed01 fdeff716     ................
   31328:	fdf4040b f4f303fa faf5fafd 02ebfdfc     ................
   31338:	fc0cfaf7 fc0b07f9 fe05fb00 f70cf0fd     ................
   31348:	fd02fcf9 fdf602f1 08e1f70b 07fc09fb     ................
   31358:	fdf90afb ea040a03 faf2fbf8 00f5ef07     ................
   31368:	f103f8f3 f2fcf70f f4eefb12 09fdf6f4     ................
   31378:	ecfbfdea 13ef02f5 06e8f7f0 f1f6f7fc     ................
   31388:	f80c06f6 f7f8ea0d fc0a01fb f6fee0f9     ................
   31398:	f0f6fae9 05ec01f6 0006edf6 fdfe05fd     ................
   313a8:	e7050af8 0af8f907 f8f2e402 ed02fd00     ................
   313b8:	0105f811 f8d8f40c fb00fbfe fae5f8ed     ................
   313c8:	fcf001fd fbe9fef5 f3e6f503 eef200f5     ................
   313d8:	eaf0fbf5 f0f9f40c 01120df0 f7060500     ................
   313e8:	f6ee0000 10f6f9f5 ebf4f8f4 10f70b03     ................
   313f8:	fdf5010a f3fbf704 ec050bfa fee9f0ea     ................
   31408:	01090209 f9f2fdf6 0b01fe10 faf30d0f     ................
   31418:	fbfdf0f4 f80006ff 0e01040c f9f0edfe     ................
   31428:	03efef05 0906fff7 06f5fcf4 fc03f203     ................
   31438:	0100f6fa 04f6f5fd 0d0ef80c faf8fdfc     ................
   31448:	01f000f1 f5f9fcfe fc0200ff 0dfd08f5     ................
   31458:	f700fefe ecf7f806 00050004 08ff0608     ................
   31468:	03f60213 0ff106ff fdf40410 02f508fe     ................
   31478:	0cfd0301 01fdf703 fef20008 fb05f0fc     ................
   31488:	09f7f209 0600f209 00f6ee05 f5060e00     ................
   31498:	10fe0908 08080502 01ff05f5 0409f4ed     ................
   314a8:	faf9ffff fc11fe12 060df3fe fafe0405     ................
   314b8:	04f70602 09fc02fe 03fc0605 fafe0100     ................
   314c8:	0400f9fb 03f4f912 fc0bf20b f803f70e     ................
   314d8:	08fcf10e fdf2fd02 fdff03f6 0cff00fb     ................
   314e8:	04fb1205 08070104 f4fe0001 f3f90c02     ................
   314f8:	0c17f615 f801fe0e fa040c12 00f4fd00     ................
   31508:	04fd090b ff0213f4 fa030604 fa00fef3     ................
   31518:	0df9fb0d fee700f9 09fc03fc 1b01fa00     ................
   31528:	fefeeb01 f0f810fd 07fb0ef7 fdfa0805     ................
   31538:	0603fcf5 eeff0408 fbfc02fc f50b0317     ................
   31548:	fbfcf60b f5fe08fe 000704f4 04f1070e     ................
   31558:	09f90efc 07f7fd05 0802e6f7 fcfcfb04     ................
   31568:	020af8ed 0604fa0e 0af9f203 0dfbfa02     ................
   31578:	fd020601 0f05faef 010f04fd f4fbfcf4     ................
   31588:	f20406fa 100a1d05 f9fdf510 edfa070c     ................
   31598:	fa02fef9 07f60714 ff080312 0e02fef6     ................
   315a8:	01fa020e 03f8f7f7 0607f205 eefaf80a     ................
   315b8:	0d040e0b ffff02ff f500f6ff 03f90eee     ................
   315c8:	fffc0dfa 020b0402 0104fbf2 fd0afaff     ................
   315d8:	0106080d f8fdf50b f2000d0c 0d0f0204     ................
   315e8:	08040a0e 08f9f90f 040b09fd 090204fb     ................
   315f8:	fdfd02fa f806f905 f9040806 0510fe17     ................
   31608:	05f3f1fb 05f8fd05 01ff0efa 09faf8fe     ................
   31618:	fc0f0c03 f10a00f3 0102f907 fcf80b11     ................
   31628:	fa04fef2 f8fe0404 01081205 12fc0c09     ................
   31638:	fefafb0d 100817f7 fcfa0202 0efffcf6     ................
   31648:	ffff03ff f0040307 06ff0016 11f8f905     ................
   31658:	02f5f706 0d0100f7 05ff090c f801fbfa     ................
   31668:	0201f3eb 0a0403f8 f4fe0205 020200fd     ................
   31678:	f4ed0409 060afef7 0e06feff 07fe08fe     ................
   31688:	15080a00 f303fb0f 0d04f505 070700ff     ................
   31698:	f8070bf9 fc04060d fdfb0506 0b01080a     ................
   316a8:	fdf70dff 03fff6f9 fe060df8 020ffdfd     ................
   316b8:	040a00fc f5000510 fe0ef8f9 fcfc0106     ................
   316c8:	09060cf9 02f408f8 00f40210 0afc02f5     ................
   316d8:	05fa03fd 00fa00fc 0a0ffef9 ff08fe01     ................
   316e8:	0906ff0b fef2f501 fff9fd02 fe0f02f7     ................
   316f8:	0df800f6 faf708fe 0606f5ea 1106ff0d     ................
   31708:	f90b0e15 f908050b f1f00418 010001f4     ................
   31718:	0909f8ef 15010d0e 10ff06fc 0ffff8f5     ................
   31728:	f8f60403 f400f505 0109f9f9 0401f104     ................
   31738:	0d02f7fa 08090103 0f05fff6 fdf9f702     ................
   31748:	0703fefa f6100cf9 09fffb07 10001101     ................
   31758:	000dfa0d f504f803 fc0300f7 01fbfcfe     ................
   31768:	00f904ff 0afffbf8 02fb0b07 f9ef0504     ................
   31778:	0510ff08 00f9fffc 0312fe00 0b02fb05     ................
   31788:	ffff0305 000a19fa 07f90006 0ff303f7     ................
   31798:	f8fcfa06 0605fafd 030509fe 000a03fb     ................
   317a8:	fd06000e f20d07fb 02050af1 01fbfe08     ................
   317b8:	1209f9f7 0a060dfd fefbf3fe 09f6f208     ................
   317c8:	0601fdff f706f804 06fdf8fe 04f608f8     ................
   317d8:	e8fd0aec 010cf801 f4f909f6 fff8000d     ................
   317e8:	080201fb fcf80502 f4fb01fc f7fffd0d     ................
   317f8:	fcff0006 eef201ed f9fdf3f4 13ff04f6     ................
   31808:	08fc0cfe f5fff6fc 05ffeffd fc00f806     ................
   31818:	000bf704 00fb01f6 f7f307f5 08fe0ef9     ................
   31828:	ff02f7f0 fdf201f2 ee070c00 0af80600     ................
   31838:	fa020c10 fafc01f1 fcf6eb0b 05fc0606     ................
   31848:	00f50205 03f9e905 12f2fcf9 f30211ff     ................
   31858:	09fbf60b f9fcfcfa ff0b05f6 f4fce6ff     ................
   31868:	0bf7fb05 00ff01fb f6f7fc05 f8f8fff8     ................
   31878:	07f707e7 f4040af7 03000604 06030605     ................
   31888:	0114faf4 fdfb120d f8fe07f4 08f30201     ................
   31898:	fcfbf605 170f0af8 f9ff0b14 01f802f4     ................
   318a8:	fd060003 fcf60b03 060a0318 1102fe05     ................
   318b8:	0600f104 00f40a00 0f05f8fc 1311040d     ................
   318c8:	fc0308f7 f402fff1 011001f1 050404fb     ................
   318d8:	e00c090b 040af7f7 12fffc04 f2090719     ................
   318e8:	0a130af4 f3010101 07f001eb f9fe0dfb     ................
   318f8:	ff01fa0a 06fd1303 f90cff0b 0202f106     ................
   31908:	0907fdf6 0a00fb01 03080c06 0304eae7     ................
   31918:	f4fd0208 080908f7 0d15fbf0 f70c0601     ................
   31928:	0100fbfd 0d01ed02 04fc05fc 0f0f15fe     ................
   31938:	ee04f312 06f3ff05 02fefbf3 f7fbf4f9     ................
   31948:	1001fc08 050501fc 04fcff0b fcf7f105     ................
   31958:	0bf8faef f00709fe 0df5f1fe 020508f8     ................
   31968:	020213f5 0a0af6fa f8ed09ff fa1103f8     ................
   31978:	05f9fd05 ee010306 0d0b0e03 f7f8fa10     ................
   31988:	02f00104 f3f617f7 01f70001 190e020c     ................
   31998:	fff6010c eaf0fcf2 0602f109 0dfaf210     ................
   319a8:	0afe0514 04f6fc06 050802ee 0a0afef1     ................
   319b8:	080af604 fbf3f70b fdfcfaf7 f3050402     ................
   319c8:	f2051006 0e080cf0 f8fdf813 0df80401     ................
   319d8:	fe02f402 00050401 0d0e0808 f2faf5f4     ................
   319e8:	fefef4fa 0709f808 06f7f90a 03010c04     ................
   319f8:	07f4fbf8 fd0e11f6 f9fe01f3 0403f6fb     ................
   31a08:	f0fc0105 f40201f1 fd07f7f8 ef020503     ................
   31a18:	03060c00 02f7f400 03f20908 0f01fff9     ................
   31a28:	f5fd09fb 0202050f fbf301fb fe03f107     ................
   31a38:	f5fcfffc 1307ef0a eef0f909 03f800f7     ................
   31a48:	fbf4f4eb 02fc00f6 0eff01fd f8f5fa09     ................
   31a58:	fcf80002 f3fdeff5 f8050409 02f6f1fc     ................
   31a68:	07f7fbf7 03e30103 fdf20cff 00ef0af1     ................
   31a78:	f301fb03 f20307eb fbf2f4fc 0af4f4fa     ................
   31a88:	07f9f8f6 e6f00704 fd01f800 04fbf5ed     ................
   31a98:	ff000df2 f90005f4 f3f6ff00 fb000801     ................
   31aa8:	fbf6fd0a eaf4f6fc 0900f812 fb02f9f0     ................
   31ab8:	f8faff01 fef903f8 07f908ea f102eee7     ................
   31ac8:	0200f7f1 06f4fd06 f6faf0fd f502f411     ................
   31ad8:	f7f2f1f2 00140309 f705fef6 07f4ecec     ................
   31ae8:	eef801f9 fdeee7ed 000912f9 f5000301     ................
   31af8:	fa03fafc efe3d603 fef6fde9 f9f80501     ................
   31b08:	f7070404 0dfffae7 ebf0e8df 0d0804fa     ................
   31b18:	0003fcf7 f7fdfefa e008fd11 f4fb00e3     ................
   31b28:	ff0ef501 f901f4f3 11f9f301 efe809f4     ................
   31b38:	0ae8e0f2 fb1009f8 fcf6fcfd ecf1efee     ................
   31b48:	f1eae706 f9fdf2f1 05020102 f6f8faf1     ................
   31b58:	090afcfd e9f6ecdb 0904f8f6 01010407     ................
   31b68:	00fee805 e706f8f2 f5fafbe6 0710f802     ................
   31b78:	f6fdfbfc 07f4f30d fee70806 ffeef0fb     ................
   31b88:	fbf70bfc f9f70305 fdf8e8ec f1eed909     ................
   31b98:	f5f7e7e7 fe05090d f6fefcff 090914fd     ................
   31ba8:	00ede7e4 100703fe f303fc05 fef4f9f3     ................
   31bb8:	e009e611 f8f8f7e8 0613fa0a f1fe04f1     ................
   31bc8:	f4eff400 e8ee02e9 f7fce8f6 0a0110fa     ................
   31bd8:	04f003ec 0405f7ff f3e8ec02 0c01f8f1     ................
   31be8:	0b080117 fdf6fffd 01070cf8 e3f3f8f4     ................
   31bf8:	0d0702ee 080efcfd 00fa01fb e9f806fc     ................
   31c08:	03edffea f5110b03 f9000600 fff108fb     ................
   31c18:	f5f1ffff 0008ecf4 fdf80502 0605efff     ................
   31c28:	01feef07 f9f2f903 f90708f1 0c02fc17     ................
   31c38:	f9f8f70a 030c0705 faf8f3f2 13070cfd     ................
   31c48:	04050405 faf903fd fc00f404 0100fbfb     ................
   31c58:	fa08f20e 0c0505fb fcfc07f5 fafc0a03     ................
   31c68:	f602f404 020dfff1 0309fdfb f7fffa05     ................
   31c78:	f0fd0efa fc1004ee 02060d00 fe0b0902     ................
   31c88:	ff0c0f11 f9fdff08 150c0405 08090e0b     ................
   31c98:	fff4f702 0efcfdfd 08f9ff09 070cfc0f     ................
   31ca8:	08fd00fb 0af6f901 f51307f8 0afaf4f0     ................
   31cb8:	0c030a01 fe0f03f7 f80601f7 f9070703     ................
   31cc8:	060107fe ee0008f8 00fefafc 00fc14f8     ................
   31cd8:	fbff0711 04f90003 fb010306 fdf9f701     ................
   31ce8:	10000909 0af8fc09 06f3fc0a 0ffbf9f6     ................
   31cf8:	06fd02ff 040a03fe feeff5f5 0c170708     ................
   31d08:	fc0009ff ff09fcf7 0408ff06 1004fe01     ................
   31d18:	f708f806 08030500 f70210f8 f80b0906     ................
   31d28:	03fe02fe fd0a0e0c 01f70af9 07f80bfa     ................
   31d38:	01121704 eef503ff 0303fcf9 ff150210     ................
   31d48:	f90a01f4 f60e0411 0f08fd10 0c090512     ................
   31d58:	01fa00f7 10040aff fffa0210 fa010500     ................
   31d68:	eafdfc08 07071000 0608f405 f1070105     ................
   31d78:	0bf2fff3 09f8e706 f6060407 00fd03f6     ................
   31d88:	0304f4e3 0203f3fc 0b07ff0f e6f104f9     ................
   31d98:	fe01fe05 06f9eb02 0602fffd fffefdfa     ................
   31da8:	fcf2f504 0e0b02f9 0403f8f5 02faf6f7     ................
   31db8:	fffa040e fff6e7ef 0802f503 0c0806f8     ................
   31dc8:	070301f4 e8050901 07fef5f7 000af2ff     ................
   31dd8:	f3fe0302 ebf80613 f9eb0afa fcf9fd02     ................
   31de8:	0203f90a 02ff0401 f30afdf3 f6fafe09     ................
   31df8:	05fe03f2 f9f6f7ef 0af9fc09 f803f50e     ................
   31e08:	f4fbfeea eff9eff8 050bfe0d 02020cf9     ................
   31e18:	f602fcfa 03fd0c01 010e0bf0 fa03fefb     ................
   31e28:	ff00f50f 01f903f9 10fefb06 fff6fefe     ................
   31e38:	00fe0603 fc0706f3 02fe0808 060200fd     ................
   31e48:	0af9fafa 0afbe900 01fb0afe f103f709     ................
   31e58:	010304f6 ff00fe0b 03f307f9 fc040207     ................
   31e68:	f7f204f6 150af3f5 f8fe0207 02f80304     ................
   31e78:	f7160406 fff1f800 f7fc07fd 01050108     ................
   31e88:	f7030008 06f90bff 08f909fb 01fa0614     ................
   31e98:	09fbefff fe0102f7 fc110902 1402f7f6     ................
   31ea8:	f80a0415 fbf60a01 13f3040b 01fd0508     ................
   31eb8:	0b1a05fc f904fb10 04fb0111 040b04fe     ................
   31ec8:	fe02fd06 03fe090c 0dfc03f9 ff0a0300     ................
   31ed8:	09050afe 0408fa07 05081004 0305ecff     ................
   31ee8:	fdfbf4f5 f6040814 02fc0dff 04fd010c     ................
   31ef8:	f6e9fe02 14fd0813 ecfcfa08 130c0506     ................
   31f08:	01fc0506 02090104 131b02fe 111006ff     ................
   31f18:	00fd07ff 01080a08 08040708 fe1a12f8     ................
   31f28:	0b0809f5 0a08fd05 fcf50106 fbfee6f6     ................
   31f38:	000bfa05 f9ff0cff fffc0901 060df5f9     ................
   31f48:	15010002 fc061602 0dfe08fa 08ff0c07     ................
   31f58:	fb0614fc 090df6f6 09fdfc05 0304f6fb     ................
   31f68:	ff03ed0a 040dfc05 0f100b07 ef07f7f7     ................
   31f78:	0a031902 fe010211 020b04ff 02fd1016     ................
   31f88:	fdf80bf8 090c0409 ffff1009 150306fe     ................
   31f98:	fcee0313 120bf611 0d100408 edfdfa04     ................
   31fa8:	0a0ef4fc 07fcfa02 f506fc01 0501ff06     ................
   31fb8:	ff110408 07111dfa f80c06f7 03fe06f3     ................
   31fc8:	fef8f701 f90808fa 02f9070f 1004120e     ................
   31fd8:	fd00050f f4f906fa 19fef6f6 01fbf810     ................
   31fe8:	0004f203 ee0704fc eff6f8f4 1319f7e9     ................
   31ff8:	090403f6 f7010201 f9f5f905 fb03f4f7     ................
   32008:	f61d06f6 f808fef3 0002fb03 edf7f405     ................
   32018:	f6f5fded fcf7040b faf6ff07 0912f90c     ................
   32028:	03ecfc03 0705fe15 04f7fc01 0f08ebfb     ................
   32038:	f105fbe7 f901eefa 1607ff02 1005fd03     ................
   32048:	e5000208 02f50405 0401fc01 fb1808f5     ................
   32058:	f6fefaf5 08f60e03 eff8f9fc 0ceef8f7     ................
   32068:	f3f90a01 fdff01f1 08fbe90d f5fdf7f3     ................
   32078:	f90aeaff f2ea04fc 0109ef07 fc0301f3     ................
   32088:	effff2fd 05f208f4 fbf7fdf6 f703ff02     ................
   32098:	01f6fb07 fde6eefd f6faf009 0707fbef     ................
   320a8:	0df70c04 08f5f9ff 08fcf1fd f6faf2ea     ................
   320b8:	09f503fe 02fdfbf8 f8fafaf4 f00ff8fb     ................
   320c8:	f0f4f2ef 0d0af2f8 f4f8fffd fbef0202     ................
   320d8:	faed03fb f8fffef1 f3070ef8 e8f1fcff     ................
   320e8:	f2eff5ea f8fce4fa f8fff508 08f310fc     ................
   320f8:	05f8f6f3 0705fb02 eef2f6ef fff8f7e9     ................
   32108:	f803f604 fffef5fa f609fff7 f6fc02e5     ................
   32118:	0d0defe9 08f204f3 fcfdf600 eeef0cfa     ................
   32128:	02f701f6 01fd0b09 f4f50200 f60101f6     ................
   32138:	fcf2d209 fb000102 00001811 01040907     ................
   32148:	09f6f9f3 04f5fae8 fe02f602 f9050408     ................
   32158:	f6f70403 e80d01f2 eff8fcef 0004f601     ................
   32168:	fbfc0105 090516ff f0e50708 fbfbeef5     ................
   32178:	fa040004 ebfcfa03 00160203 fde0dd0a     ................
   32188:	0c08fefa 08f4040f 09f1fafe 12fafaf6     ................
   32198:	05e6e9e5 071108f8 ffff0e0f 0d03fb08     ................
   321a8:	e60df70f f0f80000 05100005 fc05170e     ................
   321b8:	10070404 fde600f7 05f80604 f80b0f07     ................
   321c8:	fef4030d fa120606 01fcf500 06080fff     ................
   321d8:	05031908 fdfffa07 0c0603fa f5130e09     ................
   321e8:	f0fa06fb f0fb03f2 f7ea03f3 051700ff     ................
   321f8:	f9fffbfd e0eb0902 07effd04 0901ddf5     ................
   32208:	071113fd 02f4fa12 01eeef01 0b01edec     ................
   32218:	f7f2f4fb 0d0a0c0d fc0500f4 fcf9e2f5     ................
   32228:	dd0000ec 11f4f9f8 f6fc0a0a e4040bf4     ................
   32238:	eef605e3 f7ecf903 030aede9 f7f90c02     ................
   32248:	fbe5f506 f7f5f0fe f4f1e5f5 030f0bef     ................
   32258:	04050c0f fbf7e802 fef9eee8 e2f7e2f0     ................
   32268:	0f070e0c 0cff04f7 f7f8fafe def8eff9     ................
   32278:	10e9f3f1 050b0c04 e608070a ebfdfff5     ................
   32288:	f2f0f8e8 090df2f3 f8010301 f1faf304     ................
   32298:	f6e4f903 fdfaeaf4 101008f7 0b07ff08     ................
   322a8:	fb0d0b04 04eff9f0 f402e4ee 0e070a0a     ................
   322b8:	03010007 fff6f7f4 ee06f4f6 03fafdf8     ................
   322c8:	f4050d07 010907f8 f90006f6 feeb06fd     ................
   322d8:	0c0dfcf0 05fe0208 09f40005 ffeffefb     ................
   322e8:	fc02ff02 100d08fe fd040215 050b0a04     ................
   322f8:	fdfaf5ec f9fe03f5 05140c12 07fcf2f8     ................
   32308:	0805f2fa eb09f90f 0efb0017 f6030b12     ................
   32318:	fbf5fdf7 00030402 f8e7faf1 090de5fd     ................
   32328:	fdff0d14 08f2fffc f2010003 e205fdf7     ................
   32338:	0b05ffe8 fd05fa0e 01080501 f8f1f9fb     ................
   32348:	020f14f9 07061006 f8050101 010d010d     ................
   32358:	1001fc00 0eedfe0d fc070b14 01040afb     ................
   32368:	fdf20c08 f200f1f3 0804e6ed f8020a04     ................
   32378:	01fbedf6 f4fffb0a fc12fb0d 1212fcec     ................
   32388:	f5faf7fd f8f8fcee f7f4e2ff fb0406f7     ................
   32398:	0cfe040b fe04fd02 0107000f e5f902f8     ................
   323a8:	0afa07fc fdfd06ff fd0c05fa ecf30601     ................
   323b8:	faf6fdf9 0002fdee 02fd0502 fff600ff     ................
   323c8:	fce5f609 0b000707 0509fff8 f8fdfd07     ................
   323d8:	0bfdeefc 0e03f501 f4f203f9 0b090307     ................
   323e8:	0a09fd04 f706f3f8 f2fb0cf6 08f3fff1     ................
   323f8:	f907fb05 05fc06fc ff00f8f0 fffc0404     ................
   32408:	0c12f1fa 0e00ff05 03ec0007 f4ea17fd     ................
   32418:	01fffffb 0d080af3 02f90210 03f3f3f9     ................
   32428:	05fff9f6 fb01faf6 070d0e0c fd010208     ................
   32438:	f006fcf7 ed00ede4 f7ffeff3 f9fcfc06     ................
   32448:	f9fd0afb f5f91200 f000f808 090609f7     ................
   32458:	060bfd0b 03f60a11 f1ec0207 ec05f2fb     ................
   32468:	0401fdf2 00f9fa01 11f4f8f8 140eeef9     ................
   32478:	ff02fcfc 0d0d0c0a 080af3fe fdfd00f5     ................
   32488:	fa0b08f3 09070506 f103f901 f30810f8     ................
   32498:	f3fd06fb f9f40f15 060002f6 08060e0b     ................
   324a8:	eef20d09 00f00809 f807eb06 020bfcf1     ................
   324b8:	fd04f5fe 0df8e307 fafcec06 f90f08f1     ................
   324c8:	06f8fb03 0f000802 f102e5f7 f4f6effe     ................
   324d8:	05fd05fd f9000dff 01fd07fe 05fc16fd     ................
   324e8:	f8f20501 f70df101 f0fcfbfc f1f704f5     ................
   324f8:	06ff0a05 f1fee4f6 fefbf7ef 0c02f40a     ................
   32508:	0a03080f 1110f90a 02fb08f4 06fbf903     ................
   32518:	fd14fd03 e2f6efe8 f610fbef 00fffb01     ................
   32528:	f20102fb f3070b04 fe0e1009 02f2f803     ................
   32538:	f3fbf503 06f9fe05 f408fdff ecf1fd04     ................
   32548:	f30bf309 09030cf5 0508f3f8 0dfdfb07     ................
   32558:	0c08f4ff f5ff00f0 08f6fdfa fd050bf6     ................
   32568:	fe150df2 f40804fb f9010303 ecfdf600     ................
   32578:	020406f9 010e1606 eef90804 fd0b06f1     ................
   32588:	f8f901f8 f4fe0803 fbef1c0d f8f9fb14     ................
   32598:	fc06060b fdefeeff 05f0f508 0f06f6fe     ................
   325a8:	010409fe 05fa0601 100d02ee fc0903f4     ................
   325b8:	0a0909fb 0a01010b f00afbf9 fb010efd     ................
   325c8:	f00b0a01 f3f808ef f7fff3ee ff0406fd     ................
   325d8:	01f706fe 00fa0315 0c00fe0f fafb0d00     ................
   325e8:	0005faff 03ebf9fd 0bf80201 fbef05fb     ................
   325f8:	f7f70505 060300f4 f10904fc fb1001fa     ................
   32608:	01060afc fcf709f9 f20e0802 f80d0803     ................
   32618:	00f3130b f6f8f4fa f50005ee fcfb0afb     ................
   32628:	fcebfdfd 0d0eeb00 05fa0a00 02f6f6f4     ................
   32638:	08f6fd01 05f6fef4 ff05fb02 f202f907     ................
   32648:	0e09fef0 06fe0101 f708f1ff 0c06010e     ................
   32658:	f4020303 e0fa08fe 01fe0405 04050a03     ................
   32668:	fa08f2ec 0308fbfe f2fdfdfb 02fafd06     ................
   32678:	ef01e70a f4030dfc 06fdf8f7 0ef9f10d     ................
   32688:	030ffe01 fb0df8ed 120e1003 f8f30009     ................
   32698:	04f805f7 090809ff f4fe1000 13110a17     ................
   326a8:	f3fcfe0f fe12f6f5 02fa0700 06fff803     ................
   326b8:	050e0712 0d06ee05 fffa1405 1c13f201     ................
   326c8:	020b06ff fc021304 05020102 02f80505     ................
   326d8:	020908f1 07150c04 06eafc10 13030fff     ................
   326e8:	02fd0405 fc040cfd 0d0c130c f5f9f7fb     ................
   326f8:	001bf4f8 0b03fa07 04f603fd 00090d16     ................
   32708:	070208f7 06060301 fd110500 0b0bf6f5     ................
   32718:	f704100d 030c0df8 f7fafcff 080a030e     ................
   32728:	0a0e07fb 00fb03fd 05050b06 050e02fd     ................
   32738:	fa0d0305 08041b10 04f6f6eb 0508f4f0     ................
   32748:	06090606 0efe0810 f71a0a12 0000fbfc     ................
   32758:	0807120c 09ffff01 1519fdfb f9f21306     ................
   32768:	0106fdf2 05071208 03040b18 03101801     ................
   32778:	f6fbfb10 06ff0cfe 0716fef9 f7fefbfe     ................
   32788:	0e0d131c fbf9f9eb 11fcf2f6 08f1fd17     ................
   32798:	1efdf302 07080514 010bf803 fcf90004     ................
   327a8:	0d0704f7 120beef8 0aff0d0e f10cf5f2     ................
   327b8:	0b030803 000c0d0b 0c1213f4 eb03f403     ................
   327c8:	00f10405 08fb0604 fe01ff07 01041b20     ............ ...
   327d8:	07eff1f3 0708fdf7 060dff00 0efe0a0c     ................
   327e8:	f4010d10 f0fdf0fd 06fe01f5 0d070203     ................
   327f8:	0c0df505 f0f9fd05 fa07f0fa fe081517     ................
   32808:	f303fc04 ff130305 f1f3fc03 f1f50d05     ................
   32818:	fa0514fd fa020efe 08ff0311 f7fcfd02     ................
   32828:	fcf6f7fc fa040205 15fa0213 fe03fe05     ................
   32838:	00fdef00 05fef509 0706f9f9 0d0606ed     ................
   32848:	ff06feff fcf3fd02 0203fb06 0000fd00     ................
   32858:	0a0b0401 f5f6f805 03f505fe 0b000af7     ................
   32868:	05010cff 06fd0105 02fc0303 ff08f1f4     ................
   32878:	08fef906 0efd0805 03f8fd03 01040107     ................
   32888:	fa080006 fff9f6f2 fdf703ff 0100f5fb     ................
   32898:	f5e7f800 faf40c02 00ff0200 fffdf703     ................
   328a8:	03faf6ef 0102fc04 f7f705fb 1001fafc     ................
   328b8:	f402fbfe 04fff801 f003f8f5 edf0fe0e     ................
   328c8:	f30cf705 f6fdfdeb ffff00f9 0804fa03     ................
   328d8:	fffbf3ff ecfa06eb 0006ebf2 fafffff9     ................
   328e8:	00fd0dfa fd04fef7 f2ecfc12 fefefbe9     ................
   328f8:	03fb0a04 fe031409 13ff08ff f1f5f3e5     ................
   32908:	ff0301f8 0001f803 e5fb010a ec0305fe     ................
   32918:	00fefaef f5020501 fc0501f4 0dfdfdf3     ................
   32928:	ebe50401 06fdfbf7 f90002f6 0400fdff     ................
   32938:	fa05fcf2 fff3f30a f5f900f0 f6ff000a     ................
   32948:	fbfcf8fd 05f3ebf8 f9faf0f4 02fe08f4     ................
   32958:	f6fff8f3 f3eaf805 ef04fff6 f6eefdf0     ................
   32968:	03fcfb04 fb04f900 f1fe07f0 f4e70af9     ................
   32978:	faf9fcf9 f3fbf5f7 00fd0203 070905f6     ................
   32988:	f2f2f205 eb00f701 04fa0406 f2f9f900     ................
   32998:	09f002ed f9f2f5f7 0605fef4 08ffe9f9     ................
   329a8:	ecf705f4 f200fffe 0301f1eb f404fa06     ................
   329b8:	e9fcfdef 1101fce8 e9e408e1 fd09fffb     ................
   329c8:	f6ff0bee 0501110b edf9edf8 f2e5e608     ................
   329d8:	f3f603f1 faf7fe0c edf7f8f4 fdf6f9f0     ................
   329e8:	fbf2f7e1 06fd03fc 071104f8 f5f0f802     ................
   329f8:	e503f401 f1ebebf2 fe10f3fe f5fe02fb     ................
   32a08:	01fa0df8 f5df0bf4 03faf1ed fdfe11fa     ................
   32a18:	f8fcfffc f910ea0b f0eceb04 ed0004ea     ................
   32a28:	f7e8ff06 fd07f1f3 ff020c07 fe03fff3     ................
   32a38:	07faf7fd 07fae006 f9f5f6f5 eefb010b     ................
   32a48:	06fcf7f1 030c080b fcff0cfd f0f40b0b     ................
   32a58:	f7f5fd05 f1fc05f3 f90a0cf0 01010000     ................
   32a68:	010204fc 02eff807 eef9fbf3 07fd1109     ................
   32a78:	f80c03fc fbf60c04 0003fefa 0a0206fe     ................
   32a88:	f7fe0001 0807fc0b f2fafa0b f6fb09f2     ................
   32a98:	06170408 0a010e07 f6f3fcf6 01fefc04     ................
   32aa8:	0506f906 0aff1303 0107f5fa ebf9ebfd     ................
   32ab8:	f900f8fc fd04fffa fe02121b f8f207f1     ................
   32ac8:	fe0b0e00 f6000a02 14ff0003 f903fe04     ................
   32ad8:	0af7fbff fffffa13 fcfbf9f6 0d0bf500     ................
   32ae8:	0b03000e f7f80cf1 01fcfaff 00020706     ................
   32af8:	0806fdfd 0c08040e fe030004 f901f800     ................
   32b08:	f506f5ef fd051415 fcf80603 06fffdfe     ................
   32b18:	ff0505fe 16080106 05fb0401 020f0403     ................
   32b28:	ff060010 0c04ff0c 030cf507 0f05fb07     ................
   32b38:	0b020305 fe08050b fb01f8ff 09f9f3fc     ................
   32b48:	00f2fcf5 f4fc03fa faf3f905 fff80502     ................
   32b58:	fd00fffe 03f7fffd fff6fff5 00f8f5fc     ................
   32b68:	ef07fdf8 fcf604fc fd03f9f9 f8fc0103     ................
   32b78:	f8faf200 fa01f5fc 0202fc0a 03f2fdfb     ................
   32b88:	fef7fe04 f8fe03f5 f7fd0407 fff803f9     ................
   32b98:	f8f3fe05 f2f9fe0a fa0602fa fefdfef5     ................
   32ba8:	00fc02f9 03f6faf7 faf9f6f3 fe0901ff     ................
   32bb8:	fef60604 fbfefaf5 f30500f8 01f5f8f9     ................
   32bc8:	02f8faf5 f304fb01 f500f902 f9fb09f8     ................
   32bd8:	f7f7fcf1 020efafc faf80604 f907010b     ................
   32be8:	fdfafb09 ff0501fc f2f30701 0801f8f7     ................
   32bf8:	fd0401f6 f101fff6 f603fb03 02faf5f5     ................
   32c08:	04f50301 030006f9 01ffeef3 03fcfbfb     ................
   32c18:	f7f6f7fa 02f2fefd fbfb0ef9 f2f5f6f3     ................
   32c28:	f6fff805 fcf700f9 fffafc01 f6f60208     ................
   32c38:	f8fcf5f6 fefe04ef f607fc07 07fcf7fe     ................
   32c48:	f4fef6f9 ff0004f9 f8ff02f6 f600f7fb     ................
   32c58:	050dfcf2 07f8f7f1 04f8f9fa fefcf7f5     ................
   32c68:	f7f309f8 fb0500f3 04fbfcf0 0609f4fc     ................
   32c78:	f6f0f7f5 fefcf9ff f2fffb0b 01ff00f9     ................
   32c88:	f6fefbfb 03edfdfc 03f9fdf4 fbfc01fa     ................
   32c98:	f8f708f9 f3fa0201 fffcf4fe f9fbf708     ................
   32ca8:	fdf8f9fb fbf4fe08 f800fb05 01fffdf6     ................
   32cb8:	fdf1fefc fff7f4ff 070b03f7 f5f203ff     ................
   32cc8:	08fb010d fff60104 0503f6fc fbfe0401     ................
   32cd8:	02050406 ff07f902 fdf5f7fe 03f9f6fd     ................
   32ce8:	05f80705 0604fe0a fffd07fd fef401f6     ................
   32cf8:	f8faf8f9 f3fc02fb fb010203 00fb0bff     ................
   32d08:	f6fc0400 f4f7f5f4 fafdf8f8 0002fef4     ................
   32d18:	ed010201 08fef2ef 0308f8f5 fef7f7f8     ................
   32d28:	0c02f8f8 f6eff9f7 fafcf7f2 06f9f90a     ................
   32d38:	ffff06f5 0503faff edfffdf6 07f602ff     ................
   32d48:	fafdf804 f9fafffe 02f60800 03fbf2f6     ................
   32d58:	07fcfcf9 03fdfff9 f2f50108 f4f80910     ................
   32d68:	01f501f8 fefd00f6 0102f8f0 0ff8fefa     ................
   32d78:	01f0fffb f5fefbf2 01fbfe04 fd0900f7     ................
   32d88:	02070501 f9fbfcf9 03fdfdf7 0100f8f5     ................
   32d98:	05f502fd ff0110fb fe0805ff 00fbf605     ................
   32da8:	05f6f3ff fbfcfafb f2fc020e 07f2f405     ................
   32db8:	eefff902 f509fef9 0803fafa 05030405     ................
   32dc8:	f800feff fe0003f8 f80df204 030301fd     ................
   32dd8:	fc080002 f80107fc f5fdf2fb fdfffbfe     ................
   32de8:	fa010dfa 02f4f503 fbff0706 03faf7f8     ................
   32df8:	f900f405 05f50406 02f2fefd fcfcf602     ................
   32e08:	f70af904 0e02f700 0205f2ff faf8f3f1     ................
   32e18:	0501f7f7 f5faf9fc fe0b03fa f9fdedf6     ................
   32e28:	f5f900fc fbfefff8 ff01f603 f3ff0df9     ................
   32e38:	fceff6f9 fafffd01 020100fb fef9f2ee     ................
   32e48:	fb03f606 0103fef9 f605f705 fe0300fa     ................
   32e58:	00f7fd06 0402f8ff 000702f2 010401fe     ................
   32e68:	f806fdf8 f70cf8f7 f900fef1 040b0100     ................
   32e78:	fafcf408 fbfefd04 fafc060a 07fcf6fd     ................
   32e88:	fefef5fc f601f8f8 ff000003 05010005     ................
   32e98:	00fdfcfb f9f20d04 fff9f604 0104f702     ................
   32ea8:	fd00fe00 02fefbfe fa06fa08 f80004fa     ................
   32eb8:	010d0303 fa05f6ff fefb00fc 07f5f500     ................
   32ec8:	05ed02fc ff0201fc f90003fc fbfbfcf6     ................
   32ed8:	06f8fef0 f7f90001 04f3090b fbfdf3f8     ................
   32ee8:	f305020c fdfd04fd 06f4fef8 0301fd02     ................
   32ef8:	f3fcfff3 fdf005ff fafbf9f9 0808fa05     ................
   32f08:	f1f706fe 08070bfd fffd0309 00fafafa     ................
   32f18:	02020203 fcf6fd01 f102fffb 08fef9f5     ................
   32f28:	0304f4fa fafcf806 06fffdfc f704f8fb     ................
   32f38:	0304fe03 fef7fdfd 00f3f500 01fcfbf7     ................
   32f48:	feea0707 05000107 fe01f807 f2f8f8f9     ................
   32f58:	f607f600 f8fa04f9 ec020bfa f9f7feee     ................
   32f68:	00fc00f2 0004faf4 fcfefd00 fb07f8fc     ................
   32f78:	fdfafe00 ff00faf9 0006f7fd f9fdfaf8     ................
   32f88:	0f0403fd f3fe03fc f9ff0401 fc0304f7     ................
   32f98:	f5f7f300 fffffefc f7f6f8fd fafdf2f4     ................
   32fa8:	fe0901f9 f5f806fe f70608f5 05fbf9f3     ................
   32fb8:	00fdf607 f1f9fdf4 f7f5f5f6 0503f609     ................
   32fc8:	00f3fa01 fefdf9f8 05f303f7 fef501ff     ................
   32fd8:	00060100 09fcf906 00fc03fa f503010c     ................
   32fe8:	ee0cfaf8 0cf2f6e4 01f60406 fdfd0100     ................
   32ff8:	f4f3fcf3 eced0efc 1204f3fc 0f131b10     ................
   33008:	f5f9fbfb fff8fef9 03e4f40e 0c020fee     ................
   33018:	f8fdf50f f406f7f4 0cfa0800 ec00f3ee     ................
   33028:	060604fd 0006f8f7 f5fd0300 f806f8e8     ................
   33038:	000203ea fd050110 f901fffd e706fcf7     ................
   33048:	fb00fff2 0a160802 070705ff fcf7f5fb     ................
   33058:	04faeafd 11fc07fa 07000f0a 03020f07     ................
   33068:	fdff03f9 0bffeff0 0d07030a 080f000a     ................
   33078:	f70b080b f1040ef6 110304f6 0902ff00     ................
   33088:	0a160403 041702f7 f2fe0106 fb0df907     ................
   33098:	fc12fdfa ed120f02 f9040007 01f3fb0b     ................
   330a8:	030e17fd fc001807 03f4020c 0cfffffb     ................
   330b8:	08f7f1f2 fc080d17 0a06fdff 120df402     ................
   330c8:	f804fcf6 0dff010d 0a07fdfd 0500fe0b     ................
   330d8:	03140208 f1fc01ec 0712f8fd fb0a090a     ................
   330e8:	fe0b14f4 f4eef6fa f3f80610 11070d04     ................
   330f8:	edfd0efe fd0a1b0b 0d04fef9 f90ff702     ................
   33108:	07100916 1007f201 0e05fdfa ff11fd04     ................
   33118:	0d04fb02 02fafd09 0401fbfe fb04f6f9     ................
   33128:	f9ee04fe fa1501e9 f0060e07 fc0e1df9     ................
   33138:	05050307 09faf009 0b0d0dfc ecf10611     ................
   33148:	0afd0f0b 1204f60a fb06fe07 0d00011e     ................
   33158:	0df3f103 0e03f403 06170403 14f7fd00     ................
   33168:	030e0309 02110801 010f03f5 f2ee1601     ................
   33178:	1415f6fc fe0703fd ed0409ef 05fb0901     ................
   33188:	f4ed000b fb0714fe f4ee0604 fffffb06     ................
   33198:	1604fa11 0c0efefd 0403110c 0ff6fefd     ................
   331a8:	0609f806 f6130604 13f407f8 030b0204     ................
   331b8:	050af902 ff0bfcfa e70809f7 fe08fe00     ................
   331c8:	03120901 f8fdf3e9 08f5f3f7 09f90404     ................
   331d8:	12ff0904 0200f6f8 05fb050e 10030000     ................
   331e8:	fc03fc0d f9f90506 13fcfff9 02fd0b07     ................
   331f8:	00150505 0d02fafb f50bfef7 f6fa0208     ................
   33208:	fd04f6ef fc01f601 080ff90b fc0506fd     ................
   33218:	00110af4 08fff7ee f1050801 12fd03fb     ................
   33228:	01010711 fdfc01fe 1201fefd 0704fbfa     ................
   33238:	0a0b0007 10f8f9f3 0d0eff0b fb150c01     ................
   33248:	0a02faef fe100cfe fdf7fb05 fafe0cf9     ................
   33258:	f5fdfd09 05090507 04fcfe08 fc02fe06     ................
   33268:	02ff0cfc f8f90f08 05ef01fd fffcfa03     ................
   33278:	06fe0af4 150e0809 f9f6fdff 0507f70e     ................
   33288:	f5fd03ec faff0c04 fe090a02 0ffbfef8     ................
   33298:	f70300f2 04f70704 040107fe 0101130c     ................
   332a8:	f50b0116 0418f609 011508ff 0a020f07     ................
   332b8:	fbfc0113 04fb1503 fd06f3fb 08050d0f     ................
   332c8:	0f04fb06 fdfff807 fb06f80f 120409f4     ................
   332d8:	fd00020b f40ff701 070906ea fdf40ef9     ................
   332e8:	faf80608 06070ef9 f20409ff f0020bfc     ................
   332f8:	0808f20a fe110af3 fc05f704 f601fc12     ................
   33308:	0cf8f8fd f606f6f5 fc0d0b10 1b09020a     ................
   33318:	0215f906 f307fd06 fc0203e9 06010704     ................
   33328:	0e04f9f7 f80b11fa 040107f7 0a030209     ................
   33338:	070dff09 eefc03f9 f605fcf8 0e02f800     ................
   33348:	f6020cfe 060105fc 06fa040e fbeefd07     ................
   33358:	fe02fffa 0500f908 11fb0610 04fa01fa     ................
   33368:	08080306 06fd0cf7 fafdfe09 030af908     ................
   33378:	08fd02fd 03100204 fe11ff08 00050bfd     ................
   33388:	e5fd0000 f1080a06 04fc0b00 0f000d07     ................
   33398:	0805fdf8 ff0cfc1c f1f70a05 f40d0301     ................
   333a8:	fafbf800 0bf307fd fdfb07f7 f602020a     ................
   333b8:	fcf8fe02 01fdff06 f611f804 fd00fef6     ................
   333c8:	0c0a01fe ec060106 f1fc0105 f90511f8     ................
   333d8:	feff0c09 fcf800f5 feff0d05 feff0801     ................
   333e8:	f8010006 01f60eff 02fe04fd f6fbfbfb     ................
   333f8:	18f80e04 0406f60c f9f7fff8 0b07fcfe     ................
   33408:	0af0fdfe fd07ea01 0308f4f8 060309f2     ................
   33418:	f3fbf904 fb0a09fe fe110c03 f3fa0401     ................
   33428:	f6f70702 0bf8fa05 04f703f1 fd080904     ................
   33438:	fef6010f 1409fbf7 fc04eeff 080100f4     ................
   33448:	fcf21209 f602f9fc 0dfefdfe fff807fb     ................
   33458:	fe0e03f7 00fe08f9 0e0208f2 f900fafd     ................
   33468:	fb0005fd 0c030705 effd0a02 05f90bf4     ................
   33478:	f40503f4 00fcf8f4 05f4fdf1 f8f2f902     ................
   33488:	0401eefb f3f5f5f3 fffefe04 01050afe     ................
   33498:	f2f1efee 01f70a0c 0cf3f2f7 05fcf7f9     ................
   334a8:	ef0202f6 02fdf4fd fef9f4fe f205f8ff     ................
   334b8:	00fff5fe f0eefe0a 0401fff3 fdf4fdfc     ................
   334c8:	fcef0ae9 fbfef703 f8fdf508 f8f304fb     ................
   334d8:	f0f6fa04 0c00f308 07f4ff00 ffff0001     ................
   334e8:	ff01f709 07f90af2 f7faf2f7 fbff06f8     ................
   334f8:	0a0afff3 080405f7 fd0905fc f5f002f7     ................
   33508:	ff03fbf6 fe11fc02 050109f6 fd00fef6     ................
   33518:	00effbfd f5000000 05f3070e f90bf500     ................
   33528:	fcf90701 06f9f9ec fafb0606 fff5fefa     ................
   33538:	06f102f2 f5fff5fb f8fb00f8 fb01f30b     ................
   33548:	05fff5fc fe05fbfe 02f1f5f2 0701fbfd     ................
   33558:	f905f9fd fe0307ec 02f2fd02 feff0106     ................
   33568:	f3020201 f3ff0b06 04f4fa03 0303f001     ................
   33578:	ff02feef 00ee0506 09f605fd f8fb05fa     ................
   33588:	f1faf30b fd09f103 00f8fe06 ff06f905     ................
   33598:	f0ef0208 fdfbfefe fc0104fd fbf8fdf4     ................
   335a8:	04f704ef 02fdedf4 060dfefe fffdfaff     ................
   335b8:	000400ff f8f7f70c f901f9fa 03000405     ................
   335c8:	f30400f4 0cfb08f7 f0f3f8fe fd010bf3     ................
   335d8:	fbfaf601 f9fb0b00 0703f707 f8f708fb     ................
   335e8:	05070a13 fe040206 fdf9fa02 030306ed     ................
   335f8:	050503f7 0808feee 07ff0007 ee00f0fa     ................
   33608:	01f502ff fd04f9ff fd02fb07 fbfd06fd     ................
   33618:	fc040b01 f3fd03f9 07f90902 fc00fbf9     ................
   33628:	faf1f602 08f7ef05 fa00fbf4 fafe0405     ................
   33638:	09fa03f7 0102f0fb fffc02eb 10050202     ................
   33648:	08fe03f7 f60c02fc effffbf9 01fe0104     ................
   33658:	040cf7f8 fcfeeefc 030212fc 04f20100     ................
   33668:	fa08ff0f 0809faf0 fcf7fef7 0701fa0e     ................
   33678:	fe00fdff fdf0eff1 060cfdfa 00050204     ................
   33688:	fafa04f9 fd02ffe8 faf1f7fc 02ff0bfe     ................
   33698:	fa0605f9 f1040cf5 f2000703 07fff6f9     ................
   336a8:	f6080408 fa050209 f3f9fbfc fefe0110     ................
   336b8:	060af6fc fcff03fd 0c0008fb 0403f502     ................
   336c8:	f801f9f7 f70b0407 0701f902 05070504     ................
   336d8:	fc15f6fa 06f506f8 0dfbfbf4 f107f503     ................
   336e8:	f00707fc f0f401f4 0405fb07 f8040711     ................
   336f8:	03fdfff7 0101fdff f8f70805 00f9faf5     ................
   33708:	03020002 02fefff9 01fd02ff f203f002     ................
   33718:	f2fa0300 0b03f901 0502f503 01fdf8f8     ................
   33728:	03fd02fb fd08160f f3070403 fdf10005     ................
   33738:	0cfb00f1 0c01f7fe fffff209 fdf00cf6     ................
   33748:	f6fd0107 f603fff8 0603fb04 f20308f6     ................
   33758:	0a04f609 0af5fef5 fbfcfef3 fe050cf0     ................
   33768:	0301fafc f7f603f2 f009f7fc fe070700     ................
   33778:	fe020601 f505f904 f6f6f6f7 f9f20505     ................
   33788:	000a0305 fd070905 f6fb03f7 fc01f7f5     ................
   33798:	0702fc12 08010309 faff07f7 06fff1f9     ................
   337a8:	0ffc05fc 04f90901 fe000a07 07f7fafa     ................
   337b8:	f207fff7 f80d0100 09f9f9ff 07fb0709     ................
   337c8:	fffcff0f fcfcf907 f3fd060c f9fcfef6     ................
   337d8:	0304fafe f90102ff 0406fd0e 040cf2fd     ................
   337e8:	fffdfef8 fd0a08f5 0706020b 08f40602     ................
   337f8:	01f9fffc 00ebed03 0cfe07fd 000005fd     ................
   33808:	fa05f7f6 fff90203 fefe0402 020204fa     ................
   33818:	f9f609ff f1fafdf1 0c01fe01 0bff01ff     ................
   33828:	09f40606 fefcf308 100bfb02 ffff0404     ................
   33838:	fa120104 fd060506 fcfffaf5 ee03fbf9     ................
   33848:	01f2fff9 0a05ffff fb0efe00 ec0602eb     ................
   33858:	010009f9 f50903ff f3ff0808 fcf4060b     ................
   33868:	f1f3fbf4 05f5f801 00fa0df8 0902fc06     ................
   33878:	f8fcfd09 fffeecff 0409fbfb f60a08f3     ................
   33888:	fbfef706 01fff2f5 ed0900ea faf30204     ................
   33898:	02030407 fbfa03fd f1f8f4fe 040103fd     ................
   338a8:	fef4fb00 fa00fb03 fcfb0e02 fcf4fe02     ................
   338b8:	fdfd05fc 03f6f308 05f20304 f2f2f9fc     ................
   338c8:	04f7fbfb 04fefbfc f80a0702 fb00f400     ................
   338d8:	00f8f700 eff0fa01 f6faf501 f9f508fd     ................
   338e8:	f20508f3 fb06fbee fef7f8f7 faf9f5f8     ................
   338f8:	fb01fc11 fbf60bfc 01fcfffd 05050301     ................
   33908:	0e000007 0af905f2 0202f402 f7f9eff7     ................
   33918:	f5f3fef0 f507fefe 0101effa eff7fcfb     ................
   33928:	fdfafbef 00f5fdfe 00f601f9 f70205f8     ................
   33938:	f102fd03 f2fdfef6 fff2fded 0e100efc     ................
   33948:	0202fd01 fa04fdf9 0a0d0403 0603fff5     ................
   33958:	05040612 0a01edfa 02010402 fcfa00fc     ................
   33968:	0806fe0c f9ff020b 050bf7fc 00fbf6fe     ................
   33978:	05f908f1 0e0e0202 f80002ff 01fffff6     ................
   33988:	fcfffcfa 0400f908 fe05080a feeef4f6     ................
   33998:	f209fb00 020a0606 0d06fcfb f702f7ff     ................
   339a8:	f5f4f4f2 f6fe0001 fb03ff0a 0600fe02     ................
   339b8:	00f000f2 ff020101 fcfd0002 f9f902fc     ................
   339c8:	f6f70400 f905faf4 02f5f2fb 02030404     ................
   339d8:	fe08fe04 f7ef0302 fe02f6ec fbf5faf1     ................
   339e8:	fc060af9 07fff902 f6f6f3fc f70603f4     ................
   339f8:	fefa0a02 0705f804 fc03f605 fcf6f9fe     ................
   33a08:	07f209fe fc01f3fa f2ff0300 f7fd0b04     ................
   33a18:	01f9f8fa fdfdf807 0005f2fa f6fcff08     ................
   33a28:	05fbfd09 0d0003ea fe0300fb 000503ee     ................
   33a38:	0bf70000 f5f5f601 f40201f6 faf50f04     ................
   33a48:	fd01fe02 f8070303 f4faf3ed f70208f9     ................
   33a58:	fdf601f3 f8faf7f4 eff60404 02f7f1fd     ................
   33a68:	10f9eff9 0902f803 fcf8f9f5 fdf2f40e     ................
   33a78:	04fdfdf8 000001fd fe0307f6 0501ff0e     ................
   33a88:	f0f4f3f7 f1faf9ed fefe0802 02fefcfa     ................
   33a98:	f9ff02ff f7eff1fc 0005f807 f7f7fe06     ................
   33aa8:	fdf9030f f10107fe 06f4f5fc 1703fefe     ................
   33ab8:	f9fefbfe f403feee fbf7f0fd fc00ebf2     ................
   33ac8:	0000f8fc f0fff90c 02f40306 f5fbfbf0     ................
   33ad8:	050001fd f4f30bf5 faf102fd ed050003     ................
   33ae8:	f8fcfdf4 fbfffffc 0cfb0403 06f1fcf9     ................
   33af8:	fcf9fdf8 04f500fd 00fcf0fc 050801f9     ................
   33b08:	000202f3 fc01fd06 ff01f1f6 070405f9     ................
   33b18:	f3fd05f7 060ef9fb ef0303f6 fe07fbf6     ................
   33b28:	00ff00f9 fb030c0b 01080102 fdf7fd06     ................
   33b38:	fffaeefe 00f7fe08 fff8000b 0108f5fd     ................
   33b48:	fefbfafb fffbf5fd fff3fc03 fbf7fffe     ................
   33b58:	08fd0403 f903f4fd f80af6fc fdff02fb     ................
   33b68:	f7fcfe00 fc020204 fb070801 0b03fc01     ................
   33b78:	ff02f101 090d0900 ffee03fc 07090406     ................
   33b88:	03f8f209 fffc04f9 05fb010d 07fdfc06     ................
   33b98:	0706f6ff f704fe00 fc000afe fb000207     ................
   33ba8:	050003f2 f2030004 f3fe0cf8 05fc0bfe     ................
   33bb8:	fd07060b faff0300 f1ff0afb f0f902fb     ................
   33bc8:	fe0500ff f3080302 faf8fff9 04ff0101     ................
   33bd8:	00f4f906 02fd06ff 020d0606 f9eaf7fe     ................
   33be8:	f6010003 fefa04fb f80409f8 f504f9fe     ................
   33bf8:	f6ff03ff f70506fa 08f9f702 f7fafb06     ................
   33c08:	f4f8ecf9 00000ef8 07f9effc fb000409     ................
   33c18:	fdfefbf8 06f6faf9 05fcfd0b fa040301     ................
   33c28:	fa0bfff5 f4060305 0301f9f8 0308f9fb     ................
   33c38:	fe020903 fb0707fc fdeefcf1 fb010105     ................
   33c48:	01020c00 00010c05 fe010112 03f5fefa     ................
   33c58:	0a000302 fafe06fb 01020600 01f5fb05     ................
   33c68:	fdfa02f8 fcfff903 0e0afdf8 050cfb05     ................
   33c78:	01fa02ff 04fefffa 03f7fdfd f4fcfe02     ................
   33c88:	05fe02fa f204fbfa f60cfbf8 030601f3     ................
   33c98:	05f40904 fafd0506 fdf5fffa 02f704ff     ................
   33ca8:	fbf7fe06 09f5f500 00f70afc f7f1fdf7     ................
   33cb8:	fffdfa05 03ff0307 07010503 fbf9fa04     ................
   33cc8:	0cf8f200 faff0005 04fc0406 fd060302     ................
   33cd8:	fef901f4 0207f9fe 0503fafd 01fe04fa     ................
   33ce8:	f9070508 fdfef2fb f3fe08fa 0e01fbf7     ................
   33cf8:	0f06f7fa fcf7090e fbf901fb fbfefffc     ................
   33d08:	f9030702 fd0e0201 f602f809 f80506f8     ................
   33d18:	03fdf3f8 f7f9f9f8 fc0b0300 ff05fb01     ................
   33d28:	01f80401 fe050609 08050201 f3f9090a     ................
   33d38:	f800fff0 ff080a02 f7000504 0403fd05     ................
   33d48:	fbfc04ff f70304fe 00fcfbfa f6f500fd     ................
   33d58:	0e0c0105 030507ff fefb01fc 0efcf000     ................
   33d68:	00000907 06070204 f9f907f9 fc02f6fd     ................
   33d78:	0001f3fe 00f9fe01 fc080808 f6010100     ................
   33d88:	fbfb05fb f1fa0305 100200f5 fffd0d03     ................
   33d98:	fa0401fc f9fdf4f9 0f050501 0212fcf5     ................
   33da8:	fcf808fd fb050601 03fdfefa f307f8f5     ................
   33db8:	050304f5 0702020a f3000103 f5f900ff     ................
   33dc8:	010afffc 0b070009 fd04f5fd 03010500     ................
   33dd8:	02fb07fa 04fe0e03 ff02fe0d 0b0cf8ff     ................
   33de8:	f701fd07 f405f3f7 edf003fe 0c06f9f6     ................
   33df8:	050108ff faf60b03 f5f9f3f4 f8fcf8fc     ................
   33e08:	fd0703ed f308f80b f4fded07 fefcf9fe     ................
   33e18:	f0fcf100 040703fc 00fe07f6 f307fcf6     ................
   33e28:	fc07eeee fcee02f4 f9fff1fd fd05fb01     ................
   33e38:	07080905 f501fcf8 f804f1f5 f2e8f8fa     ................
   33e48:	01fdfc04 00faf9fb 0600fc07 0808fc02     ................
   33e58:	f0fff606 01fefaf6 00fef8fd fb07fafb     ................
   33e68:	fdf20403 f9fdf9fd fa040ffd ff0805f3     ................
   33e78:	01ff05fd 0805fe06 fbfdf1f9 f5f90306     ................
   33e88:	050906f2 f6fdfdfe fffafdf7 f0f9fcee     ................
   33e98:	f3fbfff1 07f704fa 07fb0209 f3050b00     ................
   33ea8:	01f5fdfb fcf1fbee 01000103 09f903fd     ................
   33eb8:	ff090402 f60107f6 0309f2f8 fb07fd00     ................
   33ec8:	080e0204 fc07ff04 f800f5f5 04110000     ................
   33ed8:	00040a06 f40401fe eff902fe f90103fd     ................
   33ee8:	06100d07 08090100 effff700 fefbfdf9     ................
   33ef8:	04f7faf6 fdfdfc10 02fdf6f7 fcf7fafd     ................
   33f08:	f8fb07fb 0afcf200 fe09fa06 0102f6f7     ................
   33f18:	f60c0501 ff0af9f3 0f1106f2 f4feff05     ................
   33f28:	01f801f8 f0fafdfc edf804f6 0d050405     ................
   33f38:	f704fb04 f0fbf509 f6fcfbfa fd00f604     ................
   33f48:	fe080b02 fef003fb f900f3fb f5fefdf2     ................
   33f58:	03fb0b05 ff030507 0303f7f8 faf9fdf7     ................
   33f68:	fcf7fdfc faff02ff ff0b0904 fff6f500     ................
   33f78:	f20000ff fcf1f1fd 080b0b04 efff0007     ................
   33f88:	fc03fff4 f7f0effd 0401f4fd ff050bff     ................
   33f98:	fdf2fc03 02faf4fb 01090bf8 04fffef6     ................
   33fa8:	06090101 0300fefb 0301f8f5 03f804fd     ................
   33fb8:	14010701 fc070101 fb0402f8 faecfe01     ................
   33fc8:	fbecf2f7 ff0f1006 fb05040b f7f202f8     ................
   33fd8:	fffcf9ff 05f0fe08 0b02050f fdfef5fa     ................
   33fe8:	f6f101f9 f300f003 fffe03fd 08fe040d     ................
   33ff8:	0301f2f9 fbf8f60c fbf0fbf8 090af9f4     ................
   34008:	02fafb0b 04fff1f1 040301f0 f6f504ff     ................
   34018:	06fe020c fb0700fd f8f60802 f8060204     ................
   34028:	01f5feff 0a010cfd fff7fcfd fffcfcfc     ................
   34038:	02f706fe fef6effc fc0b010d 06fdf701     ................
   34048:	f706f900 f1fafa01 0404f6f2 030108fc     ................
   34058:	f7f6fffc 02fdfe01 fdf6f909 fb02fe03     ................
   34068:	edf90409 fc0302fb f20501fb 07fff206     ................
   34078:	f9fc0703 fa00f6fd 05f6f8f7 fd03faf5     ................
   34088:	0705f9fa f9fb0e02 effcfdf4 fd070203     ................
   34098:	f4f9f603 02ff06f7 0607fa07 fcfbf704     ................
   340a8:	0707f9f6 f9fafcfc 0a03080b f4fe03f4     ................
   340b8:	f9000402 f705fdf8 04f4f4ff 0afefc0c     ................
   340c8:	ecfcf804 00fcfaf3 00eef3f5 0504f7f6     ................
   340d8:	fc0105fd f8fbf4ef f109f909 ee01f8ef     ................
   340e8:	010afe01 f305020b 0b03fcfa 040a01fa     ................
   340f8:	0300f600 01ff0a04 f8fd04fb f0fd02fe     ................
   34108:	f9ffff03 fffcfdff f9010206 01050203     ................
   34118:	0202fefd f6fff808 060601f0 fb090cfe     ................
   34128:	f7f3fdfd 01fffc09 ef0300f3 fb07ff08     ................
   34138:	fb08fe00 f7f303f8 000211fd fafef905     ................
   34148:	0f0003f9 fdfe0105 0203f101 fdfe01ff     ................
   34158:	fd09f504 f6050003 03fb00f6 10fb07f8     ................
   34168:	fcf1fcfe 050403f4 0a1005fb 08fffb05     ................
   34178:	ff020906 f90408fc f2f5fff8 020508ff     ................
   34188:	fd0602fc fc0202fe fbfb01f3 f303010a     ................
   34198:	f3fe03fd 0004fbf2 0706f607 05f307fc     ................
   341a8:	ecfaf0f8 f3f4fa05 0af0faff f9070008     ................
   341b8:	f1fcf4fb fafdfdfd 08030600 f80906ff     ................
   341c8:	f102f903 fcfc0af2 fafef702 0ef9fd07     ................
   341d8:	f7f00502 f8f300fd fbf3f206 f8f908f1     ................
   341e8:	030a04f3 02fff6f7 0809fb02 0007f7f7     ................
   341f8:	0df80606 04ff01fd f5f9f6f5 efffeef2     ................
   34208:	09fdfbf6 09f7fe07 f10cf503 f1fcffeb     ................
   34218:	f9fa01ee 060307f7 fb07fef8 f5fcf900     ................
   34228:	eaf7fdf8 fafafb09 f4030907 eef50ffc     ................
   34238:	f3fffbf4 fcfffaf9 fa0506f7 f3f603fe     ................
   34248:	fdfafcfb fafdfbee 0202f5fc f400fbfe     ................
   34258:	edf1f308 0008faf0 f80201fe fafdfb02     ................
   34268:	ff0304ff faf704fb f8ee09fb fcfe0109     ................
   34278:	03f9fc03 f20302f0 f0faf9ff f4f1f3fa     ................
   34288:	fff503fd fbfcf6f9 f405f4fd fef401f8     ................
   34298:	f7fb01f2 04fbeaff 02f1fb01 f6ff04fa     ................
   342a8:	eb0400ff 08fd07f9 fe0502f5 fc04f608     ................
   342b8:	f807fa04 03f9f1f6 0000fffa 05f80301     ................
   342c8:	01fb0208 f5f30af3 f509faf0 09f1f402     ................
   342d8:	f1fd0705 fbfcf8fe f2f40304 03010af1     ................
   342e8:	050cf7f2 00f3fd01 05f2f4fe f2ed020a     ................
   342f8:	fdfaf905 f8fc08f9 f501f4ff fe0305ff     ................
   34308:	fafafbee 070bfbfe f303fb04 faf70600     ................
   34318:	f3f7f4fa 0500fd09 ff030b07 03020402     ................
   34328:	eeff03fb feffff03 f0f40109 ff0bf608     ................
   34338:	020209fe faf706fc fa0b00f6 08f4fa03     ................
   34348:	f7fb0e04 f0f8fa00 f8e6f8f8 0306fdf2     ................
   34358:	030df806 fafeff12 fcf7fcfd 06ffffed     ................
   34368:	fbf7f004 fdef03f4 05f60502 f3010101     ................
   34378:	fc03feff fdf6fd00 000e0208 f706fefd     ................
   34388:	f3edf906 020203f8 fc030af7 050202fb     ................
   34398:	fef7f9f9 faeff505 090002fd 0000fff7     ................
   343a8:	fd05f812 f7f508f8 edf8f2fb fa020600     ................
   343b8:	13fefcfe fefc0404 ecfbf4fc ff010403     ................
   343c8:	000aff02 fd090205 f7f3fa01 05f3fef5     ................
   343d8:	faf6f0f9 05f700f7 00f20f02 f6fcf803     ................
   343e8:	f6f1f9f8 f6fbfafd f10afe07 ff05fe12     ................
   343f8:	fdff0902 fd0107fd faf7fdf8 0ef30c07     ................
   34408:	fb02fdf4 0001f006 f6fbfbeb e703fcf5     ................
   34418:	041406ff 05f4fe04 f30404fb f900f2ff     ................
   34428:	07fef7e9 faf81607 f508f0f0 0901f705     ................
   34438:	f8fbffff ee0af70c f902ff03 06000cfe     ................
   34448:	f202f1f5 00fdf2f3 09f40aff fefa01ff     ................
   34458:	fe03ff02 fcf7fff4 fbf20006 03120afd     ................
   34468:	06fb02fb edf5fced 010600ef f0fa0303     ................
   34478:	fb000afd 0208f006 f9f10a00 fffcfe00     ................
   34488:	fa04fb0a fc030402 fd0304f0 ecfcfaff     ................
   34498:	f907f6f8 0b0000fc f506fdfe f3020306     ................
   344a8:	fcfb0400 edf4fbeb fe0900f0 03ecf800     ................
   344b8:	f006f7f4 eb0601fe f2eff8ff 020015fe     ................
   344c8:	f800f607 f2fefc04 fff0f8f5 f1e9f308     ................
   344d8:	0004f714 fb040af6 fb09f804 0302edfd     ................
   344e8:	0ff4f504 fef80100 00f6f602 02fff8f9     ................
   344f8:	0406f7ef 080f08f6 09f2fdf6 fbf700f4     ................
   34508:	f4fdfc03 fd02eff9 f701fe12 fefdfcfb     ................
   34518:	fbf80bfb f6f5fdfc 00fbf1fb fa02f606     ................
   34528:	fdff03fa f7fd0100 fafbf9f6 04fff7f7     ................
   34538:	060402f3 f9f3fb05 f1f30300 f7f6efe7     ................
   34548:	fa0610f3 05f0fe05 f2faf3f4 f900f300     ................
   34558:	f3f70603 030304fa f406f2f6 05f609f9     ................
   34568:	05f30104 fafe0300 f801f00d f4f60aed     ................
   34578:	f9f5e802 fafcf7ff 14fefb03 f9fff7ff     ................
   34588:	fefaf308 f7f70bec 0a08fbfe 0803fc01     ................
   34598:	fa040306 f0fcfd00 edfcfb05 fffef5fc     ................
   345a8:	f8081409 eefbfcf8 f3f0fa01 fefefafe     ................
   345b8:	06fdf7fe fff90703 02f10406 f6f8f2f3     ................
   345c8:	fe050106 0c07f9fa f70406fe 01f5f8fa     ................
   345d8:	fe05fafd fe0202fe fd0907fc 03ff0300     ................
   345e8:	f8f7f5f6 fcfbf6fa ee01fe0b f90201f8     ................
   345f8:	fe0805ff fae9f6f2 07f402f8 f8f101f6     ................
   34608:	fa020107 fbfc03ef 08fbeb05 020af002     ................
   34618:	0b02fdf8 0402f7fb 01fcf8f6 0403f900     ................
   34628:	f6fbfdfd 08fff612 fef8f90c fef4f6f9     ................
   34638:	fcfe0107 f5060802 00060802 060b0300     ................
   34648:	f8f7f300 f8fd00fe fc02fdf2 fffe0711     ................
   34658:	fe060907 07f2f4ee 01feedf5 00f7f3fa     ................
   34668:	ff070a05 f806f7fb f907ebfb f6f607fc     ................
   34678:	fb10fefa 00f4f505 04f3f7f8 04ecfefc     ................
   34688:	0bfb0204 fffc06f7 f4f8fefe f1efef08     ................
   34698:	f9ff0305 03f3faee f604f30c 02f7f4f2     ................
   346a8:	06ea00f3 eff401fb 0902fbfc faf6fc0c     ................
   346b8:	ea02fb01 fa0405f6 02f0fcf6 f80ef603     ................
   346c8:	fcfcf902 fef10600 f7f0ec01 0002f2f3     ................
   346d8:	0cf60405 05fbff03 00f6ef00 0afaffff     ................
   346e8:	f7fc0400 fd06fc04 fe00f707 10fdf9f2     ................
   346f8:	f000fffd 080001fd fdfffaf9 f3fffdf4     ................
   34708:	f4fe08ff 09f3fd05 f906fefb 02f6ff09     ................
   34718:	02f2fa03 f1ee0aee fc05ef03 010204fa     ................
   34728:	0e0605f7 ff0904f8 01f4f608 04f1f2eb     ................
   34738:	fffafd0c 0004f8fc fbe0fbfd e908f3f3     ................
   34748:	08f5f3fd 0c07080d f6f40406 fffbf6fd     ................
   34758:	fbfd0d03 09030503 f60f0afc 00f5f104     ................
   34768:	1014feff 110d070a 090802f9 f6f70211     ................
   34778:	fb09f6fd fe000701 001214fc 08080e0b     ................
   34788:	0cfd0107 fdfe09f7 fcfbec06 0309fc01     ................
   34798:	13fe0d07 0402f1ff 050b0c13 0811080a     ................
   347a8:	0806fa09 0a0a0dff faedeff9 02020ef0     ................
   347b8:	fe03fd01 0b0802f9 01050e0e f00804f4     ................
   347c8:	fc00fe01 fbf00405 020d0808 f0fc0503     ................
   347d8:	0af7ff08 07fbfcfe 0501fffe 04060c10     ................
   347e8:	06effd02 000f0409 08060bfc 10fafbec     ................
   347f8:	f70e070e 0605f102 05010ce6 fc0a190a     ................
   34808:	1416fcfa 0af80206 fb0a03f8 07fa020b     ................
   34818:	00f7ff0b 0b171204 fafaf30b 010205f1     ................
   34828:	0b0cf404 fb02fbf9 160a0f03 05f8faf9     ................
   34838:	fd0aff14 fe100ef6 1ffafaf2 fa170310     ................
   34848:	fa0bf602 12ff0101 080af906 1c15f9f6     ................
   34858:	f8fc1708 f8f902f9 fff70600 f10c090e     ................
   34868:	12100af3 faf7f607 10fb0a00 0efc0503     ................
   34878:	f7060a03 0d0a0c0a 0af8fdfe 080afafe     ................
   34888:	130301f8 0ff30bfd ff060806 0e06f8f9     ................
   34898:	fa0701fd 0701f908 1210f9ff 04071d15     ................
   348a8:	ebf3fdf5 06ff0403 f9040900 111717f4     ................
   348b8:	f20b0301 07ff08ee f60bf70a f4020004     ................
   348c8:	14111816 17f5ffff faf9010a 0dfb07f8     ................
   348d8:	14f1f2f4 ff0e1219 05f5f9fb fdfcfdfb     ................
   348e8:	0e03010a 1c130000 fc071b10 f5f6f7f9     ................
   348f8:	050504f7 fcfbf2fa 0b0d0602 0200020c     ................
   34908:	ecfe0205 fc0efcf5 030101fa 0c050b03     ................
   34918:	fffff6f2 fafaf808 0610080b fff900fc     ................
   34928:	0e0ff803 0203f808 031310fb fe02fd08     ................
   34938:	0209fdfe 12fd0804 f10bf700 f6000300     ................
   34948:	0002fe07 f7090206 090af8f5 fe02f7f6     ................
   34958:	0a0afd01 0108fef7 0bfa0b04 fb14f9f0     ................
   34968:	f8fffd0c 06fc02fd 0600f6ff 04fcfd09     ................
   34978:	f7ecfe03 12fbfafb faf2f6fa 0ffc0202     ................
   34988:	f9fffef9 0604f0fe f8030409 00fffbff     ................
   34998:	fc000009 fc03fdf0 00ff060c ec09f903     ................
   349a8:	01f10f01 e7e9fcf5 07010af4 15f8fb00     ................
   349b8:	ff060705 e709f600 fcfaebfb 0c050702     ................
   349c8:	08fffaf8 0bf7fe05 f5e804f8 0bf9fdfd     ................
   349d8:	f5fd0206 000205fa fc050600 06f0e305     ................
   349e8:	fcfbf101 f2fb06fb fe0cfe0b 04f102f7     ................
   349f8:	eaf0fcf2 09ff06f0 f9f5fa0c fdfcf900     ................
   34a08:	eefdf5f3 f403faf0 050404f5 01fb02fe     ................
   34a18:	f2f7fc0c 0beb02fe faf7e5f8 f9fbf502     ................
   34a28:	fdf70001 fc0d0201 e9ebe8fe fbfbeef7     ................
   34a38:	04f80e07 060cfef9 0bf307f6 eee6eeed     ................
   34a48:	03e8fbec f9f9fd03 f3fb09fb dd07ef11     ................
   34a58:	f1f0f0f7 02f6fdfe ff0600f6 f9f8f209     ................
   34a68:	eedf0af6 01fe06e9 00030e06 02fffc05     ................
   34a78:	ee05fcf9 f6f3e708 ff04f7ef 00ff05fc     ................
   34a88:	04fcfc06 05f302fa ecf4eded 0afdf5df     ................
   34a98:	0102110b efee0605 dcfefaf7 f2fcfae9     ................
   34aa8:	0d0cfcfc 0afe0a12 0801010e efe100fe     ................
   34ab8:	03e5dff8 07020afe 08fbf304 f002050d     ................
   34ac8:	eaebe310 16feebe9 fbf7fd0a fb08ff03     ................
   34ad8:	16fefefa eef3e0e6 03ebf9d9 f4fbf909     ................
   34ae8:	f90b0efe e60f090b eaf7f1e4 fc1bf1f7     ................
   34af8:	01fe01fe ffefebf0 f6e80e09 f4f8f4ea     ................
   34b08:	081e1200 09fffd0c fe01fb08 f9f4f216     ................
   34b18:	f5eee9fb 0f070bfd 0201fff8 08fd0508     ................
   34b28:	e7eee0f8 fdfc04e6 fe121007 f4050efe     ................
   34b38:	ed110013 e7ebedf3 f9080f0c 01f80607     ................
   34b48:	0804f809 ede71801 faf4e6ef 04171e07     ................
   34b58:	f50afefc f7060505 f7fafa0a fef9f9e8     ................
   34b68:	0b16130c f7fb04fe 0b000100 e9f1edfd     ................
   34b78:	18050df0 eb011213 fb051106 f601fb05     ................
   34b88:	f6f3e8ef 060206fe fef80cfb 09030d12     ................
   34b98:	e4f91001 0700efed 0a1d0600 f5010203     ................
   34ba8:	0c0007fc ffff030b 0105efef f40f0705     ................
   34bb8:	0c090904 0bfe0f04 e1f50cfa 0ffcf7f5     ................
   34bc8:	fdfd0b11 08000208 f60cfc03 f1fd0c08     ................
   34bd8:	040401fe 03f80300 0afa0710 fcfd010b     ................
   34be8:	1004fe02 0d0705fb 07fbfb05 0715f9f6     ................

00034bf8 <dense3_wt>:
   34bf8:	ff19edf9 0a17ff0b def8091f eeeef905     ................
   34c08:	eff8e719 d90d1a0e eef50bfc 03000711     ................
   34c18:	fbff0000 191bfc17 1e03e6f9 1410141b     ................
   34c28:	f5091e06 e2f11204 08f2f1ec 1ee0fff2     ................
   34c38:	f2f7eb27 1f0225ff 1305091e 051b1006     '....%..........
   34c48:	0adb0dff 131613f8 f6f60c09 f516edf1     ................
   34c58:	0a11fce8 fb000f08 060e12fb 231b1617     ...............#
   34c68:	edf509eb fbdfdfff 2ce7efff 0b090b06     ...........,....
   34c78:	f9e815f6 16faf81e 0eedfddc edea0006     ................
   34c88:	e50917e7 ffe3f315 1ef60ae7 11071517     ................
   34c98:	f90cfef9 12fdebed ff1dfb1f f4f1fe11     ................
   34ca8:	1aeb0401 0718f1f7 00f8180a 071eec11     ................
   34cb8:	f3e4fb00 101214f8 fe12f132 f304f611     ........2.......
   34cc8:	f8de0210 e412ea20 082816ea 1e0ff4e3     .... .....(.....
   34cd8:	e211fcff 13e7f401 23ffe6f3 fb25f818     ...........#..%.
   34ce8:	06e10802 140b0f0d 1b04e9fc 1a09f7ea     ................
   34cf8:	ed00e0f7 f206f60c dce103fc faff11f2     ................
   34d08:	ed06ec1d f90501fa f3fd03e7 ee05f8e5     ................
   34d18:	ff03f9fe ec07e8f2 dcfd1af0 ec0325e3     .............%..
   34d28:	f0f311f0 e2110507 f1170ef2 0a1802f5     ................
   34d38:	f91603e2 dfefeb1b 1103f50a 0007e6f1     ................
   34d48:	0cf0f70c f418f0f1 1c0df9ed f40803ea     ................
   34d58:	10fcdc08 e604e10b f81c06e9 fc05fee5     ................
   34d68:	f907ff05 0c020905 03dd020c e9f7ecdd     ................
   34d78:	eff500fb 0c081602 fb0e1226 06f71408     ........&.......
   34d88:	ff05ec13 1912101d 07210902 210f1bd3     ..........!....!
   34d98:	f1fd17e6 e7f70ee7 1c00f2f7 f2f1e20d     ................
   34da8:	ddeaf7e9 06f7f9ec 1af813f9 15ece307     ................
   34db8:	0ff024fc 13e8ee1b 2315fbeb 120be3ff     .$.........#....
   34dc8:	050600ec 01ebfcf6 01ef030e f7f80f26     ............&...
   34dd8:	100e15f9 edecfce9 0f040725 fafbf6f9     ........%.......
   34de8:	f400f01a f226190c fb19f902 01191401     ......&.........
   34df8:	fe0912ee ec101de4 0a0e06f3 1afcfaf9     ................
   34e08:	03f3ff21 e91c1622 e81d1b0e f50e18dd     !..."...........
   34e18:	05fcfe08 eb030f11 130edffb 0d24f801     ..............$.
   34e28:	12f71406 fcdedce5 1509ed0a 14090ff0     ................
   34e38:	0ce0fd07 edecf5e5 eff0f2e4 e5ecfffe     ................
   34e48:	e7fd16ea 0ee912f4 e4fbf90c e2fa0ce7     ................
   34e58:	e0ede20e f2fee6e5 110f11f6 eaebfef1     ................
   34e68:	08eafae1 f80601e1 f60d0f05 e3ec0ff6     ................
   34e78:	e2def6ec 0a2327ec e614f803 0fef2015     .....'#...... ..
   34e88:	f1fbec18 151af5fa ff070619 1209fee4     ................
   34e98:	0d0304f4 f71df5ee f80e08ec fc1c0118     ................
   34ea8:	f5fa0ef5 00f1f7f9 18e7f7f0 00f3effb     ................
   34eb8:	fbf704ef 1214f214 2419e100 effbf3f3     ...........$....
   34ec8:	db0213e7 1b071701 01f3190f 02f2f714     ................
   34ed8:	fb0a0611 0c0cebf4 08021bf0 fae6dee9     ................
   34ee8:	0600f404 f51507f0 d80afef5 05f80619     ................
   34ef8:	e413f02b f012fdf1 f503021c 0dff1bfb     +...............
   34f08:	03ff02e8 dd1d0600 192327f8 f01af819     .........'#.....
   34f18:	06021df8 01e9161e edf814ea 0c1bf217     ................
   34f28:	1fe5f10b 0adbddfe 18e50cf4 12030a03     ................
   34f38:	02dffb14 ec12fc0f fcfbf9df feef0eeb     ................
   34f48:	150bfaff 1815e9f4 f210ea01 e806e1ec     ................
   34f58:	0be9f403 0ff9f0ed e9f016f7 edfcf509     ................
   34f68:	0ae6e2f9 fb01fcec 0ef1f8e0 edf7db11     ................
   34f78:	16eafbf0 ea070e0b 201de50e fae8ea0d     ........... ....
   34f88:	ee060cf8 f4e706f9 02e9e4fe effdfc15     ................
   34f98:	15f00325 1bffe7ed 18240409 edf50215     %.........$.....
   34fa8:	e5f914f6 1306251f e0181209 09fb1614     .....%..........
   34fb8:	0bef0fe9 edfa0718 11fcfef4 ee0bebf0     ................
   34fc8:	f7fb0f12 ed1701e5 0c08081a fef3ec02     ................
   34fd8:	250b1202 11ef0df9 04f7040b df0fef06     ...%............
   34fe8:	ee0cf213 e3fb0302 01061cea ec031d0d     ................
   34ff8:	1d0919fa 0def0325 1b13fa13 f9ea0ce7     ....%...........
   35008:	ff0605fc 03f01610 0310effb f2e8e6fb     ................
   35018:	f120ef14 e9edfa01 f6daf9eb edfe18f1     .. .............
   35028:	db0bf407 f61f22df 0a1512f1 f1f0fdfa     ....."..........
   35038:	e7160e20 1a07f0e7 f1150cff eb220d22      ...........".".
   35048:	f9eb1bfe e7f8f922 f30c1c0b 04090fe6     ...."...........
   35058:	11e7fcf3 e20e1913 fce2eee9 0413f2fc     ................
   35068:	e71b17ed 0005e8f7 fd11041c ef0ef1e3     ................
   35078:	f316edf7 f2dfec1f 0b12fc09 f2f30cf8     ................
   35088:	fe28fbfd 07101b1b 1ff91bff 04ebe900     ..(.............
   35098:	06ff0919 0314f7ea e6eb2112 ede619ed     .........!......
   350a8:	f623eefd e2ff221c ef22fcf8 0406fd08     ..#.."....".....
   350b8:	f2fe15f7 0621110e e8ec0616 17fcfe0f     ......!.........
   350c8:	ffe907fa 151d1312 f5250b08 1320fbec     ..........%... .
   350d8:	e6e7fc05 faf8ff1b 13e8fc06 1d060509     ................
   350e8:	1f1013fa f9f7f107 f40f1400 040014f7     ................
   350f8:	06160209 13edea02 0b0c00ff f5e408e0     ................
   35108:	f61d1516 02e4f51b fa11fc04 00090c05     ................
   35118:	ee04e8ff f10e12f6 1bf203fd ddedea11     ................
   35128:	001de6fb e8212908 e6df1ef2 e60f1707     .....)!.........
   35138:	d3f4da18 ed08f510 ed12f6df f90a0907     ................
   35148:	e6ed000a 0ff4e7f0 1b022012 ede60315     ......... ......
   35158:	f60b17fb f6ebde12 0aef07f0 27f2e907     ...............'
   35168:	f3f0efe1 110cf715 0308fcec 0fee0813     ................
   35178:	09f5f7fd 120603f5 f8f3f023 0e0c0118     ........#.......
   35188:	19e015fa 1e151201 0f1aff18 fa08f908     ................
   35198:	ecf113e9 1d0914f1 fcea0efc 2717f113     ...............'
   351a8:	edf41cee f7f9edfd 050f0f01 03ecefff     ................
   351b8:	070116ff eee8ed23 fa1b0af4 160bece9     ....#...........
   351c8:	0b08fde9 0bfd1509 1513ebe8 ecedf619     ................
   351d8:	0121f71e 041d04fc 0ef10823 01f9050d     ..!.....#.......
   351e8:	f3f1f523 ff0705fe e2f71dfd eb1a0221     #...........!...
   351f8:	f30cf002 ebfe0d17 2b15ed01 1be208f5     ...........+....
   35208:	1406ebeb 16f40616 eefaf21b f1f51914     ................
   35218:	18151415 0b0c0003 fd23f21a e7e0fbf2     ..........#.....
   35228:	ee1efb1d 031b0ae8 f11308ed 11f8ed11     ................
   35238:	f8f80ae4 f815f512 0a02f1fc f1fe16ff     ................
   35248:	e026ecf1 1afc0def 1afb0fe4 f6fde403     ..&.............
   35258:	fdec12f1 fafeebfd 1ee10818 f7db01f8     ................
   35268:	15101115 e807231b 08170cfd e729f9ef     .....#........).
   35278:	120c02e9 15e411f3 feebeae8 eef70006     ................
   35288:	01f31505 e3091401 100d0210 0ee20107     ................
   35298:	faf10f20 f6f5f708 e7f4100d ec0708f3      ...............
   352a8:	e919de03 e11627e8 f9eaf803 f81ce917     .....'..........
   352b8:	fdff0a15 f81912e3 fff60f26 fc081311     ........&.......
   352c8:	11e00eff 1916fa05 f7210af6 070c12e7     ..........!.....
   352d8:	031110eb e705feeb 140d1708 fd1de909     ................
   352e8:	ec12f307 02ebe9fc 01eae316 150ef6f6     ................
   352f8:	1b030df3 1213fe0b 16ed0e0a e9f917f3     ................
   35308:	1118f7fc eff40014 f7171108 e7f1e10e     ................
   35318:	110df425 ef17e2df 0cfbff0e 07ef1cfa     %...............
   35328:	0cfffa1c f8f52908 e509fde8 dd03ed20     .....)...... ...
   35338:	01e6fe0c f2090d08 29fcf8f0 fee2edfe     ...........)....
   35348:	12ff14df 08180aec f4e1ff1f fe0ced1f     ................
   35358:	f6230e12 12e7e8f2 121ffd17 f4e1f60d     ..#.............
   35368:	0b07f222 052201f7 0a0df503 01e71d00     ".....".........
   35378:	f1fef0fc 071a1ffd d60b1326 fa21fe06     ........&.....!.
   35388:	27f717fc fa170e1f ed21f315 f00ffde6     ...'......!.....
   35398:	edeaf9e1 1c141805 17ef0af2 f220e707     .............. .
   353a8:	dfff0cf7 fe0103e8 2af0f410 080102ed     ...........*....
   353b8:	ebfef7f3 de10e602 1bf6ec07 f60d0e13     ................
   353c8:	f31611f6 08ea12f6 0ef5ff0f e50909ed     ................
   353d8:	fef10ded eb19e0f8 10fffffb 0af1f2fa     ................
   353e8:	efe7e405 010e0210 df0afdf0 ef00e81c     ................
   353f8:	16e815f7 1507ef06 2413e5de e813e70d     ...........$....
   35408:	0d1cf2ea f9ec0be9 22ee061e 06e70007     ..........."....
   35418:	0bf4050d 20f610fc 08f4f91a e801e7ee     ....... ........
   35428:	ed0e04fe 0d0d151e 0906ebfd f0e91019     ................
   35438:	fd000013 18081f07 d9ecf21c f3220a07     ..............".
   35448:	1d09e912 0c1301fb 05190c12 1f111911     ................
   35458:	f60e13e4 e7130611 070005e5 2d22db22     ............"."-
   35468:	f5fb1de4 09e209fd 17e5fefe 03fb16e2     ................
   35478:	f8fb160d f3e6f024 041af907 0aeae4fa     ....$...........
   35488:	152f060f ebe81801 1aeded06 01ff0b0a     ../.............
   35498:	12f5ed0c 1dfef9f9 14260b04 d912f8f3     ..........&.....
   354a8:	eeea0c0a eb17f3f9 dd17fced 09231313     ..............#.
   354b8:	09e80ceb e500f006 081e0600 16190ff3     ................
   354c8:	e90c10e1 0de020f0 f0f4eb02 e90bf811     ..... ..........
   354d8:	2400030c f41417f3 fe160919 def4fbf2     ...$............
   354e8:	0610f8f3 0d0c2b1b 0d1cf1f2 f0f2f61f     .....+..........
   354f8:	f010f004 13030016 0216e3f1 12ecfaea     ................
   35508:	e5010d14 f0fbf415 f1e7f303 fd0bf209     ................
   35518:	f31d1010 0e0c0df5 e7e90e16 f002e811     ................
   35528:	e51bf717 e0152102 ec0c10f7 15fb1120     .....!...... ...
   35538:	eef2ec02 ffee0508 0ef0e9ee ede3f9e9     ................
   35548:	0cf5f31a 17ece810 e0df15eb 12060107     ................
   35558:	03ffe2ff 0ef1e9fd e2ef11eb f6f320f4     ............. ..
   35568:	f60505fe 04e609fb f90bf806 e909ebf8     ................
   35578:	1311050a 1803f5ec e2f60d16 12fefd1f     ................
   35588:	18e3fffc ee19f8f8 fafa070c 23fffe12     ...............#
   35598:	faf41607 0cfbedf2 1709fcf6 2022f40d     .............." 
   355a8:	e71125fb 03e501f0 1edeef1b ffea0cfa     .%..............
   355b8:	16ee0d07 0c241014 06f8f904 161a180c     ......$.........
   355c8:	0ae01dfb 1ff2f412 0213f916 26f702da     ...............&
   355d8:	fe011b08 fb2314ed 0ef003e7 0306f820     ......#..... ...
   355e8:	f8f0f20d 05e80ded f8f00807 20ebfcf0     ............... 
   355f8:	f606061e 1813fd12 fa07f2f6 f4f1f80a     ................
   35608:	1bfe14f9 2017dbe0 ee20e7ea ee0af8ed     ....... .. .....
   35618:	07e1f7ed 120ceedc fefff3fc e4f2f3e7     ................
   35628:	ef05e013 0d0602e7 f50cf4eb 1af10801     ................
   35638:	fcfe1a00 0914f7ef 09e80d0f 190a2226     ............&"..
   35648:	f2eaee03 eafe1110 f715fb09 ed04f305     ................
   35658:	f1ec0a03 e30a0212 f7ebfeea 2d22030a     .............."-
   35668:	25fe26fc f4f6ee18 02e5ed22 0203f0ea     .&.%....".......
   35678:	0ffe13f4 09f90b15 0ef41602 eceeeb03     ................
   35688:	e91d1010 f10511fc eb0afdfd e20ff302     ................
   35698:	1cfbf0ed ef17f8f5 1909150d e109e711     ................
   356a8:	06fbeb22 f0121f13 e604f002 141e0b20     "........... ...
   356b8:	15f40602 20f622e0 e803021c f0001128     .....". ....(...
   356c8:	21fe0d09 010af0fb 0d1820fd 1e17f111     ...!..... ......
   356d8:	dee1f6ec fa19111d 050a03ed 03fbf3f9     ................
   356e8:	05fb05fc eae7f0e6 29e708ec 0ef70a03     ...........)....
   356f8:	0215f3f8 00f1f7ef 00e311f8 140d111e     ................
   35708:	03080905 f2e6120e f01e07e7 f70802d9     ................
   35718:	e0eb07f2 fb03081b ffe11908 fff50410     ................
   35728:	1e04fdea 1504f5ea f2f6fde8 07ed09fc     ................
   35738:	1915f0f4 eb10011f 1a02fce5 100ceef9     ................
   35748:	1c21ff00 0ff50ce4 0812ebf3 ecef0405     ..!.............
   35758:	11f8f416 07050eed f2260a09 eb0a03f6     ..........&.....
   35768:	e8f4001e e51500fc fe030006 eb22f3fa     ..............".
   35778:	1e061708 ebf8ea1d 29fafa08 01eafa03     ...........)....
   35788:	f12c0503 15f11213 1ff1fdf4 f2e30719     ..,.............
   35798:	1c1c1212 0118f201 fa110719 d610f7f7     ................
   357a8:	0213e31f fa2afe0f 0a1d1eef 1618fe00     ......*.........
   357b8:	070af9e8 15ebf114 effaeb0d fbed06e4     ................
   357c8:	e531e817 100e1c0d fb0e0009 ebfa1621     ..1.........!...
   357d8:	21ec1218 e6fb10d6 fa141222 f7ed05ec     ...!....".......
   357e8:	f5050618 f1fb120d 0f040803 e10deef7     ................
   357f8:	05f70d10 0fe1efed 10fcfb0c fff0ec04     ................
   35808:	f016e8ec 0d0f010a 01030812 150ff205     ................
   35818:	0c12f6fe 06fbe9d5 dded1705 e0eb0eff     ................
   35828:	05edfbf9 eb14e6ef e5f1ede2 e3e10707     ................
   35838:	0615ef18 fb061409 f0081b0e 1afa1f1c     ................
   35848:	23ed1012 f6091520 0803fff6 0cf707fc     ...# ...........
   35858:	e70d21de 18100ef6 f7e1fbf4 ff241514     .!............$.
   35868:	f70000ea 11edfefd 11e6ea21 08f50cf9     ........!.......
   35878:	fee80afb eb0dfb14 0e0a0eff ebee10f3     ................
   35888:	f6f9120e ea0eee0e 0a0ff2f3 edee181f     ................
   35898:	1c1f021a 0ee7edf5 fe080903 01e0f1e4     ................
   358a8:	0718fd0c f116fb10 02f40b11 f1000cfb     ................
   358b8:	01eff915 f6f223f3 00ec14fa 14f21f09     .....#..........
   358c8:	21d7fc06 fd1dee07 f223f71b 08201a0e     ...!......#... .
   358d8:	0afa0f05 f91c0001 f9f5e812 1e141922     ............"...
   358e8:	230f24f4 1705ee11 19f80001 1df1f208     .$.#............
   358f8:	e9f1fd02 ef09da0d 1709f3dc 21e7e4f2     ...............!
   35908:	0109f9eb ebe3fff8 250c09fd 15f00504     ...........%....
   35918:	f413ef17 f51508f5 0c0e05fa e9eb0607     ................
   35928:	14f70e20 09f8fd22 f71017e7 fee512ee      ..."...........
   35938:	f7090e05 1c1ff3ee fa141920 060219fb     ........ .......
   35948:	f5ecec0b 0df817fa 0e1b0519 1f11fa04     ................
   35958:	0c0116e3 15f30902 0efe11f9 28ff0af4     ...............(
   35968:	f207fbe8 eae4fe0a 0de3f613 1eea0800     ................
   35978:	16f8fced 0f17e4f7 06f8e6e2 fcf60b04     ................
   35988:	0823f812 04fb141c 1ae9e80b ebf8f408     ..#.............
   35998:	0d1d1113 f1f00204 f0221f12 09fc03ea     ..........".....
   359a8:	dd1ef509 f81c1912 0a26f9ed 0611f80f     ..........&.....
   359b8:	f5f4f7f8 fe14fa0f 03190305 f2f50ce4     ................
   359c8:	ed080b0f e8f014f7 f414fffe f302f013     ................
   359d8:	0b10ed20 f7fc11db dce8feee e3f80013      ...............
   359e8:	f414ef15 f902fcfe f3ff03e9 ec27fe05     ..............'.
   359f8:	e816fff5 f3eef7f0 1c141ee7 1302edf4     ................
   35a08:	e02b1911 1911f5f8 de0e0303 03edfb0e     ..+.............
   35a18:	e41d03fa e42011e4 fce4faf2 f1e8ebe3     ...... .........
   35a28:	07f8faf4 0fecff09 fb000119 0b19e6ee     ................
   35a38:	e616f309 ff1d18fd ec02f3fe 051ffd1c     ................
   35a48:	26eaec1a 151cf619 f007fc0e 14fb0110     ...&............
   35a58:	dfe71dff fa071a01 f201fdf3 2b06f51d     ...............+
   35a68:	1bf9230c 0a0ce1f0 0606f3eb f2eaf214     .#..............
   35a78:	f0f7eff0 f408ef09 0b08e8fc 27fa040a     ...............'
   35a88:	0104ded9 ed082003 1ff4e9f7 ff00e921     ..... ......!...
   35a98:	150ff9f3 0bf10e02 13141526 f9e8fc06     ........&.......
   35aa8:	e7eefd19 f5f60206 dd04e4fb f0ef11ee     ................
   35ab8:	e8fe1712 021e0aee 0bed0e10 03fcfe16     ................
   35ac8:	20de0704 f2e8f41c f3f62300 0617f006     ... .....#......
   35ad8:	e4021fe8 f4f41028 21080102 23181bff     ....(......!...#
   35ae8:	05f820fe 010807fe 13f00110 fff50b00     . ..............
   35af8:	02edf90e 1d1405ff fb0c0e15 0610fb00     ................
   35b08:	ffe0f112 14f8f91e f206120f 1000f7da     ................
   35b18:	001001e7 06070bf2 0f10ec13 e9f7f215     ................
   35b28:	1a1403fa fef3e50a fbebf90f 13fe02f2     ................
   35b38:	fcef1d14 03f5e6e6 201ee9f7 07f0faec     ........... ....
   35b48:	0d2fece1 f7e61e1d 03de110f fffcf31a     ../.............
   35b58:	2bfb070a 09fcf801 0923181d dce8e715     ...+......#.....
   35b68:	fb21e70f e3ff0b0d f40f1410 fae81120     ..!......... ...
   35b78:	00e5fa1a 0cfce906 ea1702e5 f0e9faed     ................
   35b88:	ea0fedfc e5e604fd 010ceff6 0ffe06fd     ................
   35b98:	eae51617 05df19f6 10f30bee 030ef7f7     ................
   35ba8:	0918e703 ef0cfbef e201e7f6 f2ebfbe4     ................
   35bb8:	e8e7f414 fb020a0b f7fe2116 1a1d1ff3     .........!......
   35bc8:	1be70cee 050d051f fc0c0817 1fe4fcf0     ................
   35bd8:	0006fae0 0a00ef11 fb0703f9 fd18ed15     ................
   35be8:	f2e8f81a 0df8e2e9 f9e3fe07 19ebf100     ................

00035bf8 <dense2_bias>:
   35bf8:	fefc0004 071007ff fefb0b11 070b090e     ................
   35c08:	1203fe03 fd070116 f4090e0b 0aff00fd     ................
   35c18:	f3f10a02 fa070afa 0cfcf4f8 fe17f00f     ................
   35c28:	f6f60af8 f401fafd 0ffa0009 0bf7f1f9     ................
   35c38:	00000043                                C...

00035c3c <_global_impure_ptr>:
   35c3c:	20000a18                                ... 

00035c40 <__sf_fake_stdin>:
	...

00035c60 <__sf_fake_stdout>:
	...

00035c80 <__sf_fake_stderr>:
	...
   35ca0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
   35cb0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
   35cc0:	31300046 35343332 39383736 64636261     F.0123456789abcd
   35cd0:	00006665                                ef..

00035cd4 <__EH_FRAME_BEGIN__>:
   35cd4:	00000000                                ....
